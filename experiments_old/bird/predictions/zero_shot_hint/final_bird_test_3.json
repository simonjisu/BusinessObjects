[
    {
        "sample_id": 5184,
        "pred_sql": "SELECT zip_code FROM zip_data ORDER BY asian_population DESC LIMIT 1;",
        "retrieved": [
            5142
        ],
        "token_usage": {
            "tokens": 2259,
            "cost": 0.00039104999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.asian_population ORDER BY T2.asian_population DESC LIMIT 1"
    },
    {
        "sample_id": 5165,
        "pred_sql": "SELECT COUNT(zip_data.zip_code) FROM zip_data INNER JOIN congress ON zip_congress.zip_code = zip_data.zip_code WHERE zip_data.state = 'DC' AND zip_data.black_population > 20000",
        "retrieved": [
            5169
        ],
        "token_usage": {
            "tokens": 2331,
            "cost": 0.00041579999999999997
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'DISTRICT OF COLUMBIA' AND T2.black_population > 20000"
    },
    {
        "sample_id": 5203,
        "pred_sql": "SELECT (COUNT(CASE WHEN zip_data.type = 'post office' THEN 1 END) * 100.0 / COUNT(*)) AS post_office_percentage FROM zip_data WHERE zip_data.state = 'Saint Croix';",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2322,
            "cost": 0.0004086
        },
        "db_id": "address",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX'"
    },
    {
        "sample_id": 5166,
        "pred_sql": "SELECT zip_data.city, alias.alias FROM zip_data INNER JOIN alias ON zip_data.zip_code = alias.zip_code WHERE zip_data.zip_code = '19019'",
        "retrieved": [
            5152
        ],
        "token_usage": {
            "tokens": 2284,
            "cost": 0.00040155
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019"
    },
    {
        "sample_id": 5230,
        "pred_sql": "SELECT AVG(total_beneficiaries) AS avg_beneficiaries_per_postal_point FROM zip_data WHERE state = 'Guam'",
        "retrieved": [
            5227
        ],
        "token_usage": {
            "tokens": 2254,
            "cost": 0.00038669999999999997
        },
        "db_id": "address",
        "gold_sql": "SELECT CAST(SUM(T2.total_beneficiaries) AS REAL) / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Guam'"
    },
    {
        "sample_id": 5122,
        "pred_sql": "SELECT AVG(zip_data.female_median_age) FROM zip_data INNER JOIN country ON zip_data.zip_code = country.zip_code WHERE country.county = (SELECT cbsa_name FROM cbsa WHERE cbsa_name LIKE '%DeSantis Ron%')",
        "retrieved": [
            5095
        ],
        "token_usage": {
            "tokens": 2281,
            "cost": 0.00039344999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT SUM(T4.female_median_age) / COUNT(T1.county) FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id INNER JOIN zip_data AS T4 ON T1.zip_code = T4.zip_code WHERE T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'"
    },
    {
        "sample_id": 5208,
        "pred_sql": "SELECT zip_data.type FROM alias INNER JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE alias.alias = 'St Thomas'",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2332,
            "cost": 0.00041549999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT DISTINCT T2.type FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'St Thomas'"
    },
    {
        "sample_id": 5170,
        "pred_sql": "SELECT country.county, zip_data.zip_code FROM country INNER JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE country.state = 'VI'",
        "retrieved": [
            5152
        ],
        "token_usage": {
            "tokens": 2281,
            "cost": 0.00040244999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.county, T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virgin Islands'"
    },
    {
        "sample_id": 5133,
        "pred_sql": "SELECT COUNT(DISTINCT state.name) FROM state INNER JOIN zip_data ON state.abbreviation = zip_data.state WHERE zip_data.time_zone = 'Central Time Zone';",
        "retrieved": [
            5169
        ],
        "token_usage": {
            "tokens": 2297,
            "cost": 0.00039989999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT SUM(CASE WHEN T1.time_zone = 'Central' THEN 1 ELSE 0 END) AS count FROM zip_data AS T1 INNER JOIN state AS T2 ON T2.abbreviation = T1.state WHERE T1.time_zone = 'Central'"
    },
    {
        "sample_id": 5150,
        "pred_sql": "SELECT zip_data.city FROM area_code INNER JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE area_code.area_code = '939' ORDER BY zip_data.asian_population DESC LIMIT 1;",
        "retrieved": [
            5211
        ],
        "token_usage": {
            "tokens": 2293,
            "cost": 0.0004038
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.city FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 939 ORDER BY T2.asian_population DESC LIMIT 1"
    },
    {
        "sample_id": 5174,
        "pred_sql": "SELECT zip_data.zip_code, zip_data.organization FROM zip_data INNER JOIN cbsa ON zip_data.cbsa = cbsa.cbsa WHERE cbsa.cbsa_name = 'Kingsport-Bristol, TN-VA'",
        "retrieved": [
            5152
        ],
        "token_usage": {
            "tokens": 2301,
            "cost": 0.0004094999999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.zip_code, T2.organization FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Kingsport-Bristol, TN-VA'"
    },
    {
        "sample_id": 5112,
        "pred_sql": "SELECT DISTINCT alias.alias FROM zip_data INNER JOIN alias ON zip_data.zip_code = alias.zip_code WHERE zip_data.latitude = '18.090875' AND zip_data.longitude = '-66.867756'",
        "retrieved": [
            5097
        ],
        "token_usage": {
            "tokens": 2277,
            "cost": 0.0004005
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756"
    },
    {
        "sample_id": 5140,
        "pred_sql": "SELECT avoid.bad_alias FROM avoid INNER JOIN zip_data ON avoid.zip_code = zip_data.zip_code WHERE zip_data.state = 'PR'",
        "retrieved": [
            5152
        ],
        "token_usage": {
            "tokens": 2276,
            "cost": 0.0003994499999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'"
    },
    {
        "sample_id": 5157,
        "pred_sql": "SELECT alias.alias FROM alias INNER JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE zip_data.population_2010 = '0'",
        "retrieved": [
            5211
        ],
        "token_usage": {
            "tokens": 2303,
            "cost": 0.00041069999999999995
        },
        "db_id": "address",
        "gold_sql": "SELECT DISTINCT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 = 0"
    },
    {
        "sample_id": 5223,
        "pred_sql": "SELECT COUNT(zip_data.zip_code) AS postal_point_count FROM zip_data INNER JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code INNER JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.state = 'PR'",
        "retrieved": [
            5227
        ],
        "token_usage": {
            "tokens": 2309,
            "cost": 0.0004188
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Puerto Rico'"
    },
    {
        "sample_id": 5180,
        "pred_sql": "SELECT DISTINCT country.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE area_code.area_code = '410'",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2316,
            "cost": 0.0004077
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 410"
    },
    {
        "sample_id": 5113,
        "pred_sql": "SELECT area_code.area_code FROM zip_data INNER JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code INNER JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.state = (SELECT state FROM zip_data ORDER BY over_65 DESC LIMIT 1) LIMIT 1;",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2439,
            "cost": 0.00048195
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.area_code FROM zip_data AS T1 INNER JOIN area_code AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.area_code ORDER BY T1.over_65 DESC LIMIT 1"
    },
    {
        "sample_id": 5087,
        "pred_sql": "SELECT country.county FROM zip_data INNER JOIN country ON zip_data.zip_code = country.zip_code WHERE zip_data.avg_income_per_household = (SELECT MAX(zip_data.avg_income_per_household) FROM zip_data) LIMIT 1",
        "retrieved": [
            5092
        ],
        "token_usage": {
            "tokens": 2390,
            "cost": 0.00046019999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' GROUP BY T2.county ORDER BY T1.avg_income_per_household DESC LIMIT 1"
    },
    {
        "sample_id": 5143,
        "pred_sql": "SELECT congress.first_name, congress.last_name, congress.district FROM congress INNER JOIN zip_congress ON congress.cognress_rep_id = zip_congress.district INNER JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code WHERE zip_data.population_2020 > 30000;",
        "retrieved": [
            5148
        ],
        "token_usage": {
            "tokens": 2379,
            "cost": 0.00043784999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.population_2020 > 30000 GROUP BY T3.first_name, T3.last_name"
    },
    {
        "sample_id": 5228,
        "pred_sql": "SELECT cbsa.cbsa_name FROM cbsa INNER JOIN zip_data ON cbsa.cbsa = zip_data.cbsa INNER JOIN (SELECT zip_code, MAX(employees) AS max_employees FROM zip_data GROUP BY zip_code) AS max_emp ON zip_data.zip_code = max_emp.zip_code WHERE zip_data.employees = max_emp.max_employees;",
        "retrieved": [
            5119
        ],
        "token_usage": {
            "tokens": 2376,
            "cost": 0.000441
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = ( SELECT MAX(employees) FROM zip_data )"
    },
    {
        "sample_id": 5177,
        "pred_sql": "SELECT zip_data.zip_code FROM zip_data INNER JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code INNER JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.house = 'Senate'",
        "retrieved": [
            5110
        ],
        "token_usage": {
            "tokens": 2294,
            "cost": 0.00040395
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.House = 'House of Repsentatives' GROUP BY T2.zip_code"
    },
    {
        "sample_id": 5212,
        "pred_sql": "SELECT zip_data.elevation FROM zip_data INNER JOIN state ON zip_data.state = state.abbreviation WHERE state.name = 'Massachusetts' AND zip_data.city = 'Hampden'",
        "retrieved": [
            5152
        ],
        "token_usage": {
            "tokens": 2295,
            "cost": 0.00040994999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT T3.elevation FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Massachusetts' AND T2.county = 'HAMPDEN' GROUP BY T3.elevation"
    },
    {
        "sample_id": 5134,
        "pred_sql": "SELECT zip_data.city, state.name FROM zip_data INNER JOIN cbsa ON zip_data.cbsa = cbsa.cbsa INNER JOIN state ON zip_data.state = state.abbreviation WHERE cbsa.cbsa_name = 'Lexington-Fayette, KY' LIMIT 10;",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2369,
            "cost": 0.000435
        },
        "db_id": "address",
        "gold_sql": "SELECT DISTINCT T2.city, T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10"
    },
    {
        "sample_id": 5201,
        "pred_sql": "SELECT DISTINCT country.county FROM country INNER JOIN zip_data AS T2 ON country.zip_code = T2.zip_code WHERE zip_data.households = (SELECT MAX(households) FROM zip_data)",
        "retrieved": [
            5200
        ],
        "token_usage": {
            "tokens": 2293,
            "cost": 0.00040649999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.county ORDER BY T2.households DESC LIMIT 1"
    },
    {
        "sample_id": 5158,
        "pred_sql": "SELECT COUNT(zip_data.city) FROM zip_data INNER JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = '608' AND zip_data.daylight_savings = 'yes'",
        "retrieved": [
            5169
        ],
        "token_usage": {
            "tokens": 2313,
            "cost": 0.00040904999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T2.city) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 608 AND T2.daylight_savings = 'Yes'"
    },
    {
        "sample_id": 5106,
        "pred_sql": "SELECT COUNT(DISTINCT congress.cognress_rep_id) FROM congress INNER JOIN zip_data ON congress.abbreviation = zip_data.state WHERE zip_data.monthly_benefits_retired_workers = (SELECT MAX(monthly_benefits_retired_workers) FROM zip_data)",
        "retrieved": [
            5189
        ],
        "token_usage": {
            "tokens": 2359,
            "cost": 0.00044609999999999995
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T3.cognress_rep_id) FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation INNER JOIN congress AS T3 ON T2.abbreviation = T3.abbreviation ORDER BY T1.monthly_benefits_retired_workers DESC LIMIT 1"
    },
    {
        "sample_id": 5153,
        "pred_sql": "SELECT area_code.area_code FROM area_code INNER JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE zip_data.land_area = (SELECT MAX(land_area) FROM zip_data)",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2329,
            "cost": 0.00041549999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = ( SELECT MAX(land_area) FROM zip_data )"
    },
    {
        "sample_id": 5120,
        "pred_sql": "SELECT country.county FROM zip_congress INNER JOIN congress ON zip_congress.district = congress.cognress_rep_id INNER JOIN country ON zip_congress.zip_code = country.zip_code WHERE congress.first_name = 'Vicky' AND congress.last_name = 'Hartzler'",
        "retrieved": [
            5114
        ],
        "token_usage": {
            "tokens": 2358,
            "cost": 0.0004310999999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Hartzler' AND T3.last_name = 'Vicky' GROUP BY T1.county"
    },
    {
        "sample_id": 5213,
        "pred_sql": "SELECT area_code.area_code FROM area_code INNER JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE zip_data.hispanic_population = (SELECT MAX(hispanic_population) FROM zip_data)",
        "retrieved": [
            5211
        ],
        "token_usage": {
            "tokens": 2276,
            "cost": 0.0003958499999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )"
    },
    {
        "sample_id": 5135,
        "pred_sql": "WITH party_counts AS (  SELECT congress.party, COUNT(*) AS count  FROM congress  INNER JOIN state ON congress.abbreviation = state.abbreviation  WHERE state.name = 'Indiana'  GROUP BY congress.party), total_counts AS (  SELECT SUM(count) AS total FROM party_counts) SELECT party, (count * 100.0 / total) AS percentage FROM party_counts, total_counts; SELECT zip_data.zip_code FROM zip_data INNER JOIN congress ON zip_data.cbsa = congress.cognress_rep_id WHERE congress.party = 'Democrat' AND zip_data.state = 'IN';",
        "retrieved": [
            5110
        ],
        "token_usage": {
            "tokens": 2374,
            "cost": 0.0004474499999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.party = 'Democrat' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.party = 'Republican' THEN 1 ELSE NULL END)FROM zip_congress AS T1 INNER JOIN congress AS T2 ON T2.cognress_rep_id = T1.district"
    },
    {
        "sample_id": 5878,
        "pred_sql": "SELECT COUNT(*) FROM airlines WHERE origin = 'CLT' AND dest = 'AUS' AND cancellation_code = 'C'",
        "retrieved": [
            5823
        ],
        "token_usage": {
            "tokens": 1214,
            "cost": 0.00024465
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ORIGIN = 'CLT' AND T1.DEST = 'AUS' AND T2.Description = 'Charlotte, NC: Charlotte Douglas International' AND T1.CANCELLATION_CODE = 'A'"
    },
    {
        "sample_id": 5835,
        "pred_sql": "SELECT COUNT(*) AS flight_count FROM airlines INNER JOIN \"air carriers\" ON airlines.op_carrier_airline_id = \"air carriers\".code WHERE airlines.fl_date = '2018-08-01' AND \"air carriers\".description = 'American Airlines Inc.';",
        "retrieved": [
            5829
        ],
        "token_usage": {
            "tokens": 1278,
            "cost": 0.00026234999999999995
        },
        "db_id": "airline",
        "gold_sql": "SELECT CASE WHEN COUNT(CASE WHEN T3.Description = 'American Airlines Inc.: AA' THEN 1 ELSE NULL END) > COUNT(CASE WHEN T3.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE NULL END) THEN 'American Airlines Inc.: AA' ELSE 'Endeavor Air Inc.: 9E' END AS RESULT FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1'"
    },
    {
        "sample_id": 5842,
        "pred_sql": "SELECT COUNT(*) FROM airlines WHERE origin = (SELECT code FROM airports WHERE description = 'Miami Airport') AND fl_date = '2018/8/12' AND dep_delay < 0;",
        "retrieved": [
            5826
        ],
        "token_usage": {
            "tokens": 1282,
            "cost": 0.00027374999999999996
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/12' AND T2.DEST = 'MIA' AND T2.ARR_DELAY < 0"
    },
    {
        "sample_id": 5886,
        "pred_sql": "SELECT airports.description FROM airports WHERE airports.code LIKE '%3'",
        "retrieved": [
            5882
        ],
        "token_usage": {
            "tokens": 1168,
            "cost": 0.00022604999999999997
        },
        "db_id": "airline",
        "gold_sql": "SELECT Description FROM Airports WHERE Code LIKE '%3'"
    },
    {
        "sample_id": 5857,
        "pred_sql": "SELECT airports.code FROM airports WHERE airports.description = 'Anita Bay Airport'",
        "retrieved": [
            5882
        ],
        "token_usage": {
            "tokens": 1147,
            "cost": 0.000213
        },
        "db_id": "airline",
        "gold_sql": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'"
    },
    {
        "sample_id": 5837,
        "pred_sql": "SELECT AVG(daily_flights) FROM (SELECT COUNT(*) AS daily_flights FROM airlines INNER JOIN \"air carriers\" ON airlines.op_carrier_airline_id = \"air carriers\".code WHERE \"air carriers\".description = 'American Airlines Inc.' AND fl_date LIKE '2018-08-%' GROUP BY fl_date) AS daily_counts;",
        "retrieved": [
            5829
        ],
        "token_usage": {
            "tokens": 1264,
            "cost": 0.0002562
        },
        "db_id": "airline",
        "gold_sql": "SELECT CAST( SUM(CASE WHEN T2.FL_DATE LIKE '2018/8%' THEN 1 ELSE 0 END) AS REAL) / 31 FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "sample_id": 5839,
        "pred_sql": "SELECT COUNT(airlines.tail_num) FROM airlines WHERE airlines.fl_date = '2018/8/27' AND airlines.origin = (SELECT airports.code FROM airports WHERE airports.description = 'Los Angeles International')",
        "retrieved": [
            5850
        ],
        "token_usage": {
            "tokens": 1304,
            "cost": 0.00025859999999999994
        },
        "db_id": "airline",
        "gold_sql": "SELECT SUM(CASE WHEN T2.FL_DATE = '2018/8/27' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Los Angeles, CA: Los Angeles International'"
    },
    {
        "sample_id": 5908,
        "pred_sql": "SELECT air_carriers.description FROM airlines INNER JOIN air_carriers ON air_carriers.code = airlines.op_carrier_airline_id WHERE airlines.arr_delay < 0 AND airlines.dep_delay < 0",
        "retrieved": [
            5907
        ],
        "token_usage": {
            "tokens": 1259,
            "cost": 0.00025994999999999995
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_DELAY < 0 AND T2.DEP_DELAY < 0 GROUP BY T1.Description"
    },
    {
        "sample_id": 5909,
        "pred_sql": "SELECT tail_num FROM airlines WHERE op_carrier_airline_id = 'WN' AND actual_elapsed_time < (SELECT 0.8 * AVG(actual_elapsed_time) FROM airlines WHERE op_carrier_airline_id = 'WN')",
        "retrieved": [
            5846
        ],
        "token_usage": {
            "tokens": 1263,
            "cost": 0.0002538
        },
        "db_id": "airline",
        "gold_sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southwest Airlines Co.: WN' AND T2.ACTUAL_ELAPSED_TIME < ( SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines )"
    },
    {
        "sample_id": 5852,
        "pred_sql": "SELECT (SUM(CASE WHEN airlines.actual_elapsed_time < airlines.crs_elapsed_time THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_faster_flights FROM airlines INNER JOIN airports AS origin_airport ON airlines.origin = origin_airport.code INNER JOIN airports AS dest_airport ON airlines.dest = dest_airport.code WHERE dest_airport.description = 'Pittsburgh'",
        "retrieved": [
            5844
        ],
        "token_usage": {
            "tokens": 1355,
            "cost": 0.00030585
        },
        "db_id": "airline",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.DEST WHERE T2.Description LIKE '%Pittsburgh%' AND T1.CRS_ELAPSED_TIME IS NOT NULL AND T1.ACTUAL_ELAPSED_TIME IS NOT NULL"
    },
    {
        "sample_id": 5875,
        "pred_sql": "SELECT COUNT(*) FROM airlines WHERE airlines.fl_date = '2018-08-01' AND airlines.origin = 'ABE'",
        "retrieved": [
            5874
        ],
        "token_usage": {
            "tokens": 1211,
            "cost": 0.00022034999999999996
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE'"
    },
    {
        "sample_id": 5880,
        "pred_sql": "SELECT airlines.crs_dep_time, airlines.dep_time FROM airlines WHERE airlines.origin = 'FLL' AND airlines.dest = 'FLL' AND airlines.tail_num = 'N903JB' AND airlines.fl_date = '2018-08-20'",
        "retrieved": [
            5874
        ],
        "token_usage": {
            "tokens": 1363,
            "cost": 0.0003048
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.DEP_TIME FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code INNER JOIN Airports AS T3 ON T1.DEST = T3.Code WHERE T1.FL_DATE = '2018/8/20' AND T1.TAIL_NUM = 'N903JB' AND T2.Description LIKE '%JetBlue Airways%' AND T3.Description LIKE '%Fort Lauderdale-Hollywood%'"
    },
    {
        "sample_id": 5899,
        "pred_sql": "SELECT ac.description FROM airlines a JOIN air_carriers ac ON a.op_carrier_airline_id = ac.code ORDER BY a.actual_elapsed_time DESC LIMIT 1;",
        "retrieved": [
            5890
        ],
        "token_usage": {
            "tokens": 1223,
            "cost": 0.00025725
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ACTUAL_ELAPSED_TIME DESC LIMIT 1"
    },
    {
        "sample_id": 5897,
        "pred_sql": "SELECT tail_num FROM airlines INNER JOIN air_carriers ON airlines.op_carrier_airline_id = air_carriers.code WHERE air_carriers.description = 'Asap Air Inc.: ASP' ORDER BY dep_delay DESC LIMIT 1;",
        "retrieved": [
            5905
        ],
        "token_usage": {
            "tokens": 1283,
            "cost": 0.00026805
        },
        "db_id": "airline",
        "gold_sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1"
    },
    {
        "sample_id": 5841,
        "pred_sql": "SELECT COUNT(*) FROM airlines INNER JOIN air_carriers ON airlines.op_carrier_airline_id = air_carriers.code WHERE air_carriers.description = 'Alaska Airlines' AND airlines.fl_date = '2018/8/2' AND airlines.dep_delay > 0;",
        "retrieved": [
            5826
        ],
        "token_usage": {
            "tokens": 1249,
            "cost": 0.00025485
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/2' AND T2.Description = 'Alaska Airlines Inc.: AS' AND T1.DEP_DELAY > 0"
    },
    {
        "sample_id": 5910,
        "pred_sql": "SELECT ac.description FROM airlines a INNER JOIN air_carriers ac ON a.op_carrier_airline_id = ac.code WHERE a.arr_time < (SELECT 0.4 * AVG(arr_time) FROM airlines WHERE dest = 'PHX')",
        "retrieved": [
            5907
        ],
        "token_usage": {
            "tokens": 1330,
            "cost": 0.00029759999999999997
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'PHX' AND T2.ARR_TIME < ( SELECT AVG(ARR_TIME) * 0.4 FROM Airlines ) GROUP BY T1.Description"
    },
    {
        "sample_id": 5864,
        "pred_sql": "SELECT air carriers.description FROM airlines INNER JOIN air carriers ON airlines.op_carrier_airline_id = air carriers.code GROUP BY air carriers.description ORDER BY COUNT(airlines.tail_num) DESC LIMIT 5;",
        "retrieved": [
            5867
        ],
        "token_usage": {
            "tokens": 1275,
            "cost": 0.00025649999999999995
        },
        "db_id": "airline",
        "gold_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code GROUP BY T2.Description ORDER BY T1.TAIL_NUM DESC LIMIT 5"
    },
    {
        "sample_id": 5855,
        "pred_sql": "SELECT airports.code FROM airports WHERE airports.description LIKE '%Ankara%'",
        "retrieved": [
            5882
        ],
        "token_usage": {
            "tokens": 1181,
            "cost": 0.00023519999999999997
        },
        "db_id": "airline",
        "gold_sql": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'"
    },
    {
        "sample_id": 5889,
        "pred_sql": "SELECT tail_num FROM airlines WHERE fl_date = '2018-08-17'",
        "retrieved": [
            5874
        ],
        "token_usage": {
            "tokens": 1215,
            "cost": 0.000225
        },
        "db_id": "airline",
        "gold_sql": "SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018/8/17' GROUP BY TAIL_NUM"
    },
    {
        "sample_id": 2526,
        "pred_sql": "SELECT playstore.app, SUM(user_reviews.sentiment_subjectivity) AS total_sentiment_subjectivity FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.genres LIKE '%/%' GROUP BY playstore.app",
        "retrieved": [
            2542
        ],
        "token_usage": {
            "tokens": 1125,
            "cost": 0.00024524999999999997
        },
        "db_id": "app_store",
        "gold_sql": "SELECT SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres > 1"
    },
    {
        "sample_id": 2550,
        "pred_sql": "SELECT playstore.app FROM playstore WHERE reviews > 75000000 AND content_rating = 'Teen'",
        "retrieved": [
            2521
        ],
        "token_usage": {
            "tokens": 1017,
            "cost": 0.0001953
        },
        "db_id": "app_store",
        "gold_sql": "SELECT DISTINCT App FROM playstore WHERE Reviews > 75000000 AND \"Content Rating\" = 'Teen'"
    },
    {
        "sample_id": 2532,
        "pred_sql": "SELECT COUNT(user_reviews.translated_review) FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.app = 'Brit + Co' AND user_reviews.translated_review IS NOT NULL;",
        "retrieved": [
            2538
        ],
        "token_usage": {
            "tokens": 1115,
            "cost": 0.00023925
        },
        "db_id": "app_store",
        "gold_sql": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL"
    },
    {
        "sample_id": 2551,
        "pred_sql": "SELECT DISTINCT playstore.genres FROM playstore WHERE playstore.installs = '1,000,000,000+'",
        "retrieved": [
            2546
        ],
        "token_usage": {
            "tokens": 1120,
            "cost": 0.00023549999999999998
        },
        "db_id": "app_store",
        "gold_sql": "SELECT Genres FROM playstore WHERE Installs = '1,000,000,000+' GROUP BY Genres"
    },
    {
        "sample_id": 2547,
        "pred_sql": "SELECT playstore.rating, SUM(user_reviews.sentiment_subjectivity) AS total_sentiment_subjectivity_score FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.app = 'Onefootball - Soccer Scores'",
        "retrieved": [
            2542
        ],
        "token_usage": {
            "tokens": 1111,
            "cost": 0.00023504999999999997
        },
        "db_id": "app_store",
        "gold_sql": "SELECT T1.Rating, SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Onefootball - Soccer Scores'"
    },
    {
        "sample_id": 2573,
        "pred_sql": "SELECT COUNT(playstore.app) AS teen_rpg_count, AVG(user_reviews.sentiment_polarity) AS average_sentiment_polarity FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.category = 'GAME' AND playstore.genres LIKE '%role playing%' AND playstore.content_rating = 'Teen'",
        "retrieved": [
            2569
        ],
        "token_usage": {
            "tokens": 1188,
            "cost": 0.00027134999999999995
        },
        "db_id": "app_store",
        "gold_sql": "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Teen' AND T1.Genres = 'Role Playing'"
    },
    {
        "sample_id": 2552,
        "pred_sql": "SELECT AVG(CAST(playstore.price AS REAL)) FROM playstore WHERE playstore.category = 'Dating'",
        "retrieved": [
            2554
        ],
        "token_usage": {
            "tokens": 994,
            "cost": 0.0001851
        },
        "db_id": "app_store",
        "gold_sql": "SELECT AVG(Price) FROM playstore WHERE Genres = 'Dating'"
    },
    {
        "sample_id": 2533,
        "pred_sql": "SELECT playstore.app FROM playstore WHERE playstore.category = 'Shopping' ORDER BY playstore.reviews DESC LIMIT 5;",
        "retrieved": [
            2521
        ],
        "token_usage": {
            "tokens": 1010,
            "cost": 0.00019559999999999998
        },
        "db_id": "app_store",
        "gold_sql": "SELECT DISTINCT App FROM playstore WHERE Genres = 'Shopping' GROUP BY App ORDER BY COUNT(App) DESC LIMIT 5"
    },
    {
        "sample_id": 2570,
        "pred_sql": "SELECT playstore.rating, COUNT(CASE WHEN user_reviews.sentiment = 'Negative' THEN 1 ELSE NULL END) AS dislike_count FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.app = 'Dragon Ball Legends'",
        "retrieved": [
            2530
        ],
        "token_usage": {
            "tokens": 1155,
            "cost": 0.00025829999999999994
        },
        "db_id": "app_store",
        "gold_sql": "SELECT T1.Rating, COUNT(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Dragon Ball Legends' AND CAST(Sentiment_Polarity AS INTEGER) < -0.5"
    },
    {
        "sample_id": 2536,
        "pred_sql": "SELECT user_reviews.translated_review FROM user_reviews INNER JOIN playstore ON user_reviews.app = playstore.app WHERE playstore.app = 'Dog Run - Pet Dog Simulator' AND user_reviews.sentiment = 'Negative'",
        "retrieved": [
            2537
        ],
        "token_usage": {
            "tokens": 1102,
            "cost": 0.00022964999999999997
        },
        "db_id": "app_store",
        "gold_sql": "SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative'"
    },
    {
        "sample_id": 2561,
        "pred_sql": "SELECT rating FROM playstore WHERE app = 'Learn C++'",
        "retrieved": [
            2524
        ],
        "token_usage": {
            "tokens": 1025,
            "cost": 0.00019289999999999997
        },
        "db_id": "app_store",
        "gold_sql": "SELECT DISTINCT Rating FROM playstore WHERE App = 'Learn C++'"
    },
    {
        "sample_id": 2566,
        "pred_sql": "SELECT playstore.app, COUNT(user_reviews.sentiment) AS negative_sentiment_count FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.category = 'GAME' AND playstore.app LIKE '%puzzle%' AND playstore.rating = (SELECT MIN(rating) FROM playstore WHERE category = 'GAME' AND app LIKE '%puzzle%') GROUP BY playstore.app ORDER BY playstore.rating ASC LIMIT 5;",
        "retrieved": [
            2515
        ],
        "token_usage": {
            "tokens": 1187,
            "cost": 0.00028379999999999996
        },
        "db_id": "app_store",
        "gold_sql": "SELECT T1.App, COUNT(T1.App) COUNTNUMBER FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY T1.Rating LIMIT 5"
    },
    {
        "sample_id": 5307,
        "pred_sql": "SELECT COUNT(customers.customerid) FROM customers INNER JOIN transaction ON customers.customerid = transaction.customerid WHERE transaction.creditcardtype = 'Visa' AND customers.city = 'Folsom'",
        "retrieved": [
            5318
        ],
        "token_usage": {
            "tokens": 1745,
            "cost": 0.00031935
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'Folsom' AND T2.CreditCardType = 'Visa'"
    },
    {
        "sample_id": 5294,
        "pred_sql": "SELECT rootbeer.containertype, (rootbeerbrand.currentretailprice - rootbeerbrand.wholesalecost) AS profit_per_unit FROM rootbeer INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid ORDER BY profit_per_unit DESC LIMIT 1 UNION SELECT rootbeer.containertype, (rootbeerbrand.currentretailprice - rootbeerbrand.wholesalecost) AS profit_per_unit FROM rootbeer INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid ORDER BY profit_per_unit ASC LIMIT 1;",
        "retrieved": [
            5296
        ],
        "token_usage": {
            "tokens": 1932,
            "cost": 0.00041355
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT * FROM ( SELECT T1.BrandName, T2.ContainerType FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID ORDER BY T1.CurrentRetailPrice - T1.WholesaleCost DESC LIMIT 1 ) UNION ALL SELECT * FROM ( SELECT T3.BrandName, T4.ContainerType FROM rootbeerbrand AS T3 INNER JOIN rootbeer AS T4 ON T3.BrandID = T4.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost ASC LIMIT 1 )"
    },
    {
        "sample_id": 5328,
        "pred_sql": "SELECT rootbeerbrand.brandname FROM rootbeerreview INNER JOIN rootbeerbrand ON rootbeerreview.brandid = rootbeerbrand.brandid WHERE rootbeerreview.customerid = '331115' AND rootbeerreview.starrating = '1' AND rootbeerreview.review = 'Yuk, more like licorice soda';",
        "retrieved": [
            5264
        ],
        "token_usage": {
            "tokens": 1878,
            "cost": 0.00038789999999999994
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.CustomerID = 331115 AND T2.Review = 'Yuk, more like licorice soda.' AND T2.StarRating = 1"
    },
    {
        "sample_id": 5271,
        "pred_sql": "SELECT COUNT(transaction.transactionid) FROM transaction WHERE transaction.creditcardtype = 'MasterCard' AND STRFTIME('%Y', transaction.transactiondate) = '2014'",
        "retrieved": [
            5238
        ],
        "token_usage": {
            "tokens": 1745,
            "cost": 0.0003279
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(TransactionID) FROM \"transaction\" WHERE CreditCardType = 'MasterCard' AND TransactionDate LIKE '2014%'"
    },
    {
        "sample_id": 5279,
        "pred_sql": "SELECT rb.brandname, COUNT(t.transactionid) AS purchase_count \nFROM rootbeerbrand rb \nLEFT JOIN rootbeer r ON rb.brandid = r.brandid \nLEFT JOIN transaction t ON r.rootbeerid = t.rootbeerid \nWHERE rb.facebookpage IS NULL AND rb.twitter IS NULL \nGROUP BY rb.brandid \nORDER BY purchase_count DESC \nLIMIT 1;",
        "retrieved": [
            5246
        ],
        "token_usage": {
            "tokens": 1836,
            "cost": 0.00037259999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FacebookPage IS NULL AND T2.Twitter IS NULL GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 5313,
        "pred_sql": "SELECT geolocation.latitude, COUNT(transaction.rootbeerid) AS total_consumption FROM transaction INNER JOIN rootbeer ON transaction.rootbeerid = rootbeer.rootbeerid INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid INNER JOIN geolocation ON transaction.locationid = geolocation.locationid WHERE rootbeerbrand.brandname = 'Thomas Kemper' GROUP BY geolocation.latitude ORDER BY total_consumption DESC LIMIT 1;",
        "retrieved": [
            5296
        ],
        "token_usage": {
            "tokens": 1951,
            "cost": 0.00043079999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T3.Latitude FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Thomas Kemper' GROUP BY T3.Latitude ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 5273,
        "pred_sql": "SELECT COUNT(*) FROM transaction AS T1 INNER JOIN rootbeer AS T2 ON T1.rootbeerid = T2.rootbeerid INNER JOIN rootbeerbrand AS T3 ON T2.brandid = T3.brandid INNER JOIN location AS T4 ON T1.locationid = T4.locationid WHERE T3.availableinbottles = 'true' AND T3.artificialsweetener = 'false' AND T3.canesugar = 'false' AND T1.transactiondate BETWEEN '2015-01-01' AND '2015-12-31' AND T4.locationname = 'Sac State American River Courtyard';",
        "retrieved": [
            5248
        ],
        "token_usage": {
            "tokens": 1966,
            "cost": 0.00042944999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State American River Courtyard' AND T1.PurchaseDate LIKE '2015%' AND T2.Honey = 'TRUE' AND T2.CaneSugar = 'FALSE' AND T1.ContainerType = 'Bottle'"
    },
    {
        "sample_id": 5232,
        "pred_sql": "SELECT brandname FROM rootbeerbrand ORDER BY firstbrewedyear ASC LIMIT 1;",
        "retrieved": [
            5272
        ],
        "token_usage": {
            "tokens": 1734,
            "cost": 0.00031634999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = ( SELECT MIN(FirstBrewedYear) FROM rootbeerbrand )"
    },
    {
        "sample_id": 5259,
        "pred_sql": "SELECT customers.firstpurchasedate FROM customers INNER JOIN rootbeerreview ON customers.customerid = rootbeerreview.customerid WHERE rootbeerreview.review = 'Tastes like Australia.'",
        "retrieved": [
            5260
        ],
        "token_usage": {
            "tokens": 1717,
            "cost": 0.0003138
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.FirstPurchaseDate FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Review = 'Tastes like Australia.'"
    },
    {
        "sample_id": 5287,
        "pred_sql": "SELECT (COUNT(CASE WHEN rootbeer.containertype = 'cans' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_sold_in_cans FROM transaction INNER JOIN rootbeer ON transaction.rootbeerid = rootbeer.rootbeerid WHERE strftime('%Y', transaction.transactiondate) = '2014';",
        "retrieved": [
            5243
        ],
        "token_usage": {
            "tokens": 1834,
            "cost": 0.00036375
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID ELSE NULL END) AS REAL) * 100 / COUNT(RootBeerID) FROM rootbeer WHERE PurchaseDate LIKE '2014%'"
    },
    {
        "sample_id": 5335,
        "pred_sql": "SELECT transaction.creditcardtype FROM customers INNER JOIN transaction ON customers.customerid = transaction.customerid WHERE customers.first = 'Kenneth' AND customers.last = 'Walton'",
        "retrieved": [
            5344
        ],
        "token_usage": {
            "tokens": 1709,
            "cost": 0.00031214999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Kenneth' AND T1.Last = 'Walton'"
    },
    {
        "sample_id": 5351,
        "pred_sql": "SELECT transaction.creditcardtype FROM customers INNER JOIN transaction ON customers.customerid = transaction.customerid WHERE customers.first = 'Dick' AND customers.last = 'Ruthven'",
        "retrieved": [
            5344
        ],
        "token_usage": {
            "tokens": 1698,
            "cost": 0.00030284999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Dick' AND T1.Last = 'Ruthven'"
    },
    {
        "sample_id": 5330,
        "pred_sql": "SELECT COUNT(transaction.transactionid) FROM transaction INNER JOIN location ON transaction.locationid = location.locationid WHERE location.locationname = 'Sac State Union' AND transaction.creditcardtype = 'American Express' AND STRFTIME('%Y', transaction.transactiondate) = '2014'",
        "retrieved": [
            5238
        ],
        "token_usage": {
            "tokens": 1783,
            "cost": 0.00034754999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union' AND T1.CreditCardType = 'American Express' AND T1.TransactionDate BETWEEN '2014-01-01' AND '2014-12-31'"
    },
    {
        "sample_id": 5358,
        "pred_sql": "SELECT customers.email FROM customers JOIN transaction ON customers.customerid = transaction.customerid WHERE transaction.transactionid = '100016'",
        "retrieved": [
            5268
        ],
        "token_usage": {
            "tokens": 1663,
            "cost": 0.00029714999999999993
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.Email FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = '100016'"
    },
    {
        "sample_id": 5314,
        "pred_sql": "SELECT starrating, COUNT(*) as count FROM rootbeerreview INNER JOIN rootbeerbrand ON rootbeerreview.brandid = rootbeerbrand.brandid WHERE rootbeerbrand.cornsyrup = 'true' GROUP BY starrating ORDER BY count DESC LIMIT 1;",
        "retrieved": [
            5300
        ],
        "token_usage": {
            "tokens": 1845,
            "cost": 0.00037349999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.StarRating FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CornSyrup = 'TRUE' GROUP BY T2.StarRating ORDER BY COUNT(T2.StarRating) DESC LIMIT 1"
    },
    {
        "sample_id": 5341,
        "pred_sql": "SELECT AVG(rootbeerreview.starrating) AS average_rating FROM rootbeerreview INNER JOIN customers ON rootbeerreview.customerid = customers.customerid WHERE customers.subscribedtoemaillist = 'true'",
        "retrieved": [
            5318
        ],
        "token_usage": {
            "tokens": 1809,
            "cost": 0.00035864999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE'"
    },
    {
        "sample_id": 5291,
        "pred_sql": "SELECT COUNT(DISTINCT rootbeer.brandid) FROM rootbeerbrand INNER JOIN rootbeer ON rootbeerbrand.brandid = rootbeer.brandid WHERE rootbeer.availableincans = 'true' AND rootbeerbrand.cornsyrup = 'true' AND rootbeerbrand.artificialsweetener = 'true';",
        "retrieved": [
            5243
        ],
        "token_usage": {
            "tokens": 1854,
            "cost": 0.00037485
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE' AND AvailableInCans = 'TRUE'"
    },
    {
        "sample_id": 5350,
        "pred_sql": "SELECT (COUNT(CASE WHEN gender = 'female' AND subscribedtoemaillist = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS female_subscription_percentage FROM customers;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1648,
            "cost": 0.00031424999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN Gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(SubscribedToEmailList) FROM customers WHERE SubscribedToEmailList = 'TRUE'"
    },
    {
        "sample_id": 5331,
        "pred_sql": "SELECT geolocation.latitude, geolocation.longitude FROM location INNER JOIN geolocation AS T2 ON location.locationid = T2.locationid WHERE location.locationname = 'Sac State Union'",
        "retrieved": [
            5254
        ],
        "token_usage": {
            "tokens": 1706,
            "cost": 0.00032024999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'"
    },
    {
        "sample_id": 5336,
        "pred_sql": "SELECT rootbeer.containertype, rootbeerbrand.brandname, rootbeerreview.starrating \nFROM rootbeer \nINNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid \nINNER JOIN rootbeerreview ON rootbeer.brandid = rootbeerreview.brandid \nWHERE rootbeer.rootbeerid = '10054';",
        "retrieved": [
            5264
        ],
        "token_usage": {
            "tokens": 1847,
            "cost": 0.00037739999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T4.ContainerType, T3.BrandName, T1.StarRating FROM rootbeerreview AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID INNER JOIN rootbeer AS T4 ON T2.RootBeerID = T4.RootBeerID WHERE T2.RootBeerID = 100054"
    },
    {
        "sample_id": 5312,
        "pred_sql": "SELECT customers.first, customers.last FROM customers INNER JOIN rootbeerreview ON customers.customerid = rootbeerreview.customerid WHERE rootbeerreview.starrating = 5",
        "retrieved": [
            5275
        ],
        "token_usage": {
            "tokens": 1712,
            "cost": 0.00030314999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5"
    },
    {
        "sample_id": 5263,
        "pred_sql": "SELECT r.currentretailprice FROM rootbeer r INNER JOIN rootbeerreview rr ON r.brandid = rr.brandid WHERE rr.review = 'The quintessential dessert root beer. No ice cream required.'",
        "retrieved": [
            5246
        ],
        "token_usage": {
            "tokens": 1762,
            "cost": 0.00032234999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.CurrentRetailPrice - T1.WholesaleCost AS price FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.Review = 'The quintessential dessert root beer. No ice cream required.'"
    },
    {
        "sample_id": 5361,
        "pred_sql": "SELECT rootbeerbrand.brandname FROM rootbeerreview INNER JOIN rootbeerbrand ON rootbeerreview.brandid = rootbeerbrand.brandid GROUP BY rootbeerbrand.brandname ORDER BY AVG(rootbeerreview.starrating) DESC LIMIT 3;",
        "retrieved": [
            5272
        ],
        "token_usage": {
            "tokens": 1784,
            "cost": 0.0003459
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 LIMIT 3"
    },
    {
        "sample_id": 5283,
        "pred_sql": "SELECT rb.brandname FROM rootbeerbrand rb INNER JOIN rootbeerreview r ON rb.brandid = r.brandid WHERE r.starrating = 5 GROUP BY rb.brandid HAVING COUNT(r.customerid) >= 5;",
        "retrieved": [
            5264
        ],
        "token_usage": {
            "tokens": 1812,
            "cost": 0.00035505
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T2.BrandID HAVING COUNT(T2.StarRating) >= 5"
    },
    {
        "sample_id": 5244,
        "pred_sql": "SELECT COUNT(transaction.rootbeerid) FROM transaction INNER JOIN rootbeer ON transaction.rootbeerid = rootbeer.rootbeerid INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid WHERE rootbeerbrand.brandname = 'Bulldog' AND transaction.transactiondate BETWEEN '2014-08-01' AND '2014-08-31'",
        "retrieved": [
            5243
        ],
        "token_usage": {
            "tokens": 1837,
            "cost": 0.00036599999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'"
    },
    {
        "sample_id": 5289,
        "pred_sql": "SELECT brandid FROM rootbeerreview WHERE starrating = 1 GROUP BY brandid ORDER BY COUNT(customerid) DESC LIMIT 1;",
        "retrieved": [
            5264
        ],
        "token_usage": {
            "tokens": 1771,
            "cost": 0.00033044999999999993
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 5274,
        "pred_sql": "SELECT rootbeerbrand.breweryname, COUNT(transaction.transactionid) AS purchase_count\nFROM transaction\nINNER JOIN rootbeer ON transaction.rootbeerid = rootbeer.rootbeerid\nINNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid\nWHERE transaction.transactiondate LIKE '2016%'\nGROUP BY rootbeerbrand.breweryname\nORDER BY purchase_count DESC\nLIMIT 1;",
        "retrieved": [
            5302
        ],
        "token_usage": {
            "tokens": 1978,
            "cost": 0.00043709999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 205,
        "pred_sql": "SELECT COUNT(DISTINCT stores.stor_id) FROM stores INNER JOIN sales ON stores.stor_id = sales.stor_id INNER JOIN titles ON sales.title_id = titles.title_id WHERE titles.title = 'Life Without Fear' AND stores.state = 'MA'",
        "retrieved": [
            211
        ],
        "token_usage": {
            "tokens": 1501,
            "cost": 0.00030974999999999997
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'"
    },
    {
        "sample_id": 169,
        "pred_sql": "SELECT titles.title, titles.price, titles.pubdate FROM sales INNER JOIN titles ON sales.title_id = titles.title_id WHERE sales.payterms = 'ON invoice'",
        "retrieved": [
            197
        ],
        "token_usage": {
            "tokens": 1425,
            "cost": 0.00026775
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'"
    },
    {
        "sample_id": 207,
        "pred_sql": "SELECT publishers.pub_name FROM publishers JOIN titles ON publishers.pub_id = titles.pub_id ORDER BY titles.price DESC LIMIT 1;",
        "retrieved": [
            213
        ],
        "token_usage": {
            "tokens": 1393,
            "cost": 0.00026294999999999997
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "sample_id": 179,
        "pred_sql": "SELECT stores.stor_name, (SUM(CASE WHEN sales.payterms = 'Net 30' THEN sales.qty ELSE 0 END) * 100.0 / SUM(sales.qty)) AS percentage_net_30 FROM stores INNER JOIN sales ON stores.stor_id = sales.stor_id WHERE stores.stor_id = '7066' GROUP BY stores.stor_name;",
        "retrieved": [
            177
        ],
        "token_usage": {
            "tokens": 1573,
            "cost": 0.0003255
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name"
    },
    {
        "sample_id": 218,
        "pred_sql": "SELECT authors.au_fname, authors.au_lname, authors.contract FROM titles INNER JOIN titleauthor ON titles.title_id = titleauthor.title_id INNER JOIN authors ON titleauthor.au_id = authors.au_id WHERE titles.title = 'Sushi, Anyone?'",
        "retrieved": [
            192
        ],
        "token_usage": {
            "tokens": 1471,
            "cost": 0.00029534999999999994
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'"
    },
    {
        "sample_id": 223,
        "pred_sql": "SELECT DISTINCT titles.type FROM sales INNER JOIN titles ON sales.title_id = titles.title_id WHERE sales.ord_date = '1993/5/29'",
        "retrieved": [
            188
        ],
        "token_usage": {
            "tokens": 1421,
            "cost": 0.00026849999999999997
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'"
    },
    {
        "sample_id": 233,
        "pred_sql": "SELECT titles.title, titles.type, titles.price FROM titles INNER JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.pub_name = 'New Moon Books' ORDER BY titles.price ASC;",
        "retrieved": [
            188
        ],
        "token_usage": {
            "tokens": 1431,
            "cost": 0.0002718
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price"
    },
    {
        "sample_id": 193,
        "pred_sql": "SELECT titles.title, titles.ytd_sales FROM titles INNER JOIN titleauthor ON titles.title_id = titleauthor.title_id INNER JOIN authors ON titleauthor.au_id = authors.au_id WHERE authors.contract = '0'",
        "retrieved": [
            197
        ],
        "token_usage": {
            "tokens": 1476,
            "cost": 0.00029925
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title_id, T1.ytd_sales FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0"
    },
    {
        "sample_id": 167,
        "pred_sql": "SELECT ord_date, SUM(qty) AS total_quantity FROM sales GROUP BY ord_date ORDER BY total_quantity DESC LIMIT 1;",
        "retrieved": [
            168
        ],
        "token_usage": {
            "tokens": 1452,
            "cost": 0.00028125
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1"
    },
    {
        "sample_id": 234,
        "pred_sql": "SELECT titles.title, titles.royalty FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.country = 'US' ORDER BY titles.royalty DESC;",
        "retrieved": [
            215
        ],
        "token_usage": {
            "tokens": 1416,
            "cost": 0.00027315
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC"
    },
    {
        "sample_id": 228,
        "pred_sql": "SELECT (SUM(CASE WHEN stores.city = 'Fremont' THEN sales.qty ELSE 0 END) - SUM(CASE WHEN stores.city = 'Portland' THEN sales.qty ELSE 0 END)) * 100.0 / SUM(CASE WHEN stores.city = 'Portland' THEN sales.qty ELSE 0 END) AS percent_difference\nFROM sales\nINNER JOIN stores ON sales.stor_id = stores.stor_id\nWHERE strftime('%Y', sales.ord_date) = '1993';",
        "retrieved": [
            202
        ],
        "token_usage": {
            "tokens": 1513,
            "cost": 0.0003201
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'"
    },
    {
        "sample_id": 196,
        "pred_sql": "SELECT (COUNT(CASE WHEN job_desc IN ('Editor', 'Designer') THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM employee INNER JOIN jobs ON employee.job_id = jobs.job_id;",
        "retrieved": [
            200
        ],
        "token_usage": {
            "tokens": 1402,
            "cost": 0.00026205
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id"
    },
    {
        "sample_id": 210,
        "pred_sql": "SELECT SUM(sales.qty) AS total_ordered_books FROM sales JOIN titles ON sales.title_id = titles.title_id JOIN stores ON sales.stor_id = stores.stor_id WHERE titles.type = 'business' AND stores.state = 'MA';",
        "retrieved": [
            213
        ],
        "token_usage": {
            "tokens": 1433,
            "cost": 0.00028694999999999995
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'"
    },
    {
        "sample_id": 238,
        "pred_sql": "SELECT titles.title, publishers.state, titles.ytd_sales FROM titles INNER JOIN publishers ON titles.pub_id = publishers.pub_id WHERE titles.title LIKE '%Carefully researched study of the effects of strong emotions on the body%'",
        "retrieved": [
            188
        ],
        "token_usage": {
            "tokens": 1442,
            "cost": 0.000273
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'"
    },
    {
        "sample_id": 194,
        "pred_sql": "SELECT titles.title FROM titles INNER JOIN titleauthor ON titles.title_id = titleauthor.title_id INNER JOIN authors ON titleauthor.au_id = authors.au_id WHERE authors.state = 'CA' AND authors.contract = '0' ORDER BY titles.ytd_sales DESC LIMIT 1;",
        "retrieved": [
            197
        ],
        "token_usage": {
            "tokens": 1471,
            "cost": 0.00029265
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1"
    },
    {
        "sample_id": 172,
        "pred_sql": "SELECT titles.title, MAX(roysched.royalty) AS max_royalty, roysched.lorange, roysched.hirange FROM titles INNER JOIN roysched ON titles.title_id = roysched.title_id GROUP BY titles.title ORDER BY max_royalty DESC LIMIT 1;",
        "retrieved": [
            171
        ],
        "token_usage": {
            "tokens": 1543,
            "cost": 0.00032145
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1"
    },
    {
        "sample_id": 5950,
        "pred_sql": "SELECT shipping_method.method_name, COUNT(cust_order.order_id) AS order_count FROM cust_order INNER JOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id GROUP BY shipping_method.method_name ORDER BY order_count DESC LIMIT 1;",
        "retrieved": [
            6034
        ],
        "token_usage": {
            "tokens": 2079,
            "cost": 0.00038789999999999994
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) DESC LIMIT 1"
    },
    {
        "sample_id": 6095,
        "pred_sql": "SELECT book.isbn13, order_line.price FROM book INNER JOIN order_line AS T2 ON book.book_id = T2.book_id WHERE book.isbn13 = '9780763628321'",
        "retrieved": [
            6099
        ],
        "token_usage": {
            "tokens": 2020,
            "cost": 0.00035519999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.isbn13 = 9780763628321"
    },
    {
        "sample_id": 6048,
        "pred_sql": "SELECT COUNT(book.book_id) FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Akira Watanabe' AND book.publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Gravity')",
        "retrieved": [
            5982
        ],
        "token_usage": {
            "tokens": 2025,
            "cost": 0.00036315
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'Akira Watanabe'"
    },
    {
        "sample_id": 6067,
        "pred_sql": "SELECT country.country_name FROM address JOIN country ON address.country_id = country.country_id WHERE address.street_number = '9' AND address.street_name = 'Green Ridge Point' AND address.city = 'Arendal';",
        "retrieved": [],
        "token_usage": {
            "tokens": 2011,
            "cost": 0.000384
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.country_name FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T1.street_number = 9 AND T1.street_name = 'Green Ridge Point' AND T1.city = 'Arendal'"
    },
    {
        "sample_id": 5988,
        "pred_sql": "SELECT (COUNT(CASE WHEN shipping_method.method_name = 'international' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_international_shipping FROM cust_order INNER JOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id WHERE STRFTIME('%Y', cust_order.order_date) = '2020'",
        "retrieved": [
            6054
        ],
        "token_usage": {
            "tokens": 2096,
            "cost": 0.0003981
        },
        "db_id": "books",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id WHERE STRFTIME('%Y', T1.order_date) = '2020'"
    },
    {
        "sample_id": 6080,
        "pred_sql": "SELECT book.title FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.publication_date BETWEEN '1990-01-01' AND '2000-12-31' AND publisher.publisher_name = 'Free Press' ORDER BY book.num_pages DESC LIMIT 1",
        "retrieved": [
            6075
        ],
        "token_usage": {
            "tokens": 2060,
            "cost": 0.00038684999999999994
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Free Press' AND STRFTIME('%Y', T1.publication_date) BETWEEN '1990' AND '2000' ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "sample_id": 6062,
        "pred_sql": "SELECT author.author_name, book.title FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON author.author_id = book_author.author_id WHERE author.author_name = 'Tom Clancy'",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2112,
            "cost": 0.00039735
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Tom Clancy'"
    },
    {
        "sample_id": 5937,
        "pred_sql": "SELECT COUNT(*) FROM order_line INNER JOIN cust_order ON order_line.order_id = cust_order.order_id INNER JOIN book ON order_line.book_id = book.book_id WHERE book.title = 'O Xar\u00e1'",
        "retrieved": [
            6083
        ],
        "token_usage": {
            "tokens": 2103,
            "cost": 0.00039824999999999995
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'O Xar\u00e1'"
    },
    {
        "sample_id": 6026,
        "pred_sql": "SELECT address.street_number || ' ' || address.street_name || ', ' || address.city || ', ' || country.country_name AS full_address \nFROM address \nJOIN customer_address ON address.address_id = customer_address.address_id \nJOIN customer ON customer_address.customer_id = customer.customer_id \nJOIN country ON address.country_id = country.country_id \nWHERE address.city = 'Lazaro Cardenas';",
        "retrieved": [
            6004
        ],
        "token_usage": {
            "tokens": 2147,
            "cost": 0.00042689999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT street_number, street_name, city, country_id FROM address WHERE city = 'Lazaro Cardenas'"
    },
    {
        "sample_id": 6001,
        "pred_sql": "SELECT method_name FROM shipping_method WHERE method_id IN (SELECT shipping_method_id FROM cust_order GROUP BY shipping_method_id ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 1)",
        "retrieved": [
            6069
        ],
        "token_usage": {
            "tokens": 2164,
            "cost": 0.00042314999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) ASC LIMIT 1, 1"
    },
    {
        "sample_id": 5953,
        "pred_sql": "SELECT COUNT(book.book_id) FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'A.R. Braunmuller'",
        "retrieved": [
            5932
        ],
        "token_usage": {
            "tokens": 2035,
            "cost": 0.0003713999999999999
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'"
    },
    {
        "sample_id": 5954,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE author.author_name = 'Agatha Christie' AND book.publication_date = (SELECT MIN(publication_date) FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Agatha Christie')",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2218,
            "cost": 0.00045779999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Agatha Christie' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6085,
        "pred_sql": "SELECT country.country_name FROM customer INNER JOIN customer_address ON customer.customer_id = customer_address.customer_id INNER JOIN address ON customer_address.address_id = address.address_id INNER JOIN country ON address.country_id = country.country_id WHERE customer.email = 'rturbitt2@geocities.jp'",
        "retrieved": [
            6034
        ],
        "token_usage": {
            "tokens": 2142,
            "cost": 0.00042119999999999994
        },
        "db_id": "books",
        "gold_sql": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.email = 'rturbitT2@geocities.jp'"
    },
    {
        "sample_id": 6096,
        "pred_sql": "SELECT book.num_pages FROM book JOIN order_line ON book.book_id = order_line.book_id JOIN cust_order ON order_line.order_id = cust_order.order_id WHERE cust_order.order_id = '1167';",
        "retrieved": [
            6075
        ],
        "token_usage": {
            "tokens": 2015,
            "cost": 0.0003648
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.num_pages FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 1167"
    },
    {
        "sample_id": 6022,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = 'The Secret Garden'",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2083,
            "cost": 0.00037949999999999995
        },
        "db_id": "books",
        "gold_sql": "SELECT DISTINCT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Secret Garden'"
    },
    {
        "sample_id": 5963,
        "pred_sql": "SELECT title FROM book ORDER BY price DESC LIMIT 1;",
        "retrieved": [
            5948
        ],
        "token_usage": {
            "tokens": 2013,
            "cost": 0.00034964999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "sample_id": 5997,
        "pred_sql": "SELECT COUNT(*) AS address_count FROM address WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Philippines')",
        "retrieved": [
            6004
        ],
        "token_usage": {
            "tokens": 2026,
            "cost": 0.00035745
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(T2.country_id) FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Philippines'"
    },
    {
        "sample_id": 6087,
        "pred_sql": "SELECT book.title FROM book INNER JOIN book_author AS T2 ON book.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY book.publication_date LIMIT 1",
        "retrieved": [
            5952
        ],
        "token_usage": {
            "tokens": 2090,
            "cost": 0.0003873
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6052,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id ORDER BY book.publication_date ASC LIMIT 1",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2054,
            "cost": 0.00036299999999999993
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6082,
        "pred_sql": "SELECT address.street_number, address.street_name, address.city, country.country_name \nFROM customer \nINNER JOIN customer_address ON customer.customer_id = customer_address.customer_id \nINNER JOIN address ON customer_address.address_id = address.address_id \nINNER JOIN address_status ON customer_address.status_id = address_status.status_id \nINNER JOIN country ON address.country_id = country.country_id \nWHERE customer.first_name = 'Kandy' AND address_status.address_status = 'active';",
        "retrieved": [
            6083
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.0004091999999999999
        },
        "db_id": "books",
        "gold_sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN address_status AS T4 ON T4.status_id = T2.status_id WHERE T1.first_name = 'Kandy'"
    },
    {
        "sample_id": 6084,
        "pred_sql": "SELECT COUNT(*) FROM order_status INNER JOIN order_history AS T2 ON order_status.status_id = T2.status_id WHERE order_status.status_value = 'returned' AND STRFTIME('%Y', order_history.status_date) = '2022'",
        "retrieved": [
            6054
        ],
        "token_usage": {
            "tokens": 2077,
            "cost": 0.00038804999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2022'"
    },
    {
        "sample_id": 6013,
        "pred_sql": "SELECT address.city FROM address INNER JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'United States of America';",
        "retrieved": [
            6004
        ],
        "token_usage": {
            "tokens": 2056,
            "cost": 0.00037184999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT DISTINCT T2.city FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'United States of America'"
    },
    {
        "sample_id": 5930,
        "pred_sql": "SELECT book.title FROM book INNER JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Japanese' ORDER BY book.publication_date ASC LIMIT 1;",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2076,
            "cost": 0.00037529999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Japanese' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 5915,
        "pred_sql": "SELECT COUNT(*) FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE publisher.publisher_name = 'Thomas Nelson'",
        "retrieved": [
            6041
        ],
        "token_usage": {
            "tokens": 2033,
            "cost": 0.00036434999999999994
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'"
    },
    {
        "sample_id": 6078,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = 'The Season: A Candid Look at Broadway'",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2046,
            "cost": 0.0003528
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Season: A Candid Look at Broadway'"
    },
    {
        "sample_id": 5984,
        "pred_sql": "SELECT COUNT(*) FROM cust_order INNER JOIN customer ON cust_order.customer_id = customer.customer_id INNER JOIN order_history ON cust_order.order_id = order_history.order_id INNER JOIN order_status ON order_history.status_id = order_status.status_id WHERE customer.first_name = 'Daisey' AND customer.last_name = 'Lamball' AND STRFTIME('%Y', cust_order.order_date) = '2021'",
        "retrieved": [
            6054
        ],
        "token_usage": {
            "tokens": 2137,
            "cost": 0.0004213499999999999
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND STRFTIME('%Y', T1.order_date) = '2021'"
    },
    {
        "sample_id": 5931,
        "pred_sql": "SELECT publisher.publisher_name FROM publisher INNER JOIN book AS T2 ON publisher.publisher_id = T2.publisher_id GROUP BY publisher.publisher_name ORDER BY COUNT(T2.book_id) DESC LIMIT 1",
        "retrieved": [
            5998
        ],
        "token_usage": {
            "tokens": 2021,
            "cost": 0.00035804999999999995
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1"
    },
    {
        "sample_id": 6020,
        "pred_sql": "SELECT COUNT(*) FROM order_line INNER JOIN cust_order ON order_line.order_id = cust_order.order_id INNER JOIN book ON order_line.book_id = book.book_id INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Stephen King' AND book.title = (SELECT title FROM book WHERE author.author_name = 'Stephen King' ORDER BY publication_date LIMIT 1)",
        "retrieved": [
            6083
        ],
        "token_usage": {
            "tokens": 2083,
            "cost": 0.00038804999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(T1.publication_date) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T3.author_name = 'Stephen King' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6019,
        "pred_sql": "SELECT book.title FROM book INNER JOIN book_language ON book.language_id = book_language.language_id INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book_language.language_code = 'es' AND publisher.publisher_name = 'Alfaguara'",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2146,
            "cost": 0.00041549999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.title FROM book_language AS T1 INNER JOIN book AS T2 ON T2.language_id = T1.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T1.language_name = 'Spanish' AND T3.publisher_name = 'Alfaguara' GROUP BY T2.title"
    },
    {
        "sample_id": 6074,
        "pred_sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'",
        "retrieved": [
            5948
        ],
        "token_usage": {
            "tokens": 2040,
            "cost": 0.00036224999999999994
        },
        "db_id": "books",
        "gold_sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'"
    },
    {
        "sample_id": 6042,
        "pred_sql": "SELECT COUNT(book.book_id) FROM book_language INNER JOIN book AS T2 ON book_language.language_id = T2.language_id WHERE book_language.language_name = 'Japanese'",
        "retrieved": [
            5982
        ],
        "token_usage": {
            "tokens": 2014,
            "cost": 0.00035925
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'"
    },
    {
        "sample_id": 6072,
        "pred_sql": "SELECT (COUNT(DISTINCT b1.book_id) * 100.0 / COUNT(DISTINCT b2.book_id)) AS percentage FROM book AS b1 INNER JOIN book_author AS ba ON b1.book_id = ba.book_id INNER JOIN author AS a ON ba.author_id = a.author_id INNER JOIN publisher AS p ON b1.publisher_id = p.publisher_id WHERE a.author_name = 'Hirohiko' AND p.publisher_name = 'Viz Media';",
        "retrieved": [
            5982
        ],
        "token_usage": {
            "tokens": 2109,
            "cost": 0.00041129999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'"
    },
    {
        "sample_id": 6090,
        "pred_sql": "SELECT customer.first_name, customer.last_name FROM customer INNER JOIN cust_order ON customer.customer_id = cust_order.customer_id INNER JOIN order_line ON cust_order.order_id = order_line.order_id WHERE order_line.price = (SELECT MIN(price) FROM order_line)",
        "retrieved": [
            5927
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.00038669999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id ORDER BY T1.price ASC LIMIT 1"
    },
    {
        "sample_id": 6023,
        "pred_sql": "SELECT COUNT(DISTINCT book.book_id) AS number_of_books FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE author.author_name = 'J.K Rowling' AND publisher.publisher_name = 'Scholastic';",
        "retrieved": [
            5952
        ],
        "token_usage": {
            "tokens": 2112,
            "cost": 0.00040005
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN book_author AS T3 ON T3.book_id = T1.book_id INNER JOIN author AS T4 ON T4.author_id = T3.author_id WHERE T2.publisher_name = 'Scholastic' AND T4.author_name = 'J.K. Rowling'"
    },
    {
        "sample_id": 5940,
        "pred_sql": "SELECT country.country_name FROM address INNER JOIN country ON address.country_id = country.country_id WHERE address.city = '\u017dirovnica'",
        "retrieved": [
            5938
        ],
        "token_usage": {
            "tokens": 2096,
            "cost": 0.00038459999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = '\u017dirovnica'"
    },
    {
        "sample_id": 5919,
        "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id WHERE book.num_pages = (SELECT MAX(num_pages) FROM book)",
        "retrieved": [
            6075
        ],
        "token_usage": {
            "tokens": 1984,
            "cost": 0.0003471
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "sample_id": 5981,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE author.author_name = 'Barry Eisler'",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2100,
            "cost": 0.00039014999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Barry Eisler'"
    },
    {
        "sample_id": 5995,
        "pred_sql": "SELECT book_language.language_name FROM book_language INNER JOIN book ON book_language.language_id = book.language_id GROUP BY book_language.language_name ORDER BY COUNT(book.book_id) ASC LIMIT 1;",
        "retrieved": [
            5982
        ],
        "token_usage": {
            "tokens": 2072,
            "cost": 0.00039315
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id GROUP BY T2.language_name ORDER BY COUNT(T2.language_name) ASC LIMIT 1"
    },
    {
        "sample_id": 6068,
        "pred_sql": "SELECT address.street_number, address.street_name, address.city FROM address INNER JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'Poland';",
        "retrieved": [
            6004
        ],
        "token_usage": {
            "tokens": 2078,
            "cost": 0.00038865
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.street_number, T1.street_name, T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Poland' LIMIT 10"
    },
    {
        "sample_id": 6105,
        "pred_sql": "SELECT SUM(b.num_pages) AS total_pages\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Mick Sever';",
        "retrieved": [
            6075
        ],
        "token_usage": {
            "tokens": 2079,
            "cost": 0.00040319999999999993
        },
        "db_id": "books",
        "gold_sql": "SELECT SUM(T1.num_pages) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Mick' AND T4.last_name = 'Sever'"
    },
    {
        "sample_id": 5992,
        "pred_sql": "SELECT title FROM book WHERE publication_date LIKE '1995%'",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 1998,
            "cost": 0.0003491999999999999
        },
        "db_id": "books",
        "gold_sql": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1995'"
    },
    {
        "sample_id": 9470,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE district = 'Unified School District' AND county = 'Orange' AND statustype = 'Merged') * 1.0 / (SELECT COUNT(*) FROM schools WHERE district = 'Elementary School District' AND county = 'Orange' AND statustype = 'Merged') AS ratio;",
        "retrieved": [
            9460
        ],
        "token_usage": {
            "tokens": 3868,
            "cost": 0.0006513
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'"
    },
    {
        "sample_id": 9495,
        "pred_sql": "SELECT frpm.\"frpm count (ages 5-17)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.\"mailstreet\" = 'PO Box 1040' AND schools.\"soc\" = '11';",
        "retrieved": [
            9454
        ],
        "token_usage": {
            "tokens": 3975,
            "cost": 0.0006911999999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T1.\"FRPM Count (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'"
    },
    {
        "sample_id": 9483,
        "pred_sql": "SELECT COUNT(*) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"charter school (y/n)\" = '1' AND schools.city = 'Hickman' AND frpm.\"district type\" = 'Elementary School District'",
        "retrieved": [
            9426
        ],
        "token_usage": {
            "tokens": 3940,
            "cost": 0.00069
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'"
    },
    {
        "sample_id": 9499,
        "pred_sql": "SELECT frpm.\"percent (%) eligible frpm (ages 5-17)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.low_grade = 'K' AND frpm.high_grade = '9' AND schools.county = 'Los Angeles'",
        "retrieved": [
            9460
        ],
        "token_usage": {
            "tokens": 3969,
            "cost": 0.0007046999999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.School, T1.\"FRPM Count (Ages 5-17)\" * 100 / T1.\"Enrollment (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'"
    },
    {
        "sample_id": 9466,
        "pred_sql": "SELECT AVG(satscores.avgscrwrite) AS average_writing_score, schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT MAX(numge1500) FROM satscores)",
        "retrieved": [
            9429
        ],
        "token_usage": {
            "tokens": 3974,
            "cost": 0.0007122
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"
    },
    {
        "sample_id": 9439,
        "pred_sql": "SELECT schools.charternum, satscores.avgscrwrite FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrwrite > 499 ORDER BY satscores.avgscrwrite DESC;",
        "retrieved": [
            9427
        ],
        "token_usage": {
            "tokens": 3877,
            "cost": 0.0006594
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null"
    },
    {
        "sample_id": 9431,
        "pred_sql": "SELECT COUNT(DISTINCT T2.school) FROM satscores INNER JOIN schools AS T2 ON satscores.cds = T2.cdscode WHERE satscores.avgscrmath > 560 AND T2.fundingtype = 'Directly funded'",
        "retrieved": [
            9427
        ],
        "token_usage": {
            "tokens": 3961,
            "cost": 0.0007084499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT COUNT(T2.\"School Code\") FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.\"Charter Funding Type\" = 'Directly funded'"
    },
    {
        "sample_id": 9480,
        "pred_sql": "SELECT schools.phone, schools.ext, schools.school FROM schools WHERE schools.zip = '95203-3704'",
        "retrieved": [
            9472
        ],
        "token_usage": {
            "tokens": 3838,
            "cost": 0.00063375
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'"
    },
    {
        "sample_id": 9438,
        "pred_sql": "SELECT COUNT(*) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.district = 'Alameda' AND schools.statustype = 'Merged' AND satscores.numtsttakr < 100;",
        "retrieved": [
            9460
        ],
        "token_usage": {
            "tokens": 3880,
            "cost": 0.0006598499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'"
    },
    {
        "sample_id": 9451,
        "pred_sql": "SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY CAST(frpm.\"enrollment (k-12)\" AS INTEGER) DESC LIMIT 1;",
        "retrieved": [
            9436
        ],
        "token_usage": {
            "tokens": 3876,
            "cost": 0.0006556499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.\"Enrollment (K-12)\" DESC LIMIT 1"
    },
    {
        "sample_id": 9465,
        "pred_sql": "SELECT MIN(avg_scores.avg_score) AS lowest_avg_score, frpm.\"county name\" FROM (SELECT satscores.sname, (CAST(satscores.avgscrmath AS FLOAT) + CAST(satscores.avgscrread AS FLOAT) + CAST(satscores.avgscrwrite AS FLOAT)) / 3 AS avg_score FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode) AS avg_scores GROUP BY avg_scores.sname ORDER BY lowest_avg_score LIMIT 1;",
        "retrieved": [
            9447
        ],
        "token_usage": {
            "tokens": 3998,
            "cost": 0.0007081500000000001
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1"
    },
    {
        "sample_id": 9455,
        "pred_sql": "SELECT schools.website, frpm.\"school name\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"free meal count (ages 5-17)\" BETWEEN 1900 AND 2000",
        "retrieved": [
            9448
        ],
        "token_usage": {
            "tokens": 3929,
            "cost": 0.0006631499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.Website, T1.\"School Name\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL"
    },
    {
        "sample_id": 9459,
        "pred_sql": "SELECT schools.street, schools.city, schools.zip, schools.state FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT MIN(numge1500) FROM satscores)",
        "retrieved": [
            9473
        ],
        "token_usage": {
            "tokens": 3895,
            "cost": 0.0006674999999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1"
    },
    {
        "sample_id": 9424,
        "pred_sql": "SELECT schools.zip FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.county name = 'Fresno' AND frpm.charter school (y/n) = '1'",
        "retrieved": [
            9476
        ],
        "token_usage": {
            "tokens": 3849,
            "cost": 0.0006524999999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"District Name\" = 'Fresno County Office of Education' AND T1.\"Charter School (Y/N)\" = 1"
    },
    {
        "sample_id": 9482,
        "pred_sql": "SELECT schools.website FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"charter school (y/n)\" = '1' AND frpm.virtual = 'P' AND frpm.\"county name\" = 'San Joaquin'",
        "retrieved": [
            9426
        ],
        "token_usage": {
            "tokens": 3909,
            "cost": 0.00067275
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1"
    },
    {
        "sample_id": 9428,
        "pred_sql": "SELECT schools.school, schools.city, schools.state FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numtsttakr > 500 AND schools.magnet = '1';",
        "retrieved": [
            9429
        ],
        "token_usage": {
            "tokens": 3919,
            "cost": 0.0006859499999999998
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500"
    },
    {
        "sample_id": 9477,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE mailstate = 'CA' AND county = 'Colusa') * 1.0 / (SELECT COUNT(*) FROM schools WHERE mailstate = 'CA' AND county = 'Humboldt') AS ratio;",
        "retrieved": [
            9460
        ],
        "token_usage": {
            "tokens": 3916,
            "cost": 0.00067335
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'"
    },
    {
        "sample_id": 9467,
        "pred_sql": "SELECT schools.school, AVG(satscores.avgscrwrite) AS average_writing_score \nFROM schools \nINNER JOIN satscores ON schools.cdscode = satscores.cds \nWHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich' \nGROUP BY schools.school;",
        "retrieved": [
            9447
        ],
        "token_usage": {
            "tokens": 3955,
            "cost": 0.00068145
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'"
    },
    {
        "sample_id": 9444,
        "pred_sql": "SELECT schools.school, satscores.numtsttakr FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;",
        "retrieved": [
            9429
        ],
        "token_usage": {
            "tokens": 3867,
            "cost": 0.0006610499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1"
    },
    {
        "sample_id": 1625,
        "pred_sql": "SELECT employees.firstname || ' ' || employees.lastname AS full_name FROM customers INNER JOIN employees ON customers.salesrepemployeenumber = employees.employeenumber WHERE customers.customername = 'Muscle Machine Inc';",
        "retrieved": [
            1628
        ],
        "token_usage": {
            "tokens": 1368,
            "cost": 0.0002736
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'"
    },
    {
        "sample_id": 1593,
        "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS sales_agent, e2.firstname || ' ' || e2.lastname AS supervisor FROM customers c INNER JOIN payments p ON c.customernumber = p.customernumber INNER JOIN employees e ON c.salesrepemployeenumber = e.employeenumber INNER JOIN employees e2 ON e.reportsto = e2.employeenumber WHERE p.amount = (SELECT MAX(amount) FROM payments)",
        "retrieved": [
            1555
        ],
        "token_usage": {
            "tokens": 1536,
            "cost": 0.00032624999999999993
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.firstName, T1.lastName, T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber ORDER BY T3.amount DESC LIMIT 1"
    },
    {
        "sample_id": 1578,
        "pred_sql": "SELECT COUNT(*) AS number_of_customers FROM customers WHERE country = 'Australia' AND creditlimit < 220000;",
        "retrieved": [
            1576
        ],
        "token_usage": {
            "tokens": 1327,
            "cost": 0.00023459999999999998
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'"
    },
    {
        "sample_id": 1604,
        "pred_sql": "SELECT offices.addressline1, offices.addressline2, offices.city, offices.state, offices.country, offices.postalcode \nFROM employees \nINNER JOIN customers ON employees.employeenumber = customers.salesrepemployeenumber \nINNER JOIN offices ON employees.officecode = offices.officecode \nWHERE customers.city = 'New York'",
        "retrieved": [
            1596
        ],
        "token_usage": {
            "tokens": 1470,
            "cost": 0.00029114999999999995
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'"
    },
    {
        "sample_id": 1563,
        "pred_sql": "SELECT AVG(total_price) FROM (SELECT SUM(orderdetails.quantityordered * orderdetails.priceeach) AS total_price FROM products INNER JOIN orderdetails ON products.productcode = orderdetails.productcode INNER JOIN orders ON orderdetails.ordernumber = orders.ordernumber INNER JOIN customers ON orders.customernumber = customers.customernumber WHERE products.productvendor = 'Exoto Designs' AND strftime('%Y', orders.orderdate) = '2005' GROUP BY orders.ordernumber) AS order_totals;",
        "retrieved": [
            1595
        ],
        "token_usage": {
            "tokens": 1478,
            "cost": 0.0003179999999999999
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND STRFTIME('%Y', T3.orderDate) = '2005'"
    },
    {
        "sample_id": 1642,
        "pred_sql": "SELECT products.productname, (products.msrp - products.buyprice) AS expected_profit_margin, SUM(orderdetails.quantityordered) AS total_quantity_ordered FROM orderdetails INNER JOIN products ON orderdetails.productcode = products.productcode GROUP BY products.productname ORDER BY total_quantity_ordered DESC LIMIT 1;",
        "retrieved": [
            1594
        ],
        "token_usage": {
            "tokens": 1506,
            "cost": 0.00032399999999999996
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT productName, MSRP - buyPrice FROM products WHERE productCode = ( SELECT productCode FROM orderdetails ORDER BY quantityOrdered DESC LIMIT 1 )"
    },
    {
        "sample_id": 1552,
        "pred_sql": "SELECT COUNT(payments.checknumber) FROM payments JOIN customers ON payments.customernumber = customers.customernumber WHERE customers.customername = 'Euro+ Shopping Channel' AND payments.paymentdate BETWEEN '2004-01-01' AND '2004-12-31'",
        "retrieved": [
            1598
        ],
        "token_usage": {
            "tokens": 1367,
            "cost": 0.00028335
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'"
    },
    {
        "sample_id": 1592,
        "pred_sql": "SELECT SUM(orderdetails.quantityordered * orderdetails.priceeach) AS total_value FROM orders INNER JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber INNER JOIN products ON orderdetails.productcode = products.productcode WHERE orders.status = 'Shipped' AND products.productline = 'Vintage Cars' AND orders.orderdate BETWEEN '2003-01-01' AND '2004-12-31'",
        "retrieved": [
            1595
        ],
        "token_usage": {
            "tokens": 1509,
            "cost": 0.00033659999999999994
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'"
    },
    {
        "sample_id": 1630,
        "pred_sql": "SELECT COUNT(employees.employeenumber) FROM employees INNER JOIN offices ON employees.officecode = offices.officecode WHERE offices.country = 'USA'",
        "retrieved": [
            1628
        ],
        "token_usage": {
            "tokens": 1307,
            "cost": 0.00023925
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(t1.employeeNumber) FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.country = 'USA' AND t1.jobTitle = 'Sales Rep'"
    },
    {
        "sample_id": 1590,
        "pred_sql": "SELECT payments.checknumber FROM customers INNER JOIN payments ON customers.customernumber = payments.customernumber INNER JOIN orders ON customers.customernumber = orders.customernumber WHERE customers.customername = 'Mini Gifts Distributors Ltd.' AND payments.paymentdate BETWEEN '2003-08-01' AND '2004-08-30';",
        "retrieved": [
            1547
        ],
        "token_usage": {
            "tokens": 1436,
            "cost": 0.00028335
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'"
    },
    {
        "sample_id": 1597,
        "pred_sql": "SELECT customers.phone FROM customers WHERE customers.contactlastname LIKE 'M%' AND customers.country != 'Germany';",
        "retrieved": [
            1586
        ],
        "token_usage": {
            "tokens": 1346,
            "cost": 0.00026444999999999995
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'"
    },
    {
        "sample_id": 1659,
        "pred_sql": "SELECT customers.customername, SUM(orderdetails.quantityordered * orderdetails.priceeach) AS profit FROM orderdetails INNER JOIN orders ON orderdetails.ordernumber = orders.ordernumber INNER JOIN customers ON orders.customernumber = customers.customernumber GROUP BY orders.ordernumber ORDER BY profit DESC LIMIT 1;",
        "retrieved": [
            1594
        ],
        "token_usage": {
            "tokens": 1507,
            "cost": 0.00032189999999999996
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1"
    },
    {
        "sample_id": 1548,
        "pred_sql": "SELECT COUNT(*) AS employee_count FROM employees INNER JOIN offices ON employees.officecode = offices.officecode WHERE offices.city = 'Sydney';",
        "retrieved": [
            1576
        ],
        "token_usage": {
            "tokens": 1383,
            "cost": 0.00027045
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )"
    },
    {
        "sample_id": 1549,
        "pred_sql": "SELECT employees.employeenumber FROM employees INNER JOIN offices ON employees.officecode = offices.officecode WHERE offices.city = 'New York' AND employees.reportsto = (SELECT employeenumber FROM employees WHERE firstname = 'Anthony' AND lastname = 'Bow')",
        "retrieved": [
            1555
        ],
        "token_usage": {
            "tokens": 1498,
            "cost": 0.000303
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'"
    },
    {
        "sample_id": 1546,
        "pred_sql": "SELECT customers.customername, customers.contactfirstname, customers.contactlastname, SUM(payments.amount) AS total_amount FROM employees INNER JOIN customers ON customers.salesrepemployeenumber = employees.employeenumber INNER JOIN payments ON customers.customernumber = payments.customernumber WHERE payments.paymentdate LIKE '2004%' GROUP BY customers.customername, customers.contactfirstname, customers.contactlastname ORDER BY total_amount DESC LIMIT 1;",
        "retrieved": [
            1555
        ],
        "token_usage": {
            "tokens": 1522,
            "cost": 0.0003201
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "sample_id": 1656,
        "pred_sql": "SELECT o.shippeddate \nFROM orders o \nJOIN orderdetails od ON o.ordernumber = od.ordernumber \nJOIN products p ON od.productcode = p.productcode \nWHERE p.priceeach = (SELECT MAX(priceeach) FROM products)",
        "retrieved": [],
        "token_usage": {
            "tokens": 1269,
            "cost": 0.00025515
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1"
    },
    {
        "sample_id": 1584,
        "pred_sql": "SELECT employees.firstname || ' ' || employees.lastname AS fullname, employees.email FROM offices INNER JOIN employees ON offices.officecode = employees.officecode WHERE offices.city = 'Paris'",
        "retrieved": [
            1647
        ],
        "token_usage": {
            "tokens": 1369,
            "cost": 0.0002814
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'"
    },
    {
        "sample_id": 1633,
        "pred_sql": "SELECT SUM(orderdetails.quantityordered * orderdetails.priceeach) AS total_price FROM orders INNER JOIN customers ON orders.customernumber = customers.customernumber INNER JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber WHERE customers.customername = 'Cruz & Sons Co.' AND orders.orderdate = '2003-03-03'",
        "retrieved": [
            1595
        ],
        "token_usage": {
            "tokens": 1463,
            "cost": 0.0003063
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(t1.priceEach * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'"
    },
    {
        "sample_id": 1600,
        "pred_sql": "SELECT COUNT(customers.customernumber) FROM orders INNER JOIN customers ON orders.customernumber = customers.customernumber WHERE orders.status = 'canceled' AND customers.creditlimit > 115000",
        "retrieved": [
            1569
        ],
        "token_usage": {
            "tokens": 1368,
            "cost": 0.0002691
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000"
    },
    {
        "sample_id": 1641,
        "pred_sql": "SELECT customers.customername, customers.contactfirstname, customers.contactlastname, SUM(payments.amount) AS total_payment FROM employees INNER JOIN customers ON customers.salesrepemployeenumber = employees.employeenumber INNER JOIN payments ON customers.customernumber = payments.customernumber WHERE payments.paymentdate LIKE '2005%' AND employees.reportsto = '1056' GROUP BY customers.customername, customers.contactfirstname, customers.contactlastname ORDER BY total_payment DESC LIMIT 1",
        "retrieved": [
            1555
        ],
        "token_usage": {
            "tokens": 1516,
            "cost": 0.0003201
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1"
    },
    {
        "sample_id": 1650,
        "pred_sql": "SELECT SUM(orderdetails.priceeach - products.buyprice) AS actual_profit FROM products INNER JOIN orderdetails ON products.productcode = orderdetails.productcode INNER JOIN orders ON orderdetails.ordernumber = orders.ordernumber WHERE orders.ordernumber = '10100'",
        "retrieved": [
            1595
        ],
        "token_usage": {
            "tokens": 1456,
            "cost": 0.00030795
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM((t1.priceEach - t2.buyPrice) * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t1.orderNumber = '10100'"
    },
    {
        "sample_id": 1617,
        "pred_sql": "SELECT customers.addressline1, customers.addressline2 FROM customers INNER JOIN orders ON customers.customernumber = orders.customernumber WHERE orders.ordernumber = '10383'",
        "retrieved": [
            1603
        ],
        "token_usage": {
            "tokens": 1404,
            "cost": 0.00028979999999999994
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'"
    },
    {
        "sample_id": 1653,
        "pred_sql": "SELECT productname FROM products ORDER BY buyprice DESC LIMIT 3;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1239,
            "cost": 0.00023624999999999997
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3"
    },
    {
        "sample_id": 1652,
        "pred_sql": "SELECT SUM(orderdetails.priceeach * orderdetails.quantityordered) AS total_price FROM orderdetails WHERE ordernumber = '10100'",
        "retrieved": [
            1547
        ],
        "token_usage": {
            "tokens": 1419,
            "cost": 0.0002835
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'"
    },
    {
        "sample_id": 1658,
        "pred_sql": "SELECT orders.ordernumber FROM customers INNER JOIN orders ON customers.customernumber = orders.customernumber WHERE customers.creditlimit = 45300;",
        "retrieved": [
            1565
        ],
        "token_usage": {
            "tokens": 1313,
            "cost": 0.00024734999999999997
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300"
    },
    {
        "sample_id": 1660,
        "pred_sql": "SELECT strftime('%Y', paymentdate) AS year, COUNT(*) AS transaction_count FROM payments WHERE amount < 10000 GROUP BY year;",
        "retrieved": [
            1598
        ],
        "token_usage": {
            "tokens": 1348,
            "cost": 0.00027015
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT STRFTIME('%Y', t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY STRFTIME('%Y', t1.paymentDate)"
    },
    {
        "sample_id": 9777,
        "pred_sql": "SELECT DISTINCT cards.keywords FROM cards WHERE cards.name = 'Angel of Mercy'",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3826,
            "cost": 0.0006171
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'"
    },
    {
        "sample_id": 9768,
        "pred_sql": "SELECT cards.id, cards.artist FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.power = '*' AND legalities.format = 'commander' AND legalities.status = 'legal'",
        "retrieved": [
            9801
        ],
        "token_usage": {
            "tokens": 3896,
            "cost": 0.0006627
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')"
    },
    {
        "sample_id": 9887,
        "pred_sql": "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = \"Ancestor's Chosen\" AND foreign_data.language = \"Korean\";",
        "retrieved": [
            9854
        ],
        "token_usage": {
            "tokens": 3926,
            "cost": 0.0006631499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'"
    },
    {
        "sample_id": 9809,
        "pred_sql": "SELECT cards.colors FROM cards JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW'",
        "retrieved": [
            9857
        ],
        "token_usage": {
            "tokens": 3848,
            "cost": 0.0006334499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )"
    },
    {
        "sample_id": 9895,
        "pred_sql": "SELECT sets.isforeignonly FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Adarkar Valkyrie'",
        "retrieved": [
            9854
        ],
        "token_usage": {
            "tokens": 3870,
            "cost": 0.00063135
        },
        "db_id": "card_games",
        "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'"
    },
    {
        "sample_id": 9804,
        "pred_sql": "SELECT cards.id FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability LIKE '%paper%' AND foreign_data.language = 'Japanese'",
        "retrieved": [
            9832
        ],
        "token_usage": {
            "tokens": 3898,
            "cost": 0.0006467999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'"
    },
    {
        "sample_id": 9943,
        "pred_sql": "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = '1';",
        "retrieved": [
            9769
        ],
        "token_usage": {
            "tokens": 4000,
            "cost": 0.0006980999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'"
    },
    {
        "sample_id": 9907,
        "pred_sql": "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce'",
        "retrieved": [
            9769
        ],
        "token_usage": {
            "tokens": 3899,
            "cost": 0.0006492
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'"
    },
    {
        "sample_id": 9911,
        "pred_sql": "SELECT sets.keyrunecode FROM sets WHERE sets.code = 'PKHC'",
        "retrieved": [
            9864
        ],
        "token_usage": {
            "tokens": 3892,
            "cost": 0.0006414
        },
        "db_id": "card_games",
        "gold_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'"
    },
    {
        "sample_id": 9866,
        "pred_sql": "SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros';",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3886,
            "cost": 0.0006494999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'"
    },
    {
        "sample_id": 9936,
        "pred_sql": "SELECT name, convertedmanacost FROM cards WHERE dueldeck IS NOT NULL ORDER BY convertedmanacost DESC LIMIT 10;",
        "retrieved": [
            9820
        ],
        "token_usage": {
            "tokens": 3864,
            "cost": 0.00064035
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10"
    },
    {
        "sample_id": 9806,
        "pred_sql": "SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'legacy'",
        "retrieved": [
            9772
        ],
        "token_usage": {
            "tokens": 3916,
            "cost": 0.0006657
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'"
    },
    {
        "sample_id": 9885,
        "pred_sql": "SELECT COUNT(set_translations.id) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy'",
        "retrieved": [
            9772
        ],
        "token_usage": {
            "tokens": 3890,
            "cost": 0.0006482999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL"
    },
    {
        "sample_id": 9861,
        "pred_sql": "SELECT name FROM sets WHERE code = 'ALL'",
        "retrieved": [
            9864
        ],
        "token_usage": {
            "tokens": 3834,
            "cost": 0.0006083999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM sets WHERE code = 'ALL'"
    },
    {
        "sample_id": 9814,
        "pred_sql": "SELECT cards.name FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;",
        "retrieved": [
            9766
        ],
        "token_usage": {
            "tokens": 3901,
            "cost": 0.0006477
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3"
    },
    {
        "sample_id": 9845,
        "pred_sql": "SELECT cards.cardkingdomfoilid, cards.cardkingdomid FROM cards WHERE cards.cardkingdomid IS NOT NULL AND cards.cardkingdomfoilid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3",
        "retrieved": [
            9800
        ],
        "token_usage": {
            "tokens": 3894,
            "cost": 0.0006506999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3"
    },
    {
        "sample_id": 9834,
        "pred_sql": "SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.type LIKE '%Creature%' AND cards.layout = 'normal' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French'",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3938,
            "cost": 0.00067755
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'"
    },
    {
        "sample_id": 9946,
        "pred_sql": "SELECT DISTINCT cards.artist FROM cards WHERE cards.bordercolor = 'black' AND cards.availability LIKE '%arena%'",
        "retrieved": [
            9857
        ],
        "token_usage": {
            "tokens": 3852,
            "cost": 0.00063585
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'"
    },
    {
        "sample_id": 9810,
        "pred_sql": "SELECT set_translations.language, cards.convertedmanacost FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = '10E' AND cards.convertedmanacost = '5'",
        "retrieved": [
            9851
        ],
        "token_usage": {
            "tokens": 3923,
            "cost": 0.0006672
        },
        "db_id": "card_games",
        "gold_sql": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'"
    },
    {
        "sample_id": 9871,
        "pred_sql": "SELECT foreign_data.language, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3913,
            "cost": 0.0006656999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'"
    },
    {
        "sample_id": 9795,
        "pred_sql": "SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd'",
        "retrieved": [
            9769
        ],
        "token_usage": {
            "tokens": 3837,
            "cost": 0.0006138
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'"
    },
    {
        "sample_id": 9783,
        "pred_sql": "SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.istextless = 0",
        "retrieved": [
            9785
        ],
        "token_usage": {
            "tokens": 3924,
            "cost": 0.00066645
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0"
    },
    {
        "sample_id": 9898,
        "pred_sql": "SELECT name FROM cards WHERE setcode = 'CSP' ORDER BY convertedmanacost DESC LIMIT 1;",
        "retrieved": [
            9905
        ],
        "token_usage": {
            "tokens": 3935,
            "cost": 0.0006658499999999998
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1"
    },
    {
        "sample_id": 9852,
        "pred_sql": "SELECT sets.id, sets.name FROM sets INNER JOIN cards ON sets.code = cards.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE sets.block = 'Shadowmoor' AND foreign_data.language = 'Italian' GROUP BY sets.id, sets.name ORDER BY sets.name ASC LIMIT 2;",
        "retrieved": [
            9905
        ],
        "token_usage": {
            "tokens": 3973,
            "cost": 0.0006854999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2"
    },
    {
        "sample_id": 9813,
        "pred_sql": "SELECT cards.id FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.bordercolor = 'black'",
        "retrieved": [
            9857
        ],
        "token_usage": {
            "tokens": 3869,
            "cost": 0.0006456
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'"
    },
    {
        "sample_id": 9881,
        "pred_sql": "SELECT name, convertedmanacost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedmanacost DESC LIMIT 1;",
        "retrieved": [
            9820
        ],
        "token_usage": {
            "tokens": 3875,
            "cost": 0.0006473999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1"
    },
    {
        "sample_id": 9919,
        "pred_sql": "SELECT sets.type FROM sets WHERE sets.name = 'Huiti\u00e8me \u00e9dition'",
        "retrieved": [
            9851
        ],
        "token_usage": {
            "tokens": 3852,
            "cost": 0.0006291
        },
        "db_id": "card_games",
        "gold_sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )"
    },
    {
        "sample_id": 9842,
        "pred_sql": "SELECT COUNT(id) FROM cards WHERE isoversized = '1' AND isreprint = '1' AND ispromo = '1'",
        "retrieved": [
            9792
        ],
        "token_usage": {
            "tokens": 3845,
            "cost": 0.000624
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1"
    },
    {
        "sample_id": 9891,
        "pred_sql": "SELECT sets.name FROM sets JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Angel of Mercy' AND sets.mtgocode IS NOT NULL;",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3889,
            "cost": 0.0006521999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'"
    },
    {
        "sample_id": 9867,
        "pred_sql": "SELECT foreign_data.language, foreign_data.flavortext, cards.types FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3889,
            "cost": 0.0006499499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'"
    },
    {
        "sample_id": 9883,
        "pred_sql": "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3902,
            "cost": 0.0006568499999999998
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3"
    },
    {
        "sample_id": 9817,
        "pred_sql": "SELECT COUNT(cards.id) FROM cards WHERE cards.artist = 'UDON' AND cards.availability LIKE '%mtgo%' AND cards.hand = '-1'",
        "retrieved": [
            9841
        ],
        "token_usage": {
            "tokens": 3878,
            "cost": 0.0006402000000000001
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'"
    },
    {
        "sample_id": 9890,
        "pred_sql": "SELECT set_translations.translation FROM set_translations WHERE set_translations.setcode IN (SELECT sets.code FROM sets WHERE name = 'Eighth Edition') AND set_translations.language = 'Simplified Chinese'",
        "retrieved": [
            9927
        ],
        "token_usage": {
            "tokens": 3927,
            "cost": 0.0006677999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'"
    },
    {
        "sample_id": 9876,
        "pred_sql": "SELECT COUNT(cards.id) FROM cards WHERE cards.bordercolor = 'white' AND cards.power = '*'",
        "retrieved": [
            9805
        ],
        "token_usage": {
            "tokens": 3865,
            "cost": 0.0006346499999999998
        },
        "db_id": "card_games",
        "gold_sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'"
    },
    {
        "sample_id": 9787,
        "pred_sql": "SELECT DISTINCT cards.subtypes, cards.supertypes FROM cards WHERE cards.name = 'Benalish Knight'",
        "retrieved": [
            9878
        ],
        "token_usage": {
            "tokens": 3856,
            "cost": 0.0006351
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'"
    },
    {
        "sample_id": 9952,
        "pred_sql": "SELECT DISTINCT cards.frameversion, cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'banned' AND cards.artist = 'Allen Williams'",
        "retrieved": [
            9766
        ],
        "token_usage": {
            "tokens": 3932,
            "cost": 0.0006672
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'"
    },
    {
        "sample_id": 9931,
        "pred_sql": "SELECT sets.id FROM sets ORDER BY sets.basesetsize DESC LIMIT 1",
        "retrieved": [
            9854
        ],
        "token_usage": {
            "tokens": 3880,
            "cost": 0.0006387
        },
        "db_id": "card_games",
        "gold_sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1"
    },
    {
        "sample_id": 9793,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(cards.id) AS percentage_french_cards FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'legal' AND cards.isstoryspotlight = '1'",
        "retrieved": [
            9774
        ],
        "token_usage": {
            "tokens": 3996,
            "cost": 0.0007024499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1"
    },
    {
        "sample_id": 9921,
        "pred_sql": "SELECT COUNT(*) FROM set_translations WHERE set_translations.setcode IN (SELECT sets.code FROM sets WHERE name = 'Tenth Edition')",
        "retrieved": [
            9927
        ],
        "token_usage": {
            "tokens": 3943,
            "cost": 0.0006792
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL"
    },
    {
        "sample_id": 3119,
        "pred_sql": "SELECT production.id FROM production INNER JOIN country ON country.origin = production.country WHERE production.model_year = 1979 AND country.origin = 'Asia'",
        "retrieved": [
            3122
        ],
        "token_usage": {
            "tokens": 929,
            "cost": 0.00021674999999999998
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.ID FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Japan' AND T1.model_year = 1979"
    },
    {
        "sample_id": 3120,
        "pred_sql": "SELECT country.origin FROM data INNER JOIN production ON data.id = production.id INNER JOIN price ON data.id = price.id ORDER BY CAST(data.mpg AS FLOAT) ASC LIMIT 1;",
        "retrieved": [
            3102
        ],
        "token_usage": {
            "tokens": 946,
            "cost": 0.00022875
        },
        "db_id": "cars",
        "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg ASC LIMIT 1"
    },
    {
        "sample_id": 3145,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN country.country = 'USA' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS percentage_american_cars FROM data INNER JOIN production ON data.id = production.id INNER JOIN country ON country.origin = production.country",
        "retrieved": [
            3104
        ],
        "token_usage": {
            "tokens": 971,
            "cost": 0.00023069999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country"
    },
    {
        "sample_id": 3113,
        "pred_sql": "SELECT data.car_name FROM data INNER JOIN price ON data.id = price.id INNER JOIN production ON production.id = price.id INNER JOIN country ON country.origin = production.country WHERE country.origin = 'Japan' ORDER BY price.price DESC LIMIT 1;",
        "retrieved": [
            3125
        ],
        "token_usage": {
            "tokens": 882,
            "cost": 0.00019979999999999998
        },
        "db_id": "cars",
        "gold_sql": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "sample_id": 3103,
        "pred_sql": "SELECT c.origin, COUNT(p.id) AS total_cars, AVG(cars_per_year) AS annual_average FROM (SELECT model_year, COUNT(id) AS cars_per_year FROM production GROUP BY model_year) AS yearly_cars JOIN production p ON yearly_cars.model_year = p.model_year JOIN country c ON p.country = c.origin GROUP BY c.origin ORDER BY total_cars DESC LIMIT 1;",
        "retrieved": [
            3100
        ],
        "token_usage": {
            "tokens": 993,
            "cost": 0.000261
        },
        "db_id": "cars",
        "gold_sql": "SELECT T2.country, CAST(COUNT(T1.ID) AS REAL) / COUNT(DISTINCT T1.model_year) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin GROUP BY T2.country ORDER BY COUNT(T2.country) DESC LIMIT 1"
    },
    {
        "sample_id": 3096,
        "pred_sql": "SELECT country.origin, MAX(data.mpg) AS max_mpg FROM data INNER JOIN production ON data.id = production.id INNER JOIN country ON production.country = country.origin GROUP BY country.origin ORDER BY max_mpg DESC LIMIT 1;",
        "retrieved": [
            3100
        ],
        "token_usage": {
            "tokens": 956,
            "cost": 0.00024779999999999995
        },
        "db_id": "cars",
        "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg DESC LIMIT 1"
    },
    {
        "sample_id": 3114,
        "pred_sql": "SELECT data.car_name FROM data INNER JOIN price ON data.id = price.id WHERE price.price = 20000",
        "retrieved": [
            3070
        ],
        "token_usage": {
            "tokens": 812,
            "cost": 0.00016634999999999998
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000"
    },
    {
        "sample_id": 3097,
        "pred_sql": "SELECT data.car_name, price.price FROM price INNER JOIN production ON price.id = production.id INNER JOIN country ON production.country = country.origin INNER JOIN data ON data.id = price.id WHERE data.car_name LIKE 'Dodge%' ORDER BY price.price LIMIT 1;",
        "retrieved": [
            3102
        ],
        "token_usage": {
            "tokens": 901,
            "cost": 0.00020399999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name LIKE 'dodge%' ORDER BY T2.price ASC LIMIT 1"
    },
    {
        "sample_id": 3095,
        "pred_sql": "SELECT COUNT(*) FROM production WHERE id IN (SELECT id FROM data WHERE car_name = 'Ford Maverick')",
        "retrieved": [
            3116
        ],
        "token_usage": {
            "tokens": 884,
            "cost": 0.00019515
        },
        "db_id": "cars",
        "gold_sql": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'"
    },
    {
        "sample_id": 3124,
        "pred_sql": "SELECT price.price FROM data INNER JOIN price ON data.id = price.id WHERE data.car_name = 'Chevrolet Bel Air'",
        "retrieved": [
            3064
        ],
        "token_usage": {
            "tokens": 833,
            "cost": 0.00017174999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet bel air'"
    },
    {
        "sample_id": 3090,
        "pred_sql": "SELECT data.displacement / data.cylinders AS swept_volume FROM data INNER JOIN price ON data.id = price.id WHERE price.price = 34538.97449",
        "retrieved": [
            3093
        ],
        "token_usage": {
            "tokens": 858,
            "cost": 0.0001917
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.displacement / T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 34538.97449"
    },
    {
        "sample_id": 3083,
        "pred_sql": "SELECT data.displacement FROM price INNER JOIN data ON price.id = data.id WHERE price.price = 37443.85589",
        "retrieved": [
            3116
        ],
        "token_usage": {
            "tokens": 851,
            "cost": 0.000174
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.displacement FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '37443.85589'"
    },
    {
        "sample_id": 3092,
        "pred_sql": "SELECT COUNT(*) FROM production INNER JOIN country AS T2 ON production.country = T2.origin WHERE production.model_year = 1981 AND T2.country = 'USA'",
        "retrieved": [
            3068
        ],
        "token_usage": {
            "tokens": 849,
            "cost": 0.00017864999999999998
        },
        "db_id": "cars",
        "gold_sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'USA' AND T1.model_year = 1981"
    },
    {
        "sample_id": 3138,
        "pred_sql": "SELECT data.car_name FROM data INNER JOIN price ON data.id = price.id ORDER BY price.price DESC, data.mpg ASC LIMIT 1",
        "retrieved": [
            3091
        ],
        "token_usage": {
            "tokens": 859,
            "cost": 0.0001959
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.mpg DESC, T2.price DESC LIMIT 1"
    },
    {
        "sample_id": 3065,
        "pred_sql": "SELECT data.acceleration FROM data INNER JOIN price ON data.id = price.id ORDER BY price.price DESC LIMIT 1",
        "retrieved": [
            3091
        ],
        "token_usage": {
            "tokens": 833,
            "cost": 0.00018119999999999996
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "sample_id": 3135,
        "pred_sql": "SELECT DISTINCT country.origin FROM country INNER JOIN production ON country.origin = production.country INNER JOIN data ON production.id = data.id WHERE data.car_name = 'Chevy C20'",
        "retrieved": [
            3069
        ],
        "token_usage": {
            "tokens": 917,
            "cost": 0.00022304999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevy c20'"
    },
    {
        "sample_id": 3109,
        "pred_sql": "SELECT COUNT(data.id) FROM data INNER JOIN production ON data.id = production.id WHERE data.horsepower < 100 AND production.model_year = 1973",
        "retrieved": [
            3144
        ],
        "token_usage": {
            "tokens": 916,
            "cost": 0.00021614999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1973 AND T1.horsepower < 100"
    },
    {
        "sample_id": 3128,
        "pred_sql": "SELECT data.acceleration, data.cylinders, production.model_year FROM price INNER JOIN data ON price.id = data.id INNER JOIN production ON production.id = price.id ORDER BY price.price LIMIT 1;",
        "retrieved": [
            3102
        ],
        "token_usage": {
            "tokens": 936,
            "cost": 0.00022004999999999995
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1"
    },
    {
        "sample_id": 8738,
        "pred_sql": "SELECT crime.case_number FROM fbi_code INNER JOIN crime ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.crime_against = 'Persons' AND crime.iucr_no = '0110' AND crime.arrest = 'true'",
        "retrieved": [
            8672
        ],
        "token_usage": {
            "tokens": 1693,
            "cost": 0.0003138
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Criminal Sexual Assault' AND T2.arrest = 'TRUE' AND T1.crime_against = 'Persons' LIMIT 3"
    },
    {
        "sample_id": 8742,
        "pred_sql": "SELECT iucr.primary_description, COUNT(*) as crime_count FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'Rogers Park' GROUP BY iucr.primary_description ORDER BY crime_count DESC LIMIT 1;",
        "retrieved": [
            8754
        ],
        "token_usage": {
            "tokens": 1832,
            "cost": 0.00037199999999999993
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.fbi_code_no, T1.title FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Rogers Park' GROUP BY T1.fbi_code_no, T1.title"
    },
    {
        "sample_id": 8701,
        "pred_sql": "SELECT COUNT(*) FROM crime INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no INNER JOIN district ON crime.district_no = district.district_no WHERE fbi_code.crime_against = 'Society' AND district.district_name = 'Wentworth'",
        "retrieved": [
            8672
        ],
        "token_usage": {
            "tokens": 1731,
            "cost": 0.00033705
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'"
    },
    {
        "sample_id": 8690,
        "pred_sql": "SELECT community_area.community_area_name, community_area.population FROM community_area JOIN crime ON community_area.community_area_no = crime.community_area_no JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'Solicitation' GROUP BY community_area.community_area_name HAVING COUNT(crime.report_no) > (SELECT AVG(solicitation_count) FROM (SELECT COUNT(report_no) AS solicitation_count FROM crime JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'Solicitation' GROUP BY community_area.community_area_no));",
        "retrieved": [
            8675
        ],
        "token_usage": {
            "tokens": 1830,
            "cost": 0.00039374999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.community_area_name, T2.population FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T3.iucr_no = ( SELECT iucr_no FROM IUCR WHERE secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY iucr_no HAVING COUNT(iucr_no) > ( SELECT SUM(CASE WHEN secondary_description = 'SOLICIT FOR PROSTITUTE' THEN 1.0 ELSE 0 END) / COUNT(iucr_no) AS average FROM IUCR ) )"
    },
    {
        "sample_id": 8717,
        "pred_sql": "SELECT iucr.primary_description, iucr.secondary_description, COUNT(crime.report_no) AS incident_count\nFROM crime\nINNER JOIN iucr ON crime.iucr_no = iucr.iucr_no\nWHERE crime.location_description LIKE '%aircraft%'\nGROUP BY iucr.primary_description, iucr.secondary_description\nORDER BY incident_count DESC\nLIMIT 1;",
        "retrieved": [
            8652
        ],
        "token_usage": {
            "tokens": 1830,
            "cost": 0.00037664999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1"
    },
    {
        "sample_id": 8756,
        "pred_sql": "SELECT ward.ward_no FROM ward ORDER BY ward.population DESC LIMIT 1;",
        "retrieved": [
            8760
        ],
        "token_usage": {
            "tokens": 1741,
            "cost": 0.00031064999999999993
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1"
    },
    {
        "sample_id": 8596,
        "pred_sql": "SELECT COUNT(*) FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'Central Chicago'",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1683,
            "cost": 0.0003186
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'"
    },
    {
        "sample_id": 8680,
        "pred_sql": "SELECT crime.location_description, COUNT(*) as crime_count FROM crime GROUP BY crime.location_description ORDER BY crime_count DESC LIMIT 1;",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1671,
            "cost": 0.0003096
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.location_description FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Austin' GROUP BY T2.location_description ORDER BY COUNT(T2.case_number) DESC LIMIT 1"
    },
    {
        "sample_id": 8753,
        "pred_sql": "SELECT crime.report_no FROM district INNER JOIN crime ON district.district_no = crime.district_no WHERE district.commander = 'Jill M. Stevens'",
        "retrieved": [
            8664
        ],
        "token_usage": {
            "tokens": 1688,
            "cost": 0.0003135
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.commander = 'Jill M. Stevens' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no"
    },
    {
        "sample_id": 8719,
        "pred_sql": "SELECT COUNT(*) FROM crime WHERE arrest = 'true' AND iucr_no IN (SELECT iucr_no FROM iucr WHERE primary_description = 'Burglary' AND secondary_description = 'Forcible Entry') AND location_description = 'Day Care Center'",
        "retrieved": [
            8647
        ],
        "token_usage": {
            "tokens": 1715,
            "cost": 0.00031485
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'DAY CARE CENTER' AND T1.secondary_description = 'FORCIBLE ENTRY' AND T1.primary_description = 'BURGLARY'"
    },
    {
        "sample_id": 8607,
        "pred_sql": "SELECT district.district_name FROM crime INNER JOIN district ON crime.district_no = district.district_no WHERE crime.case_number = 'JB100065'",
        "retrieved": [
            8770
        ],
        "token_usage": {
            "tokens": 1656,
            "cost": 0.0002979
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB100065'"
    },
    {
        "sample_id": 8600,
        "pred_sql": "SELECT COUNT(*) AS total_crimes FROM crime INNER JOIN neighborhood ON crime.community_area_no = neighborhood.community_area_no WHERE neighborhood.neighborhood_name = 'Woodlawn' AND date BETWEEN '2018-01-01' AND '2018-01-31';",
        "retrieved": [
            8760
        ],
        "token_usage": {
            "tokens": 1815,
            "cost": 0.00035099999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'"
    },
    {
        "sample_id": 8765,
        "pred_sql": "SELECT COUNT(*) FROM crime INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE iucr.primary_description = 'BATTERY' AND crime.arrest = 'false'",
        "retrieved": [
            8758
        ],
        "token_usage": {
            "tokens": 1712,
            "cost": 0.000336
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T2.arrest = 'FALSE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'"
    },
    {
        "sample_id": 8681,
        "pred_sql": "SELECT side, COUNT(*) AS average_community_areas FROM community_area GROUP BY side;",
        "retrieved": [
            8675
        ],
        "token_usage": {
            "tokens": 1651,
            "cost": 0.00028859999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(T1.ward_no) AS REAL) / COUNT(DISTINCT T3.side) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no"
    },
    {
        "sample_id": 8617,
        "pred_sql": "SELECT fbi_code.description FROM fbi_code INNER JOIN crime ON fbi_code.fbi_code_no = crime.fbi_code_no WHERE crime.case_number = 'JB134191'",
        "retrieved": [
            8645
        ],
        "token_usage": {
            "tokens": 1665,
            "cost": 0.0003024
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'"
    },
    {
        "sample_id": 8741,
        "pred_sql": "SELECT DISTINCT community_area.community_area_name FROM community_area INNER JOIN crime ON community_area.community_area_no = crime.community_area_no INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title LIKE '%fraud%' LIMIT 3;",
        "retrieved": [
            8748
        ],
        "token_usage": {
            "tokens": 1755,
            "cost": 0.00034244999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Criminal Sexual Assault' LIMIT 3"
    },
    {
        "sample_id": 8757,
        "pred_sql": "SELECT COUNT(*) FROM crime INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE iucr.primary_description = 'ASSAULT'",
        "retrieved": [
            8758
        ],
        "token_usage": {
            "tokens": 1667,
            "cost": 0.00031304999999999994
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) FROM IUCR WHERE primary_description = 'ASSAULT'"
    },
    {
        "sample_id": 8667,
        "pred_sql": "SELECT crime.report_no FROM crime JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.side = 'far north side' AND community_area.population > 60000;",
        "retrieved": [
            8675
        ],
        "token_usage": {
            "tokens": 1730,
            "cost": 0.00033015
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.population > 60000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Far North '"
    },
    {
        "sample_id": 8611,
        "pred_sql": "SELECT crime.district_no FROM crime INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'First Degree Murder' GROUP BY crime.district_no ORDER BY COUNT(crime.case_number) DESC LIMIT 1;",
        "retrieved": [
            8760
        ],
        "token_usage": {
            "tokens": 1792,
            "cost": 0.00033899999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.district_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "sample_id": 8610,
        "pred_sql": "SELECT COUNT(*) AS simple_assault_count FROM crime INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'Simple Assault' AND crime.date = '2018/9/8';",
        "retrieved": [
            8672
        ],
        "token_usage": {
            "tokens": 1720,
            "cost": 0.00033134999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T2.secondary_description = 'SIMPLE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '%9/8/2018%' AND T2.primary_description = 'ASSAULT'"
    },
    {
        "sample_id": 8624,
        "pred_sql": "SELECT district.district_name, district.population FROM district ORDER BY district.population ASC LIMIT 1;",
        "retrieved": [
            8588
        ],
        "token_usage": {
            "tokens": 1614,
            "cost": 0.00028619999999999996
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(population) FROM Community_Area GROUP BY side ORDER BY SUM(population) LIMIT 1"
    },
    {
        "sample_id": 8739,
        "pred_sql": "SELECT district.district_name FROM district INNER JOIN crime ON district.district_no = crime.district_no WHERE crime.case_number = 'JB106545'",
        "retrieved": [
            8770
        ],
        "token_usage": {
            "tokens": 1672,
            "cost": 0.00030884999999999994
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Criminal Sexual Assault' AND T2.crime_against = 'Persons' AND T1.arrest = 'TRUE' LIMIT 3"
    },
    {
        "sample_id": 8656,
        "pred_sql": "SELECT (COUNT(CASE WHEN crime.arrest = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS arrest_percentage FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'West Pullman' AND crime.domestic = 'true';",
        "retrieved": [
            8664
        ],
        "token_usage": {
            "tokens": 1723,
            "cost": 0.0003363
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.arrest = 'TRUE' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'West Pullman' AND T2.domestic = 'TRUE'"
    },
    {
        "sample_id": 8712,
        "pred_sql": "SELECT COUNT(*) FROM district WHERE zip_code = 60608;",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1627,
            "cost": 0.0002805
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) AS cnt FROM District WHERE zip_code = 60608"
    },
    {
        "sample_id": 8659,
        "pred_sql": "SELECT COUNT(*) AS total_crimes FROM crime WHERE date = '2018-01-01'",
        "retrieved": [
            8760
        ],
        "token_usage": {
            "tokens": 1734,
            "cost": 0.00030464999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%'"
    },
    {
        "sample_id": 8589,
        "pred_sql": "SELECT district.commander FROM district INNER JOIN community_area ON district.district_no = community_area.side WHERE community_area.community_area_name = 'Central Chicago'",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1679,
            "cost": 0.00031439999999999994
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT commander FROM District WHERE district_name = 'Central'"
    },
    {
        "sample_id": 8603,
        "pred_sql": "SELECT AVG(crime_count) AS average_crimes FROM (SELECT neighborhood.neighborhood_name, COUNT(crime.report_no) AS crime_count FROM neighborhood INNER JOIN community_area ON neighborhood.community_area_no = community_area.community_area_no INNER JOIN crime ON community_area.community_area_no = crime.community_area_no WHERE community_area.side = 'Central Chicago' GROUP BY neighborhood.neighborhood_name) AS neighborhood_crime_counts;",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1719,
            "cost": 0.00033794999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(T1.report_no) AS REAL) / COUNT(T2.community_area_no) FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.side = 'Central'"
    },
    {
        "sample_id": 8609,
        "pred_sql": "SELECT district.commander FROM crime JOIN district ON crime.district_no = district.district_no WHERE crime.case_number = 'JB524952';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1641,
            "cost": 0.00032175
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB524952'"
    },
    {
        "sample_id": 8604,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN crime.district_no = (SELECT district_no FROM district WHERE district_name = 'Central') THEN crime.report_no END) AS FLOAT) * 100 / COUNT(crime.report_no) AS percentage_of_crimes_in_central FROM crime;",
        "retrieved": [
            8652
        ],
        "token_usage": {
            "tokens": 1762,
            "cost": 0.0003345
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no"
    },
    {
        "sample_id": 8699,
        "pred_sql": "SELECT COUNT(DISTINCT iucr.primary_description) AS different_crime_types FROM neighborhood INNER JOIN community_area ON neighborhood.community_area_no = community_area.community_area_no INNER JOIN crime ON community_area.community_area_no = crime.community_area_no INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE neighborhood.neighborhood_name = 'Hermosa'",
        "retrieved": [
            8754
        ],
        "token_usage": {
            "tokens": 1812,
            "cost": 0.00035775
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T4.neighborhood_name = 'Hermosa' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T4 ON T4.community_area_no = T3.community_area_no"
    },
    {
        "sample_id": 8657,
        "pred_sql": "SELECT crime.report_no FROM crime INNER JOIN district ON crime.district_no = district.district_no WHERE crime.domestic = 'true' AND district.commander = 'Christopher Taliaferro' AND crime.location_description LIKE '%bank%';",
        "retrieved": [
            8664
        ],
        "token_usage": {
            "tokens": 1775,
            "cost": 0.0003603
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.domestic = 'TRUE' THEN T1.report_no END) AS REAL) * 100 / COUNT(T1.report_no), COUNT(CASE WHEN T1.domestic = 'TRUE' AND T1.location_description = 'BANK' THEN T1.report_no END) AS \"number\" FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T2.alderman_first_name = 'Christopher' AND T2.alderman_last_name = 'Taliaferro'"
    },
    {
        "sample_id": 8695,
        "pred_sql": "SELECT ward.alderman_first_name FROM ward WHERE ward.population > 50000;",
        "retrieved": [
            8706
        ],
        "token_usage": {
            "tokens": 1746,
            "cost": 0.0003204
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT alderman_first_name FROM Ward WHERE Population > 50000"
    },
    {
        "sample_id": 8641,
        "pred_sql": "SELECT district.commander, district.email FROM district INNER JOIN community_area ON district.district_no = community_area.side WHERE community_area.community_area_name = 'Chicago Lawn'",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1672,
            "cost": 0.00031019999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn'"
    },
    {
        "sample_id": 8682,
        "pred_sql": "SELECT community_area.community_area_name FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no GROUP BY community_area.community_area_name ORDER BY COUNT(crime.report_no) DESC LIMIT 1;",
        "retrieved": [
            8706
        ],
        "token_usage": {
            "tokens": 1779,
            "cost": 0.0003429
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T2.location_description = 'STREET' GROUP BY T1.community_area_no ORDER BY COUNT(T2.location_description) DESC LIMIT 1"
    },
    {
        "sample_id": 8592,
        "pred_sql": "SELECT COUNT(neighborhood_name) AS neighborhood_count FROM neighborhood WHERE community_area_no = (SELECT community_area_no FROM community_area WHERE community_area_name = 'Lincoln Square')",
        "retrieved": [
            8675
        ],
        "token_usage": {
            "tokens": 1650,
            "cost": 0.000288
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3"
    },
    {
        "sample_id": 8614,
        "pred_sql": "SELECT ward.alderman_first_name || ' ' || ward.alderman_last_name || ' ' || ward.alderman_name_suffix AS full_name FROM ward INNER JOIN crime ON ward.ward_no = crime.ward_no WHERE crime.case_number = 'JB103470'",
        "retrieved": [
            8760
        ],
        "token_usage": {
            "tokens": 1797,
            "cost": 0.0003384
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.case_number = 'JB103470'"
    },
    {
        "sample_id": 8708,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN crime.domestic = 'false' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(crime.domestic) AS percentage_non_domestic_crimes FROM community_area INNER JOIN crime ON community_area.community_area_no = crime.community_area_no INNER JOIN district ON crime.district_no = district.district_no WHERE district.district_name = 'Jefferson Park'",
        "retrieved": [
            8754
        ],
        "token_usage": {
            "tokens": 1822,
            "cost": 0.00036644999999999994
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T2.case_number END) AS REAL) * 100 / COUNT(T2.case_number) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Jefferson Park'"
    },
    {
        "sample_id": 8709,
        "pred_sql": "SELECT AVG(ward.population) AS average_population FROM ward INNER JOIN crime ON ward.ward_no = crime.ward_no WHERE crime.location_description LIKE '%apartment%' AND crime.arrest = 'false';",
        "retrieved": [
            8706
        ],
        "token_usage": {
            "tokens": 1794,
            "cost": 0.00035054999999999993
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT AVG(T2.Population) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T1.arrest = 'FALSE'"
    },
    {
        "sample_id": 8698,
        "pred_sql": "SELECT crime.latitude, crime.longitude FROM community_area INNER JOIN crime ON community_area.community_area_no = crime.community_area_no WHERE community_area.community_area_name = 'Belmont Cragin'",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1678,
            "cost": 0.000312
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Belmont Cragin' GROUP BY T2.latitude, T2.longitude"
    },
    {
        "sample_id": 4154,
        "pred_sql": "SELECT COUNT(DISTINCT cites.citing_paper_id) AS cited_paper_count FROM cites INNER JOIN content ON cites.cited_paper_id = content.paper_id WHERE cites.cited_paper_id = 'word3555' AND cites.citing_paper_id = 'schmidt99advanced';",
        "retrieved": [
            4149
        ],
        "token_usage": {
            "tokens": 730,
            "cost": 0.00019049999999999997
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT COUNT(T2.paper_id) FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'schmidt99advanced' AND T2.word_cited_id = 'word3555'"
    },
    {
        "sample_id": 4150,
        "pred_sql": "SELECT DISTINCT content.word_cited_id FROM paper INNER JOIN content AS T2 ON paper.paper_id = T2.paper_id WHERE paper.class_label = 'AI' AND content.word_cited_id IN (SELECT DISTINCT content.word_cited_id FROM paper INNER JOIN content AS T2 ON paper.paper_id = T2.paper_id WHERE paper.class_label = 'IR')",
        "retrieved": [
            4147
        ],
        "token_usage": {
            "tokens": 752,
            "cost": 0.00021405
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'"
    },
    {
        "sample_id": 4142,
        "pred_sql": "SELECT DISTINCT p2.paper_id, p2.class_label FROM cites AS c1 INNER JOIN content AS c2 ON c1.citing_paper_id = c2.paper_id INNER JOIN paper AS p2 ON c1.cited_paper_id = p2.paper_id WHERE c2.word_cited_id IN (SELECT word_cited_id FROM content WHERE paper_id = '315017') AND c1.citing_paper_id != '315017';",
        "retrieved": [
            4146
        ],
        "token_usage": {
            "tokens": 759,
            "cost": 0.00020789999999999998
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017"
    },
    {
        "sample_id": 4153,
        "pred_sql": "SELECT DISTINCT content.word_cited_id FROM cites INNER JOIN paper ON cites.citing_paper_id = paper.paper_id INNER JOIN content ON cites.cited_paper_id = content.paper_id WHERE paper.class_label = 'sima01computational'",
        "retrieved": [
            4146
        ],
        "token_usage": {
            "tokens": 694,
            "cost": 0.00017295
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT DISTINCT T2.word_cited_id FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'sima01computational'"
    },
    {
        "sample_id": 4157,
        "pred_sql": "SELECT COUNT(cites.cited_paper_id) AS cited_count FROM cites JOIN paper ON cites.citing_paper_id = paper.paper_id WHERE paper.class_label = 'ML' AND cites.cited_paper_id = 'butz01algorithmic';",
        "retrieved": [
            4152
        ],
        "token_usage": {
            "tokens": 697,
            "cost": 0.0001788
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT COUNT(T1.paper_id) FROM paper AS T1 INNER JOIN cites AS T2 ON T1.paper_id = T2.citing_paper_id WHERE T1.class_label = 'ML' AND T2.cited_paper_id = 'butz01algorithmic'"
    },
    {
        "sample_id": 570,
        "pred_sql": "SELECT repo.id FROM repo INNER JOIN solution ON repo.id = solution.repid GROUP BY repo.id ORDER BY COUNT(solution.path) DESC LIMIT 1;",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 917,
            "cost": 0.00020234999999999999
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1"
    },
    {
        "sample_id": 687,
        "pred_sql": "SELECT COUNT(solution.path) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.stars = '111' AND repo.forks = '58' AND repo.watchers = '111'",
        "retrieved": [
            608
        ],
        "token_usage": {
            "tokens": 923,
            "cost": 0.00020414999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111"
    },
    {
        "sample_id": 579,
        "pred_sql": "SELECT COUNT(DISTINCT solution.path) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.id = (SELECT id FROM repo ORDER BY stars DESC LIMIT 1 OFFSET 1)",
        "retrieved": [
            634
        ],
        "token_usage": {
            "tokens": 906,
            "cost": 0.0001962
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )"
    },
    {
        "sample_id": 671,
        "pred_sql": "SELECT method.apicalls FROM method WHERE method.id = '10'",
        "retrieved": [
            646
        ],
        "token_usage": {
            "tokens": 848,
            "cost": 0.00016319999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10"
    },
    {
        "sample_id": 624,
        "pred_sql": "SELECT solution.path FROM solution INNER JOIN method ON solution.id = method.solutionid WHERE method.lang = 'sw' GROUP BY solution.path ORDER BY COUNT(solution.path) DESC LIMIT 1",
        "retrieved": [
            616
        ],
        "token_usage": {
            "tokens": 944,
            "cost": 0.00021314999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'"
    },
    {
        "sample_id": 607,
        "pred_sql": "SELECT stars FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.id = '45997'",
        "retrieved": [
            608
        ],
        "token_usage": {
            "tokens": 893,
            "cost": 0.00018839999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997"
    },
    {
        "sample_id": 675,
        "pred_sql": "SELECT solution.path FROM solution INNER JOIN method AS T2 ON solution.id = T2.solutionid WHERE T2.nametokenized = 'Sky.Excel.ExcelBook.TypeConvert'",
        "retrieved": [
            654
        ],
        "token_usage": {
            "tokens": 955,
            "cost": 0.00022649999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'"
    },
    {
        "sample_id": 604,
        "pred_sql": "SELECT fullcomment FROM method WHERE name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'",
        "retrieved": [
            658
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.00020925
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'"
    },
    {
        "sample_id": 623,
        "pred_sql": "SELECT COUNT(solution.repoid) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.stars = '3060'",
        "retrieved": [
            608
        ],
        "token_usage": {
            "tokens": 890,
            "cost": 0.00018659999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060"
    },
    {
        "sample_id": 683,
        "pred_sql": "SELECT method.name FROM method INNER JOIN solution ON method.solutionid = solution.id WHERE solution.path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln'",
        "retrieved": [
            654
        ],
        "token_usage": {
            "tokens": 953,
            "cost": 0.00021854999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'"
    },
    {
        "sample_id": 588,
        "pred_sql": "SELECT commentisxml FROM method WHERE name = 'HtmlSharp.HtmlParser.Feed'",
        "retrieved": [
            658
        ],
        "token_usage": {
            "tokens": 904,
            "cost": 0.000195
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'"
    },
    {
        "sample_id": 618,
        "pred_sql": "SELECT COUNT(solution.id) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.stars = '189' AND solution.wascompiled = '0'",
        "retrieved": [
            608
        ],
        "token_usage": {
            "tokens": 934,
            "cost": 0.0002103
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0"
    },
    {
        "sample_id": 666,
        "pred_sql": "SELECT method.summary FROM method WHERE method.lang = 'cs'",
        "retrieved": [
            587
        ],
        "token_usage": {
            "tokens": 913,
            "cost": 0.0001851
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'"
    },
    {
        "sample_id": 651,
        "pred_sql": "SELECT repo.url FROM solution INNER JOIN repo ON solution.repid = repo.id WHERE solution.id = '1'",
        "retrieved": [
            647
        ],
        "token_usage": {
            "tokens": 954,
            "cost": 0.00021509999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1"
    },
    {
        "sample_id": 686,
        "pred_sql": "SELECT COUNT(repo.id) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.path = 'ninject_Ninject\\Ninject.sln'",
        "retrieved": [
            599
        ],
        "token_usage": {
            "tokens": 938,
            "cost": 0.00020055
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'"
    },
    {
        "sample_id": 590,
        "pred_sql": "SELECT COUNT(solution.repoid) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.processedtime < 636439500080712000 AND repo.stars > 200",
        "retrieved": [
            599
        ],
        "token_usage": {
            "tokens": 920,
            "cost": 0.00019424999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )"
    },
    {
        "sample_id": 577,
        "pred_sql": "SELECT repo.id, COUNT(solution.path) AS solution_count, SUM(CASE WHEN solution.wascompiled = '1' THEN 1 ELSE 0 END) AS compiled_count \nFROM repo \nINNER JOIN solution ON repo.id = solution.repid \nWHERE repo.stars BETWEEN '6000' AND '9000' \nGROUP BY repo.id \nORDER BY solution_count DESC \nLIMIT 1;",
        "retrieved": [
            608
        ],
        "token_usage": {
            "tokens": 1097,
            "cost": 0.00029729999999999996
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1"
    },
    {
        "sample_id": 665,
        "pred_sql": "SELECT repo.url FROM repo WHERE repo.forks = (SELECT MAX(repo.forks) FROM repo)",
        "retrieved": [
            569
        ],
        "token_usage": {
            "tokens": 855,
            "cost": 0.00017055
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )"
    },
    {
        "sample_id": 635,
        "pred_sql": "SELECT DISTINCT repo.id FROM solution INNER JOIN method ON solution.id = method.solutionid WHERE method.name LIKE '%ro%'",
        "retrieved": [
            633
        ],
        "token_usage": {
            "tokens": 985,
            "cost": 0.00024179999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'"
    },
    {
        "sample_id": 581,
        "pred_sql": "SELECT m.fullcomment FROM method m INNER JOIN solution s ON m.solutionid = s.id WHERE s.path = 'bmatzelle_nini\\Source\\Nini.sln' AND m.nametokenized = 'alias text add alias'",
        "retrieved": [
            658
        ],
        "token_usage": {
            "tokens": 964,
            "cost": 0.0002211
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'"
    },
    {
        "sample_id": 677,
        "pred_sql": "SELECT watchers FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.path = 'maff_se3ue7\\US7.sln';",
        "retrieved": [
            599
        ],
        "token_usage": {
            "tokens": 963,
            "cost": 0.00021644999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'"
    },
    {
        "sample_id": 649,
        "pred_sql": "SELECT method.name FROM method INNER JOIN solution ON method.solutionid = solution.id WHERE solution.path = 'wallerdev_htmlsharp\\HtmlSharp.sln'",
        "retrieved": [
            654
        ],
        "token_usage": {
            "tokens": 918,
            "cost": 0.00020204999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'"
    },
    {
        "sample_id": 617,
        "pred_sql": "SELECT repo.watchers FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.id = '338082'",
        "retrieved": [
            646
        ],
        "token_usage": {
            "tokens": 924,
            "cost": 0.00020835
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082"
    },
    {
        "sample_id": 661,
        "pred_sql": "SELECT ((r1.stars - r2.stars) * 100.0 / r2.stars) AS percentage_difference FROM repo r1 INNER JOIN solution s1 ON r1.id = s1.repid INNER JOIN solution s2 ON s2.id = '2' INNER JOIN repo r2 ON r2.id = s2.repid WHERE s1.id = '1';",
        "retrieved": [
            608
        ],
        "token_usage": {
            "tokens": 935,
            "cost": 0.00021089999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "sample_id": 644,
        "pred_sql": "SELECT repo.forks FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.id = '35'",
        "retrieved": [
            646
        ],
        "token_usage": {
            "tokens": 924,
            "cost": 0.00020924999999999996
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35"
    },
    {
        "sample_id": 593,
        "pred_sql": "SELECT COUNT(solution.repoid) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.watchers > 1000 AND solution.wascompiled = 1",
        "retrieved": [
            595
        ],
        "token_usage": {
            "tokens": 972,
            "cost": 0.00021464999999999999
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1"
    },
    {
        "sample_id": 10136,
        "pred_sql": "SELECT comments.text, users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.displayname = 'Harvey Motulsky'",
        "retrieved": [
            10116
        ],
        "token_usage": {
            "tokens": 1912,
            "cost": 0.00036284999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'"
    },
    {
        "sample_id": 10020,
        "pred_sql": "SELECT (COUNT(CASE WHEN strftime('%Y', date) = '2010' THEN 1 END) * 100.0 / COUNT(*)) - (COUNT(CASE WHEN strftime('%Y', date) = '2011' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_difference FROM badges;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1817,
            "cost": 0.00035669999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'"
    },
    {
        "sample_id": 9994,
        "pred_sql": "SELECT posts.viewcount FROM posts WHERE posts.title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "retrieved": [
            10120
        ],
        "token_usage": {
            "tokens": 1855,
            "cost": 0.0003471
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"
    },
    {
        "sample_id": 10067,
        "pred_sql": "SELECT COUNT(*) AS negative_comment_count FROM comments WHERE userid = '13' AND score < 60;",
        "retrieved": [
            10120
        ],
        "token_usage": {
            "tokens": 1801,
            "cost": 0.000321
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60"
    },
    {
        "sample_id": 10062,
        "pred_sql": "SELECT (SELECT SUM(viewcount) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Mornington')) - (SELECT SUM(viewcount) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Amos')) AS view_count_difference;",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1853,
            "cost": 0.00033959999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId"
    },
    {
        "sample_id": 10106,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN users.age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(users.id) AS percentage_teenage_users FROM users",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1895,
            "cost": 0.00035535
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users"
    },
    {
        "sample_id": 10050,
        "pred_sql": "SELECT users.displayname FROM users WHERE users.views = (SELECT MAX(users.views) FROM users)",
        "retrieved": [
            9956
        ],
        "token_usage": {
            "tokens": 1822,
            "cost": 0.00033945
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"
    },
    {
        "sample_id": 10122,
        "pred_sql": "SELECT COUNT(*) AS number_of_posts FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.bountyamount > 30;",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1870,
            "cost": 0.00033719999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30"
    },
    {
        "sample_id": 10009,
        "pred_sql": "SELECT posts.title, posts.commentcount, AVG(posts.viewcount) AS average_view_count FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'humor' GROUP BY posts.title, posts.commentcount",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1895,
            "cost": 0.000363
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text"
    },
    {
        "sample_id": 10034,
        "pred_sql": "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1781,
            "cost": 0.0003045
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'"
    },
    {
        "sample_id": 9973,
        "pred_sql": "SELECT COUNT(id) AS badge_count FROM badges WHERE userid = 'csgillespie'",
        "retrieved": [
            9976
        ],
        "token_usage": {
            "tokens": 1830,
            "cost": 0.00033255
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    },
    {
        "sample_id": 10100,
        "pred_sql": "SELECT posts.id, posts.title FROM posts JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;",
        "retrieved": [
            9956
        ],
        "token_usage": {
            "tokens": 1811,
            "cost": 0.000327
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1"
    },
    {
        "sample_id": 9972,
        "pred_sql": "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;",
        "retrieved": [
            9963
        ],
        "token_usage": {
            "tokens": 1823,
            "cost": 0.00032744999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )"
    },
    {
        "sample_id": 9995,
        "pred_sql": "SELECT * FROM comments WHERE score = 17;",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1766,
            "cost": 0.00029144999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT Text FROM comments WHERE Score = 17"
    },
    {
        "sample_id": 10069,
        "pred_sql": "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'North Pole' AND badges.date LIKE '2011%'",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1862,
            "cost": 0.00035219999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'"
    },
    {
        "sample_id": 10091,
        "pred_sql": "SELECT MIN(votes.creationdate) AS first_vote_date FROM votes INNER JOIN posts ON votes.postid = posts.id INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl'",
        "retrieved": [
            10054
        ],
        "token_usage": {
            "tokens": 1854,
            "cost": 0.00034605
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1"
    },
    {
        "sample_id": 10075,
        "pred_sql": "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.favoritecount DESC LIMIT 1",
        "retrieved": [
            9963
        ],
        "token_usage": {
            "tokens": 1858,
            "cost": 0.00035204999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )"
    },
    {
        "sample_id": 10099,
        "pred_sql": "SELECT COUNT(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', posts.creaiondate) = '2010'",
        "retrieved": [
            10057
        ],
        "token_usage": {
            "tokens": 1869,
            "cost": 0.00033749999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'"
    },
    {
        "sample_id": 10066,
        "pred_sql": "SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images'",
        "retrieved": [
            10111
        ],
        "token_usage": {
            "tokens": 1859,
            "cost": 0.00033779999999999997
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'"
    },
    {
        "sample_id": 10021,
        "pred_sql": "SELECT posthistory.posthistorytypeid, COUNT(DISTINCT comments.userid) AS unique_user_count FROM posthistory INNER JOIN comments ON posthistory.postid = comments.postid WHERE posthistory.postid = 3720 GROUP BY posthistory.posthistorytypeid;",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1918,
            "cost": 0.00038309999999999993
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720"
    },
    {
        "sample_id": 9998,
        "pred_sql": "SELECT users.displayname FROM users JOIN comments ON users.id = comments.userid WHERE comments.text = 'thank you user93!'",
        "retrieved": [
            9956
        ],
        "token_usage": {
            "tokens": 1819,
            "cost": 0.0003367499999999999
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'"
    },
    {
        "sample_id": 10026,
        "pred_sql": "SELECT AVG(users.upvotes) AS average_upvotes, AVG(users.age) AS average_age FROM users INNER JOIN posts ON users.id = posts.owneruserid GROUP BY users.id HAVING COUNT(posts.id) > 10;",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1912,
            "cost": 0.0003588
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId"
    },
    {
        "sample_id": 9960,
        "pred_sql": "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie'",
        "retrieved": [
            10004
        ],
        "token_usage": {
            "tokens": 1874,
            "cost": 0.00036164999999999993
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    },
    {
        "sample_id": 10005,
        "pred_sql": "SELECT SUM(posts.score) AS total_score, users.websiteurl FROM posts INNER JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny'",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1887,
            "cost": 0.00034424999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl"
    },
    {
        "sample_id": 9967,
        "pred_sql": "SELECT COUNT(*) AS root_post_count FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL;",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1865,
            "cost": 0.00033239999999999995
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL"
    },
    {
        "sample_id": 10093,
        "pred_sql": "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1;",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1843,
            "cost": 0.00034214999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.\"Name\" = 'Autobiographer' ORDER BY T2.Date LIMIT 1"
    },
    {
        "sample_id": 10002,
        "pred_sql": "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10;",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1815,
            "cost": 0.00032714999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10"
    },
    {
        "sample_id": 10128,
        "pred_sql": "SELECT comments.text, users.displayname FROM users INNER JOIN posts AS T2 ON users.id = T2.owneruserid INNER JOIN comments AS T3 ON T2.id = T3.postid WHERE T2.title = 'Analysing wind data with R' ORDER BY users.creationdate LIMIT 10",
        "retrieved": [
            10116
        ],
        "token_usage": {
            "tokens": 1929,
            "cost": 0.00037529999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'"
    },
    {
        "sample_id": 10024,
        "pred_sql": "SELECT posts.id, posts.owneruserid FROM posts WHERE posts.score > 60;",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1816,
            "cost": 0.00032235
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )"
    },
    {
        "sample_id": 9953,
        "pred_sql": "SELECT users.displayname, users.reputation FROM users WHERE users.displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY users.reputation DESC LIMIT 1;",
        "retrieved": [
            10054
        ],
        "token_usage": {
            "tokens": 1818,
            "cost": 0.00032399999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )"
    },
    {
        "sample_id": 10096,
        "pred_sql": "SELECT users.displayname FROM users WHERE users.reputation = (SELECT MAX(users.reputation) FROM users)",
        "retrieved": [
            10065
        ],
        "token_usage": {
            "tokens": 1816,
            "cost": 0.00033315
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"
    },
    {
        "sample_id": 10058,
        "pred_sql": "SELECT COUNT(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id INNER JOIN users ON comments.userid = users.id WHERE comments.score < 60 AND users.displayname = 'Neil McGuigan'",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1837,
            "cost": 0.00033314999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60"
    },
    {
        "sample_id": 9984,
        "pred_sql": "SELECT COUNT(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount = 1910",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1821,
            "cost": 0.00032175
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910"
    },
    {
        "sample_id": 10138,
        "pred_sql": "SELECT (COUNT(CASE WHEN users.upvotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_zero_upvotes\nFROM comments\nINNER JOIN users ON comments.userid = users.id\nWHERE comments.score BETWEEN 5 AND 10;",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1875,
            "cost": 0.00035099999999999997
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10"
    },
    {
        "sample_id": 10082,
        "pred_sql": "SELECT posts.owneruserid FROM posts ORDER BY posts.favoritecount DESC LIMIT 1",
        "retrieved": [
            9963
        ],
        "token_usage": {
            "tokens": 1828,
            "cost": 0.00033404999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )"
    },
    {
        "sample_id": 10022,
        "pred_sql": "SELECT posts.id, posts.viewcount, posts.favoritecount FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE postlinks.postid = '61217'",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1885,
            "cost": 0.00036419999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217"
    },
    {
        "sample_id": 9974,
        "pred_sql": "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1813,
            "cost": 0.0003255
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.\"Name\" FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    },
    {
        "sample_id": 10046,
        "pred_sql": "SELECT displayname FROM users WHERE id = 30;",
        "retrieved": [
            10085
        ],
        "token_usage": {
            "tokens": 1768,
            "cost": 0.00030885
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE Id = 30"
    },
    {
        "sample_id": 6274,
        "pred_sql": "SELECT historical.market_cap FROM coins INNER JOIN historical AS T2 ON coins.id = T2.coin_id WHERE T2.date = '2013/4/28' AND coins.name = 'Bitcoin'",
        "retrieved": [
            6264
        ],
        "token_usage": {
            "tokens": 1297,
            "cost": 0.00026115
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'"
    },
    {
        "sample_id": 6287,
        "pred_sql": "SELECT coins.name, coins.symbol FROM coins LEFT JOIN historical ON coins.id = historical.coin_id WHERE historical.open IS NULL AND historical.date = 20130501",
        "retrieved": [
            6280
        ],
        "token_usage": {
            "tokens": 1294,
            "cost": 0.00026969999999999994
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL"
    },
    {
        "sample_id": 6283,
        "pred_sql": "SELECT coins.name FROM coins INNER JOIN historical ON coins.id = historical.coin_id ORDER BY historical.price DESC LIMIT 1",
        "retrieved": [
            6254
        ],
        "token_usage": {
            "tokens": 1286,
            "cost": 0.00025184999999999997
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )"
    },
    {
        "sample_id": 6267,
        "pred_sql": "SELECT historical.time_high FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE historical.date = '2013-04-29' AND coins.name = 'Bitcoin'",
        "retrieved": [
            6268
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.0002544
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'"
    },
    {
        "sample_id": 6259,
        "pred_sql": "SELECT coins.name, coins.status FROM coins INNER JOIN historical ON coins.id = historical.coin_id GROUP BY coins.id HAVING AVG(historical.price) > 1000;",
        "retrieved": [
            6254
        ],
        "token_usage": {
            "tokens": 1309,
            "cost": 0.00026205
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000"
    },
    {
        "sample_id": 6261,
        "pred_sql": "SELECT coins.name FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE coins.category = 'token' ORDER BY (historical.high - historical.low) DESC LIMIT 1;",
        "retrieved": [
            6254
        ],
        "token_usage": {
            "tokens": 1334,
            "cost": 0.00027974999999999994
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.category = 'token' ORDER BY T2.high - T2.low DESC LIMIT 1"
    },
    {
        "sample_id": 6260,
        "pred_sql": "SELECT coins.name, historical.date FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE historical.percent_change_1h = (SELECT MIN(percent_change_1h) FROM historical WHERE percent_change_1h IS NOT NULL)",
        "retrieved": [
            6254
        ],
        "token_usage": {
            "tokens": 1347,
            "cost": 0.00028529999999999994
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )"
    },
    {
        "sample_id": 6258,
        "pred_sql": "SELECT historical.date, historical.price FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE coins.name = 'Bitcoin' AND historical.price = (SELECT MIN(price) FROM historical WHERE coin_id = coins.id)",
        "retrieved": [
            6253
        ],
        "token_usage": {
            "tokens": 1309,
            "cost": 0.00027015
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1"
    },
    {
        "sample_id": 6250,
        "pred_sql": "SELECT SUM(historical.volume_24h) AS total_value FROM historical INNER JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Argentum' AND historical.date = '2016-10-11'",
        "retrieved": [
            6286
        ],
        "token_usage": {
            "tokens": 1323,
            "cost": 0.00027225
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'"
    },
    {
        "sample_id": 6266,
        "pred_sql": "SELECT historical.price FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE historical.date = '2013/4/29' AND coins.name = 'Bitcoin'",
        "retrieved": [
            6264
        ],
        "token_usage": {
            "tokens": 1314,
            "cost": 0.00026685
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'"
    },
    {
        "sample_id": 6295,
        "pred_sql": "SELECT coins.name FROM coins JOIN historical ON coins.id = historical.coin_id WHERE historical.date = 20130428 AND historical.price > (SELECT AVG(price) FROM historical WHERE date = 20130428)",
        "retrieved": [
            6280
        ],
        "token_usage": {
            "tokens": 1292,
            "cost": 0.00026579999999999996
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )"
    },
    {
        "sample_id": 3698,
        "pred_sql": "SELECT SUM(grad_150) FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_details.chronname = 'Amridge University' AND institution_grads.gender = 'M' AND institution_grads.race = 'H'",
        "retrieved": [
            3756
        ],
        "token_usage": {
            "tokens": 3383,
            "cost": 0.0005907
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.gender = 'M' AND T2.race = 'H'"
    },
    {
        "sample_id": 3719,
        "pred_sql": "SELECT site FROM institution_details WHERE state = 'PA' ORDER BY lat_y DESC LIMIT 1;",
        "retrieved": [
            3723
        ],
        "token_usage": {
            "tokens": 3305,
            "cost": 0.0005484
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' AND T1.lat_y = ( SELECT MAX(T1.lat_y) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' )"
    },
    {
        "sample_id": 3703,
        "pred_sql": "SELECT institution_details.chronname, MAX(institution_grads.grad_150_rate) AS max_grad_rate FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.year = 2011 AND institution_grads.gender = 'M' AND institution_grads.race = 'W' GROUP BY institution_details.chronname ORDER BY max_grad_rate DESC LIMIT 1;",
        "retrieved": [
            3756
        ],
        "token_usage": {
            "tokens": 3433,
            "cost": 0.00061575
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' AND T2.grad_150 = ( SELECT MAX(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' )"
    },
    {
        "sample_id": 3713,
        "pred_sql": "SELECT institution_details.state FROM institution_details WHERE institution_details.chronname = 'Mercer University'",
        "retrieved": [
            3714
        ],
        "token_usage": {
            "tokens": 3227,
            "cost": 0.00053175
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Mercer University' THEN state ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 3699,
        "pred_sql": "SELECT SUM(grad_cohort) AS total_graduates FROM institution_grads INNER JOIN institution_details ON institution_grads.unitid = institution_details.unitid WHERE institution_details.chronname = 'Lincoln College' AND institution_grads.year = 2011 AND institution_grads.cohort = '4y bach';",
        "retrieved": [
            3736
        ],
        "token_usage": {
            "tokens": 3342,
            "cost": 0.0005778
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT COUNT(T1.unitid) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Lincoln College' AND T2.year = 2011 AND T2.cohort = '4y bach'"
    },
    {
        "sample_id": 3707,
        "pred_sql": "SELECT COUNT(institution_details.chronname) FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_details.state = 'Alabama' AND institution_details.med_sat_percentile = '77' AND institution_grads.year = 2011 AND institution_grads.grad_cohort > 500",
        "retrieved": [
            3708
        ],
        "token_usage": {
            "tokens": 3429,
            "cost": 0.0006178499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.med_sat_percentile = '100' AND T2.year = 2011 AND T2.grad_cohort > 500"
    },
    {
        "sample_id": 3738,
        "pred_sql": "SELECT institution_details.site FROM institution_details WHERE student_count BETWEEN 500 AND 1000 AND vsa_year = (SELECT MAX(vsa_year) FROM institution_details)",
        "retrieved": [
            3736
        ],
        "token_usage": {
            "tokens": 3328,
            "cost": 0.0005716499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count BETWEEN 500 AND 1000 AND T2.year = ( SELECT MAX(T2.year) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )"
    },
    {
        "sample_id": 3730,
        "pred_sql": "SELECT institution_details.state, institution_details.chronname FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.year BETWEEN 2010 AND 2012 AND institution_grads.race = 'B'",
        "retrieved": [
            3683
        ],
        "token_usage": {
            "tokens": 3372,
            "cost": 0.0006038999999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'B' AND T2.year BETWEEN 2010 AND 2012"
    },
    {
        "sample_id": 3715,
        "pred_sql": "SELECT subquery_q0.t FROM (SELECT DISTINCT CASE WHEN state_sector_details.state = 'Delaware' THEN state_sector_details.state_post ELSE NULL END FROM state_sector_details) WHERE NOT subquery_q0.t IS NULL",
        "retrieved": [
            3717
        ],
        "token_usage": {
            "tokens": 3278,
            "cost": 0.0005636999999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Delaware' THEN state_abbr ELSE NULL END AS T FROM state_sector_grads ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 3712,
        "pred_sql": "SELECT site FROM institution_details WHERE chronname = 'Swarthmore College'",
        "retrieved": [
            3726
        ],
        "token_usage": {
            "tokens": 3254,
            "cost": 0.0005344499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Swarthmore College' THEN site ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 3693,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN institution_grads.race = 'B' THEN institution_grads.grad_cohort ELSE 0 END) AS FLOAT) * 100 / SUM(institution_grads.grad_cohort) AS percentage_black_students FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_details.control = 'Private for-profit'",
        "retrieved": [
            3694
        ],
        "token_usage": {
            "tokens": 3423,
            "cost": 0.0006165
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'B' AND T1.control = 'Private for-profit'"
    },
    {
        "sample_id": 3689,
        "pred_sql": "SELECT institution_details.chronname, institution_details.fte_value FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.grad_cohort < 200 AND institution_grads.year = 2013;",
        "retrieved": [
            3683
        ],
        "token_usage": {
            "tokens": 3331,
            "cost": 0.0005729999999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200"
    },
    {
        "sample_id": 3740,
        "pred_sql": "SELECT institution_details.site, institution_details.chronname FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.grad_cohort BETWEEN 20 AND 30 AND institution_grads.race = 'B' AND institution_grads.year = 2011",
        "retrieved": [
            3736
        ],
        "token_usage": {
            "tokens": 3356,
            "cost": 0.0005848499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.site, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.race = 'B' AND T2.grad_cohort BETWEEN 20 AND 30"
    },
    {
        "sample_id": 3685,
        "pred_sql": "SELECT SUM(ig.grad_cohort) AS total_male_grads FROM institution_grads ig INNER JOIN institution_details id ON ig.unitid = id.unitid WHERE ig.gender = 'M' AND ig.year = 2012 AND id.state = (SELECT state FROM institution_details WHERE aid_value = (SELECT MAX(aid_value) FROM institution_details))",
        "retrieved": [
            3756
        ],
        "token_usage": {
            "tokens": 3462,
            "cost": 0.00063045
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T2.gender = 'M' ORDER BY T1.aid_value DESC LIMIT 1"
    },
    {
        "sample_id": 3744,
        "pred_sql": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' ORDER BY retain_percentile DESC LIMIT 1;",
        "retrieved": [
            3721
        ],
        "token_usage": {
            "tokens": 3283,
            "cost": 0.00053655
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' AND retain_percentile = ( SELECT MAX(retain_percentile) FROM institution_details WHERE state = 'Connecticut' )"
    },
    {
        "sample_id": 3711,
        "pred_sql": "SELECT AVG(grad_100_rate) AS average_grad_rate FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_details.chronname = 'Central Alabama Community College' AND institution_grads.year = 2013;",
        "retrieved": [
            3694
        ],
        "token_usage": {
            "tokens": 3371,
            "cost": 0.0005808
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT AVG(T2.grad_100_rate) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'"
    },
    {
        "sample_id": 1006,
        "pred_sql": "SELECT person.yearsinprogram, person.inphase FROM person INNER JOIN advisedby ON person.p_id = advisedby.p_id WHERE advisedby.p_id_dummy = (SELECT advisedby.p_id_dummy FROM advisedby INNER JOIN person ON advisedby.p_id = person.p_id WHERE person.student = 1 ORDER BY advisedby.p_id_dummy DESC LIMIT 1)",
        "retrieved": [
            1013
        ],
        "token_usage": {
            "tokens": 901,
            "cost": 0.0002139
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.yearsInProgram, T2.inPhase FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "sample_id": 979,
        "pred_sql": "SELECT course.course_id, course.courselevel FROM taughtby INNER JOIN course ON taughtby.course_id = course.course_id INNER JOIN advisedby ON advisedby.p_id_dummy = taughtby.p_id WHERE advisedby.p_id = 80;",
        "retrieved": [
            995
        ],
        "token_usage": {
            "tokens": 868,
            "cost": 0.0001869
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80"
    },
    {
        "sample_id": 968,
        "pred_sql": "SELECT COUNT(DISTINCT taughtby.p_id) FROM taughtby WHERE course_id = 18 AND p_id IN (SELECT p_id FROM person WHERE professor = 0)",
        "retrieved": [
            1012
        ],
        "token_usage": {
            "tokens": 905,
            "cost": 0.00021314999999999998
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id = 18"
    },
    {
        "sample_id": 1010,
        "pred_sql": "SELECT person.p_id, course.courselevel FROM taughtby INNER JOIN person ON taughtby.p_id = person.p_id INNER JOIN course ON taughtby.course_id = course.course_id WHERE taughtby.course_id = 104 AND person.professor = 0;",
        "retrieved": [
            1012
        ],
        "token_usage": {
            "tokens": 922,
            "cost": 0.00021974999999999997
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course_id = 104 AND T1.hasPosition <> 0"
    },
    {
        "sample_id": 1031,
        "pred_sql": "SELECT AVG(course_count) FROM (SELECT COUNT(*) AS course_count FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id INNER JOIN course ON course.course_id = taughtby.course_id WHERE person.hasposition = 0 AND person.professor = 0 AND course.courselevel = 'Level_500' GROUP BY person.p_id) AS professor_courses;",
        "retrieved": [
            1021
        ],
        "token_usage": {
            "tokens": 976,
            "cost": 0.00024629999999999997
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500'"
    },
    {
        "sample_id": 989,
        "pred_sql": "SELECT person.p_id FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id INNER JOIN course ON taughtby.course_id = course.course_id WHERE person.professor = 0 AND course.courselevel = 'Level_300'",
        "retrieved": [
            1012
        ],
        "token_usage": {
            "tokens": 925,
            "cost": 0.00022155
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'"
    },
    {
        "sample_id": 971,
        "pred_sql": "SELECT person.p_id, course.course_id FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id WHERE person.professor = 0 AND person.hasposition = 0;",
        "retrieved": [
            995
        ],
        "token_usage": {
            "tokens": 890,
            "cost": 0.00020054999999999997
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0"
    },
    {
        "sample_id": 976,
        "pred_sql": "SELECT person.p_id FROM course INNER JOIN taughtby ON course.course_id = taughtby.course_id INNER JOIN person ON taughtby.p_id = person.p_id WHERE course.course_id = '165' AND person.professor = 0;",
        "retrieved": [
            1012
        ],
        "token_usage": {
            "tokens": 865,
            "cost": 0.0001869
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165"
    },
    {
        "sample_id": 1016,
        "pred_sql": "SELECT COUNT(*) FROM course WHERE courselevel = 'Level_500'",
        "retrieved": [
            1021
        ],
        "token_usage": {
            "tokens": 872,
            "cost": 0.0001875
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'"
    },
    {
        "sample_id": 972,
        "pred_sql": "SELECT DISTINCT taughtby.p_id FROM course INNER JOIN taughtby ON course.course_id = taughtby.course_id WHERE course.courselevel = 'Level_400'",
        "retrieved": [
            980
        ],
        "token_usage": {
            "tokens": 836,
            "cost": 0.00017489999999999997
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'"
    },
    {
        "sample_id": 999,
        "pred_sql": "SELECT COUNT(DISTINCT advisedby.p_id) FROM person INNER JOIN advisedby ON person.p_id = advisedby.p_id INNER JOIN taughtby ON person.p_id = taughtby.p_id INNER JOIN course ON taughtby.course_id = course.course_id WHERE person.yearsinprogram = 3 AND person.professor = 0;",
        "retrieved": [
            993
        ],
        "token_usage": {
            "tokens": 994,
            "cost": 0.00024989999999999995
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT COUNT(DISTINCT T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'"
    },
    {
        "sample_id": 969,
        "pred_sql": "SELECT course_id FROM course WHERE courselevel = 'Level_500'",
        "retrieved": [
            1008
        ],
        "token_usage": {
            "tokens": 832,
            "cost": 0.00017429999999999998
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT course_id FROM course WHERE courseLevel = 'Level_500'"
    },
    {
        "sample_id": 977,
        "pred_sql": "SELECT person.p_id, person.yearsinprogram FROM person INNER JOIN advisedby ON person.p_id = advisedby.p_id WHERE advisedby.p_id_dummy = 5 AND person.student = 1;",
        "retrieved": [
            1013
        ],
        "token_usage": {
            "tokens": 882,
            "cost": 0.00020294999999999997
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5"
    },
    {
        "sample_id": 1003,
        "pred_sql": "SELECT taughtby.p_id FROM taughtby WHERE course_id = 18",
        "retrieved": [
            1012
        ],
        "token_usage": {
            "tokens": 826,
            "cost": 0.00016394999999999997
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT p_id FROM taughtBy WHERE course_id = 18"
    },
    {
        "sample_id": 1004,
        "pred_sql": "SELECT advisedby.p_id, person.p_id FROM advisedby INNER JOIN person AS T2 ON advisedby.p_id_dummy = T2.p_id WHERE T2.hasposition = 0 AND advisedby.p_id = '303'",
        "retrieved": [
            1007
        ],
        "token_usage": {
            "tokens": 884,
            "cost": 0.00020819999999999996
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.hasPosition, T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE T1.p_id = 303"
    },
    {
        "sample_id": 8875,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN quantity ON recipe.recipe_id = quantity.recipe_id INNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id WHERE ingredient.name = 'frozen raspberries in light syrup' ORDER BY quantity.max_qty DESC LIMIT 1;",
        "retrieved": [
            8881
        ],
        "token_usage": {
            "tokens": 1480,
            "cost": 0.0002877
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'frozen raspberries in light syrup' AND T2.max_qty = T2.min_qty"
    },
    {
        "sample_id": 8924,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM recipe INNER JOIN quantity ON recipe.recipe_id = quantity.recipe_id INNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id WHERE ingredient.name LIKE '%cheese%')) AS percentage FROM recipe INNER JOIN quantity ON recipe.recipe_id = quantity.recipe_id INNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE ingredient.name LIKE '%cheese%' AND nutrition.calories > 200;",
        "retrieved": [
            8918
        ],
        "token_usage": {
            "tokens": 1527,
            "cost": 0.00031905
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T4.calories > 200 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T4 ON T4.recipe_id = T1.recipe_id WHERE T3.category = 'cheese'"
    },
    {
        "sample_id": 8922,
        "pred_sql": "SELECT ingredient.name FROM ingredient INNER JOIN quantity ON ingredient.ingredient_id = quantity.ingredient_id INNER JOIN recipe ON quantity.recipe_id = recipe.recipe_id ORDER BY (recipe.cook_min + recipe.prep_min + recipe.stnd_min) DESC LIMIT 1;",
        "retrieved": [
            8893
        ],
        "token_usage": {
            "tokens": 1503,
            "cost": 0.00029834999999999996
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1"
    },
    {
        "sample_id": 8917,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE nutrition.iron > 20",
        "retrieved": [
            8859
        ],
        "token_usage": {
            "tokens": 1424,
            "cost": 0.00025544999999999995
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "sample_id": 8898,
        "pred_sql": "SELECT recipe.title, (recipe.prep_min + recipe.cook_min + recipe.stnd_min) AS total_time FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY nutrition.total_fat DESC LIMIT 1",
        "retrieved": [
            8856
        ],
        "token_usage": {
            "tokens": 1490,
            "cost": 0.00029325
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1"
    },
    {
        "sample_id": 8912,
        "pred_sql": "SELECT nutrition.pcnt_cal_prot FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE recipe.title = 'Raspberry Chiffon Pie'",
        "retrieved": [
            8857
        ],
        "token_usage": {
            "tokens": 1451,
            "cost": 0.00026805
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT pcnt_cal_prot FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "sample_id": 8923,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN n.cholestrl = '0' AND (r.cook_min < 20) THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS percentage_no_cholesterol FROM recipe AS r INNER JOIN nutrition AS n ON r.recipe_id = n.recipe_id",
        "retrieved": [
            8906
        ],
        "token_usage": {
            "tokens": 1578,
            "cost": 0.00032445
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.cook_min < 20 AND T2.cholestrl = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id"
    },
    {
        "sample_id": 8872,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY nutrition.total_fat DESC LIMIT 1",
        "retrieved": [
            8856
        ],
        "token_usage": {
            "tokens": 1463,
            "cost": 0.0002784
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1"
    },
    {
        "sample_id": 8876,
        "pred_sql": "SELECT ingredient.name, CAST(COUNT(quantity.ingredient_id) AS FLOAT) * 100 / (SELECT COUNT(quantity.ingredient_id) FROM ingredient AS T1 INNER JOIN quantity AS T2 ON T2.ingredient_id = T1.ingredient_id) AS percentage FROM ingredient INNER JOIN quantity AS T2 ON T2.ingredient_id = ingredient.ingredient_id GROUP BY quantity.ingredient_id ORDER BY COUNT(quantity.ingredient_id) DESC LIMIT 1",
        "retrieved": [
            8897
        ],
        "token_usage": {
            "tokens": 1640,
            "cost": 0.0003585
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1"
    },
    {
        "sample_id": 8880,
        "pred_sql": "SELECT nutrition.vitamin_a FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE recipe.title = 'Sherry beef'",
        "retrieved": [
            8879
        ],
        "token_usage": {
            "tokens": 1435,
            "cost": 0.0002661
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T2.vitamin_a FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Sherried Beef'"
    },
    {
        "sample_id": 8888,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE nutrition.vitamin_c > 0 ORDER BY nutrition.vitamin_c DESC LIMIT 5;",
        "retrieved": [
            8887
        ],
        "token_usage": {
            "tokens": 1480,
            "cost": 0.00028454999999999995
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 5"
    },
    {
        "sample_id": 8904,
        "pred_sql": "SELECT ingredient.name, ingredient.category, quantity.max_qty, quantity.min_qty, quantity.unit, quantity.preparation, quantity.optional \nFROM ingredient \nINNER JOIN quantity ON ingredient.ingredient_id = quantity.ingredient_id \nINNER JOIN nutrition ON quantity.recipe_id = nutrition.recipe_id \nINNER JOIN recipe ON quantity.recipe_id = recipe.recipe_id \nWHERE recipe.recipe_id = (SELECT recipe_id FROM nutrition ORDER BY vitamin_a DESC LIMIT 1)",
        "retrieved": [
            8879
        ],
        "token_usage": {
            "tokens": 1536,
            "cost": 0.0003235499999999999
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id ORDER BY T3.vitamin_a DESC LIMIT 1"
    },
    {
        "sample_id": 8869,
        "pred_sql": "SELECT AVG(nutrition.calories) AS average_calories FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE recipe.source = 'Produce for Better Health Foundation and 5 a Day';",
        "retrieved": [
            8918
        ],
        "token_usage": {
            "tokens": 1465,
            "cost": 0.00027915
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT AVG(T2.calories) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'Produce for Better Health Foundation and 5 a Day'"
    },
    {
        "sample_id": 8878,
        "pred_sql": "SELECT quantity.min_qty FROM recipe INNER JOIN quantity AS T2 ON recipe.recipe_id = T2.recipe_id INNER JOIN ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE recipe.title = 'chicken pocket sandwich' AND T3.name = 'almonds'",
        "retrieved": [
            8867
        ],
        "token_usage": {
            "tokens": 1487,
            "cost": 0.0002784
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Chicken Pocket Sandwich' AND T3.name = 'almonds' AND T2.unit = 'cup(s)'"
    },
    {
        "sample_id": 8884,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE nutrition.iron > 20",
        "retrieved": [
            8859
        ],
        "token_usage": {
            "tokens": 1464,
            "cost": 0.00027854999999999997
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "sample_id": 876,
        "pred_sql": "SELECT prof.first_name, prof.last_name FROM prof INNER JOIN ra AS T2 ON prof.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'",
        "retrieved": [
            869
        ],
        "token_usage": {
            "tokens": 1262,
            "cost": 0.00027164999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'"
    },
    {
        "sample_id": 856,
        "pred_sql": "SELECT COUNT(*) FROM prof WHERE popularity > (SELECT popularity FROM prof WHERE first_name = 'Zhou' AND last_name = 'Zhihua')",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1170,
            "cost": 0.0002142
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )"
    },
    {
        "sample_id": 860,
        "pred_sql": "SELECT student.f_name, student.l_name FROM ra INNER JOIN student ON ra.student_id = student.student_id WHERE ra.capability = (SELECT MAX(capability) FROM ra)",
        "retrieved": [
            914
        ],
        "token_usage": {
            "tokens": 1242,
            "cost": 0.00025425
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5"
    },
    {
        "sample_id": 958,
        "pred_sql": "SELECT (COUNT(CASE WHEN registration.sat = 'high' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_highly_satisfied FROM registration INNER JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Intro to Database 2';",
        "retrieved": [
            865
        ],
        "token_usage": {
            "tokens": 1233,
            "cost": 0.0002583
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'"
    },
    {
        "sample_id": 912,
        "pred_sql": "SELECT student.f_name, student.l_name, student.gpa FROM prof INNER JOIN ra ON prof.prof_id = ra.prof_id INNER JOIN student ON ra.student_id = student.student_id WHERE prof.popularity = (SELECT MAX(popularity) FROM prof)",
        "retrieved": [
            914
        ],
        "token_usage": {
            "tokens": 1244,
            "cost": 0.0002559
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1"
    },
    {
        "sample_id": 956,
        "pred_sql": "SELECT prof.graduate_from FROM ra INNER JOIN prof ON ra.prof_id = prof.prof_id INNER JOIN student ON ra.student_id = student.student_id WHERE student.type = 'UG' GROUP BY ra.prof_id ORDER BY COUNT(ra.student_id) DESC LIMIT 1;",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1343,
            "cost": 0.00031709999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1"
    },
    {
        "sample_id": 966,
        "pred_sql": "SELECT AVG(CASE WHEN student.type = 'UG' THEN 1 ELSE 0 END) - AVG(CASE WHEN student.type = 'RPG' THEN 1 ELSE 0 END) AS difference FROM student INNER JOIN ra ON student.student_id = ra.student_id WHERE ra.capability < 3;",
        "retrieved": [
            965
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.0002877
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3"
    },
    {
        "sample_id": 855,
        "pred_sql": "SELECT name FROM course WHERE diff < (SELECT diff FROM course WHERE name = 'Machine Learning Theory')",
        "retrieved": [
            896
        ],
        "token_usage": {
            "tokens": 1166,
            "cost": 0.0002172
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )"
    },
    {
        "sample_id": 941,
        "pred_sql": "SELECT (COUNT(CASE WHEN ra.salary = 'low' THEN 1 END) * 100.0 / COUNT(ra.student_id)) AS percentage_low_salary\nFROM ra\nINNER JOIN prof ON ra.prof_id = prof.prof_id\nWHERE prof.teachingability <= 3;",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1276,
            "cost": 0.00027105
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3"
    },
    {
        "sample_id": 931,
        "pred_sql": "SELECT course.name FROM course INNER JOIN registration ON course.course_id = registration.course_id INNER JOIN student ON registration.student_id = student.student_id WHERE student.type = 'UG' ORDER BY registration.sat DESC LIMIT 1;",
        "retrieved": [
            918
        ],
        "token_usage": {
            "tokens": 1266,
            "cost": 0.00027764999999999995
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "sample_id": 940,
        "pred_sql": "SELECT student.email FROM student INNER JOIN registration ON student.student_id = registration.student_id INNER JOIN course ON registration.course_id = course.course_id WHERE registration.grade = 3 AND course.diff > (SELECT AVG(CAST(diff AS INTEGER)) * 0.8 FROM course)",
        "retrieved": [
            874
        ],
        "token_usage": {
            "tokens": 1248,
            "cost": 0.0002628
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8"
    },
    {
        "sample_id": 881,
        "pred_sql": "SELECT COUNT(registration.course_id) FROM registration JOIN student ON registration.student_id = student.student_id WHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin'",
        "retrieved": [
            888
        ],
        "token_usage": {
            "tokens": 1184,
            "cost": 0.00025364999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'"
    },
    {
        "sample_id": 943,
        "pred_sql": "SELECT AVG(teachingability) FROM prof WHERE popularity = (SELECT MAX(popularity) FROM prof)",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1177,
            "cost": 0.0002184
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )"
    },
    {
        "sample_id": 867,
        "pred_sql": "SELECT COUNT(*) FROM prof WHERE gender = 1 AND prof_id IN (SELECT prof_id FROM ra GROUP BY prof_id HAVING COUNT(student_id) > 3)",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1217,
            "cost": 0.00023925
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )"
    },
    {
        "sample_id": 939,
        "pred_sql": "SELECT COUNT(student.student_id) FROM ra INNER JOIN student ON ra.student_id = student.student_id WHERE ra.salary = 'low' AND student.gpa >= 3.5",
        "retrieved": [
            930
        ],
        "token_usage": {
            "tokens": 1241,
            "cost": 0.00026579999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'"
    },
    {
        "sample_id": 909,
        "pred_sql": "SELECT course.course_id, registration.student_id FROM registration INNER JOIN course ON registration.course_id = course.course_id WHERE registration.grade IS NULL",
        "retrieved": [
            884
        ],
        "token_usage": {
            "tokens": 1201,
            "cost": 0.0002391
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''"
    },
    {
        "sample_id": 900,
        "pred_sql": "SELECT DISTINCT course.name FROM registration INNER JOIN course ON registration.course_id = course.course_id INNER JOIN student ON registration.student_id = student.student_id WHERE student.intelligence = (SELECT MIN(intelligence) FROM student) ORDER BY registration.sat ASC",
        "retrieved": [
            899
        ],
        "token_usage": {
            "tokens": 1198,
            "cost": 0.000249
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1"
    },
    {
        "sample_id": 932,
        "pred_sql": "SELECT ra.capability FROM ra INNER JOIN student ON ra.student_id = student.student_id WHERE student.type = 'RPG' AND student.intelligence >= 4;",
        "retrieved": [
            965
        ],
        "token_usage": {
            "tokens": 1232,
            "cost": 0.00025544999999999995
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4"
    },
    {
        "sample_id": 905,
        "pred_sql": "SELECT COUNT(DISTINCT registration.student_id) FROM registration INNER JOIN student ON registration.student_id = student.student_id WHERE student.type = 'UG' AND registration.grade = 4 GROUP BY registration.student_id HAVING COUNT(registration.course_id) = (SELECT COUNT(course.course_id) FROM course INNER JOIN registration AS reg ON course.course_id = reg.course_id WHERE reg.student_id = registration.student_id)",
        "retrieved": [
            874
        ],
        "token_usage": {
            "tokens": 1318,
            "cost": 0.00030795
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'"
    },
    {
        "sample_id": 952,
        "pred_sql": "SELECT COUNT(DISTINCT registration.student_id) FROM registration INNER JOIN ra ON registration.student_id = ra.student_id INNER JOIN course ON registration.course_id = course.course_id WHERE ra.salary = 'high' AND course.name = 'computer vision'",
        "retrieved": [
            930
        ],
        "token_usage": {
            "tokens": 1209,
            "cost": 0.00024885
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'"
    },
    {
        "sample_id": 861,
        "pred_sql": "SELECT COUNT(ra.student_id) AS research_assistants_count FROM ra INNER JOIN prof ON ra.prof_id = prof.prof_id WHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki' AND ra.salary = 'med'",
        "retrieved": [
            886
        ],
        "token_usage": {
            "tokens": 1240,
            "cost": 0.00024224999999999995
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'"
    },
    {
        "sample_id": 854,
        "pred_sql": "SELECT course.name, course.diff FROM course WHERE course.name IN ('Intro to BlockChain', 'Computer Network') ORDER BY course.diff DESC LIMIT 1;",
        "retrieved": [
            915
        ],
        "token_usage": {
            "tokens": 1192,
            "cost": 0.0002373
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1"
    },
    {
        "sample_id": 889,
        "pred_sql": "SELECT prof.first_name, prof.last_name FROM prof WHERE prof.graduate_from = 'Ivy League'",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1236,
            "cost": 0.000252
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )"
    },
    {
        "sample_id": 879,
        "pred_sql": "SELECT prof.first_name, prof.last_name FROM ra INNER JOIN prof ON ra.prof_id = prof.prof_id WHERE prof.teachingability > (SELECT AVG(teachingability) FROM prof) GROUP BY ra.prof_id HAVING COUNT(ra.student_id) > 2",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1232,
            "cost": 0.000246
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1"
    },
    {
        "sample_id": 10907,
        "pred_sql": "SELECT (COALESCE(SUM(CASE WHEN yearmonth.customerid = '7' AND yearmonth.date BETWEEN '20130401' AND '20130430' THEN yearmonth.consumption END), 0) - COALESCE(SUM(CASE WHEN yearmonth.customerid = '5' AND yearmonth.date BETWEEN '20130401' AND '20130430' THEN yearmonth.consumption END), 0)) AS consumption_difference\nFROM yearmonth\nWHERE yearmonth.date BETWEEN '20130401' AND '20130430';",
        "retrieved": [
            10915
        ],
        "token_usage": {
            "tokens": 851,
            "cost": 0.00021854999999999997
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'"
    },
    {
        "sample_id": 10935,
        "pred_sql": "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012/8/25' AND transactions_1k.amount > 0 ORDER BY transactions_1k.transactionid LIMIT 1",
        "retrieved": [
            10954
        ],
        "token_usage": {
            "tokens": 857,
            "cost": 0.00022439999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1"
    },
    {
        "sample_id": 10946,
        "pred_sql": "SELECT customers.country FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE transactions_1k.date = '2012/8/24' AND transactions_1k.price * transactions_1k.amount = 548.4",
        "retrieved": [
            10942
        ],
        "token_usage": {
            "tokens": 854,
            "cost": 0.00020459999999999999
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4"
    },
    {
        "sample_id": 10948,
        "pred_sql": "SELECT (consumption_2013 - consumption_2012) / consumption_2012 * 100 AS decrease_rate\nFROM (\n    SELECT yearmonth.customerid, yearmonth.consumption AS consumption_2012\n    FROM transactions_1k\n    INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid\n    WHERE transactions_1k.date = '2012-08-25' AND transactions_1k.amount * transactions_1k.price = 634.8 AND yearmonth.date = 2012\n) AS T1\nJOIN (\n    SELECT yearmonth.customerid, yearmonth.consumption AS consumption_2013\n    FROM yearmonth\n    WHERE yearmonth.date = 2013\n) AS T2 ON T1.customerid = T2.customerid;",
        "retrieved": [
            10942
        ],
        "token_usage": {
            "tokens": 983,
            "cost": 0.00027614999999999996
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )"
    },
    {
        "sample_id": 10905,
        "pred_sql": "SELECT SUM(CAST(transactions_1k.amount AS REAL) * CAST(transactions_1k.price AS REAL)) AS total_consumption FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE transactions_1k.customerid = '6' AND yearmonth.date BETWEEN '20130801' AND '20131130'",
        "retrieved": [
            10944
        ],
        "token_usage": {
            "tokens": 810,
            "cost": 0.00020114999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'"
    },
    {
        "sample_id": 10913,
        "pred_sql": "SELECT gasstations.country, COUNT(*) AS total_value_for_money_gas_stations FROM gasstations WHERE gasstations.segment = 'value for money' GROUP BY gasstations.country",
        "retrieved": [
            10906
        ],
        "token_usage": {
            "tokens": 824,
            "cost": 0.00019424999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1"
    },
    {
        "sample_id": 10940,
        "pred_sql": "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012/8/24' AND transactions_1k.time = '12:42:00'",
        "retrieved": [
            10942
        ],
        "token_usage": {
            "tokens": 852,
            "cost": 0.00020205
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'"
    },
    {
        "sample_id": 10937,
        "pred_sql": "SELECT customers.segment FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.date = '2012/8/23' AND transactions_1k.time = '21:20:00'",
        "retrieved": [
            10942
        ],
        "token_usage": {
            "tokens": 827,
            "cost": 0.00018839999999999997
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'"
    },
    {
        "sample_id": 10910,
        "pred_sql": "SELECT customers.customerid, SUM(yearmonth.consumption) AS total_consumption FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY total_consumption DESC LIMIT 1;",
        "retrieved": [
            10912
        ],
        "token_usage": {
            "tokens": 833,
            "cost": 0.00020324999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"
    },
    {
        "sample_id": 10945,
        "pred_sql": "SELECT gasstations.country FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = '667467'",
        "retrieved": [
            10954
        ],
        "token_usage": {
            "tokens": 823,
            "cost": 0.00020669999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'"
    },
    {
        "sample_id": 10952,
        "pred_sql": "SELECT p.description, SUM(t.amount) AS total_sold\nFROM transactions_1k t\nJOIN products p ON t.productid = p.productid\nGROUP BY p.productid, p.description\nORDER BY total_sold DESC\nLIMIT 5;",
        "retrieved": [],
        "token_usage": {
            "tokens": 710,
            "cost": 0.00018074999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5"
    },
    {
        "sample_id": 10943,
        "pred_sql": "SELECT COUNT(*) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.date = '2012/8/26' AND transactions_1k.time BETWEEN '08:00' AND '09:00';",
        "retrieved": [
            10898
        ],
        "token_usage": {
            "tokens": 878,
            "cost": 0.00021224999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'"
    },
    {
        "sample_id": 10892,
        "pred_sql": "SELECT COUNT(*) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'",
        "retrieved": [
            10906
        ],
        "token_usage": {
            "tokens": 722,
            "cost": 0.00014115
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'"
    },
    {
        "sample_id": 10894,
        "pred_sql": "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201206' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) LIMIT 1",
        "retrieved": [
            10919
        ],
        "token_usage": {
            "tokens": 801,
            "cost": 0.00019439999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"
    },
    {
        "sample_id": 4652,
        "pred_sql": "SELECT voice-actors.character FROM voice-actors WHERE voice-actors.voice-actor = 'Frank Welker'",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1130,
            "cost": 0.00022304999999999997
        },
        "db_id": "disney",
        "gold_sql": "SELECT character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Frank Welker'"
    },
    {
        "sample_id": 4649,
        "pred_sql": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1180,
            "cost": 0.00022694999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'"
    },
    {
        "sample_id": 4699,
        "pred_sql": "SELECT voice-actors.voice-actor FROM voice-actors WHERE voice-actors.character = 'Calliope' AND voice-actors.movie = 'Hercules'",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1128,
            "cost": 0.00022094999999999998
        },
        "db_id": "disney",
        "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Hercules' AND character = 'Calliope'"
    },
    {
        "sample_id": 4623,
        "pred_sql": "SELECT director FROM director WHERE name = 'Pinocchio'",
        "retrieved": [
            4658
        ],
        "token_usage": {
            "tokens": 1088,
            "cost": 0.0001983
        },
        "db_id": "disney",
        "gold_sql": "SELECT director FROM director WHERE name = 'Pinocchio'"
    },
    {
        "sample_id": 4645,
        "pred_sql": "SELECT director FROM director INNER JOIN characters ON director.name = characters.movie_title INNER JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE movies_total_gross.genre = 'Adventure' AND characters.release_date = '2007-03-30';",
        "retrieved": [
            4656
        ],
        "token_usage": {
            "tokens": 1249,
            "cost": 0.00026924999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.director FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.name WHERE T2.genre = 'Adventure' AND T2.release_date = 'Mar 30, 2007'"
    },
    {
        "sample_id": 4663,
        "pred_sql": "SELECT voice-actors.voice-actor FROM voice-actors WHERE voice-actors.movie = 'Meet the Robinsons'",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1133,
            "cost": 0.00022484999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Meet the Robinsons'"
    },
    {
        "sample_id": 4732,
        "pred_sql": "SELECT movies_total_gross.movie_title, movies_total_gross.total_gross FROM director INNER JOIN movies_total_gross ON director.name = movies_total_gross.movie_title WHERE director.director = 'Chris Buck' ORDER BY movies_total_gross.release_date DESC LIMIT 1; SELECT movies_total_gross.movie_title, movies_total_gross.total_gross FROM director INNER JOIN movies_total_gross ON director.name = movies_total_gross.movie_title WHERE director.director = 'Chris Buck' ORDER BY CAST(REPLACE(TRIM(movies_total_gross.total_gross, ' '), ',', '') AS FLOAT) DESC LIMIT 1;",
        "retrieved": [
            4677
        ],
        "token_usage": {
            "tokens": 1293,
            "cost": 0.00031005
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title, MAX(T1.release_date), MAX(T1.inflation_adjusted_gross) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Chris Buck'"
    },
    {
        "sample_id": 4682,
        "pred_sql": "SELECT name FROM director WHERE director = 'Jack Kinney'",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1154,
            "cost": 0.00021134999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT name FROM director WHERE director = 'Jack Kinney'"
    },
    {
        "sample_id": 4685,
        "pred_sql": "SELECT characters.movie_title, characters.hero FROM voice-actors INNER JOIN characters ON voice-actors.character = characters.hero WHERE voice-actors.voice_actor = 'Bill Thompson';",
        "retrieved": [
            4655
        ],
        "token_usage": {
            "tokens": 1191,
            "cost": 0.0002322
        },
        "db_id": "disney",
        "gold_sql": "SELECT movie, character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Bill Thompson'"
    },
    {
        "sample_id": 4673,
        "pred_sql": "SELECT director.director FROM director INNER JOIN (SELECT movie, COUNT(*) as actor_count FROM voice-actors GROUP BY movie ORDER BY actor_count DESC LIMIT 1) AS most_voice_actors ON director.name = most_voice_actors.movie",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1161,
            "cost": 0.000243
        },
        "db_id": "disney",
        "gold_sql": "SELECT T2.director, COUNT(DISTINCT T1.\"voice-actor\") FROM \"voice-actors\" AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.\"voice-actor\") DESC LIMIT 1"
    },
    {
        "sample_id": 4727,
        "pred_sql": "SELECT (CAST(\"walt disney parks and resorts\" AS FLOAT) / total) * 100 AS proportion FROM revenue WHERE year = '2010'",
        "retrieved": [
            4622
        ],
        "token_usage": {
            "tokens": 1159,
            "cost": 0.0002382
        },
        "db_id": "disney",
        "gold_sql": "SELECT SUM(\"Walt Disney Parks and Resorts\") / SUM(Total) * 100 FROM revenue WHERE year = 2010"
    },
    {
        "sample_id": 4678,
        "pred_sql": "SELECT AVG(movies_total_gross.total_gross) AS average_total_gross FROM voice-actors INNER JOIN characters ON voice-actors.character = characters.hero INNER JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title WHERE voice-actors.voice_actor = 'Sterling Holloway';",
        "retrieved": [
            4679
        ],
        "token_usage": {
            "tokens": 1197,
            "cost": 0.00026234999999999995
        },
        "db_id": "disney",
        "gold_sql": "SELECT SUM(CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL)) / COUNT(T2.movie_title) FROM \"voice-actors\" AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE T1.\"voice-actor\" = 'Sterling Holloway'"
    },
    {
        "sample_id": 4627,
        "pred_sql": "SELECT voice_actors.voice_actor FROM voice_actors INNER JOIN characters ON voice_actors.movie = characters.movie_title WHERE characters.villian = 'Alice in Wonderland'",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1152,
            "cost": 0.00023444999999999998
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'"
    },
    {
        "sample_id": 4687,
        "pred_sql": "SELECT c.movie_title, c.hero, r.song FROM characters AS c INNER JOIN director AS d ON c.movie_title = d.name INNER JOIN round AS r ON c.movie_title = r.movie WHERE d.director = 'Wolfgang Reitherman' AND c.release_date LIKE '1977%';",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1245,
            "cost": 0.00025965
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title, T2.hero, T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name WHERE T3.director = 'Wolfgang Reitherman' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1977'"
    },
    {
        "sample_id": 4669,
        "pred_sql": "SELECT voice_actors.voice_actor FROM voice_actors INNER JOIN characters ON voice_actors.movie = characters.movie_title WHERE characters.villian = 'The Rescuers'",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1109,
            "cost": 0.0002109
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie WHERE T2.movie_title = 'The Rescuers' AND T1.character = T2.villian"
    },
    {
        "sample_id": 4733,
        "pred_sql": "SELECT voice_actors.voice_actor, COUNT(voice_actors.character) AS character_count FROM voice_actors GROUP BY voice_actors.voice_actor HAVING COUNT(voice_actors.character) > 5;",
        "retrieved": [
            4725
        ],
        "token_usage": {
            "tokens": 1182,
            "cost": 0.0002493
        },
        "db_id": "disney",
        "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" GROUP BY \"voice-actor\" HAVING COUNT(movie) > 5"
    },
    {
        "sample_id": 4689,
        "pred_sql": "SELECT characters.hero, director.director, characters.release_date FROM characters INNER JOIN director ON characters.movie_title = director.name WHERE characters.movie_title = 'Mulan'",
        "retrieved": [
            4641
        ],
        "token_usage": {
            "tokens": 1094,
            "cost": 0.0002163
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.hero, T2.director, T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.movie_title = 'Mulan'"
    },
    {
        "sample_id": 4633,
        "pred_sql": "SELECT round.villian FROM movies_total_gross INNER JOIN characters ON movies_total_gross.movie_title = characters.movie_title INNER JOIN round ON characters.movie_title = round.movie_title ORDER BY CAST(REPLACE(TRIM(movies_total_gross.inflation_adjusted_gross, ' '), ',','') AS FLOAT) DESC LIMIT 1;",
        "retrieved": [
            4725
        ],
        "token_usage": {
            "tokens": 1181,
            "cost": 0.00024824999999999994
        },
        "db_id": "disney",
        "gold_sql": "SELECT T2.villian FROM \"movies_total_gross\" AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1"
    },
    {
        "sample_id": 4691,
        "pred_sql": "SELECT characters.movie_title, director.director, characters.release_date FROM characters INNER JOIN voice-actors ON characters.hero = voice-actors.character INNER JOIN director ON characters.movie_title = director.name WHERE voice-actors.voice-actor = 'Freddie Jones';",
        "retrieved": [
            4696
        ],
        "token_usage": {
            "tokens": 1185,
            "cost": 0.00024209999999999998
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie, T3.director, T2.release_date FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T1.\"voice-actor\" = 'Freddie Jones'"
    },
    {
        "sample_id": 4637,
        "pred_sql": "SELECT round.song, characters.movie_title FROM round JOIN characters ON round.movie_title = characters.movie_title WHERE round.song = 'I Thought I Lost You';",
        "retrieved": [
            4719
        ],
        "token_usage": {
            "tokens": 1100,
            "cost": 0.00021539999999999998
        },
        "db_id": "disney",
        "gold_sql": "SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You'"
    },
    {
        "sample_id": 4646,
        "pred_sql": "SELECT T1.movie_title, T1.inflation_adjusted_gross FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY T1.inflation_adjusted_gross DESC LIMIT 1;",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1252,
            "cost": 0.00026475
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY CAST(REPLACE(SUBSTR(inflation_adjusted_gross, 2), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "sample_id": 4708,
        "pred_sql": "SELECT characters.movie_title FROM characters INNER JOIN director ON characters.movie_title = director.name WHERE director.director = 'Wolfgang Reitherman' AND characters.hero NOT IN (SELECT villian FROM round)",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1197,
            "cost": 0.00023579999999999999
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.villian IS NULL"
    },
    {
        "sample_id": 4659,
        "pred_sql": "SELECT voice_actors.voice_actor FROM voice_actors INNER JOIN characters ON voice_actors.movie = characters.movie_title INNER JOIN director ON characters.movie_title = director.name WHERE director.director = 'Ben Sharpsteen' AND characters.release_date = '1940-02-09';",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1185,
            "cost": 0.00025064999999999994
        },
        "db_id": "disney",
        "gold_sql": "SELECT T2.\"voice-actor\" FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 INNER JOIN movies_total_gross AS T3 ON T1.name = T2.movie AND T2.movie = T3.movie_title WHERE T1.director = 'Ben Sharpsteen' AND T3.release_date = 'Feb 9, 1940' AND T2.\"voice-actor\" != 'None' GROUP BY T2.\"voice-actor\""
    },
    {
        "sample_id": 2787,
        "pred_sql": "SELECT COUNT(*) AS away_wins FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.awayteam = 'Werder Bremen' AND matchs.ftr = 'A' AND divisions.name = 'Bundesliga';",
        "retrieved": [
            2785
        ],
        "token_usage": {
            "tokens": 762,
            "cost": 0.00019079999999999998
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.AwayTeam = 'Werder Bremen' AND T1.FTR = 'A'"
    },
    {
        "sample_id": 2777,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Scottish League One' AND matchs.date = (SELECT date FROM matchs WHERE hometeam = 'Pro Vercelli' AND awayteam = 'Pescara' AND fthg = 5 AND ftag = 2)",
        "retrieved": [
            2749
        ],
        "token_usage": {
            "tokens": 745,
            "cost": 0.0001869
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Date) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish League One' AND T1.Date = ( SELECT Date FROM matchs WHERE FTHG = 5 AND FTAG = 2 AND HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' )"
    },
    {
        "sample_id": 2778,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.country = 'Greece' AND matchs.fthg = '5' AND matchs.ftag = '0'",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 763,
            "cost": 0.00019409999999999995
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' AND T1.FTHG = 5 AND T1.FTAG = 0"
    },
    {
        "sample_id": 2759,
        "pred_sql": "SELECT divisions.name, divisions.country FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.hometeam = 'Hearts' AND matchs.awayteam = 'Hibernian'",
        "retrieved": [
            2761
        ],
        "token_usage": {
            "tokens": 714,
            "cost": 0.00017235
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'"
    },
    {
        "sample_id": 2776,
        "pred_sql": "SELECT divisions.name FROM divisions INNER JOIN matchs ON divisions.division = matchs.div WHERE matchs.fthg = 0 AND matchs.ftag = 0 GROUP BY divisions.name ORDER BY COUNT(*) DESC LIMIT 1;",
        "retrieved": [
            2774
        ],
        "token_usage": {
            "tokens": 770,
            "cost": 0.00019514999999999997
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTAG = 0 AND T1.FTHG = 0 GROUP BY T2.division ORDER BY COUNT(T1.FTAG) DESC LIMIT 1"
    },
    {
        "sample_id": 2775,
        "pred_sql": "SELECT divisions.name FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.date = '2020-02-22' AND (CAST(matchs.fthg AS INTEGER) + CAST(matchs.ftag AS INTEGER)) > 5 GROUP BY divisions.name ORDER BY COUNT(*) DESC LIMIT 1;",
        "retrieved": [
            2774
        ],
        "token_usage": {
            "tokens": 841,
            "cost": 0.00023189999999999997
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-02-22' AND T1.FTAG + T1.FTHG > 5 ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1"
    },
    {
        "sample_id": 2764,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Seria A' AND matchs.fthg = matchs.ftag;",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 729,
            "cost": 0.00017324999999999996
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Seria A' AND T1.FTR = 'D'"
    },
    {
        "sample_id": 2773,
        "pred_sql": "SELECT divisions.country FROM matchs INNER JOIN divisions ON matchs.div = divisions.division GROUP BY matchs.awayteam ORDER BY SUM(matchs.ftag) DESC LIMIT 1;",
        "retrieved": [
            2770
        ],
        "token_usage": {
            "tokens": 733,
            "cost": 0.00017744999999999998
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division GROUP BY T2.country ORDER BY SUM(T1.FTAG) DESC LIMIT 1"
    },
    {
        "sample_id": 2762,
        "pred_sql": "SELECT divisions.name FROM divisions JOIN matchs ON divisions.division = matchs.div WHERE matchs.ftr = 'D' AND matchs.season = '2019' GROUP BY divisions.name ORDER BY COUNT(matchs.ftr) ASC LIMIT 1;",
        "retrieved": [
            2743
        ],
        "token_usage": {
            "tokens": 778,
            "cost": 0.00020355
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T1.FTR = 'D' GROUP BY T2.division ORDER BY COUNT(FTR) LIMIT 1"
    },
    {
        "sample_id": 2748,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.season = '2019' AND divisions.name = 'Scottish Championship' AND matchs.fthg = matchs.ftag AND matchs.fthg = '2';",
        "retrieved": [
            2783
        ],
        "token_usage": {
            "tokens": 801,
            "cost": 0.00022499999999999997
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2"
    },
    {
        "sample_id": 2758,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Scottish Premiership' AND matchs.season BETWEEN '2006' AND '2008';",
        "retrieved": [
            2780
        ],
        "token_usage": {
            "tokens": 729,
            "cost": 0.00018404999999999997
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)"
    },
    {
        "sample_id": 2742,
        "pred_sql": "WITH away_matches AS (SELECT awayteam, ftr FROM matchs WHERE div IN (SELECT division FROM divisions WHERE name = 'Caen') AND season = '2010'), win_counts AS (SELECT awayteam, COUNT(*) AS total_matches, SUM(CASE WHEN ftr = 'A' THEN 1 ELSE 0 END) AS wins FROM away_matches GROUP BY awayteam) SELECT awayteam, (wins * 1.0 / total_matches) AS winning_percentage FROM win_counts ORDER BY winning_percentage DESC LIMIT 1;",
        "retrieved": [
            2760
        ],
        "token_usage": {
            "tokens": 749,
            "cost": 0.00019334999999999996
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT AwayTeam FROM matchs WHERE HomeTeam = 'Caen' AND season = 2010 AND FTR = 'A' GROUP BY AwayTeam ORDER BY COUNT(AwayTeam) DESC LIMIT 1"
    },
    {
        "sample_id": 10455,
        "pred_sql": "SELECT AVG(height) AS average_height FROM player WHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4766,
            "cost": 0.00077565
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'"
    },
    {
        "sample_id": 10530,
        "pred_sql": "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date LIKE '2011-02-22%'",
        "retrieved": [
            10532
        ],
        "token_usage": {
            "tokens": 4822,
            "cost": 0.0008132999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.\"date\", 1, 10) = '2011-02-22'"
    },
    {
        "sample_id": 10500,
        "pred_sql": "SELECT CASE WHEN a.birthday < b.birthday THEN 'Aaron Lennon is older' ELSE 'Abdelaziz Barrada is older' END AS older_player FROM player AS a, player AS b WHERE a.player_name = 'Aaron Lennon' AND b.player_name = 'Abdelaziz Barrada';",
        "retrieved": [
            10494
        ],
        "token_usage": {
            "tokens": 4740,
            "cost": 0.0007735499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10556,
        "pred_sql": "SELECT (SELECT jumping FROM player_attributes WHERE player_api_id = 6) - (SELECT jumping FROM player_attributes WHERE player_api_id = 23) AS jumping_difference;",
        "retrieved": [
            10490
        ],
        "token_usage": {
            "tokens": 4775,
            "cost": 0.0007733999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1"
    },
    {
        "sample_id": 10569,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1",
        "retrieved": [
            10505
        ],
        "token_usage": {
            "tokens": 4701,
            "cost": 0.0007596
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)"
    },
    {
        "sample_id": 10512,
        "pred_sql": "SELECT long_passing FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player ORDER BY birthday ASC LIMIT 1)",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4823,
            "cost": 0.0007895999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10501,
        "pred_sql": "SELECT player.player_name FROM player ORDER BY player.height DESC LIMIT 1",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4724,
            "cost": 0.0007553999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"
    },
    {
        "sample_id": 10498,
        "pred_sql": "SELECT ABS(AVG(CASE WHEN player.player_name = 'Abdou Diallo' THEN player_attributes.ball_control END) - AVG(CASE WHEN player.player_name = 'Aaron Appindangoye' THEN player_attributes.ball_control END)) AS ball_control_difference FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name IN ('Abdou Diallo', 'Aaron Appindangoye')",
        "retrieved": [
            10494
        ],
        "token_usage": {
            "tokens": 4788,
            "cost": 0.0007982999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id"
    },
    {
        "sample_id": 10495,
        "pred_sql": "SELECT COUNT(*) FROM match WHERE league_id = (SELECT id FROM league WHERE name = 'Germany 1. Bundesliga') AND date BETWEEN '2008-08-01' AND '2008-10-31';",
        "retrieved": [
            10504
        ],
        "token_usage": {
            "tokens": 4709,
            "cost": 0.0007644
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.\"date\", 1, 7) BETWEEN '2008-08' AND '2008-10'"
    },
    {
        "sample_id": 10538,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 ORDER BY CAST(SUM(player_attributes.heading_accuracy) AS FLOAT) / COUNT(player_attributes.player_fifa_api_id) DESC LIMIT 10",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4784,
            "cost": 0.0007904999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1"
    },
    {
        "sample_id": 10563,
        "pred_sql": "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
        "retrieved": [
            10532
        ],
        "token_usage": {
            "tokens": 4779,
            "cost": 0.0007897499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'"
    },
    {
        "sample_id": 10493,
        "pred_sql": "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4906,
            "cost": 0.0008249999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32"
    },
    {
        "sample_id": 10534,
        "pred_sql": "SELECT team_attributes.chancecreationcrossingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22'",
        "retrieved": [
            10532
        ],
        "token_usage": {
            "tokens": 4823,
            "cost": 0.00081525
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.\"date\", 1, 10) = '2010-02-22'"
    },
    {
        "sample_id": 10524,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = '77' AND player_attributes.date = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1;",
        "retrieved": [
            10536
        ],
        "token_usage": {
            "tokens": 4849,
            "cost": 0.0008074499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10468,
        "pred_sql": "SELECT team_attributes.buildupplaypositioningclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag'",
        "retrieved": [
            10478
        ],
        "token_usage": {
            "tokens": 4703,
            "cost": 0.0007576499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'"
    },
    {
        "sample_id": 10480,
        "pred_sql": "SELECT AVG(CAST(pa.finishing AS INTEGER)) AS average_finishing_rate\nFROM player_attributes pa\nJOIN player p ON pa.player_api_id = p.player_api_id\nWHERE p.height = (SELECT MAX(height) FROM player) OR p.height = (SELECT MIN(height) FROM player)",
        "retrieved": [
            10469
        ],
        "token_usage": {
            "tokens": 4755,
            "cost": 0.0007726499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1"
    },
    {
        "sample_id": 10540,
        "pred_sql": "SELECT player_name FROM player WHERE birthday <= date('now', '-35 years')",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4752,
            "cost": 0.0007681499999999998
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35"
    },
    {
        "sample_id": 10526,
        "pred_sql": "SELECT player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.date = '2010-08-30' AND player.player_name = 'Francesco Parravicini'",
        "retrieved": [
            10527
        ],
        "token_usage": {
            "tokens": 4746,
            "cost": 0.0007726499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'"
    },
    {
        "sample_id": 10543,
        "pred_sql": "SELECT SUM(match.home_team_goal) FROM match INNER JOIN player ON player.player_api_id IN (match.home_player_1, match.home_player_2, match.home_player_3, match.home_player_4, match.home_player_5, match.home_player_6, match.home_player_7, match.home_player_8, match.home_player_9, match.home_player_10, match.home_player_11) WHERE (strftime('%Y', 'now') - strftime('%Y', player.birthday)) <= 30",
        "retrieved": [
            10479
        ],
        "token_usage": {
            "tokens": 4922,
            "cost": 0.00087645
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31"
    },
    {
        "sample_id": 10515,
        "pred_sql": "SELECT AVG(CAST(player_attributes.overall_rating AS FLOAT)) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE STRFTIME('%Y', player.birthday) < '1986'",
        "retrieved": [
            10490
        ],
        "token_usage": {
            "tokens": 4800,
            "cost": 0.0007875
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'"
    },
    {
        "sample_id": 10558,
        "pred_sql": "SELECT COUNT(*) FROM player_attributes WHERE potential = (SELECT MAX(potential) FROM player_attributes) AND preferred_foot = 'left' AND crossing IS NOT NULL;",
        "retrieved": [
            10444
        ],
        "token_usage": {
            "tokens": 4686,
            "cost": 0.0007469999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)"
    },
    {
        "sample_id": 10447,
        "pred_sql": "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016' GROUP BY league.name ORDER BY SUM(home_team_goal + away_team_goal) DESC LIMIT 1;",
        "retrieved": [
            10452
        ],
        "token_usage": {
            "tokens": 4799,
            "cost": 0.0008017499999999998
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1"
    },
    {
        "sample_id": 10457,
        "pred_sql": "SELECT team.team_fifa_api_id FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE buildupplayspeed > 50 AND buildupplayspeed < 60",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4804,
            "cost": 0.00077235
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60"
    },
    {
        "sample_id": 10549,
        "pred_sql": "SELECT player.player_name, country.name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id INNER JOIN team ON player.player_api_id = team.team_api_id INNER JOIN league ON team.team_fifa_api_id = league.id INNER JOIN country ON league.country_id = country.id WHERE player_attributes.vision >= 90;",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4868,
            "cost": 0.0008363999999999998
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89"
    },
    {
        "sample_id": 10461,
        "pred_sql": "SELECT AVG(player_attributes.long_shots) AS average_long_shots FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4757,
            "cost": 0.0007711499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.\"date\") FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'"
    },
    {
        "sample_id": 10520,
        "pred_sql": "SELECT team.team_long_name, team_attributes.chancecreationpassing, team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1;",
        "retrieved": [
            10473
        ],
        "token_usage": {
            "tokens": 4774,
            "cost": 0.0007962
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1"
    },
    {
        "sample_id": 10521,
        "pred_sql": "SELECT player_attributes.preferred_foot FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo'",
        "retrieved": [
            10444
        ],
        "token_usage": {
            "tokens": 4714,
            "cost": 0.00076875
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'"
    },
    {
        "sample_id": 9600,
        "pred_sql": "SELECT card.type FROM disp INNER JOIN card ON disp.disp_id = card.disp_id WHERE disp.client_id = 9",
        "retrieved": [
            9525
        ],
        "token_usage": {
            "tokens": 1618,
            "cost": 0.00029219999999999995
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9"
    },
    {
        "sample_id": 9593,
        "pred_sql": "SELECT (SELECT SUM(a15) FROM district WHERE a3 = 'East Bohemia') - (SELECT SUM(a15) FROM district WHERE a3 = 'North Bohemia') AS crime_difference",
        "retrieved": [
            9556
        ],
        "token_usage": {
            "tokens": 1680,
            "cost": 0.00032805
        },
        "db_id": "financial",
        "gold_sql": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district"
    },
    {
        "sample_id": 9607,
        "pred_sql": "SELECT COUNT(client.client_id) * 1.0 / (SELECT COUNT(*) FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.district_id = (SELECT district_id FROM district WHERE a2 = 'Prague')) AS female_proportion FROM client INNER JOIN disp ON client.client_id = disp.client_id WHERE client.gender = 'F' AND disp.account_id IN (SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE a2 = 'Prague'));",
        "retrieved": [
            9522
        ],
        "token_usage": {
            "tokens": 1719,
            "cost": 0.00034559999999999994
        },
        "db_id": "financial",
        "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'"
    },
    {
        "sample_id": 9536,
        "pred_sql": "SELECT account.account_id FROM account INNER JOIN client ON account.account_id = disp.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Prague' ORDER BY account.date LIMIT 1;",
        "retrieved": [
            9530
        ],
        "token_usage": {
            "tokens": 1679,
            "cost": 0.0003252
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1"
    },
    {
        "sample_id": 9571,
        "pred_sql": "SELECT DISTINCT account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id NOT IN (SELECT account_id FROM loan) AND district.a11 > 8000 AND district.a11 <= 9000;",
        "retrieved": [
            9570
        ],
        "token_usage": {
            "tokens": 1753,
            "cost": 0.0003597
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000"
    },
    {
        "sample_id": 9580,
        "pred_sql": "SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;",
        "retrieved": [
            9615
        ],
        "token_usage": {
            "tokens": 1633,
            "cost": 0.000294
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.district_id FROM \"order\" AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333"
    },
    {
        "sample_id": 9598,
        "pred_sql": "SELECT SUM(loan.amount) AS total_debt, loan.status FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.client_id = 992 GROUP BY loan.status;",
        "retrieved": [
            9601
        ],
        "token_usage": {
            "tokens": 1721,
            "cost": 0.00033509999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992"
    },
    {
        "sample_id": 9585,
        "pred_sql": "SELECT district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.a3 ORDER BY COUNT(account.account_id) DESC LIMIT 1",
        "retrieved": [
            9553
        ],
        "token_usage": {
            "tokens": 1709,
            "cost": 0.00034139999999999995
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1"
    },
    {
        "sample_id": 9551,
        "pred_sql": "SELECT district.a2, SUM(trans.amount) AS total_withdrawals FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND trans.date BETWEEN '9601' AND '9601' GROUP BY district.a2 ORDER BY total_withdrawals DESC LIMIT 10;",
        "retrieved": [
            9550
        ],
        "token_usage": {
            "tokens": 1807,
            "cost": 0.0003939
        },
        "db_id": "financial",
        "gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10"
    },
    {
        "sample_id": 9616,
        "pred_sql": "SELECT client.client_id, (strftime('%Y', 'now') - (birth_date / 10000)) AS age FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
        "retrieved": [
            9615
        ],
        "token_usage": {
            "tokens": 1727,
            "cost": 0.00034994999999999997
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'"
    },
    {
        "sample_id": 9613,
        "pred_sql": "SELECT COUNT(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration = 24 AND account.frequency = 'weekly'",
        "retrieved": [
            9558
        ],
        "token_usage": {
            "tokens": 1669,
            "cost": 0.0003075
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'"
    },
    {
        "sample_id": 9518,
        "pred_sql": "SELECT COUNT(disp.account_id) FROM account INNER JOIN disp AS T2 ON T2.account_id = account.account_id WHERE account.frequency = 'weekly' AND disp.type = 'OWNER'",
        "retrieved": [
            9609
        ],
        "token_usage": {
            "tokens": 1614,
            "cost": 0.00029699999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'"
    },
    {
        "sample_id": 9581,
        "pred_sql": "SELECT trans.* FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ' AND trans.operation = 'VYBER' AND client.client_id = 3356;",
        "retrieved": [
            9601
        ],
        "token_usage": {
            "tokens": 1733,
            "cost": 0.00034409999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'"
    },
    {
        "sample_id": 9529,
        "pred_sql": "SELECT client.gender FROM client INNER JOIN account ON client.client_id = disp.client_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.birth_date = (SELECT MIN(birth_date) FROM client) AND district.a11 = (SELECT MAX(a11) FROM district) LIMIT 1;",
        "retrieved": [
            9611
        ],
        "token_usage": {
            "tokens": 1745,
            "cost": 0.00034815
        },
        "db_id": "financial",
        "gold_sql": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1"
    },
    {
        "sample_id": 9554,
        "pred_sql": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M';",
        "retrieved": [
            9558
        ],
        "token_usage": {
            "tokens": 1688,
            "cost": 0.00032339999999999995
        },
        "db_id": "financial",
        "gold_sql": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'"
    },
    {
        "sample_id": 9531,
        "pred_sql": "SELECT COUNT(client.client_id) FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'F' AND district.a2 = 'Jesenik'",
        "retrieved": [
            9522
        ],
        "token_usage": {
            "tokens": 1736,
            "cost": 0.0003558
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'"
    },
    {
        "sample_id": 9591,
        "pred_sql": "SELECT (SUM(CASE WHEN date BETWEEN '961231' AND '970101' THEN amount ELSE 0 END) - SUM(CASE WHEN date BETWEEN '951231' AND '960101' THEN amount ELSE 0 END)) / SUM(CASE WHEN date BETWEEN '951231' AND '960101' THEN amount ELSE 0 END) * 100 AS growth_rate FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M';",
        "retrieved": [
            9558
        ],
        "token_usage": {
            "tokens": 1788,
            "cost": 0.00037575
        },
        "db_id": "financial",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'"
    },
    {
        "sample_id": 9547,
        "pred_sql": "SELECT district.district_id, district.a12, district.a13, (district.a13 - district.a12) AS unemployment_rate_increment FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.status = 'D'",
        "retrieved": [
            9555
        ],
        "token_usage": {
            "tokens": 1724,
            "cost": 0.00035759999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'"
    },
    {
        "sample_id": 9587,
        "pred_sql": "SELECT trans.* FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = '5'",
        "retrieved": [
            9570
        ],
        "token_usage": {
            "tokens": 1630,
            "cost": 0.00029759999999999997
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5"
    },
    {
        "sample_id": 9549,
        "pred_sql": "SELECT account.account_id, account.frequency FROM account INNER JOIN district AS T2 ON account.district_id = T2.district_id WHERE T2.a3 = 'east Bohemia' AND STRFTIME('%Y', account.date) BETWEEN '1995' AND '2000'",
        "retrieved": [
            9542
        ],
        "token_usage": {
            "tokens": 1682,
            "cost": 0.0003225
        },
        "db_id": "financial",
        "gold_sql": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'"
    },
    {
        "sample_id": 9526,
        "pred_sql": "SELECT account.date FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount = 840 AND trans.date = '981014'",
        "retrieved": [
            9601
        ],
        "token_usage": {
            "tokens": 1732,
            "cost": 0.00034169999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'"
    },
    {
        "sample_id": 9576,
        "pred_sql": "SELECT COUNT(client.client_id) AS male_client_count FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha'",
        "retrieved": [
            9537
        ],
        "token_usage": {
            "tokens": 1691,
            "cost": 0.00032204999999999994
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'"
    },
    {
        "sample_id": 8773,
        "pred_sql": "SELECT COUNT(DISTINCT owner_name) FROM businesses WHERE owner_state = 'California'",
        "retrieved": [
            8808
        ],
        "token_usage": {
            "tokens": 920,
            "cost": 0.00018885
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(owner_state) FROM businesses WHERE owner_state = 'CA'"
    },
    {
        "sample_id": 8813,
        "pred_sql": "SELECT COUNT(*) FROM (SELECT b.business_id FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE b.tax_code = 'H24' AND i.type = 'complaint' GROUP BY b.business_id HAVING COUNT(i.business_id) >= 5) AS t1",
        "retrieved": [
            8808
        ],
        "token_usage": {
            "tokens": 971,
            "cost": 0.00021539999999999998
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'H24' AND T1.type = 'Complaint' GROUP BY T1.business_id HAVING COUNT(T1.business_id) > 5 ) T3"
    },
    {
        "sample_id": 8798,
        "pred_sql": "SELECT address FROM businesses WHERE business_id = (SELECT business_id FROM violations WHERE risk_category = 'Low' GROUP BY business_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "retrieved": [
            8790
        ],
        "token_usage": {
            "tokens": 957,
            "cost": 0.0002169
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.address FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk' GROUP BY T2.address ORDER BY COUNT(T1.business_id) DESC LIMIT 1"
    },
    {
        "sample_id": 8804,
        "pred_sql": "SELECT COUNT(*) FROM businesses WHERE city = 'Hayward'",
        "retrieved": [
            8822
        ],
        "token_usage": {
            "tokens": 902,
            "cost": 0.00017534999999999998
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD'"
    },
    {
        "sample_id": 8853,
        "pred_sql": "SELECT COUNT(violations.business_id) FROM violations JOIN inspections ON violations.business_id = inspections.business_id WHERE STRFTIME('%Y', violations.date) = '2016' AND inspections.type != 'routine'",
        "retrieved": [
            8775
        ],
        "token_usage": {
            "tokens": 982,
            "cost": 0.00022605
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.type = 'Routine - Unscheduled'"
    },
    {
        "sample_id": 8797,
        "pred_sql": "SELECT COUNT(inspections.\"date\") FROM inspections JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.name = 'Soma Restaurant And Bar' AND inspections.type = 'routine'",
        "retrieved": [
            8775
        ],
        "token_usage": {
            "tokens": 968,
            "cost": 0.0002181
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Soma Restaurant And Bar' AND T1.type = 'Routine - Unscheduled'"
    },
    {
        "sample_id": 8847,
        "pred_sql": "SELECT businesses.name FROM violations INNER JOIN inspections ON violations.business_id = inspections.business_id INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.violation_type_id = '103157' AND violations.date = '2016-05-27' AND inspections.type = 'unscheduled';",
        "retrieved": [
            8848
        ],
        "token_usage": {
            "tokens": 1019,
            "cost": 0.0002271
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT DISTINCT T3.name FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T1.\"date\" = '2016-05-27' AND T1.violation_type_id = 103157 AND T2.type = 'Routine - Unscheduled'"
    },
    {
        "sample_id": 8810,
        "pred_sql": "SELECT city, COUNT(*) AS establishment_count FROM businesses INNER JOIN violations ON businesses.business_id = violations.business_id WHERE violations.risk_category = 'High' AND strftime('%Y', violations.date) = '2016' GROUP BY city ORDER BY establishment_count DESC LIMIT 1;",
        "retrieved": [
            8787
        ],
        "token_usage": {
            "tokens": 1063,
            "cost": 0.00026835
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.city FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T1.risk_category = 'High Risk' GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1"
    },
    {
        "sample_id": 8833,
        "pred_sql": "SELECT businesses.name, businesses.city, businesses.tax_code FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.date = '2014-06-03' AND violations.risk_category = 'High' LIMIT 5;",
        "retrieved": [
            8825
        ],
        "token_usage": {
            "tokens": 983,
            "cost": 0.00022439999999999998
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT DISTINCT T2.name, T2.city, T2.tax_code FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.\"date\" = '2014-06-03' LIMIT 5"
    },
    {
        "sample_id": 8792,
        "pred_sql": "SELECT businesses.name FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.risk_category = 'High' GROUP BY businesses.name ORDER BY COUNT(violations.business_id) DESC LIMIT 1",
        "retrieved": [
            8787
        ],
        "token_usage": {
            "tokens": 992,
            "cost": 0.00022709999999999996
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1"
    },
    {
        "sample_id": 8817,
        "pred_sql": "SELECT AVG(inspections.score) FROM inspections INNER JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.owner_name = 'Yiu Tim Chan' AND businesses.address = '808 Pacific Ave' AND inspections.date BETWEEN '2014-01-01' AND '2016-12-31';",
        "retrieved": [
            8818
        ],
        "token_usage": {
            "tokens": 1015,
            "cost": 0.00023324999999999995
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") BETWEEN '2014' AND '2016' AND T2.owner_name = 'Yiu Tim Chan' AND T2.address = '808 Pacific Ave' AND T2.city = 'San Francisco'"
    },
    {
        "sample_id": 8824,
        "pred_sql": "SELECT COUNT(DISTINCT businesses.business_id) AS low_risk_eateries_count FROM businesses JOIN violations ON businesses.business_id = violations.business_id WHERE violations.risk_category = 'Low' AND violations.description LIKE '%unpermitted food facility%';",
        "retrieved": [
            8825
        ],
        "token_usage": {
            "tokens": 963,
            "cost": 0.00021915
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(DISTINCT business_id) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility'"
    },
    {
        "sample_id": 8777,
        "pred_sql": "SELECT COUNT(businesses.business_id) FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE STRFTIME('%Y', inspections.date) = '2016' AND businesses.city = 'San Francisco'",
        "retrieved": [
            8775
        ],
        "token_usage": {
            "tokens": 977,
            "cost": 0.00022215
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')"
    },
    {
        "sample_id": 8830,
        "pred_sql": "SELECT businesses.business_id, businesses.name, businesses.address FROM businesses JOIN inspections ON businesses.business_id = inspections.business_id WHERE inspections.date = '2016-07-30'",
        "retrieved": [
            8825
        ],
        "token_usage": {
            "tokens": 941,
            "cost": 0.0002037
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT DISTINCT T2.business_id, T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.date = '2016-07-30'"
    },
    {
        "sample_id": 8793,
        "pred_sql": "SELECT COUNT(DISTINCT violation_type_id) AS violation_count FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Stacks Restaurant' AND violations.date = '2016-10-04';",
        "retrieved": [
            8787
        ],
        "token_usage": {
            "tokens": 986,
            "cost": 0.0002226
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(DISTINCT T1.violation_type_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Stacks Restaurant' AND T1.\"date\" = '2016-10-04'"
    },
    {
        "sample_id": 8855,
        "pred_sql": "SELECT (COUNT(DISTINCT T1.business_id) * 100.0 / COUNT(DISTINCT T2.business_id)) AS low_risk_percentage FROM businesses AS T2 LEFT JOIN violations AS T1 ON T2.business_id = T1.business_id WHERE T2.postal_code = '94110' AND T2.business_id IN (SELECT business_id FROM inspections WHERE score < 95) AND T1.risk_category = 'Low'",
        "retrieved": [
            8844
        ],
        "token_usage": {
            "tokens": 1054,
            "cost": 0.0002517
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.risk_category = 'Low Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.risk_category) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T2.score < 95 AND T3.postal_code = 94110"
    },
    {
        "sample_id": 8799,
        "pred_sql": "SELECT businesses.name FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.risk_category = 'Low' AND violations.description = 'Permit license or inspection report not posted' ORDER BY violations.date ASC LIMIT 1;",
        "retrieved": [
            8819
        ],
        "token_usage": {
            "tokens": 1050,
            "cost": 0.0002448
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = ( SELECT MIN(\"date\") FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'"
    },
    {
        "sample_id": 8774,
        "pred_sql": "SELECT COUNT(DISTINCT businesses.business_id) AS total_restaurants FROM inspections INNER JOIN businesses ON inspections.business_id = businesses.business_id WHERE inspections.score = 100;",
        "retrieved": [
            8816
        ],
        "token_usage": {
            "tokens": 1616,
            "cost": 0.00030405
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(score) FROM inspections WHERE score = 100"
    },
    {
        "sample_id": 6164,
        "pred_sql": "SELECT COUNT(*) FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE establishment.facility_type = 'Restaurant' AND establishment.risk_level = (SELECT MAX(risk_level) FROM establishment WHERE facility_type = 'Restaurant') AND inspection.results IN ('Pass', 'Pass w/ Conditions')",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1608,
            "cost": 0.00033389999999999993
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Pass' AND T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6194,
        "pred_sql": "SELECT inspection.results FROM inspection INNER JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Thomas' AND employee.last_name = 'Langley'",
        "retrieved": [
            6170
        ],
        "token_usage": {
            "tokens": 1540,
            "cost": 0.00029804999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'"
    },
    {
        "sample_id": 6166,
        "pred_sql": "SELECT employee.title FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = '60332'",
        "retrieved": [
            6234
        ],
        "token_usage": {
            "tokens": 1510,
            "cost": 0.00027735
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332"
    },
    {
        "sample_id": 6134,
        "pred_sql": "SELECT COUNT(DISTINCT inspection.license_no) AS establishment_count \nFROM employee \nINNER JOIN inspection ON employee.employee_id = inspection.employee_id \nWHERE employee.address = '5000 N Wolcott Ave' \nAND strftime('%Y-%m', inspection.inspection_date) = '2011-05';",
        "retrieved": [
            6119
        ],
        "token_usage": {
            "tokens": 1613,
            "cost": 0.00031439999999999994
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND strftime('%Y-%m', T1.inspection_date) = '2011-05'"
    },
    {
        "sample_id": 6151,
        "pred_sql": "SELECT establishment.aka_name FROM establishment JOIN inspection ON establishment.license_no = inspection.license_no JOIN violation ON inspection.inspection_id = violation.inspection_id WHERE strftime('%Y', inspection.inspection_date) = '2014' GROUP BY establishment.aka_name ORDER BY SUM(violation.fine) DESC LIMIT 1;",
        "retrieved": [
            6140
        ],
        "token_usage": {
            "tokens": 1633,
            "cost": 0.0003606
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T.dba_name FROM ( SELECT T1.dba_name, SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y', T2.inspection_date) = '2014' GROUP BY T1.dba_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) AS T"
    },
    {
        "sample_id": 6115,
        "pred_sql": "SELECT establishment.latitude, establishment.longitude FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE inspection.inspection_date = '2010-05-11'",
        "retrieved": [
            6161
        ],
        "token_usage": {
            "tokens": 1607,
            "cost": 0.00032339999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'"
    },
    {
        "sample_id": 6153,
        "pred_sql": "SELECT violation.inspector_comment FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no INNER JOIN violation ON inspection.inspection_id = violation.inspection_id WHERE establishment.dba_name = 'Taqueria La Fiesta' AND inspection.inspection_date = '2010-01-25'",
        "retrieved": [
            6155
        ],
        "token_usage": {
            "tokens": 1585,
            "cost": 0.00031154999999999996
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T3.inspector_comment FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2010-01-25' AND T1.dba_name = 'TAQUERIA LA FIESTA'"
    },
    {
        "sample_id": 6175,
        "pred_sql": "SELECT COUNT(*) FROM inspection WHERE results = 'Fail' AND strftime('%Y', inspection_date) = '2014'",
        "retrieved": [
            6209
        ],
        "token_usage": {
            "tokens": 1524,
            "cost": 0.00028799999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y', inspection_date) = '2014' AND results = 'Fail'"
    },
    {
        "sample_id": 6131,
        "pred_sql": "SELECT COUNT(*) AS inspection_count FROM inspection INNER JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.address = '3635 W DIVERSEY AVE'",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1557,
            "cost": 0.00029834999999999996
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.address = '3635 W DIVERSEY AVE ' AND T1.facility_type = 'Grocery Store'"
    },
    {
        "sample_id": 6197,
        "pred_sql": "SELECT employee.title FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = '52269'",
        "retrieved": [
            6234
        ],
        "token_usage": {
            "tokens": 1516,
            "cost": 0.00028094999999999997
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52269"
    },
    {
        "sample_id": 6202,
        "pred_sql": "SELECT establishment.dba_name FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE inspection.results IN ('Pass', 'Pass w/ Conditions')",
        "retrieved": [
            6200
        ],
        "token_usage": {
            "tokens": 1526,
            "cost": 0.00029324999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results LIKE '%Pass%'"
    },
    {
        "sample_id": 6207,
        "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS full_name FROM employee e INNER JOIN inspection i ON e.employee_id = i.employee_id WHERE i.license_no = 1334073;",
        "retrieved": [
            6132
        ],
        "token_usage": {
            "tokens": 1726,
            "cost": 0.00032234999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1334073"
    },
    {
        "sample_id": 6222,
        "pred_sql": "SELECT establishment.dba_name FROM establishment WHERE establishment.latitude = 41.9532864854 AND establishment.longitude = -87.7673790701422;",
        "retrieved": [
            6140
        ],
        "token_usage": {
            "tokens": 1523,
            "cost": 0.00029055
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6236,
        "pred_sql": "SELECT inspection.inspection_id FROM violation INNER JOIN inspection_point ON violation.point_id = inspection_point.point_id INNER JOIN inspection ON violation.inspection_id = inspection.inspection_id WHERE violation.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND inspection_point.code IN ('7-38-030', '015', '010 (A)', '005 (A)')",
        "retrieved": [
            6171
        ],
        "token_usage": {
            "tokens": 1660,
            "cost": 0.00034575
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND T1.code = '7-38-030, 015, 010 (A), 005 (A)'"
    },
    {
        "sample_id": 6191,
        "pred_sql": "SELECT employee.first_name FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = '48225'",
        "retrieved": [
            6234
        ],
        "token_usage": {
            "tokens": 1517,
            "cost": 0.00028199999999999997
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225"
    },
    {
        "sample_id": 6232,
        "pred_sql": "SELECT inspection.results FROM inspection INNER JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Arnold' AND employee.last_name = 'Holder' AND inspection.inspection_date = '2010-02-24';",
        "retrieved": [
            6161
        ],
        "token_usage": {
            "tokens": 1596,
            "cost": 0.0003159
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-02-24' AND T1.first_name = 'Arnold' AND T1.last_name = 'Holder'"
    },
    {
        "sample_id": 6177,
        "pred_sql": "SELECT violation.point_id, violation.fine FROM violation INNER JOIN inspection ON violation.inspection_id = inspection.inspection_id WHERE inspection.inspection_date = '2010-08-07'",
        "retrieved": [
            6230
        ],
        "token_usage": {
            "tokens": 1532,
            "cost": 0.00029594999999999996
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T2.point_id, T2.fine FROM inspection AS T1 INNER JOIN violation AS T2 ON T1.inspection_id = T2.inspection_id WHERE T1.inspection_date = '2010-08-07'"
    },
    {
        "sample_id": 6120,
        "pred_sql": "SELECT COUNT(*) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.first_name = 'Joshua' AND T2.last_name = 'Rosa' AND T1.results = 'Pass'",
        "retrieved": [
            6208
        ],
        "token_usage": {
            "tokens": 1543,
            "cost": 0.00028995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "sample_id": 6231,
        "pred_sql": "SELECT establishment.facility_type, establishment.license_no FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE establishment.risk_level = (SELECT MIN(risk_level) FROM establishment) AND inspection.results = 'Fail'",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1579,
            "cost": 0.00031379999999999993
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.facility_type, T1.license_no FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 1 AND T2.results = 'Fail'"
    },
    {
        "sample_id": 6204,
        "pred_sql": "SELECT AVG(e.salary) AS average_salary FROM employee e INNER JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_type = 'License Re-Inspection';",
        "retrieved": [
            6209
        ],
        "token_usage": {
            "tokens": 1540,
            "cost": 0.00029489999999999996
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT AVG(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_type = 'License Re-Inspection'"
    },
    {
        "sample_id": 6217,
        "pred_sql": "SELECT (COUNT(CASE WHEN v.fine = 250 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_restaurants_with_fine_250\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN violation v ON i.inspection_id = v.inspection_id\nWHERE e.facility_type = 'Restaurant';",
        "retrieved": [
            6244
        ],
        "token_usage": {
            "tokens": 1664,
            "cost": 0.00036704999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.fine = 250 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6112,
        "pred_sql": "SELECT COUNT(*) AS inspection_count FROM inspection WHERE employee_id = (SELECT employee_id FROM employee WHERE first_name = 'Joshua' AND last_name = 'Rosa') AND strftime('%Y', inspection_date) = '2010';",
        "retrieved": [
            6119
        ],
        "token_usage": {
            "tokens": 1557,
            "cost": 0.00028754999999999997
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "sample_id": 6127,
        "pred_sql": "SELECT MIN(inspection.inspection_date) AS first_inspection_date FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE establishment.dba_name = 'Wing Hung Chop Suey Restaurant'",
        "retrieved": [
            6210
        ],
        "token_usage": {
            "tokens": 1545,
            "cost": 0.0002916
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.aka_name = 'WING HUNG CHOP SUEY RESTAURANT'"
    },
    {
        "sample_id": 6246,
        "pred_sql": "SELECT COUNT(CASE WHEN results = 'Pass' THEN 1 END) - COUNT(CASE WHEN results = 'Fail' THEN 1 END) AS difference FROM inspection WHERE inspection_type = 'canvass' AND license_no IN (SELECT license_no FROM establishment WHERE facility_type = 'Restaurant')",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1544,
            "cost": 0.00029279999999999996
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(CASE WHEN T2.results = 'Pass' THEN T1.license_no END) - COUNT(CASE WHEN T2.results = 'Fail' THEN T1.license_no END) AS diff FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'Canvass' AND T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6111,
        "pred_sql": "SELECT employee.first_name, employee.last_name FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE employee.title = 'Sanitarian' AND inspection.inspection_date BETWEEN '2010-05-01' AND '2010-05-31'",
        "retrieved": [
            6119
        ],
        "token_usage": {
            "tokens": 1665,
            "cost": 0.0003492
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-05' AND T1.title = 'Sanitarian'"
    },
    {
        "sample_id": 6124,
        "pred_sql": "SELECT DISTINCT inspection_point.point_level FROM inspection_point INNER JOIN violation AS T2 ON inspection_point.point_id = T2.point_id WHERE T2.fine = 0",
        "retrieved": [
            6230
        ],
        "token_usage": {
            "tokens": 1544,
            "cost": 0.00030225
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous '"
    },
    {
        "sample_id": 6226,
        "pred_sql": "SELECT COUNT(*) FROM establishment WHERE risk_level = (SELECT MAX(risk_level) FROM establishment)",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1534,
            "cost": 0.00028949999999999994
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 3"
    },
    {
        "sample_id": 6138,
        "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM inspection WHERE license_no = (SELECT license_no FROM establishment WHERE dba_name = 'Pockets Restaurant')) AS pass_rate FROM inspection WHERE license_no = (SELECT license_no FROM establishment WHERE dba_name = 'Pockets Restaurant') AND results IN ('Pass', 'Pass w/ Conditions')",
        "retrieved": [
            6210
        ],
        "token_usage": {
            "tokens": 1586,
            "cost": 0.00031755
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.results = 'Pass' THEN T2.inspection_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'POCKETS' AND T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6185,
        "pred_sql": "SELECT inspection.results FROM inspection INNER JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Jean' AND employee.last_name = 'Samocki'",
        "retrieved": [
            6133
        ],
        "token_usage": {
            "tokens": 1515,
            "cost": 0.00027495
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T3.first_name, T3.last_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'JEAN SAMOCKI'"
    },
    {
        "sample_id": 10357,
        "pred_sql": "SELECT COUNT(DISTINCT results.driverid) AS finished_drivers FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.year = '2008' AND races.name = 'Australian Grand Prix' AND results.statusid = 'finished'",
        "retrieved": [
            10283
        ],
        "token_usage": {
            "tokens": 1514,
            "cost": 0.0002802
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL"
    },
    {
        "sample_id": 10421,
        "pred_sql": "SELECT races.name FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.milliseconds = (SELECT MIN(milliseconds) FROM laptimes)",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1584,
            "cost": 0.00031094999999999994
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1"
    },
    {
        "sample_id": 10422,
        "pred_sql": "SELECT circuits.name, circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid ORDER BY races.date DESC LIMIT 1;",
        "retrieved": [
            10272
        ],
        "token_usage": {
            "tokens": 1516,
            "cost": 0.00029219999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1"
    },
    {
        "sample_id": 10397,
        "pred_sql": "SELECT races.year, AVG(laptimes.milliseconds) AS avg_lap_time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid GROUP BY races.year ORDER BY avg_lap_time ASC LIMIT 1;",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1558,
            "cost": 0.00031019999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1"
    },
    {
        "sample_id": 10300,
        "pred_sql": "SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM results INNER JOIN laptimes ON results.raceid = laptimes.raceid AND results.driverid = laptimes.driverid WHERE results.raceid = '348' ORDER BY laptimes.milliseconds LIMIT 1",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1664,
            "cost": 0.00036794999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1"
    },
    {
        "sample_id": 10437,
        "pred_sql": "SELECT races.name, races.date FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'Austrian Grand Prix' AND laptimes.time = '1:29.488'",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1601,
            "cost": 0.00032879999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'"
    },
    {
        "sample_id": 10385,
        "pred_sql": "SELECT COUNT(DISTINCT drivers.driverid) AS french_driver_count FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.nationality = 'French' AND laptimes.time < 120000",
        "retrieved": [
            10293
        ],
        "token_usage": {
            "tokens": 1572,
            "cost": 0.00031185
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120"
    },
    {
        "sample_id": 10276,
        "pred_sql": "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Australian Grand Prix'",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1563,
            "cost": 0.00030825
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'"
    },
    {
        "sample_id": 10290,
        "pred_sql": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix'",
        "retrieved": [
            10304
        ],
        "token_usage": {
            "tokens": 1505,
            "cost": 0.00029325
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'"
    },
    {
        "sample_id": 10414,
        "pred_sql": "SELECT drivers.forename || ' ' || drivers.surname AS full_name, drivers.url AS wiki_page, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;",
        "retrieved": [
            10314
        ],
        "token_usage": {
            "tokens": 1638,
            "cost": 0.0003401999999999999
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC"
    },
    {
        "sample_id": 10372,
        "pred_sql": "SELECT constructors.name FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructorresults.raceid = '291' AND constructorresults.points = '0'",
        "retrieved": [
            10291
        ],
        "token_usage": {
            "tokens": 1529,
            "cost": 0.00029099999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291"
    },
    {
        "sample_id": 10400,
        "pred_sql": "SELECT circuits.location, circuits.lat, circuits.lng, COUNT(races.raceid) AS race_count FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Austria' GROUP BY circuits.circuitid, circuits.location, circuits.lat, circuits.lng;",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1617,
            "cost": 0.00033884999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'"
    },
    {
        "sample_id": 10336,
        "pred_sql": "SELECT COUNT(driverid) FROM drivers WHERE code IS NULL",
        "retrieved": [
            10379
        ],
        "token_usage": {
            "tokens": 1457,
            "cost": 0.00025905
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers"
    },
    {
        "sample_id": 10339,
        "pred_sql": "SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson'",
        "retrieved": [
            10291
        ],
        "token_usage": {
            "tokens": 1487,
            "cost": 0.00026489999999999993
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'"
    },
    {
        "sample_id": 10431,
        "pred_sql": "SELECT pitstops.driverid, pitstops.duration FROM pitstops INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year = '2011' AND races.name = 'Australian Grand Prix'",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1584,
            "cost": 0.00031319999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'"
    },
    {
        "sample_id": 10268,
        "pred_sql": "SELECT drivers.driverref FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = '20' AND qualifying.q1 IS NULL",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1603,
            "cost": 0.00033224999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5"
    },
    {
        "sample_id": 10281,
        "pred_sql": "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = '354' AND drivers.forename = 'Bruno' AND drivers.surname = 'Senna'",
        "retrieved": [
            10283
        ],
        "token_usage": {
            "tokens": 1580,
            "cost": 0.00031979999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'"
    },
    {
        "sample_id": 10363,
        "pred_sql": "SELECT SUM(results.points) AS total_points FROM results WHERE results.driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "retrieved": [
            10352
        ],
        "token_usage": {
            "tokens": 1488,
            "cost": 0.00026775
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'"
    },
    {
        "sample_id": 10383,
        "pred_sql": "SELECT races.name, races.year FROM results INNER JOIN races ON results.raceid = races.raceid ORDER BY results.time ASC LIMIT 1;",
        "retrieved": [
            10295
        ],
        "token_usage": {
            "tokens": 1566,
            "cost": 0.0003114
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1"
    },
    {
        "sample_id": 10366,
        "pred_sql": "SELECT (CAST((winner.fastestlap - last_driver.fastestlap) AS FLOAT) / last_driver.fastestlap) * 100 AS percentage_difference\nFROM (\n    SELECT results.driverid, MIN(results.fastestlap) AS fastestlap\n    FROM results\n    INNER JOIN races ON results.raceid = races.raceid\n    WHERE races.year = '2008' AND races.name = 'Australian Grand Prix'\n    GROUP BY results.driverid\n) AS winner,\n(\n    SELECT results.driverid, MIN(results.fastestlap) AS fastestlap\n    FROM results\n    INNER JOIN races ON results.raceid = races.raceid\n    WHERE races.year = '2008' AND races.name = 'Australian Grand Prix'\n    ORDER BY results.position DESC\n    LIMIT 1\n) AS last_driver;",
        "retrieved": [
            10303
        ],
        "token_usage": {
            "tokens": 1705,
            "cost": 0.00038309999999999993
        },
        "db_id": "formula_1",
        "gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)"
    },
    {
        "sample_id": 10356,
        "pred_sql": "SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.year = '1989' AND races.name = 'Australian Grand Prix' AND qualifying.position = 4;",
        "retrieved": [
            10283
        ],
        "token_usage": {
            "tokens": 1557,
            "cost": 0.00029925
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989"
    },
    {
        "sample_id": 10317,
        "pred_sql": "SELECT AVG(laptimes.time) AS average_lap_time FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = '2009'",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1638,
            "cost": 0.00035459999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'"
    },
    {
        "sample_id": 10393,
        "pred_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;",
        "retrieved": [
            10314
        ],
        "token_usage": {
            "tokens": 1525,
            "cost": 0.00028454999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1"
    },
    {
        "sample_id": 10331,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM races WHERE name LIKE '%European Grand Prix%')) AS percentage FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Germany' AND races.name LIKE '%European Grand Prix%';",
        "retrieved": [
            10272
        ],
        "token_usage": {
            "tokens": 1544,
            "cost": 0.0003072
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'"
    },
    {
        "sample_id": 10278,
        "pred_sql": "SELECT races.time FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Sepang International Circuit'",
        "retrieved": [
            10270
        ],
        "token_usage": {
            "tokens": 1494,
            "cost": 0.00027945
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'"
    },
    {
        "sample_id": 10434,
        "pred_sql": "SELECT circuits.name, results.position FROM circuits JOIN races ON circuits.circuitid = races.circuitid JOIN results ON races.raceid = results.raceid WHERE results.driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND results.fastestlap = '1'",
        "retrieved": [
            10352
        ],
        "token_usage": {
            "tokens": 1555,
            "cost": 0.00030749999999999994
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1"
    },
    {
        "sample_id": 10416,
        "pred_sql": "SELECT constructors.name, constructors.nationality, SUM(constructorresults.points) AS total_points FROM constructorresults INNER JOIN races ON constructorresults.raceid = races.raceid INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN '1980' AND '2010' GROUP BY constructors.constructorid ORDER BY total_points DESC LIMIT 1;",
        "retrieved": [
            10319
        ],
        "token_usage": {
            "tokens": 1666,
            "cost": 0.0003516
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1"
    },
    {
        "sample_id": 10279,
        "pred_sql": "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Abu Dhabi Grand Prix'",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1533,
            "cost": 0.0002916
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'"
    },
    {
        "sample_id": 10292,
        "pred_sql": "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceid = '345'",
        "retrieved": [
            10283
        ],
        "token_usage": {
            "tokens": 1581,
            "cost": 0.0003204
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'"
    },
    {
        "sample_id": 10351,
        "pred_sql": "SELECT races.name FROM races WHERE races.raceid IN (SELECT results.raceid FROM results WHERE results.driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))",
        "retrieved": [
            10352
        ],
        "token_usage": {
            "tokens": 1497,
            "cost": 0.00027629999999999994
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'"
    },
    {
        "sample_id": 10330,
        "pred_sql": "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.laps = (SELECT MAX(laps) FROM races)",
        "retrieved": [
            10321
        ],
        "token_usage": {
            "tokens": 1553,
            "cost": 0.00029235
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1"
    },
    {
        "sample_id": 10361,
        "pred_sql": "SELECT COUNT(DISTINCT drivers.driverid) FROM races INNER JOIN results ON results.raceid = races.raceid INNER JOIN drivers ON drivers.driverid = results.driverid WHERE races.year = '2008' AND races.name = 'Australian Grand Prix' AND drivers.nationality = 'UN'",
        "retrieved": [
            10286
        ],
        "token_usage": {
            "tokens": 1524,
            "cost": 0.00029025
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008"
    },
    {
        "sample_id": 10413,
        "pred_sql": "SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1561,
            "cost": 0.00030659999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'"
    },
    {
        "sample_id": 10407,
        "pred_sql": "SELECT drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND laptimes.lap = 3 ORDER BY laptimes.time ASC LIMIT 1;",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1569,
            "cost": 0.00031049999999999996
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1"
    },
    {
        "sample_id": 10375,
        "pred_sql": "SELECT COUNT(DISTINCT constructors.constructorid) AS french_constructor_count FROM constructors JOIN results ON constructors.constructorid = results.constructorid JOIN laptimes ON results.raceid = laptimes.raceid WHERE constructors.nationality = 'French' AND laptimes.lap > 50;",
        "retrieved": [
            10399
        ],
        "token_usage": {
            "tokens": 1578,
            "cost": 0.00031499999999999996
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'"
    },
    {
        "sample_id": 10376,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN NOT results.time IS NULL THEN results.driverid END) AS FLOAT) * 100 / COUNT(results.driverid) AS completion_percentage FROM races INNER JOIN results ON results.raceid = races.raceid INNER JOIN drivers ON drivers.driverid = results.driverid WHERE drivers.nationality = 'Japanese' AND races.year BETWEEN '2007' AND '2009'",
        "retrieved": [
            10303
        ],
        "token_usage": {
            "tokens": 1641,
            "cost": 0.00034784999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009"
    },
    {
        "sample_id": 2507,
        "pred_sql": "SELECT interactions.geneid1 FROM genes INNER JOIN interactions ON genes.geneid = interactions.geneid1 INNER JOIN classification ON genes.geneid = classification.geneid WHERE classification.localization = 'nucleus' AND interactions.expression_corr > 0",
        "retrieved": [
            2508
        ],
        "token_usage": {
            "tokens": 881,
            "cost": 0.00022844999999999997
        },
        "db_id": "genes",
        "gold_sql": "SELECT T1.GeneID FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Localization = 'nucleus'"
    },
    {
        "sample_id": 2493,
        "pred_sql": "SELECT MAX(interactions.expression_corr) AS highest_expression_corr FROM interactions INNER JOIN genes AS g1 ON interactions.geneid1 = g1.geneid INNER JOIN genes AS g2 ON interactions.geneid2 = g2.geneid WHERE g1.localization = 'nucleus' AND g2.localization = 'nucleus'",
        "retrieved": [
            2496
        ],
        "token_usage": {
            "tokens": 809,
            "cost": 0.00019109999999999998
        },
        "db_id": "genes",
        "gold_sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T1.Localization = 'nucleus' AND T3.Localization = 'nucleus' ORDER BY T2.Expression_Corr DESC LIMIT 1"
    },
    {
        "sample_id": 2510,
        "pred_sql": "SELECT (COUNT(CASE WHEN i.type = 'positive' THEN 1 END) * 100.0 / COUNT(*)) AS positive_interaction_percentage\nFROM genes g\nJOIN interactions i ON g.geneid = i.geneid1\nWHERE g.phenotype = 'nucleic acid metabolism defects' AND g.motif = 'PS00107';",
        "retrieved": [
            2508
        ],
        "token_usage": {
            "tokens": 866,
            "cost": 0.00021585
        },
        "db_id": "genes",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.Expression_Corr > 0, 1, 0)) AS REAL) * 100 / COUNT(T2.GeneID1) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Phenotype = 'Nucleic acid metabolism defects' AND T1.Motif = 'PS00107'"
    },
    {
        "sample_id": 2502,
        "pred_sql": "SELECT genes.geneid FROM genes WHERE genes.localization = 'cytoplasm' AND genes.function = 'metabolism';",
        "retrieved": [
            2497
        ],
        "token_usage": {
            "tokens": 754,
            "cost": 0.00016575
        },
        "db_id": "genes",
        "gold_sql": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'"
    },
    {
        "sample_id": 2495,
        "pred_sql": "SELECT COUNT(*) FROM interactions AS i INNER JOIN genes AS g1 ON i.geneid1 = g1.geneid INNER JOIN genes AS g2 ON i.geneid2 = g2.geneid WHERE g1.class != 'motorproteins' AND g2.class != 'motorproteins' AND i.expression_corr < 0",
        "retrieved": [
            2500
        ],
        "token_usage": {
            "tokens": 904,
            "cost": 0.00022244999999999999
        },
        "db_id": "genes",
        "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'"
    },
    {
        "sample_id": 2491,
        "pred_sql": "SELECT COUNT(*) FROM genes INNER JOIN classification ON genes.geneid = classification.geneid WHERE genes.phenotype = 'nucleic acid metabolism defect' AND classification.localization = 'vacuole'",
        "retrieved": [
            2508
        ],
        "token_usage": {
            "tokens": 785,
            "cost": 0.00016905
        },
        "db_id": "genes",
        "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'"
    },
    {
        "sample_id": 7669,
        "pred_sql": "SELECT COUNT(DISTINCT master.playerid) AS player_count FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE master.birthcity = 'Toronto' AND awardsplayers.award = 'All-Rookie'",
        "retrieved": [
            7675
        ],
        "token_usage": {
            "tokens": 5560,
            "cost": 0.0009100499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthCity = 'Toronto'"
    },
    {
        "sample_id": 7723,
        "pred_sql": "SELECT awardscoaches.award, COUNT(*) as award_count\nFROM awardscoaches\nINNER JOIN coaches ON awardscoaches.coachid = coaches.coachid\nWHERE coaches.w = (SELECT MAX(w) FROM coaches)\nGROUP BY awardscoaches.award\nORDER BY award_count DESC\nLIMIT 1;",
        "retrieved": [
            7737
        ],
        "token_usage": {
            "tokens": 5591,
            "cost": 0.00091515
        },
        "db_id": "hockey",
        "gold_sql": "SELECT award FROM Teams AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.lgID = T2.lgID WHERE T1.lgID = 'NHL' GROUP BY T2.coachID, T2.award ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "sample_id": 7720,
        "pred_sql": "SELECT master.legendsid FROM master INNER JOIN goalies ON master.playerid = goalies.playerid INNER JOIN teamspost ON goalies.year = teamspost.year AND goalies.tmid = teamspost.tmid WHERE teamspost.year = '2011' ORDER BY (goalies.w / (goalies.w + goalies.l)) DESC LIMIT 1;",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5672,
            "cost": 0.000948
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.legendsID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2011 ORDER BY 1 - CAST(T1.PostGA AS REAL) / T1.PostSA DESC LIMIT 1"
    },
    {
        "sample_id": 7796,
        "pred_sql": "SELECT COUNT(DISTINCT g.playerid) AS goalie_count FROM goalies g INNER JOIN teams t ON g.tmid = t.tmid WHERE t.name = 'Calgary Flames'",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5589,
            "cost": 0.0009044999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(DISTINCT playerID) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Calgary Flames'"
    },
    {
        "sample_id": 7714,
        "pred_sql": "SELECT master.shootcatch FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE awardsplayers.year = '1989' AND awardsplayers.shg = 7",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5633,
            "cost": 0.0009254999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1989 GROUP BY T2.playerID HAVING SUM(T2.SHG) = 7"
    },
    {
        "sample_id": 7688,
        "pred_sql": "SELECT coaches.w FROM coaches INNER JOIN awardscoaches ON coaches.coachid = awardscoaches.coachid WHERE awardscoaches.award = 'Second Team All-Star' AND awardscoaches.year = '1933'",
        "retrieved": [
            7737
        ],
        "token_usage": {
            "tokens": 5585,
            "cost": 0.0009079499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T1.W) FROM Coaches AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1933 AND T2.award = 'Second Team All-Star'"
    },
    {
        "sample_id": 7721,
        "pred_sql": "SELECT COUNT(DISTINCT master.playerid) AS former_athletes_coaches FROM master WHERE master.coachid IS NOT NULL;",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5568,
            "cost": 0.0008928
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(playerID) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL"
    },
    {
        "sample_id": 7710,
        "pred_sql": "SELECT master.shootcatch FROM master INNER JOIN goalies ON master.playerid = goalies.playerid WHERE goalies.year = '1996' ORDER BY goalies.sho DESC LIMIT 1;",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5637,
            "cost": 0.0009278999999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 ORDER BY T2.SHO DESC LIMIT 1"
    },
    {
        "sample_id": 7667,
        "pred_sql": "SELECT COUNT(DISTINCT master.coachid) FROM master INNER JOIN hof ON master.hofid = hof.hofid WHERE master.coachid IS NOT NULL",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5516,
            "cost": 0.0008759999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.playerID IS NOT NULL AND T1.coachID IS NOT NULL"
    },
    {
        "sample_id": 7639,
        "pred_sql": "SELECT coaches.firstname, coaches.lastname, coaches.tmid FROM coaches INNER JOIN master ON coaches.coachid = master.coachid WHERE master.playerid IS NULL ORDER BY (coaches.w / (coaches.w + coaches.l)) DESC LIMIT 1;",
        "retrieved": [
            7737
        ],
        "token_usage": {
            "tokens": 5621,
            "cost": 0.0009268499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.nameGiven, T3.name FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.coachID IS NOT NULL ORDER BY CAST(T1.w AS REAL) / T1.g DESC LIMIT 1"
    },
    {
        "sample_id": 7680,
        "pred_sql": "SELECT AVG((weight / (height * height)) * 703) AS average_bmi FROM coaches INNER JOIN hof ON coaches.coachid = hof.hofid",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5548,
            "cost": 0.0008956499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T1.weight / (T1.height * T1.height)) / COUNT(T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID"
    },
    {
        "sample_id": 7623,
        "pred_sql": "SELECT master.firstname, master.lastname, goalies.year FROM goalies INNER JOIN master ON goalies.playerid = master.playerid WHERE goalies.eng >= 10;",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5611,
            "cost": 0.0009140999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName , T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.ENG >= 10"
    },
    {
        "sample_id": 7620,
        "pred_sql": "SELECT master.namegiven, goalies.year FROM master JOIN goalies ON master.playerid = goalies.playerid WHERE goalies.lgid IN ('PCHA', 'NHL') GROUP BY master.namegiven, goalies.year HAVING COUNT(DISTINCT goalies.lgid) = 2",
        "retrieved": [
            7630
        ],
        "token_usage": {
            "tokens": 5621,
            "cost": 0.0009444
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1"
    },
    {
        "sample_id": 7708,
        "pred_sql": "SELECT master.birthyear FROM master INNER JOIN goaliessc ON master.playerid = goaliessc.playerid WHERE goaliessc.year = '2008' ORDER BY goaliessc.ga DESC LIMIT 1",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5627,
            "cost": 0.00092235
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2008 ORDER BY T2.PostSA DESC LIMIT 1"
    },
    {
        "sample_id": 7712,
        "pred_sql": "SELECT master.firstname || ' ' || master.lastname AS full_name FROM scoring JOIN master ON scoring.playerid = master.playerid WHERE scoring.year = '1981' ORDER BY scoring.'+/-' DESC LIMIT 1;",
        "retrieved": [
            7632
        ],
        "token_usage": {
            "tokens": 5567,
            "cost": 0.00091515
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1981 GROUP BY T2.playerID ORDER BY SUM(T2.\"+/-\") DESC LIMIT 1"
    },
    {
        "sample_id": 7701,
        "pred_sql": "SELECT SUM(gp) AS total_games FROM goaliessc WHERE playerid = 'broadpu01' AND year = '1922';",
        "retrieved": [
            7759
        ],
        "token_usage": {
            "tokens": 5509,
            "cost": 0.00087585
        },
        "db_id": "hockey",
        "gold_sql": "SELECT GP FROM ScoringSC WHERE playerID = 'broadpu01' AND YEAR = 1922"
    },
    {
        "sample_id": 7751,
        "pred_sql": "SELECT SUM(teams.pim) AS total_bench_minor_penalties FROM teams WHERE teams.name = 'St. Louis Blues'",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5510,
            "cost": 0.0008791499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT CAST(SUM(BenchMinor) AS REAL) / 2 FROM Teams WHERE name = 'St. Louis Blues'"
    },
    {
        "sample_id": 7655,
        "pred_sql": "SELECT COUNT(hof.hofid) FROM hof WHERE hof.year > '1980' AND hof.category = 'Player'",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5572,
            "cost": 0.0009046499999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(hofID) FROM HOF WHERE year > 1980 AND category = 'Player'"
    },
    {
        "sample_id": 7764,
        "pred_sql": "SELECT name FROM teams WHERE year = '1909' AND t = '1'",
        "retrieved": [
            7759
        ],
        "token_usage": {
            "tokens": 5505,
            "cost": 0.0008774999999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.name, T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.oppID = T3.tmID WHERE T1.year = 1909 AND T1.T = 1"
    },
    {
        "sample_id": 7717,
        "pred_sql": "SELECT coaches.year, coaches.tmid, coaches.notes FROM coaches JOIN teams ON coaches.tmid = teams.tmid WHERE teams.year = '2003' ORDER BY teams.benchminor DESC LIMIT 1;",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5554,
            "cost": 0.000906
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T3.firstName, T3.lastName FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.year = '2003' GROUP BY T3.firstName, T3.lastName ORDER BY SUM(T1.BenchMinor) DESC LIMIT 1"
    },
    {
        "sample_id": 7664,
        "pred_sql": "SELECT awardscoaches.award FROM master INNER JOIN awardscoaches ON master.coachid = awardscoaches.coachid INNER JOIN coaches ON master.coachid = coaches.coachid WHERE coaches.lgid = 'NHL' AND master.deathyear IS NOT NULL",
        "retrieved": [
            7661
        ],
        "token_usage": {
            "tokens": 5535,
            "cost": 0.0008963999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.lgID = 'NHL'"
    },
    {
        "sample_id": 7770,
        "pred_sql": "SELECT COUNT(DISTINCT coaches.coachid) FROM coaches INNER JOIN teams ON coaches.tmid = teams.tmid AND coaches.year = teams.year INNER JOIN master ON coaches.coachid = master.coachid WHERE master.birthcountry = 'USA' AND teams.name = 'Philadelphia Flyers'",
        "retrieved": [
            7773
        ],
        "token_usage": {
            "tokens": 5610,
            "cost": 0.0009175499999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthCountry = 'USA'"
    },
    {
        "sample_id": 7691,
        "pred_sql": "SELECT master.birthcity, master.birthstate, master.birthcountry FROM coaches INNER JOIN master ON coaches.coachid = master.coachid WHERE coaches.year = '1998' AND coaches.tmid IN (SELECT coaches.tmid FROM coaches WHERE coaches.year = '1998' AND coaches.coachid != (SELECT coachid FROM master WHERE firstname = 'Dave' AND lastname = 'Lewis'))",
        "retrieved": [
            7661
        ],
        "token_usage": {
            "tokens": 5571,
            "cost": 0.0009162
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach with Dave Lewis'"
    },
    {
        "sample_id": 7715,
        "pred_sql": "SELECT master.firstname, master.lastname FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE awardsplayers.year = '1986' ORDER BY awardsplayers.gwg DESC LIMIT 1;",
        "retrieved": [
            7742
        ],
        "token_usage": {
            "tokens": 5603,
            "cost": 0.00091155
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1986 GROUP BY T2.playerID ORDER BY SUM(T2.GWG) DESC LIMIT 1"
    },
    {
        "sample_id": 7679,
        "pred_sql": "SELECT awardsplayers.pos FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE master.birthcountry = 'Canada' AND awardsplayers.award = 'All-Rookie'",
        "retrieved": [
            7661
        ],
        "token_usage": {
            "tokens": 5528,
            "cost": 0.0008904000000000001
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'Canada' AND T2.award = 'All-Rookie'"
    },
    {
        "sample_id": 7810,
        "pred_sql": "SELECT master.playerid FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE awardsplayers.pos LIKE '%W%' AND master.weight > 200;",
        "retrieved": [
            7815
        ],
        "token_usage": {
            "tokens": 5523,
            "cost": 0.0008865
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT playerID FROM Master WHERE pos LIKE '%L%' AND weight > 200 AND playerID IS NOT NULL AND pos = 'L'"
    },
    {
        "sample_id": 7755,
        "pred_sql": "SELECT teams.name FROM teams WHERE teams.year = '2006' GROUP BY teams.tmid, teams.name ORDER BY SUM(teams.benchminor) DESC LIMIT 1",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5548,
            "cost": 0.0009050999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY CAST(SUM(BenchMinor) AS REAL) / 2 DESC LIMIT 1"
    },
    {
        "sample_id": 7734,
        "pred_sql": "SELECT AVG(CAST(master.height AS INTEGER)) AS average_height, teams.name AS team_name FROM goalies INNER JOIN master ON goalies.playerid = master.playerid INNER JOIN teams ON goalies.tmid = teams.tmid WHERE master.birthyear BETWEEN '1970' AND '1979' AND (master.shootcatch = 'L' OR master.shootcatch IS NULL) GROUP BY teams.name ORDER BY average_height DESC LIMIT 1;",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5718,
            "cost": 0.00097155
        },
        "db_id": "hockey",
        "gold_sql": "SELECT CAST(SUM(T2.height) AS REAL) / COUNT(*) FROM AwardsPlayers AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.height IS NOT NULL AND (T2.pos = 'LW' OR T2.pos = 'L/C')"
    },
    {
        "sample_id": 7808,
        "pred_sql": "SELECT SUM(scoring.g) AS total_goals, (2023 - master.birthyear) AS age FROM scoring INNER JOIN master ON scoring.playerid = master.playerid WHERE master.playerid = 'aaltoan01';",
        "retrieved": [
            7750
        ],
        "token_usage": {
            "tokens": 5662,
            "cost": 0.0009280499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T2.G), STRFTIME('%Y', CURRENT_TIMESTAMP) - T1.birthyear FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01' GROUP BY T1.birthyear"
    },
    {
        "sample_id": 7779,
        "pred_sql": "SELECT m.firstname FROM coaches AS c INNER JOIN teams AS t ON c.tmid = t.tmid AND c.year = t.year INNER JOIN master AS m ON c.coachid = m.coachid WHERE t.name = 'Montreal Canadiens' ORDER BY c.year ASC LIMIT 1;",
        "retrieved": [
            7773
        ],
        "token_usage": {
            "tokens": 5586,
            "cost": 0.0009044999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' ORDER BY T1.year LIMIT 1"
    },
    {
        "sample_id": 7817,
        "pred_sql": "SELECT teams.tmid, master.birthcountry FROM teams JOIN master ON teams.tmid = master.coachid WHERE teams.year = '2000' ORDER BY (CAST(teams.w AS INTEGER) / (CAST(teams.w AS INTEGER) + CAST(teams.l AS INTEGER))) DESC LIMIT 1;",
        "retrieved": [
            7728
        ],
        "token_usage": {
            "tokens": 5582,
            "cost": 0.0009214499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T3.tmID, T1.birthCountry FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID INNER JOIN ( SELECT year, tmID FROM Teams WHERE year = 2000 ORDER BY W / (W + L) DESC LIMIT 1 ) AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year"
    },
    {
        "sample_id": 7762,
        "pred_sql": "SELECT teamspost.tmid, teams.name, teamspost.w FROM teamspost INNER JOIN teams ON teamspost.tmid = teams.tmid WHERE teamspost.year = (SELECT MAX(year) FROM teamspost) ORDER BY teamspost.w DESC LIMIT 1;",
        "retrieved": [
            7758
        ],
        "token_usage": {
            "tokens": 5600,
            "cost": 0.0009295499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year GROUP BY T2.name ORDER BY SUM(T1.W) DESC LIMIT 1"
    },
    {
        "sample_id": 7776,
        "pred_sql": "SELECT SUM(teams.pim) AS total_penalty_minutes FROM teams WHERE teams.year = '1918' AND teams.tmid = 'MONTREAL CANADIENS'",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5517,
            "cost": 0.0008838
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.PIM FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T1.year = 1918"
    },
    {
        "sample_id": 7800,
        "pred_sql": "SELECT (SUM(gp) - (SELECT SUM(gp) FROM goaliessc WHERE playerid = (SELECT playerid FROM master WHERE firstname = 'David' AND lastname = 'Aebischer') AND year = '2005')) / SUM(gp) * 100 AS decrease_rate FROM goaliessc WHERE playerid = (SELECT playerid FROM master WHERE firstname = 'David' AND lastname = 'Aebischer') AND year < '2005'",
        "retrieved": [
            7650
        ],
        "token_usage": {
            "tokens": 5584,
            "cost": 0.0009266999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) - SUM(CASE WHEN T1.year = 2006 THEN T1.GP ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.firstName = 'David' AND T2.lastName = 'Aebischer'"
    },
    {
        "sample_id": 7637,
        "pred_sql": "SELECT teams.name FROM teams JOIN goalies ON teams.tmid = goalies.tmid WHERE goalies.playerid IN (SELECT playerid FROM master WHERE deathyear IS NULL AND firstnhl < '1950')",
        "retrieved": [
            7630
        ],
        "token_usage": {
            "tokens": 5541,
            "cost": 0.000891
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.lgID = T3.lgID AND T2.year = T3.year WHERE T1.deathYear IS NOT NULL AND T1.firstNHL < 1950"
    },
    {
        "sample_id": 7719,
        "pred_sql": "SELECT (CAST(SUM(CASE WHEN t1.w + t1.l + t1.t > 0 THEN t1.w * 1.0 / (t1.w + t1.l + t1.t) END) AS FLOAT) - CAST(SUM(CASE WHEN t2.w + t2.l + t2.t > 0 THEN t2.w * 1.0 / (t2.w + t2.l + t2.t) END) AS FLOAT)) * 100 AS winning_rate_improvement\nFROM coaches c\nJOIN teams t1 ON c.tmid = t1.tmid AND c.year = t1.year\nJOIN teams t2 ON c.tmid = t2.tmid AND t2.year < 2006\nWHERE c.coachid = (SELECT coachid FROM master WHERE firstname = 'Alain' AND lastname = 'Vigneault')\nAND c.year = 2006\nAND c.tmid = 'VAN';",
        "retrieved": [
            7724
        ],
        "token_usage": {
            "tokens": 5757,
            "cost": 0.00102105
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(CASE WHEN T1.year = 2006 THEN CAST(T1.W AS REAL) * 100 / (T1.W + T1.L) ELSE 0 END) - ( SELECT CAST(W AS REAL) * 100 / (W + L) FROM Teams WHERE year = '2005' AND name = 'Vancouver Canucks' ) FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.name = 'Vancouver Canucks' AND T3.firstName = 'Alain' AND T3.lastName = 'Vigneault'"
    },
    {
        "sample_id": 7622,
        "pred_sql": "SELECT master.namegiven, master.height, master.weight, (2023 - CAST(master.birthyear AS INTEGER)) AS age FROM goalies INNER JOIN master ON goalies.playerid = master.playerid WHERE goalies.year BETWEEN '2000' AND '2010' AND goalies.tmid = 'COL';",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5639,
            "cost": 0.0009273
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.nameGiven, T1.height , T1.weight, STRFTIME('%Y', CURRENT_TIMESTAMP) - birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID"
    },
    {
        "sample_id": 7743,
        "pred_sql": "SELECT coaches.g FROM coaches INNER JOIN awardscoaches ON coaches.coachid = awardscoaches.coachid WHERE awardscoaches.award = 'Second Team All-Star' ORDER BY awardscoaches.year ASC LIMIT 1;",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5547,
            "cost": 0.00089325
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T1.g) FROM Coaches AS T1 INNER JOIN ( SELECT coachID, year FROM AwardsCoaches WHERE award = 'Second Team All-Star' ORDER BY year LIMIT 1 ) AS T2 ON T1.coachID = T2.coachID AND T1.year < T2.year"
    },
    {
        "sample_id": 7676,
        "pred_sql": "SELECT master.birthyear, COUNT(awardsplayers.award) AS total_awards FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid GROUP BY master.birthyear ORDER BY total_awards DESC LIMIT 1;",
        "retrieved": [
            7675
        ],
        "token_usage": {
            "tokens": 5565,
            "cost": 0.0009134999999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthYear ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "sample_id": 7809,
        "pred_sql": "SELECT DISTINCT coaches.coachid FROM coaches LEFT JOIN master ON coaches.coachid = master.coachid WHERE master.playerid IS NULL AND coaches.coachid IN (SELECT DISTINCT awardscoaches.coachid FROM awardscoaches)",
        "retrieved": [
            7737
        ],
        "token_usage": {
            "tokens": 5635,
            "cost": 0.0009393
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T2.coachID FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.playerID IS NULL"
    },
    {
        "sample_id": 7696,
        "pred_sql": "SELECT master.firstname, master.lastname FROM master INNER JOIN goalies ON master.playerid = goalies.playerid WHERE goalies.tmid = 'NJD' GROUP BY goalies.playerid ORDER BY SUM(goalies.sa) DESC LIMIT 1;",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5628,
            "cost": 0.00092205
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'NJD' GROUP BY T2.playerID ORDER BY SUM(T2.SA - T2.GA) DESC LIMIT 1"
    },
    {
        "sample_id": 7754,
        "pred_sql": "SELECT COUNT(*) FROM teams WHERE year = '2006' AND w > l AND pts > 100;",
        "retrieved": [
            7758
        ],
        "token_usage": {
            "tokens": 5545,
            "cost": 0.00089025
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(tmID) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100"
    },
    {
        "sample_id": 8971,
        "pred_sql": "SELECT locationcity, address FROM location WHERE zipcode > '90000';",
        "retrieved": [],
        "token_usage": {
            "tokens": 692,
            "cost": 0.00015419999999999998
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT locationcity, address FROM location WHERE zipcode > 90000"
    },
    {
        "sample_id": 8958,
        "pred_sql": "SELECT COUNT(*) FROM position WHERE maxsalary <= 1000000;",
        "retrieved": [
            8929
        ],
        "token_usage": {
            "tokens": 769,
            "cost": 0.00016575
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(SUBSTR(maxsalary, 4), ',', '') AS REAL) < 100000"
    },
    {
        "sample_id": 8969,
        "pred_sql": "SELECT employee.firstname, employee.lastname, employee.performance FROM employee WHERE employee.salary = (SELECT MIN(salary) FROM employee)",
        "retrieved": [
            8980
        ],
        "token_usage": {
            "tokens": 817,
            "cost": 0.0001842
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1"
    },
    {
        "sample_id": 8979,
        "pred_sql": "SELECT employee.firstname || ' ' || employee.lastname AS full_name, location.locationcity, location.address, location.zipcode FROM employee INNER JOIN location ON employee.locationid = location.locationid WHERE employee.performance = 'Poor'",
        "retrieved": [
            8978
        ],
        "token_usage": {
            "tokens": 791,
            "cost": 0.00017265
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'"
    },
    {
        "sample_id": 8961,
        "pred_sql": "SELECT location.address FROM location INNER JOIN employee ON location.locationid = employee.locationid GROUP BY location.address ORDER BY COUNT(employee.ssn) DESC LIMIT 1;",
        "retrieved": [
            8982
        ],
        "token_usage": {
            "tokens": 842,
            "cost": 0.0001983
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T2.address, T2.locationcity, T2.state, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID GROUP BY T2.address, T2.locationcity, T2.state, T2.zipcode ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "sample_id": 8925,
        "pred_sql": "SELECT employee.firstname, employee.lastname FROM employee ORDER BY employee.salary DESC LIMIT 1;",
        "retrieved": [
            8937
        ],
        "token_usage": {
            "tokens": 771,
            "cost": 0.0001692
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1"
    },
    {
        "sample_id": 8957,
        "pred_sql": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1;",
        "retrieved": [
            8978
        ],
        "token_usage": {
            "tokens": 762,
            "cost": 0.00015884999999999999
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )"
    },
    {
        "sample_id": 8963,
        "pred_sql": "SELECT COUNT(*) FROM employee INNER JOIN position ON employee.positionid = position.positionid WHERE employee.gender = 'Male' AND position.positiontitle = 'Regional Manager'",
        "retrieved": [
            8928
        ],
        "token_usage": {
            "tokens": 770,
            "cost": 0.00018119999999999999
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'"
    },
    {
        "sample_id": 8930,
        "pred_sql": "SELECT location.locationcity FROM employee INNER JOIN location ON employee.locationid = location.locationid WHERE employee.firstname = 'Sandy' AND employee.lastname = 'Adams'",
        "retrieved": [
            8932
        ],
        "token_usage": {
            "tokens": 772,
            "cost": 0.00016979999999999998
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'"
    },
    {
        "sample_id": 8944,
        "pred_sql": "SELECT COUNT(*) FROM employee WHERE employee.gender = 'Female'",
        "retrieved": [
            8926
        ],
        "token_usage": {
            "tokens": 682,
            "cost": 0.00013065
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT COUNT(*) FROM employee WHERE gender = 'F'"
    },
    {
        "sample_id": 8927,
        "pred_sql": "SELECT employee.ssn FROM employee WHERE employee.gender = 'Male' AND employee.salary > 70000",
        "retrieved": [
            8940
        ],
        "token_usage": {
            "tokens": 788,
            "cost": 0.00017805
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 70000"
    },
    {
        "sample_id": 8962,
        "pred_sql": "SELECT AVG(CAST(REPLACE(SUBSTRING(employee.salary, 1, LENGTH(employee.salary)), ',', '') AS FLOAT)) FROM employee INNER JOIN position ON employee.positionid = position.positionid WHERE position.educationrequired = 2",
        "retrieved": [
            8942
        ],
        "token_usage": {
            "tokens": 828,
            "cost": 0.00019575
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree'"
    },
    {
        "sample_id": 8977,
        "pred_sql": "SELECT employee.firstname || ' ' || employee.lastname AS full_name, employee.gender, position.positiontitle FROM employee INNER JOIN location ON employee.locationid = location.locationid INNER JOIN position ON employee.positionid = position.positionid WHERE location.locationcity = 'New York'",
        "retrieved": [
            8978
        ],
        "token_usage": {
            "tokens": 827,
            "cost": 0.00019739999999999997
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'"
    },
    {
        "sample_id": 6990,
        "pred_sql": "SELECT COUNT(seasonstatus.gametype) AS playoffs_count FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE playerinfo.playername = 'Per Mars' AND seasonstatus.gametype = 'playoffs'",
        "retrieved": [
            6965
        ],
        "token_usage": {
            "tokens": 1334,
            "cost": 0.00027705
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT SUM(T2.GP) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PlayerName = 'Per Mars' AND T2.GAMETYPE = 'Playoffs'"
    },
    {
        "sample_id": 6982,
        "pred_sql": "SELECT COUNT(DISTINCT seasonstatus.team) FROM playerinfo INNER JOIN weight_info ON playerinfo.weight = weight_info.weight_id INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE weight_info.weight_in_kg = (SELECT MAX(weight_info.weight_in_kg) FROM playerinfo INNER JOIN weight_info ON playerinfo.weight = weight_info.weight_id WHERE playerinfo.draftyear = 2000 AND playerinfo.overallby = 'Arizona Coyotes')",
        "retrieved": [
            6973
        ],
        "token_usage": {
            "tokens": 1404,
            "cost": 0.00030599999999999996
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT COUNT(T2.TEAM) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T1.weight = T3.weight_id WHERE T1.overallby = 'Arizona Coyotes' ORDER BY T3.weight_in_lbs DESC LIMIT 1"
    },
    {
        "sample_id": 6948,
        "pred_sql": "SELECT playerinfo.playername FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.gp IS NOT NULL ORDER BY seasonstatus.p DESC LIMIT 1",
        "retrieved": [
            6950
        ],
        "token_usage": {
            "tokens": 1339,
            "cost": 0.00027644999999999997
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.P = ( SELECT MAX(P) FROM SeasonStatus )"
    },
    {
        "sample_id": 6992,
        "pred_sql": "SELECT (SELECT T2.team, COUNT(DISTINCT T1.eliteid) FROM playerinfo AS T1 INNER JOIN seasonstatus AS T2 ON T1.eliteid = T2.eliteid WHERE T2.team = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(DISTINCT T1.eliteid) DESC LIMIT 1).nation FROM (SELECT seasonstatus.team, COUNT(DISTINCT T1.eliteid) FROM playerinfo AS T1 INNER JOIN seasonstatus AS T2 ON T1.eliteid = T2.eliteid WHERE T2.team = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(DISTINCT T1.eliteid) DESC LIMIT 1) AS t",
        "retrieved": [
            6989
        ],
        "token_usage": {
            "tokens": 1554,
            "cost": 0.0003591
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T.nation FROM ( SELECT T1.nation, COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(T1.ELITEID) DESC LIMIT 1 ) AS T"
    },
    {
        "sample_id": 6951,
        "pred_sql": "SELECT playerinfo.playername, seasonstatus.team FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE seasonstatus.season = '2006-2007' AND seasonstatus.league = 'SuperElit' ORDER BY seasonstatus.p DESC LIMIT 1;",
        "retrieved": [
            6943
        ],
        "token_usage": {
            "tokens": 1395,
            "cost": 0.00029475
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName, T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2006-2007' AND T1.GAMETYPE = 'Playoffs' AND T1.LEAGUE = 'SuperElit' ORDER BY T1.P DESC LIMIT 1"
    },
    {
        "sample_id": 6915,
        "pred_sql": "SELECT height_in_inch FROM height_info INNER JOIN playerinfo ON height_info.height_id = playerinfo.height WHERE playerinfo.playername = 'David Bornhammar'",
        "retrieved": [
            6928
        ],
        "token_usage": {
            "tokens": 1284,
            "cost": 0.00024434999999999995
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.height_in_inch FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar'"
    },
    {
        "sample_id": 6929,
        "pred_sql": "SELECT MAX(weight_info.weight_in_lbs) FROM weight_info INNER JOIN playerinfo ON weight_info.weight_id = playerinfo.weight",
        "retrieved": [
            6977
        ],
        "token_usage": {
            "tokens": 1310,
            "cost": 0.00025679999999999995
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT MAX(T2.weight_in_lbs) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id"
    },
    {
        "sample_id": 6949,
        "pred_sql": "SELECT (COUNT(CASE WHEN playerinfo.nation IN ('Estonia', 'Latvia', 'Lithuania', 'Poland', 'Slovakia', 'Hungary', 'Ukraine', 'Belarus', 'Moldova', 'Romania') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_eastern_europe_players FROM playerinfo WHERE playerinfo.overallby = 'Toronto Maple Leafs';",
        "retrieved": [
            6950
        ],
        "token_usage": {
            "tokens": 1368,
            "cost": 0.00029115
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN nation IN ('Belarus', 'Czech Rep.', 'Slovakia', 'Ukraine') THEN ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs'"
    },
    {
        "sample_id": 6979,
        "pred_sql": "SELECT playerinfo.playername FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE seasonstatus.season = '2000-2001' AND seasonstatus.team = 'Avangard Omsk' AND seasonstatus.g = '0'",
        "retrieved": [
            6971
        ],
        "token_usage": {
            "tokens": 1391,
            "cost": 0.00029505
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' AND T1.TEAM = 'Czech Republic (all)' AND T1.G = 0"
    },
    {
        "sample_id": 6964,
        "pred_sql": "SELECT DISTINCT playerinfo.nation FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE seasonstatus.season = '1997-1998'",
        "retrieved": [
            6936
        ],
        "token_usage": {
            "tokens": 1338,
            "cost": 0.00026415
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT DISTINCT T2.nation FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998'"
    },
    {
        "sample_id": 6980,
        "pred_sql": "SELECT playerinfo.playername FROM playerinfo INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.team = 'Avangard Omsk' AND seasonstatus.league = 'Regular season' AND seasonstatus.season = '2000-2001' ORDER BY playerinfo.birthdate ASC LIMIT 1",
        "retrieved": [
            6995
        ],
        "token_usage": {
            "tokens": 1378,
            "cost": 0.0002868
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Avangard Omsk' ORDER BY T2.birthdate ASC LIMIT 1"
    },
    {
        "sample_id": 6919,
        "pred_sql": "SELECT weight_info.weight_in_kg FROM playerinfo INNER JOIN weight_info ON playerinfo.weight = weight_info.weight_id WHERE playerinfo.playername = 'David Bornhammar'",
        "retrieved": [
            6925
        ],
        "token_usage": {
            "tokens": 1275,
            "cost": 0.00023669999999999995
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'"
    },
    {
        "sample_id": 6924,
        "pred_sql": "SELECT (T1.height_in_cm - T2.height_in_cm) AS height_difference FROM height_info AS T1 INNER JOIN playerinfo AS P1 ON T1.height_id = P1.height INNER JOIN height_info AS T2 INNER JOIN playerinfo AS P2 ON T2.height_id = P2.height WHERE P1.playername = 'David Bornhammar' AND P2.playername = 'Pauli Levokari'",
        "retrieved": [
            6928
        ],
        "token_usage": {
            "tokens": 1330,
            "cost": 0.0002697
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )"
    },
    {
        "sample_id": 6953,
        "pred_sql": "SELECT playerinfo.height FROM playerinfo INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE playerinfo.birthplace = 'Yale University' AND seasonstatus.pim = 28 AND seasonstatus.season = '2005-2006';",
        "retrieved": [
            6971
        ],
        "token_usage": {
            "tokens": 1349,
            "cost": 0.00027479999999999996
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T3.height_in_cm FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T2.height = T3.height_id WHERE T1.SEASON = '2005-2006' AND T1.TEAM = 'Yale Univ.' AND T1.PIM = 28"
    },
    {
        "sample_id": 6968,
        "pred_sql": "SELECT COUNT(playerinfo.eliteid) FROM playerinfo INNER JOIN height_info ON playerinfo.height = height_info.height_id WHERE STRFTIME('%Y', playerinfo.birthdate) = '1982' AND height_info.height_in_cm > '182'",
        "retrieved": [
            6977
        ],
        "token_usage": {
            "tokens": 1344,
            "cost": 0.00027449999999999995
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND strftime('%Y', T2.birthdate) = '1982'"
    },
    {
        "sample_id": 6932,
        "pred_sql": "SELECT MAX(T3.height_in_cm) FROM playerinfo AS T1 INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T1.birthplace = 'Edmonton, Alberta, Canada'",
        "retrieved": [
            6996
        ],
        "token_usage": {
            "tokens": 1558,
            "cost": 0.00029535
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN' ORDER BY T2.height_in_cm DESC LIMIT 1"
    },
    {
        "sample_id": 6944,
        "pred_sql": "SELECT playerinfo.playername FROM playerinfo INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.p >= 100 AND seasonstatus.league = 'NHL' AND seasonstatus.team = 'Chilliwack Chiefs'",
        "retrieved": [
            6943
        ],
        "token_usage": {
            "tokens": 1358,
            "cost": 0.00027659999999999995
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P >= 100"
    },
    {
        "sample_id": 7493,
        "pred_sql": "SELECT COUNT(pred_class_id) AS number_of_predicted_classes FROM pred_classes;",
        "retrieved": [
            7518
        ],
        "token_usage": {
            "tokens": 1018,
            "cost": 0.00019905
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(PRED_CLASS_ID) FROM PRED_CLASSES"
    },
    {
        "sample_id": 7544,
        "pred_sql": "SELECT DISTINCT obj_classes.obj_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '422' AND img_obj.y = '63' AND img_obj.w = '77' AND img_obj.h = '363'",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1263,
            "cost": 0.00026999999999999995
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363"
    },
    {
        "sample_id": 7482,
        "pred_sql": "SELECT pred_classes.pred_class \nFROM pred_classes \nINNER JOIN img_rel AS T1 ON pred_classes.pred_class_id = T1.pred_class_id \nWHERE T1.img_id = '1' AND T1.obj1_sample_id = '8' AND T1.obj2_sample_id = '4'",
        "retrieved": [
            7487
        ],
        "token_usage": {
            "tokens": 1113,
            "cost": 0.00024344999999999998
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4"
    },
    {
        "sample_id": 7600,
        "pred_sql": "SELECT obj_classes.obj_class FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.img_id = '36' AND img_obj.x = '0' AND img_obj.y = '0';",
        "retrieved": [
            7596
        ],
        "token_usage": {
            "tokens": 1116,
            "cost": 0.00025515
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0"
    },
    {
        "sample_id": 7496,
        "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS sample_count FROM img_obj_att INNER JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id INNER JOIN img_obj ON img_obj_att.img_id = img_obj.img_id AND img_obj_att.obj_sample_id = img_obj.obj_sample_id WHERE img_obj.img_id = '2377985' AND att_classes.att_class = 'electrical';",
        "retrieved": [
            7502
        ],
        "token_usage": {
            "tokens": 1179,
            "cost": 0.00027134999999999995
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915"
    },
    {
        "sample_id": 7602,
        "pred_sql": "SELECT obj_class_id FROM img_obj WHERE x = '126' AND y = '363'",
        "retrieved": [
            7563
        ],
        "token_usage": {
            "tokens": 1035,
            "cost": 0.00020474999999999996
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.IMG_ID, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 126 AND T1.Y = 363"
    },
    {
        "sample_id": 7586,
        "pred_sql": "SELECT img_obj.w, img_obj.h FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE obj_classes.obj_class = 'keyboard' AND img_obj.x = '5' AND img_obj.y = '647'",
        "retrieved": [
            7611
        ],
        "token_usage": {
            "tokens": 1185,
            "cost": 0.0002799
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard' AND T1.X = 5 AND T1.Y = 647"
    },
    {
        "sample_id": 7523,
        "pred_sql": "SELECT COUNT(DISTINCT img_obj.img_id) AS image_count FROM img_rel INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id INNER JOIN img_obj ON img_rel.img_id = img_obj.img_id WHERE img_rel.obj1_sample_id != img_rel.obj2_sample_id AND pred_classes.pred_class = 'on';",
        "retrieved": [
            7521
        ],
        "token_usage": {
            "tokens": 1150,
            "cost": 0.00027105
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on'"
    },
    {
        "sample_id": 7489,
        "pred_sql": "SELECT AVG(ABS(obj1.y - obj2.y)) AS average_difference_y\nFROM img_rel\nJOIN img_obj AS obj1 ON img_rel.obj1_sample_id = obj1.obj_sample_id AND img_rel.img_id = obj1.img_id\nJOIN img_obj AS obj2 ON img_rel.obj2_sample_id = obj2.obj_sample_id AND img_rel.img_id = obj2.img_id\nWHERE img_rel.pred_class_id = (SELECT pred_class_id FROM pred_classes WHERE pred_class = 'parked on')\nAND img_rel.img_id = '1';",
        "retrieved": [
            7575
        ],
        "token_usage": {
            "tokens": 1233,
            "cost": 0.00030015
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT CAST(SUM(T3.Y) AS REAL) / COUNT(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE NULL END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID"
    },
    {
        "sample_id": 7478,
        "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h FROM img_obj INNER JOIN img_rel ON img_obj.obj_sample_id = img_rel.obj1_sample_id WHERE img_rel.img_id = '5' AND img_rel.obj1_sample_id = img_rel.obj2_sample_id;",
        "retrieved": [
            7487
        ],
        "token_usage": {
            "tokens": 1093,
            "cost": 0.0002319
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID"
    },
    {
        "sample_id": 7534,
        "pred_sql": "SELECT att_classes.att_class FROM att_classes INNER JOIN img_obj_att AS T2 ON att_classes.att_class_id = T2.att_class_id INNER JOIN img_obj AS T3 ON T2.img_id = T3.img_id WHERE T3.img_id = '1' AND T3.obj_sample_id IN (SELECT obj_sample_id FROM img_obj WHERE img_id = '1')",
        "retrieved": [
            7481
        ],
        "token_usage": {
            "tokens": 1085,
            "cost": 0.00023565
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1 GROUP BY T4.ATT_CLASS"
    },
    {
        "sample_id": 7591,
        "pred_sql": "SELECT COUNT(img_obj_att.img_id) FROM att_classes INNER JOIN img_obj_att AS T2 ON att_classes.att_class_id = T2.att_class_id INNER JOIN img_obj AS T3 ON T2.img_id = T3.img_id WHERE att_classes.att_class = 'picture'",
        "retrieved": [
            7592
        ],
        "token_usage": {
            "tokens": 1132,
            "cost": 0.00024179999999999997
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'picture'"
    },
    {
        "sample_id": 7546,
        "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h FROM img_obj WHERE img_obj.img_id = '8'",
        "retrieved": [
            7527
        ],
        "token_usage": {
            "tokens": 1040,
            "cost": 0.00020414999999999997
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8"
    },
    {
        "sample_id": 7598,
        "pred_sql": "SELECT COUNT(*) FROM img_obj WHERE img_id = '12' AND y = '0'",
        "retrieved": [
            7596
        ],
        "token_usage": {
            "tokens": 1039,
            "cost": 0.00020894999999999998
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0"
    },
    {
        "sample_id": 7606,
        "pred_sql": "SELECT COUNT(img_rel.pred_class_id) FROM img_rel INNER JOIN img_obj ON img_rel.img_id = img_obj.img_id WHERE img_obj.img_id = '107' AND img_rel.pred_class_id = 'has'",
        "retrieved": [
            7515
        ],
        "token_usage": {
            "tokens": 1096,
            "cost": 0.00022964999999999997
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T2.PRED_CLASS) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 107 AND T2.PRED_CLASS = 'has'"
    },
    {
        "sample_id": 7516,
        "pred_sql": "SELECT img_rel.pred_class_id FROM img_obj INNER JOIN img_rel ON img_obj.img_id = img_rel.img_id ORDER BY CAST(img_obj.h AS INTEGER) DESC LIMIT 1",
        "retrieved": [
            7518
        ],
        "token_usage": {
            "tokens": 1101,
            "cost": 0.0002466
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.PRED_CLASS_ID FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID ORDER BY T2.H DESC LIMIT 1"
    },
    {
        "sample_id": 7533,
        "pred_sql": "SELECT AVG(object_count) FROM (SELECT COUNT(obj_sample_id) AS object_count FROM img_obj GROUP BY img_id) AS avg_objects;",
        "retrieved": [
            7538
        ],
        "token_usage": {
            "tokens": 1038,
            "cost": 0.00022094999999999998
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT CAST(COUNT(OBJ_CLASS_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ"
    },
    {
        "sample_id": 7590,
        "pred_sql": "SELECT COUNT(DISTINCT img_rel.img_id) FROM img_rel INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE pred_classes.pred_class = 'reading' AND img_rel.obj1_sample_id IN (SELECT obj_sample_id FROM img_obj) AND img_rel.obj2_sample_id IN (SELECT obj_sample_id FROM img_obj);",
        "retrieved": [
            7592
        ],
        "token_usage": {
            "tokens": 1176,
            "cost": 0.0002646
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading'"
    },
    {
        "sample_id": 7510,
        "pred_sql": "SELECT img_obj.obj_sample_id FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id WHERE att_classes.att_class = 'transportation'",
        "retrieved": [
            7509
        ],
        "token_usage": {
            "tokens": 1097,
            "cost": 0.00024779999999999995
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc')"
    },
    {
        "sample_id": 7601,
        "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE obj_classes.obj_class = 'pizza' LIMIT 10;",
        "retrieved": [
            7569
        ],
        "token_usage": {
            "tokens": 1130,
            "cost": 0.00024465
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.IMG_ID, T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'pizza' LIMIT 10"
    },
    {
        "sample_id": 7559,
        "pred_sql": "SELECT obj_classes.obj_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id ORDER BY (CAST(img_obj.y AS INTEGER) + CAST(img_obj.h AS INTEGER)) ASC LIMIT 1;",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1251,
            "cost": 0.00026729999999999994
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H LIMIT 1"
    },
    {
        "sample_id": 7492,
        "pred_sql": "SELECT COUNT(DISTINCT obj_class_id) FROM obj_classes;",
        "retrieved": [
            7509
        ],
        "token_usage": {
            "tokens": 996,
            "cost": 0.00018899999999999999
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(OBJ_CLASS_ID) FROM OBJ_CLASSES"
    },
    {
        "sample_id": 7522,
        "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.img_id = '2222' AND obj_classes.obj_class = 'feathers'",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1272,
            "cost": 0.0002781
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.X, T2.Y, T2.H, T2.W FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2222 AND T1.OBJ_CLASS = 'feathers'"
    },
    {
        "sample_id": 7558,
        "pred_sql": "SELECT COUNT(img_obj.obj_sample_id) AS sample_count FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE obj_classes.obj_class = 'bed' AND img_obj.img_id = '1098'",
        "retrieved": [
            7553
        ],
        "token_usage": {
            "tokens": 1168,
            "cost": 0.00026565
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'bed' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1098"
    },
    {
        "sample_id": 7486,
        "pred_sql": "SELECT img_id FROM img_rel INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE pred_classes.pred_class = 'parked on' GROUP BY img_id HAVING COUNT(DISTINCT obj1_sample_id) > 2;",
        "retrieved": [
            7596
        ],
        "token_usage": {
            "tokens": 1100,
            "cost": 0.00024150000000000002
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.IMG_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.PRED_CLASS = 'parked on' AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID GROUP BY T2.IMG_ID HAVING COUNT(T2.IMG_ID) > 2"
    },
    {
        "sample_id": 7578,
        "pred_sql": "SELECT COUNT(DISTINCT img_id) FROM img_obj WHERE x = '5' AND y = '5';",
        "retrieved": [
            7563
        ],
        "token_usage": {
            "tokens": 1049,
            "cost": 0.00021314999999999998
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5"
    },
    {
        "sample_id": 7508,
        "pred_sql": "SELECT DISTINCT img_id FROM img_rel WHERE obj1_sample_id = obj2_sample_id;",
        "retrieved": [
            7487
        ],
        "token_usage": {
            "tokens": 1055,
            "cost": 0.0002118
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"
    },
    {
        "sample_id": 7480,
        "pred_sql": "SELECT COUNT(DISTINCT img_obj.img_id) FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE obj_classes.obj_class = 'man'",
        "retrieved": [
            7479
        ],
        "token_usage": {
            "tokens": 1091,
            "cost": 0.00022889999999999998
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'man' GROUP BY T2.IMG_ID ) T"
    },
    {
        "sample_id": 7584,
        "pred_sql": "SELECT obj_classes.obj_class FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '5' AND img_obj.y = '5';",
        "retrieved": [
            7563
        ],
        "token_usage": {
            "tokens": 1097,
            "cost": 0.0002415
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 5 AND T1.Y = 5"
    },
    {
        "sample_id": 1299,
        "pred_sql": "SELECT credit.role, episode.title FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE credit.credited = 0;",
        "retrieved": [
            1257
        ],
        "token_usage": {
            "tokens": 1484,
            "cost": 0.00028874999999999994
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT DISTINCT role FROM Credit WHERE credited = 'false'"
    },
    {
        "sample_id": 1258,
        "pred_sql": "SELECT COUNT(keyword.keyword) AS keyword_count FROM keyword INNER JOIN episode ON keyword.episode_id = episode.episode_id WHERE episode.title = 'Disciple'",
        "retrieved": [
            1284
        ],
        "token_usage": {
            "tokens": 1458,
            "cost": 0.0002628
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple'"
    },
    {
        "sample_id": 1329,
        "pred_sql": "SELECT title FROM episode ORDER BY rating DESC LIMIT 3",
        "retrieved": [
            1300
        ],
        "token_usage": {
            "tokens": 1402,
            "cost": 0.0002526
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars BETWEEN 1 AND 10 GROUP BY T2.title ORDER BY CAST(SUM(T1.stars * T1.percent) AS REAL) / 100 DESC LIMIT 3"
    },
    {
        "sample_id": 1355,
        "pred_sql": "SELECT DISTINCT person.name FROM person INNER JOIN credit ON person.person_id = credit.person_id INNER JOIN award ON credit.episode_id = award.episode_id WHERE person.height_meters > 1.80 AND award.result = 'Winner';",
        "retrieved": [
            1335
        ],
        "token_usage": {
            "tokens": 1503,
            "cost": 0.00029969999999999997
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T2.height_meters > 1.80"
    },
    {
        "sample_id": 1281,
        "pred_sql": "SELECT COUNT(award.award_id) FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE episode.air_date LIKE '1998%' AND award.organization = 'International Monitor Awards' AND award.result = 'Winner'",
        "retrieved": [
            1323
        ],
        "token_usage": {
            "tokens": 1538,
            "cost": 0.00030269999999999993
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'"
    },
    {
        "sample_id": 1312,
        "pred_sql": "SELECT episode.title FROM award INNER JOIN episode ON award.episode_id = episode.episode_id GROUP BY episode.episode_id ORDER BY COUNT(award.award_id) DESC LIMIT 1;",
        "retrieved": [
            1259
        ],
        "token_usage": {
            "tokens": 1499,
            "cost": 0.00030135
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' GROUP BY T2.episode_id ORDER BY COUNT(T1.result) DESC LIMIT 1"
    },
    {
        "sample_id": 1260,
        "pred_sql": "SELECT COUNT(award.award_id) FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.year = 1999 AND award.result = 'Nominee' AND episode.episode = '20' AND episode.series = 'Law and Order' AND episode.season = '9'",
        "retrieved": [
            1323
        ],
        "token_usage": {
            "tokens": 1549,
            "cost": 0.00031065
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 20"
    },
    {
        "sample_id": 1290,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id WHERE credit.category = 'Art Department' GROUP BY episode.episode_id ORDER BY COUNT(credit.person_id) DESC LIMIT 1;",
        "retrieved": [
            1284
        ],
        "token_usage": {
            "tokens": 1575,
            "cost": 0.0003294
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.title FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Art Department' GROUP BY T2.episode_id ORDER BY COUNT(T1.category) DESC LIMIT 1"
    },
    {
        "sample_id": 1276,
        "pred_sql": "SELECT COUNT(DISTINCT person.person_id) FROM person INNER JOIN award ON person.person_id = award.person_id WHERE person.birth_country = 'Canada' AND award.year = 1999 AND award.result = 'Winner';",
        "retrieved": [
            1272
        ],
        "token_usage": {
            "tokens": 1492,
            "cost": 0.0002922
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 1999 AND T1.birth_country = 'Canada'"
    },
    {
        "sample_id": 1322,
        "pred_sql": "SELECT DISTINCT person.name FROM person JOIN award ON person.person_id = award.person_id WHERE award.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND award.award = 'Television Silver Gavel Award' AND award.result = 'Winner' AND award.year IN (SELECT year FROM award WHERE person_id = person.person_id GROUP BY year HAVING COUNT(DISTINCT year) = 2)",
        "retrieved": [
            1297
        ],
        "token_usage": {
            "tokens": 1517,
            "cost": 0.0003117
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT t3.name FROM ( SELECT DISTINCT T2.year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T2.series = 'Law and Order' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2"
    },
    {
        "sample_id": 1332,
        "pred_sql": "SELECT COUNT(credit.episode_id) AS episode_count FROM credit INNER JOIN person ON credit.person_id = person.person_id WHERE person.name = 'Jerry Orbach'",
        "retrieved": [
            1270
        ],
        "token_usage": {
            "tokens": 1523,
            "cost": 0.00029144999999999996
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Jerry Orbach'"
    },
    {
        "sample_id": 1340,
        "pred_sql": "SELECT episode.rating FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.result = 'Winner' GROUP BY episode.episode_id ORDER BY COUNT(award.award_id) DESC LIMIT 1;",
        "retrieved": [
            1282
        ],
        "token_usage": {
            "tokens": 1500,
            "cost": 0.0003015
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Winner' GROUP BY T1.episode_id ORDER BY COUNT(T2.award_id) DESC LIMIT 1"
    },
    {
        "sample_id": 1279,
        "pred_sql": "SELECT SUM(votes) * 100.0 / (SELECT SUM(votes) FROM vote WHERE episode_id = (SELECT episode_id FROM episode WHERE title = 'True North')) AS percentage FROM vote WHERE episode_id = (SELECT episode_id FROM episode WHERE title = 'True North') AND stars = 1;",
        "retrieved": [
            1259
        ],
        "token_usage": {
            "tokens": 1490,
            "cost": 0.00029235
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.stars = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North' AND T1.episode_id = 'tt0629477'"
    },
    {
        "sample_id": 1278,
        "pred_sql": "SELECT keyword.keyword FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.series = 'Shield'",
        "retrieved": [
            1247
        ],
        "token_usage": {
            "tokens": 1457,
            "cost": 0.00028109999999999995
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'"
    },
    {
        "sample_id": 1252,
        "pred_sql": "SELECT person.name, credit.role FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id INNER JOIN person ON person.person_id = credit.person_id WHERE episode.title = 'Cherished' AND credit.credited = 1",
        "retrieved": [
            1254
        ],
        "token_usage": {
            "tokens": 1497,
            "cost": 0.00028664999999999995
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'"
    },
    {
        "sample_id": 1336,
        "pred_sql": "SELECT person.name, episode.number_in_series FROM person INNER JOIN award ON person.person_id = award.person_id INNER JOIN episode ON award.episode_id = episode.episode_id WHERE award.role = 'director'",
        "retrieved": [
            1335
        ],
        "token_usage": {
            "tokens": 1480,
            "cost": 0.0002895
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'"
    },
    {
        "sample_id": 1341,
        "pred_sql": "SELECT COUNT(credit.role) FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id WHERE episode.number_in_series BETWEEN '1' AND '10' AND credit.credited = '1'",
        "retrieved": [
            1261
        ],
        "token_usage": {
            "tokens": 1502,
            "cost": 0.0002874
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.credited = 'true' AND T2.episode BETWEEN 1 AND 10"
    },
    {
        "sample_id": 1295,
        "pred_sql": "SELECT person.name FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id INNER JOIN person ON person.person_id = credit.person_id WHERE episode.series = 'Law & Order'",
        "retrieved": [
            1314
        ],
        "token_usage": {
            "tokens": 1492,
            "cost": 0.00028815
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.category = 'Cast'"
    },
    {
        "sample_id": 1311,
        "pred_sql": "SELECT credit.role FROM credit INNER JOIN person ON credit.person_id = person.person_id WHERE person.height_meters = (SELECT MAX(height_meters) FROM person)",
        "retrieved": [
            1275
        ],
        "token_usage": {
            "tokens": 1405,
            "cost": 0.00025124999999999995
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id ORDER BY T1.height_meters DESC LIMIT 1"
    },
    {
        "sample_id": 1345,
        "pred_sql": "SELECT COUNT(DISTINCT award.person_id) FROM award WHERE award.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND award.result = 'Winner'",
        "retrieved": [
            1272
        ],
        "token_usage": {
            "tokens": 1503,
            "cost": 0.0002952
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"
    },
    {
        "sample_id": 1298,
        "pred_sql": "SELECT COUNT(DISTINCT episode.episode_id) FROM episode LEFT JOIN award ON episode.episode_id = award.episode_id WHERE award.result != 'Winner' OR award.episode_id IS NULL;",
        "retrieved": [
            1323
        ],
        "token_usage": {
            "tokens": 1534,
            "cost": 0.000303
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE Result = 'Nominee'"
    },
    {
        "sample_id": 1316,
        "pred_sql": "SELECT (COUNT(DISTINCT credit.person_id) * 100.0 / (SELECT COUNT(DISTINCT person.person_id) FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'True North')) AS percentage FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'True North' AND credit.role = 'additional crew';",
        "retrieved": [
            1314
        ],
        "token_usage": {
            "tokens": 1582,
            "cost": 0.0003408
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.role = 'Additional Crew' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North'"
    },
    {
        "sample_id": 1303,
        "pred_sql": "SELECT episode.title FROM episode ORDER BY episode.rating LIMIT 3",
        "retrieved": [
            1300
        ],
        "token_usage": {
            "tokens": 1408,
            "cost": 0.00026115
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 1"
    },
    {
        "sample_id": 1331,
        "pred_sql": "SELECT COUNT(DISTINCT person.person_id) FROM person INNER JOIN award ON person.person_id = award.person_id WHERE person.birth_country = 'Canada'",
        "retrieved": [
            1272
        ],
        "token_usage": {
            "tokens": 1459,
            "cost": 0.00027554999999999995
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.birth_country = 'Canada'"
    },
    {
        "sample_id": 4910,
        "pred_sql": "SELECT current-terms.contact_form FROM current INNER JOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide WHERE current.first_name = 'Rick' AND current.last_name = 'Crawford'",
        "retrieved": [
            4817
        ],
        "token_usage": {
            "tokens": 4602,
            "cost": 0.0007541999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.contact_form FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Rick Crawford'"
    },
    {
        "sample_id": 4863,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM current WHERE wikipedia_id IS NOT NULL) * 1.0 / (SELECT COUNT(*) FROM historical WHERE wikipedia_id IS NOT NULL) AS ratio_famous_legislators;",
        "retrieved": [
            4852
        ],
        "token_usage": {
            "tokens": 4599,
            "cost": 0.0007528499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) FROM historical ) FROM current"
    },
    {
        "sample_id": 4848,
        "pred_sql": "SELECT COUNT(*) AS female_legislators FROM current WHERE gender_bio = 'female';",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4589,
            "cost": 0.0007356
        },
        "db_id": "legislator",
        "gold_sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F'"
    },
    {
        "sample_id": 4903,
        "pred_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'F'",
        "retrieved": [
            4752
        ],
        "token_usage": {
            "tokens": 4570,
            "cost": 0.0007228499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(gender_bio) FROM current WHERE gender_bio = 'F'"
    },
    {
        "sample_id": 4758,
        "pred_sql": "SELECT COUNT(*) FROM \"social-media\" WHERE instagram IS NOT NULL",
        "retrieved": [
            4853
        ],
        "token_usage": {
            "tokens": 4517,
            "cost": 0.0007122000000000001
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM \"social-media\" WHERE instagram IS NOT NULL AND instagram <> ''"
    },
    {
        "sample_id": 4905,
        "pred_sql": "SELECT current-terms.address FROM current-terms INNER JOIN current ON current-terms.bioguide = current.bioguide_id WHERE current-terms.contact_form = 'http://www.carper.senate.gov/contact/'",
        "retrieved": [
            4891
        ],
        "token_usage": {
            "tokens": 4613,
            "cost": 0.0007562999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT address FROM \"current-terms\" WHERE contact_form = 'http://www.carper.senate.gov/contact/'"
    },
    {
        "sample_id": 4850,
        "pred_sql": "SELECT COUNT(*) FROM current-terms WHERE type = 'rep'",
        "retrieved": [
            4750
        ],
        "token_usage": {
            "tokens": 4572,
            "cost": 0.0007384499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class IS NULL"
    },
    {
        "sample_id": 4875,
        "pred_sql": "SELECT current.official_full_name FROM social-media INNER JOIN current ON social-media.bioguide = current.bioguide_id WHERE social-media.facebook IS NOT NULL AND social-media.instagram IS NOT NULL AND social-media.twitter IS NOT NULL AND social-media.youtube IS NOT NULL",
        "retrieved": [
            4750
        ],
        "token_usage": {
            "tokens": 4620,
            "cost": 0.0007614
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL"
    },
    {
        "sample_id": 4737,
        "pred_sql": "SELECT current.official_full_name FROM current WHERE current.cspan_id IS NULL OR current.cspan_id = ''",
        "retrieved": [
            4750
        ],
        "token_usage": {
            "tokens": 4593,
            "cost": 0.0007429499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''"
    },
    {
        "sample_id": 4816,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN ct.type != 'sen' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(ct.type) AS percentage_not_senators FROM current AS c INNER JOIN \"current-terms\" AS ct ON c.bioguide_id = ct.bioguide WHERE STRFTIME('%Y', c.birthday_bio) < '1975'",
        "retrieved": [
            4844
        ],
        "token_usage": {
            "tokens": 4791,
            "cost": 0.0008315999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.class IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE CAST(T1.birthday_bio AS DATE) <= 1975"
    },
    {
        "sample_id": 4815,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN \"current-terms\".type = 'sen' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(\"current-terms\".type) AS percentage_senators_born_1964 FROM current INNER JOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide WHERE STRFTIME('%Y', current.birthday_bio) = '1964'",
        "retrieved": [
            4844
        ],
        "token_usage": {
            "tokens": 4775,
            "cost": 0.0008224499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.class IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio LIKE '%1964%'"
    },
    {
        "sample_id": 4874,
        "pred_sql": "SELECT current-terms.party, COUNT(*) AS num_legislators FROM current INNER JOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide WHERE current.religion_bio = 'Baptist' GROUP BY current-terms.party ORDER BY num_legislators DESC LIMIT 1;",
        "retrieved": [
            4844
        ],
        "token_usage": {
            "tokens": 4730,
            "cost": 0.00079725
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.party FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Baptist' GROUP BY T2.party ORDER BY COUNT(T2.party) DESC LIMIT 1"
    },
    {
        "sample_id": 4779,
        "pred_sql": "SELECT current.official_full_name FROM \"current-terms\" INNER JOIN current AS T2 ON T2.bioguide_id = current-terms.bioguide WHERE current-terms.state = 'VA'",
        "retrieved": [
            4750
        ],
        "token_usage": {
            "tokens": 4634,
            "cost": 0.0007742999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'VA' GROUP BY T1.official_full_name"
    },
    {
        "sample_id": 4873,
        "pred_sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Jewish' AND bioguide_id NOT IN (SELECT bioguide FROM \"social-media\" WHERE facebook IS NOT NULL)",
        "retrieved": [
            4853
        ],
        "token_usage": {
            "tokens": 4587,
            "cost": 0.0007537499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(T3.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NULL GROUP BY T1.bioguide_id ) T3"
    },
    {
        "sample_id": 4829,
        "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM current WHERE birthday_bio LIKE '1960-%'",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4646,
            "cost": 0.00076125
        },
        "db_id": "legislator",
        "gold_sql": "SELECT official_full_name FROM current WHERE birthday_bio LIKE '1960%'"
    },
    {
        "sample_id": 4865,
        "pred_sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL",
        "retrieved": [
            4755
        ],
        "token_usage": {
            "tokens": 4605,
            "cost": 0.00073755
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(bioguide_id) FROM historical WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL"
    },
    {
        "sample_id": 4775,
        "pred_sql": "SELECT social-media.youtube_id FROM social-media INNER JOIN current ON social-media.bioguide = current.bioguide_id WHERE current.nickname_name = 'RepWassermanSchultz'",
        "retrieved": [
            4744
        ],
        "token_usage": {
            "tokens": 4620,
            "cost": 0.0007627499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT youtube_id FROM \"social-media\" WHERE youtube = 'RepWassermanSchultz'"
    },
    {
        "sample_id": 4792,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS percentage FROM \"current-terms\" WHERE type = 'sen'",
        "retrieved": [
            4844
        ],
        "token_usage": {
            "tokens": 4714,
            "cost": 0.0007880999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"historical-terms\" WHERE type = 'sen'"
    },
    {
        "sample_id": 4794,
        "pred_sql": "SELECT SUM(julianday(T2.end) - julianday(T2.start)) / 365 AS total_years FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'",
        "retrieved": [
            4876
        ],
        "token_usage": {
            "tokens": 4701,
            "cost": 0.0007802999999999998
        },
        "db_id": "legislator",
        "gold_sql": "SELECT SUM(CAST(T2.END - T2.start AS DATE)) AS sum FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'"
    },
    {
        "sample_id": 4839,
        "pred_sql": "SELECT current.party, current-terms.state FROM current INNER JOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide WHERE current.opensecrets_id = 'N00003689' AND current.thomas_id = '186'",
        "retrieved": [
            4834
        ],
        "token_usage": {
            "tokens": 4683,
            "cost": 0.0007838999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = 186 GROUP BY T2.party, T2.state"
    },
    {
        "sample_id": 4743,
        "pred_sql": "SELECT COUNT(*) FROM current INNER JOIN social-media ON current.bioguide_id = social-media.bioguide WHERE social-media.instagram IS NULL;",
        "retrieved": [
            4755
        ],
        "token_usage": {
            "tokens": 4627,
            "cost": 0.0007516499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.instagram IS NULL"
    },
    {
        "sample_id": 4751,
        "pred_sql": "SELECT current-terms.state FROM \"current-terms\" INNER JOIN current AS T2 ON T2.bioguide_id = current-terms.bioguide WHERE current.official_full_name = 'Sherrod Brown' AND current-terms.start = '1993-01-05'",
        "retrieved": [
            4893
        ],
        "token_usage": {
            "tokens": 4702,
            "cost": 0.0007989
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.state FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'"
    },
    {
        "sample_id": 4789,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN historical.gender_bio = 'Male' THEN historical.bioguide_id ELSE NULL END) AS FLOAT) / COUNT(historical.bioguide_id) AS male_ratio, CAST(COUNT(CASE WHEN historical.gender_bio = 'Female' THEN historical.bioguide_id ELSE NULL END) AS FLOAT) / COUNT(historical.bioguide_id) AS female_ratio FROM historical",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4726,
            "cost": 0.0008146499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical"
    },
    {
        "sample_id": 4746,
        "pred_sql": "SELECT social-media.facebook FROM current INNER JOIN \"social-media\" AS T2 ON current.bioguide_id = T2.bioguide WHERE NOT current.wikipedia_id IS NULL AND current.birthday_bio = (SELECT MIN(birthday_bio) FROM current)",
        "retrieved": [
            4891
        ],
        "token_usage": {
            "tokens": 4667,
            "cost": 0.0007914
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id ORDER BY T1.birthday_bio LIMIT 1"
    },
    {
        "sample_id": 4748,
        "pred_sql": "SELECT COUNT(*) FROM \"current-terms\" WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Roger' AND last_name = 'Wicker') AND type = 'rep'",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4652,
            "cost": 0.0007626
        },
        "db_id": "legislator",
        "gold_sql": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''"
    },
    {
        "sample_id": 4811,
        "pred_sql": "SELECT current.title FROM current WHERE current.birthday_bio = '1942-02-20'",
        "retrieved": [
            4817
        ],
        "token_usage": {
            "tokens": 4592,
            "cost": 0.0007459499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.title FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1942-02-20' GROUP BY T2.title"
    },
    {
        "sample_id": 4797,
        "pred_sql": "SELECT current.official_full_name, current.nickname_name FROM current INNER JOIN \"social-media\" ON current.bioguide_id = \"social-media\".bioguide WHERE \"social-media\".instagram IS NOT NULL AND current.thomas_id < 1000",
        "retrieved": [
            4853
        ],
        "token_usage": {
            "tokens": 4657,
            "cost": 0.0007871999999999998
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.official_full_name, T1.nickname_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.instagram IS NOT NULL AND T1.thomas_id < 1000"
    },
    {
        "sample_id": 4771,
        "pred_sql": "SELECT current-terms.district FROM current-terms INNER JOIN current ON current.bioguide_id = current-terms.bioguide WHERE current.first_name = 'Chris' AND current.last_name = 'Van Hollen'",
        "retrieved": [
            4832
        ],
        "token_usage": {
            "tokens": 4665,
            "cost": 0.0007911
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.district FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Chris Van Hollen' AND T2.district IS NOT NULL GROUP BY T2.district"
    },
    {
        "sample_id": 4825,
        "pred_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'",
        "retrieved": [
            4752
        ],
        "token_usage": {
            "tokens": 4564,
            "cost": 0.00071925
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'"
    },
    {
        "sample_id": 4799,
        "pred_sql": "SELECT ct.party, ct.state FROM \"current-terms\" AS ct INNER JOIN current AS c ON ct.bioguide = c.bioguide_id WHERE c.birthday_bio LIKE '1738%' AND ct.type = 'rep'",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4753,
            "cost": 0.0008177999999999998
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.party, T1.state FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.house_history_id IS NOT NULL AND T2.birthday_bio LIKE '%1738%'"
    },
    {
        "sample_id": 4756,
        "pred_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'",
        "retrieved": [
            4752
        ],
        "token_usage": {
            "tokens": 4567,
            "cost": 0.0007201499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'"
    },
    {
        "sample_id": 4866,
        "pred_sql": "SELECT COUNT(*) FROM \"current-terms\" INNER JOIN current ON current.bioguide_id = \"current-terms\".bioguide WHERE \"current-terms\".class = '1' AND \"current-terms\".party = 'Republican'",
        "retrieved": [
            4762
        ],
        "token_usage": {
            "tokens": 4659,
            "cost": 0.0007802999999999998
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class = 1 AND party = 'Republican'"
    },
    {
        "sample_id": 4879,
        "pred_sql": "SELECT COUNT(*) FROM \"current-terms\" INNER JOIN current ON current.bioguide_id = \"current-terms\".bioguide WHERE \"current-terms\".party = 'Federalist' AND current.first_name = 'Benjamin'",
        "retrieved": [
            4832
        ],
        "token_usage": {
            "tokens": 4627,
            "cost": 0.0007678499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T2.party = 'Federalist' AND T2.type = 'rep' GROUP BY T1.bioguide_id ) AS T"
    },
    {
        "sample_id": 4880,
        "pred_sql": "SELECT COUNT(subquery_q0.bioguide) FROM (SELECT current.bioguide_id FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' GROUP BY T2.bioguide HAVING (julianday('now') - julianday(MIN(T2.start))) / 365.25 >= 10) AS subquery_q0;",
        "retrieved": [
            4752
        ],
        "token_usage": {
            "tokens": 4791,
            "cost": 0.0008514
        },
        "db_id": "legislator",
        "gold_sql": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.\"end\") AS int) - CAST(strftime('%Y', T2.start) AS int)) > 10 THEN 1 ELSE 0 END AS result FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3"
    },
    {
        "sample_id": 4892,
        "pred_sql": "SELECT COUNT(*) FROM \"current-terms\" WHERE bioguide = (SELECT bioguide_id FROM current ORDER BY birthday_bio ASC LIMIT 1)",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4619,
            "cost": 0.0007454999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(T2.bioguide) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = ( SELECT MIN(birthday_bio) FROM current )"
    },
    {
        "sample_id": 4869,
        "pred_sql": "SELECT official_full_name FROM current ORDER BY birthday_bio ASC LIMIT 1;",
        "retrieved": [
            4817
        ],
        "token_usage": {
            "tokens": 4587,
            "cost": 0.0007461
        },
        "db_id": "legislator",
        "gold_sql": "SELECT first_name, last_name FROM historical ORDER BY birthday_bio LIMIT 1"
    },
    {
        "sample_id": 4584,
        "pred_sql": "SELECT COUNT(answer.userid) FROM answer JOIN question ON answer.questionid = question.questionid WHERE question.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND answer.answertext = 'No' AND answer.surveyid = 2014;",
        "retrieved": [
            4571
        ],
        "token_usage": {
            "tokens": 791,
            "cost": 0.00019604999999999997
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND T2.SurveyID = 2014 AND T2.AnswerText LIKE 'NO'"
    },
    {
        "sample_id": 4612,
        "pred_sql": "SELECT (SELECT COUNT(DISTINCT T1.userid) FROM answer AS T1 INNER JOIN survey AS T2 ON T1.surveyid = T2.surveyid WHERE T2.description = 'mental health survey for 2017') * 1.0 / (SELECT COUNT(DISTINCT T1.userid) FROM answer AS T1 INNER JOIN survey AS T2 ON T1.surveyid = T2.surveyid WHERE T2.description = 'mental health survey for 2018') AS ratio;",
        "retrieved": [
            4608
        ],
        "token_usage": {
            "tokens": 977,
            "cost": 0.00030135
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT CAST(COUNT(T1.UserID) AS REAL) / ( SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018' ) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2017'"
    },
    {
        "sample_id": 4602,
        "pred_sql": "SELECT COUNT(DISTINCT T1.userid) FROM answer AS T1 INNER JOIN survey AS T2 ON T1.surveyid = T2.surveyid WHERE T2.description = 'mental health survey for 2016'",
        "retrieved": [
            4608
        ],
        "token_usage": {
            "tokens": 769,
            "cost": 0.0001824
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2016'"
    },
    {
        "sample_id": 4613,
        "pred_sql": "SELECT (COUNT(T2.userid) * 100.0 / (SELECT COUNT(DISTINCT userid) FROM answer WHERE surveyid = 2016)) AS percentage FROM question AS T1 INNER JOIN answer AS T2 ON T1.questionid = T2.questionid WHERE T2.surveyid = 2016 AND T1.questiontext LIKE '%mental health disorder%' AND T2.answertext = 'yes'",
        "retrieved": [
            4591
        ],
        "token_usage": {
            "tokens": 841,
            "cost": 0.00021434999999999998
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SurveyID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 32 AND T1.SurveyID = 2016"
    },
    {
        "sample_id": 4587,
        "pred_sql": "SELECT answer.answertext FROM answer INNER JOIN question ON answer.questionid = question.questionid INNER JOIN survey ON answer.surveyid = survey.surveyid WHERE question.questiontext = 'Any additional notes or comments' AND survey.surveyid = '2014' AND answer.answertext IS NOT NULL;",
        "retrieved": [
            4590
        ],
        "token_usage": {
            "tokens": 823,
            "cost": 0.00020625
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Any additional notes or comments' AND T2.SurveyID = 2014 AND T2.AnswerText <> -1"
    },
    {
        "sample_id": 4619,
        "pred_sql": "SELECT COUNT(DISTINCT T1.userid) FROM answer AS T1 INNER JOIN survey AS T2 ON T1.surveyid = T2.surveyid INNER JOIN question AS T3 ON T1.questionid = T3.questionid WHERE T2.description = 'mental health survey' AND T1.answertext = 'Substance Use Disorder'",
        "retrieved": [
            4586
        ],
        "token_usage": {
            "tokens": 794,
            "cost": 0.00019964999999999997
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(AnswerText) FROM Answer WHERE AnswerText LIKE 'Substance Use Disorder'"
    },
    {
        "sample_id": 4603,
        "pred_sql": "SELECT answer.answertext, COUNT(answer.answertext) AS answer_count FROM question INNER JOIN answer ON question.questionid = answer.questionid WHERE question.questiontext = 'What country do you work in?' GROUP BY answer.answertext ORDER BY answer_count DESC LIMIT 1;",
        "retrieved": [
            4593
        ],
        "token_usage": {
            "tokens": 808,
            "cost": 0.00019679999999999999
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'What country do you work in?' GROUP BY T1.AnswerText ORDER BY COUNT(T1.AnswerText) DESC LIMIT 1"
    },
    {
        "sample_id": 4592,
        "pred_sql": "SELECT COUNT(DISTINCT answer.userid) AS user_count \nFROM answer \nINNER JOIN question ON answer.questionid = question.questionid \nWHERE answer.answertext = 'Yes' \nAND question.questiontext = 'Have you had a mental health disorder in the past?' \nAND answer.surveyid IN (2016, 2017, 2018)",
        "retrieved": [
            4601
        ],
        "token_usage": {
            "tokens": 854,
            "cost": 0.00022304999999999997
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2016, 2017, 2018) AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'"
    },
    {
        "sample_id": 4600,
        "pred_sql": "SELECT COUNT(DISTINCT survey.surveyid) FROM answer INNER JOIN question ON answer.questionid = question.questionid WHERE question.questiontext = 'What country do you work in?'",
        "retrieved": [
            4599
        ],
        "token_usage": {
            "tokens": 759,
            "cost": 0.00017774999999999996
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(DISTINCT T1.QuestionID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T2.questiontext = 'What country do you work in?'"
    },
    {
        "sample_id": 4588,
        "pred_sql": "SELECT DISTINCT q.questiontext FROM question q INNER JOIN answer a1 ON q.questionid = a1.questionid INNER JOIN survey s1 ON a1.surveyid = s1.surveyid WHERE s1.surveyid = '2014' INTERSECT SELECT DISTINCT q.questiontext FROM question q INNER JOIN answer a2 ON q.questionid = a2.questionid INNER JOIN survey s2 ON a2.surveyid = s2.surveyid WHERE s2.surveyid = '2016'",
        "retrieved": [
            4590
        ],
        "token_usage": {
            "tokens": 836,
            "cost": 0.00021719999999999997
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT T1.questiontext FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2014, 2016) GROUP BY T1.questiontext"
    },
    {
        "sample_id": 8252,
        "pred_sql": "SELECT city.name FROM city INNER JOIN lake ON city.country = lake.country WHERE lake.altitude = (SELECT MAX(altitude) FROM lake)",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2687,
            "cost": 0.00046334999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.City FROM lake AS T1 LEFT JOIN located AS T2 ON T2.Lake = T1.Name ORDER BY T1.Altitude DESC LIMIT 1"
    },
    {
        "sample_id": 8296,
        "pred_sql": "SELECT (SELECT MAX(length) FROM borders WHERE country1 = 'USA' OR country2 = 'USA') / (SELECT MIN(length) FROM borders WHERE country1 = 'USA' OR country2 = 'USA') AS border_ratio;",
        "retrieved": [
            8291
        ],
        "token_usage": {
            "tokens": 2696,
            "cost": 0.00048314999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T1.Name = 'United States'"
    },
    {
        "sample_id": 8245,
        "pred_sql": "SELECT country.name FROM country INNER JOIN economy ON country.code = economy.country ORDER BY economy.gdp DESC LIMIT 1",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2646,
            "cost": 0.00044639999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1"
    },
    {
        "sample_id": 8354,
        "pred_sql": "SELECT AVG(country.area) AS average_area FROM country INNER JOIN encompasses ON country.code = encompasses.country INNER JOIN continent ON encompasses.continent = continent.name WHERE continent.name = 'Asia'",
        "retrieved": [
            8281
        ],
        "token_usage": {
            "tokens": 2695,
            "cost": 0.00046814999999999997
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT AVG(Area) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia'"
    },
    {
        "sample_id": 8370,
        "pred_sql": "SELECT city.population FROM city INNER JOIN country ON city.country = country.code INNER JOIN politics ON country.code = politics.country WHERE country.capital = city.name AND politics.independence = '1947-08-15';",
        "retrieved": [
            8285
        ],
        "token_usage": {
            "tokens": 2669,
            "cost": 0.0004615499999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T3.Population FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN city AS T3 ON T3.Name = T2.Capital WHERE T1.Independence = '1947-08-15'"
    },
    {
        "sample_id": 8310,
        "pred_sql": "SELECT SUM(economy.gdp) FROM economy INNER JOIN encompasses ON economy.country = encompasses.country WHERE encompasses.continent = 'Europe'",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2659,
            "cost": 0.0004452
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT SUM(T4.GDP) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN economy AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe'"
    },
    {
        "sample_id": 8231,
        "pred_sql": "SELECT SUM(population) FROM city WHERE country = (SELECT code FROM country WHERE name = 'Turks and Caicos Islands') AND country IN (SELECT country FROM encompasses WHERE continent = 'Africa')",
        "retrieved": [
            8249
        ],
        "token_usage": {
            "tokens": 2696,
            "cost": 0.00046829999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Name = 'Turks and Caicos Islands'"
    },
    {
        "sample_id": 8225,
        "pred_sql": "SELECT country.name FROM ethnicgroup INNER JOIN country AS T2 ON ethnicgroup.country = T2.code WHERE ethnicgroup.name = 'African' AND ethnicgroup.percentage = 100",
        "retrieved": [
            8218
        ],
        "token_usage": {
            "tokens": 2676,
            "cost": 0.0004607999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Percentage = 100 AND T1.Name = 'African'"
    },
    {
        "sample_id": 8456,
        "pred_sql": "SELECT geo_mountain.type, geo_mountain.province, geo_mountain.country FROM geo_mountain INNER JOIN mountain ON geo_mountain.mountain = mountain.name WHERE mountain.name = 'Ampato'",
        "retrieved": [
            8342
        ],
        "token_usage": {
            "tokens": 2673,
            "cost": 0.00045989999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Type, T3.Name, T4.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T3.Country = T4.Code WHERE T1.Name = 'Ampato'"
    },
    {
        "sample_id": 8309,
        "pred_sql": "SELECT country1, country2 FROM borders ORDER BY length ASC LIMIT 1;",
        "retrieved": [
            8244
        ],
        "token_usage": {
            "tokens": 2672,
            "cost": 0.00046514999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length ASC LIMIT 1"
    },
    {
        "sample_id": 8458,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country) AS percentage_independent_nations,\n       (SELECT name FROM country WHERE independence IS NOT NULL AND independence > '1993-01-01' AND government = 'parliamentary' LIMIT 3) AS three_parliamentary_democracies\nFROM politics\nWHERE independence IS NOT NULL AND independence > '1993-01-01' AND country IN (SELECT country FROM politics WHERE government = 'parliamentary');",
        "retrieved": [
            8218
        ],
        "token_usage": {
            "tokens": 2793,
            "cost": 0.0005229
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT SUM(IIF(government = 'parliamentary democracy', 1, 0)) , CAST(SUM(IIF(government = 'parliamentary democracy', 1, 0)) AS REAL) * 100 / COUNT(*) FROM politics AS t1 WHERE STRFTIME('%Y', independence) >= '1993'"
    },
    {
        "sample_id": 8247,
        "pred_sql": "SELECT country.capital FROM country INNER JOIN economy ON country.code = economy.country WHERE economy.inflation < '2'",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2653,
            "cost": 0.00044655
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2"
    },
    {
        "sample_id": 8262,
        "pred_sql": "SELECT COUNT(DISTINCT organization.name) FROM organization INNER JOIN language ON organization.country = language.country WHERE language.name = 'Bosnian'",
        "retrieved": [
            8315
        ],
        "token_usage": {
            "tokens": 2674,
            "cost": 0.00045105
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T2.Name) FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Bosnian'"
    },
    {
        "sample_id": 8274,
        "pred_sql": "SELECT country.name FROM country INNER JOIN (SELECT country1, COUNT(country2) AS neighbor_count FROM borders GROUP BY country1) AS neighbor_counts ON country.code = neighbor_counts.country1 ORDER BY neighbor_count DESC LIMIT 1;",
        "retrieved": [
            8271
        ],
        "token_usage": {
            "tokens": 2735,
            "cost": 0.0004988999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1"
    },
    {
        "sample_id": 8224,
        "pred_sql": "SELECT country.name, ethnicgroup.name, ethnicgroup.percentage \nFROM country \nJOIN ethnicgroup ON country.code = ethnicgroup.country \nWHERE ethnicgroup.percentage = (SELECT MAX(percentage) FROM ethnicgroup AS T2 WHERE T2.country = ethnicgroup.country) \nORDER BY country.name;",
        "retrieved": [
            8406
        ],
        "token_usage": {
            "tokens": 2744,
            "cost": 0.00048719999999999997
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage"
    },
    {
        "sample_id": 8236,
        "pred_sql": "SELECT country.name, population.population, population.population_growth FROM country INNER JOIN population ON country.code = population.country WHERE population.population_growth < 0;",
        "retrieved": [
            8315
        ],
        "token_usage": {
            "tokens": 2707,
            "cost": 0.00046905
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T1.Population, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth < 0"
    },
    {
        "sample_id": 8464,
        "pred_sql": "SELECT abbreviation, name, established FROM organization WHERE city = 'Paris' ORDER BY established ASC LIMIT 1;",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2686,
            "cost": 0.0004722
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Abbreviation, Name, Established FROM organization WHERE City = 'Paris' ORDER BY Established ASC LIMIT 1"
    },
    {
        "sample_id": 8408,
        "pred_sql": "SELECT geo_river.province, geo_river.river FROM geo_river INNER JOIN river ON geo_river.river = river.name GROUP BY geo_river.river HAVING COUNT(DISTINCT geo_river.country) > 1;",
        "retrieved": [
            8342
        ],
        "token_usage": {
            "tokens": 2686,
            "cost": 0.00046724999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT River, GROUP_CONCAT(Province) FROM geo_river GROUP BY River HAVING COUNT(DISTINCT Country) > 1"
    },
    {
        "sample_id": 8505,
        "pred_sql": "SELECT country.name, politics.independence FROM country INNER JOIN politics ON country.code = politics.country WHERE politics.government = 'parliamentary democracy' AND politics.independence BETWEEN '1950-01-01' AND '1999-12-31';",
        "retrieved": [
            8285
        ],
        "token_usage": {
            "tokens": 2698,
            "cost": 0.0004789499999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT * FROM politics WHERE STRFTIME('%Y', Independence) BETWEEN '1950' AND '1999' AND Government = 'parliamentary democracy'"
    },
    {
        "sample_id": 8407,
        "pred_sql": "SELECT desert.name FROM desert WHERE desert.name NOT IN (SELECT geo_desert.desert FROM geo_desert GROUP BY geo_desert.desert HAVING COUNT(DISTINCT geo_desert.country) = 1)",
        "retrieved": [
            8364
        ],
        "token_usage": {
            "tokens": 2682,
            "cost": 0.00047249999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Desert FROM geo_desert GROUP BY Desert HAVING COUNT(DISTINCT Country) > 1"
    },
    {
        "sample_id": 8462,
        "pred_sql": "SELECT organization.name FROM organization WHERE city = 'London'",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2602,
            "cost": 0.0004262999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Name FROM organization WHERE City = 'London'"
    },
    {
        "sample_id": 8331,
        "pred_sql": "SELECT mountain.name, mountain.height FROM mountain WHERE mountain.mountains = 'Himalaya' ORDER BY mountain.height DESC LIMIT 1;",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2705,
            "cost": 0.00046425
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Name, Height FROM mountain WHERE Mountains = 'Himalaya' ORDER BY Height DESC LIMIT 1"
    },
    {
        "sample_id": 8416,
        "pred_sql": "SELECT geo_river.name FROM geo_river INNER JOIN river ON geo_river.river = river.name WHERE river.river = 'Donau' AND river.length > 500 AND geo_river.country = 'Slovenia'",
        "retrieved": [
            8342
        ],
        "token_usage": {
            "tokens": 2691,
            "cost": 0.00046845
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.River FROM country AS T1 INNER JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Slovenia' AND T2.River IN ( SELECT NAME FROM river WHERE Length > 500 AND River = 'Donau' )"
    },
    {
        "sample_id": 8237,
        "pred_sql": "SELECT country.name, population.infant_mortality FROM country INNER JOIN population ON country.code = population.country WHERE country.area BETWEEN 500000 AND 1000000;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2738,
            "cost": 0.00047999999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Area BETWEEN 500000 AND 1000000"
    },
    {
        "sample_id": 8415,
        "pred_sql": "SELECT DISTINCT country.name FROM country INNER JOIN city ON country.code = city.country INNER JOIN ismember ON country.code = ismember.country WHERE city.population BETWEEN 50000 AND 300000 AND ismember.established BETWEEN '1991-03-01' AND '1991-04-30' AND ismember.organization = 'EBRD';",
        "retrieved": [
            8249
        ],
        "token_usage": {
            "tokens": 2864,
            "cost": 0.000552
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Country FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country INNER JOIN city AS T4 ON T4.Country = T3.Country WHERE T3.Abbreviation = 'EBRD' AND T4.Population BETWEEN 50000 AND 300000 AND T3.Established BETWEEN '1991-01-31' AND '1991-04-30'"
    },
    {
        "sample_id": 8333,
        "pred_sql": "SELECT name FROM mountain WHERE height BETWEEN 2000 AND 4000;",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2668,
            "cost": 0.00044025
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Name FROM mountain WHERE Type = 'volcano' AND Height BETWEEN 2000 AND 4000"
    },
    {
        "sample_id": 8313,
        "pred_sql": "SELECT country.name FROM country INNER JOIN encompasses AS T2 ON country.code = T2.country INNER JOIN continent AS T3 ON T3.name = T2.continent INNER JOIN population AS T4 ON T4.country = country.code WHERE T3.name = 'Europe' AND T4.population_growth > 3",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2737,
            "cost": 0.0004802999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Country FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Population_Growth > 0.03"
    },
    {
        "sample_id": 8433,
        "pred_sql": "SELECT (SELECT population FROM country WHERE name = 'United Kingdom') - (SELECT population FROM country WHERE name = 'Italy') AS population_gap;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2681,
            "cost": 0.00045029999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT MAX(Population) - MIN(Population) FROM country WHERE Name = 'United Kingdom' OR Name = 'Italy'"
    },
    {
        "sample_id": 8390,
        "pred_sql": "SELECT COUNT(*) FROM city WHERE country = 'JP';",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2624,
            "cost": 0.00042599999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Japan'"
    },
    {
        "sample_id": 8402,
        "pred_sql": "SELECT CAST(economy.gdp AS REAL) / CAST(country.population AS REAL) AS gdp_per_capita FROM country INNER JOIN economy ON country.code = economy.country WHERE country.name = 'Switzerland'",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2692,
            "cost": 0.00046544999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.GDP / T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'"
    },
    {
        "sample_id": 8306,
        "pred_sql": "SELECT COUNT(DISTINCT T1.code) FROM country AS T1 INNER JOIN economy AS T2 ON T1.code = T2.country INNER JOIN geo_mountain AS T3 ON T1.code = T3.country WHERE T2.gdp > 1000000 AND T3.height > 1000;",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2747,
            "cost": 0.0004912499999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T1.Code INNER JOIN mountain AS T4 ON T4.Name = T2.Mountain WHERE T3.GDP > 1000000 AND T4.Height > 1000"
    },
    {
        "sample_id": 8382,
        "pred_sql": "SELECT SUM(sea.depth) FROM sea WHERE sea.name IN (SELECT geo_sea.sea FROM geo_mountain WHERE geo_mountain.mountain = 'Kerinci')",
        "retrieved": [
            8291
        ],
        "token_usage": {
            "tokens": 2639,
            "cost": 0.00044985
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T4.Sea) FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island INNER JOIN islandIn AS T4 ON T4.Island = T3.Name WHERE T1.Name = 'Kerinci'"
    },
    {
        "sample_id": 8371,
        "pred_sql": "SELECT SUM(population) AS total_afro_asian_population FROM ethnicgroup WHERE country = (SELECT code FROM country WHERE continent = 'Asia' AND government = 'monarchy' ORDER BY population DESC LIMIT 1) AND name = 'Afro-Asian';",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2708,
            "cost": 0.0004718999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T5.Percentage * T6.Population FROM ethnicGroup AS T5 INNER JOIN country AS T6 ON T5.Country = T6.Code WHERE Country = ( SELECT T3.Code FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN politics AS T4 ON T4.Country = T3.Code WHERE T4.Government = 'monarchy' AND T1.Name = 'Asia' ORDER BY T3.Population DESC LIMIT 1 ) AND T5.Name = 'Afro-Asian'"
    },
    {
        "sample_id": 8365,
        "pred_sql": "SELECT COUNT(lake.name) AS lake_count FROM lake INNER JOIN located ON lake.name = located.lake INNER JOIN city ON located.city = city.name INNER JOIN country ON city.country = country.code INNER JOIN politics ON country.code = politics.country WHERE politics.government = 'republic' AND country.population = (SELECT population FROM country ORDER BY population DESC LIMIT 1 OFFSET 3) AND country.code IN (SELECT country FROM encompasses WHERE continent = 'Africa');",
        "retrieved": [
            8218
        ],
        "token_usage": {
            "tokens": 2800,
            "cost": 0.0005320500000000001
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(*) FROM geo_lake WHERE Country = ( SELECT T4.Code FROM ( SELECT T2.Code, T2.Population FROM encompasses AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN politics AS T3 ON T1.Country = T3.Country WHERE T1.Continent = 'Africa' AND T1.Percentage = 100 AND T3.Government = 'republic' ORDER BY Population DESC LIMIT 4 ) AS T4 ORDER BY population ASC LIMIT 1 )"
    },
    {
        "sample_id": 8451,
        "pred_sql": "SELECT organization.name FROM organization INNER JOIN ismember ON organization.abbreviation = ismember.organization WHERE ismember.type = 'associated member'",
        "retrieved": [
            8271
        ],
        "token_usage": {
            "tokens": 2640,
            "cost": 0.00044054999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT NAME FROM organization WHERE country IN ( SELECT country FROM politics WHERE dependent != '' )"
    },
    {
        "sample_id": 8424,
        "pred_sql": "SELECT sea.name FROM sea WHERE sea.depth = (SELECT MAX(depth) FROM sea)",
        "retrieved": [
            8291
        ],
        "token_usage": {
            "tokens": 2571,
            "cost": 0.00041039999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Sea2 FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = ( SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1 )"
    },
    {
        "sample_id": 8229,
        "pred_sql": "SELECT politics.independence FROM country INNER JOIN politics AS T2 ON country.code = T2.country WHERE country.name = 'Bulgaria'",
        "retrieved": [
            8285
        ],
        "token_usage": {
            "tokens": 2641,
            "cost": 0.00045285
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'"
    },
    {
        "sample_id": 8263,
        "pred_sql": "SELECT MAX(population.infant_mortality) FROM country INNER JOIN economy ON country.code = economy.country INNER JOIN population ON population.country = country.code WHERE economy.inflation < 3;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2737,
            "cost": 0.00048074999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT MAX(T2.Infant_Mortality) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3"
    },
    {
        "sample_id": 8475,
        "pred_sql": "SELECT organization.name, COUNT(ismember.country) AS member_count FROM organization JOIN ismember ON organization.country = ismember.country GROUP BY organization.name ORDER BY member_count DESC LIMIT 1;",
        "retrieved": [
            8406
        ],
        "token_usage": {
            "tokens": 2711,
            "cost": 0.00047459999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1"
    },
    {
        "sample_id": 8491,
        "pred_sql": "SELECT name FROM organization WHERE country = 'SA' ORDER BY established DESC LIMIT 1;",
        "retrieved": [
            8501
        ],
        "token_usage": {
            "tokens": 2676,
            "cost": 0.0004580999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Saudi Arabia' ORDER BY T1.Established DESC LIMIT 1"
    },
    {
        "sample_id": 8473,
        "pred_sql": "SELECT country, COUNT(organization) AS membership_count FROM ismember GROUP BY country ORDER BY membership_count ASC LIMIT 1;",
        "retrieved": [
            8501
        ],
        "token_usage": {
            "tokens": 2655,
            "cost": 0.00044819999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT country FROM organization WHERE country IN ( SELECT Code FROM country ) GROUP BY country ORDER BY COUNT(NAME) LIMIT 1"
    },
    {
        "sample_id": 8360,
        "pred_sql": "SELECT government FROM politics WHERE country = (SELECT country FROM economy ORDER BY CAST(inflation AS FLOAT) DESC LIMIT 1)",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2704,
            "cost": 0.0004712999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Government FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country ORDER BY T2.Inflation DESC LIMIT 1"
    },
    {
        "sample_id": 8339,
        "pred_sql": "SELECT river.name, mountain.name FROM river INNER JOIN geo_river ON river.name = geo_river.river INNER JOIN located ON located.river = geo_river.river INNER JOIN geo_mountain ON geo_mountain.country = located.country WHERE located.city = 'Lorraine'",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2718,
            "cost": 0.00046934999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.SourceLongitude, T1.SourceLatitude, T1.SourceAltitude FROM river AS T1 INNER JOIN geo_river AS T2 ON T2.River = T1.Name WHERE T2.Province = 'Lorraine'"
    },
    {
        "sample_id": 8487,
        "pred_sql": "SELECT country.name FROM ethnicgroup INNER JOIN country AS T2 ON ethnicgroup.country = T2.code WHERE ethnicgroup.name = 'Chinese' AND ethnicgroup.percentage > 70",
        "retrieved": [
            8218
        ],
        "token_usage": {
            "tokens": 2685,
            "cost": 0.00046439999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T1.Population * T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Chinese' AND T2.Percentage > 70"
    },
    {
        "sample_id": 8470,
        "pred_sql": "SELECT country, type FROM ismember WHERE organization = 'Islamic Development Bank';",
        "retrieved": [],
        "token_usage": {
            "tokens": 2579,
            "cost": 0.00043994999999999993
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Country, T2.Type FROM organization AS T1 INNER JOIN isMember AS T2 ON T1.Abbreviation = T2.Organization INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Name = 'Islamic Development Bank'"
    },
    {
        "sample_id": 8477,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM organization WHERE country = 'USA') AS percentage FROM organization WHERE city = 'Washington' AND country = 'USA';",
        "retrieved": [
            8249
        ],
        "token_usage": {
            "tokens": 2723,
            "cost": 0.0004808999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.City = 'Washington' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.City) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T2.Country = 'USA'"
    },
    {
        "sample_id": 8288,
        "pred_sql": "SELECT country.capital FROM country INNER JOIN ethnicgroup ON country.code = ethnicgroup.country WHERE ethnicgroup.name = 'Malay' ORDER BY ethnicgroup.percentage DESC LIMIT 1;",
        "retrieved": [
            8271
        ],
        "token_usage": {
            "tokens": 2733,
            "cost": 0.0004976999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Malay' ORDER BY T2.Percentage DESC LIMIT 1"
    },
    {
        "sample_id": 8242,
        "pred_sql": "SELECT ethnicgroup.country, ethnicgroup.name FROM ethnicgroup WHERE ethnicgroup.percentage < 100 AND ethnicgroup.percentage = (SELECT MAX(ethnicgroup.percentage) FROM ethnicgroup AS T2 WHERE T1.country = T2.country) AND ethnicgroup.name = 'Albanian'",
        "retrieved": [
            8406
        ],
        "token_usage": {
            "tokens": 2799,
            "cost": 0.0005246999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1"
    },
    {
        "sample_id": 8452,
        "pred_sql": "SELECT geo_desert.country FROM geo_desert WHERE geo_desert.desert = 'Kalahari'",
        "retrieved": [
            8364
        ],
        "token_usage": {
            "tokens": 2633,
            "cost": 0.00044399999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T3.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Kalahari'"
    },
    {
        "sample_id": 8471,
        "pred_sql": "SELECT country.area, country.population FROM organization INNER JOIN country ON organization.country = country.code WHERE organization.name = 'Asia Pacific Economic Cooperation'",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2690,
            "cost": 0.00046245
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Name, T2.Population FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Asia Pacific Economic Cooperation'"
    },
    {
        "sample_id": 8446,
        "pred_sql": "SELECT country.name, economy.agriculture FROM country INNER JOIN economy ON country.code = economy.country ORDER BY economy.gdp DESC LIMIT 3;",
        "retrieved": [
            8249
        ],
        "token_usage": {
            "tokens": 2698,
            "cost": 0.00046769999999999993
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC, T2.Agriculture ASC LIMIT 1"
    },
    {
        "sample_id": 8405,
        "pred_sql": "SELECT CAST(population AS FLOAT) / CAST(area AS FLOAT) AS population_density FROM country WHERE code = (SELECT country FROM city WHERE name = 'Hanoi')",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2638,
            "cost": 0.0004344
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Hanoi'"
    },
    {
        "sample_id": 8434,
        "pred_sql": "SELECT organization.city, organization.province FROM organization WHERE organization.name = 'European Bank for Reconstruction and Development'",
        "retrieved": [
            8324
        ],
        "token_usage": {
            "tokens": 2672,
            "cost": 0.00045164999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development'"
    },
    {
        "sample_id": 8393,
        "pred_sql": "SELECT country.name FROM country INNER JOIN city ON country.code = city.country WHERE city.name = 'Grozny'",
        "retrieved": [
            8271
        ],
        "token_usage": {
            "tokens": 2664,
            "cost": 0.00045494999999999997
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Grozny'"
    },
    {
        "sample_id": 8265,
        "pred_sql": "SELECT country.name, (CAST(economy.gdp AS REAL) / CAST(country.population AS REAL)) AS gdp_per_capita FROM country INNER JOIN economy ON country.code = economy.country ORDER BY gdp_per_capita DESC LIMIT 1;",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2750,
            "cost": 0.0005002499999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP / T1.Population DESC LIMIT 1"
    },
    {
        "sample_id": 8301,
        "pred_sql": "SELECT country.code, COUNT(geo_desert.desert) AS desert_count FROM country INNER JOIN politics ON country.code = politics.country INNER JOIN geo_desert ON country.code = geo_desert.country WHERE politics.independence IS NOT NULL AND country.government = 'republic' GROUP BY country.code ORDER BY desert_count DESC LIMIT 1;",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2783,
            "cost": 0.00051465
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T3.Desert) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_desert AS T3 ON T3.Country = T2.Country WHERE T2.Government = 'republic'"
    },
    {
        "sample_id": 8380,
        "pred_sql": "SELECT country.name FROM country INNER JOIN economy ON country.code = economy.country WHERE country.population > 1000000000 ORDER BY economy.gdp ASC LIMIT 1",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2715,
            "cost": 0.00047924999999999997
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population > 1000000000 ORDER BY T2.GDP ASC LIMIT 1"
    },
    {
        "sample_id": 8292,
        "pred_sql": "SELECT country.area FROM country INNER JOIN politics ON country.code = politics.country WHERE politics.independence = '1921-03-13'",
        "retrieved": [
            8285
        ],
        "token_usage": {
            "tokens": 2628,
            "cost": 0.000441
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Area FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'"
    },
    {
        "sample_id": 8330,
        "pred_sql": "SELECT lake.name, located.city FROM lake INNER JOIN located ON lake.name = located.lake WHERE located.province = 'Albania'",
        "retrieved": [
            8324
        ],
        "token_usage": {
            "tokens": 2667,
            "cost": 0.00045359999999999997
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Lake, City FROM located WHERE Province = 'Albania' AND Lake IS NOT NULL"
    },
    {
        "sample_id": 8226,
        "pred_sql": "SELECT p.infant_mortality FROM country AS c INNER JOIN ethnicgroup AS e ON c.code = e.country INNER JOIN population AS p ON c.code = p.country WHERE e.name = 'Amerindian' ORDER BY e.percentage ASC LIMIT 1;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2725,
            "cost": 0.00047625
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1"
    },
    {
        "sample_id": 768,
        "pred_sql": "SELECT movie.title, movie.mpaa_rating FROM movie JOIN characters ON movie.movieid = characters.movieid JOIN actor ON characters.actorid = actor.actorid WHERE actor.name = 'Leonardo DiCaprio' ORDER BY movie.budget DESC LIMIT 1;",
        "retrieved": [
            759
        ],
        "token_usage": {
            "tokens": 1135,
            "cost": 0.0002724
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.\"MPAA Rating\", T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1"
    },
    {
        "sample_id": 760,
        "pred_sql": "SELECT COUNT(*) FROM movie WHERE \"mpaa rating\" = 'PG' AND strftime('%Y-%m', \"release date\") = '1990-06';",
        "retrieved": [
            765
        ],
        "token_usage": {
            "tokens": 1119,
            "cost": 0.00024929999999999993
        },
        "db_id": "movie",
        "gold_sql": "SELECT COUNT(*) FROM movie WHERE \"MPAA Rating\" = 'PG' AND \"Release Date\" LIKE '1990-06%'"
    },
    {
        "sample_id": 734,
        "pred_sql": "SELECT movie.title FROM characters INNER JOIN movie ON characters.movieid = movie.movieid WHERE characters.character_name = 'Dr. Archibald ''Moonlight'' Graham'",
        "retrieved": [
            747
        ],
        "token_usage": {
            "tokens": 1070,
            "cost": 0.0002262
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.\"Character Name\" = 'Dr. Archibald ''Moonlight'' Graham'"
    },
    {
        "sample_id": 746,
        "pred_sql": "SELECT characters.\"character name\" FROM movie INNER JOIN characters ON movie.movieid = characters.movieid WHERE movie.genre = 'thriller' ORDER BY movie.rating DESC LIMIT 1",
        "retrieved": [
            754
        ],
        "token_usage": {
            "tokens": 1053,
            "cost": 0.0002187
        },
        "db_id": "movie",
        "gold_sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1"
    },
    {
        "sample_id": 757,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN actor.\"birth country\" = 'USA' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(actor.\"actorid\") AS percentage_usa_actors FROM movie INNER JOIN characters ON movie.movieid = characters.movieid INNER JOIN actor ON actor.actorid = characters.actorid WHERE movie.title = 'Mrs. Doubtfire'",
        "retrieved": [
            758
        ],
        "token_usage": {
            "tokens": 1196,
            "cost": 0.00027209999999999995
        },
        "db_id": "movie",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.\"Birth Country\" = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.\"Birth Country\") FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'"
    },
    {
        "sample_id": 735,
        "pred_sql": "SELECT movie.title FROM movie INNER JOIN characters ON movie.movieid = characters.movieid INNER JOIN actor ON actor.actorid = characters.actorid WHERE actor.name = 'Tom Cruise'",
        "retrieved": [
            737
        ],
        "token_usage": {
            "tokens": 1068,
            "cost": 0.0002304
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'"
    },
    {
        "sample_id": 750,
        "pred_sql": "SELECT actor.\"date of birth\" FROM actor INNER JOIN characters ON actor.actorid = characters.actorid INNER JOIN movie ON characters.movieid = movie.movieid WHERE characters.\"character name\" = 'Sully'",
        "retrieved": [
            756
        ],
        "token_usage": {
            "tokens": 1049,
            "cost": 0.00021135
        },
        "db_id": "movie",
        "gold_sql": "SELECT T2.\"Date of Birth\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Sully'"
    },
    {
        "sample_id": 730,
        "pred_sql": "SELECT characters.\"character name\" FROM movie INNER JOIN characters ON movie.movieid = characters.movieid WHERE movie.title = 'Look Who's Talking'",
        "retrieved": [
            754
        ],
        "token_usage": {
            "tokens": 1076,
            "cost": 0.00023475
        },
        "db_id": "movie",
        "gold_sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'"
    },
    {
        "sample_id": 764,
        "pred_sql": "SELECT actor.\"height (inches)\", actor.networth FROM movie INNER JOIN characters ON movie.movieid = characters.movieid INNER JOIN actor ON actor.actorid = characters.actorid WHERE movie.title = 'Three Men and a Little Lady'",
        "retrieved": [
            766
        ],
        "token_usage": {
            "tokens": 1112,
            "cost": 0.00023924999999999996
        },
        "db_id": "movie",
        "gold_sql": "SELECT T3.\"Height (Inches)\", T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'"
    },
    {
        "sample_id": 770,
        "pred_sql": "SELECT m.runtime FROM movie AS m INNER JOIN characters AS c ON m.movieid = c.movieid INNER JOIN actor AS a ON c.actorid = a.actorid WHERE a.ethnicity = 'African-American' AND a.date of birth = '1954-12-28';",
        "retrieved": [
            741
        ],
        "token_usage": {
            "tokens": 1093,
            "cost": 0.0002508
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Ethnicity = 'African American' AND T3.\"Date of Birth\" = '1954-12-28'"
    },
    {
        "sample_id": 9203,
        "pred_sql": "SELECT film.title FROM film INNER JOIN film_actor ON film.film_id = film_actor.film_id INNER JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'Emily' AND actor.last_name = 'Dee'",
        "retrieved": [
            9341
        ],
        "token_usage": {
            "tokens": 2160,
            "cost": 0.000387
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Emily' AND T1.last_name = 'Dee'"
    },
    {
        "sample_id": 9300,
        "pred_sql": "SELECT film.rating FROM film INNER JOIN film_text ON film.film_id = film_text.film_id WHERE film_text.description LIKE '%behind the scenes%';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2206,
            "cost": 0.00038625
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT rating FROM film WHERE special_features LIKE '%Behind the Scenes%'"
    },
    {
        "sample_id": 9354,
        "pred_sql": "SELECT (COUNT(CASE WHEN category.name = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_horror FROM film INNER JOIN film_category ON film.film_id = film_category.film_id INNER JOIN category ON film_category.category_id = category.category_id WHERE film.language_id = (SELECT language_id FROM language WHERE name = 'English')",
        "retrieved": [
            9120
        ],
        "token_usage": {
            "tokens": 2179,
            "cost": 0.00040019999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'"
    },
    {
        "sample_id": 9201,
        "pred_sql": "SELECT title, description FROM film_text WHERE film_id = '996';",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2178,
            "cost": 0.00036944999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT description, title FROM film_text WHERE film_id = 996"
    },
    {
        "sample_id": 9355,
        "pred_sql": "SELECT COUNT(film.film_id) FROM film INNER JOIN film_category AS T2 ON film.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE film.rental_duration < 4 AND T3.name = 'Adult'",
        "retrieved": [
            9182
        ],
        "token_usage": {
            "tokens": 2222,
            "cost": 0.00040799999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND rental_duration < 4"
    },
    {
        "sample_id": 9118,
        "pred_sql": "SELECT film.title FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS' ORDER BY film.length DESC LIMIT 1;",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2260,
            "cost": 0.0004146
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1"
    },
    {
        "sample_id": 9386,
        "pred_sql": "SELECT film.title FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE actor.first_name = 'Burt' AND actor.last_name = 'Dukakis';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2226,
            "cost": 0.00039914999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'BURT' AND T2.last_name = 'DUKAKIS'"
    },
    {
        "sample_id": 9419,
        "pred_sql": "SELECT SUM(payment.amount) FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id INNER JOIN address ON customer.address_id = address.address_id INNER JOIN city ON address.city_id = city.city_id INNER JOIN country ON city.country_id = country.country_id WHERE country.country = 'Italy'",
        "retrieved": [
            9372
        ],
        "token_usage": {
            "tokens": 2261,
            "cost": 0.00043364999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT SUM(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'"
    },
    {
        "sample_id": 9219,
        "pred_sql": "SELECT SUM(payment.amount) FROM payment INNER JOIN customer AS T2 ON payment.customer_id = T2.customer_id WHERE T2.first_name = 'Diane' AND T2.last_name = 'Collins'",
        "retrieved": [
            9372
        ],
        "token_usage": {
            "tokens": 2172,
            "cost": 0.0003824999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT SUM(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'"
    },
    {
        "sample_id": 9309,
        "pred_sql": "SELECT film.title, COUNT(rental.rental_id) AS rental_count FROM film INNER JOIN inventory ON film.film_id = inventory.film_id INNER JOIN rental ON inventory.inventory_id = rental.inventory_id GROUP BY film.film_id ORDER BY rental_count DESC LIMIT 5;",
        "retrieved": [
            9210
        ],
        "token_usage": {
            "tokens": 2287,
            "cost": 0.00043079999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.title FROM ( SELECT T3.title, COUNT(T2.inventory_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 5"
    },
    {
        "sample_id": 9351,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'BIRD INDEPENDENCE'",
        "retrieved": [
            9116
        ],
        "token_usage": {
            "tokens": 2184,
            "cost": 0.0003901499999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T1.title = 'BIRD INDEPENDENCE'"
    },
    {
        "sample_id": 9243,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN category.name = 'Horror' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(film.film_id) * 100 AS horror_percentage FROM film INNER JOIN film_category ON film.film_id = film_category.film_id INNER JOIN category ON film_category.category_id = category.category_id;",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2259,
            "cost": 0.0004194
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.name = 'horror', 1, 0)) AS REAL) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 9287,
        "pred_sql": "SELECT category.name FROM film INNER JOIN film_category AS T2 ON film.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE film.title = 'Agent Truman'",
        "retrieved": [
            9393
        ],
        "token_usage": {
            "tokens": 2197,
            "cost": 0.00040695
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'AGENT TRUMAN'"
    },
    {
        "sample_id": 9170,
        "pred_sql": "SELECT title FROM film WHERE length > 180;",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2177,
            "cost": 0.00036749999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE length > 180"
    },
    {
        "sample_id": 9200,
        "pred_sql": "SELECT (COUNT(CASE WHEN active = '0' THEN 1 END) * 100.0 / COUNT(*)) AS inactive_percentage FROM customer;",
        "retrieved": [
            9305
        ],
        "token_usage": {
            "tokens": 2092,
            "cost": 0.00035565
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(active = 0, 1, 0)) AS REAL) * 100 / COUNT(customer_id) FROM customer"
    },
    {
        "sample_id": 9123,
        "pred_sql": "SELECT film.title FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id INNER JOIN film ON inventory.film_id = film.film_id WHERE customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ'",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2263,
            "cost": 0.00041955
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'"
    },
    {
        "sample_id": 9215,
        "pred_sql": "SELECT (COUNT(CASE WHEN c.address_id IN (SELECT a.address_id FROM address a JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'India') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_customers_in_india FROM customer c;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2102,
            "cost": 0.00038685
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id"
    },
    {
        "sample_id": 9135,
        "pred_sql": "SELECT AVG(film.length) AS average_duration FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS';",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2290,
            "cost": 0.00043439999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT AVG(T3.length) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'"
    },
    {
        "sample_id": 9204,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'CHOCOLATE DUCK'",
        "retrieved": [
            9116
        ],
        "token_usage": {
            "tokens": 2200,
            "cost": 0.00039749999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = 'CHOCOLATE DUCK'"
    },
    {
        "sample_id": 9174,
        "pred_sql": "SELECT COUNT(rental_id) FROM rental WHERE DATE(return_date) = '2005-05-27'",
        "retrieved": [
            9263
        ],
        "token_usage": {
            "tokens": 2152,
            "cost": 0.00038084999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'"
    },
    {
        "sample_id": 9330,
        "pred_sql": "SELECT (SUM(payment.amount) / (SELECT SUM(amount) FROM payment) * 100) AS percentage FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'MARGARET' AND customer.last_name = 'MOORE'",
        "retrieved": [
            9372
        ],
        "token_usage": {
            "tokens": 2230,
            "cost": 0.0004146
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE', T1.amount, 0)) AS REAL) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "sample_id": 9269,
        "pred_sql": "SELECT COUNT(DISTINCT customer.customer_id) FROM customer LEFT JOIN rental ON customer.customer_id = rental.customer_id LEFT JOIN inventory ON rental.inventory_id = inventory.inventory_id WHERE inventory.store_id = (SELECT store_id FROM store WHERE manager_staff_id = (SELECT staff_id FROM staff WHERE first_name = 'Mike')) AND rental.customer_id IS NULL;",
        "retrieved": [
            9169
        ],
        "token_usage": {
            "tokens": 2194,
            "cost": 0.0004105499999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id WHERE T3.first_name != 'Mike'"
    },
    {
        "sample_id": 9137,
        "pred_sql": "SELECT COUNT(*) AS inactive_customer_count FROM customer WHERE active = 0",
        "retrieved": [
            9305
        ],
        "token_usage": {
            "tokens": 2100,
            "cost": 0.00036089999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 0"
    },
    {
        "sample_id": 9420,
        "pred_sql": "SELECT COUNT(payment.payment_id) FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith' AND payment.amount > 4.99;",
        "retrieved": [
            9415
        ],
        "token_usage": {
            "tokens": 2161,
            "cost": 0.00038535
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND T1.amount > 4.99"
    },
    {
        "sample_id": 9211,
        "pred_sql": "SELECT inventory.inventory_id, actor.first_name, actor.last_name FROM film INNER JOIN film_actor ON film.film_id = film_actor.film_id INNER JOIN actor ON film_actor.actor_id = actor.actor_id INNER JOIN inventory ON film.film_id = inventory.film_id WHERE film.title = 'STREETCAR INTENTIONS';",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2243,
            "cost": 0.0004053
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.inventory_id, T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T2.film_id = T4.film_id WHERE T3.title = 'STREETCAR INTENTIONS'"
    },
    {
        "sample_id": 9105,
        "pred_sql": "SELECT staff.email FROM staff WHERE staff.first_name = 'Jon' AND staff.last_name = 'Stephens'",
        "retrieved": [
            9106
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.00037454999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'"
    },
    {
        "sample_id": 9154,
        "pred_sql": "SELECT COUNT(address.address_id) FROM city INNER JOIN address ON city.city_id = address.city_id WHERE city.city = 'Woodridge'",
        "retrieved": [
            9186
        ],
        "token_usage": {
            "tokens": 2126,
            "cost": 0.00036524999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.address_id) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = 'Woodridge'"
    },
    {
        "sample_id": 9285,
        "pred_sql": "SELECT city.city FROM address INNER JOIN city ON address.city_id = city.city_id WHERE address.address = '1623 Kingstown Drive'",
        "retrieved": [
            9324
        ],
        "token_usage": {
            "tokens": 2117,
            "cost": 0.000363
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.city FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id WHERE T2.address = '1623 Kingstown Drive'"
    },
    {
        "sample_id": 9359,
        "pred_sql": "SELECT COUNT(payment.payment_id) FROM payment INNER JOIN customer AS T2 ON payment.customer_id = T2.customer_id WHERE T2.first_name = 'Susan' AND T2.last_name = 'Wilson' AND payment.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 22:08:29'",
        "retrieved": [
            9372
        ],
        "token_usage": {
            "tokens": 2291,
            "cost": 0.00043814999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'"
    },
    {
        "sample_id": 9336,
        "pred_sql": "SELECT title FROM film WHERE rating = 'G'",
        "retrieved": [
            9341
        ],
        "token_usage": {
            "tokens": 2113,
            "cost": 0.00035699999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE rating = 'G'"
    },
    {
        "sample_id": 9179,
        "pred_sql": "SELECT film.title, COUNT(rental.rental_id) AS rental_count FROM film INNER JOIN inventory ON film.film_id = inventory.film_id INNER JOIN rental ON inventory.inventory_id = rental.inventory_id GROUP BY film.film_id ORDER BY rental_count DESC LIMIT 1;",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2310,
            "cost": 0.00042569999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 9346,
        "pred_sql": "SELECT customer.first_name FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id WHERE rental.staff_id = 1;",
        "retrieved": [
            9412
        ],
        "token_usage": {
            "tokens": 2176,
            "cost": 0.00038219999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 1"
    },
    {
        "sample_id": 9319,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id ORDER BY film.rental_rate DESC LIMIT 1",
        "retrieved": [
            9116
        ],
        "token_usage": {
            "tokens": 2196,
            "cost": 0.00039825
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id ORDER BY T3.rental_rate DESC LIMIT 1"
    },
    {
        "sample_id": 9293,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ACADEMY DINOSAUR';",
        "retrieved": [
            9101
        ],
        "token_usage": {
            "tokens": 2180,
            "cost": 0.0003980999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'"
    },
    {
        "sample_id": 9252,
        "pred_sql": "SELECT (COUNT(CASE WHEN p.amount > avg_rent.avg_amount THEN 1 END) * 100.0 / COUNT(*)) AS percentage_above_average\nFROM payment p\nJOIN (\n    SELECT AVG(amount) AS avg_amount\n    FROM payment\n    WHERE customer_id IN (\n        SELECT customer_id\n        FROM customer\n        WHERE store_id = 1\n    )\n) avg_rent ON 1=1\nWHERE p.customer_id IN (\n    SELECT customer_id\n    FROM customer\n    WHERE store_id = 1\n);",
        "retrieved": [],
        "token_usage": {
            "tokens": 2200,
            "cost": 0.00044249999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(( SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount > ( SELECT AVG(amount) FROM payment ) ) AS REAL) * 100 / ( SELECT COUNT(customer_id) FROM customer )"
    },
    {
        "sample_id": 9326,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ANONYMOUS HUMAN'",
        "retrieved": [
            9266
        ],
        "token_usage": {
            "tokens": 2197,
            "cost": 0.00040245
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T3.title = 'ANONYMOUS HUMAN'"
    },
    {
        "sample_id": 9409,
        "pred_sql": "SELECT COUNT(*) AS active_customers_count FROM customer WHERE store_id = '1' AND active = '1';",
        "retrieved": [
            9305
        ],
        "token_usage": {
            "tokens": 2160,
            "cost": 0.00039239999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1 AND store_id = 1"
    },
    {
        "sample_id": 9208,
        "pred_sql": "SELECT language.name, (film.rental_rate / film.rental_duration) AS rental_cost_per_day FROM film JOIN language ON film.language_id = language.language_id WHERE film.title = 'Untouchables Sunrise'",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2147,
            "cost": 0.00037874999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.name, T1.replacement_cost / T1.rental_duration AS cost FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'"
    },
    {
        "sample_id": 9228,
        "pred_sql": "SELECT COUNT(*) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length = 113 AND T1.first_name = 'Kirk' AND T1.last_name = 'Jovovich'",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2257,
            "cost": 0.00041189999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length = 113 AND T1.first_name = 'Kirk' AND T1.last_name = 'Jovovich'"
    },
    {
        "sample_id": 9338,
        "pred_sql": "SELECT film.title, film.last_update FROM film WHERE film.release_year = 2006 AND film.language_id = (SELECT language_id FROM language WHERE name = 'English')",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2183,
            "cost": 0.0003998999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT DISTINCT T1.last_update FROM film AS T1 INNER JOIN \"language\" AS T2 ON T1.language_id = T2.language_id WHERE T2.\"name\" = 'English' AND T1.release_year = 2006"
    },
    {
        "sample_id": 9149,
        "pred_sql": "SELECT COUNT(film.film_id) FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE actor.first_name = 'Daryl' AND actor.last_name = 'Wahlberg';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2248,
            "cost": 0.00041144999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'DARYL' AND T2.last_name = 'WAHLBERG'"
    },
    {
        "sample_id": 9286,
        "pred_sql": "SELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Algeria') LIMIT 3;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2037,
            "cost": 0.00034875
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'"
    },
    {
        "sample_id": 9188,
        "pred_sql": "SELECT customer.first_name, customer.last_name FROM address INNER JOIN city AS T2 ON address.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON address.address_id = T4.address_id WHERE T3.country = 'India'",
        "retrieved": [
            9412
        ],
        "token_usage": {
            "tokens": 2214,
            "cost": 0.0004094999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.first_name, T4.last_name FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id WHERE T1.country = 'India'"
    },
    {
        "sample_id": 9223,
        "pred_sql": "SELECT actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'",
        "retrieved": [
            9116
        ],
        "token_usage": {
            "tokens": 2277,
            "cost": 0.00043604999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'"
    },
    {
        "sample_id": 9103,
        "pred_sql": "SELECT COUNT(*) FROM film WHERE rental_rate = 2.99 AND special_features LIKE '%Deleted Scenes%'",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2150,
            "cost": 0.0003782999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 2.99 AND special_features = 'Deleted Scenes'"
    },
    {
        "sample_id": 9322,
        "pred_sql": "SELECT address.address, address.postal_code FROM customer INNER JOIN address ON customer.address_id = address.address_id WHERE customer.first_name = 'SUSAN' AND address.postal_code = '77948';",
        "retrieved": [
            9324
        ],
        "token_usage": {
            "tokens": 2139,
            "cost": 0.00037305
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'SUSAN' AND T1.postal_code = 77948"
    },
    {
        "sample_id": 9389,
        "pred_sql": "SELECT film.title FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE actor.first_name = 'Karl' AND actor.last_name = 'Berr' AND film.rating = 'PG';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2230,
            "cost": 0.00039929999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'KARL' AND T1.last_name = 'BERRY' AND T3.rating = 'PG'"
    },
    {
        "sample_id": 9378,
        "pred_sql": "SELECT title FROM film ORDER BY length DESC, title ASC;",
        "retrieved": [
            9341
        ],
        "token_usage": {
            "tokens": 2155,
            "cost": 0.00038175
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )"
    },
    {
        "sample_id": 9271,
        "pred_sql": "SELECT customer.first_name, customer.last_name FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id WHERE rental.return_date IS NULL GROUP BY customer.customer_id ORDER BY COUNT(rental.rental_id) DESC LIMIT 1;",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2255,
            "cost": 0.00041474999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.first_name FROM ( SELECT T2.first_name, COUNT(T1.rental_date) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 9159,
        "pred_sql": "SELECT category.name FROM film_category INNER JOIN film ON film_category.film_id = film.film_id INNER JOIN category ON film_category.category_id = category.category_id WHERE film.title = 'Working Microcosmos'",
        "retrieved": [
            9120
        ],
        "token_usage": {
            "tokens": 2130,
            "cost": 0.00037125
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'WORKING MICROCOSMOS'"
    },
    {
        "sample_id": 9199,
        "pred_sql": "SELECT staff.first_name, staff.last_name, staff.email FROM staff WHERE staff.store_id = '2'",
        "retrieved": [
            9106
        ],
        "token_usage": {
            "tokens": 2096,
            "cost": 0.00035894999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2"
    },
    {
        "sample_id": 9382,
        "pred_sql": "SELECT title FROM film WHERE rating = 'PG-13';",
        "retrieved": [
            9341
        ],
        "token_usage": {
            "tokens": 2117,
            "cost": 0.0003602999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE rating = 'PG-13'"
    },
    {
        "sample_id": 9401,
        "pred_sql": "SELECT inventory.store_id FROM actor INNER JOIN film_actor AS T2 ON actor.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE film.length <= 100 AND actor.first_name = 'Reese' AND actor.last_name = 'West'",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2280,
            "cost": 0.00042659999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.store_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length < 100 AND T1.first_name = 'Reese' AND T1.last_name = 'West'"
    },
    {
        "sample_id": 9357,
        "pred_sql": "SELECT customer.email FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id WHERE customer.active = 1 AND rental.rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49'",
        "retrieved": [
            9305
        ],
        "token_usage": {
            "tokens": 2209,
            "cost": 0.00041009999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.email FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49' AND T2.active = 1"
    },
    {
        "sample_id": 9196,
        "pred_sql": "SELECT title, description, special_features FROM film ORDER BY length DESC LIMIT 5;",
        "retrieved": [
            9182
        ],
        "token_usage": {
            "tokens": 2187,
            "cost": 0.00038745
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title, description, special_features FROM film WHERE length = ( SELECT MAX(length) FROM film ) LIMIT 5"
    },
    {
        "sample_id": 9405,
        "pred_sql": "SELECT COUNT(film.film_id) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.rental_rate = 2.99 AND actor.first_name = 'Nina' AND actor.last_name = 'Soto';",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2207,
            "cost": 0.00041204999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate = 2.99 AND T2.first_name = 'Nina' AND T2.last_name = 'Soto'"
    },
    {
        "sample_id": 9333,
        "pred_sql": "SELECT title FROM film WHERE film_id BETWEEN '1' AND '10';",
        "retrieved": [
            9341
        ],
        "token_usage": {
            "tokens": 2130,
            "cost": 0.00036809999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10"
    },
    {
        "sample_id": 9214,
        "pred_sql": "SELECT customer.first_name || ' ' || customer.last_name AS full_name, city.city AS city_name \nFROM customer \nINNER JOIN rental ON customer.customer_id = rental.customer_id \nINNER JOIN inventory ON rental.inventory_id = inventory.inventory_id \nINNER JOIN film ON inventory.film_id = film.film_id \nINNER JOIN address ON customer.address_id = address.address_id \nINNER JOIN city ON address.city_id = city.city_id \nWHERE film.title = 'DREAM PICKUP';",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2395,
            "cost": 0.00047355
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.first_name, T4.last_name, T6.city FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN customer AS T4 ON T3.customer_id = T4.customer_id INNER JOIN address AS T5 ON T4.address_id = T5.address_id INNER JOIN city AS T6 ON T5.city_id = T6.city_id WHERE T1.title = 'DREAM PICKUP'"
    },
    {
        "sample_id": 9202,
        "pred_sql": "SELECT SUM(payment.amount) FROM payment WHERE payment.payment_date BETWEEN '2005-08-01' AND '2005-08-31'",
        "retrieved": [
            9169
        ],
        "token_usage": {
            "tokens": 2130,
            "cost": 0.00037169999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT SUM(amount) FROM payment WHERE SUBSTR(payment_date, 1, 7) = '2005-08'"
    },
    {
        "sample_id": 9232,
        "pred_sql": "SELECT store_id, inventory_id FROM inventory INNER JOIN film ON inventory.film_id = film.film_id ORDER BY film.length DESC LIMIT 1;",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2277,
            "cost": 0.00042749999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.store_id, T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id ORDER BY T1.length DESC LIMIT 1"
    },
    {
        "sample_id": 9376,
        "pred_sql": "SELECT rental_duration FROM film WHERE title = 'Dirty Ace'",
        "retrieved": [
            9182
        ],
        "token_usage": {
            "tokens": 2144,
            "cost": 0.00036434999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'"
    },
    {
        "sample_id": 9316,
        "pred_sql": "SELECT first_name, last_name FROM actor WHERE actor_id = 5;",
        "retrieved": [
            9116
        ],
        "token_usage": {
            "tokens": 2121,
            "cost": 0.00035414999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT first_name, last_name FROM actor WHERE actor_id = 5"
    },
    {
        "sample_id": 9302,
        "pred_sql": "SELECT film.title FROM film_text WHERE description LIKE '%Lacklusture%';",
        "retrieved": [
            9210
        ],
        "token_usage": {
            "tokens": 2222,
            "cost": 0.00038865
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film_text WHERE description LIKE '%Lacklusture%'"
    },
    {
        "sample_id": 9306,
        "pred_sql": "SELECT category.name, COUNT(*) as count FROM film_category INNER JOIN category ON film_category.category_id = category.category_id GROUP BY category.name ORDER BY count DESC LIMIT 1;",
        "retrieved": [
            9393
        ],
        "token_usage": {
            "tokens": 2166,
            "cost": 0.00038969999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.name FROM ( SELECT T2.name, COUNT(T2.name) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 9380,
        "pred_sql": "SELECT COUNT(film.title) AS total_titles, (COUNT(CASE WHEN STRFTIME('%m', rental.rental_date) = '06' THEN 1 END) * 100.0 / COUNT(film.title)) AS percentage_june FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id INNER JOIN film ON inventory.film_id = film.film_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith' AND STRFTIME('%Y', rental.rental_date) = '2005'",
        "retrieved": [
            9210
        ],
        "token_usage": {
            "tokens": 2366,
            "cost": 0.0004718999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T2.rental_id) , CAST(SUM(IIF(STRFTIME('%m',T2.rental_date) = '7', 1, 0)) AS REAL) * 100 / COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller' AND STRFTIME('%Y',T2.rental_date) = '2005'"
    },
    {
        "sample_id": 2292,
        "pred_sql": "SELECT movies.movieid, AVG(u2base.rating) AS avg_rating FROM u2base INNER JOIN movies ON u2base.movieid = movies.movieid WHERE movies.runningtime = '0' GROUP BY movies.movieid ORDER BY avg_rating DESC LIMIT 1;",
        "retrieved": [
            2258
        ],
        "token_usage": {
            "tokens": 1014,
            "cost": 0.00023759999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )"
    },
    {
        "sample_id": 2306,
        "pred_sql": "SELECT actorid FROM movies2actors INNER JOIN movies ON movies2actors.movieid = movies.movieid WHERE movies.country = 'France' GROUP BY actorid HAVING COUNT(movies.movieid) >= 2;",
        "retrieved": [
            2298
        ],
        "token_usage": {
            "tokens": 957,
            "cost": 0.00021509999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France' GROUP BY T2.actorid HAVING COUNT(T1.movieid) > 2"
    },
    {
        "sample_id": 2270,
        "pred_sql": "SELECT DISTINCT users.age FROM u2base INNER JOIN movies ON u2base.movieid = movies.movieid WHERE u2base.rating = 3",
        "retrieved": [
            2268
        ],
        "token_usage": {
            "tokens": 953,
            "cost": 0.00019604999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3"
    },
    {
        "sample_id": 2321,
        "pred_sql": "SELECT users.userid, users.age FROM users INNER JOIN u2base ON users.userid = u2base.userid WHERE u2base.movieid = '2409051' AND u2base.rating = 2;",
        "retrieved": [
            2291
        ],
        "token_usage": {
            "tokens": 966,
            "cost": 0.00021194999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T1.userid, T1.age FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.movieid = '2409051' AND T2.rating = 2"
    },
    {
        "sample_id": 2287,
        "pred_sql": "SELECT DISTINCT movies.country FROM actors INNER JOIN movies2actors ON actors.actorid = movies2actors.actorid INNER JOIN movies ON movies2actors.movieid = movies.movieid WHERE actors.a_quality = (SELECT MIN(a_quality) FROM actors WHERE a_gender = 'F')",
        "retrieved": [
            2286
        ],
        "token_usage": {
            "tokens": 1046,
            "cost": 0.00025095
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0"
    },
    {
        "sample_id": 2285,
        "pred_sql": "SELECT DISTINCT movies2directors.genre FROM directors INNER JOIN movies2directors ON directors.directorid = movies2directors.directorid WHERE directors.avg_revenue = (SELECT MAX(avg_revenue) FROM directors)",
        "retrieved": [
            2317
        ],
        "token_usage": {
            "tokens": 936,
            "cost": 0.00019755
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4"
    },
    {
        "sample_id": 2288,
        "pred_sql": "SELECT MAX(avg_rating) FROM (SELECT AVG(u2base.rating) AS avg_rating FROM movies INNER JOIN movies2directors ON movies.movieid = movies2directors.movieid INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies2directors.genre = 1 AND movies.country = 'USA' GROUP BY movies.movieid) AS avg_ratings;",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1149,
            "cost": 0.00030375
        },
        "db_id": "movielens",
        "gold_sql": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1"
    },
    {
        "sample_id": 2313,
        "pred_sql": "SELECT COUNT(movies.movieid) FROM movies WHERE movies.year = '4' AND movies.movieid IN (SELECT movies2directors.movieid FROM movies2directors WHERE movies2directors.genre IN (1, 2))",
        "retrieved": [
            2258
        ],
        "token_usage": {
            "tokens": 987,
            "cost": 0.00022409999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')"
    },
    {
        "sample_id": 2264,
        "pred_sql": "SELECT COUNT(DISTINCT actors.actorid) AS female_actor_count FROM actors INNER JOIN movies2actors ON actors.actorid = movies2actors.actorid INNER JOIN movies ON movies2actors.movieid = movies.movieid WHERE actors.a_gender = 'F' AND movies.year = '4';",
        "retrieved": [
            2302
        ],
        "token_usage": {
            "tokens": 1045,
            "cost": 0.00023999999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_gender = 'F' AND T1.year = 4"
    },
    {
        "sample_id": 2331,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN a_gender = 'F' AND a_quality = '2' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(*) AS female_percentage FROM movies2actors INNER JOIN actors ON movies2actors.actorid = actors.actorid WHERE movies2actors.movieid = '1672580' GROUP BY movies2actors.movieid HAVING COUNT(*) = 2;",
        "retrieved": [
            2302
        ],
        "token_usage": {
            "tokens": 1130,
            "cost": 0.0002856
        },
        "db_id": "movielens",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'"
    },
    {
        "sample_id": 2253,
        "pred_sql": "SELECT movies.movieid, AVG(u2base.rating) AS avg_rating FROM movies INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.country = 'USA' GROUP BY movies.movieid ORDER BY avg_rating DESC LIMIT 10;",
        "retrieved": [
            2247
        ],
        "token_usage": {
            "tokens": 1016,
            "cost": 0.00024375
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10"
    },
    {
        "sample_id": 2281,
        "pred_sql": "SELECT DISTINCT movies.movieid FROM movies INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.year = '4' AND u2base.rating = (SELECT MIN(rating) FROM u2base WHERE movieid IN (SELECT movieid FROM movies WHERE year = '4'))",
        "retrieved": [
            2247
        ],
        "token_usage": {
            "tokens": 1002,
            "cost": 0.00023805
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1"
    },
    {
        "sample_id": 2310,
        "pred_sql": "SELECT COUNT(DISTINCT T2.movieid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND T2.genre IN (1, 2)",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1045,
            "cost": 0.00023999999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')"
    },
    {
        "sample_id": 2248,
        "pred_sql": "SELECT COUNT(*) FROM users WHERE userid IN (SELECT u2base.userid FROM u2base WHERE u2base.rating = 5) AND u_gender = 'M';",
        "retrieved": [
            2261
        ],
        "token_usage": {
            "tokens": 924,
            "cost": 0.00019214999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'"
    },
    {
        "sample_id": 2271,
        "pred_sql": "SELECT directors.country, COUNT(movies.movieid) AS action_movie_count FROM movies INNER JOIN movies2directors ON movies.movieid = movies2directors.movieid INNER JOIN directors ON movies2directors.directorid = directors.directorid WHERE movies.genre = 'action' GROUP BY directors.country;",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1013,
            "cost": 0.00022349999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1"
    },
    {
        "sample_id": 2303,
        "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM movies2directors WHERE genre = 'action') AS proportion FROM (SELECT DISTINCT movies2directors.movieid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5 AND T1.avg_revenue > 0) AS t1",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1063,
            "cost": 0.00025035
        },
        "db_id": "movielens",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'"
    },
    {
        "sample_id": 2323,
        "pred_sql": "SELECT T3.movieid FROM movies AS T3 INNER JOIN u2base AS T2 ON T3.movieid = T2.movieid WHERE T3.country = 'France' GROUP BY T3.movieid ORDER BY AVG(T2.rating) ASC LIMIT 1;",
        "retrieved": [
            2283
        ],
        "token_usage": {
            "tokens": 980,
            "cost": 0.00022214999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1"
    },
    {
        "sample_id": 2324,
        "pred_sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND (T3.country = 'France' OR T3.country = 'USA')",
        "retrieved": [
            2283
        ],
        "token_usage": {
            "tokens": 1038,
            "cost": 0.0002538
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')"
    },
    {
        "sample_id": 2319,
        "pred_sql": "SELECT u2base.movieid FROM u2base INNER JOIN users ON u2base.userid = users.userid WHERE users.age = '25' GROUP BY u2base.movieid ORDER BY COUNT(u2base.rating) DESC LIMIT 1;",
        "retrieved": [
            2322
        ],
        "token_usage": {
            "tokens": 977,
            "cost": 0.00022305
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T1.age = 25 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1"
    },
    {
        "sample_id": 2256,
        "pred_sql": "SELECT COUNT(u2base.userid) FROM u2base INNER JOIN movies2actors AS T2 ON u2base.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_quality = 'best' AND u2base.rating = 5",
        "retrieved": [
            2260
        ],
        "token_usage": {
            "tokens": 1055,
            "cost": 0.00024329999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5"
    },
    {
        "sample_id": 2257,
        "pred_sql": "SELECT AVG(u2base.rating) FROM movies INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.year = '4' AND movies.country = 'France'",
        "retrieved": [
            2283
        ],
        "token_usage": {
            "tokens": 989,
            "cost": 0.00022664999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4"
    },
    {
        "sample_id": 516,
        "pred_sql": "SELECT AVG(movie.revenue) AS average_revenue FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Latin'",
        "retrieved": [
            466
        ],
        "token_usage": {
            "tokens": 2084,
            "cost": 0.00038415
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'"
    },
    {
        "sample_id": 511,
        "pred_sql": "SELECT movie.title FROM movie INNER JOIN production_country AS T2 ON movie.movie_id = T2.movie_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T3.country_name = 'Nederlands' AND movie.movie_status = 'Released'",
        "retrieved": [
            481
        ],
        "token_usage": {
            "tokens": 2066,
            "cost": 0.00038595000000000003
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'"
    },
    {
        "sample_id": 496,
        "pred_sql": "SELECT genre.genre_name FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE movie.tagline = 'A long time ago in a galaxy far, far away\u2026'",
        "retrieved": [
            492
        ],
        "token_usage": {
            "tokens": 2083,
            "cost": 0.00038579999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T3.genre_id = T2.genre_id WHERE T1.tagline = 'A long time ago in a galaxy far, far away...'"
    },
    {
        "sample_id": 455,
        "pred_sql": "SELECT movie_crew.person_id FROM movie_crew WHERE movie_crew.movie_id = '12' AND movie_crew.job = 'Film Editor' AND movie_crew.department_id = (SELECT department_id FROM department WHERE department_name = 'Editing') LIMIT 1 OFFSET 1;",
        "retrieved": [
            564
        ],
        "token_usage": {
            "tokens": 2100,
            "cost": 0.00039824999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'"
    },
    {
        "sample_id": 525,
        "pred_sql": "SELECT keyword.keyword_name, COUNT(movie_keywords.keyword_id) AS keyword_count FROM movie_keywords JOIN movie ON movie_keywords.movie_id = movie.movie_id WHERE strftime('%Y', movie.release_date) = '2006' GROUP BY keyword.keyword_name ORDER BY keyword_count DESC LIMIT 1;",
        "retrieved": [
            437
        ],
        "token_usage": {
            "tokens": 2082,
            "cost": 0.0004094999999999999
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1"
    },
    {
        "sample_id": 533,
        "pred_sql": "SELECT title FROM movie INNER JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id GROUP BY movie.movie_id ORDER BY COUNT(movie_keywords.keyword_id) DESC LIMIT 1;",
        "retrieved": [
            425
        ],
        "token_usage": {
            "tokens": 2038,
            "cost": 0.00037544999999999994
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1"
    },
    {
        "sample_id": 503,
        "pred_sql": "SELECT production_company.company_id FROM production_company INNER JOIN movie_company ON production_company.company_id = movie_company.company_id INNER JOIN movie ON movie_company.movie_id = movie.movie_id WHERE movie.title = 'Gladiator'",
        "retrieved": [
            447
        ],
        "token_usage": {
            "tokens": 2065,
            "cost": 0.00037905
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'"
    },
    {
        "sample_id": 441,
        "pred_sql": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1",
        "retrieved": [
            437
        ],
        "token_usage": {
            "tokens": 1980,
            "cost": 0.0003478499999999999
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1"
    },
    {
        "sample_id": 408,
        "pred_sql": "SELECT production_company.company_name FROM movie INNER JOIN movie_company ON movie.movie_id = movie_company.movie_id INNER JOIN production_company ON movie_company.company_id = production_company.company_id WHERE movie.title = 'Four Rooms'",
        "retrieved": [
            542
        ],
        "token_usage": {
            "tokens": 2104,
            "cost": 0.00039749999999999996
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'"
    },
    {
        "sample_id": 529,
        "pred_sql": "SELECT AVG(movie.revenue) AS average_revenue FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'France'",
        "retrieved": [
            466
        ],
        "token_usage": {
            "tokens": 2092,
            "cost": 0.00038895
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'"
    },
    {
        "sample_id": 562,
        "pred_sql": "SELECT movie_cast.character_name FROM movie INNER JOIN movie_cast ON movie.movie_id = movie_cast.movie_id INNER JOIN person ON movie_cast.person_id = person.person_id WHERE movie.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND person.person_name = 'Orlando Bloom'",
        "retrieved": [
            564
        ],
        "token_usage": {
            "tokens": 2113,
            "cost": 0.00040379999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'"
    },
    {
        "sample_id": 536,
        "pred_sql": "SELECT AVG(female_count * 1.0 / NULLIF(male_count, 0)) AS average_ratio FROM (SELECT movie.movie_id, SUM(CASE WHEN gender.gender = 'female' THEN 1 ELSE 0 END) AS female_count, SUM(CASE WHEN gender.gender = 'male' THEN 1 ELSE 0 END) AS male_count FROM movie INNER JOIN movie_cast ON movie.movie_id = movie_cast.movie_id INNER JOIN gender ON movie_cast.gender_id = gender.gender_id GROUP BY movie.movie_id) AS gender_counts;",
        "retrieved": [
            448
        ],
        "token_usage": {
            "tokens": 2141,
            "cost": 0.00042645
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id"
    },
    {
        "sample_id": 544,
        "pred_sql": "SELECT person.person_name FROM movie INNER JOIN movie_cast AS T2 ON movie.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE movie.title = 'Pirates of the Caribbean: At World\\'s End' AND T2.cast_order = '1'",
        "retrieved": [
            564
        ],
        "token_usage": {
            "tokens": 2116,
            "cost": 0.00040605
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1"
    },
    {
        "sample_id": 534,
        "pred_sql": "SELECT department.department_name, COUNT(movie_crew.person_id) AS num_people\nFROM movie_crew\nJOIN department ON movie_crew.department_id = department.department_id\nGROUP BY department.department_name\nORDER BY num_people DESC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1986,
            "cost": 0.00037979999999999996
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1"
    },
    {
        "sample_id": 430,
        "pred_sql": "SELECT COUNT(person.person_id) FROM movie INNER JOIN movie_crew AS T2 ON movie.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE movie.title = 'The Amityville Horror' AND T2.job = 'Producer'",
        "retrieved": [
            415
        ],
        "token_usage": {
            "tokens": 2104,
            "cost": 0.0004001999999999999
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'"
    },
    {
        "sample_id": 469,
        "pred_sql": "SELECT movie.title FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_name = 'Latin' AND movie.release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "retrieved": [
            486
        ],
        "token_usage": {
            "tokens": 2078,
            "cost": 0.00039674999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'"
    },
    {
        "sample_id": 524,
        "pred_sql": "SELECT person.person_name FROM movie_cast INNER JOIN person ON movie_cast.person_id = person.person_id WHERE movie_cast.character_name LIKE '%captain%';",
        "retrieved": [
            564
        ],
        "token_usage": {
            "tokens": 2081,
            "cost": 0.00038639999999999996
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'"
    },
    {
        "sample_id": 497,
        "pred_sql": "SELECT country.country_id FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE movie.title = 'Pirates of the Caribbean: Dead Man's Chest'",
        "retrieved": [
            412
        ],
        "token_usage": {
            "tokens": 2066,
            "cost": 0.00037289999999999996
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'"
    },
    {
        "sample_id": 465,
        "pred_sql": "SELECT movie.title FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Horror' AND movie.vote_average > 7;",
        "retrieved": [
            418
        ],
        "token_usage": {
            "tokens": 2113,
            "cost": 0.00039705
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7"
    },
    {
        "sample_id": 499,
        "pred_sql": "SELECT SUM(movie.budget) FROM movie INNER JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id INNER JOIN keyword ON movie_keywords.keyword_id = keyword.keyword_id WHERE keyword.keyword_name = 'video game';",
        "retrieved": [
            435
        ],
        "token_usage": {
            "tokens": 2063,
            "cost": 0.00037199999999999993
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'"
    },
    {
        "sample_id": 426,
        "pred_sql": "SELECT person.person_name FROM movie INNER JOIN movie_crew AS T2 ON movie.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE movie.title = 'Land of the Dead' AND T2.job = 'Director'",
        "retrieved": [
            412
        ],
        "token_usage": {
            "tokens": 2094,
            "cost": 0.00039464999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'"
    },
    {
        "sample_id": 470,
        "pred_sql": "SELECT AVG(movie.revenue) AS average_revenue FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'United States' AND strftime('%Y', movie.release_date) = '2006';",
        "retrieved": [
            466
        ],
        "token_usage": {
            "tokens": 2114,
            "cost": 0.0004008
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006"
    },
    {
        "sample_id": 527,
        "pred_sql": "SELECT genre.genre_name, COUNT(movie_genres.genre_id) AS genre_count FROM movie_genres INNER JOIN genre ON movie_genres.genre_id = genre.genre_id GROUP BY genre.genre_name ORDER BY genre_count ASC LIMIT 1 OFFSET 2;",
        "retrieved": [
            466
        ],
        "token_usage": {
            "tokens": 2087,
            "cost": 0.00038685
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1"
    },
    {
        "sample_id": 552,
        "pred_sql": "SELECT (CAST(COUNT(CASE WHEN keyword.keyword_name = 'woman director' THEN movie.movie_id ELSE NULL END) AS FLOAT) / COUNT(movie.movie_id) * 100) - (CAST(COUNT(CASE WHEN keyword.keyword_name = 'independent film' THEN movie.movie_id ELSE NULL END) AS FLOAT) / COUNT(movie.movie_id) * 100) AS percentage_difference FROM movie INNER JOIN movie_keywords AS T1 ON movie.movie_id = T1.movie_id INNER JOIN keyword AS T2 ON T1.keyword_id = T2.keyword_id",
        "retrieved": [
            484
        ],
        "token_usage": {
            "tokens": 2214,
            "cost": 0.00043784999999999994
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id"
    },
    {
        "sample_id": 554,
        "pred_sql": "SELECT COUNT(*) FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', movie.release_date) AS INT) = 2000;",
        "retrieved": [
            486
        ],
        "token_usage": {
            "tokens": 2055,
            "cost": 0.00038789999999999994
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000"
    },
    {
        "sample_id": 513,
        "pred_sql": "SELECT movie.homepage FROM movie INNER JOIN movie_languages ON movie.movie_id = movie_languages.movie_id INNER JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_name = 'Bahasa Indonesia'",
        "retrieved": [
            509
        ],
        "token_usage": {
            "tokens": 2006,
            "cost": 0.00036030000000000003
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'"
    },
    {
        "sample_id": 531,
        "pred_sql": "SELECT person.person_name, COUNT(movie.movie_id) AS movie_count FROM movie_crew INNER JOIN person ON movie_crew.person_id = person.person_id GROUP BY person.person_id ORDER BY movie_count DESC LIMIT 5;",
        "retrieved": [
            445
        ],
        "token_usage": {
            "tokens": 2077,
            "cost": 0.00039164999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5"
    },
    {
        "sample_id": 521,
        "pred_sql": "SELECT country_iso_code FROM country WHERE country_name = 'Kyrgyz Republic';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1919,
            "cost": 0.0003369
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'"
    },
    {
        "sample_id": 420,
        "pred_sql": "SELECT (COUNT(CASE WHEN m.vote_average > 5.0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM movie AS m INNER JOIN movie_crew AS mc ON m.movie_id = mc.movie_id INNER JOIN person AS p ON mc.person_id = p.person_id WHERE p.person_name = 'Dariusz Wolski' AND mc.job = 'director of photography';",
        "retrieved": [
            418
        ],
        "token_usage": {
            "tokens": 2209,
            "cost": 0.00044609999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'"
    },
    {
        "sample_id": 551,
        "pred_sql": "SELECT production_company.company_name FROM production_company INNER JOIN movie_company ON production_company.company_id = movie_company.company_id INNER JOIN movie ON movie_company.movie_id = movie.movie_id WHERE movie.release_date LIKE '2016%' AND (SELECT AVG(runtime) FROM movie) * 0.35 < movie.runtime GROUP BY production_company.company_id;",
        "retrieved": [
            449
        ],
        "token_usage": {
            "tokens": 2118,
            "cost": 0.00041579999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100"
    },
    {
        "sample_id": 459,
        "pred_sql": "SELECT COUNT(movie.movie_id) FROM movie INNER JOIN movie_cast AS T2 ON movie.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Bob Peterson'",
        "retrieved": [
            452
        ],
        "token_usage": {
            "tokens": 2096,
            "cost": 0.0003949499999999999
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Bob Peterson'"
    },
    {
        "sample_id": 462,
        "pred_sql": "SELECT movie.title FROM movie INNER JOIN movie_cast ON movie.movie_id = movie_cast.movie_id INNER JOIN person ON movie_cast.person_id = person.person_id WHERE person.person_name = 'Jim Carrey'",
        "retrieved": [
            492
        ],
        "token_usage": {
            "tokens": 2049,
            "cost": 0.00037124999999999994
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'"
    },
    {
        "sample_id": 506,
        "pred_sql": "SELECT movie.title FROM movie JOIN movie_company ON movie.movie_id = movie_company.movie_id JOIN production_company ON movie_company.company_id = production_company.company_id WHERE production_company.company_name = 'Warner Bros. Pictures' ORDER BY movie.revenue DESC LIMIT 1;",
        "retrieved": [
            422
        ],
        "token_usage": {
            "tokens": 2015,
            "cost": 0.0003711
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1"
    },
    {
        "sample_id": 7925,
        "pred_sql": "SELECT reviews.author_id FROM podcasts INNER JOIN reviews ON podcasts.podcast_id = reviews.podcast_id WHERE podcasts.title = 'Pop Rocket' AND reviews.created_at LIKE '2016%' AND reviews.rating < 5;",
        "retrieved": [
            7931
        ],
        "token_usage": {
            "tokens": 927,
            "cost": 0.00020969999999999997
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Pop Rocket' AND T2.created_at LIKE '2016-%' AND T2.rating < 5"
    },
    {
        "sample_id": 7961,
        "pred_sql": "SELECT DISTINCT podcasts.title, reviews.content, reviews.rating FROM podcasts INNER JOIN reviews ON podcasts.podcast_id = reviews.podcast_id INNER JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE reviews.content LIKE '%love%' AND categories.category = 'art' AND reviews.created_at BETWEEN '2018-01-01' AND '2019-12-31'",
        "retrieved": [
            7928
        ],
        "token_usage": {
            "tokens": 975,
            "cost": 0.00024074999999999997
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE (T2.created_at LIKE '2018-%' AND T1.category = 'arts' AND T2.content LIKE '%love%') OR (T2.created_at LIKE '2019-%' AND T1.category = 'arts' AND T2.content LIKE '%love%')"
    },
    {
        "sample_id": 7985,
        "pred_sql": "SELECT COUNT(*) FROM reviews WHERE podcast_id = (SELECT podcast_id FROM podcasts WHERE title = 'Please Excuse My Dead Aunt Sally') AND rating = 5;",
        "retrieved": [
            7939
        ],
        "token_usage": {
            "tokens": 919,
            "cost": 0.0001968
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5"
    },
    {
        "sample_id": 7946,
        "pred_sql": "SELECT AVG(reviews.rating) AS average_rating FROM reviews INNER JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE reviews.created_at LIKE '2019%'",
        "retrieved": [
            7933
        ],
        "token_usage": {
            "tokens": 897,
            "cost": 0.00019755
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(rating) FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00-07:00' AND '2019-12-31T23:59:59-07:00'"
    },
    {
        "sample_id": 7966,
        "pred_sql": "SELECT DISTINCT podcasts.title, reviews.content, reviews.rating FROM podcasts INNER JOIN reviews ON reviews.podcast_id = podcasts.podcast_id WHERE reviews.title = 'Hosts bring the show down'",
        "retrieved": [
            7928
        ],
        "token_usage": {
            "tokens": 881,
            "cost": 0.00018749999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT title FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down' )"
    },
    {
        "sample_id": 7956,
        "pred_sql": "SELECT AVG(reviews.rating) AS average_rating FROM reviews INNER JOIN categories ON reviews.podcast_id = categories.podcast_id WHERE categories.category = 'true crime'",
        "retrieved": [
            7937
        ],
        "token_usage": {
            "tokens": 856,
            "cost": 0.0001806
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'"
    },
    {
        "sample_id": 7986,
        "pred_sql": "SELECT AVG(reviews.rating) FROM podcasts INNER JOIN reviews ON podcasts.podcast_id = reviews.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally'",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 935,
            "cost": 0.0002082
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally'"
    },
    {
        "sample_id": 7984,
        "pred_sql": "SELECT podcasts.title FROM podcasts INNER JOIN reviews ON podcasts.podcast_id = reviews.podcast_id WHERE reviews.author_id = 'F7E5A318989779D'",
        "retrieved": [
            7931
        ],
        "token_usage": {
            "tokens": 921,
            "cost": 0.00020429999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT T2.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'F7E5A318989779D'"
    },
    {
        "sample_id": 7945,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(DISTINCT podcast_id) FROM podcasts)) AS percentage FROM categories WHERE category = 'fiction-science-fiction'",
        "retrieved": [
            7919
        ],
        "token_usage": {
            "tokens": 888,
            "cost": 0.00018944999999999997
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN category = 'fiction-science-fiction' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(podcast_id) OR '%' \"percentage\" FROM categories"
    },
    {
        "sample_id": 7944,
        "pred_sql": "SELECT COUNT(*) FROM reviews INNER JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE reviews.rating = 3 AND reviews.created_at BETWEEN '2015-01-01' AND '2015-03-31'",
        "retrieved": [
            7933
        ],
        "token_usage": {
            "tokens": 946,
            "cost": 0.00022514999999999997
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'"
    },
    {
        "sample_id": 7949,
        "pred_sql": "SELECT AVG(reviews.rating) AS average_rating, categories.category FROM categories INNER JOIN podcasts ON podcasts.podcast_id = categories.podcast_id INNER JOIN reviews ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Sitcomadon' GROUP BY categories.category;",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 959,
            "cost": 0.00022439999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT DISTINCT T3.rating, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'Sitcomadon'"
    },
    {
        "sample_id": 7963,
        "pred_sql": "SELECT AVG(reviews.rating) AS average_rating FROM categories INNER JOIN reviews ON categories.podcast_id = reviews.podcast_id WHERE categories.category = 'comedy'",
        "retrieved": [
            7960
        ],
        "token_usage": {
            "tokens": 875,
            "cost": 0.0001848
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'"
    },
    {
        "sample_id": 7935,
        "pred_sql": "SELECT categories.category FROM podcasts INNER JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'SciFi Tech Talk'",
        "retrieved": [
            7923
        ],
        "token_usage": {
            "tokens": 865,
            "cost": 0.00017879999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'SciFi Tech Talk'"
    },
    {
        "sample_id": 7979,
        "pred_sql": "SELECT reviews.content FROM reviews WHERE reviews.title = 'really interesting!' AND reviews.created_at = '2018-04-24T12:05:16'",
        "retrieved": [
            7931
        ],
        "token_usage": {
            "tokens": 917,
            "cost": 0.00019965
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'"
    },
    {
        "sample_id": 7976,
        "pred_sql": "SELECT COUNT(reviews.title) FROM reviews JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Planet Money'",
        "retrieved": [
            7943
        ],
        "token_usage": {
            "tokens": 847,
            "cost": 0.00017879999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT COUNT(T2.podcast_id) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Planet Money'"
    },
    {
        "sample_id": 2066,
        "pred_sql": "SELECT (MAX(year) - MIN(year)) AS years_passed FROM (SELECT groupyear AS year FROM torrents WHERE artist = '2Pac' ORDER BY groupyear)",
        "retrieved": [
            2067
        ],
        "token_usage": {
            "tokens": 656,
            "cost": 0.00014519999999999998
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT ( SELECT groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' ORDER BY groupYear LIMIT 1, 1 ) - groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' AND groupYear = 1991"
    },
    {
        "sample_id": 2049,
        "pred_sql": "SELECT torrents.groupname FROM torrents INNER JOIN tags ON torrents.id = tags.id WHERE tags.tag = 'funk' AND torrents.releasetype = 'single' ORDER BY torrents.groupyear ASC LIMIT 1;",
        "retrieved": [
            2057
        ],
        "token_usage": {
            "tokens": 686,
            "cost": 0.00018074999999999998
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1"
    },
    {
        "sample_id": 2082,
        "pred_sql": "SELECT COUNT(torrents.releasetype) FROM torrents WHERE torrents.releasetype = 'single' AND torrents.groupyear = '1980' AND torrents.artist = 'sugar daddy'",
        "retrieved": [
            2081
        ],
        "token_usage": {
            "tokens": 652,
            "cost": 0.00016395
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT COUNT(releaseType) FROM torrents WHERE artist LIKE 'sugar daddy' AND releaseType LIKE 'Single' AND groupYear = 1980"
    },
    {
        "sample_id": 2076,
        "pred_sql": "SELECT torrents.groupname FROM torrents INNER JOIN tags ON torrents.id = tags.id WHERE tags.tag = 'jazz' AND torrents.groupyear >= '1982' ORDER BY torrents.totalsnatched DESC LIMIT 1",
        "retrieved": [
            2059
        ],
        "token_usage": {
            "tokens": 699,
            "cost": 0.00017864999999999998
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "sample_id": 2073,
        "pred_sql": "SELECT torrents.artist FROM torrents INNER JOIN tags ON torrents.id = tags.id WHERE tags.tag = 'funk' AND torrents.totalsnatched <= '100' AND torrents.groupyear = '1980'",
        "retrieved": [
            2072
        ],
        "token_usage": {
            "tokens": 695,
            "cost": 0.00017489999999999997
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.totalSnatched <= 100"
    },
    {
        "sample_id": 2089,
        "pred_sql": "SELECT (COUNT(CASE WHEN t.releasetype = 'album' AND t.artist = 'united.states' THEN 1 END) * 100.0 / COUNT(CASE WHEN t.releasetype = 'album' THEN 1 END)) AS percentage FROM torrents t WHERE t.groupyear BETWEEN '1979' AND '1982';",
        "retrieved": [
            2081
        ],
        "token_usage": {
            "tokens": 676,
            "cost": 0.00017384999999999997
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.tag LIKE 'united.states' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.releaseType) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1979 AND 1982 AND T1.releaseType LIKE 'album'"
    },
    {
        "sample_id": 2045,
        "pred_sql": "SELECT torrents.groupname FROM torrents WHERE torrents.artist = 'Ron Hunt' AND torrents.groupyear = '1979' AND torrents.releasetype = 'single' AND torrents.totalsnatched = '239';",
        "retrieved": [
            2081
        ],
        "token_usage": {
            "tokens": 669,
            "cost": 0.0001692
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239"
    },
    {
        "sample_id": 2065,
        "pred_sql": "SELECT COUNT(*) AS count, torrents.releasetype FROM torrents WHERE torrents.artist = '50 cent' AND torrents.groupyear BETWEEN '2010' AND '2015' AND (torrents.releasetype = 'album' OR torrents.releasetype = 'Single-Tables') GROUP BY torrents.releasetype;",
        "retrieved": [
            2064
        ],
        "token_usage": {
            "tokens": 726,
            "cost": 0.00018674999999999999
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT COUNT(id), ( SELECT COUNT(id) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'album' ) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'Single'"
    },
    {
        "sample_id": 2052,
        "pred_sql": "SELECT tags.tag, torrents.artist FROM torrents INNER JOIN tags ON torrents.id = tags.id WHERE torrents.releasetype = 'single' ORDER BY torrents.totalsnatched DESC LIMIT 1;",
        "retrieved": [
            2059
        ],
        "token_usage": {
            "tokens": 725,
            "cost": 0.0001974
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "sample_id": 4985,
        "pred_sql": "SELECT AVG(person.height) FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id INNER JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id INNER JOIN event ON competitor_event.event_id = event.id INNER JOIN sport ON event.sport_id = sport.id WHERE person.gender = 'M' AND sport.sport_name = 'Basketball'",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1591,
            "cost": 0.0003561
        },
        "db_id": "olympics",
        "gold_sql": "SELECT AVG(T5.height) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T1.sport_name = 'Basketball' AND T5.gender = 'M'"
    },
    {
        "sample_id": 5000,
        "pred_sql": "SELECT sport.sport_name FROM sport WHERE sport.id = 19;",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1411,
            "cost": 0.00025574999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT sport_name FROM sport WHERE id = 19"
    },
    {
        "sample_id": 4957,
        "pred_sql": "SELECT city.city_name FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games ON games_city.games_id = games.id WHERE games.games_year = 1976",
        "retrieved": [
            4921
        ],
        "token_usage": {
            "tokens": 1467,
            "cost": 0.0002808
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')"
    },
    {
        "sample_id": 4919,
        "pred_sql": "SELECT noc_region.noc FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id INNER JOIN person_region ON person.id = person_region.person_id INNER JOIN noc_region ON person_region.region_id = noc_region.id WHERE person.gender = 'M' AND person.height != '0' ORDER BY person.height DESC LIMIT 1;",
        "retrieved": [
            5016
        ],
        "token_usage": {
            "tokens": 1537,
            "cost": 0.00032504999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1"
    },
    {
        "sample_id": 4974,
        "pred_sql": "SELECT COUNT(DISTINCT games_competitor.person_id) AS athlete_count FROM competitor_event INNER JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id INNER JOIN person_region ON games_competitor.person_id = person_region.person_id WHERE person_region.region_id = 151 AND competitor_event.medal_id IS NOT NULL;",
        "retrieved": [
            5016
        ],
        "token_usage": {
            "tokens": 1552,
            "cost": 0.00033674999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4"
    },
    {
        "sample_id": 5028,
        "pred_sql": "SELECT COUNT(games_competitor.person_id) FROM games INNER JOIN games_competitor ON games.id = games_competitor.games_id INNER JOIN person ON games_competitor.person_id = person.id WHERE games.games_year = 1948 AND games.games_name LIKE '%Summer%' AND person.gender = 'M'",
        "retrieved": [
            4942
        ],
        "token_usage": {
            "tokens": 1532,
            "cost": 0.0003099
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'"
    },
    {
        "sample_id": 4996,
        "pred_sql": "SELECT games.games_name FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games ON games_city.games_id = games.id INNER JOIN games_competitor ON games.id = games_competitor.games_id WHERE city.city_name = 'Los Angeles' GROUP BY games.id ORDER BY COUNT(games_competitor.id) DESC LIMIT 1;",
        "retrieved": [
            4921
        ],
        "token_usage": {
            "tokens": 1548,
            "cost": 0.00032445
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1"
    },
    {
        "sample_id": 5040,
        "pred_sql": "SELECT games.games_name FROM games INNER JOIN games_competitor ON games.id = games_competitor.games_id WHERE games_competitor.games_id = 13;",
        "retrieved": [
            5069
        ],
        "token_usage": {
            "tokens": 1457,
            "cost": 0.00028064999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT DISTINCT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T2.games_id = 13"
    },
    {
        "sample_id": 5078,
        "pred_sql": "SELECT person.full_name, person.height, games_competitor.age FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id ORDER BY person.height DESC LIMIT 1;",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1468,
            "cost": 0.00028409999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1"
    },
    {
        "sample_id": 4941,
        "pred_sql": "SELECT full_name, MIN(age) AS youngest_age FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id",
        "retrieved": [
            4988
        ],
        "token_usage": {
            "tokens": 1504,
            "cost": 0.000303
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1"
    },
    {
        "sample_id": 4920,
        "pred_sql": "SELECT COUNT(*) FROM games_competitor AS gc INNER JOIN person AS p ON gc.person_id = p.id INNER JOIN person_region AS pr ON p.id = pr.person_id INNER JOIN noc_region AS nr ON pr.region_id = nr.id WHERE nr.noc = 'FIN' AND p.gender = 'F';",
        "retrieved": [
            4980
        ],
        "token_usage": {
            "tokens": 1568,
            "cost": 0.00031214999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'"
    },
    {
        "sample_id": 5075,
        "pred_sql": "SELECT person.full_name FROM competitor_event INNER JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id INNER JOIN medal ON competitor_event.medal_id = medal.id WHERE medal.medal_name = 'gold'",
        "retrieved": [
            4945
        ],
        "token_usage": {
            "tokens": 1516,
            "cost": 0.00030074999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'"
    },
    {
        "sample_id": 5020,
        "pred_sql": "SELECT COUNT(*) AS number_of_games FROM games_city INNER JOIN games ON games_city.games_id = games.id WHERE games_year BETWEEN 1900 AND 1992 AND games_city.city_id = (SELECT id FROM city WHERE city_name = 'London')",
        "retrieved": [
            4921
        ],
        "token_usage": {
            "tokens": 1495,
            "cost": 0.0002967
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992"
    },
    {
        "sample_id": 4987,
        "pred_sql": "SELECT noc_region.region_name FROM person_region INNER JOIN noc_region ON person_region.region_id = noc_region.id INNER JOIN person ON person_region.person_id = person.id WHERE person.full_name = 'Yao Ming'",
        "retrieved": [
            5016
        ],
        "token_usage": {
            "tokens": 1426,
            "cost": 0.00026294999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'"
    },
    {
        "sample_id": 4938,
        "pred_sql": "SELECT COUNT(games_competitor.id) FROM games_competitor INNER JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'Martina Kohlov'",
        "retrieved": [
            4937
        ],
        "token_usage": {
            "tokens": 1453,
            "cost": 0.00028004999999999995
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'"
    },
    {
        "sample_id": 4948,
        "pred_sql": "SELECT COUNT(*) FROM games_city INNER JOIN games ON games_city.games_id = games.id WHERE games.games_name LIKE '%Summer%' AND games_city.city_id = (SELECT id FROM city WHERE city_name = 'Stockholm')",
        "retrieved": [
            4921
        ],
        "token_usage": {
            "tokens": 1490,
            "cost": 0.00029685
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'"
    },
    {
        "sample_id": 5065,
        "pred_sql": "SELECT city.city_name FROM games_city INNER JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'Paris'",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1415,
            "cost": 0.0002577
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'"
    },
    {
        "sample_id": 4949,
        "pred_sql": "SELECT noc_region.region_name FROM person_region INNER JOIN noc_region AS T2 ON person_region.region_id = T2.id GROUP BY noc_region.region_name ORDER BY COUNT(person_region.person_id) DESC LIMIT 1",
        "retrieved": [
            5016
        ],
        "token_usage": {
            "tokens": 1443,
            "cost": 0.00027225
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1"
    },
    {
        "sample_id": 4978,
        "pred_sql": "SELECT DISTINCT medal.medal_name, person.full_name FROM medal INNER JOIN competitor_event AS T2 ON medal.id = T2.medal_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN person AS T4 ON T3.person_id = T4.id INNER JOIN event AS T5 ON T2.event_id = T5.id INNER JOIN sport AS T6 ON T5.sport_id = T6.id WHERE medal.medal_name = 'Gold' AND T6.sport_name = 'Cycling'",
        "retrieved": [
            4979
        ],
        "token_usage": {
            "tokens": 1611,
            "cost": 0.00035324999999999994
        },
        "db_id": "olympics",
        "gold_sql": "SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1"
    },
    {
        "sample_id": 4925,
        "pred_sql": "SELECT AVG(person.height) FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id INNER JOIN person_region ON person.id = person_region.person_id INNER JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Finland' AND person.gender = 'M'",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1503,
            "cost": 0.00030284999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'"
    },
    {
        "sample_id": 5006,
        "pred_sql": "SELECT COUNT(event.event_name) FROM sport INNER JOIN event AS T2 ON sport.id = T2.sport_id WHERE sport.sport_name = 'cycling'",
        "retrieved": [
            4930
        ],
        "token_usage": {
            "tokens": 1432,
            "cost": 0.00026834999999999994
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Cycling'"
    },
    {
        "sample_id": 5002,
        "pred_sql": "SELECT sport.id FROM sport WHERE sport.sport_name = 'hockey'",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1397,
            "cost": 0.0002487
        },
        "db_id": "olympics",
        "gold_sql": "SELECT id FROM sport WHERE sport_name = 'Hockey'"
    },
    {
        "sample_id": 5068,
        "pred_sql": "SELECT person.full_name FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id ORDER BY games_competitor.age ASC LIMIT 1;",
        "retrieved": [
            4937
        ],
        "token_usage": {
            "tokens": 1470,
            "cost": 0.00029069999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1"
    },
    {
        "sample_id": 5043,
        "pred_sql": "SELECT event.event_name FROM event INNER JOIN sport ON event.sport_id = sport.id WHERE sport.sport_name = 'Basketball'",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1432,
            "cost": 0.00026924999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Basketball'"
    },
    {
        "sample_id": 4932,
        "pred_sql": "SELECT games.id FROM games_competitor INNER JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'Jessica Carolina Aguilera Aguilera'",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1459,
            "cost": 0.00028005
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'"
    },
    {
        "sample_id": 5030,
        "pred_sql": "SELECT T3.full_name, MIN(T2.age) AS youngest_age FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_year = 2014 AND T1.games_name LIKE '%Winter%' GROUP BY T3.full_name ORDER BY youngest_age ASC LIMIT 1;",
        "retrieved": [
            4980
        ],
        "token_usage": {
            "tokens": 1602,
            "cost": 0.00033345
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2014 Winter' ORDER BY T2.age LIMIT 1"
    },
    {
        "sample_id": 4952,
        "pred_sql": "SELECT COUNT(games_competitor.person_id) FROM games INNER JOIN games_competitor ON games.id = games_competitor.games_id WHERE games.games_name = '1992 Summer'",
        "retrieved": [
            5011
        ],
        "token_usage": {
            "tokens": 1484,
            "cost": 0.0002856
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'"
    },
    {
        "sample_id": 4924,
        "pred_sql": "SELECT COUNT(*) AS times_held FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games ON games_city.games_id = games.id WHERE city.city_name = 'London';",
        "retrieved": [
            4921
        ],
        "token_usage": {
            "tokens": 1436,
            "cost": 0.00026355
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'"
    },
    {
        "sample_id": 4955,
        "pred_sql": "SELECT age, COUNT(*) as count FROM games_competitor GROUP BY age ORDER BY count DESC LIMIT 1;",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1447,
            "cost": 0.00027059999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1"
    },
    {
        "sample_id": 4971,
        "pred_sql": "SELECT games_year FROM games WHERE games_name LIKE '%Summer%' GROUP BY games_year HAVING COUNT(DISTINCT games_year) = COUNT(games_year);",
        "retrieved": [
            5011
        ],
        "token_usage": {
            "tokens": 1472,
            "cost": 0.00027975
        },
        "db_id": "olympics",
        "gold_sql": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1"
    },
    {
        "sample_id": 5031,
        "pred_sql": "SELECT AVG(games_competitor.age) AS average_age FROM games INNER JOIN games_competitor ON games.id = games_competitor.games_id WHERE games.games_year = 1988 AND games.games_name LIKE '%Winter%'",
        "retrieved": [
            4980
        ],
        "token_usage": {
            "tokens": 1542,
            "cost": 0.00029654999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1988 Winter'"
    },
    {
        "sample_id": 5073,
        "pred_sql": "SELECT city.city_name FROM games_city INNER JOIN city AS T2 ON games_city.city_id = T2.id INNER JOIN games AS T3 ON games_city.games_id = T3.id WHERE T3.games_name = '2004 Summer'",
        "retrieved": [
            4921
        ],
        "token_usage": {
            "tokens": 1473,
            "cost": 0.00028575
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'"
    },
    {
        "sample_id": 5024,
        "pred_sql": "SELECT games.games_name FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games ON games_city.games_id = games.id WHERE city.city_name = 'Beijing' AND games.games_year = 2008;",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1476,
            "cost": 0.00029204999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Beijing' AND T3.games_year = 2008"
    },
    {
        "sample_id": 5060,
        "pred_sql": "SELECT (COUNT(CASE WHEN medal.medal_name = 'Bronze' THEN 1 END) * 100.0 / COUNT(*)) AS bronze_percentage FROM competitor_event INNER JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id INNER JOIN event ON competitor_event.event_id = event.id INNER JOIN sport ON event.sport_id = sport.id WHERE sport.sport_name = 'Basketball' AND games_competitor.gender = 'M';",
        "retrieved": [
            4942
        ],
        "token_usage": {
            "tokens": 1565,
            "cost": 0.0003306
        },
        "db_id": "olympics",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'"
    },
    {
        "sample_id": 5054,
        "pred_sql": "SELECT DISTINCT city.city_name FROM city INNER JOIN games_city ON city.id = games_city.city_id INNER JOIN games_competitor ON games_city.games_id = games_competitor.games_id INNER JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'John Aalberg'",
        "retrieved": [
            5050
        ],
        "token_usage": {
            "tokens": 1551,
            "cost": 0.00031725
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'John Aalberg'"
    },
    {
        "sample_id": 2937,
        "pred_sql": "SELECT T.name, SUM(PT.rebounds) AS total_rebounds FROM teams AS T INNER JOIN players_teams AS PT ON T.tmid = PT.tmid AND T.year = PT.year WHERE T.playoff IS NULL AND T.year = '1997' GROUP BY T.name ORDER BY total_rebounds DESC LIMIT 1;",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4155,
            "cost": 0.0007150499999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 1997 ORDER BY T1.rebounds DESC LIMIT 1"
    },
    {
        "sample_id": 2910,
        "pred_sql": "SELECT (COUNT(DISTINCT p.playerid) * 100.0 / (SELECT COUNT(DISTINCT playerid) FROM players WHERE college = 'Auburn')) AS percentage FROM awards_players ap JOIN players p ON ap.playerid = p.playerid WHERE p.college = 'Auburn' AND ap.award = 'All-Defensive Second Team'",
        "retrieved": [
            2893
        ],
        "token_usage": {
            "tokens": 4113,
            "cost": 0.0007172999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.award = 'All-Defensive Second Team' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Auburn'"
    },
    {
        "sample_id": 2821,
        "pred_sql": "SELECT DISTINCT c.coachid FROM coaches c WHERE c.lgid = 'NBA' AND c.coachid IN (SELECT coachid FROM coaches WHERE lgid = 'NBA' GROUP BY coachid HAVING COUNT(DISTINCT tmid) > 2)",
        "retrieved": [
            2823
        ],
        "token_usage": {
            "tokens": 4136,
            "cost": 0.00070455
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2"
    },
    {
        "sample_id": 2841,
        "pred_sql": "SELECT COUNT(awards_coaches.id) FROM awards_coaches WHERE awards_coaches.year BETWEEN '1962' AND '1975'",
        "retrieved": [
            2930
        ],
        "token_usage": {
            "tokens": 4048,
            "cost": 0.0006611999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 1975"
    },
    {
        "sample_id": 2830,
        "pred_sql": "SELECT COUNT(DISTINCT T2.playerid) FROM awards_players INNER JOIN players AS T2 ON awards_players.playerid = T2.playerid WHERE awards_players.award = 'MVP' AND T2.birthcity = 'Whitestone'",
        "retrieved": [
            2874
        ],
        "token_usage": {
            "tokens": 4071,
            "cost": 0.0006804
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'Houston'"
    },
    {
        "sample_id": 2846,
        "pred_sql": "SELECT MIN(players.weight) AS min_weight FROM players INNER JOIN players_teams ON players.playerid = players_teams.playerid WHERE players.college = 'UCLA' AND players.playerid IN (SELECT playerid FROM player_allstar)",
        "retrieved": [
            2820
        ],
        "token_usage": {
            "tokens": 4056,
            "cost": 0.0006759
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT MIN(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'UCLA'"
    },
    {
        "sample_id": 2904,
        "pred_sql": "SELECT CAST(teams.lost AS FLOAT) * 100 / (teams.won + teams.lost) AS percentage_lost FROM teams WHERE teams.name = 'Houston Mavericks'",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4031,
            "cost": 0.0006761999999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT CAST(SUM(lost) AS REAL) * 100 / SUM(games) FROM teams WHERE name = 'Houston Mavericks'"
    },
    {
        "sample_id": 2876,
        "pred_sql": "SELECT COUNT(coachid) FROM awards_coaches WHERE year BETWEEN '1950' AND '1970' GROUP BY coachid HAVING COUNT(award) > 1;",
        "retrieved": [
            2930
        ],
        "token_usage": {
            "tokens": 4089,
            "cost": 0.0006839999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(coachID) FROM awards_coaches WHERE year BETWEEN 1950 AND 1970 GROUP BY coachID HAVING COUNT(coachID) > 1"
    },
    {
        "sample_id": 2951,
        "pred_sql": "SELECT teams.name FROM players INNER JOIN awards_players ON players.playerid = awards_players.playerid INNER JOIN players_teams ON players.playerid = players_teams.playerid INNER JOIN teams ON players_teams.tmid = teams.tmid WHERE awards_players.year = '1997' AND awards_players.award = 'rebound champion'",
        "retrieved": [
            2947
        ],
        "token_usage": {
            "tokens": 4098,
            "cost": 0.0006916499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.year = 1997 GROUP BY T1.name ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1"
    },
    {
        "sample_id": 2889,
        "pred_sql": "SELECT players.firstname, players.lastname, (strftime('%Y', 'now') - strftime('%Y', players.birthdate)) AS age FROM awards_players JOIN players ON awards_players.playerid = players.playerid WHERE awards_players.award = 'Finals MVP' AND awards_players.year = '2003'",
        "retrieved": [
            2883
        ],
        "token_usage": {
            "tokens": 4075,
            "cost": 0.0007043999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.firstName, T1.middleName, T1.lastName , 2003 - strftime('%Y', T1.birthDate) FROM awards_players AS T2 JOIN players AS T1 ON T2.playerID = T1.playerID WHERE T2.award = 'Finals MVP' AND T2.year = 2003"
    },
    {
        "sample_id": 2908,
        "pred_sql": "SELECT (CAST(SUM(CASE WHEN year = '1946' AND tmid = 'CHS' THEN w END) AS FLOAT) / NULLIF(SUM(CASE WHEN year = '1946' AND tmid = 'CHS' THEN w + l END), 0)) * 100) - (CAST(SUM(CASE WHEN year = '1947' AND tmid = 'CHS' THEN w END) AS FLOAT) / NULLIF(SUM(CASE WHEN year = '1947' AND tmid = 'CHS' THEN w + l END), 0)) AS winning_rate_difference FROM series_post WHERE tmidwinner = 'CHS' OR tmidloser = 'CHS';",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4162,
            "cost": 0.00074625
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1947 THEN 1 ELSE 0 END) - CAST(SUM(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1946 THEN 1 ELSE 0 END) FROM series_post"
    },
    {
        "sample_id": 2902,
        "pred_sql": "SELECT COUNT(DISTINCT T1.playerid) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerid = T2.playerid WHERE T2.season_id = 1973 AND T1.race = 'B'",
        "retrieved": [
            2814
        ],
        "token_usage": {
            "tokens": 4076,
            "cost": 0.0006829499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1973 AND T1.race = 'B'"
    },
    {
        "sample_id": 2798,
        "pred_sql": "SELECT teams.name, teams.won FROM teams WHERE teams.year = '2005' AND teams.won > (SELECT won FROM teams WHERE year = '2004')",
        "retrieved": [
            2804
        ],
        "token_usage": {
            "tokens": 4082,
            "cost": 0.0006815999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.name, T1.won FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE year = 2004 ) AS T2 on T1.tmID = T2.tmID WHERE T1.year = 2005 and T1.won > T2.won"
    },
    {
        "sample_id": 2845,
        "pred_sql": "SELECT players.lastname, players.firstname FROM players JOIN player_allstar ON players.playerid = player_allstar.playerid WHERE players.height > 75",
        "retrieved": [
            2883
        ],
        "token_usage": {
            "tokens": 4006,
            "cost": 0.00066435
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.height > 75"
    },
    {
        "sample_id": 2933,
        "pred_sql": "SELECT players.playerid FROM players INNER JOIN players_teams ON players.playerid = players_teams.playerid WHERE players_teams.year = '1988' AND players_teams.tmid NOT IN (SELECT tmid FROM teams WHERE year = '1988' AND playoff IS NOT NULL) ORDER BY players_teams.turnovers DESC LIMIT 1;",
        "retrieved": [
            2947
        ],
        "token_usage": {
            "tokens": 4141,
            "cost": 0.0007169999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T2.playerID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.PostGP = 0 AND T1.year = 1988 ORDER BY T1.turnovers DESC LIMIT 1"
    },
    {
        "sample_id": 2856,
        "pred_sql": "SELECT COUNT(DISTINCT players.playerid) FROM players JOIN players_teams ON players.playerid = players_teams.playerid JOIN teams ON players_teams.tmid = teams.tmid WHERE teams.year = '1990' AND CAST(teams.won AS FLOAT) / (CAST(teams.won AS FLOAT) + CAST(teams.lost AS FLOAT)) > 0.75;",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4083,
            "cost": 0.00070425
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990"
    },
    {
        "sample_id": 2864,
        "pred_sql": "SELECT players.firstname, players.lastname, COUNT(awards_players.award) AS award_count \nFROM players \nJOIN awards_players ON players.playerid = awards_players.playerid \nWHERE players.deathdate != '0000-00-00' \nGROUP BY players.playerid \nORDER BY award_count DESC \nLIMIT 1;",
        "retrieved": [
            2893
        ],
        "token_usage": {
            "tokens": 4074,
            "cost": 0.0006979499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1"
    },
    {
        "sample_id": 2885,
        "pred_sql": "SELECT coachid, year, tmid FROM coaches WHERE year = '1988' AND won > lost ORDER BY won DESC LIMIT 1;",
        "retrieved": [
            2804
        ],
        "token_usage": {
            "tokens": 4074,
            "cost": 0.0006795
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT coachID FROM coaches WHERE year = 1988 ORDER BY won - lost DESC LIMIT 1"
    },
    {
        "sample_id": 2932,
        "pred_sql": "SELECT players.firstname, players.lastname FROM players INNER JOIN players_teams ON players.playerid = players_teams.playerid INNER JOIN teams ON players_teams.tmid = teams.tmid WHERE players_teams.year = '1996' AND teams.playoff IS NULL ORDER BY players_teams.steals DESC LIMIT 1;",
        "retrieved": [
            2947
        ],
        "token_usage": {
            "tokens": 4124,
            "cost": 0.00070725
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 AND T2.PostGP = 0 ORDER BY T2.steals DESC LIMIT 1"
    },
    {
        "sample_id": 2898,
        "pred_sql": "SELECT DISTINCT coaches.coachid, coaches.year, teams.tmid FROM coaches INNER JOIN teams ON coaches.tmid = teams.tmid WHERE teams.name = 'Oklahoma City Thunder'",
        "retrieved": [
            2804
        ],
        "token_usage": {
            "tokens": 4046,
            "cost": 0.0006663
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT DISTINCT coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE name = 'Oklahoma City Thunder'"
    },
    {
        "sample_id": 2870,
        "pred_sql": "SELECT c.coachid, MAX(c.won) AS max_won_games FROM awards_coaches ac INNER JOIN coaches c ON ac.coachid = c.coachid WHERE ac.award = 'ABA Coach of the Year' GROUP BY c.coachid ORDER BY max_won_games DESC LIMIT 1;",
        "retrieved": [
            2930
        ],
        "token_usage": {
            "tokens": 4128,
            "cost": 0.00070425
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.award = 'ABA Coach of the Year' GROUP BY T1.coachID, T1.won ORDER BY T1.won DESC LIMIT 1"
    },
    {
        "sample_id": 2919,
        "pred_sql": "SELECT players.firstname || ' ' || players.middlename || ' ' || players.lastname AS full_name, players_teams.tmid, MAX(player_allstar.blocks) AS max_blocks\nFROM players\nJOIN players_teams ON players.playerid = players_teams.playerid\nJOIN player_allstar ON players.playerid = player_allstar.playerid\nWHERE players.birthcity = 'Atlanta'\nGROUP BY players.playerid, players_teams.tmid\nORDER BY max_blocks DESC\nLIMIT 1;",
        "retrieved": [
            2883
        ],
        "token_usage": {
            "tokens": 4116,
            "cost": 0.0007245
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.firstName, T1.lastName, T2.tmID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Atlanta' ORDER BY T2.blocks DESC LIMIT 1"
    },
    {
        "sample_id": 2873,
        "pred_sql": "SELECT teams.name FROM teams INNER JOIN draft ON teams.tmid = draft.tmid INNER JOIN players ON draft.playerid = players.playerid WHERE players.firstname = 'Mike' AND players.lastname = 'Lynn'",
        "retrieved": [
            2867
        ],
        "token_usage": {
            "tokens": 4157,
            "cost": 0.0006906
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.name FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.draftYear WHERE T2.firstName = 'Mike' AND T2.lastName = 'Lynn'"
    },
    {
        "sample_id": 2946,
        "pred_sql": "SELECT teams.name FROM players_teams INNER JOIN teams ON players_teams.tmid = teams.tmid WHERE players_teams.year = '2000' AND players_teams.gp = '82' AND players_teams.minutes = (SELECT MIN(minutes) FROM players_teams WHERE year = '2000' AND gp = '82')",
        "retrieved": [
            2947
        ],
        "token_usage": {
            "tokens": 4129,
            "cost": 0.0007061999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = 82 AND T2.year = 2000 GROUP BY T1.tmID ORDER BY SUM(T2.PostMinutes) ASC LIMIT 1"
    },
    {
        "sample_id": 2938,
        "pred_sql": "SELECT players_teams.tmid FROM draft INNER JOIN players ON draft.playerid = players.playerid INNER JOIN players_teams ON players.playerid = players_teams.playerid WHERE draft.draftround = 1 AND draft.draftselection = 6 AND draft.draftyear = '1976' AND players_teams.year = '1976';",
        "retrieved": [
            2808
        ],
        "token_usage": {
            "tokens": 4115,
            "cost": 0.0006942
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T2.tmID FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 6 AND T1.draftYear = 1976"
    },
    {
        "sample_id": 2842,
        "pred_sql": "SELECT coachid FROM awards_coaches WHERE year BETWEEN '1970' AND '1990' GROUP BY coachid HAVING COUNT(award) = 2;",
        "retrieved": [
            2802
        ],
        "token_usage": {
            "tokens": 4020,
            "cost": 0.0006587999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID, award HAVING COUNT(award) = 2"
    },
    {
        "sample_id": 2943,
        "pred_sql": "SELECT SUM(pt.points) AS total_points FROM players AS p INNER JOIN players_teams AS pt ON p.playerid = pt.playerid WHERE p.pos IN ('C', 'F', 'G') AND p.birthdate = (SELECT MAX(birthdate) FROM players WHERE pos IN ('C', 'F', 'G'))",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4122,
            "cost": 0.0006925499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.pos = 'C-F-G' GROUP BY T2.playerID, T2.year ORDER BY T2.year DESC LIMIT 1"
    },
    {
        "sample_id": 2799,
        "pred_sql": "SELECT teams.name, teams.o_pts FROM teams WHERE (teams.homewon * 1.0 / (teams.homewon + teams.homelost)) > 0.8",
        "retrieved": [
            2804
        ],
        "token_usage": {
            "tokens": 4046,
            "cost": 0.0006604499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT name, o_pts FROM teams WHERE CAST((homeWon - homeLost) AS REAL) * 100 / games > 80"
    },
    {
        "sample_id": 2940,
        "pred_sql": "SELECT p.weight, p.height FROM players p INNER JOIN player_allstar pa ON p.playerid = pa.playerid GROUP BY p.playerid ORDER BY SUM(pa.rebounds) DESC LIMIT 1;",
        "retrieved": [
            2820
        ],
        "token_usage": {
            "tokens": 4082,
            "cost": 0.0006883499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.weight, T1.height FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID ORDER BY T2.rebounds DESC LIMIT 1"
    },
    {
        "sample_id": 2840,
        "pred_sql": "SELECT players.lastname FROM players INNER JOIN players_teams ON players.playerid = players_teams.playerid WHERE players_teams.tmid = 'BLB'",
        "retrieved": [
            2883
        ],
        "token_usage": {
            "tokens": 4003,
            "cost": 0.0006648
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'BLB'"
    },
    {
        "sample_id": 2913,
        "pred_sql": "SELECT DISTINCT player_allstar.playerid FROM player_allstar INNER JOIN players ON player_allstar.playerid = players.playerid WHERE player_allstar.season_id = 1996 AND player_allstar.ft_made IS NOT NULL AND player_allstar.ft_attempted IS NOT NULL AND (player_allstar.ft_made * 1.0 / player_allstar.ft_attempted) > 0.7;",
        "retrieved": [
            2914
        ],
        "token_usage": {
            "tokens": 4149,
            "cost": 0.0007181999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT playerID FROM player_allstar WHERE season_id = 1996 AND CAST(ft_made AS REAL) * 100 / ft_attempted > 70"
    },
    {
        "sample_id": 2852,
        "pred_sql": "SELECT MAX(players_teams.points) AS max_points FROM teams INNER JOIN players_teams ON teams.tmid = players_teams.tmid AND teams.year = players_teams.year WHERE teams.rank = 1 AND teams.year BETWEEN '1950' AND '1970'",
        "retrieved": [
            2854
        ],
        "token_usage": {
            "tokens": 4078,
            "cost": 0.0006769499999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT MAX(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1950 AND 1970 AND T1.rank = 1"
    },
    {
        "sample_id": 4029,
        "pred_sql": "SELECT COUNT(tips.tip_length) * 100.0 / (SELECT COUNT(*) FROM tips) AS medium_tip_percentage, users.user_yelping_since_year FROM tips INNER JOIN users ON tips.user_id = users.user_id WHERE tips.tip_length = (SELECT AVG(tip_length) FROM tips)",
        "retrieved": [
            3909
        ],
        "token_usage": {
            "tokens": 2104,
            "cost": 0.0003876
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.tip_length = 'Medium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tip_length), T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id"
    },
    {
        "sample_id": 3913,
        "pred_sql": "SELECT business.business_id, COUNT(reviews.review_stars) AS review_count, STDEV(reviews.review_stars) AS stddev_review_stars \nFROM business \nINNER JOIN reviews ON business.business_id = reviews.business_id \nWHERE business.active = 'True' \nGROUP BY business.business_id \nORDER BY review_count DESC \nLIMIT 1;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2293,
            "cost": 0.00047894999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.category_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Reviews AS T3 ON T3.business_id = T1.business_id WHERE T2.category_name = 'Hotels & Travel' GROUP BY T2.category_id ORDER BY COUNT(T2.category_id) DESC LIMIT 1"
    },
    {
        "sample_id": 3876,
        "pred_sql": "SELECT AVG(users.user_average_stars) FROM users JOIN reviews ON users.user_id = reviews.user_id JOIN business ON reviews.business_id = business.business_id WHERE users.user_id = 3 AND business.state = 'Arizona'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2063,
            "cost": 0.0003783
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state LIKE 'AZ' AND T2.user_id = 3"
    },
    {
        "sample_id": 3987,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business WHERE business.city = 'Phoenix' AND business.state = 'Arizona' AND business.stars = '2'",
        "retrieved": [
            3898
        ],
        "token_usage": {
            "tokens": 2033,
            "cost": 0.0003657
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND state = 'AZ' AND stars = 2"
    },
    {
        "sample_id": 3945,
        "pred_sql": "SELECT business.city FROM business INNER JOIN business_hours AS T2 ON business.business_id = T2.business_id INNER JOIN days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time = '18:00' AND T2.opening_time = '13:00' AND T3.day_of_week = '6'",
        "retrieved": [
            3947
        ],
        "token_usage": {
            "tokens": 2157,
            "cost": 0.00040859999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '6PM' AND T2.opening_time LIKE '1PM' AND T3.day_of_week LIKE 'Saturday'"
    },
    {
        "sample_id": 3985,
        "pred_sql": "SELECT uc.compliment_type, u.user_fans FROM users_compliments uc JOIN users u ON uc.user_id = u.user_id WHERE u.user_id < 100 GROUP BY uc.compliment_type ORDER BY SUM(uc.number_of_compliments) DESC LIMIT 1;",
        "retrieved": [
            3850
        ],
        "token_usage": {
            "tokens": 2059,
            "cost": 0.00037769999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100"
    },
    {
        "sample_id": 3928,
        "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nINNER JOIN business_categories bc ON b.business_id = bc.business_id \nINNER JOIN categories c ON bc.category_id = c.category_id \nINNER JOIN business_attributes ba ON b.business_id = ba.business_id \nINNER JOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.active = 'True' \nAND b.city = 'Mesa' \nAND b.state = 'AZ' \nAND b.review_count < (SELECT AVG(review_count) FROM business WHERE active = 'True' AND city = 'Mesa' AND state = 'AZ')",
        "retrieved": [
            4000
        ],
        "token_usage": {
            "tokens": 2192,
            "cost": 0.00044219999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.review_count = 'Low' AND T1.city = 'Mesa' AND T1.active = 'true' AND T1.state = 'AZ'"
    },
    {
        "sample_id": 3786,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'hair removal'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2049,
            "cost": 0.00037305
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Hair Removal'"
    },
    {
        "sample_id": 3781,
        "pred_sql": "SELECT business.business_id FROM business WHERE business.active = 'False' AND business.city = 'Sun City' ORDER BY (SELECT COUNT(*) FROM reviews WHERE reviews.business_id = business.business_id) DESC LIMIT 1;",
        "retrieved": [
            3872
        ],
        "token_usage": {
            "tokens": 2126,
            "cost": 0.00040619999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Sun City' AND T1.active LIKE 'FALSE' GROUP BY T1.business_id ORDER BY COUNT(T2.review_length) DESC LIMIT 1"
    },
    {
        "sample_id": 3939,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) FROM business AS b INNER JOIN business_hours AS bh ON b.business_id = bh.business_id GROUP BY b.business_id HAVING SUM(bh.closing_time - bh.opening_time) = 24 * 60",
        "retrieved": [
            4052
        ],
        "token_usage": {
            "tokens": 2175,
            "cost": 0.00042029999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Open 24 Hours'"
    },
    {
        "sample_id": 4025,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) FROM business JOIN business_attributes ON business.business_id = business_attributes.business_id WHERE business_attributes.attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'full_bar') AND business.stars > 3",
        "retrieved": [
            4103
        ],
        "token_usage": {
            "tokens": 2028,
            "cost": 0.00036405
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'full_bar'"
    },
    {
        "sample_id": 3774,
        "pred_sql": "SELECT (COUNT(CASE WHEN bc.category_id = (SELECT category_id FROM categories WHERE category_name = 'Automotive') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_automotive FROM business b JOIN business_categories bc ON b.business_id = bc.business_id;",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2058,
            "cost": 0.00037664999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Automotive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"percentage\" FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 4080,
        "pred_sql": "SELECT users.user_id, users.user_yelping_since_year FROM users JOIN users_compliments ON users.user_id = users_compliments.user_id WHERE users_compliments.number_of_compliments >= 10 GROUP BY users.user_id LIMIT 5;",
        "retrieved": [
            3936
        ],
        "token_usage": {
            "tokens": 2134,
            "cost": 0.00040019999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T3.user_id, T3.user_yelping_since_year FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.compliment_type = 'profile' AND T2.number_of_compliments = 'Uber' LIMIT 5"
    },
    {
        "sample_id": 3868,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS good_for_kids_count \nFROM business b \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nJOIN business_hours bh ON b.business_id = bh.business_id \nWHERE a.attribute_name = 'Good for Kids' \nAND ba.attribute_value = 'True' \nAND bh.day_id IN (1, 2, 3, 4, 5, 6, 7) \nGROUP BY b.business_id \nHAVING COUNT(DISTINCT bh.day_id) = 7;",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2189,
            "cost": 0.00042599999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Attributes AS T3 ON T1.business_id = T3.business_id INNER JOIN Attributes AS T4 ON T4.attribute_id = T4.attribute_id WHERE T2.day_id IN (1, 2, 3, 4, 5, 6, 7) AND T4.attribute_name = 'Good for Kids' AND T3.attribute_value = 'true'"
    },
    {
        "sample_id": 3920,
        "pred_sql": "SELECT review_length FROM reviews WHERE user_id = 60776 AND business_id = 1;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2079,
            "cost": 0.00035325
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT review_length FROM Reviews WHERE user_id = 60776 AND business_id = 1"
    },
    {
        "sample_id": 4089,
        "pred_sql": "SELECT AVG(tip_length) AS average_tip_length FROM tips INNER JOIN users ON tips.user_id = users.user_id WHERE users.user_average_stars = 3",
        "retrieved": [
            3909
        ],
        "token_usage": {
            "tokens": 2052,
            "cost": 0.00035909999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY COUNT(T2.tip_length) DESC LIMIT 1"
    },
    {
        "sample_id": 4015,
        "pred_sql": "SELECT business_hours.business_id, days.day_of_week, business_hours.opening_time, business_hours.closing_time \nFROM business \nINNER JOIN business_hours ON business.business_id = business_hours.business_id \nINNER JOIN days ON business_hours.day_id = days.day_id \nWHERE business.city = 'Black Canyon City' \nAND business.active = 'True' \nAND business.review_count > (SELECT AVG(review_count) FROM business)",
        "retrieved": [
            4084
        ],
        "token_usage": {
            "tokens": 2135,
            "cost": 0.00040395
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' GROUP BY t2.business_id HAVING T1.review_count > AVG(T1.review_count)"
    },
    {
        "sample_id": 4037,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_votes_funny > 100 AND users.user_fans > 100",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2053,
            "cost": 0.00036554999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT user_id) FROM Reviews WHERE review_votes_funny = 'Uber'"
    },
    {
        "sample_id": 3859,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS good_for_kids_count \nFROM business b \nINNER JOIN business_categories bc ON b.business_id = bc.business_id \nINNER JOIN categories c ON bc.category_id = c.category_id \nINNER JOIN business_attributes ba ON b.business_id = ba.business_id \nINNER JOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE c.category_name = 'Food' \nAND ba.attribute_value = 'True' \nAND a.attribute_name = 'Good for Kids';",
        "retrieved": [
            3959
        ],
        "token_usage": {
            "tokens": 2195,
            "cost": 0.0004521
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T3.stars) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.category_name LIKE 'Food' AND T5.attribute_name LIKE 'Good for Kids' AND T4.attribute_value LIKE 'TRUE'"
    },
    {
        "sample_id": 3922,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) AS count_below_3_stars FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'automotive' AND business.stars < 3;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2179,
            "cost": 0.00041235
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Automotive' AND T1.stars < 3"
    },
    {
        "sample_id": 4094,
        "pred_sql": "SELECT categories.category_name FROM business_categories JOIN business ON business_categories.business_id = business.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE business.stars = '5';",
        "retrieved": [
            3795
        ],
        "token_usage": {
            "tokens": 2041,
            "cost": 0.0003700499999999999
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.stars = 5"
    },
    {
        "sample_id": 3803,
        "pred_sql": "SELECT business.business_id FROM business JOIN business_categories ON business.business_id = business_categories.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE business.stars < 5 AND categories.category_name = 'men's clothing'",
        "retrieved": [
            3795
        ],
        "token_usage": {
            "tokens": 2064,
            "cost": 0.00038114999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Men''s Clothing' AND T3.stars < 5"
    },
    {
        "sample_id": 3831,
        "pred_sql": "SELECT business_hours.opening_time, business_hours.closing_time FROM business_hours WHERE business_id = '53' AND day_id = (SELECT day_id FROM days WHERE day_of_week = 5)",
        "retrieved": [
            3947
        ],
        "token_usage": {
            "tokens": 2117,
            "cost": 0.00038774999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.closing_time - T1.opening_time AS \"opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Friday' AND T1.business_id = 53"
    },
    {
        "sample_id": 4088,
        "pred_sql": "SELECT SUM(tips.likes) FROM tips JOIN users ON tips.user_id = users.user_id WHERE users.user_yelping_since_year = 2010",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2045,
            "cost": 0.00035894999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010"
    },
    {
        "sample_id": 4132,
        "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.active = 'True' \nAND b.city = 'Goodyear' \nAND b.state = 'AZ' \nAND b.review_count > 10;",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2161,
            "cost": 0.0004362
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.review_count = 'High' AND T1.city = 'Goodyear' AND T1.state = 'AZ' AND T1.active = 'true'"
    },
    {
        "sample_id": 3801,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) AS open_business_count \nFROM business \nJOIN business_hours ON business.business_id = business_hours.business_id \nJOIN days ON business_hours.day_id = days.day_id \nWHERE days.day_of_week IN (1, 2, 3, 4) \nAND business.active = 'True' \nAND business_hours.opening_time IS NOT NULL \nAND business_hours.closing_time IS NOT NULL;",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2206,
            "cost": 0.00043844999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id INNER JOIN Days AS T5 ON T4.day_id = T5.day_id WHERE T5.day_of_week LIKE 'Monday' OR T5.day_of_week LIKE 'Tuesday' OR T5.day_of_week LIKE 'Wednesday' OR T5.day_of_week LIKE 'Thursday'"
    },
    {
        "sample_id": 3810,
        "pred_sql": "SELECT COUNT(business.business_id) AS phoenix_business_count, (COUNT(business.business_id) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage FROM business WHERE business.city = 'Phoenix' AND business.active = 'True';",
        "retrieved": [
            3898
        ],
        "token_usage": {
            "tokens": 2037,
            "cost": 0.00036405
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.city) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id"
    },
    {
        "sample_id": 3895,
        "pred_sql": "SELECT business_hours.opening_time FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business.city = 'Chandler' AND business.active = 'True' AND business.review_count = 'medium'",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2216,
            "cost": 0.00041385
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Chandler' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'"
    },
    {
        "sample_id": 3811,
        "pred_sql": "SELECT COUNT(DISTINCT business.city) AS active_cities, (COUNT(DISTINCT business.city) * 100.0 / (SELECT COUNT(DISTINCT city) FROM business)) AS percentage_low_review_cities FROM business JOIN business_categories ON business.business_id = business_categories.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE business.active = 'True' AND categories.category_name = 'life' AND business.review_count < 10 AND business.city = 'Phoenix';",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2123,
            "cost": 0.00041294999999999993
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id"
    },
    {
        "sample_id": 3875,
        "pred_sql": "SELECT AVG(reviews.review_stars) FROM reviews JOIN business ON reviews.business_id = business.business_id WHERE business.city = 'Anthem'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2035,
            "cost": 0.00036149999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Anthem'"
    },
    {
        "sample_id": 3806,
        "pred_sql": "SELECT business_attributes.attribute_value FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN attributes ON business_attributes.attribute_id = attributes.attribute_id INNER JOIN business_attributes ON business.business_id = business_attributes.business_id WHERE business.city = 'Scottsdale' AND attributes.attribute_name = 'fashion' AND business.active = 'True'",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2182,
            "cost": 0.00039434999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T4.category_name LIKE 'Fashion' AND T1.city LIKE 'Scottsdale'"
    },
    {
        "sample_id": 4070,
        "pred_sql": "WITH open_businesses AS (SELECT business.business_id FROM business_categories INNER JOIN categories ON business_categories.category_id = categories.category_id INNER JOIN business_hours ON business_categories.business_id = business_hours.business_id WHERE categories.category_name = 'food' AND business_hours.opening_time <= 700 AND business_hours.closing_time >= 2000) SELECT (COUNT(DISTINCT open_businesses.business_id) * 100.0 / COUNT(DISTINCT business.business_id)) AS percentage FROM business_categories INNER JOIN categories ON business_categories.category_id = categories.category_id INNER JOIN business ON business_categories.business_id = business.business_id WHERE categories.category_name = 'food';",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2256,
            "cost": 0.00046799999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.category_name = 'Food' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.category_name) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id"
    },
    {
        "sample_id": 4126,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) AS business_count FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'food' AND business.stars < 3;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2147,
            "cost": 0.00039315
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.stars < 3"
    },
    {
        "sample_id": 4129,
        "pred_sql": "SELECT categories.category_name FROM reviews INNER JOIN business AS T2 ON reviews.business_id = T2.business_id INNER JOIN business_categories AS T3 ON T2.business_id = T3.business_id INNER JOIN categories AS T4 ON T3.category_id = T4.category_id WHERE reviews.review_length < 50 AND reviews.review_stars = (SELECT MAX(review_stars) FROM reviews WHERE business_id BETWEEN 7 AND 14) AND T2.business_id BETWEEN 7 AND 14;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2227,
            "cost": 0.00043889999999999993
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T3.category_name FROM Reviews AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T2.business_id >= 7 AND T2.business_id < 15 AND T1.review_length = 'Short' AND T1.review_stars = ( SELECT MAX(review_stars) FROM Reviews )"
    },
    {
        "sample_id": 3992,
        "pred_sql": "SELECT business.business_id FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business.active = 'True' GROUP BY business.business_id HAVING COUNT(DISTINCT business_hours.day_id) = 7",
        "retrieved": [
            4084
        ],
        "token_usage": {
            "tokens": 2105,
            "cost": 0.00038909999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7"
    },
    {
        "sample_id": 4009,
        "pred_sql": "SELECT (COUNT(CASE WHEN stars > 3 THEN 1 END) * 100.0 / COUNT(*)) AS percent_wonderful_experience FROM business WHERE city = 'Avondale' AND state = 'AZ' AND active = 'False'",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2248,
            "cost": 0.0004299
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business WHERE city = 'Avondale' AND active = 'false'"
    },
    {
        "sample_id": 3778,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business WHERE business.active = 'True' AND business.city = 'Tolleson'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2037,
            "cost": 0.00036449999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Tolleson' AND active LIKE 'TRUE'"
    },
    {
        "sample_id": 3822,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_yelping_since_year >= 2012 AND users.user_votes_funny > 50",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2050,
            "cost": 0.00036014999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012 AND user_votes_funny LIKE 'High'"
    },
    {
        "sample_id": 4117,
        "pred_sql": "SELECT AVG(b.stars) AS average_stars \nFROM business AS b \nINNER JOIN business_categories AS bc ON b.business_id = bc.business_id \nINNER JOIN categories AS c ON bc.category_id = c.category_id \nWHERE c.category_name = 'Obstetricians & Gynecologists'",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2146,
            "cost": 0.00039255
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Obstetricians & Gynecologists'"
    },
    {
        "sample_id": 4104,
        "pred_sql": "SELECT COUNT(*) FROM (SELECT business_id FROM business_hours GROUP BY business_id HAVING COUNT(DISTINCT day_id) = 7 AND COUNT(DISTINCT (closing_time - opening_time)) = 1) AS consistent_hours;",
        "retrieved": [
            4052
        ],
        "token_usage": {
            "tokens": 2185,
            "cost": 0.0004236
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'"
    },
    {
        "sample_id": 3906,
        "pred_sql": "SELECT c.category_name, AVG(r.review_stars) AS average_review_stars \nFROM business_categories bc \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business b ON bc.business_id = b.business_id \nJOIN reviews r ON b.business_id = r.business_id \nWHERE b.state = 'Arizona' \nGROUP BY c.category_name \nHAVING AVG(r.review_stars) > 3 \nORDER BY average_review_stars DESC;",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2126,
            "cost": 0.00041969999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3"
    },
    {
        "sample_id": 4083,
        "pred_sql": "SELECT (COUNT(CASE WHEN bh.business_id IS NOT NULL THEN 1 END) * 100.0 / COUNT(b.business_id)) AS percentage_opened_sunday\nFROM business b\nLEFT JOIN business_hours bh ON b.business_id = bh.business_id\nJOIN days d ON bh.day_id = d.day_id\nWHERE d.day_of_week = 0 AND bh.opening_time <= 9 AND bh.closing_time >= 21 AND b.active = 'True';",
        "retrieved": [
            3947
        ],
        "token_usage": {
            "tokens": 2226,
            "cost": 0.00044684999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.opening_time = '9AM' AND T2.closing_time = '9PM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.day_id) FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday'"
    },
    {
        "sample_id": 4135,
        "pred_sql": "SELECT business_attributes.attribute_value FROM business_attributes JOIN business ON business_attributes.business_id = business.business_id WHERE business.active = 'True' AND business.review_count < 10 AND business.stars = '3' AND business.city = 'Goodyear' AND business.state = 'AZ';",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2066,
            "cost": 0.00037874999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state = 'AZ' AND T1.city = 'Goodyear' AND T1.active = 'true' AND T1.stars = 3 AND T1.review_count = 'Low'"
    },
    {
        "sample_id": 3760,
        "pred_sql": "SELECT COUNT(reviews.review_length) FROM reviews WHERE reviews.user_id = 36139 AND reviews.review_length > 100;",
        "retrieved": [
            3872
        ],
        "token_usage": {
            "tokens": 2060,
            "cost": 0.00036885
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 36139 AND review_length LIKE 'long'"
    },
    {
        "sample_id": 4031,
        "pred_sql": "SELECT DISTINCT business.state FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business_hours.closing_time = '12:00 AM'",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2091,
            "cost": 0.00037575
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.closing_time = '12AM'"
    },
    {
        "sample_id": 4049,
        "pred_sql": "SELECT COUNT(b.business_id) AS total_open_businesses, (SELECT COUNT(b2.business_id) FROM business b2 WHERE b2.active = 'True') * 100.0 / COUNT(b.business_id) AS active_percentage FROM business b JOIN business_hours bh ON b.business_id = bh.business_id WHERE (bh.closing_time - bh.opening_time) > 8 AND b.city = 'Mesa'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2137,
            "cost": 0.00042044999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS ACT FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'"
    },
    {
        "sample_id": 4020,
        "pred_sql": "SELECT closing_time FROM business_hours WHERE business_id = 4 AND day_id = (SELECT day_id FROM days WHERE day_of_week = 0)",
        "retrieved": [
            4084
        ],
        "token_usage": {
            "tokens": 2075,
            "cost": 0.00036974999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.closing_time FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.business_id = 4"
    },
    {
        "sample_id": 4021,
        "pred_sql": "SELECT business.business_id FROM business WHERE business.city = 'Phoenix' AND business.review_count < 50",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 1978,
            "cost": 0.00033134999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_length = 'Short'"
    },
    {
        "sample_id": 3973,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM compliments) AS percentage_low_compliments FROM users_compliments WHERE number_of_compliments < 5;",
        "retrieved": [
            3936
        ],
        "token_usage": {
            "tokens": 2081,
            "cost": 0.00037199999999999993
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users_compliments"
    },
    {
        "sample_id": 3919,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_yelping_since_year BETWEEN 2010 AND 2012 AND users.user_fans < 10",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2032,
            "cost": 0.00034845
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2010 AND 2012 AND user_fans LIKE 'Low'"
    },
    {
        "sample_id": 3994,
        "pred_sql": "SELECT business.business_id FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'shopping' AND business.stars = '4'",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2133,
            "cost": 0.00038745
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Shopping' AND T1.stars = 4"
    },
    {
        "sample_id": 3930,
        "pred_sql": "SELECT business.city FROM business INNER JOIN business_hours AS T2 ON business.business_id = T2.business_id INNER JOIN days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time = '21:00' AND T2.opening_time = '09:00' AND T3.day_of_week = '6'",
        "retrieved": [
            3947
        ],
        "token_usage": {
            "tokens": 2144,
            "cost": 0.00040079999999999993
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '9AM' AND T3.day_of_week LIKE 'Saturday' GROUP BY T1.city"
    },
    {
        "sample_id": 4100,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business WHERE business.active = 'True' AND business.city = 'Mesa'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2037,
            "cost": 0.00036539999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Mesa' AND active = 'true'"
    },
    {
        "sample_id": 3866,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nJOIN days d ON bh.day_id = d.day_id \nWHERE b.state = 'Arizona' \nAND d.day_of_week = 'Sunday' \nAND bh.closing_time = '12:00 PM';",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2168,
            "cost": 0.0004125
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM' AND T3.state LIKE 'AZ'"
    },
    {
        "sample_id": 4123,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_yelping_since_year BETWEEN 2009 AND 2011 AND users.user_fans < 10",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2033,
            "cost": 0.00034859999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year >= 2009 AND user_yelping_since_year < 2012 AND user_fans = 'Low'"
    },
    {
        "sample_id": 4067,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business JOIN business_hours ON business.business_id = business_hours.business_id WHERE business.state = 'Arizona' AND business.active = 'True' AND business_hours.opening_time < 12",
        "retrieved": [
            3898
        ],
        "token_usage": {
            "tokens": 2033,
            "cost": 0.00036434999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T1.opening_time > '12PM'"
    },
    {
        "sample_id": 3923,
        "pred_sql": "SELECT business.business_id, business.stars FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE business.active = 'True' AND categories.category_name = 'Pets';",
        "retrieved": [
            3940
        ],
        "token_usage": {
            "tokens": 2111,
            "cost": 0.00038504999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Pets'"
    },
    {
        "sample_id": 4086,
        "pred_sql": "SELECT business.business_id, business.active, business.city FROM reviews INNER JOIN business ON reviews.business_id = business.business_id WHERE reviews.review_stars >= 4 GROUP BY reviews.business_id HAVING COUNT(CASE WHEN reviews.review_stars >= 4 THEN 1 END) * 1.0 / COUNT(*) >= 0.65;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2203,
            "cost": 0.0004240499999999999
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.business_id, T2.city FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 AND ( SELECT CAST(( SELECT COUNT(DISTINCT T1.user_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 ) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users ) > 65 )"
    },
    {
        "sample_id": 3894,
        "pred_sql": "SELECT business_attributes.attribute_value FROM business_attributes INNER JOIN business ON business_attributes.business_id = business.business_id WHERE business.city = 'Mesa' AND business.state = 'AZ' AND business.active = 'True' AND business.review_count > 0 AND business.stars = '3'",
        "retrieved": [
            4000
        ],
        "token_usage": {
            "tokens": 2088,
            "cost": 0.00037845
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3"
    },
    {
        "sample_id": 3773,
        "pred_sql": "SELECT business.stars FROM business INNER JOIN tips ON business.business_id = tips.business_id WHERE tips.user_id = 69722",
        "retrieved": [
            3872
        ],
        "token_usage": {
            "tokens": 2048,
            "cost": 0.00035759999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.stars FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.user_id = 69722"
    },
    {
        "sample_id": 3788,
        "pred_sql": "SELECT business.city FROM tips JOIN business ON tips.business_id = business.business_id WHERE tips.user_id = 63469 AND tips.likes = 1",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2035,
            "cost": 0.00035699999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.likes = 1 AND T2.user_id = 63469"
    },
    {
        "sample_id": 3857,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE business.city = 'Anthem' AND categories.category_name = 'Food'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2105,
            "cost": 0.00040439999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' AND T3.city LIKE 'Anthem'"
    },
    {
        "sample_id": 3986,
        "pred_sql": "SELECT business.business_id, business.city, business.state FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business_hours.closing_time = 20 AND business.active = 'False'",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2189,
            "cost": 0.0004008
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE closing_time = '8PM'"
    },
    {
        "sample_id": 3967,
        "pred_sql": "SELECT (COUNT(CASE WHEN bc.category_id IN (SELECT category_id FROM categories WHERE category_name = 'Pets') THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM business b JOIN business_categories bc ON b.business_id = bc.business_id;",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2048,
            "cost": 0.00036974999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category_name) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 3770,
        "pred_sql": "SELECT c.category_name FROM business_categories bc INNER JOIN categories c ON bc.category_id = c.category_id INNER JOIN tips t ON bc.business_id = t.business_id GROUP BY bc.business_id ORDER BY COUNT(t.tip_length) ASC LIMIT 1;",
        "retrieved": [
            3872
        ],
        "token_usage": {
            "tokens": 2082,
            "cost": 0.0003797999999999999
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'"
    },
    {
        "sample_id": 4118,
        "pred_sql": "SELECT (SELECT COUNT(user_id) FROM users WHERE user_yelping_since_year = 2011 AND user_fans > 100) * 100.0 / (SELECT COUNT(user_id) FROM users WHERE user_yelping_since_year = 2011) AS percentage_of_elite_users_with_high_fans FROM elite WHERE year_id = 2011;",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2105,
            "cost": 0.00039404999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.user_fans = 'High' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.user_fans) FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.actual_year = 2011"
    },
    {
        "sample_id": 3993,
        "pred_sql": "SELECT users.user_id FROM users INNER JOIN elite ON users.user_id = elite.user_id WHERE elite.year_id = 2012",
        "retrieved": [
            3872
        ],
        "token_usage": {
            "tokens": 2016,
            "cost": 0.00034559999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.user_id FROM Elite AS T1 INNER JOIN Years AS T2 ON T1.year_id = T2.year_id WHERE T2.actual_year = 2012"
    },
    {
        "sample_id": 3984,
        "pred_sql": "SELECT COUNT(DISTINCT bc_men.business_id) AS men_business_count, COUNT(DISTINCT bc_women.business_id) AS women_business_count\nFROM business_categories AS bc_men\nJOIN business AS b_men ON bc_men.business_id = b_men.business_id\nWHERE bc_men.category_id = (SELECT category_id FROM categories WHERE category_name = 'Men's Clothing')\n\nJOIN business_categories AS bc_women ON b_men.business_id = bc_women.business_id\nWHERE bc_women.category_id = (SELECT category_id FROM categories WHERE category_name = 'Women's Clothing');",
        "retrieved": [
            4103
        ],
        "token_usage": {
            "tokens": 2109,
            "cost": 0.00041129999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(CASE WHEN T1.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS diff FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 4013,
        "pred_sql": "SELECT COUNT(tips.business_id) FROM tips WHERE tips.business_id = 2",
        "retrieved": [
            3909
        ],
        "token_usage": {
            "tokens": 2034,
            "cost": 0.00034964999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Tips WHERE business_id = 2 AND tip_length = 'Short'"
    },
    {
        "sample_id": 3903,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) FROM business INNER JOIN business_attributes ON business.business_id = business_attributes.business_id INNER JOIN attributes ON business_attributes.attribute_id = attributes.attribute_id WHERE business.city = 'Phoenix' AND business.state = 'Arizona' AND attributes.attribute_name = 'waiter service' AND business.active = 'True'",
        "retrieved": [
            3898
        ],
        "token_usage": {
            "tokens": 2086,
            "cost": 0.00039749999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city LIKE 'Phoenix' AND T3.attribute_name LIKE 'waiter_service' AND T2.attribute_id = 2"
    },
    {
        "sample_id": 4060,
        "pred_sql": "SELECT business.business_id, COUNT(business_hours.day_id) AS working_days_count\nFROM business_categories\nINNER JOIN categories ON business_categories.category_id = categories.category_id\nINNER JOIN business_hours ON business_categories.business_id = business_hours.business_id\nINNER JOIN days ON business_hours.day_id = days.day_id\nWHERE categories.category_name IN ('Doctors')\nAND days.day_of_week BETWEEN 1 AND 6\nGROUP BY business.business_id\nORDER BY working_days_count DESC;",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2163,
            "cost": 0.00041624999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id GROUP BY T2.category_name ORDER BY COUNT(T3.day_id) DESC LIMIT 1"
    },
    {
        "sample_id": 4112,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS open_business_count FROM business b JOIN reviews r ON b.business_id = r.business_id WHERE b.city = 'Phoenix' AND b.active = 'True' AND r.review_length > 100;",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2060,
            "cost": 0.00038054999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_length = 'Long' AND T2.active = 'true' AND T2.city = 'Phoenix'"
    },
    {
        "sample_id": 3798,
        "pred_sql": "SELECT DISTINCT business_hours.opening_time, business_hours.closing_time, days.day_of_week FROM business_categories INNER JOIN categories ON business_categories.category_id = categories.category_id INNER JOIN business_hours ON business_categories.business_id = business_hours.business_id INNER JOIN days ON business_hours.day_id = days.day_id WHERE categories.category_name = 'fashion'",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.00039299999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T4.opening_time FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion'"
    },
    {
        "sample_id": 3785,
        "pred_sql": "SELECT SUBSTRING(business_hours.closing_time, 1, 2) + SUBSTRING(business_hours.closing_time, 4, 2) - SUBSTRING(business_hours.opening_time, 1, 2) - SUBSTRING(business_hours.opening_time, 4, 2) FROM business_hours INNER JOIN days ON business_hours.day_id = days.day_id WHERE days.day_of_week = '6' AND business_hours.business_id = '5734'",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2188,
            "cost": 0.00042584999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.closing_time - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Saturday' AND T1.business_id = 5734"
    },
    {
        "sample_id": 4116,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id INNER JOIN days ON business_hours.day_id = days.day_id WHERE business.city = 'Scottsdale' AND days.day_of_week = 0 AND business_hours.opening_time <= '12:00' AND business_hours.closing_time > '12:00'",
        "retrieved": [
            3837
        ],
        "token_usage": {
            "tokens": 2157,
            "cost": 0.00041985
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business AS T1 INNER JOIN Business_hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Scottsdale' AND T3.day_of_week = 'Sunday' AND T2.opening_time = '12PM'"
    },
    {
        "sample_id": 4061,
        "pred_sql": "SELECT business.business_id, business_hours.closing_time FROM business_categories INNER JOIN categories ON business_categories.category_id = categories.category_id INNER JOIN business_hours ON business_categories.business_id = business_hours.business_id INNER JOIN days ON business_hours.day_id = days.day_id WHERE categories.category_name = 'Arts & Entertainment' AND days.day_of_week = 'Sunday'",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2129,
            "cost": 0.0003963
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'"
    },
    {
        "sample_id": 3858,
        "pred_sql": "SELECT business.business_id FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN reviews ON business.business_id = reviews.business_id INNER JOIN elite ON business.business_id = elite.user_id WHERE elite.year_id = (SELECT MAX(year_id) FROM elite) AND business_categories.category_id = (SELECT category_id FROM categories WHERE category_name = 'Food') ORDER BY reviews.review_stars DESC LIMIT 1;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2203,
            "cost": 0.0004254
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' ORDER BY T3.stars DESC LIMIT 1"
    },
    {
        "sample_id": 2697,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM \"sales orders\" WHERE orderdate = '04/04/2020')) AS percentage_orders FROM \"sales orders\" INNER JOIN \"store locations\" ON \"sales orders\"._storeid = \"store locations\".storeid WHERE \"store locations\".state = 'New York' AND \"sales orders\".orderdate = '04/04/2020';",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1286,
            "cost": 0.00027435
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'"
    },
    {
        "sample_id": 2680,
        "pred_sql": "SELECT customers.\"customer names\" FROM \"sales orders\" INNER JOIN customers ON sales orders._customerid = customers.customerid WHERE sales orders.\"order quantity\" = '3' AND sales orders.\"orderdate\" BETWEEN '02/01/2018' AND '02/28/2018';",
        "retrieved": [
            2705
        ],
        "token_usage": {
            "tokens": 1327,
            "cost": 0.00029895
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Order Quantity\" = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2653,
        "pred_sql": "SELECT so.ordernumber FROM \"sales orders\" so JOIN customers c ON so._customerid = c.customerid WHERE c.\"customer names\" = 'Qualitest' ORDER BY CAST(so.\"order quantity\" AS INTEGER) DESC LIMIT 1",
        "retrieved": [
            2634
        ],
        "token_usage": {
            "tokens": 1214,
            "cost": 0.0002406
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T1.OrderNumber FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.\"Customer Names\" = 'Qualitest ' ORDER BY T1.\"Order Quantity\" DESC LIMIT 1"
    },
    {
        "sample_id": 2642,
        "pred_sql": "SELECT DISTINCT c.\"customer names\" \nFROM sales orders so \nJOIN customers c ON so._customerid = c.customerid \nWHERE so.\"order quantity\" > 5 AND so.\"orderdate\" = '6/1/2018';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1212,
            "cost": 0.00027404999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SUM(T1.\"Order Quantity\") > 5 THEN T2.\"Customer Names\" END AS T FROM \"Sales Orders\" T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate = '6/1/18' GROUP BY T1._CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2701,
        "pred_sql": "SELECT ordernumber FROM \"sales orders\" WHERE orderdate > '1/1/2018'",
        "retrieved": [
            2705
        ],
        "token_usage": {
            "tokens": 1193,
            "cost": 0.0002208
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN OrderDate > '1/1/18' THEN OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2610,
        "pred_sql": "SELECT products.\"product name\" FROM \"sales orders\" JOIN products ON sales orders._productid = products.productid WHERE REPLACE(sales orders.\"unit cost\", ',', '') = '781.22'",
        "retrieved": [
            2634
        ],
        "token_usage": {
            "tokens": 1227,
            "cost": 0.00024660000000000003
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT IIF(T1.\"Unit Cost\" = 781.22, T2.\"Product Name\", NULL) AS T FROM \"Sales Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2623,
        "pred_sql": "SELECT customers.\"customer names\" FROM \"sales orders\" INNER JOIN customers ON sales orders._customerid = customers.customerid WHERE sales orders.\"unit cost\" > 4000;",
        "retrieved": [
            2705
        ],
        "token_usage": {
            "tokens": 1242,
            "cost": 0.00024974999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Unit Cost\" > 4000 THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2647,
        "pred_sql": "SELECT productid, `product name` FROM products WHERE productid BETWEEN 30 AND 40;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1097,
            "cost": 0.00020774999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2679,
        "pred_sql": "SELECT products.productid, products.product name, SUM(REPLACE(sales orders.\"unit price\", ',', '') - REPLACE(sales orders.\"unit cost\", ',', '')) AS net_profit FROM sales orders INNER JOIN products ON sales orders._productid = products.productid GROUP BY products.productid, products.product name ORDER BY net_profit DESC LIMIT 10;",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1315,
            "cost": 0.00029489999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) DESC LIMIT 10"
    },
    {
        "sample_id": 2711,
        "pred_sql": "SELECT DISTINCT store locations.storeid FROM sales orders INNER JOIN store locations ON sales orders._storeid = store locations.storeid WHERE store locations.state = 'California' AND sales orders.discount applied = '0.2'",
        "retrieved": [
            2600
        ],
        "token_usage": {
            "tokens": 1216,
            "cost": 0.0002382
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.State = 'California' AND T1.\"Sales Channel\" = 'In-Store' AND T1.\"Discount Applied\" = 0.2 THEN T2.StoreID END AS T FROM \"Sales Orders\" T1 INNER JOIN \"Store Locations\" T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2656,
        "pred_sql": "SELECT p.productid, p.product_name, SUM(so.order_quantity) AS total_sold\nFROM sales_orders so\nJOIN store_locations sl ON so._storeid = sl.storeid\nJOIN products p ON so._productid = p.productid\nWHERE sl.county = 'Maricopa'\nGROUP BY p.productid, p.product_name\nORDER BY total_sold ASC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1180,
            "cost": 0.00025754999999999994
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T3.County = 'Maricopa County' ORDER BY T2.\"Order Quantity\" ASC LIMIT 1"
    },
    {
        "sample_id": 2687,
        "pred_sql": "SELECT sales team.\"sales team\", SUM((sales orders.\"unit price\" - sales orders.\"unit cost\") * sales orders.\"order quantity\") AS net_profit FROM sales orders INNER JOIN sales team ON sales orders._salesteamid = sales team.salesteamid GROUP BY sales team.\"sales team\" ORDER BY net_profit DESC LIMIT 5;",
        "retrieved": [
            2681
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.000276
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 5"
    },
    {
        "sample_id": 2686,
        "pred_sql": "SELECT \"sales channel\", COUNT(*) AS channel_count FROM \"sales orders\" INNER JOIN \"store locations\" ON sales orders._storeid = store locations.storeid INNER JOIN (SELECT \"city name\", \"median income\" FROM \"store locations\" ORDER BY \"median income\" DESC LIMIT 3) AS top_cities ON store locations.\"city name\" = top_cities.\"city name\" GROUP BY \"sales channel\" ORDER BY channel_count DESC;",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1311,
            "cost": 0.0002902499999999999
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT \"Sales Channel\" FROM ( SELECT T1.\"Sales Channel\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.\"Median Income\" DESC LIMIT 3 ) GROUP BY \"Sales Channel\" ORDER BY COUNT(\"Sales Channel\") DESC LIMIT 1"
    },
    {
        "sample_id": 2612,
        "pred_sql": "SELECT COUNT(sales_orders.ordernumber) FROM \"sales orders\" INNER JOIN \"store locations\" ON store locations.storeid = sales orders._storeid INNER JOIN \"products\" ON sales orders._productid = products.productid WHERE sales_orders.orderdate LIKE '2018%' AND products.product_name LIKE '%cushion%'",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1300,
            "cost": 0.00028544999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.\"Product Name\" = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
    },
    {
        "sample_id": 2713,
        "pred_sql": "SELECT SUM(CASE WHEN products.\"product name\" = 'Candles' THEN sales orders.\"order quantity\" ELSE 0 END) AS total_order_quantity, \n       (CAST(SUM(CASE WHEN products.\"product name\" = 'Candles' THEN sales orders.\"order quantity\" ELSE 0 END) AS FLOAT) / COUNT(sales orders.ordernumber)) * 100 AS percentage_of_candles_orders \nFROM sales orders \nINNER JOIN products ON sales orders._productid = products.productid;",
        "retrieved": [
            2601
        ],
        "token_usage": {
            "tokens": 1353,
            "cost": 0.00030734999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END), CAST(SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END) AS REAL) * 100 / SUM(T2.\"Order Quantity\") FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID"
    },
    {
        "sample_id": 2638,
        "pred_sql": "SELECT store locations.\"city name\", store locations.latitude, store locations.longitude FROM \"sales orders\" INNER JOIN \"store locations\" ON sales orders._storeid = store locations.storeid WHERE sales orders.ordernumber = 'SO - 000115'",
        "retrieved": [
            2581
        ],
        "token_usage": {
            "tokens": 1260,
            "cost": 0.00026325
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'"
    },
    {
        "sample_id": 2582,
        "pred_sql": "SELECT sales_orders.ordernumber, customers.\"customer names\", sales_orders.orderdate, sales_orders.unit_price FROM sales_orders INNER JOIN customers ON customers.customerid = sales_orders._customerid ORDER BY sales_orders.unit_price DESC LIMIT 1;",
        "retrieved": [
            2705
        ],
        "token_usage": {
            "tokens": 1254,
            "cost": 0.0002592
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.OrderNumber, T1.\"Customer Names\", T2.OrderDate FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.\"Unit Cost\" DESC LIMIT 1"
    },
    {
        "sample_id": 2671,
        "pred_sql": "SELECT sales_orders.ordernumber, products.product_name FROM sales_orders INNER JOIN products ON sales_orders._productid = products.productid WHERE sales_orders.orderdate = '06/06/2018'",
        "retrieved": [
            2583
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.00026835
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT OrderNumber, \"Product Name\" FROM ( SELECT IIF(T2.OrderDate = '6/6/18', T2.OrderNumber, NULL) AS \"OrderNumber\" , IIF(T2.OrderDate = '6/6/18', T1.\"Product Name\", NULL) AS \"Product Name\" FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID ) WHERE OrderNumber IS NOT NULL AND \"Product Name\" IS NOT NULL"
    },
    {
        "sample_id": 2669,
        "pred_sql": "SELECT COUNT(so.ordernumber) \nFROM \"sales orders\" AS so \nINNER JOIN \"store locations\" AS sl ON sl.storeid = so._storeid \nWHERE sl.population BETWEEN '3000000' AND '4000000';",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1278,
            "cost": 0.0002682
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.Population BETWEEN 3000000 AND 4000000"
    },
    {
        "sample_id": 2725,
        "pred_sql": "SELECT st.\"sales team\", COUNT(so.ordernumber) AS total_orders\nFROM \"sales orders\" so\nINNER JOIN \"sales team\" st ON so._salesteamid = st.salesteamid\nWHERE so.orderdate LIKE '2019%'\nGROUP BY st.\"sales team\"\nORDER BY total_orders DESC\nLIMIT 1;",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1329,
            "cost": 0.00029475
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT COUNT(T1.OrderNumber), T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.\"Sales Team\" ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "sample_id": 2579,
        "pred_sql": "SELECT sales_orders.ordernumber, products.\"product name\" FROM sales_orders INNER JOIN products ON sales_orders._productid = products.productid INNER JOIN sales_team ON sales_orders._salesteamid = sales_team.salesteamid WHERE sales_team.\"sales team\" = 'Douglas Tucker'",
        "retrieved": [
            2581
        ],
        "token_usage": {
            "tokens": 1285,
            "cost": 0.000276
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T1.ProductID, T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.\"Sales Team\" = 'Douglas Tucker'"
    },
    {
        "sample_id": 2625,
        "pred_sql": "SELECT \"city name\", population FROM \"store locations\" WHERE state = 'Florida' ORDER BY population DESC LIMIT 1",
        "retrieved": [
            2593
        ],
        "token_usage": {
            "tokens": 1161,
            "cost": 0.0002169
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT \"City Name\" FROM \"Store Locations\" ORDER BY Population DESC LIMIT 1"
    },
    {
        "sample_id": 2602,
        "pred_sql": "SELECT SUM(CASE WHEN products.product_name = 'Platters' THEN sales_orders.order_quantity ELSE 0 END) AS total_orders_platters, SUM(CASE WHEN products.product_name = 'Serveware' THEN sales_orders.order_quantity ELSE 0 END) AS total_orders_serveware FROM sales_orders JOIN products ON sales_orders._productid = products.productid;",
        "retrieved": [
            2661
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.00027104999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T2.\"Product Name\" = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.\"Product Name\" = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
    },
    {
        "sample_id": 2710,
        "pred_sql": "SELECT sales_team.salesteamid, COUNT(sales_orders.ordernumber) AS order_count \nFROM sales_orders \nINNER JOIN sales_team ON sales_orders._salesteamid = sales_team.salesteamid \nWHERE sales_team.region = 'Midwest' \nGROUP BY sales_team.salesteamid \nHAVING order_count > 5;",
        "retrieved": [
            2604
        ],
        "token_usage": {
            "tokens": 1295,
            "cost": 0.00026714999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.\"Order Quantity\" > 5"
    },
    {
        "sample_id": 2718,
        "pred_sql": "SELECT COUNT(sales_orders.ordernumber) FROM \"sales orders\" WHERE \"sales channel\" = 'Online' AND orderdate LIKE '06/2018%'",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1228,
            "cost": 0.00024225
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(IIF(ShipDate LIKE '6/%/18' AND \"Sales Channel\" = 'Online', 1, 0)) FROM \"Sales Orders\""
    },
    {
        "sample_id": 2714,
        "pred_sql": "SELECT regions.region FROM customers JOIN store locations ON customers.customerid = store locations.storeid JOIN regions ON store locations.statecode = regions.statecode WHERE customers.customer names = 'Joshua Bennet';",
        "retrieved": [
            2609
        ],
        "token_usage": {
            "tokens": 1185,
            "cost": 0.00023309999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN \"Sales Team\" = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM \"Sales Team\" ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2685,
        "pred_sql": "SELECT COUNT(*) FROM \"store locations\" WHERE \"city name\" = 'Oregon' AND \"storeid\" IN (SELECT DISTINCT _storeid FROM \"sales orders\" WHERE \"procureddate\" = '10/27/2018')",
        "retrieved": [
            2626
        ],
        "token_usage": {
            "tokens": 1293,
            "cost": 0.00028934999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.\"City Name\" = 'Orlando' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID"
    },
    {
        "sample_id": 2632,
        "pred_sql": "SELECT strftime('%Y', orderdate) AS year, COUNT(ordernumber) AS total_orders FROM \"sales orders\" INNER JOIN customers ON sales orders._customerid = customers.customerid WHERE customers.\"customer names\" = 'George Lewis' AND strftime('%Y', orderdate) BETWEEN '2018' AND '2020' GROUP BY year ORDER BY total_orders DESC LIMIT 1;",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1369,
            "cost": 0.00032324999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.\"Sales Team\" = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "sample_id": 2595,
        "pred_sql": "SELECT storeid, \"city name\", state, region FROM store locations WHERE type IN ('Borough', 'CDP') GROUP BY type ORDER BY COUNT(type) ASC LIMIT 1;",
        "retrieved": [
            2600
        ],
        "token_usage": {
            "tokens": 1234,
            "cost": 0.0002481
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T2.StoreID, T2.\"City Name\", T1.State, T2.Type FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'"
    },
    {
        "sample_id": 2723,
        "pred_sql": "SELECT COUNT(*) FROM \"store locations\" WHERE \"state\" IN (SELECT \"state\" FROM \"regions\" WHERE \"region\" = 'West') AND \"land area\" < 20000000;",
        "retrieved": [
            2626
        ],
        "token_usage": {
            "tokens": 1210,
            "cost": 0.0002382
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.\"Land Area\" < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode"
    },
    {
        "sample_id": 2708,
        "pred_sql": "SELECT store locations.\"storeid\", SUM(REPLACE(sales orders.\"unit price\", ',', '') - REPLACE(sales orders.\"unit cost\", ',', '')) AS net_profit FROM sales orders INNER JOIN store locations ON sales orders._storeid = store locations.storeid WHERE store locations.state = 'Arizona' GROUP BY store locations.\"storeid\" ORDER BY net_profit DESC LIMIT 1;",
        "retrieved": [
            2735
        ],
        "token_usage": {
            "tokens": 1392,
            "cost": 0.00031949999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.StoreID FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Arizona' ORDER BY T1.\"Unit Price\" - T1.\"Unit Cost\" DESC LIMIT 1"
    },
    {
        "sample_id": 2591,
        "pred_sql": "SELECT productid, product name FROM products WHERE product name LIKE '%Outdoor%';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1090,
            "cost": 0.00020444999999999998
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT ProductID, T FROM ( SELECT ProductID , CASE  WHEN \"Product Name\" LIKE '%Outdoor%' THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL ORDER BY T DESC"
    },
    {
        "sample_id": 2738,
        "pred_sql": "SELECT MAX(\"discount applied\") AS best_discount FROM \"sales orders\" WHERE SUBSTR(orderdate, -4) = '2020'",
        "retrieved": [
            2580
        ],
        "token_usage": {
            "tokens": 1361,
            "cost": 0.00026895
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT MAX(\"Discount Applied\") FROM \"Sales Orders\" WHERE OrderDate LIKE '%/%/20'"
    },
    {
        "sample_id": 2727,
        "pred_sql": "SELECT \"latitude\", \"longitude\" FROM \"store locations\" WHERE \"storeid\" = (SELECT \"_storeid\" FROM \"sales orders\" GROUP BY \"_productid\" ORDER BY SUM(REPLACE(\"unit price\", ',', '') - REPLACE(\"unit cost\", ',', '')) DESC LIMIT 1 OFFSET 3)",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1320,
            "cost": 0.00029384999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 3, 1"
    },
    {
        "sample_id": 1719,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN generalinfo.review > 4 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(generalinfo.id_restaurant) AS percentage FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.region = 'Bay Area'",
        "retrieved": [
            1738
        ],
        "token_usage": {
            "tokens": 795,
            "cost": 0.00019575
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.review > 4, 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'"
    },
    {
        "sample_id": 1751,
        "pred_sql": "SELECT geographic.city FROM geographic WHERE geographic.county IS NULL;",
        "retrieved": [
            1712
        ],
        "token_usage": {
            "tokens": 702,
            "cost": 0.00014984999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT city FROM geographic WHERE county = 'unknown'"
    },
    {
        "sample_id": 1759,
        "pred_sql": "SELECT location.street_num FROM location JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE generalinfo.label = 'Tulocay Winery'",
        "retrieved": [
            1740
        ],
        "token_usage": {
            "tokens": 699,
            "cost": 0.00016109999999999999
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'"
    },
    {
        "sample_id": 1770,
        "pred_sql": "SELECT generalinfo.label FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'Asian' AND geographic.city = 'San Francisco' ORDER BY generalinfo.review DESC LIMIT 1",
        "retrieved": [
            1684
        ],
        "token_usage": {
            "tokens": 741,
            "cost": 0.00016829999999999997
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' )"
    },
    {
        "sample_id": 1734,
        "pred_sql": "SELECT geographic.region FROM geographic JOIN location ON geographic.city = location.city WHERE location.street_num = '1149' AND location.street_name = 'El Camino Real'",
        "retrieved": [
            1724
        ],
        "token_usage": {
            "tokens": 711,
            "cost": 0.00017235
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'"
    },
    {
        "sample_id": 1679,
        "pred_sql": "SELECT generalinfo.food_type FROM location INNER JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE location.street_name = 'Adeline' AND location.city = 'Berkeley'",
        "retrieved": [
            1766
        ],
        "token_usage": {
            "tokens": 765,
            "cost": 0.00017774999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'"
    },
    {
        "sample_id": 1772,
        "pred_sql": "SELECT COUNT(*) FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'deli' AND geographic.city = 'Belmont' AND generalinfo.review >= 2",
        "retrieved": [
            1786
        ],
        "token_usage": {
            "tokens": 730,
            "cost": 0.00016754999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'"
    },
    {
        "sample_id": 1780,
        "pred_sql": "SELECT geographic.region FROM geographic INNER JOIN generalinfo ON geographic.city = generalinfo.city WHERE generalinfo.label = 'Baskin Robbins' GROUP BY geographic.region ORDER BY COUNT(generalinfo.id_restaurant) DESC LIMIT 1",
        "retrieved": [
            1785
        ],
        "token_usage": {
            "tokens": 778,
            "cost": 0.00020084999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1"
    },
    {
        "sample_id": 1681,
        "pred_sql": "SELECT DISTINCT geographic.county FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.label = 'A&W Root Beer'",
        "retrieved": [
            1712
        ],
        "token_usage": {
            "tokens": 717,
            "cost": 0.00015749999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'"
    },
    {
        "sample_id": 1686,
        "pred_sql": "SELECT COUNT(DISTINCT geographic.county) AS county_count FROM location INNER JOIN geographic ON location.city = geographic.city WHERE location.street_name = 'Appian Way';",
        "retrieved": [
            1699
        ],
        "token_usage": {
            "tokens": 757,
            "cost": 0.00016979999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'"
    },
    {
        "sample_id": 1733,
        "pred_sql": "SELECT location.street_num, COUNT(generalinfo.id_restaurant) AS burger_count FROM location JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE location.city = 'San Francisco' AND generalinfo.food_type = 'burger' GROUP BY location.street_num ORDER BY burger_count DESC LIMIT 1;",
        "retrieved": [
            1678
        ],
        "token_usage": {
            "tokens": 787,
            "cost": 0.00021029999999999996
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1"
    },
    {
        "sample_id": 1760,
        "pred_sql": "SELECT generalinfo.review, generalinfo.label FROM location INNER JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE location.street_name = 'Mission Blvd.' AND location.city = 'Hayward'",
        "retrieved": [
            1766
        ],
        "token_usage": {
            "tokens": 769,
            "cost": 0.00018104999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.review, T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'hayward' AND T1.street_name = 'mission blvd'"
    },
    {
        "sample_id": 1779,
        "pred_sql": "SELECT COUNT(*) FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.city = 'Oakland' AND generalinfo.review <= 3",
        "retrieved": [
            1786
        ],
        "token_usage": {
            "tokens": 754,
            "cost": 0.00018104999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.street_name = 'broadway' AND T2.review < 3 AND T1.city = 'oakland'"
    },
    {
        "sample_id": 1769,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN generalinfo.food_type = 'Afghani' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(generalinfo.id_restaurant) AS percentage_afghani_restaurants FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_num BETWEEN '1000' AND '2000'",
        "retrieved": [
            1738
        ],
        "token_usage": {
            "tokens": 850,
            "cost": 0.0002247
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000"
    },
    {
        "sample_id": 1765,
        "pred_sql": "SELECT location.street_num, location.street_name, geographic.city, geographic.county, geographic.region FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.label = 'Sanuki Restaurant'",
        "retrieved": [
            1713
        ],
        "token_usage": {
            "tokens": 792,
            "cost": 0.00019485
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'"
    },
    {
        "sample_id": 1689,
        "pred_sql": "SELECT generalinfo.label FROM generalinfo INNER JOIN geographic AS T2 ON generalinfo.city = T2.city WHERE T2.county = 'Yolo County'",
        "retrieved": [
            1726
        ],
        "token_usage": {
            "tokens": 736,
            "cost": 0.00017969999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'"
    },
    {
        "sample_id": 1737,
        "pred_sql": "SELECT generalinfo.label FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_name = 'Park St.'",
        "retrieved": [
            1710
        ],
        "token_usage": {
            "tokens": 719,
            "cost": 0.0001605
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'"
    },
    {
        "sample_id": 1691,
        "pred_sql": "SELECT location.street_name FROM location INNER JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE location.city = 'San Francisco' AND generalinfo.review = '1.7' AND NOT location.street_name IS NULL",
        "retrieved": [
            1684
        ],
        "token_usage": {
            "tokens": 778,
            "cost": 0.00018825
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7"
    },
    {
        "sample_id": 1762,
        "pred_sql": "SELECT COUNT(*) FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.review = 2 AND location.street_num < '500'",
        "retrieved": [
            1786
        ],
        "token_usage": {
            "tokens": 775,
            "cost": 0.00019229999999999999
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.review = 2 AND T1.street_num < 500"
    },
    {
        "sample_id": 1706,
        "pred_sql": "SELECT location.street_name, location.street_num, location.city FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.city = 'San Francisco' ORDER BY generalinfo.review DESC LIMIT 1",
        "retrieved": [
            1783
        ],
        "token_usage": {
            "tokens": 745,
            "cost": 0.00017744999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )"
    },
    {
        "sample_id": 1763,
        "pred_sql": "SELECT COUNT(generalinfo.id_restaurant) FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'Asian' AND location.street_name = 'N. Milpitas Blvd.' AND location.city = 'Milpitas' AND generalinfo.id_restaurant > '385';",
        "retrieved": [
            1785
        ],
        "token_usage": {
            "tokens": 790,
            "cost": 0.00020219999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385"
    },
    {
        "sample_id": 1748,
        "pred_sql": "SELECT geographic.county, COUNT(generalinfo.id_restaurant) AS restaurant_count FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'Italian' GROUP BY geographic.county ORDER BY restaurant_count DESC LIMIT 1;",
        "retrieved": [
            1785
        ],
        "token_usage": {
            "tokens": 765,
            "cost": 0.00019529999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'Italian' GROUP BY T2.county ORDER BY COUNT(T1.id_restaurant) DESC LIMIT 1"
    },
    {
        "sample_id": 1729,
        "pred_sql": "SELECT DISTINCT geographic.region FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'Greek';",
        "retrieved": [
            1712
        ],
        "token_usage": {
            "tokens": 706,
            "cost": 0.00015225
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'"
    },
    {
        "sample_id": 1697,
        "pred_sql": "SELECT AVG(CAST(generalinfo.review AS FLOAT)) AS average_rating FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.county = 'Santa Cruz County'",
        "retrieved": [
            1756
        ],
        "token_usage": {
            "tokens": 719,
            "cost": 0.0001605
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT AVG(T2.review) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'santa cruz county'"
    },
    {
        "sample_id": 399,
        "pred_sql": "SELECT COUNT(reviews.stars) AS five_star_count FROM reviews INNER JOIN district ON reviews.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE reviews.product = 'Eagle National Bank' AND reviews.stars = '5' AND district.city = 'Nashville' AND state.state = 'Tennessee';",
        "retrieved": [
            296
        ],
        "token_usage": {
            "tokens": 1520,
            "cost": 0.00030944999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T2.Stars) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Nashville' AND T1.state_abbrev = 'TN' AND T2.Product = 'Eagle National Mortgage' AND T2.Stars = 5"
    },
    {
        "sample_id": 388,
        "pred_sql": "SELECT COUNT(callcenterlogs.\"complaint id\") FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\" INNER JOIN district ON client.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE callcenterlogs.product = 'Credit card' AND client.city = 'Omaha' AND strftime('%Y', callcenterlogs.\"date received\") = '2012'",
        "retrieved": [
            310
        ],
        "token_usage": {
            "tokens": 1579,
            "cost": 0.00034889999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND strftime('%Y', T2.\"Date received\") = '2012' AND T2.Product = 'Credit card'"
    },
    {
        "sample_id": 314,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM client WHERE age >= 50)) AS percentage FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.\"submitted via\" = 'postal mail' AND client.age >= 50;",
        "retrieved": [
            397
        ],
        "token_usage": {
            "tokens": 1553,
            "cost": 0.00032385
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.age > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.\"Submitted via\") FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Postal mail'"
    },
    {
        "sample_id": 355,
        "pred_sql": "SELECT events.product FROM client INNER JOIN events ON client.client_id = events.client_id WHERE client.first = 'Alexander' AND client.middle = 'Bronx' AND client.last = 'Lewis'",
        "retrieved": [
            348
        ],
        "token_usage": {
            "tokens": 1449,
            "cost": 0.00027675
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'"
    },
    {
        "sample_id": 359,
        "pred_sql": "SELECT callcenterlogs.\"complaint id\", callcenterlogs.\"type\" FROM callcenterlogs WHERE callcenterlogs.\"ser_time\" < '00:10:00'",
        "retrieved": [
            292
        ],
        "token_usage": {
            "tokens": 1484,
            "cost": 0.00027299999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE strftime('%M', T1.ser_time) < '10'"
    },
    {
        "sample_id": 293,
        "pred_sql": "SELECT \"date received\", \"complaint id\" FROM callcenterlogs WHERE priority = '2' ORDER BY \"date received\";",
        "retrieved": [
            292
        ],
        "token_usage": {
            "tokens": 1472,
            "cost": 0.00026849999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT \"Complaint ID\" FROM callcenterlogs WHERE priority = 2 ORDER BY \"Date received\" DESC"
    },
    {
        "sample_id": 370,
        "pred_sql": "SELECT district.city, COUNT(reviews.stars) AS star_count FROM reviews INNER JOIN district ON reviews.district_id = district.district_id WHERE reviews.stars = '5' AND strftime('%Y', reviews.date) = '2016' GROUP BY district.city ORDER BY star_count DESC LIMIT 5;",
        "retrieved": [
            296
        ],
        "token_usage": {
            "tokens": 1500,
            "cost": 0.00029654999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5"
    },
    {
        "sample_id": 385,
        "pred_sql": "SELECT state.state, COUNT(district.city) AS city_count \nFROM state \nJOIN district ON state.statecode = district.state_abbrev \nGROUP BY state.state \nORDER BY city_count DESC \nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1435,
            "cost": 0.00031065
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1"
    },
    {
        "sample_id": 394,
        "pred_sql": "SELECT callcenterlogs.rand client FROM callcenterlogs INNER JOIN events ON callcenterlogs.complaint id = events.complaint id WHERE events.date received = '2014-04-16' AND events.submitted via = 'fax'",
        "retrieved": [
            360
        ],
        "token_usage": {
            "tokens": 1438,
            "cost": 0.0002724
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.\"Submitted via\" = 'Fax' AND T1.\"Date received\" = '2014-04-16'"
    },
    {
        "sample_id": 248,
        "pred_sql": "SELECT client.first || ' ' || client.middle || ' ' || client.last AS full_name \nFROM client \nINNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client \nWHERE callcenterlogs.date_received = '2017/3/27' AND callcenterlogs.vru_line = 'MICHAL';",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1596,
            "cost": 0.00034605
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.\"Date received\" = '2017-03-27' AND T2.server = 'MICHAL'"
    },
    {
        "sample_id": 276,
        "pred_sql": "SELECT client.email FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand client WHERE callcenterlogs.outcome = 'hung'",
        "retrieved": [
            362
        ],
        "token_usage": {
            "tokens": 1469,
            "cost": 0.0002982
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.outcome = 'HANG'"
    },
    {
        "sample_id": 379,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN client.sex = 'female' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(client.sex) AS female_percentage FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE state.region = 'Middle Atlantic'",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1565,
            "cost": 0.0003333
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'"
    },
    {
        "sample_id": 287,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN callcenterlogs.priority = '1' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(callcenterlogs.priority) AS percentage_priority_1 FROM callcenterlogs INNER JOIN client ON callcenterlogs.rand client = client.client_id INNER JOIN district ON client.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE state.state = 'California'",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1567,
            "cost": 0.00033404999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'"
    },
    {
        "sample_id": 398,
        "pred_sql": "SELECT reviews.product FROM reviews INNER JOIN district ON reviews.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE reviews.stars = '1' AND reviews.date = '2016-03-14' AND district.city = 'Newton' AND state.state = 'Massachusetts';",
        "retrieved": [
            296
        ],
        "token_usage": {
            "tokens": 1567,
            "cost": 0.00033854999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.Product FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Newton' AND T1.state_abbrev = 'MA' AND T2.Date = '2016-03-14' AND T2.Stars = 1"
    },
    {
        "sample_id": 241,
        "pred_sql": "SELECT MIN(callcenterlogs.ser_start) AS earliest_complaint_start FROM callcenterlogs WHERE callcenterlogs.\"date received\" = '2017/3/22'",
        "retrieved": [
            249
        ],
        "token_usage": {
            "tokens": 1476,
            "cost": 0.00028664999999999995
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT MIN(ser_time) FROM callcenterlogs WHERE \"Date received\" = '2017-03-22'"
    },
    {
        "sample_id": 352,
        "pred_sql": "SELECT client.first, client.middle, client.last FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.ser_time >= '00:20:00'",
        "retrieved": [
            361
        ],
        "token_usage": {
            "tokens": 1523,
            "cost": 0.0003279
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE strftime('%M', T2.ser_time) > '20'"
    },
    {
        "sample_id": 299,
        "pred_sql": "SELECT COUNT(client.client_id) FROM client INNER JOIN state ON client.state = state.statecode WHERE client.sex = 'male' AND state.state = 'Massachusetts'",
        "retrieved": [
            348
        ],
        "token_usage": {
            "tokens": 1458,
            "cost": 0.00028169999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'"
    },
    {
        "sample_id": 351,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN client.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(client.client_id) AS percentage FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.server = 'ZOHARI'",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1510,
            "cost": 0.0002985
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.server = 'ZOHARI'"
    },
    {
        "sample_id": 329,
        "pred_sql": "SELECT events.issue, COUNT(*) as issue_count FROM callcenterlogs JOIN events ON callcenterlogs.complaint_id = events.complaint_id WHERE callcenterlogs.priority = 'higher' GROUP BY events.issue ORDER BY issue_count DESC LIMIT 1;",
        "retrieved": [
            240
        ],
        "token_usage": {
            "tokens": 1532,
            "cost": 0.00033869999999999994
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.Issue FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.priority = 2 GROUP BY T1.Issue ORDER BY COUNT(T1.Issue) DESC LIMIT 1"
    },
    {
        "sample_id": 383,
        "pred_sql": "SELECT c.city, COUNT(c.client_id) AS customer_count\nFROM client c\nJOIN state s ON c.state = s.statecode\nWHERE s.region = 'West North Central' AND c.age = 'elder'\nGROUP BY c.city\nORDER BY customer_count DESC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1506,
            "cost": 0.00034785
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'West North Central' AND T1.age > 60 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1"
    },
    {
        "sample_id": 246,
        "pred_sql": "SELECT CASE WHEN events.\"consumer consent provided?\" IN (NULL, 'N/A', '') THEN 'No' ELSE 'Yes' END FROM client INNER JOIN events ON client.client_id = events.client_id WHERE client.first = 'Matthew' AND client.last = 'Pierce' AND events.\"date received\" = '2016-10-28'",
        "retrieved": [
            262
        ],
        "token_usage": {
            "tokens": 1616,
            "cost": 0.00034499999999999993
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CASE WHEN T2.\"Consumer consent provided?\" IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.\"Date received\" = '2016-10-28'"
    },
    {
        "sample_id": 338,
        "pred_sql": "SELECT state.region FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode GROUP BY state.region ORDER BY COUNT(client.client_id) DESC LIMIT 1 OFFSET 1;",
        "retrieved": [
            296
        ],
        "token_usage": {
            "tokens": 1510,
            "cost": 0.0003102
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1"
    },
    {
        "sample_id": 281,
        "pred_sql": "SELECT COUNT(*) AS complaint_count FROM callcenterlogs INNER JOIN client ON callcenterlogs.rand_client = client.client_id WHERE callcenterlogs.type = 'Credit card' AND client.sex = 'female'",
        "retrieved": [
            397
        ],
        "token_usage": {
            "tokens": 1473,
            "cost": 0.0002772
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'"
    },
    {
        "sample_id": 390,
        "pred_sql": "SELECT client.phone, callcenterlogs.complaint_id FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.outcome = 'in progress'",
        "retrieved": [
            251
        ],
        "token_usage": {
            "tokens": 1458,
            "cost": 0.00028575
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.phone, T2.\"Complaint ID\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Company response to consumer\" = 'In progress'"
    },
    {
        "sample_id": 250,
        "pred_sql": "SELECT COUNT(callcenterlogs.\"rand client\") FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\" WHERE client.city = 'New York' AND callcenterlogs.type = 'Deposits and withdrawals'",
        "retrieved": [
            348
        ],
        "token_usage": {
            "tokens": 1469,
            "cost": 0.0002811
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'"
    },
    {
        "sample_id": 368,
        "pred_sql": "SELECT COUNT(*) FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE state.region = 'Middle Atlantic' AND client.sex = 'female' AND client.age <= 18;",
        "retrieved": [
            397
        ],
        "token_usage": {
            "tokens": 1503,
            "cost": 0.00029204999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Middle Atlantic' AND T1.sex = 'Female' AND T1.age < 18"
    },
    {
        "sample_id": 343,
        "pred_sql": "SELECT CASE WHEN COUNT(CASE WHEN client.email LIKE '%@gmail.com%' THEN 1 END) > COUNT(CASE WHEN client.email LIKE '%@outlook.com%' THEN 1 END) THEN 'Google account' ELSE 'Microsoft account' END AS more_clients FROM client WHERE client.age = 'teenager'",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1488,
            "cost": 0.0002826
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19"
    },
    {
        "sample_id": 321,
        "pred_sql": "SELECT callcenterlogs.ser_time FROM client INNER JOIN callcenterlogs AS T2 ON client.client_id = T2.\"rand client\" WHERE client.first = 'Kendall' AND client.last = 'Allen' AND callcenterlogs.\"type\" = 'credit card'",
        "retrieved": [
            249
        ],
        "token_usage": {
            "tokens": 1529,
            "cost": 0.00031979999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'"
    },
    {
        "sample_id": 278,
        "pred_sql": "SELECT client.first, client.middle, client.last, client.phone FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.submitted_via = 'fax'",
        "retrieved": [
            251
        ],
        "token_usage": {
            "tokens": 1493,
            "cost": 0.00030674999999999995
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Fax'"
    },
    {
        "sample_id": 367,
        "pred_sql": "SELECT strftime('%Y', callcenterlogs.\"date received\") AS year, COUNT(*) AS complaint_count FROM callcenterlogs INNER JOIN events ON callcenterlogs.\"complaint id\" = events.\"complaint id\" INNER JOIN client ON callcenterlogs.\"rand client\" = client.client_id WHERE events.product = 'credit card' AND events.issue = 'overlimit fees' GROUP BY year;",
        "retrieved": [
            312
        ],
        "token_usage": {
            "tokens": 1537,
            "cost": 0.00031965
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT strftime('%Y', \"Date received\"), COUNT(\"Date received\") FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', \"Date received\") HAVING COUNT(\"Date received\")"
    },
    {
        "sample_id": 400,
        "pred_sql": "SELECT DISTINCT events.issue FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client INNER JOIN events ON callcenterlogs.complaint_id = events.complaint_id WHERE client.age <= '25' AND client.sex = 'male'",
        "retrieved": [
            397
        ],
        "token_usage": {
            "tokens": 1503,
            "cost": 0.0002934
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25"
    },
    {
        "sample_id": 291,
        "pred_sql": "SELECT client.client_id, client.first, client.middle, client.last, client.email FROM client WHERE client.social IS NULL OR client.social = ''",
        "retrieved": [
            273
        ],
        "token_usage": {
            "tokens": 1463,
            "cost": 0.00028829999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT Client_ID FROM events WHERE \"Consumer consent provided?\" = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''"
    },
    {
        "sample_id": 335,
        "pred_sql": "SELECT callcenterlogs.server FROM callcenterlogs JOIN events ON callcenterlogs.\"complaint id\" = events.\"complaint id\" WHERE events.\"timely response?\" = 'No'",
        "retrieved": [
            292
        ],
        "token_usage": {
            "tokens": 1513,
            "cost": 0.00028995
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT T2.server FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.\"Submitted via\" = 'Phone' AND T1.\"Timely response?\" = 'No'"
    },
    {
        "sample_id": 387,
        "pred_sql": "SELECT client.email FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.\"date received\" = '2014-07-03'",
        "retrieved": [
            292
        ],
        "token_usage": {
            "tokens": 1564,
            "cost": 0.00031874999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Date received\" = '2014-07-03'"
    },
    {
        "sample_id": 386,
        "pred_sql": "SELECT client.first, client.phone FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand client WHERE callcenterlogs.complaint id = 'CR0922485';",
        "retrieved": [
            242
        ],
        "token_usage": {
            "tokens": 1492,
            "cost": 0.0002895
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Complaint ID\" = 'CR0922485'"
    },
    {
        "sample_id": 6644,
        "pred_sql": "SELECT COUNT(orders.orderid) FROM employees INNER JOIN orders ON employees.employeeid = orders.employeeid WHERE employees.firstname = 'Michael' AND employees.lastname = 'Suyama'",
        "retrieved": [
            6334
        ],
        "token_usage": {
            "tokens": 1135,
            "cost": 0.000213
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "sample_id": 6355,
        "pred_sql": "SELECT COUNT(*) FROM customers WHERE country = (SELECT country FROM customers GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1)",
        "retrieved": [
            6495
        ],
        "token_usage": {
            "tokens": 1134,
            "cost": 0.00022229999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1"
    },
    {
        "sample_id": 6470,
        "pred_sql": "SELECT suppliers.contactname FROM products INNER JOIN suppliers ON products.supplierid = suppliers.supplierid WHERE products.productname = 'Teatime Chocolate Biscuits'",
        "retrieved": [
            6315
        ],
        "token_usage": {
            "tokens": 1151,
            "cost": 0.0002253
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'"
    },
    {
        "sample_id": 6482,
        "pred_sql": "SELECT COUNT(*) FROM products INNER JOIN orderdetails ON products.productid = orderdetails.productid INNER JOIN categories ON products.categoryid = categories.categoryid WHERE categories.categoryname = 'Seafood' AND orderdetails.quantity > 50;",
        "retrieved": [
            6330
        ],
        "token_usage": {
            "tokens": 1188,
            "cost": 0.0002412
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50"
    },
    {
        "sample_id": 6655,
        "pred_sql": "SELECT employees.firstname || ' ' || employees.lastname AS full_name FROM employees WHERE employees.birthdate = '1955-03-04'",
        "retrieved": [
            6656
        ],
        "token_usage": {
            "tokens": 1184,
            "cost": 0.0002406
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'"
    },
    {
        "sample_id": 6653,
        "pred_sql": "SELECT COUNT(customerid) FROM customers WHERE city = 'London'",
        "retrieved": [
            6506
        ],
        "token_usage": {
            "tokens": 1123,
            "cost": 0.00020534999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'"
    },
    {
        "sample_id": 6552,
        "pred_sql": "SELECT COUNT(customers.customerid) FROM customers INNER JOIN orders ON customers.customerid = orders.customerid WHERE customers.country = 'Ireland'",
        "retrieved": [
            6506
        ],
        "token_usage": {
            "tokens": 1151,
            "cost": 0.00022079999999999997
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'"
    },
    {
        "sample_id": 6657,
        "pred_sql": "SELECT COUNT(*) FROM orders INNER JOIN employees ON orders.employeeid = employees.employeeid WHERE employees.city = 'Tacoma'",
        "retrieved": [
            6379
        ],
        "token_usage": {
            "tokens": 1137,
            "cost": 0.00021554999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'"
    },
    {
        "sample_id": 6603,
        "pred_sql": "SELECT SUM(od.quantity) AS total_quantity,\n       (SUM(od.quantity) * 100.0 / (SELECT SUM(quantity) FROM orderdetails)) AS percentage\nFROM orderdetails od\nJOIN products p ON od.productid = p.productid\nWHERE p.productname = 'Geitost';",
        "retrieved": [
            6339
        ],
        "token_usage": {
            "tokens": 1249,
            "cost": 0.00026924999999999996
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 6429,
        "pred_sql": "SELECT products.productname FROM products INNER JOIN categories ON products.categoryid = categories.categoryid WHERE categories.categoryname = 'beverage'",
        "retrieved": [
            6614
        ],
        "token_usage": {
            "tokens": 1119,
            "cost": 0.00020564999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'"
    },
    {
        "sample_id": 6332,
        "pred_sql": "SELECT employees.firstname || ' ' || employees.lastname AS full_name FROM employees ORDER BY employees.birthdate DESC LIMIT 1;",
        "retrieved": [
            6666
        ],
        "token_usage": {
            "tokens": 1170,
            "cost": 0.00024074999999999997
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )"
    },
    {
        "sample_id": 6660,
        "pred_sql": "SELECT customers.phone FROM customers INNER JOIN orders ON customers.customerid = orders.customerid WHERE orders.orderid = '10264'",
        "retrieved": [
            6666
        ],
        "token_usage": {
            "tokens": 1132,
            "cost": 0.0002148
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264"
    },
    {
        "sample_id": 6434,
        "pred_sql": "SELECT suppliers.contactname FROM suppliers INNER JOIN products ON suppliers.supplierid = products.supplierid WHERE products.productname = 'Camembert Pierrot'",
        "retrieved": [
            6425
        ],
        "token_usage": {
            "tokens": 1142,
            "cost": 0.00021585
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'"
    },
    {
        "sample_id": 6446,
        "pred_sql": "SELECT MAX(orderdetails.quantity) FROM orders INNER JOIN orderdetails ON orders.orderid = orderdetails.orderid INNER JOIN products ON orderdetails.productid = products.productid WHERE products.productname = 'Manjimup Dried Apples'",
        "retrieved": [
            6339
        ],
        "token_usage": {
            "tokens": 1213,
            "cost": 0.0002499
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 6699,
        "pred_sql": "SELECT customer.c_name FROM customer INNER JOIN orders ON customer.c_custkey = orders.o_custkey WHERE orders.o_clerk = 'Clerk#000000803' AND orders.o_orderdate = '1997-12-10';",
        "retrieved": [
            6735
        ],
        "token_usage": {
            "tokens": 1852,
            "cost": 0.00035925
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate = '1997-12-10' AND T1.o_clerk = 'Clerk#000000803'"
    },
    {
        "sample_id": 6679,
        "pred_sql": "SELECT orders.o_orderkey FROM customer WHERE c_acctbal < 0",
        "retrieved": [
            6686
        ],
        "token_usage": {
            "tokens": 1792,
            "cost": 0.00033539999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0"
    },
    {
        "sample_id": 6700,
        "pred_sql": "SELECT (lineitem.l_extendedprice * (1 - lineitem.l_discount) * (1 + lineitem.l_tax)) - (partsupp.ps_supplycost * lineitem.l_quantity) AS profit FROM lineitem INNER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey INNER JOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey WHERE partsupp.ps_suppkey = 7414 AND orders.o_orderkey = 817154;",
        "retrieved": [
            6735
        ],
        "token_usage": {
            "tokens": 1885,
            "cost": 0.00038174999999999993
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_suppkey = 7414 AND T1.l_orderkey = 817154"
    },
    {
        "sample_id": 6708,
        "pred_sql": "SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'automobile';",
        "retrieved": [
            6770
        ],
        "token_usage": {
            "tokens": 1732,
            "cost": 0.00030389999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'AUTOMOBILE'"
    },
    {
        "sample_id": 6717,
        "pred_sql": "SELECT n_name FROM nation INNER JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'Asia'",
        "retrieved": [
            6753
        ],
        "token_usage": {
            "tokens": 1747,
            "cost": 0.00031784999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'"
    },
    {
        "sample_id": 6774,
        "pred_sql": "SELECT part.p_name, partsupp.ps_availqty FROM part JOIN partsupp ON part.p_partkey = partsupp.ps_partkey ORDER BY partsupp.ps_availqty DESC LIMIT 10;",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1785,
            "cost": 0.00034694999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey ORDER BY T2.ps_availqty DESC LIMIT 10"
    },
    {
        "sample_id": 6765,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM partsupp) AS percentage FROM partsupp WHERE ps_supplycost > 500",
        "retrieved": [
            6718
        ],
        "token_usage": {
            "tokens": 1773,
            "cost": 0.00033659999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(ps_supplycost > 500, 1, 0)) AS REAL) * 100 / COUNT(ps_suppkey) FROM partsupp"
    },
    {
        "sample_id": 6739,
        "pred_sql": "SELECT COUNT(supplier.s_suppkey) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE supplier.s_acctbal < 0 AND region.r_name = 'Middle East'",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1728,
            "cost": 0.00032714999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T3.s_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T3.s_acctbal < 0 AND T1.r_name = 'MIDDLE EAST'"
    },
    {
        "sample_id": 6791,
        "pred_sql": "SELECT COUNT(customer.c_custkey) FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'Mozambique' AND orders.o_orderpriority = 0",
        "retrieved": [
            6784
        ],
        "token_usage": {
            "tokens": 1770,
            "cost": 0.00034245
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'MOZAMBIQUE' AND T3.o_orderpriority = '5-LOW'"
    },
    {
        "sample_id": 6690,
        "pred_sql": "SELECT n_name FROM nation WHERE n_nationkey = (SELECT s_nationkey FROM supplier WHERE s_suppkey = 34);",
        "retrieved": [],
        "token_usage": {
            "tokens": 1607,
            "cost": 0.0002802
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 34"
    },
    {
        "sample_id": 6803,
        "pred_sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33;",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1697,
            "cost": 0.0003063
        },
        "db_id": "retails",
        "gold_sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33"
    },
    {
        "sample_id": 6714,
        "pred_sql": "SELECT COUNT(s_suppkey) FROM supplier WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Japan')",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1712,
            "cost": 0.00032114999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "sample_id": 6911,
        "pred_sql": "SELECT SUM(lineitem.l_quantity) AS total_quantity \nFROM customer \nINNER JOIN orders ON customer.c_custkey = orders.o_custkey \nINNER JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey \nWHERE customer.c_custkey = '101660' AND orders.o_orderdate = '1995-10-05';",
        "retrieved": [
            6735
        ],
        "token_usage": {
            "tokens": 1858,
            "cost": 0.00036375
        },
        "db_id": "retails",
        "gold_sql": "SELECT SUM(T2.l_quantity) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1995-10-05' AND T1.o_custkey = 101660"
    },
    {
        "sample_id": 6899,
        "pred_sql": "SELECT COUNT(lineitem.l_linenumber) FROM lineitem WHERE lineitem.l_shipdate BETWEEN 19940101 AND 19941231 AND lineitem.l_shipmode = 'truck' AND lineitem.l_returnflag = 'R'",
        "retrieved": [
            6782
        ],
        "token_usage": {
            "tokens": 1798,
            "cost": 0.0003606
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994' AND l_returnflag = 'R' AND l_shipmode = 'TRUCK'"
    },
    {
        "sample_id": 6703,
        "pred_sql": "SELECT (COUNT(s.s_suppkey) * 100.0 / (SELECT COUNT(*) FROM supplier)) AS percentage_debt_suppliers FROM supplier s WHERE s.s_acctbal < 0 AND s.s_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_name = 'Japan')",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1745,
            "cost": 0.0003387
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.n_name = 'JAPAN', 1, 0)) AS REAL) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0"
    },
    {
        "sample_id": 6815,
        "pred_sql": "SELECT c_name FROM customer WHERE c_custkey = '93697' AND c_custkey IN (SELECT o_custkey FROM orders WHERE o_totalprice = 191918.92)",
        "retrieved": [
            6735
        ],
        "token_usage": {
            "tokens": 1795,
            "cost": 0.00032595
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697"
    },
    {
        "sample_id": 6852,
        "pred_sql": "SELECT supplier.s_name FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Argentina' AND supplier.s_acctbal < 0;",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1712,
            "cost": 0.00031709999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.s_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'ARGENTINA'"
    },
    {
        "sample_id": 6773,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN customer.c_mktsegment = 'HOUSEHOLD' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(customer.c_name) AS percentage FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'AFRICA'",
        "retrieved": [
            6770
        ],
        "token_usage": {
            "tokens": 1826,
            "cost": 0.00035849999999999993
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.r_name = 'AFRICA', 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey WHERE T3.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "sample_id": 6749,
        "pred_sql": "SELECT orders.o_comment FROM orders INNER JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'furniture' LIMIT 5;",
        "retrieved": [
            6676
        ],
        "token_usage": {
            "tokens": 1760,
            "cost": 0.0003315
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'Furniture' LIMIT 5"
    },
    {
        "sample_id": 6831,
        "pred_sql": "SELECT r_name, COUNT(c_custkey) AS customer_count FROM customer AS c INNER JOIN nation AS n ON c.c_nationkey = n.n_nationkey INNER JOIN region AS r ON n.n_regionkey = r.r_regionkey GROUP BY r_name ORDER BY customer_count DESC LIMIT 1;",
        "retrieved": [
            6716
        ],
        "token_usage": {
            "tokens": 1956,
            "cost": 0.0003807
        },
        "db_id": "retails",
        "gold_sql": "SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 6905,
        "pred_sql": "SELECT nation.n_name FROM nation JOIN supplier ON nation.n_nationkey = supplier.s_nationkey GROUP BY nation.n_name ORDER BY COUNT(supplier.s_suppkey) ASC LIMIT 1;",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1711,
            "cost": 0.00031965
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1"
    },
    {
        "sample_id": 6711,
        "pred_sql": "SELECT n_name, COUNT(c_custkey) AS customer_count FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey GROUP BY n_name ORDER BY customer_count DESC LIMIT 1;",
        "retrieved": [
            6716
        ],
        "token_usage": {
            "tokens": 1948,
            "cost": 0.00037499999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T.n_name FROM ( SELECT T2.n_name, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 6798,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN customer.c_mktsegment = 'household' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(customer.c_name) AS percentage FROM customer INNER JOIN nation AS T2 ON customer.c_nationkey = T2.n_nationkey WHERE nation.n_name = 'Iran'",
        "retrieved": [
            6770
        ],
        "token_usage": {
            "tokens": 1816,
            "cost": 0.00035295
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.n_name = 'IRAN', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "sample_id": 6742,
        "pred_sql": "SELECT COUNT(*) AS total_orders FROM orders INNER JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE strftime('%Y', orders.o_orderdate) = '1994'",
        "retrieved": [
            6828
        ],
        "token_usage": {
            "tokens": 1733,
            "cost": 0.0003216
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994'"
    },
    {
        "sample_id": 6851,
        "pred_sql": "SELECT supplier.s_phone FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Japan'",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1719,
            "cost": 0.00032445
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "sample_id": 6685,
        "pred_sql": "SELECT SUM(orders.o_totalprice) FROM orders INNER JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany')",
        "retrieved": [
            6676
        ],
        "token_usage": {
            "tokens": 1781,
            "cost": 0.00034544999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "sample_id": 6694,
        "pred_sql": "SELECT COUNT(customer.c_custkey) FROM customer INNER JOIN nation AS T2 ON customer.c_nationkey = T2.n_nationkey WHERE customer.c_acctbal < 0 AND T2.n_name = 'Morocco'",
        "retrieved": [
            6732
        ],
        "token_usage": {
            "tokens": 1771,
            "cost": 0.000339
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'MOROCCO' AND T1.c_acctbal < 0"
    },
    {
        "sample_id": 6880,
        "pred_sql": "SELECT SUM(lineitem.l_quantity) FROM lineitem INNER JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'hot spring dodger dim light'",
        "retrieved": [
            6872
        ],
        "token_usage": {
            "tokens": 1749,
            "cost": 0.000324
        },
        "db_id": "retails",
        "gold_sql": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'"
    },
    {
        "sample_id": 6820,
        "pred_sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = 0",
        "retrieved": [
            6784
        ],
        "token_usage": {
            "tokens": 1664,
            "cost": 0.00028064999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'"
    },
    {
        "sample_id": 6816,
        "pred_sql": "SELECT nation.n_name, region.r_name FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey INNER JOIN region ON nation.n_regionkey = region.r_regionkey WHERE customer.c_custkey = '000000008';",
        "retrieved": [
            6735
        ],
        "token_usage": {
            "tokens": 1799,
            "cost": 0.00033239999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'"
    },
    {
        "sample_id": 6890,
        "pred_sql": "SELECT MAX(l_discount) FROM lineitem INNER JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate'",
        "retrieved": [
            6676
        ],
        "token_usage": {
            "tokens": 1743,
            "cost": 0.0003186
        },
        "db_id": "retails",
        "gold_sql": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "sample_id": 6900,
        "pred_sql": "SELECT COUNT(c_name) FROM customer WHERE c_mktsegment = 'machinery' AND c_acctbal < 0",
        "retrieved": [
            6753
        ],
        "token_usage": {
            "tokens": 1705,
            "cost": 0.0002922
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0 AND c_mktsegment = 'MACHINERY'"
    },
    {
        "sample_id": 6813,
        "pred_sql": "SELECT r_name, COUNT(n_nationkey) AS country_count FROM region JOIN nation ON region.r_regionkey = nation.n_regionkey GROUP BY r_name ORDER BY country_count ASC LIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1686,
            "cost": 0.00032805
        },
        "db_id": "retails",
        "gold_sql": "SELECT T.r_name FROM ( SELECT T1.r_name, COUNT(T2.n_name) AS num FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey GROUP BY T1.r_name ) AS T ORDER BY T.num LIMIT 1"
    },
    {
        "sample_id": 6758,
        "pred_sql": "SELECT COUNT(customer.c_name) FROM nation INNER JOIN customer ON nation.n_nationkey = customer.c_nationkey WHERE customer.c_acctbal < 1000 AND nation.n_name = 'Brazil'",
        "retrieved": [
            6753
        ],
        "token_usage": {
            "tokens": 1811,
            "cost": 0.00035084999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000"
    },
    {
        "sample_id": 6895,
        "pred_sql": "SELECT (lineitem.l_extendedprice * (1 - lineitem.l_discount)) AS discounted_price FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey WHERE orders.o_orderkey = 1 AND lineitem.l_partkey = (SELECT p.p_partkey FROM part p WHERE p.p_name = 'burnished seashell gainsboro navajo chocolate')",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1816,
            "cost": 0.00037275
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1"
    },
    {
        "sample_id": 6795,
        "pred_sql": "SELECT COUNT(*) FROM supplier WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany') AND s_comment LIKE '%carefully regular packages%';",
        "retrieved": [
            6686
        ],
        "token_usage": {
            "tokens": 1734,
            "cost": 0.00030149999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'"
    },
    {
        "sample_id": 6846,
        "pred_sql": "SELECT c.c_name FROM customer c INNER JOIN orders o ON c.c_custkey = o.o_custkey INNER JOIN lineitem l ON o.o_orderkey = l.l_orderkey ORDER BY l.l_discount DESC LIMIT 1;",
        "retrieved": [
            6723
        ],
        "token_usage": {
            "tokens": 2049,
            "cost": 0.0003942
        },
        "db_id": "retails",
        "gold_sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY T2.l_discount DESC LIMIT 1"
    },
    {
        "sample_id": 6842,
        "pred_sql": "SELECT lineitem.l_linenumber, lineitem.l_quantity, lineitem.l_shipmode FROM lineitem WHERE lineitem.l_quantity = (SELECT MAX(l_quantity) FROM lineitem WHERE l_shipmode = 'air') AND lineitem.l_shipmode = 'air';",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1754,
            "cost": 0.00034185
        },
        "db_id": "retails",
        "gold_sql": "SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1"
    },
    {
        "sample_id": 6822,
        "pred_sql": "SELECT supplier.s_suppkey, supplier.s_acctbal FROM supplier ORDER BY supplier.s_acctbal DESC LIMIT 1",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1735,
            "cost": 0.0003219
        },
        "db_id": "retails",
        "gold_sql": "SELECT MAX(s_acctbal) FROM supplier"
    },
    {
        "sample_id": 6897,
        "pred_sql": "SELECT COUNT(orders.o_orderkey) FROM orders INNER JOIN lineitem AS T2 ON orders.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'MAIL' AND strftime('%Y', orders.o_orderdate) = '1997'",
        "retrieved": [
            6715
        ],
        "token_usage": {
            "tokens": 1778,
            "cost": 0.00034409999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'"
    },
    {
        "sample_id": 6670,
        "pred_sql": "SELECT COUNT(DISTINCT lineitem.l_partkey) FROM lineitem WHERE lineitem.l_orderkey = 5 AND lineitem.l_returnflag = 'R'",
        "retrieved": [
            6782
        ],
        "token_usage": {
            "tokens": 1761,
            "cost": 0.00034020000000000003
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'"
    },
    {
        "sample_id": 6859,
        "pred_sql": "SELECT COUNT(*) FROM part WHERE p_retailprice > 1900;",
        "retrieved": [
            6718
        ],
        "token_usage": {
            "tokens": 1714,
            "cost": 0.0003012
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900"
    },
    {
        "sample_id": 6704,
        "pred_sql": "SELECT c_name FROM customer WHERE c_acctbal = (SELECT MIN(c_acctbal) FROM customer)",
        "retrieved": [
            6819
        ],
        "token_usage": {
            "tokens": 1681,
            "cost": 0.0002994
        },
        "db_id": "retails",
        "gold_sql": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "sample_id": 6906,
        "pred_sql": "SELECT partsupp.ps_supplycost FROM partsupp INNER JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'medium metallic grey dodger linen'",
        "retrieved": [
            6718
        ],
        "token_usage": {
            "tokens": 1763,
            "cost": 0.00032924999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'medium metallic grey dodger linen'"
    },
    {
        "sample_id": 6757,
        "pred_sql": "SELECT nation.n_name, region.r_name, customer.c_address \nFROM customer \nJOIN nation ON customer.c_nationkey = nation.n_nationkey \nJOIN region ON nation.n_regionkey = region.r_regionkey \nWHERE customer.c_address = 'wH55UnX7 VI';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1704,
            "cost": 0.0003339
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'"
    },
    {
        "sample_id": 6794,
        "pred_sql": "SELECT part.p_name FROM part WHERE part.p_retailprice > 0",
        "retrieved": [
            6718
        ],
        "token_usage": {
            "tokens": 1713,
            "cost": 0.00030194999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.l_discount = 0.0000"
    },
    {
        "sample_id": 6785,
        "pred_sql": "SELECT COUNT(supplier.s_suppkey) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE supplier.s_acctbal < 0 AND nation.n_name = 'Egypt'",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1700,
            "cost": 0.0003126
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'EGYPT'"
    },
    {
        "sample_id": 6910,
        "pred_sql": "SELECT orders.o_clerk FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_extendedprice = (SELECT MAX(lineitem.l_extendedprice) FROM lineitem)",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1731,
            "cost": 0.00032534999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T2.l_extendedprice DESC LIMIT 1"
    },
    {
        "sample_id": 6861,
        "pred_sql": "SELECT DISTINCT part.p_brand FROM part WHERE part.p_type = 'promo brushed steel'",
        "retrieved": [
            6872
        ],
        "token_usage": {
            "tokens": 1715,
            "cost": 0.00030539999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "sample_id": 5402,
        "pred_sql": "SELECT employees.firstname, employees.middleinitial, employees.lastname FROM employees INNER JOIN sales ON employees.employeeid = sales.salespersonid INNER JOIN customers ON sales.customerid = customers.customerid WHERE customers.firstname = 'Elizabeth' AND customers.middleinitial = 'A' AND customers.lastname = 'White' AND sales.productid = (SELECT productid FROM products WHERE name = 'Road-250 Black' LIMIT 1)",
        "retrieved": [
            5448
        ],
        "token_usage": {
            "tokens": 872,
            "cost": 0.00022215
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID INNER JOIN Customers AS T4 ON T2.CustomerID = T4.CustomerID WHERE T4.MiddleInitial = 'A' AND T4.LastName = 'White' AND T1.Name = 'Road-250 Black, 48' AND T4.FirstName = 'Elizabeth'"
    },
    {
        "sample_id": 5384,
        "pred_sql": "SELECT customers.firstname, customers.lastname, SUM(sales.quantity) AS total_quantity FROM sales INNER JOIN customers ON sales.customerid = customers.customerid WHERE customers.lastname = 'Valdez' GROUP BY customers.customerid ORDER BY total_quantity DESC LIMIT 1",
        "retrieved": [
            5431
        ],
        "token_usage": {
            "tokens": 806,
            "cost": 0.00019424999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.LastName = 'Valdez' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 5417,
        "pred_sql": "SELECT employees.firstname FROM employees INNER JOIN sales ON employees.employeeid = sales.salespersonid WHERE sales.quantity > 500",
        "retrieved": [
            5415
        ],
        "token_usage": {
            "tokens": 731,
            "cost": 0.00015194999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.Quantity > 500"
    },
    {
        "sample_id": 5363,
        "pred_sql": "SELECT COUNT(salesid) AS total_sales FROM sales WHERE customerid = '80'",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 766,
            "cost": 0.00016304999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80"
    },
    {
        "sample_id": 5438,
        "pred_sql": "SELECT products.price, products.name FROM products INNER JOIN sales ON products.productid = sales.productid INNER JOIN customers ON sales.customerid = customers.customerid WHERE customers.firstname = 'Erica' AND customers.lastname = 'Xu'",
        "retrieved": [
            5433
        ],
        "token_usage": {
            "tokens": 831,
            "cost": 0.0002025
        },
        "db_id": "sales",
        "gold_sql": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'"
    },
    {
        "sample_id": 5451,
        "pred_sql": "SELECT SUM(products.price * sales.quantity) AS total_sales_amount FROM sales INNER JOIN employees ON sales.salespersonid = employees.employeeid INNER JOIN products ON sales.productid = products.productid WHERE employees.firstname = 'Heather' AND employees.lastname = 'McBadden';",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 843,
            "cost": 0.00020789999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Heather' AND T1.LastName = 'McBadden'"
    },
    {
        "sample_id": 5414,
        "pred_sql": "SELECT employees.firstname, employees.lastname FROM employees INNER JOIN sales ON employees.employeeid = sales.salespersonid GROUP BY employees.employeeid ORDER BY SUM(sales.quantity) DESC LIMIT 1",
        "retrieved": [
            5415
        ],
        "token_usage": {
            "tokens": 795,
            "cost": 0.00019079999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 5393,
        "pred_sql": "SELECT products.name FROM products INNER JOIN sales ON products.productid = sales.productid WHERE sales.quantity > 950;",
        "retrieved": [
            5415
        ],
        "token_usage": {
            "tokens": 744,
            "cost": 0.00015974999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 950"
    },
    {
        "sample_id": 5396,
        "pred_sql": "SELECT SUM(sales.quantity * products.price) AS total_sales_amount FROM sales INNER JOIN products ON sales.productid = products.productid WHERE products.name = 'Reflector'",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 796,
            "cost": 0.00018195
        },
        "db_id": "sales",
        "gold_sql": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Reflector'"
    },
    {
        "sample_id": 5418,
        "pred_sql": "SELECT customers.firstname FROM customers INNER JOIN sales ON customers.customerid = sales.customerid WHERE sales.salespersonid = '1'",
        "retrieved": [
            5374
        ],
        "token_usage": {
            "tokens": 775,
            "cost": 0.00017114999999999999
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 1"
    },
    {
        "sample_id": 5447,
        "pred_sql": "SELECT COUNT(products.productid) FROM products INNER JOIN sales ON products.productid = sales.productid WHERE products.price = '0.0'",
        "retrieved": [
            5380
        ],
        "token_usage": {
            "tokens": 764,
            "cost": 0.00017085
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0"
    },
    {
        "sample_id": 5420,
        "pred_sql": "SELECT customers.firstname, customers.lastname FROM customers INNER JOIN sales ON customers.customerid = sales.customerid WHERE sales.quantity > 600",
        "retrieved": [
            5415
        ],
        "token_usage": {
            "tokens": 750,
            "cost": 0.0001629
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Quantity > 600"
    },
    {
        "sample_id": 5457,
        "pred_sql": "SELECT SUM(sales.quantity) AS total_quantity FROM sales WHERE sales.salesid = '551971' AND sales.productid = (SELECT productid FROM products WHERE name = 'chainring bolt')",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 820,
            "cost": 0.00019454999999999999
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Chainring Bolts' AND T1.SalesID = 551971"
    },
    {
        "sample_id": 5435,
        "pred_sql": "SELECT COUNT(*) FROM customers INNER JOIN sales ON customers.customerid = sales.customerid WHERE customers.firstname = 'Erica' AND sales.quantity < 200;",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 795,
            "cost": 0.00017685
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(T1.ProductID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Erica' AND T1.Quantity < 200"
    },
    {
        "sample_id": 5456,
        "pred_sql": "SELECT employees.firstname, employees.lastname FROM sales INNER JOIN products ON sales.productid = products.productid INNER JOIN employees ON sales.salespersonid = employees.employeeid WHERE products.name = 'ML Road Frame-W - Yellow, 40'",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 790,
            "cost": 0.00017565
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'ML Road Frame-W - Yellow, 40'"
    },
    {
        "sample_id": 5454,
        "pred_sql": "SELECT employees.firstname, employees.middleinitial, employees.lastname FROM employees INNER JOIN sales ON sales.salespersonid = employees.employeeid GROUP BY sales.salespersonid, employees.firstname, employees.middleinitial, employees.lastname ORDER BY COUNT(sales.salesid) DESC LIMIT 3",
        "retrieved": [
            5448
        ],
        "token_usage": {
            "tokens": 818,
            "cost": 0.0001902
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 3"
    },
    {
        "sample_id": 5416,
        "pred_sql": "SELECT products.name FROM products INNER JOIN sales ON products.productid = sales.productid WHERE sales.salespersonid = '20' GROUP BY products.name ORDER BY SUM(sales.quantity) DESC LIMIT 1;",
        "retrieved": [
            5373
        ],
        "token_usage": {
            "tokens": 787,
            "cost": 0.00018329999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 20 ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 5423,
        "pred_sql": "SELECT DISTINCT sales.customerid FROM sales INNER JOIN products ON sales.productid = products.productid WHERE products.price BETWEEN '1000' AND '2000'",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 786,
            "cost": 0.00017324999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T2.CustomerID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 1000 AND 2000"
    },
    {
        "sample_id": 5426,
        "pred_sql": "SELECT (SUM(CASE WHEN products.name = 'Blade' THEN sales.quantity ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_of_blades_sold FROM sales INNER JOIN products ON sales.productid = products.productid;",
        "retrieved": [
            5413
        ],
        "token_usage": {
            "tokens": 757,
            "cost": 0.0001725
        },
        "db_id": "sales",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.Name = 'Blade', T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 5425,
        "pred_sql": "SELECT (SUM(CASE WHEN products.price = '0.0' THEN sales.quantity ELSE 0 END) * 100.0 / SUM(sales.quantity)) AS gift_percentage FROM sales INNER JOIN products ON sales.productid = products.productid;",
        "retrieved": [
            5419
        ],
        "token_usage": {
            "tokens": 844,
            "cost": 0.0002004
        },
        "db_id": "sales",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.Price = 0, T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity)FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 5434,
        "pred_sql": "SELECT COUNT(*) FROM sales INNER JOIN products ON sales.productid = products.productid WHERE sales.quantity = 60 AND products.price <= 500",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 829,
            "cost": 0.00019634999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity = 60 AND T1.Price <= 500"
    },
    {
        "sample_id": 5439,
        "pred_sql": "SELECT sales.salesid FROM sales INNER JOIN products ON sales.productid = products.productid WHERE sales.quantity = '590' AND products.name = 'External Lock Washer 7'",
        "retrieved": [
            5373
        ],
        "token_usage": {
            "tokens": 782,
            "cost": 0.0001785
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'External Lock Washer 7' AND T1.Quantity = 590"
    },
    {
        "sample_id": 8156,
        "pred_sql": "SELECT (SUM(CASE WHEN sales_in_weather.item_nbr = '5' THEN sales_in_weather.units ELSE 0 END) * 100.0 / SUM(sales_in_weather.units)) AS percentage_units_sold\nFROM sales_in_weather\nINNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr\nINNER JOIN weather ON relation.station_nbr = weather.station_nbr\nWHERE sales_in_weather.store_nbr = '3' AND weather.date LIKE '2012%' AND weather.tmax = (SELECT MAX(tmax) FROM weather WHERE date LIKE '2012%')",
        "retrieved": [
            8144
        ],
        "token_usage": {
            "tokens": 1362,
            "cost": 0.0003204
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' )"
    },
    {
        "sample_id": 8181,
        "pred_sql": "SELECT relation.station_nbr, COUNT(DISTINCT relation.store_nbr) AS store_count FROM relation GROUP BY relation.station_nbr ORDER BY store_count DESC LIMIT 1;",
        "retrieved": [
            8182
        ],
        "token_usage": {
            "tokens": 1262,
            "cost": 0.00025814999999999996
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1"
    },
    {
        "sample_id": 8189,
        "pred_sql": "SELECT relation.store_nbr, SUM(sales_in_weather.units) AS total_units FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE weather.station_nbr = 17 AND sales_in_weather.item_nbr = '45' AND sales_in_weather.date BETWEEN '2012-10-01' AND '2012-10-31' GROUP BY relation.store_nbr ORDER BY total_units DESC LIMIT 1;",
        "retrieved": [
            8187
        ],
        "token_usage": {
            "tokens": 1275,
            "cost": 0.00030419999999999997
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 45 AND T2.station_nbr = 17 AND T1.\"date\" LIKE '%2012-10%' GROUP BY T1.store_nbr ORDER BY SUM(T1.units) DESC LIMIT 1"
    },
    {
        "sample_id": 8195,
        "pred_sql": "SELECT r.station_nbr, AVG(w.tmax) AS avg_max_temp\nFROM relation r\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE w.date BETWEEN '2012-02-01' AND '2012-02-29'\nGROUP BY r.station_nbr\nORDER BY COUNT(DISTINCT r.store_nbr) DESC\nLIMIT 1;",
        "retrieved": [
            8151
        ],
        "token_usage": {
            "tokens": 1309,
            "cost": 0.00030614999999999993
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT CAST(SUM(T2.tmax) AS REAL) / 29 FROM ( SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1 ) AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE SUBSTR(T2.\"date\", 1, 7) = '2012-02'"
    },
    {
        "sample_id": 8177,
        "pred_sql": "SELECT sales_in_weather.item_nbr FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.store_nbr = '1' AND sales_in_weather.date = '2012-01-01' ORDER BY sales_in_weather.units DESC LIMIT 1",
        "retrieved": [
            8144
        ],
        "token_usage": {
            "tokens": 1304,
            "cost": 0.0002892
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT item_nbr FROM sales_in_weather WHERE \"date\" = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1"
    },
    {
        "sample_id": 8149,
        "pred_sql": "SELECT SUM(sales_in_weather.units) FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.store_nbr = '3' AND sales_in_weather.item_nbr = '5' AND weather.preciptotal > 0.05;",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.00028454999999999995
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5"
    },
    {
        "sample_id": 8138,
        "pred_sql": "SELECT SUM(sales_in_weather.units) AS total_units_sold FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.item_nbr = '9' AND sales_in_weather.store_nbr = '1' AND sales_in_weather.date BETWEEN '2012-01-01' AND '2012-01-31'",
        "retrieved": [
            8144
        ],
        "token_usage": {
            "tokens": 1298,
            "cost": 0.00028785
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(units) FROM sales_in_weather WHERE SUBSTR(\"date\", 6, 2) = '01' AND SUBSTR(\"date\", 1, 4) = '2012' AND item_nbr = 9 AND store_nbr = 1"
    },
    {
        "sample_id": 8164,
        "pred_sql": "SELECT COUNT(DISTINCT relation.store_nbr) AS store_count \nFROM weather \nJOIN relation ON weather.station_nbr = relation.station_nbr \nWHERE weather.depart > 0 \nAND weather.depart = (SELECT MAX(depart) FROM weather WHERE depart > 0)",
        "retrieved": [
            8182
        ],
        "token_usage": {
            "tokens": 1321,
            "cost": 0.0002877
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY depart DESC LIMIT 1 )"
    },
    {
        "sample_id": 8171,
        "pred_sql": "SELECT weather.codesum FROM weather INNER JOIN relation ON weather.station_nbr = relation.station_nbr INNER JOIN sales_in_weather ON relation.store_nbr = sales_in_weather.store_nbr WHERE sales_in_weather.date = '2013-02-12' AND relation.store_nbr = 2",
        "retrieved": [
            8172
        ],
        "token_usage": {
            "tokens": 1218,
            "cost": 0.00026864999999999994
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT T1.codesum FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2013-02-12' AND T2.store_nbr = 2"
    },
    {
        "sample_id": 8190,
        "pred_sql": "SELECT sales_in_weather.item_nbr FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE weather.snowfall = (SELECT MAX(snowfall) FROM weather) AND sales_in_weather.date = weather.date",
        "retrieved": [
            8209
        ],
        "token_usage": {
            "tokens": 1221,
            "cost": 0.00024839999999999997
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN ( SELECT station_nbr, \"date\" FROM weather ORDER BY snowfall DESC LIMIT 1 ) AS T3 ON T2.station_nbr = T3.station_nbr"
    },
    {
        "sample_id": 8152,
        "pred_sql": "SELECT (units_store5 - units_store10) AS difference FROM (SELECT SUM(sales_in_weather.units) AS units_store5 FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.item_nbr = '16' AND sales_in_weather.store_nbr = '5' AND weather.tmax = (SELECT MAX(tmax) FROM weather WHERE date LIKE '2012%') GROUP BY sales_in_weather.date) AS store5_sales, (SELECT SUM(sales_in_weather.units) AS units_store10 FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.item_nbr = '16' AND sales_in_weather.store_nbr = '10' AND weather.tmax = (SELECT MAX(tmax) FROM weather WHERE date LIKE '2012%') GROUP BY sales_in_weather.date) AS store10_sales;",
        "retrieved": [
            8144
        ],
        "token_usage": {
            "tokens": 1460,
            "cost": 0.00038009999999999997
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )"
    },
    {
        "sample_id": 8180,
        "pred_sql": "SELECT weather.date, weather.tmax FROM weather WHERE weather.station_nbr = 1 AND weather.date BETWEEN '2012-01-01' AND '2014-12-31' ORDER BY weather.tmax DESC LIMIT 1;",
        "retrieved": [
            8140
        ],
        "token_usage": {
            "tokens": 1201,
            "cost": 0.000267
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT \"date\" FROM weather WHERE station_nbr = 1 AND CAST(SUBSTR(\"date\", 1, 4) AS int) BETWEEN 2012 AND 2014 ORDER BY tmax DESC LIMIT 1"
    },
    {
        "sample_id": 8184,
        "pred_sql": "SELECT COUNT(DISTINCT relation.store_nbr) AS store_count FROM relation INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE weather.avgspeed = (SELECT MAX(avgspeed) FROM weather)",
        "retrieved": [
            8193
        ],
        "token_usage": {
            "tokens": 1133,
            "cost": 0.00022664999999999995
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 )"
    },
    {
        "sample_id": 8178,
        "pred_sql": "SELECT COUNT(DISTINCT relation.store_nbr) FROM relation WHERE relation.station_nbr = 12;",
        "retrieved": [
            8193
        ],
        "token_usage": {
            "tokens": 1094,
            "cost": 0.00020324999999999995
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(store_nbr) FROM relation WHERE station_nbr = 12"
    },
    {
        "sample_id": 8146,
        "pred_sql": "SELECT COUNT(sales_in_weather.date) FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.store_nbr = '3' AND sales_in_weather.item_nbr = '5' AND weather.tmax > 90 AND sales_in_weather.units > 100",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1302,
            "cost": 0.00029385
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90"
    },
    {
        "sample_id": 8200,
        "pred_sql": "SELECT MIN(dewpoint) AS min_dew_point FROM weather;",
        "retrieved": [
            8145
        ],
        "token_usage": {
            "tokens": 1174,
            "cost": 0.00022155
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT MIN(dewpoint) FROM weather"
    },
    {
        "sample_id": 3018,
        "pred_sql": "SELECT COUNT(paragraphs.id) FROM paragraphs INNER JOIN chapters ON paragraphs.chapter_id = chapters.id INNER JOIN works ON chapters.work_id = works.id WHERE chapters.act = '5' AND chapters.scene = '1' AND works.title = 'Comedy of Errors'",
        "retrieved": [
            2956
        ],
        "token_usage": {
            "tokens": 956,
            "cost": 0.0002298
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 5 AND T2.Scene = 1 AND T1.Title = 'Comedy of Errors'"
    },
    {
        "sample_id": 3015,
        "pred_sql": "SELECT COUNT(scene) FROM chapters WHERE act = '5' AND work_id = '9'",
        "retrieved": [
            2956
        ],
        "token_usage": {
            "tokens": 876,
            "cost": 0.0001836
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5"
    },
    {
        "sample_id": 3056,
        "pred_sql": "SELECT COUNT(paragraphs.plaintext) AS total_lines FROM paragraphs INNER JOIN chapters ON paragraphs.chapter_id = chapters.id INNER JOIN works ON chapters.work_id = works.id WHERE works.title = 'Twelfth Night' AND chapters.act = '1' AND chapters.scene = '2' AND paragraphs.character_id = (SELECT id FROM characters WHERE charname = 'Viola')",
        "retrieved": [
            2956
        ],
        "token_usage": {
            "tokens": 963,
            "cost": 0.00023129999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night'"
    },
    {
        "sample_id": 2980,
        "pred_sql": "SELECT chapters.description FROM works INNER JOIN chapters ON works.id = chapters.work_id WHERE chapters.act = '2' AND chapters.scene = '2' AND works.title = 'Midsummer Night's Dream'",
        "retrieved": [
            3008
        ],
        "token_usage": {
            "tokens": 903,
            "cost": 0.00021329999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'"
    },
    {
        "sample_id": 3010,
        "pred_sql": "SELECT AVG(scene_count) AS average_scenes_per_comedy FROM (SELECT COUNT(scene) AS scene_count FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.genretype = 'comedy' AND works.title LIKE '%Shakespeare%' GROUP BY works.id) AS scene_counts;",
        "retrieved": [
            2983
        ],
        "token_usage": {
            "tokens": 940,
            "cost": 0.0002274
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'"
    },
    {
        "sample_id": 2992,
        "pred_sql": "SELECT works.longtitle FROM works INNER JOIN chapters ON works.id = chapters.work_id WHERE chapters.act = '1' GROUP BY works.longtitle ORDER BY COUNT(chapters.scene) DESC LIMIT 1;",
        "retrieved": [
            2981
        ],
        "token_usage": {
            "tokens": 1039,
            "cost": 0.00023909999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1"
    },
    {
        "sample_id": 2979,
        "pred_sql": "SELECT works.title FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE characters.id = 324 AND characters.description = 'this friend of Caesar'",
        "retrieved": [
            3060
        ],
        "token_usage": {
            "tokens": 937,
            "cost": 0.00021615
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'"
    },
    {
        "sample_id": 2966,
        "pred_sql": "SELECT AVG(character_count) AS average_characters FROM (SELECT COUNT(T3.character_id) AS character_count FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.title LIKE '%Shakespeare%' GROUP BY T1.id) AS character_counts;",
        "retrieved": [
            2965
        ],
        "token_usage": {
            "tokens": 1108,
            "cost": 0.00025755
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT SUM(DISTINCT T4.id) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id"
    },
    {
        "sample_id": 3044,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN works.genretype = 'historical' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(chapters.scene) AS percentage FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.date BETWEEN 1500 AND 1599 AND chapters.scene >= 5",
        "retrieved": [
            2983
        ],
        "token_usage": {
            "tokens": 942,
            "cost": 0.00022724999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599"
    },
    {
        "sample_id": 3054,
        "pred_sql": "SELECT COUNT(DISTINCT works.id) AS work_count FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE characters.charname = 'Third Servingman' AND works.date BETWEEN 1600 AND 1610;",
        "retrieved": [
            2965
        ],
        "token_usage": {
            "tokens": 1120,
            "cost": 0.00025844999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman'"
    },
    {
        "sample_id": 3031,
        "pred_sql": "SELECT works.title FROM works WHERE works.genretype = 'historical' ORDER BY works.date DESC LIMIT 1",
        "retrieved": [
            3029
        ],
        "token_usage": {
            "tokens": 796,
            "cost": 0.0001743
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1"
    },
    {
        "sample_id": 3037,
        "pred_sql": "SELECT characters.description FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.paragraphnum = 20",
        "retrieved": [
            3049
        ],
        "token_usage": {
            "tokens": 820,
            "cost": 0.00017429999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 20"
    },
    {
        "sample_id": 2967,
        "pred_sql": "SELECT AVG(scene_count) FROM (SELECT act, COUNT(scene) AS scene_count FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.title = 'Twelfth Night' GROUP BY act) AS act_scenes;",
        "retrieved": [
            2956
        ],
        "token_usage": {
            "tokens": 886,
            "cost": 0.0001896
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'"
    },
    {
        "sample_id": 3038,
        "pred_sql": "SELECT COUNT(DISTINCT chapters.id) FROM chapters INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE characters.charname = 'Gratiano' AND characters.description = 'friend to Antonio and Bassiano'",
        "retrieved": [
            3062
        ],
        "token_usage": {
            "tokens": 972,
            "cost": 0.00022859999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Gratiano' AND T1.Description = 'friend to Antonio and Bassiano'"
    },
    {
        "sample_id": 3020,
        "pred_sql": "SELECT DISTINCT works.title FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE characters.charname = 'Froth'",
        "retrieved": [
            3060
        ],
        "token_usage": {
            "tokens": 965,
            "cost": 0.00023475
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'"
    },
    {
        "sample_id": 2978,
        "pred_sql": "SELECT COUNT(DISTINCT chapters.id) FROM chapters INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE characters.charname = 'Demetrius'",
        "retrieved": [
            3017
        ],
        "token_usage": {
            "tokens": 833,
            "cost": 0.0001848
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Demetrius'"
    },
    {
        "sample_id": 2972,
        "pred_sql": "SELECT characters.charname FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.plaintext = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'",
        "retrieved": [
            3049
        ],
        "token_usage": {
            "tokens": 904,
            "cost": 0.00021434999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'Would he do so, I''ld beg your precious mistress,Which he counts but a trifle.'"
    },
    {
        "sample_id": 2973,
        "pred_sql": "SELECT COUNT(DISTINCT characters.id) AS character_count FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE works.title = 'Titus Andronicus';",
        "retrieved": [
            2965
        ],
        "token_usage": {
            "tokens": 1053,
            "cost": 0.00022589999999999996
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'"
    },
    {
        "sample_id": 2959,
        "pred_sql": "SELECT COUNT(paragraphs.id) AS paragraph_count FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id WHERE works.title = 'Twelfth Night' AND chapters.act = '1' AND chapters.scene = '1';",
        "retrieved": [
            2956
        ],
        "token_usage": {
            "tokens": 902,
            "cost": 0.00019784999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'"
    },
    {
        "sample_id": 2984,
        "pred_sql": "SELECT AVG(chapter_count) FROM (SELECT COUNT(*) AS chapter_count FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.date = '1599' GROUP BY works.id) AS chapter_counts;",
        "retrieved": [
            2983
        ],
        "token_usage": {
            "tokens": 894,
            "cost": 0.00020159999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'"
    },
    {
        "sample_id": 3016,
        "pred_sql": "SELECT characters.charname, characters.description FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id INNER JOIN chapters ON paragraphs.chapter_id = chapters.id WHERE chapters.id = '18710'",
        "retrieved": [
            3035
        ],
        "token_usage": {
            "tokens": 895,
            "cost": 0.00020984999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710"
    },
    {
        "sample_id": 3001,
        "pred_sql": "SELECT COUNT(DISTINCT characters.id) AS character_count FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE works.title = 'Hamlet';",
        "retrieved": [
            2965
        ],
        "token_usage": {
            "tokens": 1040,
            "cost": 0.00021945
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'"
    },
    {
        "sample_id": 5677,
        "pred_sql": "SELECT shipment.ship_id FROM shipment INNER JOIN city ON shipment.city_id = city.city_id ORDER BY city.population DESC LIMIT 1",
        "retrieved": [
            5664
        ],
        "token_usage": {
            "tokens": 1185,
            "cost": 0.00023354999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.population DESC LIMIT 1"
    },
    {
        "sample_id": 5676,
        "pred_sql": "SELECT customer.cust_name FROM shipment INNER JOIN customer ON shipment.cust_id = customer.cust_id WHERE shipment.ship_id = 1147;",
        "retrieved": [
            5635
        ],
        "token_usage": {
            "tokens": 1161,
            "cost": 0.0002169
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1147'"
    },
    {
        "sample_id": 5625,
        "pred_sql": "SELECT customer.cust_name FROM shipment INNER JOIN customer ON shipment.cust_id = customer.cust_id INNER JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'Oak Park'",
        "retrieved": [
            5635
        ],
        "token_usage": {
            "tokens": 1208,
            "cost": 0.00024644999999999995
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Oak Park'"
    },
    {
        "sample_id": 5624,
        "pred_sql": "SELECT driver.first_name, driver.last_name FROM shipment INNER JOIN driver ON shipment.driver_id = driver.driver_id INNER JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'New York' AND shipment.ship_date BETWEEN '2016-02-01' AND '2016-02-29'",
        "retrieved": [
            5638
        ],
        "token_usage": {
            "tokens": 1305,
            "cost": 0.00029790000000000003
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.city_name = 'New York' AND T1.ship_date LIKE '2016-02%'"
    },
    {
        "sample_id": 5634,
        "pred_sql": "SELECT truck.make FROM truck INNER JOIN shipment ON truck.truck_id = shipment.truck_id WHERE shipment.ship_id = 1011",
        "retrieved": [
            5643
        ],
        "token_usage": {
            "tokens": 1212,
            "cost": 0.00024704999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1011'"
    },
    {
        "sample_id": 5583,
        "pred_sql": "SELECT COUNT(DISTINCT customer.cust_id) FROM customer INNER JOIN shipment ON customer.cust_id = shipment.cust_id WHERE shipment.ship_date BETWEEN '2017-01-01' AND '2017-12-31' AND customer.annual_revenue > 30000000;",
        "retrieved": [
            5614
        ],
        "token_usage": {
            "tokens": 1282,
            "cost": 0.00027824999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2017' AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) T3"
    },
    {
        "sample_id": 5672,
        "pred_sql": "SELECT customer.annual_revenue FROM shipment INNER JOIN customer ON shipment.cust_id = customer.cust_id WHERE shipment.ship_id = 1047",
        "retrieved": [
            5614
        ],
        "token_usage": {
            "tokens": 1201,
            "cost": 0.00023594999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1047'"
    },
    {
        "sample_id": 5667,
        "pred_sql": "SELECT truck.model_year FROM truck INNER JOIN shipment ON truck.truck_id = shipment.truck_id WHERE shipment.ship_id = 1233",
        "retrieved": [
            5643
        ],
        "token_usage": {
            "tokens": 1180,
            "cost": 0.00022829999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1233'"
    },
    {
        "sample_id": 5636,
        "pred_sql": "SELECT driver.state FROM driver INNER JOIN shipment ON driver.driver_id = shipment.driver_id WHERE shipment.ship_id = 1055;",
        "retrieved": [
            5592
        ],
        "token_usage": {
            "tokens": 1163,
            "cost": 0.00021944999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.state FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1055'"
    },
    {
        "sample_id": 5595,
        "pred_sql": "SELECT city.city_name FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE shipment.ship_id = 1701",
        "retrieved": [
            5598
        ],
        "token_usage": {
            "tokens": 1180,
            "cost": 0.00023099999999999998
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1701'"
    },
    {
        "sample_id": 5593,
        "pred_sql": "SELECT COUNT(*) AS shipment_count FROM shipment INNER JOIN truck ON shipment.truck_id = truck.truck_id WHERE truck.model_year = (SELECT MIN(model_year) FROM truck)",
        "retrieved": [
            5643
        ],
        "token_usage": {
            "tokens": 1213,
            "cost": 0.000249
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id GROUP BY T1.model_year ORDER BY T1.model_year ASC LIMIT 1"
    },
    {
        "sample_id": 5652,
        "pred_sql": "SELECT truck.make FROM truck INNER JOIN shipment ON truck.truck_id = shipment.truck_id INNER JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks'",
        "retrieved": [
            5643
        ],
        "token_usage": {
            "tokens": 1231,
            "cost": 0.0002571
        },
        "db_id": "shipping",
        "gold_sql": "SELECT DISTINCT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks'"
    },
    {
        "sample_id": 5631,
        "pred_sql": "SELECT COUNT(*) FROM (SELECT city.city_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_date BETWEEN '2017-01-01' AND '2017-12-31' AND T2.population > 50000 GROUP BY T2.city_id)",
        "retrieved": [
            5630
        ],
        "token_usage": {
            "tokens": 1297,
            "cost": 0.00028635
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND STRFTIME('%Y', T2.ship_date) = '2017'"
    },
    {
        "sample_id": 5659,
        "pred_sql": "SELECT city.city_name FROM shipment INNER JOIN city ON shipment.city_id = city.city_id ORDER BY shipment.weight DESC LIMIT 1",
        "retrieved": [
            5607
        ],
        "token_usage": {
            "tokens": 1176,
            "cost": 0.0002304
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "sample_id": 5619,
        "pred_sql": "SELECT SUM(shipment.weight) AS total_weight FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'San Mateo' AND city.state = 'California' AND STRFTIME('%Y', shipment.ship_date) = '2016'",
        "retrieved": [
            5628
        ],
        "token_usage": {
            "tokens": 1329,
            "cost": 0.00028259999999999993
        },
        "db_id": "shipping",
        "gold_sql": "SELECT SUM(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'San Mateo' AND STRFTIME('%Y', T1.ship_date) = '2016'"
    },
    {
        "sample_id": 5653,
        "pred_sql": "SELECT customer.cust_name FROM customer INNER JOIN shipment ON customer.cust_id = shipment.cust_id WHERE STRFTIME('%Y-%m', shipment.ship_date) = '2017-02'",
        "retrieved": [
            5578
        ],
        "token_usage": {
            "tokens": 1216,
            "cost": 0.00024
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_date LIKE '2017-02%'"
    },
    {
        "sample_id": 5579,
        "pred_sql": "SELECT SUM(shipment.weight) FROM customer INNER JOIN shipment ON customer.cust_id = shipment.cust_id WHERE customer.cust_name = 'S K L Enterprises Inc'",
        "retrieved": [
            5578
        ],
        "token_usage": {
            "tokens": 1217,
            "cost": 0.00024104999999999998
        },
        "db_id": "shipping",
        "gold_sql": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'"
    },
    {
        "sample_id": 5680,
        "pred_sql": "SELECT customer.address FROM customer INNER JOIN shipment ON customer.cust_id = shipment.cust_id WHERE shipment.ship_id = 1117;",
        "retrieved": [
            5664
        ],
        "token_usage": {
            "tokens": 1165,
            "cost": 0.00022064999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1117'"
    },
    {
        "sample_id": 5641,
        "pred_sql": "SELECT driver.last_name FROM shipment INNER JOIN driver ON shipment.driver_id = driver.driver_id WHERE shipment.ship_id = 1088",
        "retrieved": [
            5635
        ],
        "token_usage": {
            "tokens": 1176,
            "cost": 0.00022544999999999998
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1088'"
    },
    {
        "sample_id": 5658,
        "pred_sql": "SELECT COUNT(*) FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE city.state = 'California' ORDER BY city.population ASC LIMIT 1;",
        "retrieved": [
            5617
        ],
        "token_usage": {
            "tokens": 1177,
            "cost": 0.00022964999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(T3.city_name) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.state = 'California' ORDER BY T3.population ASC LIMIT 1"
    },
    {
        "sample_id": 5584,
        "pred_sql": "SELECT COUNT(*) FROM shipment INNER JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Sue' AND driver.last_name = 'Newell' AND strftime('%Y', shipment.ship_date) = '2017'",
        "retrieved": [
            5606
        ],
        "token_usage": {
            "tokens": 1243,
            "cost": 0.00026024999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'"
    },
    {
        "sample_id": 5622,
        "pred_sql": "SELECT city.city_name, city.state FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE shipment.ship_id = 1002",
        "retrieved": [
            5598
        ],
        "token_usage": {
            "tokens": 1196,
            "cost": 0.00024149999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'"
    },
    {
        "sample_id": 2466,
        "pred_sql": "SELECT CAST(SUM(incidents.subject_statuses = 'Shoot and Miss') AS FLOAT) * 100 / SUM(incidents.subject_weapon = 'Handgun') AS percentage FROM incidents WHERE incidents.subject_weapon = 'Handgun'",
        "retrieved": [
            2474
        ],
        "token_usage": {
            "tokens": 776,
            "cost": 0.000174
        },
        "db_id": "shooting",
        "gold_sql": "SELECT CAST(SUM(subject_statuses = 'Shoot and Miss') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Handgun'"
    },
    {
        "sample_id": 2461,
        "pred_sql": "SELECT CAST(SUM(officers.race = 'White') AS FLOAT) * 100 / COUNT(officers.case_number) AS percentage_white_officers FROM officers WHERE officers.gender = 'M'",
        "retrieved": [
            2476
        ],
        "token_usage": {
            "tokens": 758,
            "cost": 0.00018345
        },
        "db_id": "shooting",
        "gold_sql": "SELECT CAST(SUM(IIF(race = 'W', 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'"
    },
    {
        "sample_id": 2486,
        "pred_sql": "SELECT incidents.subject_weapon, subjects.race, subjects.gender FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.case_number = '031347-2015';",
        "retrieved": [
            2463
        ],
        "token_usage": {
            "tokens": 743,
            "cost": 0.00016274999999999997
        },
        "db_id": "shooting",
        "gold_sql": "SELECT T1.subject_weapon, T2.race, T2.gender FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '031347-2015'"
    },
    {
        "sample_id": 2480,
        "pred_sql": "SELECT COUNT(incidents.case_number) FROM incidents WHERE incidents.date BETWEEN '2015-06-01' AND '2015-06-30'",
        "retrieved": [
            2479
        ],
        "token_usage": {
            "tokens": 735,
            "cost": 0.00016334999999999999
        },
        "db_id": "shooting",
        "gold_sql": "SELECT COUNT(case_number) FROM incidents WHERE date BETWEEN '2015-06-01' AND '2015-06-30'"
    },
    {
        "sample_id": 2471,
        "pred_sql": "SELECT officers.last_name, incidents.subject_statuses FROM incidents INNER JOIN officers ON incidents.case_number = officers.case_number WHERE incidents.case_number = '134472-2015'",
        "retrieved": [
            2469
        ],
        "token_usage": {
            "tokens": 759,
            "cost": 0.00017774999999999996
        },
        "db_id": "shooting",
        "gold_sql": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'"
    },
    {
        "sample_id": 2483,
        "pred_sql": "SELECT CAST(SUM(officers.race = 'White') AS FLOAT) * 100 / COUNT(officers.case_number) AS proportion_white_males,\n       CAST(SUM(officers.race = 'White' AND officers.gender = 'F') AS FLOAT) * 100 / COUNT(officers.case_number) AS proportion_white_females\nFROM officers\nWHERE officers.gender IN ('M', 'F')",
        "retrieved": [
            2476
        ],
        "token_usage": {
            "tokens": 812,
            "cost": 0.00021629999999999995
        },
        "db_id": "shooting",
        "gold_sql": "SELECT CAST(SUM(gender = 'M') AS REAL) / SUM(gender = 'F') FROM officers WHERE race = 'W'"
    },
    {
        "sample_id": 4340,
        "pred_sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM episode AS T1 INNER JOIN vote AS T2 ON T2.episode_id = T1.episode_id WHERE STRFTIME('%Y', T1.air_date) = '2008' AND T2.stars > 5",
        "retrieved": [
            4347
        ],
        "token_usage": {
            "tokens": 1451,
            "cost": 0.00030494999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2008' AND T2.stars > 5;"
    },
    {
        "sample_id": 4324,
        "pred_sql": "SELECT character_award.character FROM character_award INNER JOIN award ON character_award.award_id = award.award_id WHERE award.award = 'WGA Award (TV)' AND award.result = 'Winner'",
        "retrieved": [
            4177
        ],
        "token_usage": {
            "tokens": 1371,
            "cost": 0.00027225
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'WGA Award (TV)';"
    },
    {
        "sample_id": 4253,
        "pred_sql": "SELECT keyword.keyword FROM episode INNER JOIN keyword AS T2 ON episode.episode_id = T2.episode_id WHERE episode.title = 'Double, Double, Boy in Trouble'",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1352,
            "cost": 0.00026355
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Double, Double, Boy in Trouble';"
    },
    {
        "sample_id": 4172,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE vote.stars = 7 ORDER BY vote.votes DESC LIMIT 1;",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1422,
            "cost": 0.00029655
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "sample_id": 4261,
        "pred_sql": "SELECT episode.title, episode.episode_id FROM award INNER JOIN episode ON award.episode_id = episode.episode_id INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE award.role = 'Composer' AND award.organization = 'Emmy' AND award.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND award.result = 'Winner' AND vote.votes > 200;",
        "retrieved": [
            4246
        ],
        "token_usage": {
            "tokens": 1477,
            "cost": 0.00030795
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.role = 'composer' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T2.votes > 200;"
    },
    {
        "sample_id": 4245,
        "pred_sql": "SELECT DISTINCT credit.person FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'The simpson 20s' AND episode.season = '20' AND credit.role = 'producer'",
        "retrieved": [
            4254
        ],
        "token_usage": {
            "tokens": 1369,
            "cost": 0.0002643
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT person FROM Credit WHERE role = 'producer';"
    },
    {
        "sample_id": 4284,
        "pred_sql": "SELECT episode.episode_id, episode.title, episode.rating FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE vote.stars = '2' AND vote.votes > 20 AND episode.rating > (SELECT AVG(rating) FROM episode)",
        "retrieved": [
            4254
        ],
        "token_usage": {
            "tokens": 1422,
            "cost": 0.00029295
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2 AND T2.votes > 20 AND T1.rating > 5.0 AND T1.rating <= 7.0;"
    },
    {
        "sample_id": 4238,
        "pred_sql": "SELECT keyword.keyword FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.title = 'Take My Life, Please'",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1314,
            "cost": 0.00024165
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';"
    },
    {
        "sample_id": 4193,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN vote ON vote.episode_id = episode.episode_id WHERE vote.votes > 200 AND vote.stars = 10",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1354,
            "cost": 0.00025844999999999997
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.votes DESC LIMIT 1;"
    },
    {
        "sample_id": 4208,
        "pred_sql": "SELECT person.birth_place FROM person INNER JOIN award ON person.name = award.person WHERE award.award = 'Best Voice-Over Performance' AND award.year = 2009 AND award.result = 'Winner'",
        "retrieved": [
            4161
        ],
        "token_usage": {
            "tokens": 1370,
            "cost": 0.00025814999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Best Voice-Over Performance' AND T2.organization = 'Online Film & Television Association' AND T2.year = 2009;"
    },
    {
        "sample_id": 4222,
        "pred_sql": "SELECT award.person, keyword.keyword, episode.episode_id FROM episode INNER JOIN award ON episode.episode_id = award.episode_id INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.title = 'The Good, the Sad and the Drugly' AND award.result = 'Nominee'",
        "retrieved": [
            4226
        ],
        "token_usage": {
            "tokens": 1483,
            "cost": 0.00030795
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T3.person, T1.keyword, T1.episode_id FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T2.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';"
    },
    {
        "sample_id": 4259,
        "pred_sql": "SELECT DISTINCT credit.person FROM credit INNER JOIN vote ON credit.episode_id = vote.episode_id WHERE vote.stars > 5 AND STRFTIME('%Y', episode.air_date) = '2009'",
        "retrieved": [
            4347
        ],
        "token_usage": {
            "tokens": 1430,
            "cost": 0.00029459999999999995
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;"
    },
    {
        "sample_id": 4258,
        "pred_sql": "SELECT person.birth_place FROM person INNER JOIN award AS T2 ON person.name = T2.person INNER JOIN episode ON T2.episode_id = episode.episode_id WHERE T2.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND episode.title = 'No Loan Again, Naturally' AND T2.role = 'co-executive producer'",
        "retrieved": [
            4325
        ],
        "token_usage": {
            "tokens": 1443,
            "cost": 0.0003015
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'director' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally';"
    },
    {
        "sample_id": 4357,
        "pred_sql": "SELECT vote.percent FROM vote INNER JOIN episode ON vote.episode_id = episode.episode_id WHERE SUBSTR(episode.air_date, 1, 4) = '2008' AND vote.votes BETWEEN 920 AND 950",
        "retrieved": [
            4226
        ],
        "token_usage": {
            "tokens": 1494,
            "cost": 0.00031455
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T1.votes BETWEEN 950 AND 960;"
    },
    {
        "sample_id": 4364,
        "pred_sql": "SELECT award.award_category FROM award INNER JOIN vote ON award.episode_id = vote.episode_id WHERE vote.votes = (SELECT MAX(votes) FROM vote)",
        "retrieved": [
            4293
        ],
        "token_usage": {
            "tokens": 1349,
            "cost": 0.0002523
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "sample_id": 4310,
        "pred_sql": "SELECT COUNT(DISTINCT credit.person) AS crew_member_count FROM credit WHERE credit.category = 'Casting Department'",
        "retrieved": [
            4313
        ],
        "token_usage": {
            "tokens": 1328,
            "cost": 0.00024825
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.category = 'Casting Department';"
    },
    {
        "sample_id": 4268,
        "pred_sql": "SELECT COUNT(DISTINCT person.name) AS executive_producer_count FROM person INNER JOIN award ON person.name = award.person WHERE award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND award.role = 'executive producer'",
        "retrieved": [
            4325
        ],
        "token_usage": {
            "tokens": 1386,
            "cost": 0.00027135
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';"
    },
    {
        "sample_id": 4337,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM award WHERE result = 'Winner') AS percentage_winners_above_1_75_meters\nFROM person\nWHERE height_meters > 1.75 AND name IN (SELECT person FROM award WHERE result = 'Winner');",
        "retrieved": [],
        "token_usage": {
            "tokens": 1343,
            "cost": 0.00028829999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.height_meters > 1.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';"
    },
    {
        "sample_id": 4205,
        "pred_sql": "SELECT award.year - strftime('%Y', person.birthdate) AS age, person.name FROM award INNER JOIN person ON award.person = person.name WHERE award.role = 'Winner' AND award.organization = 'Primetime Emmy Awards' AND award.award = 'Outstanding Voice-Over Performance' AND award.result = 'Winner' ORDER BY award.year ASC LIMIT 1",
        "retrieved": [
            4246
        ],
        "token_usage": {
            "tokens": 1481,
            "cost": 0.00031035
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.year - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Winner';"
    },
    {
        "sample_id": 4225,
        "pred_sql": "SELECT episode.episode_id, episode.title, keyword.keyword FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE vote.stars = 1 ORDER BY vote.votes DESC LIMIT 1;",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1438,
            "cost": 0.00030255
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T3.episode_id, T2.title, T1.keyword FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 ORDER BY T3.votes DESC LIMIT 3;"
    },
    {
        "sample_id": 4174,
        "pred_sql": "SELECT (COUNT(DISTINCT e.episode_id) * 100.0 / (SELECT COUNT(DISTINCT episode_id) FROM episode WHERE rating > 7)) AS percentage\nFROM episode e\nINNER JOIN award a ON e.episode_id = a.episode_id\nWHERE a.award = 'Primetime Emmy' AND e.rating > 7;",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1430,
            "cost": 0.00029595
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.award_category = 'Primetime Emmy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating > 7 AND T1.result = 'Nominee';"
    },
    {
        "sample_id": 4167,
        "pred_sql": "SELECT episode.rating FROM episode INNER JOIN award ON episode.episode_id = award.episode_id INNER JOIN person ON award.person = person.name WHERE award.award = 'Outstanding Voice-Over Performance' AND award.year = 2009 AND award.result = 'Winner'",
        "retrieved": [
            4161
        ],
        "token_usage": {
            "tokens": 1444,
            "cost": 0.0003048
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';"
    },
    {
        "sample_id": 4296,
        "pred_sql": "SELECT person.name FROM credit INNER JOIN vote ON credit.episode_id = vote.episode_id WHERE vote.stars = '10' AND vote.votes > 200 AND credit.role = 'writer'",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1384,
            "cost": 0.00027509999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.person FROM Credit AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'Writer' AND T2.stars = 10 GROUP BY T1.person ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "sample_id": 4166,
        "pred_sql": "SELECT COUNT(keyword.keyword) FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.air_date = '2008-10-19'",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1337,
            "cost": 0.0002532
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';"
    },
    {
        "sample_id": 4319,
        "pred_sql": "SELECT keyword.keyword, person.name FROM keyword JOIN credit ON keyword.episode_id = credit.episode_id JOIN person ON credit.person = person.name WHERE keyword.episode_id = 'S20-E1';",
        "retrieved": [
            4307
        ],
        "token_usage": {
            "tokens": 1377,
            "cost": 0.00027719999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.keyword, T2.person FROM Keyword AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode_id = 'S20-E1';"
    },
    {
        "sample_id": 4344,
        "pred_sql": "SELECT DISTINCT credit.person FROM credit WHERE credit.role = 'Smithers'",
        "retrieved": [
            4294
        ],
        "token_usage": {
            "tokens": 1326,
            "cost": 0.00023895
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Smithers';"
    },
    {
        "sample_id": 4189,
        "pred_sql": "SELECT COUNT(DISTINCT person.name) AS num_nominated FROM award INNER JOIN person ON award.person = person.name WHERE award.award_category = 'Comedy Series' AND award.year = 2009 AND person.birth_place = 'California'",
        "retrieved": [
            4226
        ],
        "token_usage": {
            "tokens": 1417,
            "cost": 0.0002679
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.year = 2009 AND T2.award = 'Comedy Series' AND T1.birth_region = 'California';"
    },
    {
        "sample_id": 4327,
        "pred_sql": "SELECT SUM(e.rating) AS total_rating\nFROM award a\nJOIN episode e ON a.episode_id = e.episode_id\nWHERE a.award IN ('OFTA Television Award', 'WGA Award') AND a.result = 'Winner';",
        "retrieved": [
            4265
        ],
        "token_usage": {
            "tokens": 1466,
            "cost": 0.0002784
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT SUM(T2.rating) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award_category IN ('Jupiter Award ', 'WGA Award (TV)');"
    },
    {
        "sample_id": 4188,
        "pred_sql": "SELECT character_award.character FROM character_award INNER JOIN award ON character_award.award_id = award.award_id WHERE award.award = 'Outstanding Voice-Over Performance' AND award.year = 2009 AND award.result = 'Winner'",
        "retrieved": [
            4161
        ],
        "token_usage": {
            "tokens": 1376,
            "cost": 0.00026715
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance';"
    },
    {
        "sample_id": 4216,
        "pred_sql": "SELECT name, birthdate FROM person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8",
        "retrieved": [
            4348
        ],
        "token_usage": {
            "tokens": 1395,
            "cost": 0.00027945
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT name, birthdate FROM Person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;"
    },
    {
        "sample_id": 4360,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.award = 'WGA Award (TV)' AND episode.votes > 1000",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1365,
            "cost": 0.00026055
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 1000 AND T1.award_category = 'WGA Award (TV)' AND T1.result = 'Nominee';"
    },
    {
        "sample_id": 4306,
        "pred_sql": "SELECT COUNT(*) AS not_born_in_connecticut_count FROM person WHERE birth_country != 'USA' OR (birth_country = 'USA' AND birth_region != 'Connecticut');",
        "retrieved": [],
        "token_usage": {
            "tokens": 1291,
            "cost": 0.00025935
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(name) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';"
    },
    {
        "sample_id": 4211,
        "pred_sql": "SELECT COUNT(DISTINCT person.name) AS award_winner_count FROM person INNER JOIN award ON person.name = award.person WHERE award.result = 'Winner' AND person.birth_country = 'USA'",
        "retrieved": [
            4161
        ],
        "token_usage": {
            "tokens": 1380,
            "cost": 0.0002736
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Winner';"
    },
    {
        "sample_id": 4179,
        "pred_sql": "SELECT episode.title, keyword.keyword FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.air_date = '2009-03-22'",
        "retrieved": [
            4177
        ],
        "token_usage": {
            "tokens": 1350,
            "cost": 0.00025739999999999997
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';"
    },
    {
        "sample_id": 4173,
        "pred_sql": "SELECT AVG(vote.stars) FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE episode.title = 'Lost Verizon'",
        "retrieved": [
            4168
        ],
        "token_usage": {
            "tokens": 1349,
            "cost": 0.0002586
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT CAST(SUM(T2.votes * T2.stars) AS REAL) / SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon';"
    },
    {
        "sample_id": 4196,
        "pred_sql": "SELECT COUNT(DISTINCT credit.role) AS role_count FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.season = '20' AND episode.episode = '5'",
        "retrieved": [
            4254
        ],
        "token_usage": {
            "tokens": 1415,
            "cost": 0.0002874
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(DISTINCT T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 5;"
    },
    {
        "sample_id": 4275,
        "pred_sql": "SELECT DISTINCT character_award.character FROM award INNER JOIN character_award ON award.award_id = character_award.award_id WHERE award.person = 'Dan Castellaneta' AND award.result = 'Winner' AND award.award = 'Outstanding Voice-Over Performance'",
        "retrieved": [
            4290
        ],
        "token_usage": {
            "tokens": 1365,
            "cost": 0.00026415
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award LIKE '%Voice-Over%' AND T1.person = 'Dan Castellaneta';"
    },
    {
        "sample_id": 4204,
        "pred_sql": "SELECT COUNT(e.episode_id) AS episode_count FROM episode e LEFT JOIN credit c ON e.episode_id = c.episode_id WHERE c.person != 'Dell Hake' OR c.person IS NULL;",
        "retrieved": [
            4313
        ],
        "token_usage": {
            "tokens": 1358,
            "cost": 0.00026535
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Credit WHERE person = 'Dell Hake' AND credited = 'false';"
    },
    {
        "sample_id": 4280,
        "pred_sql": "SELECT votes FROM vote WHERE episode_id = (SELECT episode_id FROM episode WHERE title = 'Lisa the Drama Queen') AND stars = '5'",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1320,
            "cost": 0.00023535
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lisa the Drama Queen' AND T2.stars = 5;"
    },
    {
        "sample_id": 4283,
        "pred_sql": "SELECT keyword.keyword FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.episode_id = (SELECT episode_id FROM episode ORDER BY votes ASC LIMIT 1)",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1330,
            "cost": 0.00025305
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.votes LIMIT 1;"
    },
    {
        "sample_id": 4342,
        "pred_sql": "SELECT award.year FROM award INNER JOIN character_award ON award.award_id = character_award.award_id WHERE character_award.character = 'Mr. Burns' AND award.result = 'Winner'",
        "retrieved": [
            4213
        ],
        "token_usage": {
            "tokens": 1365,
            "cost": 0.00026235
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';"
    },
    {
        "sample_id": 4363,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN award ON episode.episode_id = award.episode_id INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE vote.stars = 5 AND award.award = 'Prism Award' AND episode.air_date = '2009-04-19'",
        "retrieved": [
            4293
        ],
        "token_usage": {
            "tokens": 1465,
            "cost": 0.0003174
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T3.title FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.air_date = '2009-04-19' AND T1.award_category = 'Prism Award' AND T2.stars = 5 AND T1.result = 'Nominee';"
    },
    {
        "sample_id": 1889,
        "pred_sql": "SELECT COUNT(*) AS total_venues FROM venue INNER JOIN city ON venue.city_id = city.city_id WHERE city.city_name = 'Pune'",
        "retrieved": [
            1904
        ],
        "token_usage": {
            "tokens": 2471,
            "cost": 0.00042329999999999993
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'"
    },
    {
        "sample_id": 1936,
        "pred_sql": "SELECT venue.venue_name, city.city_name FROM match JOIN venue ON match.venue_id = venue.venue_id JOIN city ON venue.city_id = city.city_id WHERE match.match_id = 336005;",
        "retrieved": [
            1860
        ],
        "token_usage": {
            "tokens": 2471,
            "cost": 0.00043275000000000003
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Venue_Name, T3.City_Name FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN City AS T3 ON T2.City_Id = T3.City_Id WHERE T1.Match_Id = '336005'"
    },
    {
        "sample_id": 1940,
        "pred_sql": "SELECT player.player_name, player_match.role_id, match.match_date FROM player INNER JOIN player_match ON player.player_id = player_match.player_id INNER JOIN match ON player_match.match_id = match.match_id WHERE player.dob = (SELECT MAX(dob) FROM player) ORDER BY match.match_date LIMIT 1;",
        "retrieved": [
            1809
        ],
        "token_usage": {
            "tokens": 2507,
            "cost": 0.00044579999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Match_Date, T4.Role_Desc FROM \"Match\" AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id ORDER BY T3.DOB DESC LIMIT 1"
    },
    {
        "sample_id": 1902,
        "pred_sql": "SELECT COUNT(DISTINCT match.venue_id) AS venue_count FROM match WHERE match.toss_winner = match.team_2 AND match.match_winner != match.team_2;",
        "retrieved": [
            1937
        ],
        "token_usage": {
            "tokens": 2547,
            "cost": 0.00045719999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Team_2 = T1.Match_Winner THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Team_1 = T1.Toss_Winner"
    },
    {
        "sample_id": 1863,
        "pred_sql": "SELECT COUNT(*) FROM \"match\" INNER JOIN player ON match.man_of_the_match = player.player_id WHERE player.player_name = 'Yuvraj Singh'",
        "retrieved": [
            1914
        ],
        "token_usage": {
            "tokens": 2546,
            "cost": 0.0004629
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'Yuvraj Singh' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match"
    },
    {
        "sample_id": 2006,
        "pred_sql": "SELECT country_id FROM city WHERE city_name = 'East London';",
        "retrieved": [],
        "token_usage": {
            "tokens": 2363,
            "cost": 0.0003963
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Country_id FROM City WHERE City_Name = 'East London'"
    },
    {
        "sample_id": 1944,
        "pred_sql": "SELECT match.match_date FROM match WHERE match.match_winner = (SELECT team.team_id FROM team WHERE team.team_name = 'Sunrisers Hyderabad') ORDER BY match.match_date ASC LIMIT 1;",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2482,
            "cost": 0.00042809999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'"
    },
    {
        "sample_id": 2042,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_match ON player.player_id = player_match.player_id INNER JOIN rolee ON player_match.role_id = rolee.role_id WHERE rolee.role_desc = 'captain';",
        "retrieved": [
            1999
        ],
        "token_usage": {
            "tokens": 2553,
            "cost": 0.00043919999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Player_Name FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' GROUP BY T2.Player_Name"
    },
    {
        "sample_id": 2026,
        "pred_sql": "SELECT player.dob, player_match.role_id FROM player JOIN player_match ON player.player_id = player_match.player_id WHERE player.player_name = 'R Dravid'",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2435,
            "cost": 0.00041429999999999993
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.DOB, T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'R Dravid' GROUP BY T1.DOB, T3.Role_Desc"
    },
    {
        "sample_id": 1788,
        "pred_sql": "SELECT COUNT(*) AS total_matches FROM match WHERE match_date BETWEEN '2008-05-01' AND '2008-05-31';",
        "retrieved": [
            1852
        ],
        "token_usage": {
            "tokens": 2563,
            "cost": 0.00044654999999999993
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"
    },
    {
        "sample_id": 1883,
        "pred_sql": "SELECT venue.venue_name FROM match INNER JOIN venue ON match.venue_id = venue.venue_id WHERE match.season_id = 2",
        "retrieved": [
            1880
        ],
        "token_usage": {
            "tokens": 2508,
            "cost": 0.0004437
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Venue_Name FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T1.Season_Id = 2 GROUP BY T2.Venue_Name"
    },
    {
        "sample_id": 2013,
        "pred_sql": "SELECT DISTINCT player.player_name FROM player JOIN batsman_scored ON player.player_id = batsman_scored.match_id WHERE batsman_scored.runs_scored < 3;",
        "retrieved": [
            1933
        ],
        "token_usage": {
            "tokens": 2629,
            "cost": 0.0004753499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Batsman_Scored AS T3 ON T2.Match_ID = T3.Match_ID WHERE T3.Runs_Scored < 3 GROUP BY T1.Player_Name"
    },
    {
        "sample_id": 1954,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team AS T2 ON T2.team_id = match.team_1 ORDER BY match.match_id LIMIT 1",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2478,
            "cost": 0.00043199999999999993
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Team_Name FROM team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Season_Id = 1 ORDER BY T2.Match_Date LIMIT 1"
    },
    {
        "sample_id": 1988,
        "pred_sql": "SELECT T1.team_name, T2.team_name FROM match AS M INNER JOIN team AS T1 ON M.team_1 = T1.team_id INNER JOIN team AS T2 ON M.team_2 = T2.team_id WHERE M.win_margin = 38 AND M.match_date = '2009-04-30';",
        "retrieved": [
            1852
        ],
        "token_usage": {
            "tokens": 2585,
            "cost": 0.00045299999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'"
    },
    {
        "sample_id": 1947,
        "pred_sql": "SELECT SUM(batsman_scored.runs_scored) * 6.0 / 16 AS run_rate, player.player_name AS man_of_the_match \nFROM batsman_scored \nJOIN match ON batsman_scored.match_id = match.match_id \nJOIN player ON match.man_of_the_match = player.player_id \nWHERE batsman_scored.match_id = 335999 AND batsman_scored.over_id <= 16 \nGROUP BY match.match_id;",
        "retrieved": [
            1966
        ],
        "token_usage": {
            "tokens": 2672,
            "cost": 0.0005263499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 16"
    },
    {
        "sample_id": 1934,
        "pred_sql": "SELECT match.match_id, match.match_date FROM match JOIN venue ON match.venue_id = venue.venue_id WHERE venue.venue_name = 'Kingsmead' AND match.match_date BETWEEN '2015-04-18' AND '2015-04-20'",
        "retrieved": [
            1860
        ],
        "token_usage": {
            "tokens": 2502,
            "cost": 0.00044999999999999993
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Match_Id, T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'Kingsmead'"
    },
    {
        "sample_id": 1878,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team ON match.toss_winner = team.team_id WHERE match.match_id BETWEEN 336010 AND 336020;",
        "retrieved": [
            1937
        ],
        "token_usage": {
            "tokens": 2533,
            "cost": 0.00044429999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Toss_Winner WHERE T1.Match_Id BETWEEN 336010 AND 336020"
    },
    {
        "sample_id": 1872,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM match INNER JOIN venue ON match.venue_id = venue.venue_id INNER JOIN city ON venue.city_id = city.city_id WHERE city.city_name = 'Mumbai')) AS percentage FROM match INNER JOIN venue ON match.venue_id = venue.venue_id WHERE venue.venue_name = 'Wankhede Stadium' AND venue.city_id IN (SELECT city_id FROM city WHERE city_name = 'Mumbai');",
        "retrieved": [
            1852
        ],
        "token_usage": {
            "tokens": 2601,
            "cost": 0.00046574999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Venue_Name = 'Wankhede Stadium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Match_Id) FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Match AS T3 ON T3.Venue_Id = T2.Venue_Id WHERE T1.City_Name = 'Mumbai'"
    },
    {
        "sample_id": 1840,
        "pred_sql": "SELECT COUNT(*) AS total_matches FROM player_match WHERE player_id = 2",
        "retrieved": [
            1860
        ],
        "token_usage": {
            "tokens": 2409,
            "cost": 0.0003977999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN Player_Id = 2 THEN 1 ELSE 0 END) FROM Player_Match"
    },
    {
        "sample_id": 1866,
        "pred_sql": "SELECT team.team_name, COUNT(CASE WHEN match.match_winner = team.team_id THEN 1 END) * 1.0 / COUNT(*) AS win_rate FROM match INNER JOIN team ON match.team_1 = team.team_id OR match.team_2 = team.team_id WHERE team.team_name = 'Chennai Super Kings' GROUP BY team.team_name;",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2560,
            "cost": 0.0004816499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T2.Team_Name = 'Chennai Super Kings' OR T3.Team_Name = 'Chennai Super Kings'"
    },
    {
        "sample_id": 1993,
        "pred_sql": "SELECT COUNT(*) FROM player_match WHERE player_id = (SELECT player_id FROM player WHERE player_name = 'K Goel')",
        "retrieved": [
            1914
        ],
        "token_usage": {
            "tokens": 2440,
            "cost": 0.00040064999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(T1.Match_Id) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3"
    },
    {
        "sample_id": 1946,
        "pred_sql": "SELECT SUM(batsman_scored.runs_scored) * 6.0 / 17 AS run_rate FROM batsman_scored WHERE batsman_scored.match_id = 335987 AND batsman_scored.over_id <= 17",
        "retrieved": [
            1966
        ],
        "token_usage": {
            "tokens": 2531,
            "cost": 0.0004435499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 17"
    },
    {
        "sample_id": 1832,
        "pred_sql": "SELECT venue.venue_name FROM match INNER JOIN team ON match.team_1 = team.team_id INNER JOIN venue ON match.venue_id = venue.venue_id WHERE team.team_name = 'Kolkata Knight Riders' GROUP BY venue.venue_name ORDER BY COUNT(match.match_id) DESC LIMIT 1;",
        "retrieved": [
            1830
        ],
        "token_usage": {
            "tokens": 2546,
            "cost": 0.00045929999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T3.Venue_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 INNER JOIN Venue AS T3 ON T2.Venue_Id = T3.Venue_Id WHERE T1.Team_Name = 'Kolkata Knight Riders' GROUP BY T3.Venue_Id ORDER BY COUNT(T3.Venue_Id) DESC LIMIT 1"
    },
    {
        "sample_id": 1907,
        "pred_sql": "SELECT player.player_name, country.country_name FROM player INNER JOIN player_match ON player.player_id = player_match.player_id INNER JOIN wicket_taken ON player.player_id = wicket_taken.player_out INNER JOIN country ON player.country_name = country.country_id GROUP BY player.player_id HAVING COUNT(wicket_taken.player_out) > (SELECT AVG(catch_count) FROM (SELECT COUNT(wicket_taken.player_out) AS catch_count FROM wicket_taken GROUP BY wicket_taken.player_out)) ORDER BY COUNT(wicket_taken.player_out) ASC;",
        "retrieved": [
            2016
        ],
        "token_usage": {
            "tokens": 2600,
            "cost": 0.0004925999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name, T4.Country_Name FROM Player AS T1 INNER JOIN Wicket_Taken AS T2 ON T1.Player_Id = T2.Fielders INNER JOIN Out_Type AS T3 ON T2.Kind_Out = T3.Out_Id INNER JOIN Country AS T4 ON T1.Country_Name = T4.Country_Id GROUP BY T1.Player_Name ORDER BY COUNT(T3.Out_Name) ASC"
    },
    {
        "sample_id": 1862,
        "pred_sql": "SELECT COUNT(wicket_taken.match_id) FROM wicket_taken WHERE wicket_taken.innings_no = 2 AND wicket_taken.kind_out = (SELECT out_id FROM out_type WHERE out_name = 'stumped')",
        "retrieved": [
            1985
        ],
        "token_usage": {
            "tokens": 2477,
            "cost": 0.00043679999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Innings_No = 2 THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'stumped'"
    },
    {
        "sample_id": 1931,
        "pred_sql": "SELECT DISTINCT season.man_of_the_series FROM season WHERE season.season_year BETWEEN 2011 AND 2015;",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2529,
            "cost": 0.00043065
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Man_of_the_Series FROM Season WHERE 2011 < Season_Year < 2015"
    },
    {
        "sample_id": 1827,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN match ON player.player_id = match.man_of_the_match GROUP BY player.player_id ORDER BY COUNT(match.man_of_the_match) DESC LIMIT 1;",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2545,
            "cost": 0.0004695
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match GROUP BY T2.Man_of_the_Match ORDER BY COUNT(T2.Man_of_the_Match) DESC LIMIT 1"
    },
    {
        "sample_id": 1874,
        "pred_sql": "SELECT (COUNT(CASE WHEN match.toss_decide = 'bowl' THEN 1 END) * 100.0 / COUNT(*)) AS percent_bowl_first FROM match WHERE match.match_date BETWEEN '2010-01-01' AND '2016-12-31'",
        "retrieved": [
            1911
        ],
        "token_usage": {
            "tokens": 2578,
            "cost": 0.0004883999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'"
    },
    {
        "sample_id": 1965,
        "pred_sql": "SELECT COUNT(DISTINCT over_id) AS total_overs, innings_no FROM ball_by_ball WHERE match_id = 336011 GROUP BY innings_no;",
        "retrieved": [
            1966
        ],
        "token_usage": {
            "tokens": 2529,
            "cost": 0.0004473
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN Innings_No = 1 THEN 1 ELSE 0 END) AS IN1 , SUM(CASE WHEN Innings_No = 2 THEN 1 ELSE 0 END) AS IN2 FROM Ball_by_Ball WHERE Match_Id = 336011"
    },
    {
        "sample_id": 2000,
        "pred_sql": "SELECT COUNT(player.player_id) FROM player WHERE player.bowling_skill > 2",
        "retrieved": [
            1787
        ],
        "token_usage": {
            "tokens": 2437,
            "cost": 0.00040965
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Player_Name) FROM Player WHERE Bowling_skill > 2"
    },
    {
        "sample_id": 2029,
        "pred_sql": "SELECT team.team_name FROM match JOIN win_by ON match.win_type = win_by.win_id WHERE match.match_id = 335993 AND win_by.win_type = 'wickets';",
        "retrieved": [
            1966
        ],
        "token_usage": {
            "tokens": 2536,
            "cost": 0.00045329999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Win_By AS T4 ON T2.Win_Type = T4.Win_Id WHERE T2.Match_Id = '335993' GROUP BY T1.Team_Name"
    },
    {
        "sample_id": 1922,
        "pred_sql": "SELECT umpire_name FROM umpire INNER JOIN country ON umpire.umpire_country = country.country_id WHERE country.country_name = 'New Zealand';",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2542,
            "cost": 0.00044564999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'"
    },
    {
        "sample_id": 1955,
        "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'U.A.E.');",
        "retrieved": [],
        "token_usage": {
            "tokens": 2401,
            "cost": 0.00041864999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'U.A.E' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN country AS T2 ON T1.Country_id = T2.Country_id"
    },
    {
        "sample_id": 1888,
        "pred_sql": "SELECT COUNT(*) AS total_wins FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Deccan Chargers')",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2452,
            "cost": 0.0004182
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T1.Team_Name = 'Deccan Chargers'"
    },
    {
        "sample_id": 1819,
        "pred_sql": "SELECT COUNT(*) AS match_count, venue.venue_name FROM match INNER JOIN venue ON match.venue_id = venue.venue_id WHERE venue.venue_name IN ('M Chinnaswamy Stadium', 'Maharashtra Cricket Association Stadium') GROUP BY venue.venue_name",
        "retrieved": [
            1830
        ],
        "token_usage": {
            "tokens": 2530,
            "cost": 0.00044879999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Venue_Name = 'M Chinnaswamy Stadium' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Venue_Name = 'Maharashtra Cricket Association Stadium' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id"
    },
    {
        "sample_id": 2003,
        "pred_sql": "SELECT COUNT(*) AS total_matches FROM match WHERE match_date BETWEEN '2008-04-01' AND '2008-04-30';",
        "retrieved": [
            1860
        ],
        "token_usage": {
            "tokens": 2452,
            "cost": 0.00042449999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Match_Id) FROM Match WHERE Match_date LIKE '2008-04%'"
    },
    {
        "sample_id": 1831,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team ON match.match_winner = team.team_id WHERE match.season_id = 1 GROUP BY team.team_id ORDER BY COUNT(match.match_id) DESC LIMIT 1;",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2578,
            "cost": 0.00048975
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT Match_Winner FROM \"Match\" WHERE season_Id = 1 GROUP BY Match_Winner ORDER BY COUNT(Match_Winner) DESC LIMIT 1 )"
    },
    {
        "sample_id": 1797,
        "pred_sql": "SELECT player.dob FROM player JOIN bowling_style ON player.bowling_skill = bowling_style.bowling_id WHERE bowling_style.bowling_skill = 'Legbreak' ORDER BY player.dob ASC LIMIT 1",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2495,
            "cost": 0.00044715
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT MIN(T1.DOB) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_Skill = 'Legbreak'"
    },
    {
        "sample_id": 1818,
        "pred_sql": "SELECT COUNT(*) AS indian_cities_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'India');\n\nSELECT COUNT(*) AS south_african_cities_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa');\n\nSELECT (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'India')) / (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa')) AS ratio;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2475,
            "cost": 0.00045855
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id"
    },
    {
        "sample_id": 1952,
        "pred_sql": "SELECT player.player_id, COUNT(match.man_of_the_match) AS man_of_the_match_count FROM match INNER JOIN player ON match.man_of_the_match = player.player_id GROUP BY player.player_id HAVING man_of_the_match_count >= 5;",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2584,
            "cost": 0.0004685999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5"
    },
    {
        "sample_id": 1881,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team ON match.match_winner = team.team_id WHERE match.match_id = 336000;",
        "retrieved": [
            1937
        ],
        "token_usage": {
            "tokens": 2535,
            "cost": 0.00045044999999999997
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Id = 336000"
    },
    {
        "sample_id": 2025,
        "pred_sql": "SELECT COUNT(DISTINCT season.season_id) FROM match INNER JOIN team ON match.team_1 = team.team_id OR match.team_2 = team.team_id WHERE team.team_name = 'Pune Warriors'",
        "retrieved": [
            1880
        ],
        "token_usage": {
            "tokens": 2493,
            "cost": 0.00043559999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(T.Season_Year) FROM ( SELECT T4.Season_Year FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Pune Warriors' GROUP BY T4.Season_Year ) T"
    },
    {
        "sample_id": 1896,
        "pred_sql": "SELECT country.country_name, COUNT(umpire.umpire_id) AS umpire_count FROM umpire INNER JOIN country ON umpire.umpire_country = country.country_id GROUP BY country.country_id ORDER BY umpire_count DESC LIMIT 1;",
        "retrieved": [
            1904
        ],
        "token_usage": {
            "tokens": 2557,
            "cost": 0.0004695
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Country_Id, COUNT(T1.Umpire_Id) FROM Umpire AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Umpire_Country GROUP BY T2.Country_Id ORDER BY COUNT(T1.Umpire_Id) DESC LIMIT 1"
    },
    {
        "sample_id": 1868,
        "pred_sql": "SELECT player.player_name, player.dob FROM player JOIN bowling_style ON player.bowling_skill = bowling_style.bowling_id WHERE bowling_style.bowling_skill = 'left-arm fast'",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2459,
            "cost": 0.00042779999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name, T1.DOB FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill WHERE T2.Bowling_skill = 'Left-arm fast'"
    },
    {
        "sample_id": 2043,
        "pred_sql": "SELECT venue.venue_name, team.team_name FROM match INNER JOIN venue ON match.venue_id = venue.venue_id INNER JOIN team ON match.match_winner = team.team_id WHERE match.match_id = 392194;",
        "retrieved": [
            1996
        ],
        "token_usage": {
            "tokens": 2501,
            "cost": 0.00044535
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Venue_Name, T3.Team_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id INNER JOIN Team AS T3 ON T2.match_winner = T3.Team_Id WHERE T2.Match_Id = 392194"
    },
    {
        "sample_id": 2008,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN batting_style ON player.batting_hand = batting_style.batting_id WHERE batting_style.batting_hand = 'left'",
        "retrieved": [
            2016
        ],
        "token_usage": {
            "tokens": 2477,
            "cost": 0.00042375000000000003
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_hand = 'Left-hand bat'"
    },
    {
        "sample_id": 1804,
        "pred_sql": "SELECT (COUNT(CASE WHEN batting_style.batting_hand = 'right' THEN 1 END) * 100.0 / COUNT(*)) AS right_hand_percentage FROM player JOIN batting_style ON player.batting_hand = batting_style.batting_id WHERE SUBSTR(player.dob, 1, 4) > '1985';",
        "retrieved": [
            1787
        ],
        "token_usage": {
            "tokens": 2551,
            "cost": 0.00047039999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_Hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE SUBSTR(T1.DOB, 1, 4) > 1985"
    },
    {
        "sample_id": 1807,
        "pred_sql": "SELECT player.player_name FROM ball_by_ball JOIN player ON ball_by_ball.striker = player.player_id WHERE ball_by_ball.match_id = 419169 AND ball_by_ball.over_id = 3 AND ball_by_ball.ball_id = 2 AND ball_by_ball.innings_no = 2;",
        "retrieved": [
            1933
        ],
        "token_usage": {
            "tokens": 2631,
            "cost": 0.0004698
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Player_Name FROM Ball_by_Ball AS T1 INNER JOIN Player AS T2 ON T1.Striker = T2.Player_Id WHERE T1.Match_Id = 419169 AND T1.Over_Id = 3 AND T1.Ball_Id = 2 AND T1.Innings_No = 2"
    },
    {
        "sample_id": 2044,
        "pred_sql": "SELECT (COUNT(CASE WHEN match.match_winner = player_match.team_id THEN 1 END) * 100.0 / COUNT(*)) AS win_percentage FROM match INNER JOIN player_match ON match.match_id = player_match.match_id INNER JOIN team ON player_match.team_id = team.team_id WHERE team.team_name = 'Delhi Daredevils' AND match.season_id = (SELECT season_id FROM season WHERE season_year = 2009)",
        "retrieved": [
            1852
        ],
        "token_usage": {
            "tokens": 2635,
            "cost": 0.00048435
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'"
    },
    {
        "sample_id": 1995,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team ON match.match_winner = team.team_id WHERE match.match_id = 336039",
        "retrieved": [
            1937
        ],
        "token_usage": {
            "tokens": 2452,
            "cost": 0.0004015499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT CASE WHEN Team_1 = Match_Winner THEN Team_2 ELSE Team_1 END FROM Match WHERE match_id = 336039 )"
    },
    {
        "sample_id": 1991,
        "pred_sql": "SELECT COUNT(*) FROM match WHERE (match.match_winner = (SELECT team.team_id FROM team WHERE team.team_name = 'Delhi Daredevils')) AND (match.season_id = (SELECT season.season_id FROM season WHERE season.season_year = 2014));",
        "retrieved": [
            1933
        ],
        "token_usage": {
            "tokens": 2578,
            "cost": 0.00044249999999999997
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(T1.Match_Winner) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 OR T2.Team_Id = T1.Team_2 WHERE T2.team_name = 'Delhi Daredevils' AND T1.Match_Date LIKE '2014%'"
    },
    {
        "sample_id": 1850,
        "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa')",
        "retrieved": [],
        "token_usage": {
            "tokens": 2419,
            "cost": 0.00042944999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id"
    },
    {
        "sample_id": 1858,
        "pred_sql": "SELECT COUNT(*) AS players_out FROM wicket_taken WHERE match_id = 548335 AND innings_no = 1;",
        "retrieved": [
            1966
        ],
        "token_usage": {
            "tokens": 2491,
            "cost": 0.00042405
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN Match_Id = 548335 THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Innings_No = 1"
    },
    {
        "sample_id": 853,
        "pred_sql": "SELECT location.city, AVG(twitter.likes) AS average_likes FROM twitter INNER JOIN location ON twitter.locationid = location.locationid WHERE location.city IN ('Bangkok', 'Chiang Mai') GROUP BY location.city ORDER BY average_likes DESC;",
        "retrieved": [
            794
        ],
        "token_usage": {
            "tokens": 940,
            "cost": 0.00020894999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')"
    },
    {
        "sample_id": 827,
        "pred_sql": "SELECT location.country FROM twitter INNER JOIN location ON twitter.locationid = location.locationid WHERE twitter.tweetid = 'tw-682723090279841798'",
        "retrieved": [
            820
        ],
        "token_usage": {
            "tokens": 865,
            "cost": 0.00017654999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'"
    },
    {
        "sample_id": 809,
        "pred_sql": "SELECT user.gender FROM user INNER JOIN twitter ON user.userid = twitter.userid ORDER BY twitter.likes DESC LIMIT 1",
        "retrieved": [
            851
        ],
        "token_usage": {
            "tokens": 912,
            "cost": 0.00018764999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1"
    },
    {
        "sample_id": 838,
        "pred_sql": "SELECT text FROM twitter ORDER BY reach DESC LIMIT 3;",
        "retrieved": [
            849
        ],
        "token_usage": {
            "tokens": 993,
            "cost": 0.00019574999999999996
        },
        "db_id": "social_media",
        "gold_sql": "SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3"
    },
    {
        "sample_id": 847,
        "pred_sql": "SELECT location.city, COUNT(twitter.tweetid) AS tweet_count FROM twitter INNER JOIN location ON twitter.locationid = location.locationid WHERE location.city IN ('Bangkok', 'Chiang Mai') GROUP BY location.city ORDER BY tweet_count DESC;",
        "retrieved": [
            850
        ],
        "token_usage": {
            "tokens": 890,
            "cost": 0.00019695
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN T2.City = 'Chiang Mai' THEN 1 ELSE 0 END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')"
    },
    {
        "sample_id": 805,
        "pred_sql": "SELECT user.gender FROM twitter INNER JOIN user ON twitter.userid = user.userid WHERE twitter.tweetid = 'tw-715909161071091712'",
        "retrieved": [
            820
        ],
        "token_usage": {
            "tokens": 895,
            "cost": 0.00019319999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-715909161071091712'"
    },
    {
        "sample_id": 825,
        "pred_sql": "SELECT COUNT(DISTINCT twitter.userid) FROM twitter JOIN user ON twitter.userid = user.userid WHERE user.gender = 1 AND twitter.isreshare = 'true'",
        "retrieved": [
            837
        ],
        "token_usage": {
            "tokens": 924,
            "cost": 0.00021869999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'"
    },
    {
        "sample_id": 846,
        "pred_sql": "SELECT location.city FROM twitter INNER JOIN location ON twitter.locationid = location.locationid ORDER BY twitter.retweetcount DESC LIMIT 1;",
        "retrieved": [
            849
        ],
        "token_usage": {
            "tokens": 1009,
            "cost": 0.00020805
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID ORDER BY T1.RetweetCount DESC LIMIT 1"
    },
    {
        "sample_id": 839,
        "pred_sql": "SELECT COUNT(twitter.tweetid) FROM twitter WHERE twitter.isreshare = 'true' AND twitter.likes > 100",
        "retrieved": [
            800
        ],
        "token_usage": {
            "tokens": 873,
            "cost": 0.00018314999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100"
    },
    {
        "sample_id": 813,
        "pred_sql": "SELECT (COUNT(CASE WHEN twitter.sentiment > 0 THEN 1 END) * 100.0) / COUNT(twitter.tweetid) AS positive_percentage FROM twitter INNER JOIN location ON twitter.locationid = location.locationid WHERE location.state = 'California'",
        "retrieved": [
            795
        ],
        "token_usage": {
            "tokens": 973,
            "cost": 0.0002292
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'"
    },
    {
        "sample_id": 826,
        "pred_sql": "SELECT location.country, SUM(twitter.likes) AS total_likes FROM twitter INNER JOIN location ON twitter.locationid = location.locationid GROUP BY location.country ORDER BY total_likes DESC LIMIT 1;",
        "retrieved": [
            851
        ],
        "token_usage": {
            "tokens": 935,
            "cost": 0.00020639999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Likes) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 841,
        "pred_sql": "SELECT user.gender FROM twitter INNER JOIN user ON twitter.userid = user.userid ORDER BY twitter.likes DESC LIMIT 1",
        "retrieved": [
            791
        ],
        "token_usage": {
            "tokens": 900,
            "cost": 0.00019664999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1"
    },
    {
        "sample_id": 789,
        "pred_sql": "SELECT COUNT(DISTINCT user.userid) FROM twitter INNER JOIN user ON twitter.userid = user.userid WHERE twitter.likes > 1000 AND user.gender = 1",
        "retrieved": [
            795
        ],
        "token_usage": {
            "tokens": 961,
            "cost": 0.00021705
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'"
    },
    {
        "sample_id": 798,
        "pred_sql": "SELECT location.statecode FROM location WHERE location.state = 'Gwynedd'",
        "retrieved": [
            797
        ],
        "token_usage": {
            "tokens": 818,
            "cost": 0.00016455
        },
        "db_id": "social_media",
        "gold_sql": "SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'"
    },
    {
        "sample_id": 822,
        "pred_sql": "SELECT COUNT(DISTINCT twitter.tweetid) FROM twitter JOIN user ON twitter.userid = user.userid WHERE user.gender = 'Male'",
        "retrieved": [
            816
        ],
        "token_usage": {
            "tokens": 864,
            "cost": 0.0001899
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'"
    },
    {
        "sample_id": 792,
        "pred_sql": "SELECT COUNT(*) FROM twitter INNER JOIN user ON twitter.userid = user.userid INNER JOIN location ON twitter.locationid = location.locationid WHERE user.gender = 1 AND location.country = 'Argentina'",
        "retrieved": [
            851
        ],
        "token_usage": {
            "tokens": 971,
            "cost": 0.00022664999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T3.Gender = 'Male' AND T2.Country = 'Argentina'"
    },
    {
        "sample_id": 832,
        "pred_sql": "SELECT SUM(twitter.likes) AS total_likes FROM twitter INNER JOIN user ON twitter.userid = user.userid INNER JOIN location ON twitter.locationid = location.locationid WHERE user.gender = 1 AND location.country = 'ru'",
        "retrieved": [
            795
        ],
        "token_usage": {
            "tokens": 974,
            "cost": 0.00022799999999999999
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'"
    },
    {
        "sample_id": 8570,
        "pred_sql": "SELECT demog.income_k FROM customers INNER JOIN mailings1_2 ON customers.id = mailings1_2.refid INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.age >= 30 AND customers.age <= 55 AND customers.sex = 'female' AND customers.occupation = 'machine-op-inspct' AND mailings1_2.response = 'True'",
        "retrieved": [
            8567
        ],
        "token_usage": {
            "tokens": 1340,
            "cost": 0.0002892
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'"
    },
    {
        "sample_id": 8566,
        "pred_sql": "SELECT demog.income_k FROM demog WHERE demog.geoid IN (SELECT demog.geoid FROM customers WHERE educationnum <= 3 AND sex = 'Female')",
        "retrieved": [
            8543
        ],
        "token_usage": {
            "tokens": 1222,
            "cost": 0.00023864999999999997
        },
        "db_id": "software_company",
        "gold_sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )"
    },
    {
        "sample_id": 8535,
        "pred_sql": "SELECT inhabitants_k, income_k FROM demog WHERE geoid = '239'",
        "retrieved": [
            8561
        ],
        "token_usage": {
            "tokens": 1143,
            "cost": 0.00020834999999999997
        },
        "db_id": "software_company",
        "gold_sql": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239"
    },
    {
        "sample_id": 8512,
        "pred_sql": "SELECT customers.occupation FROM customers WHERE customers.educationnum = 11",
        "retrieved": [
            8515
        ],
        "token_usage": {
            "tokens": 1165,
            "cost": 0.0002184
        },
        "db_id": "software_company",
        "gold_sql": "SELECT DISTINCT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11"
    },
    {
        "sample_id": 8538,
        "pred_sql": "SELECT customers.geoid, (demog.inhabitants_k * demog.income_k * 12) AS yearly_income FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.age = (SELECT MAX(age) FROM customers)",
        "retrieved": [
            8580
        ],
        "token_usage": {
            "tokens": 1281,
            "cost": 0.00027314999999999994
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T1.GEOID, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T1.age DESC LIMIT 1"
    },
    {
        "sample_id": 8539,
        "pred_sql": "SELECT demog.income_k FROM demog WHERE demog.geoid IN (SELECT customers.geoid FROM customers WHERE customers.educationnum <= 4 AND customers.sex = 'Male')",
        "retrieved": [
            8543
        ],
        "token_usage": {
            "tokens": 1238,
            "cost": 0.0002478
        },
        "db_id": "software_company",
        "gold_sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )"
    },
    {
        "sample_id": 8576,
        "pred_sql": "SELECT demog.inhabitants_k, demog.income_k FROM demog INNER JOIN customers ON demog.geoid = customers.geoid INNER JOIN mailings1_2 ON customers.id = mailings1_2.refid WHERE mailings1_2.response = 'False' AND customers.id > (SELECT AVG(refid) FROM mailings1_2 WHERE response = 'False') * 0.5;",
        "retrieved": [
            8564
        ],
        "token_usage": {
            "tokens": 1341,
            "cost": 0.00029699999999999996
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )"
    },
    {
        "sample_id": 8542,
        "pred_sql": "SELECT customers.occupation FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE demog.inhabitants_k > 30 AND demog.inhabitants_k < 40",
        "retrieved": [
            8520
        ],
        "token_usage": {
            "tokens": 1236,
            "cost": 0.00023444999999999998
        },
        "db_id": "software_company",
        "gold_sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K >= 30 AND T2.INHABITANTS_K <= 40"
    },
    {
        "sample_id": 8541,
        "pred_sql": "SELECT COUNT(*) FROM customers WHERE marital_status = 'Widowed' AND sex = 'Male' AND age BETWEEN 40 AND 60 AND geoid IN (SELECT geoid FROM demog WHERE income_k >= 3000)",
        "retrieved": [
            8543
        ],
        "token_usage": {
            "tokens": 1251,
            "cost": 0.000252
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000"
    },
    {
        "sample_id": 8518,
        "pred_sql": "SELECT COUNT(customers.geoid) FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.sex = 'male' AND demog.inhabitants_k > 30",
        "retrieved": [
            8520
        ],
        "token_usage": {
            "tokens": 1289,
            "cost": 0.0002649
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30"
    },
    {
        "sample_id": 8554,
        "pred_sql": "SELECT COUNT(customers.geoid) FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.occupation = 'other services' AND demog.inhabitants_k > 20",
        "retrieved": [
            8520
        ],
        "token_usage": {
            "tokens": 1277,
            "cost": 0.0002577
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20"
    },
    {
        "sample_id": 8540,
        "pred_sql": "SELECT customers.occupation, demog.income_k FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.sex = 'male' AND customers.educationnum BETWEEN 4 AND 6",
        "retrieved": [
            8567
        ],
        "token_usage": {
            "tokens": 1279,
            "cost": 0.00025575
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'"
    },
    {
        "sample_id": 8578,
        "pred_sql": "SELECT demog.geoid, (demog.inhabitants_k * demog.income_k * 12) AS total_income_per_year FROM demog WHERE demog.income_k > 3300",
        "retrieved": [
            8551
        ],
        "token_usage": {
            "tokens": 1174,
            "cost": 0.00022874999999999998
        },
        "db_id": "software_company",
        "gold_sql": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300"
    },
    {
        "sample_id": 8514,
        "pred_sql": "SELECT COUNT(customers.id) FROM customers WHERE customers.age > 30 AND customers.occupation = 'Machine-op-inspcts'",
        "retrieved": [
            8520
        ],
        "token_usage": {
            "tokens": 1199,
            "cost": 0.00021224999999999998
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(ID) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age > 30"
    },
    {
        "sample_id": 8553,
        "pred_sql": "SELECT COUNT(customers.geoid) FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.occupation = 'Machine-op-inspct' AND demog.inhabitants_k > 20 AND demog.inhabitants_k < 30 AND customers.age >= 13 AND customers.age <= 19;",
        "retrieved": [
            8520
        ],
        "token_usage": {
            "tokens": 1311,
            "cost": 0.00028215
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19"
    },
    {
        "sample_id": 10821,
        "pred_sql": "SELECT event.event_name FROM attendance INNER JOIN event ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer'",
        "retrieved": [
            10851
        ],
        "token_usage": {
            "tokens": 1833,
            "cost": 0.0003554999999999999
        },
        "db_id": "student_club",
        "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'"
    },
    {
        "sample_id": 10836,
        "pred_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
        "retrieved": [
            10758
        ],
        "token_usage": {
            "tokens": 1769,
            "cost": 0.0003369
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'"
    },
    {
        "sample_id": 10875,
        "pred_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'parking' GROUP BY event.event_id HAVING SUM(expense.cost) < (SELECT AVG(amount) FROM budget WHERE category = 'parking')",
        "retrieved": [
            10830
        ],
        "token_usage": {
            "tokens": 1789,
            "cost": 0.00035925
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)"
    },
    {
        "sample_id": 10790,
        "pred_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'",
        "retrieved": [
            10734
        ],
        "token_usage": {
            "tokens": 1721,
            "cost": 0.00030674999999999995
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'"
    },
    {
        "sample_id": 10859,
        "pred_sql": "SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN expense ON expense.link_to_member = member.member_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
        "retrieved": [
            10743
        ],
        "token_usage": {
            "tokens": 1907,
            "cost": 0.00038504999999999995
        },
        "db_id": "student_club",
        "gold_sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'"
    },
    {
        "sample_id": 10805,
        "pred_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1751,
            "cost": 0.0003243
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'"
    },
    {
        "sample_id": 10841,
        "pred_sql": "SELECT event.type FROM event WHERE event.event_date = '2020-03-24T12:00:00'",
        "retrieved": [
            10857
        ],
        "token_usage": {
            "tokens": 1780,
            "cost": 0.00032189999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'"
    },
    {
        "sample_id": 10839,
        "pred_sql": "SELECT DISTINCT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;",
        "retrieved": [
            10872
        ],
        "token_usage": {
            "tokens": 1775,
            "cost": 0.00032879999999999997
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30"
    },
    {
        "sample_id": 10735,
        "pred_sql": "SELECT COUNT(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'Engineering'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1716,
            "cost": 0.0003015
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'"
    },
    {
        "sample_id": 10856,
        "pred_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND city = 'San Juan Municipio' AND state = 'Puerto Rico';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1677,
            "cost": 0.00030824999999999993
        },
        "db_id": "student_club",
        "gold_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'"
    },
    {
        "sample_id": 10818,
        "pred_sql": "SELECT COUNT(attendance.link_to_event) AS event_count, major.major_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi' GROUP BY major.major_name;",
        "retrieved": [
            10758
        ],
        "token_usage": {
            "tokens": 1785,
            "cost": 0.0003438
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'"
    },
    {
        "sample_id": 10799,
        "pred_sql": "SELECT COUNT(*) FROM member WHERE position = 'president'",
        "retrieved": [
            10741
        ],
        "token_usage": {
            "tokens": 1691,
            "cost": 0.00029505
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'"
    },
    {
        "sample_id": 10833,
        "pred_sql": "SELECT expense.expense_description, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
        "retrieved": [
            10743
        ],
        "token_usage": {
            "tokens": 1793,
            "cost": 0.00032834999999999993
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'"
    },
    {
        "sample_id": 10796,
        "pred_sql": "SELECT COUNT(attendance.link_to_event) FROM attendance JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240';",
        "retrieved": [
            10801
        ],
        "token_usage": {
            "tokens": 1757,
            "cost": 0.00032609999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'"
    },
    {
        "sample_id": 10791,
        "pred_sql": "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.amount DESC LIMIT 1",
        "retrieved": [
            10798
        ],
        "token_usage": {
            "tokens": 1744,
            "cost": 0.00031965
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "sample_id": 10852,
        "pred_sql": "SELECT member.last_name, member.position FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.expense_description = 'pizza' AND expense.expense_date = '2019-09-10'",
        "retrieved": [
            10870
        ],
        "token_usage": {
            "tokens": 1872,
            "cost": 0.0003734999999999999
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'"
    },
    {
        "sample_id": 10814,
        "pred_sql": "SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1;",
        "retrieved": [
            10757
        ],
        "token_usage": {
            "tokens": 1814,
            "cost": 0.00034815
        },
        "db_id": "student_club",
        "gold_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1"
    },
    {
        "sample_id": 10855,
        "pred_sql": "SELECT DISTINCT city, state FROM zip_code WHERE type = 'PO Box';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1634,
            "cost": 0.00028964999999999997
        },
        "db_id": "student_club",
        "gold_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL"
    },
    {
        "sample_id": 10854,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN income.amount = '50' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(income.amount) AS percentage FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'medium';",
        "retrieved": [
            10822
        ],
        "token_usage": {
            "tokens": 1869,
            "cost": 0.00036989999999999994
        },
        "db_id": "student_club",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'"
    },
    {
        "sample_id": 10879,
        "pred_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > (SELECT AVG(cost) FROM expense)",
        "retrieved": [
            10870
        ],
        "token_usage": {
            "tokens": 1830,
            "cost": 0.0003491999999999999
        },
        "db_id": "student_club",
        "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )"
    },
    {
        "sample_id": 10813,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Finance')) * 1.0 / (SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics')) AS ratio;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1658,
            "cost": 0.0003027
        },
        "db_id": "student_club",
        "gold_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major"
    },
    {
        "sample_id": 10865,
        "pred_sql": "SELECT event_id, location, status FROM event WHERE DATE(event_date) BETWEEN '2019-11-01' AND '2020-03-31'",
        "retrieved": [
            10857
        ],
        "token_usage": {
            "tokens": 1786,
            "cost": 0.00032639999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'"
    },
    {
        "sample_id": 10768,
        "pred_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1650,
            "cost": 0.00029924999999999993
        },
        "db_id": "student_club",
        "gold_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'"
    },
    {
        "sample_id": 10846,
        "pred_sql": "SELECT COUNT(*) AS count FROM member WHERE t_shirt_size = 'Extra Large';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1641,
            "cost": 0.00029115
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'"
    },
    {
        "sample_id": 10779,
        "pred_sql": "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton' AND income.source = 'dues';",
        "retrieved": [
            10858
        ],
        "token_usage": {
            "tokens": 1785,
            "cost": 0.0003411
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'"
    },
    {
        "sample_id": 10770,
        "pred_sql": "SELECT COUNT(*) AS exceeded_budget_count FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;",
        "retrieved": [
            10884
        ],
        "token_usage": {
            "tokens": 1782,
            "cost": 0.0003393
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0"
    },
    {
        "sample_id": 10760,
        "pred_sql": "SELECT expense.expense_id, expense.expense_description, expense.cost, expense.approved FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08'",
        "retrieved": [
            10876
        ],
        "token_usage": {
            "tokens": 1813,
            "cost": 0.00034619999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'"
    },
    {
        "sample_id": 10848,
        "pred_sql": "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "retrieved": [
            10863
        ],
        "token_usage": {
            "tokens": 1736,
            "cost": 0.0003062999999999999
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'"
    },
    {
        "sample_id": 10845,
        "pred_sql": "SELECT COUNT(*) AS income_count FROM income WHERE amount = 50",
        "retrieved": [
            10872
        ],
        "token_usage": {
            "tokens": 1722,
            "cost": 0.0002988
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(income_id) FROM income WHERE amount = 50"
    },
    {
        "sample_id": 10776,
        "pred_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
        "retrieved": [
            10851
        ],
        "token_usage": {
            "tokens": 1815,
            "cost": 0.0003447
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"
    },
    {
        "sample_id": 10850,
        "pred_sql": "SELECT zip_code.city, zip_code.state FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1762,
            "cost": 0.0003291
        },
        "db_id": "student_club",
        "gold_sql": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'"
    },
    {
        "sample_id": 10883,
        "pred_sql": "SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1724,
            "cost": 0.0003054
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'"
    },
    {
        "sample_id": 10838,
        "pred_sql": "SELECT COUNT(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1696,
            "cost": 0.0003255
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'"
    },
    {
        "sample_id": 4399,
        "pred_sql": "SELECT COUNT(*) FROM enrolled WHERE school = 'SMC' AND name IN (SELECT name FROM unemployed)",
        "retrieved": [
            4492
        ],
        "token_usage": {
            "tokens": 805,
            "cost": 0.000177
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN unemployed AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'"
    },
    {
        "sample_id": 4527,
        "pred_sql": "SELECT COUNT(filed_for_bankrupcy.name) FROM filed_for_bankrupcy INNER JOIN enlist ON filed_for_bankrupcy.name = enlist.name WHERE enlist.organ = 'navy'",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 867,
            "cost": 0.00019125
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'"
    },
    {
        "sample_id": 4473,
        "pred_sql": "SELECT COUNT(*) FROM unemployed INNER JOIN enlist ON unemployed.name = enlist.name WHERE enlist.organ = 'Army'",
        "retrieved": [
            4560
        ],
        "token_usage": {
            "tokens": 867,
            "cost": 0.00019844999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.organ = 'army'"
    },
    {
        "sample_id": 4413,
        "pred_sql": "SELECT person.name, \n       CASE \n           WHEN male.name IS NOT NULL THEN 'Male' \n           ELSE 'Female' \n       END AS gender, \n       CASE \n           WHEN disabled.name IS NOT NULL THEN 'Disabled' \n           ELSE 'Not Disabled' \n       END AS disability, \n       CASE \n           WHEN filed_for_bankrupcy.name IS NOT NULL THEN 'Filed for Bankruptcy' \n           ELSE 'Not Filed for Bankruptcy' \n       END AS bankruptcy_status, \n       CASE \n           WHEN no_payment_due.bool = 'pos' THEN 'Has Payment Due' \n           ELSE 'No Payment Due' \n       END AS payment_status, \n       enrolled.school \nFROM person \nLEFT JOIN male ON person.name = male.name \nLEFT JOIN disabled ON person.name = disabled.name \nLEFT JOIN filed_for_bankrupcy ON person.name = filed_for_bankrupcy.name \nLEFT JOIN no_payment_due ON person.name = no_payment_due.name \nLEFT JOIN enrolled ON person.name = enrolled.name \nWHERE person.name IN ('student180', 'student117')",
        "retrieved": [
            4375
        ],
        "token_usage": {
            "tokens": 1101,
            "cost": 0.00033749999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT ( SELECT COUNT(name) FROM disabled WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM unemployed WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM male WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM no_payment_due WHERE name IN ('student180', 'student117'))"
    },
    {
        "sample_id": 4440,
        "pred_sql": "SELECT filed_for_bankrupcy.name FROM filed_for_bankrupcy INNER JOIN longest_absense_from_school ON filed_for_bankrupcy.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = '0'",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 934,
            "cost": 0.00024494999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.month = 0"
    },
    {
        "sample_id": 4538,
        "pred_sql": "SELECT enlist.name FROM enlist WHERE enlist.organ = 'fire department'",
        "retrieved": [
            4547
        ],
        "token_usage": {
            "tokens": 785,
            "cost": 0.00015239999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT name FROM enlist WHERE organ = 'fire_department'"
    },
    {
        "sample_id": 4505,
        "pred_sql": "SELECT enlist.organ, COUNT(CASE WHEN male.name IS NULL THEN 1 END) AS female_count, COUNT(CASE WHEN male.name IS NOT NULL THEN 1 END) AS male_count FROM enlist LEFT JOIN male ON enlist.name = male.name GROUP BY enlist.organ",
        "retrieved": [
            4417
        ],
        "token_usage": {
            "tokens": 863,
            "cost": 0.00021135
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gender FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name GROUP BY T1.organ"
    },
    {
        "sample_id": 4496,
        "pred_sql": "SELECT enlist.organ, no_payment_due.bool FROM enlist INNER JOIN no_payment_due ON enlist.name = no_payment_due.name WHERE enlist.name = 'student160'",
        "retrieved": [
            4475
        ],
        "token_usage": {
            "tokens": 844,
            "cost": 0.00018599999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'"
    },
    {
        "sample_id": 4561,
        "pred_sql": "SELECT enlist.organ, COUNT(male.name) AS male_count FROM enlist INNER JOIN male ON enlist.name = male.name GROUP BY enlist.organ ORDER BY male_count ASC LIMIT 1;",
        "retrieved": [
            4550
        ],
        "token_usage": {
            "tokens": 850,
            "cost": 0.000204
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T.organ FROM ( SELECT T2.organ, COUNT(T1.name) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ) T ORDER BY T.num LIMIT 1"
    },
    {
        "sample_id": 4531,
        "pred_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < '4'",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 826,
            "cost": 0.000168
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 4"
    },
    {
        "sample_id": 4504,
        "pred_sql": "SELECT enrolled.school, COUNT(disabled.name) AS disabled_count FROM disabled INNER JOIN person ON disabled.name = person.name INNER JOIN enrolled ON person.name = enrolled.name GROUP BY enrolled.school",
        "retrieved": [
            4375
        ],
        "token_usage": {
            "tokens": 841,
            "cost": 0.00018599999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name GROUP BY T1.school"
    },
    {
        "sample_id": 4416,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM disabled WHERE name NOT IN (SELECT name FROM male)) * 1.0 / (SELECT COUNT(*) FROM disabled WHERE name IN (SELECT name FROM male)) AS ratio;",
        "retrieved": [
            4417
        ],
        "token_usage": {
            "tokens": 814,
            "cost": 0.00018104999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T2.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T1.\"name\" = T2.\"name\""
    },
    {
        "sample_id": 4374,
        "pred_sql": "SELECT COUNT(no_payment_due.name) FROM no_payment_due INNER JOIN enlist ON enlist.name = no_payment_due.name WHERE enlist.organ = 'navy' AND no_payment_due.bool = 'pos'",
        "retrieved": [
            4475
        ],
        "token_usage": {
            "tokens": 877,
            "cost": 0.00020534999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'navy' AND T2.bool = 'pos'"
    },
    {
        "sample_id": 4435,
        "pred_sql": "SELECT (COUNT(DISTINCT unemployed.name) * 100.0 / NULLIF(COUNT(DISTINCT person.name), 0)) AS percentage FROM unemployed INNER JOIN longest_absense_from_school ON unemployed.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = '5'",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 914,
            "cost": 0.0002181
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.month > 5, 1, 0)) AS REAL) * 100 / COUNT(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name"
    },
    {
        "sample_id": 4412,
        "pred_sql": "SELECT disabled.name FROM disabled INNER JOIN male ON disabled.name = male.name WHERE disabled.name = '124'",
        "retrieved": [
            4375
        ],
        "token_usage": {
            "tokens": 804,
            "cost": 0.00016334999999999999
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124'"
    },
    {
        "sample_id": 4480,
        "pred_sql": "SELECT COUNT(enlist.name) FROM enlist WHERE enlist.organ = 'navy'",
        "retrieved": [
            4472
        ],
        "token_usage": {
            "tokens": 777,
            "cost": 0.00016155
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "sample_id": 4395,
        "pred_sql": "SELECT disabled.name FROM disabled INNER JOIN enrolled ON disabled.name = enrolled.name WHERE enrolled.school = 'SMC'",
        "retrieved": [
            4492
        ],
        "token_usage": {
            "tokens": 805,
            "cost": 0.0001761
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'"
    },
    {
        "sample_id": 4392,
        "pred_sql": "SELECT enlist.name, enrolled.school FROM enlist JOIN enrolled ON enlist.name = enrolled.name WHERE enlist.organ = 'air force'",
        "retrieved": [
            4489
        ],
        "token_usage": {
            "tokens": 846,
            "cost": 0.0001935
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name, T1.school FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'air_force'"
    },
    {
        "sample_id": 4525,
        "pred_sql": "SELECT COUNT(disabled.name) AS disabled_students_count FROM enlist INNER JOIN disabled ON enlist.name = disabled.name WHERE enlist.organ = 'marines'",
        "retrieved": [
            4542
        ],
        "token_usage": {
            "tokens": 800,
            "cost": 0.00017309999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'"
    },
    {
        "sample_id": 4465,
        "pred_sql": "SELECT COUNT(enlist.name) FROM enlist WHERE enlist.organ = 'Navy'",
        "retrieved": [
            4472
        ],
        "token_usage": {
            "tokens": 775,
            "cost": 0.00015945
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "sample_id": 4567,
        "pred_sql": "SELECT MAX(month) FROM longest_absense_from_school INNER JOIN enlist ON longest_absense_from_school.name = enlist.name WHERE enlist.organ = 'Air Force'",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 862,
            "cost": 0.00018825
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "sample_id": 4389,
        "pred_sql": "SELECT name FROM longest_absense_from_school WHERE month = '6'",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 825,
            "cost": 0.00016739999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT name FROM longest_absense_from_school WHERE \"month\" = 6"
    },
    {
        "sample_id": 4490,
        "pred_sql": "SELECT COUNT(person.name) FROM person LEFT JOIN disabled ON person.name = disabled.name WHERE disabled.name IS NULL;",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 837,
            "cost": 0.00019305
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(CASE  WHEN T2.name IS NULL THEN T1.name END) AS \"number\" FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name"
    },
    {
        "sample_id": 4516,
        "pred_sql": "SELECT (COUNT(CASE WHEN d.name IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS disabled_attendance_percentage, (COUNT(CASE WHEN d.name IS NULL THEN 1 END) * 100.0 / COUNT(*)) AS non_disabled_attendance_percentage FROM person p LEFT JOIN disabled d ON p.name = d.name LEFT JOIN longest_absense_from_school l ON p.name = l.name;",
        "retrieved": [
            4492
        ],
        "token_usage": {
            "tokens": 962,
            "cost": 0.00026264999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT CAST((SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0))) AS REAL) * 100 / COUNT(T1.name), IIF(SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0)) > 0, 'YES', 'NO') AS isHigh FROM longest_absense_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name"
    },
    {
        "sample_id": 4570,
        "pred_sql": "SELECT organ, COUNT(male.name) * 100.0 / COUNT(enlist.name) AS male_percentage FROM enlist LEFT JOIN male ON enlist.name = male.name GROUP BY organ ORDER BY male_percentage DESC LIMIT 1;",
        "retrieved": [
            4484
        ],
        "token_usage": {
            "tokens": 901,
            "cost": 0.00023099999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T.organ, T.per FROM ( SELECT T1.organ, CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per , COUNT(T3.name) AS num FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name GROUP BY T1.organ ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 4546,
        "pred_sql": "SELECT enrolled.school, CASE WHEN male.name IS NOT NULL THEN 'male' ELSE 'female' END AS gender FROM enrolled LEFT JOIN male ON enrolled.name = male.name WHERE enrolled.name = 'student34'",
        "retrieved": [
            4550
        ],
        "token_usage": {
            "tokens": 837,
            "cost": 0.0001962
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.school , IIF(T3.name IS NULL, 'female', 'male') AS gender FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.name = 'student34'"
    },
    {
        "sample_id": 4517,
        "pred_sql": "SELECT AVG(CAST(longest_absense_from_school.month AS INTEGER)) AS average_absence_duration FROM longest_absense_from_school INNER JOIN disabled ON longest_absense_from_school.name = disabled.name INNER JOIN male ON longest_absense_from_school.name = male.name;",
        "retrieved": [
            4547
        ],
        "token_usage": {
            "tokens": 892,
            "cost": 0.00021659999999999995
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name"
    },
    {
        "sample_id": 4566,
        "pred_sql": "SELECT COUNT(disabled.name) FROM disabled INNER JOIN filed_for_bankrupcy ON disabled.name = filed_for_bankrupcy.name",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 865,
            "cost": 0.0001905
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name"
    },
    {
        "sample_id": 4446,
        "pred_sql": "SELECT COUNT(*) FROM enlist WHERE organ = 'Army'",
        "retrieved": [
            4560
        ],
        "token_usage": {
            "tokens": 786,
            "cost": 0.00015074999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'"
    },
    {
        "sample_id": 4420,
        "pred_sql": "SELECT AVG(CAST(longest_absense_from_school.month AS INTEGER)) AS average_absence FROM longest_absense_from_school JOIN unemployed ON longest_absense_from_school.name = unemployed.name",
        "retrieved": [
            4445
        ],
        "token_usage": {
            "tokens": 829,
            "cost": 0.00018825
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT AVG(month) FROM longest_absense_from_school WHERE name NOT IN ( SELECT name FROM unemployed )"
    },
    {
        "sample_id": 4377,
        "pred_sql": "SELECT COUNT(*) FROM unemployed INNER JOIN no_payment_due ON unemployed.name = no_payment_due.name WHERE no_payment_due.bool = 'pos'",
        "retrieved": [
            4393
        ],
        "token_usage": {
            "tokens": 834,
            "cost": 0.0001827
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\""
    },
    {
        "sample_id": 4521,
        "pred_sql": "SELECT no_payment_due.bool FROM no_payment_due WHERE no_payment_due.name = '124'",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 808,
            "cost": 0.00017519999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT \"bool\" FROM no_payment_due WHERE name = 'student124'"
    },
    {
        "sample_id": 4450,
        "pred_sql": "SELECT COUNT(unemployed.name) FROM unemployed INNER JOIN no_payment_due ON unemployed.name = no_payment_due.name WHERE no_payment_due.bool = 'pos'",
        "retrieved": [
            4393
        ],
        "token_usage": {
            "tokens": 843,
            "cost": 0.00018854999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'"
    },
    {
        "sample_id": 4432,
        "pred_sql": "SELECT disabled.name FROM disabled INNER JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name ORDER BY longest_absense_from_school.month DESC",
        "retrieved": [
            4547
        ],
        "token_usage": {
            "tokens": 866,
            "cost": 0.00019919999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name ORDER BY T2.month DESC LIMIT 1"
    },
    {
        "sample_id": 4563,
        "pred_sql": "SELECT COUNT(*) FROM disabled INNER JOIN unemployed ON disabled.name = unemployed.name",
        "retrieved": [
            4492
        ],
        "token_usage": {
            "tokens": 777,
            "cost": 0.0001602
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name"
    },
    {
        "sample_id": 4524,
        "pred_sql": "SELECT longest_absense_from_school.name FROM longest_absense_from_school INNER JOIN no_payment_due ON longest_absense_from_school.name = no_payment_due.name WHERE longest_absense_from_school.month = '5' AND no_payment_due.bool = 'neg'",
        "retrieved": [
            4393
        ],
        "token_usage": {
            "tokens": 917,
            "cost": 0.00022754999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T1.month = 5 AND T2.bool = 'neg'"
    },
    {
        "sample_id": 4369,
        "pred_sql": "SELECT month FROM longest_absense_from_school ORDER BY month DESC LIMIT 1",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 864,
            "cost": 0.00018629999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT MAX(month) FROM longest_absense_from_school"
    },
    {
        "sample_id": 4426,
        "pred_sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'neg'",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 804,
            "cost": 0.00017279999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'neg'"
    },
    {
        "sample_id": 4467,
        "pred_sql": "SELECT COUNT(DISTINCT enrolled.name) FROM enrolled INNER JOIN enlist ON enrolled.name = enlist.name WHERE enlist.organ = 'Peace Corps' AND enrolled.school = 'UCSD'",
        "retrieved": [
            4475
        ],
        "token_usage": {
            "tokens": 862,
            "cost": 0.0001959
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'peace_corps' AND T2.school = 'ucsd'"
    },
    {
        "sample_id": 4554,
        "pred_sql": "SELECT name FROM enlist WHERE organ = 'Marines'",
        "retrieved": [
            4542
        ],
        "token_usage": {
            "tokens": 779,
            "cost": 0.00016095
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT name FROM enlist WHERE organ = 'marines'"
    },
    {
        "sample_id": 4437,
        "pred_sql": "SELECT person.name FROM person INNER JOIN longest_absense_from_school ON person.name = longest_absense_from_school.name INNER JOIN unemployed ON person.name = unemployed.name ORDER BY longest_absense_from_school.month DESC",
        "retrieved": [
            4547
        ],
        "token_usage": {
            "tokens": 863,
            "cost": 0.00019739999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "sample_id": 4415,
        "pred_sql": "SELECT enlist.organ, enrolled.school FROM person LEFT JOIN enlist ON person.name = enlist.name LEFT JOIN enrolled ON person.name = enrolled.name WHERE person.name IN ('student27', 'student17', 'student101')",
        "retrieved": [
            4417
        ],
        "token_usage": {
            "tokens": 838,
            "cost": 0.00019229999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.school, T2.organ FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.\"name\" IN ('student27,student17,studetn101')"
    },
    {
        "sample_id": 10259,
        "pred_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)",
        "retrieved": [
            10265
        ],
        "token_usage": {
            "tokens": 1594,
            "cost": 0.00030389999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )"
    },
    {
        "sample_id": 10161,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'death touch'",
        "retrieved": [
            10193
        ],
        "token_usage": {
            "tokens": 1618,
            "cost": 0.00031289999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'"
    },
    {
        "sample_id": 10230,
        "pred_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = '108' AND superhero.height_cm = '188';",
        "retrieved": [
            10211
        ],
        "token_usage": {
            "tokens": 1609,
            "cost": 0.00030615
        },
        "db_id": "superhero",
        "gold_sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"
    },
    {
        "sample_id": 10220,
        "pred_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
        "retrieved": [
            10166
        ],
        "token_usage": {
            "tokens": 1616,
            "cost": 0.0002923499999999999
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
    },
    {
        "sample_id": 10153,
        "pred_sql": "SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';",
        "retrieved": [
            10166
        ],
        "token_usage": {
            "tokens": 1582,
            "cost": 0.00027465
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'"
    },
    {
        "sample_id": 10214,
        "pred_sql": "SELECT DISTINCT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination'",
        "retrieved": [
            10186
        ],
        "token_usage": {
            "tokens": 1574,
            "cost": 0.00029414999999999997
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'"
    },
    {
        "sample_id": 10257,
        "pred_sql": "SELECT (CAST(COUNT(*) AS FLOAT) * 100 / (SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics')) AS percentage_good_superheroes FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON alignment.id = superhero.alignment_id WHERE alignment.alignment = 'Good' AND publisher.publisher_name = 'Marvel Comics';",
        "retrieved": [
            10165
        ],
        "token_usage": {
            "tokens": 1733,
            "cost": 0.00034544999999999997
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'"
    },
    {
        "sample_id": 10168,
        "pred_sql": "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id",
        "retrieved": [
            10267
        ],
        "token_usage": {
            "tokens": 1625,
            "cost": 0.00030629999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT AVG(attribute_value) FROM hero_attribute"
    },
    {
        "sample_id": 10171,
        "pred_sql": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE superhero.superhero_name = 'Deathlok'",
        "retrieved": [
            10139
        ],
        "token_usage": {
            "tokens": 1623,
            "cost": 0.0003158999999999999
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'"
    },
    {
        "sample_id": 10189,
        "pred_sql": "SELECT AVG(weight_kg) FROM superhero WHERE skin_colour_id IS NULL OR skin_colour_id = ''",
        "retrieved": [
            10267
        ],
        "token_usage": {
            "tokens": 1591,
            "cost": 0.000285
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id"
    },
    {
        "sample_id": 10256,
        "pred_sql": "SELECT (CAST(COUNT(*) AS FLOAT) * 100 / (SELECT COUNT(*) FROM superhero)) AS female_percentage FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'female' AND publisher.publisher_name = 'George Lucas'",
        "retrieved": [
            10165
        ],
        "token_usage": {
            "tokens": 1699,
            "cost": 0.00032549999999999994
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'"
    },
    {
        "sample_id": 10245,
        "pred_sql": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'female' AND publisher.publisher_name = 'Marvel Comics'",
        "retrieved": [
            10162
        ],
        "token_usage": {
            "tokens": 1644,
            "cost": 0.00031365
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'"
    },
    {
        "sample_id": 10200,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE superpower.power_name = 'adaptation'",
        "retrieved": [
            10193
        ],
        "token_usage": {
            "tokens": 1619,
            "cost": 0.00031529999999999997
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'"
    },
    {
        "sample_id": 10201,
        "pred_sql": "SELECT COUNT(T3.power_name) AS power_count FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = 'Amazo'",
        "retrieved": [
            10173
        ],
        "token_usage": {
            "tokens": 1635,
            "cost": 0.0003158999999999999
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'"
    },
    {
        "sample_id": 10187,
        "pred_sql": "SELECT COUNT(DISTINCT hero_power.hero_id) AS stealth_hero_count FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth'",
        "retrieved": [
            10265
        ],
        "token_usage": {
            "tokens": 1612,
            "cost": 0.00031695
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'"
    },
    {
        "sample_id": 10255,
        "pred_sql": "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race AS T2 ON superhero.race_id = T2.id WHERE superhero.full_name = 'Charles Chandler'",
        "retrieved": [
            10198
        ],
        "token_usage": {
            "tokens": 1592,
            "cost": 0.0003045
        },
        "db_id": "superhero",
        "gold_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'"
    },
    {
        "sample_id": 10197,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'female'))) AS percentage_blue_female_superheroes FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'female') AND id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'blue'));",
        "retrieved": [
            10267
        ],
        "token_usage": {
            "tokens": 1665,
            "cost": 0.00032849999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'"
    },
    {
        "sample_id": 10218,
        "pred_sql": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man'",
        "retrieved": [
            10139
        ],
        "token_usage": {
            "tokens": 1607,
            "cost": 0.00030495
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'"
    },
    {
        "sample_id": 10216,
        "pred_sql": "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute AS T2 ON superhero.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "retrieved": [
            10188
        ],
        "token_usage": {
            "tokens": 1643,
            "cost": 0.0003252
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1"
    },
    {
        "sample_id": 10154,
        "pred_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.weight_kg = (SELECT MIN(weight_kg) FROM superhero)",
        "retrieved": [
            10166
        ],
        "token_usage": {
            "tokens": 1631,
            "cost": 0.00030405
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1"
    },
    {
        "sample_id": 10222,
        "pred_sql": "SELECT (COUNT(CASE WHEN colour.colour = 'blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_blue_eyes FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id;",
        "retrieved": [
            10145
        ],
        "token_usage": {
            "tokens": 1612,
            "cost": 0.000294
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id"
    },
    {
        "sample_id": 10150,
        "pred_sql": "SELECT superhero.superhero_name, colour.colour, COUNT(colour.colour) AS colour_count, RANK() OVER (ORDER BY COUNT(colour.colour) DESC) AS rank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour ORDER BY colour_count DESC;",
        "retrieved": [
            10148
        ],
        "token_usage": {
            "tokens": 1663,
            "cost": 0.00033945
        },
        "db_id": "superhero",
        "gold_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour"
    },
    {
        "sample_id": 10263,
        "pred_sql": "SELECT superhero.weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = '40'",
        "retrieved": [
            10226
        ],
        "token_usage": {
            "tokens": 1525,
            "cost": 0.0002715
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40"
    },
    {
        "sample_id": 10141,
        "pred_sql": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND superhero.height_cm > 200",
        "retrieved": [
            10145
        ],
        "token_usage": {
            "tokens": 1720,
            "cost": 0.0003516
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200"
    },
    {
        "sample_id": 10254,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1",
        "retrieved": [
            10248
        ],
        "token_usage": {
            "tokens": 1542,
            "cost": 0.00027404999999999997
        },
        "db_id": "superhero",
        "gold_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"
    },
    {
        "sample_id": 10146,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'blue' AND hair_colour.colour = 'blond'",
        "retrieved": [
            10145
        ],
        "token_usage": {
            "tokens": 1651,
            "cost": 0.0003138
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'"
    },
    {
        "sample_id": 10181,
        "pred_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero)",
        "retrieved": [
            10248
        ],
        "token_usage": {
            "tokens": 1551,
            "cost": 0.00027585
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1"
    },
    {
        "sample_id": 2396,
        "pred_sql": "SELECT product.\"product name\" FROM west_superstore INNER JOIN people ON west_superstore.\"customer id\" = people.\"customer id\" INNER JOIN product ON west_superstore.\"product id\" = product.\"product id\" WHERE people.\"customer name\" = 'Anne McFarland'",
        "retrieved": [
            2407
        ],
        "token_usage": {
            "tokens": 2143,
            "cost": 0.00039165
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Anne McFarland'"
    },
    {
        "sample_id": 2411,
        "pred_sql": "SELECT product.category, SUM(west_superstore.sales) AS total_sales FROM west_superstore INNER JOIN product ON west_superstore.product_id = product.product_id GROUP BY product.category ORDER BY total_sales ASC LIMIT 1;",
        "retrieved": [
            2407
        ],
        "token_usage": {
            "tokens": 2145,
            "cost": 0.00039419999999999993
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T2.Category FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" ORDER BY T1.Sales LIMIT 1"
    },
    {
        "sample_id": 2419,
        "pred_sql": "SELECT MAX(central_superstore.profit) AS highest_profit FROM central_superstore INNER JOIN people ON central_superstore.\"customer id\" = people.\"customer id\" WHERE people.\"customer name\" = 'Anna Chung' AND central_superstore.region = 'Central'",
        "retrieved": [
            2454
        ],
        "token_usage": {
            "tokens": 2133,
            "cost": 0.00038115
        },
        "db_id": "superstore",
        "gold_sql": "SELECT MAX(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Anna Chung'"
    },
    {
        "sample_id": 2409,
        "pred_sql": "SELECT SUM(south_superstore.quantity) FROM people INNER JOIN south_superstore ON people.\"customer id\" = south_superstore.\"customer id\" INNER JOIN product ON product.\"product id\" = south_superstore.\"product id\" WHERE people.\"customer name\" = 'Cindy Stewart' AND product.\"product name\" = 'Lexmark X 9575 Professional All-in-One Color Printer'",
        "retrieved": [
            2355
        ],
        "token_usage": {
            "tokens": 2257,
            "cost": 0.0004393499999999999
        },
        "db_id": "superstore",
        "gold_sql": "SELECT SUM(T1.Quantity) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Cindy Stewart' AND T3.\"Product Name\" = 'Lexmark X 9575 Professional All-in-One Color Printer'"
    },
    {
        "sample_id": 2417,
        "pred_sql": "SELECT product.\"product name\", SUM(central_superstore.quantity) AS total_quantity FROM central_superstore INNER JOIN product ON central_superstore.\"product id\" = product.\"product id\" WHERE product.\"sub-category\" = 'Art' AND central_superstore.region = 'Central' GROUP BY product.\"product name\" ORDER BY total_quantity DESC LIMIT 1;",
        "retrieved": [
            2454
        ],
        "token_usage": {
            "tokens": 2203,
            "cost": 0.00042314999999999996
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Sub-Category\" = 'Art' GROUP BY T2.\"Product Name\" ORDER BY COUNT(T2.\"Product ID\") DESC LIMIT 1"
    },
    {
        "sample_id": 2435,
        "pred_sql": "SELECT COUNT(DISTINCT T2.\"order id\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"customer id\" = T2.\"customer id\" WHERE T1.\"customer name\" = 'Aaron Bergman' AND T2.\"ship mode\" = 'Standard Class'",
        "retrieved": [
            2347
        ],
        "token_usage": {
            "tokens": 2159,
            "cost": 0.00039945
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aaron Bergman' AND T2.\"Ship Mode\" = 'Standard Class'"
    },
    {
        "sample_id": 2346,
        "pred_sql": "SELECT MAX(julianday(T2.\"ship date\") - julianday(T2.\"order date\")) AS longest_shipment_time FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"customer id\" = T2.\"customer id\" WHERE T1.\"customer name\" = 'Aimee Bixby'",
        "retrieved": [
            2347
        ],
        "token_usage": {
            "tokens": 2167,
            "cost": 0.00040334999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT MAX(strftime('%J', \"Ship Date\") - strftime('%J', \"Order Date\")) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby'"
    },
    {
        "sample_id": 2429,
        "pred_sql": "SELECT COUNT(DISTINCT cs.\"order id\") FROM central_superstore AS cs WHERE cs.\"quantity\" > 5 AND cs.\"ship mode\" = 'First Class' UNION SELECT COUNT(DISTINCT es.\"order id\") FROM east_superstore AS es WHERE es.\"quantity\" > 5 AND es.\"ship mode\" = 'First Class' UNION SELECT COUNT(DISTINCT ss.\"order id\") FROM south_superstore AS ss WHERE ss.\"quantity\" > 5 AND ss.\"ship mode\" = 'First Class' UNION SELECT COUNT(DISTINCT ws.\"order id\") FROM west_superstore AS ws WHERE ws.\"quantity\" > 5 AND ws.\"ship mode\" = 'First Class'",
        "retrieved": [
            2424
        ],
        "token_usage": {
            "tokens": 2272,
            "cost": 0.00045825
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(DISTINCT \"Order ID\") FROM central_superstore WHERE Quantity > 5 AND \"Ship Mode\" = 'First Class'"
    },
    {
        "sample_id": 2410,
        "pred_sql": "SELECT product.\"product name\" FROM central_superstore INNER JOIN product ON central_superstore.\"product id\" = product.\"product id\" WHERE central_superstore.\"quantity\" >= 10 AND central_superstore.\"ship mode\" = 'Standard Class'",
        "retrieved": [
            2407
        ],
        "token_usage": {
            "tokens": 2181,
            "cost": 0.00040679999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'Standard Class' AND T1.Quantity >= 10"
    },
    {
        "sample_id": 2367,
        "pred_sql": "SELECT DISTINCT product.\"product name\" FROM central_superstore INNER JOIN product ON central_superstore.\"product id\" = product.\"product id\" WHERE central_superstore.profit >= 1000",
        "retrieved": [
            2391
        ],
        "token_usage": {
            "tokens": 2157,
            "cost": 0.00039194999999999996
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.Profit > 1000"
    },
    {
        "sample_id": 2441,
        "pred_sql": "SELECT COUNT(product.category) FROM central_superstore INNER JOIN product ON central_superstore.product_id = product.product_id WHERE product.category = 'Furniture'",
        "retrieved": [
            2439
        ],
        "token_usage": {
            "tokens": 2073,
            "cost": 0.0003627
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture'"
    },
    {
        "sample_id": 2380,
        "pred_sql": "SELECT people.segment FROM west_superstore INNER JOIN people ON west_superstore.customer_id = people.customer_id WHERE west_superstore.order_id = 'CA-2011-108189' AND west_superstore.region = 'West';",
        "retrieved": [
            2457
        ],
        "token_usage": {
            "tokens": 2131,
            "cost": 0.00037725
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.Segment FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'West' AND T1.\"Order ID\" = 'CA-2011-108189'"
    },
    {
        "sample_id": 2358,
        "pred_sql": "SELECT SUM((central_superstore.sales / (1 - central_superstore.discount)) * central_superstore.quantity - central_superstore.profit) AS total_cost FROM people INNER JOIN central_superstore ON people.\"customer id\" = central_superstore.\"customer id\" INNER JOIN product ON product.\"product id\" = central_superstore.\"product id\" WHERE people.\"customer name\" = 'Aimee Bixby' AND product.\"product name\" = 'Xerox 1952' AND central_superstore.\"order date\" = '2014-09-10'",
        "retrieved": [
            2355
        ],
        "token_usage": {
            "tokens": 2301,
            "cost": 0.00046665
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT (T2.Sales / (1 - T2.discount)) * T2.Quantity - Profit FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952' AND T2.\"Order Date\" = '2014-09-10'"
    },
    {
        "sample_id": 2442,
        "pred_sql": "SELECT product.\"product name\" FROM central_superstore INNER JOIN product ON central_superstore.\"product id\" = product.\"product id\" WHERE central_superstore.\"ship date\" LIKE '2013-03%'",
        "retrieved": [
            2407
        ],
        "token_usage": {
            "tokens": 2131,
            "cost": 0.00038219999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE strftime('%Y-%m', T1.\"Ship Date\") = '2013-03'"
    },
    {
        "sample_id": 2382,
        "pred_sql": "SELECT central_superstore.order_id FROM central_superstore INNER JOIN people ON central_superstore.customer_id = people.customer_id WHERE people.customer_name = 'Frank Olsen' AND people.region = 'South'",
        "retrieved": [
            2457
        ],
        "token_usage": {
            "tokens": 2117,
            "cost": 0.00037289999999999996
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T1.\"Order ID\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Region = 'South' AND T2.\"Customer Name\" = 'Frank Olsen'"
    },
    {
        "sample_id": 2420,
        "pred_sql": "SELECT COUNT(central_superstore.order_id) FROM people INNER JOIN central_superstore ON people.\"customer id\" = central_superstore.\"customer id\" WHERE people.\"customer name\" = 'Corey Roper' AND strftime('%Y', central_superstore.\"order date\") = '2015'",
        "retrieved": [
            2355
        ],
        "token_usage": {
            "tokens": 2197,
            "cost": 0.00041009999999999994
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(T2.\"Customer ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Corey Roper' AND STRFTIME('%Y', T2.\"Ship Date\") = '2015'"
    },
    {
        "sample_id": 2360,
        "pred_sql": "SELECT people.\"customer name\" FROM central_superstore INNER JOIN people ON central_superstore.\"customer id\" = people.\"customer id\" ORDER BY (central_superstore.sales / (1 - central_superstore.discount) * central_superstore.quantity - central_superstore.profit) DESC LIMIT 1;",
        "retrieved": [
            2385
        ],
        "token_usage": {
            "tokens": 2171,
            "cost": 0.00041339999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" GROUP BY T1.\"Order ID\", T2.\"Customer Name\" ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1"
    },
    {
        "sample_id": 2377,
        "pred_sql": "SELECT product.category FROM south_superstore INNER JOIN product ON south_superstore.product_id = product.product_id INNER JOIN people ON south_superstore.customer_id = people.customer_id WHERE people.customer_name = 'Katherine Murray' AND south_superstore.order_date = '2018-11-04' AND south_superstore.region = 'South'",
        "retrieved": [
            2383
        ],
        "token_usage": {
            "tokens": 2183,
            "cost": 0.00040664999999999994
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T3.Category FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Katherine Murray' AND T1.\"Order Date\" = '2018-11-04' AND T2.Region = 'South'"
    },
    {
        "sample_id": 2376,
        "pred_sql": "SELECT people.\"customer name\" FROM east_superstore INNER JOIN people ON east_superstore.\"customer id\" = people.\"customer id\" WHERE east_superstore.\"order date\" = '2013-10-13' AND east_superstore.\"product id\" = (SELECT \"product id\" FROM product WHERE \"product name\" = 'Global High-Back Leather Tilter, Burgundy') AND east_superstore.region = 'East'",
        "retrieved": [
            2385
        ],
        "token_usage": {
            "tokens": 2179,
            "cost": 0.00041369999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Global High-Back Leather Tilter, Burgundy' AND T1.\"Order Date\" = '2013-10-13' AND T1.Region = 'East'"
    },
    {
        "sample_id": 2447,
        "pred_sql": "SELECT (COUNT(CASE WHEN cs.\"ship mode\" = 'First Class' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_furniture_first_class\nFROM central_superstore AS cs\nINNER JOIN product AS p ON cs.\"product id\" = p.\"product id\"\nWHERE p.\"category\" = 'Furniture' AND strftime('%Y', cs.\"order date\") = '2013';",
        "retrieved": [
            2439
        ],
        "token_usage": {
            "tokens": 2183,
            "cost": 0.00042329999999999993
        },
        "db_id": "superstore",
        "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.\"Ship Mode\" = 'First Class' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture' AND STRFTIME('%Y', T1.\"Ship Date\") = '2013'"
    },
    {
        "sample_id": 2416,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM people WHERE state = 'TX') * 1.0 / (SELECT COUNT(*) FROM people WHERE state = 'IN') AS ratio;",
        "retrieved": [
            2384
        ],
        "token_usage": {
            "tokens": 2167,
            "cost": 0.0003866999999999999
        },
        "db_id": "superstore",
        "gold_sql": "SELECT CAST(SUM(CASE  WHEN State = 'Texas' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN State = 'Indiana' THEN 1 ELSE 0 END) FROM people"
    },
    {
        "sample_id": 2426,
        "pred_sql": "SELECT COUNT(*) FROM west_superstore WHERE sales >= 5000 AND customer_id IN (SELECT \"customer id\" FROM people WHERE state = 'California')",
        "retrieved": [
            2407
        ],
        "token_usage": {
            "tokens": 2097,
            "cost": 0.0003582
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(DISTINCT T1.\"Order ID\") FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" INNER JOIN people AS T3 ON T3.\"Customer ID\" = T1.\"Customer ID\" WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'"
    },
    {
        "sample_id": 2366,
        "pred_sql": "SELECT COUNT(DISTINCT T1.\"customer name\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"customer id\" = T2.\"customer id\" INNER JOIN product AS T3 ON T3.\"product id\" = T2.\"product id\" WHERE T1.\"city\" = 'Chicago' AND T3.\"product name\" = 'Cardinal EasyOpen D-Ring Binders' AND T2.\"quantity\" >= 10",
        "retrieved": [
            2354
        ],
        "token_usage": {
            "tokens": 2238,
            "cost": 0.0004383
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(DISTINCT T1.\"Customer ID\") FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND T2.City = 'Chicago' AND T1.Quantity > 10"
    },
    {
        "sample_id": 2414,
        "pred_sql": "SELECT AVG(east_superstore.sales) AS average_sales_east, AVG(west_superstore.sales) AS average_sales_west FROM east_superstore INNER JOIN product ON east_superstore.product_id = product.product_id WHERE product.product_name = 'Sharp AL-1530CS Digital Copier' UNION SELECT AVG(west_superstore.sales) AS average_sales_east, AVG(west_superstore.sales) AS average_sales_west FROM west_superstore INNER JOIN product ON west_superstore.product_id = product.product_id WHERE product.product_name = 'Sharp AL-1530CS Digital Copier';",
        "retrieved": [
            2407
        ],
        "token_usage": {
            "tokens": 2215,
            "cost": 0.0004316999999999999
        },
        "db_id": "superstore",
        "gold_sql": "SELECT AVG(T1.Sales) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Sharp AL-1530CS Digital Copier'"
    },
    {
        "sample_id": 1393,
        "pred_sql": "SELECT T1.description, COUNT(DISTINCT T2.patient) AS patient_count FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON LOWER(T1.item) = LOWER(T2.description) INNER JOIN patients AS T3 ON T2.patient = T3.patient WHERE T3.gender = 'female' AND T3.ethnicity = 'American' GROUP BY T1.description ORDER BY patient_count DESC LIMIT 1;",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2112,
            "cost": 0.00040544999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.gender = 'F' AND T1.ethnicity = 'american' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1"
    },
    {
        "sample_id": 1531,
        "pred_sql": "SELECT DISTINCT careplans.description FROM patients INNER JOIN careplans ON patients.patient = careplans.patient WHERE patients.address = '179 Sydni Roads, Taunton, MA 02780 US'",
        "retrieved": [
            1416
        ],
        "token_usage": {
            "tokens": 2065,
            "cost": 0.00036284999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.address = '179 Sydni Roads Taunton MA 02780 US'"
    },
    {
        "sample_id": 1383,
        "pred_sql": "SELECT conditions.description FROM conditions INNER JOIN patients ON conditions.patient = patients.patient WHERE patients.first = 'Keven' AND patients.last = 'Kuhn' AND conditions.start >= '2016-09-24' AND conditions.stop <= '2016-10-10';",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2082,
            "cost": 0.00037844999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.start = '2016-09-24' AND T2.stop = '2016-10-10'"
    },
    {
        "sample_id": 1400,
        "pred_sql": "SELECT conditions.description, COUNT(conditions.description) AS condition_count \nFROM patients \nINNER JOIN immunizations ON patients.patient = immunizations.patient \nINNER JOIN conditions ON patients.patient = conditions.patient \nWHERE immunizations.description = 'influenza seasonal injectable preservative free' \nGROUP BY conditions.description \nORDER BY condition_count DESC \nLIMIT 1;",
        "retrieved": [
            1464
        ],
        "token_usage": {
            "tokens": 2130,
            "cost": 0.00040589999999999995
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1"
    },
    {
        "sample_id": 1462,
        "pred_sql": "SELECT COUNT(careplans.id) FROM patients INNER JOIN careplans ON patients.patient = careplans.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND careplans.start BETWEEN '2009-01-11' AND '2010-10-23'",
        "retrieved": [
            1464
        ],
        "token_usage": {
            "tokens": 2110,
            "cost": 0.00038984999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START BETWEEN '2009-01-11' AND '2010-10-23'"
    },
    {
        "sample_id": 1419,
        "pred_sql": "SELECT COUNT(T1.id) FROM encounters AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient WHERE T2.first = 'Major' AND T2.last = 'D'Amore'",
        "retrieved": [
            1475
        ],
        "token_usage": {
            "tokens": 2055,
            "cost": 0.00036764999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.ID) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'"
    },
    {
        "sample_id": 1487,
        "pred_sql": "WITH AgeFilteredPatients AS (SELECT patient, birthdate, deathdate, CASE WHEN deathdate IS NULL THEN strftime('%Y', 'now') - strftime('%Y', birthdate) ELSE strftime('%Y', deathdate) - strftime('%Y', birthdate) END AS age FROM patients WHERE (strftime('%Y', 'now') - strftime('%Y', birthdate)) >= 60), MostCommonConditions AS (SELECT T1.item, COUNT(DISTINCT T2.patient) AS patient_count FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON LOWER(T1.item) = LOWER(T2.description) GROUP BY T1.item ORDER BY patient_count DESC LIMIT 1) SELECT (SELECT patient_count FROM MostCommonConditions) * 100.0 / (SELECT COUNT(*) FROM AgeFilteredPatients) AS prevalence_percentage;",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2277,
            "cost": 0.0005017499999999999
        },
        "db_id": "synthea",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T5.DESCRIPTION = T3.DESCRIPTION THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.patient) FROM ( SELECT T2.DESCRIPTION, T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE ROUND((strftime('%J', T2.START) - strftime('%J', T1.birthdate)) / 365) > 60 GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1 ) AS T3 INNER JOIN patients AS T4 ON T3.patient = T4.patient INNER JOIN conditions AS T5 ON T4.patient = T5.PATIENT WHERE ROUND((strftime('%J', T5.START) - strftime('%J', T4.birthdate)) / 365) > 60"
    },
    {
        "sample_id": 1375,
        "pred_sql": "SELECT procedures.reasondescription FROM patients INNER JOIN procedures ON patients.patient = procedures.patient WHERE procedures.description = 'leucovorin 100 mg injection' AND patients.first = 'Annabelle' AND patients.last = 'Pouros' AND procedures.date = '1970-12-19'",
        "retrieved": [
            1497
        ],
        "token_usage": {
            "tokens": 2125,
            "cost": 0.00039659999999999994
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.reasondescription FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Annabelle' AND T1.last = 'Pouros' AND T2.start = '1970-12-19' AND T2.description = 'Leucovorin 100 MG Injection'"
    },
    {
        "sample_id": 1535,
        "pred_sql": "SELECT patients.ssn FROM patients INNER JOIN observations ON patients.patient = observations.patient WHERE observations.value = (SELECT MAX(value) FROM observations WHERE description = 'Systolic Blood Pressure')",
        "retrieved": [
            1363
        ],
        "token_usage": {
            "tokens": 2113,
            "cost": 0.00039705
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1"
    },
    {
        "sample_id": 1431,
        "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS total_patients, COUNT(DISTINCT CASE WHEN p.ethnicity = 'English' THEN p.patient END) AS english_patients, (COUNT(DISTINCT CASE WHEN p.ethnicity = 'English' THEN p.patient END) * 100.0 / COUNT(DISTINCT p.patient)) AS english_percentage FROM patients p INNER JOIN immunizations i ON p.patient = i.patient WHERE i.date BETWEEN '2017-01-01' AND '2017-12-31' AND i.description = 'Influenza seasonal injectable preservative free';",
        "retrieved": [
            1464
        ],
        "token_usage": {
            "tokens": 2223,
            "cost": 0.00045539999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'"
    },
    {
        "sample_id": 1512,
        "pred_sql": "SELECT careplans.stop FROM careplans INNER JOIN patients ON careplans.patient = patients.patient WHERE patients.deathdate IS NOT NULL",
        "retrieved": [
            1511
        ],
        "token_usage": {
            "tokens": 2021,
            "cost": 0.0003513
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.STOP FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL AND T1.STOP IS NOT NULL"
    },
    {
        "sample_id": 1467,
        "pred_sql": "SELECT STRFTIME('%J', medications.stop) - STRFTIME('%J', medications.start) FROM patients INNER JOIN medications ON patients.patient = medications.patient WHERE patients.first = 'Berry' AND patients.last = 'Keebler' AND medications.description LIKE 'Acetaminophen 160 MG'",
        "retrieved": [
            1364
        ],
        "token_usage": {
            "tokens": 2110,
            "cost": 0.00038804999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS takenDays FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Berry' AND T1.last = 'Keebler' AND T2.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'"
    },
    {
        "sample_id": 1439,
        "pred_sql": "SELECT COUNT(DISTINCT patients.patient) FROM patients INNER JOIN allergies ON patients.patient = allergies.patient INNER JOIN conditions ON patients.patient = conditions.patient WHERE patients.gender = 'M' AND conditions.description = 'house dust mites'",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2073,
            "cost": 0.00038114999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'House dust mite allergy' AND T1.gender = 'M'"
    },
    {
        "sample_id": 1506,
        "pred_sql": "SELECT careplans.reasondescription FROM careplans INNER JOIN patients ON careplans.patient = patients.patient WHERE patients.first = 'Angelo' AND patients.last = 'Buckridge'",
        "retrieved": [
            1511
        ],
        "token_usage": {
            "tokens": 2038,
            "cost": 0.00036059999999999993
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.REASONDESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Angelo' AND T2.last = 'Buckridge'"
    },
    {
        "sample_id": 1541,
        "pred_sql": "SELECT DISTINCT T1.birthdate FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.patient WHERE T1.gender = 'M' AND T2.description = 'Penicillin V Potassium 250 MG' LIMIT 5;",
        "retrieved": [
            1521
        ],
        "token_usage": {
            "tokens": 2149,
            "cost": 0.00041369999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T2.birthdate FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND T2.gender = 'M' LIMIT 5"
    },
    {
        "sample_id": 1391,
        "pred_sql": "SELECT description, COUNT(*) as allergy_count FROM allergies GROUP BY description ORDER BY allergy_count DESC LIMIT 1;",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2051,
            "cost": 0.00035715
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DESCRIPTION FROM allergies GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1"
    },
    {
        "sample_id": 1414,
        "pred_sql": "SELECT patients.first, patients.last, ROUND((STRFTIME('%Y', patients.deathdate) - STRFTIME('%Y', patients.birthdate))) AS age FROM patients INNER JOIN conditions ON patients.patient = conditions.patient WHERE patients.deathdate IS NOT NULL ORDER BY age DESC LIMIT 1;",
        "retrieved": [
            1534
        ],
        "token_usage": {
            "tokens": 2134,
            "cost": 0.00040605000000000003
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.DESCRIPTION FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL ORDER BY strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) DESC LIMIT 1"
    },
    {
        "sample_id": 1427,
        "pred_sql": "SELECT DISTINCT medications.patient FROM allergies INNER JOIN patients ON allergies.patient = patients.patient INNER JOIN medications ON patients.patient = medications.patient WHERE allergies.description = 'mould' AND medications.start <= '2016-06-06' AND medications.stop >= '2016-06-06'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2177,
            "cost": 0.00042825
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.DESCRIPTION FROM allergies AS T1 INNER JOIN medications AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.START = '6/6/16' AND T1.DESCRIPTION = 'Allergy to mould'"
    },
    {
        "sample_id": 1508,
        "pred_sql": "SELECT DISTINCT encounters.id FROM patients INNER JOIN encounters ON patients.patient = encounters.patient WHERE patients.birthplace = 'Pembroke MA US'",
        "retrieved": [
            1443
        ],
        "token_usage": {
            "tokens": 2016,
            "cost": 0.00035055
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.ENCOUNTER FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.birthplace = 'Pembroke MA US'"
    },
    {
        "sample_id": 1510,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM encounters AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient WHERE T2.race = 'white' AND T1.reasoncode = '10509002'",
        "retrieved": [
            1513
        ],
        "token_usage": {
            "tokens": 2080,
            "cost": 0.00038354999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.REASONCODE = '10509002'"
    },
    {
        "sample_id": 1469,
        "pred_sql": "SELECT procedures.reasondescription FROM patients INNER JOIN encounters ON patients.patient = encounters.patient INNER JOIN procedures ON encounters.id = procedures.encounter WHERE patients.first = 'Lavelle' AND patients.last = 'Vandervort' AND encounters.date = '2013-11-20'",
        "retrieved": [
            1379
        ],
        "token_usage": {
            "tokens": 2129,
            "cost": 0.00039719999999999995
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2013-11-20' AND T1.first = 'Lavelle' AND T1.last = 'Vandervort'"
    },
    {
        "sample_id": 1413,
        "pred_sql": "SELECT DISTINCT T2.first || ' ' || T2.last AS patient_name FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient WHERE T1.code = '311791003'",
        "retrieved": [
            1513
        ],
        "token_usage": {
            "tokens": 2062,
            "cost": 0.00037184999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002"
    },
    {
        "sample_id": 1456,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient INNER JOIN immunizations AS T3 ON T2.patient = T3.patient WHERE T1.stop = '2013-11-23' AND T3.description = 'monovalent rotavirus'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2180,
            "cost": 0.00042689999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM careplans AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'rotavirus  monovalent' AND T1.STOP = '2013-11-23'"
    },
    {
        "sample_id": 1412,
        "pred_sql": "SELECT patients.ssn FROM patients INNER JOIN allergies ON patients.patient = allergies.patient INNER JOIN conditions ON allergies.encounter = conditions.encounter WHERE patients.gender = 'female' AND patients.ethnicity = 'Irish' AND conditions.description = 'grass pollen';",
        "retrieved": [
            1411
        ],
        "token_usage": {
            "tokens": 2071,
            "cost": 0.00038309999999999993
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.ssn FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.ethnicity = 'irish' AND T2.gender = 'F'"
    },
    {
        "sample_id": 1397,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM patients AS T2 INNER JOIN immunizations AS T3 ON T2.patient = T3.patient WHERE T2.race = 'Black' AND T3.description = 'DTaP' AND strftime('%Y', T3.date) = '2013'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2131,
            "cost": 0.0004019999999999999
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'black' AND T2.DESCRIPTION = 'DTaP' AND strftime('%Y', T2.DATE) = '2013'"
    },
    {
        "sample_id": 1471,
        "pred_sql": "SELECT patients.ssn, patients.address FROM encounters INNER JOIN patients ON encounters.patient = patients.patient INNER JOIN conditions ON encounters.patient = conditions.patient WHERE conditions.description = 'viral sinusitis' AND encounters.date = '2008-06-13'",
        "retrieved": [
            1411
        ],
        "token_usage": {
            "tokens": 2075,
            "cost": 0.00038055
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'"
    },
    {
        "sample_id": 1522,
        "pred_sql": "SELECT DISTINCT conditions.description FROM conditions INNER JOIN immunizations ON conditions.patient = immunizations.patient WHERE immunizations.description = 'IPV'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2053,
            "cost": 0.000357
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN immunizations AS T3 ON T1.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'IPV'"
    },
    {
        "sample_id": 1536,
        "pred_sql": "SELECT careplans.description FROM careplans INNER JOIN conditions ON careplans.patient = conditions.patient INNER JOIN all_prevalences ON conditions.description = all_prevalences.item ORDER BY all_prevalences.\"prevalence percentage\" DESC LIMIT 1;",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2073,
            "cost": 0.00037979999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T4.DESCRIPTION FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T2.DESCRIPTION = T1.ITEM INNER JOIN encounters AS T3 ON T2.ENCOUNTER = T3.ID INNER JOIN careplans AS T4 ON T4.ENCOUNTER = T3.ID ORDER BY T1.\"PREVALENCE PERCENTAGE\" DESC LIMIT 1"
    },
    {
        "sample_id": 1398,
        "pred_sql": "SELECT COUNT(DISTINCT immunizations.patient) FROM immunizations INNER JOIN conditions ON immunizations.patient = conditions.patient INNER JOIN all_prevalences ON LOWER(conditions.description) = LOWER(all_prevalences.item) WHERE conditions.start = (SELECT MAX(start) FROM conditions WHERE description = (SELECT item FROM all_prevalences ORDER BY \"prevalence rate\" DESC LIMIT 1))",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2105,
            "cost": 0.00039854999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) INNER JOIN immunizations AS T3 ON T2.PATIENT = T3.PATIENT GROUP BY T2.PATIENT ORDER BY T2.START DESC, T1.\"PREVALENCE RATE\" DESC LIMIT 1"
    },
    {
        "sample_id": 1369,
        "pred_sql": "SELECT conditions.description FROM patients INNER JOIN conditions ON patients.patient = conditions.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND conditions.start <= '2009-01-08' AND conditions.stop >= '2009-01-08';",
        "retrieved": [
            1360
        ],
        "token_usage": {
            "tokens": 2140,
            "cost": 0.00039075
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START = '2009-01-08'"
    },
    {
        "sample_id": 1507,
        "pred_sql": "SELECT DISTINCT patients.first, patients.last FROM careplans INNER JOIN patients ON careplans.patient = patients.patient WHERE careplans.description LIKE '%American%'",
        "retrieved": [
            1511
        ],
        "token_usage": {
            "tokens": 2010,
            "cost": 0.0003456
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'american'"
    },
    {
        "sample_id": 1387,
        "pred_sql": "SELECT allergies.patient FROM allergies WHERE (allergies.stop - allergies.start) = (SELECT MAX(allergies.stop - allergies.start) FROM allergies)",
        "retrieved": [
            1392
        ],
        "token_usage": {
            "tokens": 2022,
            "cost": 0.00035685
        },
        "db_id": "synthea",
        "gold_sql": "SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY CASE WHEN SUBSTR(STOP, -2, 1) != '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000 END - CASE WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900 ELSE SUBSTR(START, LENGTH(START) - 1) + 2000 END LIMIT 1"
    },
    {
        "sample_id": 1384,
        "pred_sql": "SELECT immunizations.date FROM patients INNER JOIN immunizations AS T2 ON patients.patient = T2.patient WHERE immunizations.description = 'standard pregnancy test' AND patients.first = 'Ira' AND patients.last = 'Deckow' ORDER BY immunizations.date DESC LIMIT 1",
        "retrieved": [
            1497
        ],
        "token_usage": {
            "tokens": 2109,
            "cost": 0.00039419999999999993
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.date FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Ira' AND T1.last = 'Deckow' AND T2.description = 'Standard pregnancy test'"
    },
    {
        "sample_id": 1473,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient WHERE T1.description = 'shellfish' AND (T2.deathdate IS NOT NULL AND (strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate)) < 12)",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2148,
            "cost": 0.00040905
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND CAST((strftime('%J', T1.deathdate) - strftime('%J', T1.birthdate)) AS REAL) / 365 < 12"
    },
    {
        "sample_id": 1394,
        "pred_sql": "SELECT COUNT(DISTINCT medications.patient) FROM medications INNER JOIN patients ON medications.patient = patients.patient WHERE medications.description = 'Ibuprofen 200mg Oral Tablet' AND strftime('%Y', medications.start) = '2016' AND (medications.stop - medications.start) = 30 AND patients.ethnicity = 'Dominican'",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2101,
            "cost": 0.00038984999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND strftime('%Y', T2.START) = '2016' AND strftime('%m', T2.STOP) - strftime('%m', T2.START) = 1"
    },
    {
        "sample_id": 1539,
        "pred_sql": "SELECT DISTINCT patients.first, patients.last FROM medications INNER JOIN patients ON medications.patient = patients.patient INNER JOIN conditions ON medications.patient = conditions.patient WHERE conditions.description = 'streptococcal sore throat'",
        "retrieved": [
            1511
        ],
        "token_usage": {
            "tokens": 2060,
            "cost": 0.00037155
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T2.first, T2.last FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5"
    },
    {
        "sample_id": 1409,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient WHERE T2.ethnicity = 'Asian' AND T1.description = 'peanuts'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2110,
            "cost": 0.0003903
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to peanuts' AND T2.race = 'asian'"
    },
    {
        "sample_id": 10692,
        "pred_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T2.sc170 IN ('-', '+') AND T1.sex = 'F' AND T2.symptoms IS NULL",
        "retrieved": [
            10697
        ],
        "token_usage": {
            "tokens": 2107,
            "cost": 0.00041055
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL"
    },
    {
        "sample_id": 10698,
        "pred_sql": "SELECT DISTINCT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.dna >= 8",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2019,
            "cost": 0.0003564
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8"
    },
    {
        "sample_id": 10730,
        "pred_sql": "SELECT COUNT(DISTINCT p.id) FROM patient p INNER JOIN examination e ON p.id = e.id INNER JOIN laboratory l ON p.id = l.id WHERE l.plt >= 100 AND l.plt <= 400 AND e.symptoms IS NOT NULL",
        "retrieved": [
            10669
        ],
        "token_usage": {
            "tokens": 2062,
            "cost": 0.00038399999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL"
    },
    {
        "sample_id": 10727,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc >= 3.5 AND laboratory.wbc <= 9.0",
        "retrieved": [
            10625
        ],
        "token_usage": {
            "tokens": 2024,
            "cost": 0.0003828
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'"
    },
    {
        "sample_id": 10607,
        "pred_sql": "SELECT (l1.t-cho - l2.t-cho) / l1.t-cho * 100 AS decrease_rate FROM laboratory l1 JOIN laboratory l2 ON l1.id = l2.id WHERE l1.date = '1981-11' AND l2.date = '1981-12' AND l1.id = (SELECT id FROM patient WHERE birthday = '1959-02-18')",
        "retrieved": [
            10604
        ],
        "token_usage": {
            "tokens": 2076,
            "cost": 0.0003915
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'"
    },
    {
        "sample_id": 10601,
        "pred_sql": "SELECT examination.\"acl igg\" FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' AND patient.first date = '1994-02-19' AND examination.\"examination date\" = '1993-11-12'",
        "retrieved": [
            10672
        ],
        "token_usage": {
            "tokens": 2086,
            "cost": 0.00039975
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT \"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND \"Examination Date\" = '1993-11-12'"
    },
    {
        "sample_id": 10715,
        "pred_sql": "SELECT MAX(examination.ana) AS highest_ana_concentration FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.cre < 1.5",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2030,
            "cost": 0.0003639
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1"
    },
    {
        "sample_id": 10688,
        "pred_sql": "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rnp >= 1 ORDER BY patient.birthday DESC LIMIT 1;",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2085,
            "cost": 0.0003950999999999999
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1"
    },
    {
        "sample_id": 10699,
        "pred_sql": "SELECT COUNT(DISTINCT p.id) FROM patient p INNER JOIN examination e ON p.id = e.id WHERE e.dna < 8 AND (p.description IS NULL OR p.description = '')",
        "retrieved": [
            10697
        ],
        "token_usage": {
            "tokens": 2064,
            "cost": 0.00038789999999999994
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL"
    },
    {
        "sample_id": 10640,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patient WHERE sex = 'F')) AS percentage_female_with_high_ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F' AND laboratory.ua > 8.0;",
        "retrieved": [
            10637
        ],
        "token_usage": {
            "tokens": 2102,
            "cost": 0.00042195
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'"
    },
    {
        "sample_id": 10719,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.t-cho > 250 AND (examination.kct = '-' OR examination.rvvt = '-' OR examination.lac = '-')",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2087,
            "cost": 0.00039495
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.\"T-CHO\" >= 250 AND T3.KCT = '-'"
    },
    {
        "sample_id": 10579,
        "pred_sql": "SELECT patient.id, patient.sex, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2",
        "retrieved": [
            10656
        ],
        "token_usage": {
            "tokens": 2043,
            "cost": 0.0003770999999999999
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2"
    },
    {
        "sample_id": 10711,
        "pred_sql": "SELECT COUNT(*) FROM laboratory WHERE id IN (SELECT id FROM patient WHERE diagnosis = 'SJS') AND (tp > 6.0 AND tp < 8.5)",
        "retrieved": [
            10604
        ],
        "token_usage": {
            "tokens": 2015,
            "cost": 0.0003602999999999999
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5"
    },
    {
        "sample_id": 10591,
        "pred_sql": "SELECT COUNT(CASE WHEN sex = 'M' THEN 1 END) AS male_count, COUNT(CASE WHEN sex = 'F' THEN 1 END) AS female_count FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE (laboratory.ua > 8.0 AND patient.sex = 'M') OR (laboratory.ua > 6.5 AND patient.sex = 'F')",
        "retrieved": [
            10658
        ],
        "token_usage": {
            "tokens": 2125,
            "cost": 0.00041864999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID"
    },
    {
        "sample_id": 10681,
        "pred_sql": "SELECT DISTINCT examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.birthday > '1985-01-01' AND laboratory.rf < 20",
        "retrieved": [
            10682
        ],
        "token_usage": {
            "tokens": 2038,
            "cost": 0.00037725
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'"
    },
    {
        "sample_id": 10626,
        "pred_sql": "SELECT julianday(examination.examination_date) - julianday(patient.first_date) AS days_difference FROM patient JOIN examination ON patient.id = examination.id WHERE patient.id = 821298;",
        "retrieved": [
            10604
        ],
        "token_usage": {
            "tokens": 1996,
            "cost": 0.00034799999999999995
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT STRFTIME('%d', T3.\"Examination Date\") - STRFTIME('%d', T1.\"First Date\") FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298"
    },
    {
        "sample_id": 10651,
        "pred_sql": "SELECT COUNT(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 200 AND (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) > 50;",
        "retrieved": [
            10637
        ],
        "token_usage": {
            "tokens": 2080,
            "cost": 0.00040649999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50"
    },
    {
        "sample_id": 10632,
        "pred_sql": "SELECT AVG(laboratory.ldh) AS average_ldh FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500",
        "retrieved": [
            10655
        ],
        "token_usage": {
            "tokens": 2062,
            "cost": 0.0003866999999999999
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500"
    },
    {
        "sample_id": 10644,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND (laboratory.cre > 1.5)",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2084,
            "cost": 0.00039719999999999995
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'"
    },
    {
        "sample_id": 10709,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission = '-'",
        "retrieved": [
            10700
        ],
        "token_usage": {
            "tokens": 2032,
            "cost": 0.00037769999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'"
    },
    {
        "sample_id": 10680,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.rf < 20 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+')",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2118,
            "cost": 0.00041489999999999995
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'"
    },
    {
        "sample_id": 10620,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS'",
        "retrieved": [
            10625
        ],
        "token_usage": {
            "tokens": 1975,
            "cost": 0.0003561
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'"
    },
    {
        "sample_id": 10571,
        "pred_sql": "WITH patient_counts AS (  SELECT admission, COUNT(*) AS count FROM patient WHERE sex = 'M' GROUP BY admission) SELECT SUM(CASE WHEN admission = '+' THEN count ELSE 0 END) AS inpatient_count, SUM(CASE WHEN admission = '-' THEN count ELSE 0 END) AS outpatient_count FROM patient_counts;",
        "retrieved": [
            10659
        ],
        "token_usage": {
            "tokens": 2037,
            "cost": 0.0003861
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'"
    },
    {
        "sample_id": 10574,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(patient.id) AS outpatient_to_inpatient_ratio FROM patient JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SLE'",
        "retrieved": [
            10622
        ],
        "token_usage": {
            "tokens": 2070,
            "cost": 0.0003996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'"
    },
    {
        "sample_id": 10690,
        "pred_sql": "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.sm = '+' ORDER BY patient.birthday DESC LIMIT 3;",
        "retrieved": [
            10682
        ],
        "token_usage": {
            "tokens": 2093,
            "cost": 0.00041339999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3"
    },
    {
        "sample_id": 10635,
        "pred_sql": "SELECT patient.id, laboratory.alp FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday = '19820401' AND laboratory.alp < 300",
        "retrieved": [
            10652
        ],
        "token_usage": {
            "tokens": 2055,
            "cost": 0.00039194999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'"
    },
    {
        "sample_id": 10596,
        "pred_sql": "SELECT AVG(1999 - (birthday / 10000)) AS average_age FROM patient WHERE id IN (SELECT id FROM laboratory WHERE date BETWEEN '19911001' AND '19911031')",
        "retrieved": [
            10609
        ],
        "token_usage": {
            "tokens": 2041,
            "cost": 0.00037499999999999995
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'"
    },
    {
        "sample_id": 10661,
        "pred_sql": "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct > 52 GROUP BY patient.id HAVING COUNT(laboratory.id) >= 2;",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2104,
            "cost": 0.00040605
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )"
    },
    {
        "sample_id": 10725,
        "pred_sql": "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu >= 180 ORDER BY patient.birthday ASC LIMIT 1;",
        "retrieved": [
            10655
        ],
        "token_usage": {
            "tokens": 2042,
            "cost": 0.00038459999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10733,
        "pred_sql": "SELECT COUNT(*) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14;",
        "retrieved": [
            10666
        ],
        "token_usage": {
            "tokens": 2019,
            "cost": 0.00037305
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0"
    },
    {
        "sample_id": 10684,
        "pred_sql": "SELECT COUNT(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.c3 > 35 AND examination.ana_pattern = 'P'",
        "retrieved": [
            10700
        ],
        "token_usage": {
            "tokens": 1995,
            "cost": 0.00035594999999999995
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.\"ANA Pattern\" = 'P'"
    },
    {
        "sample_id": 10670,
        "pred_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1980-01-01' AND (laboratory.fg <= 150 OR laboratory.fg >= 450)",
        "retrieved": [
            10669
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.00041775
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'"
    },
    {
        "sample_id": 10634,
        "pred_sql": "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission = '-'",
        "retrieved": [
            10652
        ],
        "token_usage": {
            "tokens": 2039,
            "cost": 0.00038774999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300"
    },
    {
        "sample_id": 10594,
        "pred_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.t-bil >= 2.0 AND patient.sex = 'M'",
        "retrieved": [
            10669
        ],
        "token_usage": {
            "tokens": 2039,
            "cost": 0.0003737999999999999
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 AND T1.SEX = 'M'"
    },
    {
        "sample_id": 9686,
        "pred_sql": "SELECT molecule.label FROM molecule WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002')",
        "retrieved": [
            9642
        ],
        "token_usage": {
            "tokens": 887,
            "cost": 0.00020459999999999999
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')"
    },
    {
        "sample_id": 9718,
        "pred_sql": "SELECT atom.molecule_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR000_1_2' AND atom.atom_id = 'TR000_1'",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 905,
            "cost": 0.00020595
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'"
    },
    {
        "sample_id": 9664,
        "pred_sql": "SELECT DISTINCT m.molecule_id FROM atom a INNER JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id IN ('21', '22', '23', '24', '25') AND m.label = '+'",
        "retrieved": [
            9719
        ],
        "token_usage": {
            "tokens": 877,
            "cost": 0.0001896
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'"
    },
    {
        "sample_id": 9743,
        "pred_sql": "SELECT DISTINCT molecule.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE (connected.atom_id = 'TR000_2' OR connected.atom_id2 = 'TR000_2') AND (connected.atom_id = 'TR000_4' OR connected.atom_id2 = 'TR000_4')",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 991,
            "cost": 0.00025844999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'"
    },
    {
        "sample_id": 9667,
        "pred_sql": "SELECT AVG(bond_count) FROM (SELECT COUNT(bond.bond_id) AS bond_count FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i' GROUP BY atom.atom_id) AS bond_counts;",
        "retrieved": [
            9637
        ],
        "token_usage": {
            "tokens": 957,
            "cost": 0.00021735
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'"
    },
    {
        "sample_id": 9688,
        "pred_sql": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR030' AND molecule.label = '+'",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 849,
            "cost": 0.00017729999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'"
    },
    {
        "sample_id": 9706,
        "pred_sql": "SELECT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND atom.molecule_id BETWEEN 'TR010' AND 'TR050'",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 944,
            "cost": 0.00023475
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'"
    },
    {
        "sample_id": 9695,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'cl') THEN (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'cl') ELSE NULL END) AS FLOAT) * 100 / COUNT((SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+')) AS percentage_chlorine_in_carcinogenic_molecules",
        "retrieved": [
            9685
        ],
        "token_usage": {
            "tokens": 1276,
            "cost": 0.00032819999999999995
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"
    },
    {
        "sample_id": 9741,
        "pred_sql": "SELECT COUNT(DISTINCT atom.element) AS element_count FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_3_4';",
        "retrieved": [
            9693
        ],
        "token_usage": {
            "tokens": 904,
            "cost": 0.00019905
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'"
    },
    {
        "sample_id": 9641,
        "pred_sql": "SELECT (COUNT(CASE WHEN molecule.label = '+' THEN 1 END) * 100.0 / COUNT(*)) AS carcinogenic_percentage FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#'",
        "retrieved": [
            9702
        ],
        "token_usage": {
            "tokens": 926,
            "cost": 0.00022124999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'"
    },
    {
        "sample_id": 9704,
        "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR006') AS hydrogen_ratio, label FROM molecule WHERE molecule_id = 'TR006'",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 869,
            "cost": 0.0001875
        },
        "db_id": "toxicology",
        "gold_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label"
    },
    {
        "sample_id": 9721,
        "pred_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR124'",
        "retrieved": [
            9666
        ],
        "token_usage": {
            "tokens": 869,
            "cost": 0.000183
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'"
    },
    {
        "sample_id": 9638,
        "pred_sql": "SELECT atom.atom_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'",
        "retrieved": [
            9682
        ],
        "token_usage": {
            "tokens": 916,
            "cost": 0.0002049
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"
    },
    {
        "sample_id": 9681,
        "pred_sql": "SELECT COUNT(DISTINCT atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'",
        "retrieved": [
            9637
        ],
        "token_usage": {
            "tokens": 907,
            "cost": 0.0001896
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T"
    },
    {
        "sample_id": 9653,
        "pred_sql": "SELECT bond.bond_type, COUNT(bond.bond_id) AS bond_count, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.molecule_id = 'TR010' GROUP BY bond.bond_type, molecule.label ORDER BY bond_count DESC LIMIT 1;",
        "retrieved": [
            9702
        ],
        "token_usage": {
            "tokens": 1019,
            "cost": 0.0002712
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T"
    },
    {
        "sample_id": 9639,
        "pred_sql": "SELECT connected.atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.molecule_id = 'TR181'",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 893,
            "cost": 0.0002037
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'"
    },
    {
        "sample_id": 9735,
        "pred_sql": "SELECT COUNT(atom.atom_id) FROM atom WHERE atom.molecule_id = 'TR001'",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 841,
            "cost": 0.00017519999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'"
    },
    {
        "sample_id": 9659,
        "pred_sql": "SELECT molecule.molecule_id, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10'",
        "retrieved": [
            9702
        ],
        "token_usage": {
            "tokens": 920,
            "cost": 0.00021315
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'"
    },
    {
        "sample_id": 9716,
        "pred_sql": "SELECT DISTINCT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+'",
        "retrieved": [
            9702
        ],
        "token_usage": {
            "tokens": 872,
            "cost": 0.0001893
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='"
    },
    {
        "sample_id": 9740,
        "pred_sql": "SELECT bond.molecule_id FROM bond WHERE bond.bond_id = 'TR001_1_7'",
        "retrieved": [
            9645
        ],
        "token_usage": {
            "tokens": 819,
            "cost": 0.0001692
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'"
    },
    {
        "sample_id": 9723,
        "pred_sql": "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR007_4' AND connected.atom_id2 = 'TR007_19' OR connected.atom_id2 = 'TR007_4' AND connected.atom_id = 'TR007_19'",
        "retrieved": [
            9635
        ],
        "token_usage": {
            "tokens": 923,
            "cost": 0.0002082
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'"
    },
    {
        "sample_id": 9690,
        "pred_sql": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR001_10_11'",
        "retrieved": [
            9693
        ],
        "token_usage": {
            "tokens": 894,
            "cost": 0.0001935
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'"
    },
    {
        "sample_id": 9737,
        "pred_sql": "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'",
        "retrieved": [
            9719
        ],
        "token_usage": {
            "tokens": 957,
            "cost": 0.00023894999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'"
    },
    {
        "sample_id": 9700,
        "pred_sql": "SELECT COUNT(DISTINCT molecule.molecule_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
        "retrieved": [
            9694
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.00021915
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"
    },
    {
        "sample_id": 9703,
        "pred_sql": "SELECT atom.element, COUNT(*) as element_count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.atom_id = (SELECT atom_id FROM atom WHERE molecule_id = atom.molecule_id ORDER BY atom_id LIMIT 1 OFFSET 3) GROUP BY atom.element",
        "retrieved": [
            9642
        ],
        "token_usage": {
            "tokens": 975,
            "cost": 0.00025469999999999996
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7"
    },
    {
        "sample_id": 9673,
        "pred_sql": "SELECT element, COUNT(*) as element_count FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY element_count ASC LIMIT 1;",
        "retrieved": [
            9694
        ],
        "token_usage": {
            "tokens": 918,
            "cost": 0.00020429999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t"
    },
    {
        "sample_id": 9701,
        "pred_sql": "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
        "retrieved": [
            9699
        ],
        "token_usage": {
            "tokens": 884,
            "cost": 0.00020099999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'"
    },
    {
        "sample_id": 9656,
        "pred_sql": "SELECT COUNT(*) AS bond_count FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.molecule_id = 'TR009' AND (c.atom_id = '12' OR c.atom_id2 = '12')",
        "retrieved": [
            9651
        ],
        "token_usage": {
            "tokens": 841,
            "cost": 0.00018104999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'"
    },
    {
        "sample_id": 9628,
        "pred_sql": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR004_8_9'",
        "retrieved": [
            9693
        ],
        "token_usage": {
            "tokens": 908,
            "cost": 0.00020189999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'"
    },
    {
        "sample_id": 717,
        "pred_sql": "SELECT trains.direction, COUNT(*) as train_count FROM trains INNER JOIN cars ON trains.id = cars.train_id WHERE cars.shape = 'rectangle' AND cars.position = '2' GROUP BY trains.direction ORDER BY train_count DESC LIMIT 1;",
        "retrieved": [
            696
        ],
        "token_usage": {
            "tokens": 914,
            "cost": 0.0002487
        },
        "db_id": "trains",
        "gold_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1"
    },
    {
        "sample_id": 702,
        "pred_sql": "SELECT COUNT(*) FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.len = 'short' AND trains.direction = 'east'",
        "retrieved": [
            699
        ],
        "token_usage": {
            "tokens": 887,
            "cost": 0.00021224999999999998
        },
        "db_id": "trains",
        "gold_sql": "SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'"
    },
    {
        "sample_id": 709,
        "pred_sql": "SELECT (COUNT(DISTINCT T1.id) * 100.0 / (SELECT COUNT(*) FROM trains WHERE direction = 'east')) AS percentage_non_regular_east FROM trains AS T1 INNER JOIN cars ON T1.id = cars.train_id WHERE T1.direction = 'east' AND cars.shape NOT IN ('rectangle', 'u_shaped', 'hexagon')",
        "retrieved": [
            696
        ],
        "token_usage": {
            "tokens": 869,
            "cost": 0.0002163
        },
        "db_id": "trains",
        "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T1.train_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape IN ('bucket', 'ellipse')"
    },
    {
        "sample_id": 722,
        "pred_sql": "SELECT COUNT(DISTINCT trains.id) FROM trains INNER JOIN cars ON trains.id = cars.train_id WHERE cars.position = '1' AND cars.load_num = '3' AND trains.direction = 'east';",
        "retrieved": [
            699
        ],
        "token_usage": {
            "tokens": 912,
            "cost": 0.00023039999999999996
        },
        "db_id": "trains",
        "gold_sql": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3"
    },
    {
        "sample_id": 698,
        "pred_sql": "SELECT cars.id FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.sides = 'double' AND trains.direction = 'west';",
        "retrieved": [
            697
        ],
        "token_usage": {
            "tokens": 813,
            "cost": 0.00018225
        },
        "db_id": "trains",
        "gold_sql": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'"
    },
    {
        "sample_id": 706,
        "pred_sql": "SELECT trains.direction, COUNT(cars.id) AS rectangle_car_count FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.shape = 'rectangle' GROUP BY trains.direction",
        "retrieved": [
            696
        ],
        "token_usage": {
            "tokens": 821,
            "cost": 0.00019245
        },
        "db_id": "trains",
        "gold_sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS rectCarsNum FROM cars WHERE shape = 'rectangle' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id ORDER BY T2.rectCarsNum DESC"
    },
    {
        "sample_id": 716,
        "pred_sql": "SELECT COUNT(DISTINCT trains.id) FROM trains INNER JOIN (SELECT train_id, COUNT(*) AS carsNum FROM cars GROUP BY train_id) AS T2 ON trains.id = T2.train_id WHERE trains.direction = 1 AND T2.carsNum >= 4;",
        "retrieved": [
            697
        ],
        "token_usage": {
            "tokens": 853,
            "cost": 0.00020805
        },
        "db_id": "trains",
        "gold_sql": "SELECT SUM(CASE WHEN T1.direction = 'east' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.carsNum >= 4"
    },
    {
        "sample_id": 725,
        "pred_sql": "SELECT trains.direction FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.load_shape = 'diamond' AND cars.position = '2'",
        "retrieved": [
            701
        ],
        "token_usage": {
            "tokens": 785,
            "cost": 0.0001893
        },
        "db_id": "trains",
        "gold_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'"
    },
    {
        "sample_id": 7992,
        "pred_sql": "SELECT university.id FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.year BETWEEN '2011' AND '2015' AND university_year.pct_international_students = 1",
        "retrieved": [
            8070
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.00020789999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015"
    },
    {
        "sample_id": 8038,
        "pred_sql": "SELECT country.country_name FROM university INNER JOIN country ON university.country_id = country.id WHERE university.university_name = 'Harvard University';",
        "retrieved": [
            8046
        ],
        "token_usage": {
            "tokens": 938,
            "cost": 0.00019739999999999997
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'"
    },
    {
        "sample_id": 8003,
        "pred_sql": "SELECT university.university_name FROM university INNER JOIN university_year ON university.id = university_year.university_id WHERE university_year.year = 2012 AND university_year.num_students >= 50000;",
        "retrieved": [
            8005
        ],
        "token_usage": {
            "tokens": 1024,
            "cost": 0.00022784999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students > 50000 AND T1.year = 2012"
    },
    {
        "sample_id": 8074,
        "pred_sql": "SELECT university.university_name FROM university_year INNER JOIN university ON university_year.university_id = university.id WHERE university_year.year = 2011 ORDER BY university_year.pct_international_students DESC LIMIT 1;",
        "retrieved": [
            8036
        ],
        "token_usage": {
            "tokens": 941,
            "cost": 0.00021449999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.pct_international_students DESC LIMIT 1"
    },
    {
        "sample_id": 8089,
        "pred_sql": "SELECT ranking_criteria.id FROM ranking_criteria WHERE ranking_criteria.criteria_name = 'Citations Rank'",
        "retrieved": [
            8050
        ],
        "token_usage": {
            "tokens": 840,
            "cost": 0.00017055
        },
        "db_id": "university",
        "gold_sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'"
    },
    {
        "sample_id": 7996,
        "pred_sql": "SELECT university.university_name FROM university JOIN university_year ON university.id = university_year.university_id ORDER BY university_year.num_students ASC LIMIT 1;",
        "retrieved": [
            8008
        ],
        "token_usage": {
            "tokens": 880,
            "cost": 0.00019184999999999997
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1"
    },
    {
        "sample_id": 7990,
        "pred_sql": "SELECT MAX(student_staff_ratio) FROM university_year;",
        "retrieved": [
            8084
        ],
        "token_usage": {
            "tokens": 903,
            "cost": 0.0001773
        },
        "db_id": "university",
        "gold_sql": "SELECT MAX(student_staff_ratio) FROM university_year WHERE student_staff_ratio = ( SELECT MAX(student_staff_ratio) FROM university_year )"
    },
    {
        "sample_id": 8052,
        "pred_sql": "SELECT university.id, university.university_name FROM university_ranking_year INNER JOIN university ON university.id = university_ranking_year.university_id WHERE university_ranking_year.ranking_criteria_id = '6' AND university_ranking_year.year = '2011' AND university_ranking_year.score < '50'",
        "retrieved": [
            8083
        ],
        "token_usage": {
            "tokens": 999,
            "cost": 0.00021509999999999997
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50"
    },
    {
        "sample_id": 8106,
        "pred_sql": "SELECT AVG(criteria_count) AS average_criteria_count FROM (SELECT COUNT(ranking_criteria.id) AS criteria_count FROM ranking_criteria INNER JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id WHERE ranking_system.system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings') GROUP BY ranking_system.id) AS criteria_counts;",
        "retrieved": [
            8135
        ],
        "token_usage": {
            "tokens": 1017,
            "cost": 0.00023354999999999996
        },
        "db_id": "university",
        "gold_sql": "SELECT (SUM(CASE WHEN T1.system_name = 'Center for World University Rankings' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Shanghai Ranking' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Times Higher Education World University Ranking' THEN 1 ELSE 0 END)) / 3 FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id"
    },
    {
        "sample_id": 7999,
        "pred_sql": "SELECT COUNT(*) AS university_count FROM university_ranking_year INNER JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE university_ranking_year.score = '0' AND ranking_criteria.criteria_name = 'Awards' AND university_ranking_year.year BETWEEN '2005' AND '2015';",
        "retrieved": [
            8131
        ],
        "token_usage": {
            "tokens": 954,
            "cost": 0.00022229999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0"
    },
    {
        "sample_id": 7993,
        "pred_sql": "SELECT country.country_name FROM university INNER JOIN country ON university.country_id = country.id GROUP BY country.country_name ORDER BY COUNT(university.id) DESC LIMIT 1;",
        "retrieved": [
            8131
        ],
        "token_usage": {
            "tokens": 911,
            "cost": 0.00019874999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1"
    },
    {
        "sample_id": 8079,
        "pred_sql": "SELECT university.university_name FROM ranking_criteria INNER JOIN university_ranking_year AS T2 ON ranking_criteria.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T2.year = '2011' AND T2.score > '90' AND ranking_criteria.criteria_name = 'teaching'",
        "retrieved": [
            8083
        ],
        "token_usage": {
            "tokens": 1019,
            "cost": 0.00022664999999999995
        },
        "db_id": "university",
        "gold_sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90"
    },
    {
        "sample_id": 8062,
        "pred_sql": "SELECT ranking_system.system_name FROM ranking_criteria INNER JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id WHERE ranking_criteria.criteria_name = 'Quality of Education Rank'",
        "retrieved": [
            8059
        ],
        "token_usage": {
            "tokens": 922,
            "cost": 0.00020715
        },
        "db_id": "university",
        "gold_sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'"
    },
    {
        "sample_id": 8053,
        "pred_sql": "SELECT university_year.num_students FROM university_year INNER JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'Yale University' AND university_year.year = 2016",
        "retrieved": [
            8131
        ],
        "token_usage": {
            "tokens": 905,
            "cost": 0.0001947
        },
        "db_id": "university",
        "gold_sql": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Yale University' AND T1.year = 2016"
    },
    {
        "sample_id": 8037,
        "pred_sql": "SELECT SUM(university_year.pct_female_students) FROM university_year JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'Stanford University' AND university_year.year = 2011;",
        "retrieved": [
            8071
        ],
        "token_usage": {
            "tokens": 882,
            "cost": 0.00018449999999999999
        },
        "db_id": "university",
        "gold_sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'"
    },
    {
        "sample_id": 8060,
        "pred_sql": "SELECT ranking_criteria.criteria_name FROM ranking_criteria JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id WHERE ranking_system.system_name = 'Shanghai Ranking'",
        "retrieved": [
            8050
        ],
        "token_usage": {
            "tokens": 876,
            "cost": 0.0001935
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'"
    },
    {
        "sample_id": 8072,
        "pred_sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1",
        "retrieved": [
            8068
        ],
        "token_usage": {
            "tokens": 865,
            "cost": 0.0001779
        },
        "db_id": "university",
        "gold_sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1"
    },
    {
        "sample_id": 7989,
        "pred_sql": "SELECT COUNT(*) FROM university INNER JOIN country AS T2 ON university.country_id = T2.id WHERE T2.country_name = 'United States of America' AND T2.country_name LIKE '%state%';",
        "retrieved": [
            7997
        ],
        "token_usage": {
            "tokens": 884,
            "cost": 0.0001947
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%'"
    },
    {
        "sample_id": 8087,
        "pred_sql": "SELECT ranking_system.id FROM ranking_system WHERE ranking_system.system_name = 'Center for World University Rankings'",
        "retrieved": [
            8019
        ],
        "token_usage": {
            "tokens": 892,
            "cost": 0.00018329999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'"
    },
    {
        "sample_id": 8056,
        "pred_sql": "SELECT country.country_name FROM university INNER JOIN country ON university.country_id = country.id WHERE university.university_name = 'University of S\u00e3o Paulo'",
        "retrieved": [
            8093
        ],
        "token_usage": {
            "tokens": 891,
            "cost": 0.00019709999999999997
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of S\u00e3o Paulo'"
    },
    {
        "sample_id": 8064,
        "pred_sql": "SELECT ranking_criteria.criteria_name, university_ranking_year.score FROM university INNER JOIN university_ranking_year ON university.id = university_ranking_year.university_id INNER JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE university.university_name = 'Harvard University' AND university_ranking_year.year = '2005'",
        "retrieved": [
            8059
        ],
        "token_usage": {
            "tokens": 926,
            "cost": 0.00020865
        },
        "db_id": "university",
        "gold_sql": "SELECT T1.criteria_name, T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2005"
    },
    {
        "sample_id": 8001,
        "pred_sql": "SELECT COUNT(*) FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id INNER JOIN ranking_criteria AS T3 ON T1.ranking_criteria_id = T3.id WHERE T2.university_name = 'Yale University' AND T3.criteria_name = 'Quality of Education Rank' AND T1.score >= '10'",
        "retrieved": [
            8083
        ],
        "token_usage": {
            "tokens": 1063,
            "cost": 0.00025215
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'"
    },
    {
        "sample_id": 8030,
        "pred_sql": "SELECT university_year.university_id FROM university_year WHERE university_year.year = 2011 ORDER BY university_year.num_students DESC LIMIT 1",
        "retrieved": [
            8068
        ],
        "token_usage": {
            "tokens": 877,
            "cost": 0.00018464999999999996
        },
        "db_id": "university",
        "gold_sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1"
    },
    {
        "sample_id": 8112,
        "pred_sql": "SELECT AVG(score) FROM university_ranking_year WHERE year = '2012'",
        "retrieved": [
            8070
        ],
        "token_usage": {
            "tokens": 890,
            "cost": 0.0001803
        },
        "db_id": "university",
        "gold_sql": "SELECT AVG(score) FROM university_ranking_year WHERE year = 2012"
    },
    {
        "sample_id": 8044,
        "pred_sql": "SELECT SUM(university_year.num_students) FROM university_year JOIN university_ranking_year ON university_year.university_id = university_ranking_year.university_id JOIN university ON university.id = university_year.university_id WHERE university_ranking_year.score = '90' AND university_year.year = '2011'",
        "retrieved": [
            7987
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.000225
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 90 AND T1.year = 2011"
    },
    {
        "sample_id": 8031,
        "pred_sql": "SELECT COUNT(*) FROM university_year WHERE university_year.year = 2011 AND university_year.pct_international_students > 10 AND university_year.num_students > 50000",
        "retrieved": [
            8070
        ],
        "token_usage": {
            "tokens": 957,
            "cost": 0.00021375
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10"
    },
    {
        "sample_id": 8105,
        "pred_sql": "SELECT (SELECT num_students FROM university_year WHERE university_id = (SELECT id FROM university WHERE university_name = 'University of Ottawa') AND year = 2013) / (SELECT num_students FROM university_year WHERE university_id = (SELECT id FROM university WHERE university_name = 'Joseph Fourier University') AND year = 2013) AS ratio;",
        "retrieved": [
            8070
        ],
        "token_usage": {
            "tokens": 924,
            "cost": 0.00019664999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.university_name = 'University of Ottawa' THEN T1.num_students ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.university_name = 'Joseph Fourier University' THEN T1.num_students ELSE 0 END) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013"
    },
    {
        "sample_id": 8027,
        "pred_sql": "SELECT SUM(num_students) FROM university_year WHERE year = 2011",
        "retrieved": [
            7987
        ],
        "token_usage": {
            "tokens": 833,
            "cost": 0.00016005
        },
        "db_id": "university",
        "gold_sql": "SELECT SUM(num_students) FROM university_year WHERE year = 2011"
    },
    {
        "sample_id": 8048,
        "pred_sql": "SELECT university.country_id FROM university WHERE university.university_name = 'University of Tokyo'",
        "retrieved": [
            8019
        ],
        "token_usage": {
            "tokens": 894,
            "cost": 0.00018449999999999999
        },
        "db_id": "university",
        "gold_sql": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo'"
    },
    {
        "sample_id": 8057,
        "pred_sql": "SELECT CAST(university_year.num_students * university_year.pct_international_students AS FLOAT) / 100 AS international_students FROM university_year INNER JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'Harvard University' AND university_year.year = 2012",
        "retrieved": [
            8046
        ],
        "token_usage": {
            "tokens": 961,
            "cost": 0.0002094
        },
        "db_id": "university",
        "gold_sql": "SELECT CAST(T2.num_students * T2.pct_international_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Harvard University' AND T2.year = 2012"
    },
    {
        "sample_id": 3503,
        "pred_sql": "SELECT genre.genre_name FROM game INNER JOIN genre ON game.genre_id = genre.id WHERE game.game_name = '999: Nine Hours, Nine Persons, Nine Doors'",
        "retrieved": [
            3493
        ],
        "token_usage": {
            "tokens": 1201,
            "cost": 0.00024494999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '999: Nine Hours, Nine Persons, Nine Doors'"
    },
    {
        "sample_id": 3423,
        "pred_sql": "SELECT game.game_name FROM game_publisher INNER JOIN publisher ON game_publisher.publisher_id = publisher.id INNER JOIN game ON game_publisher.game_id = game.id WHERE publisher.publisher_name = 'American Softworks';",
        "retrieved": [
            3353
        ],
        "token_usage": {
            "tokens": 1225,
            "cost": 0.00024629999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'American Softworks'"
    },
    {
        "sample_id": 3461,
        "pred_sql": "SELECT (COUNT(CASE WHEN gp.release_year = '2014' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_ps4_games_2014 FROM game_platform AS gp INNER JOIN platform AS p ON gp.platform_id = p.id WHERE p.platform_name = 'PS4'",
        "retrieved": [
            3386
        ],
        "token_usage": {
            "tokens": 1290,
            "cost": 0.00027315
        },
        "db_id": "video_games",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id WHERE T1.release_year = 2014"
    },
    {
        "sample_id": 3490,
        "pred_sql": "SELECT publisher.publisher_name FROM game INNER JOIN game_publisher ON game.id = game_publisher.game_id INNER JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE game.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1345,
            "cost": 0.00029489999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'"
    },
    {
        "sample_id": 3309,
        "pred_sql": "SELECT COUNT(game.id) FROM game INNER JOIN genre AS T2 ON game.genre_id = T2.id WHERE T2.genre_name = 'action'",
        "retrieved": [
            3460
        ],
        "token_usage": {
            "tokens": 1183,
            "cost": 0.00024044999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Action'"
    },
    {
        "sample_id": 3334,
        "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id JOIN game ON game_publisher.game_id = game.id WHERE game.id = 10031;",
        "retrieved": [
            3323
        ],
        "token_usage": {
            "tokens": 1203,
            "cost": 0.0002529
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 10031"
    },
    {
        "sample_id": 3345,
        "pred_sql": "SELECT COUNT(T.game_name) FROM game AS T INNER JOIN game_publisher AS T2 ON T.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T.genre_id = T4.id WHERE T3.publisher_name = 'Microsoft Game Studios' AND T4.genre_name = 'Role-Playing'",
        "retrieved": [
            3320
        ],
        "token_usage": {
            "tokens": 1323,
            "cost": 0.0002889
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Role-Playing' AND T1.publisher_name = 'Microsoft Game Studios'"
    },
    {
        "sample_id": 3427,
        "pred_sql": "SELECT region_sales.num_sales * 100000 FROM region_sales WHERE region_sales.region_id = 2 AND region_sales.game_platform_id = '26'",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1183,
            "cost": 0.00022874999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.num_sales * 100000 AS nums_eur FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.game_platform_id = 26 AND T1.region_name = 'Europe'"
    },
    {
        "sample_id": 3424,
        "pred_sql": "SELECT COUNT(game.id) FROM game INNER JOIN genre AS T2 ON game.genre_id = T2.id WHERE T2.genre_name = 'strategy'",
        "retrieved": [
            3460
        ],
        "token_usage": {
            "tokens": 1177,
            "cost": 0.00023774999999999998
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Strategy' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id"
    },
    {
        "sample_id": 3507,
        "pred_sql": "SELECT game_platform.id FROM game_platform INNER JOIN region_sales ON game_platform.id = region_sales.game_platform_id INNER JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 'Europe' AND region_sales.num_sales < (SELECT AVG(num_sales) FROM region_sales WHERE region_id = (SELECT id FROM region WHERE region_name = 'Europe')) * 0.3",
        "retrieved": [
            3367
        ],
        "token_usage": {
            "tokens": 1262,
            "cost": 0.00027299999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT DISTINCT T3.platform_id FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T1.region_name = 'Europe' AND T2.num_sales * 100 * 100000 < ( SELECT AVG(T2.num_sales * 100000) * 30 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' )"
    },
    {
        "sample_id": 3448,
        "pred_sql": "SELECT COUNT(game.id) FROM game INNER JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'FIFA'",
        "retrieved": [
            3460
        ],
        "token_usage": {
            "tokens": 1164,
            "cost": 0.00022859999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%FIFA%' )"
    },
    {
        "sample_id": 3316,
        "pred_sql": "SELECT platform.platform_name FROM game_platform JOIN game ON game_platform.game_publisher_id = game.id JOIN platform ON game_platform.platform_id = platform.id WHERE game.game_name = 'Panzer Tactics' AND game_platform.release_year = '2007';",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1169,
            "cost": 0.00023879999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007"
    },
    {
        "sample_id": 3381,
        "pred_sql": "SELECT release_year FROM game_platform WHERE game_publisher_id IN (SELECT id FROM game_publisher WHERE game_id IN (SELECT id FROM game WHERE game_name = 'Adventure Island'))",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1124,
            "cost": 0.0002136
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.release_year FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'"
    },
    {
        "sample_id": 3357,
        "pred_sql": "SELECT release_year FROM game_platform WHERE id BETWEEN '1' AND '10'",
        "retrieved": [
            3378
        ],
        "token_usage": {
            "tokens": 1119,
            "cost": 0.000207
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.release_year FROM game_platform AS T WHERE T.id BETWEEN 1 AND 10"
    },
    {
        "sample_id": 3411,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN genre.genre_name = 'sports' THEN game.id ELSE NULL END) AS FLOAT) * 100 / COUNT(game.id) AS percentage FROM game INNER JOIN genre ON game.genre_id = genre.id",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1240,
            "cost": 0.00023955
        },
        "db_id": "video_games",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id"
    },
    {
        "sample_id": 3335,
        "pred_sql": "SELECT publisher.publisher_name FROM (SELECT publisher.publisher_name, COUNT(DISTINCT game.id) AS game_count FROM game INNER JOIN game_publisher ON game.id = game_publisher.game_id INNER JOIN publisher ON game_publisher.publisher_id = publisher.id GROUP BY publisher.publisher_name ORDER BY game_count DESC LIMIT 1) AS t",
        "retrieved": [
            3319
        ],
        "token_usage": {
            "tokens": 1300,
            "cost": 0.0002742
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3308,
        "pred_sql": "SELECT g.game_name FROM game AS g INNER JOIN genre AS ge ON g.genre_id = ge.id WHERE ge.id = (SELECT genre_id FROM game WHERE game_name = '3D Lemmings')",
        "retrieved": [
            3353
        ],
        "token_usage": {
            "tokens": 1211,
            "cost": 0.00023519999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.game_name FROM game AS T1 WHERE T1.genre_id = ( SELECT T.genre_id FROM game AS T WHERE T.game_name = '3D Lemmings' )"
    },
    {
        "sample_id": 3473,
        "pred_sql": "SELECT DISTINCT game_publisher.game_id FROM game_publisher WHERE game_publisher.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Bethesda Softworks')",
        "retrieved": [
            3323
        ],
        "token_usage": {
            "tokens": 1138,
            "cost": 0.00021299999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Bethesda Softworks'"
    },
    {
        "sample_id": 3347,
        "pred_sql": "SELECT DISTINCT platform.platform_name FROM game_platform INNER JOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id INNER JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Codemasters' AND game_platform.release_year = '2004'",
        "retrieved": [
            3349
        ],
        "token_usage": {
            "tokens": 1270,
            "cost": 0.00027509999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T4.platform_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T3.release_year = 2004 AND T1.publisher_name = 'Codemasters'"
    },
    {
        "sample_id": 3449,
        "pred_sql": "SELECT platform.platform_name, SUM(region_sales.num_sales * 100000) AS total_sales FROM region_sales INNER JOIN game_platform ON region_sales.game_platform_id = game_platform.id INNER JOIN platform ON game_platform.platform_id = platform.id INNER JOIN region ON region_sales.region_id = region.id WHERE region.region_name = 'Europe' GROUP BY platform.platform_name ORDER BY total_sales DESC LIMIT 1;",
        "retrieved": [
            3386
        ],
        "token_usage": {
            "tokens": 1361,
            "cost": 0.0003207
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3428,
        "pred_sql": "SELECT COUNT(DISTINCT game.id) FROM game INNER JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE game_platform.release_year = '2001'",
        "retrieved": [
            3320
        ],
        "token_usage": {
            "tokens": 1257,
            "cost": 0.00024885
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(id) FROM game_platform AS T WHERE T.release_year = 2001"
    },
    {
        "sample_id": 3382,
        "pred_sql": "SELECT COUNT(id) FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'Puzzle')",
        "retrieved": [
            3320
        ],
        "token_usage": {
            "tokens": 1197,
            "cost": 0.0002151
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Puzzle'"
    },
    {
        "sample_id": 3419,
        "pred_sql": "SELECT T.publisher_name FROM (SELECT publisher.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Action' GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T1.id) DESC LIMIT 1) AS t",
        "retrieved": [
            3319
        ],
        "token_usage": {
            "tokens": 1373,
            "cost": 0.00031800000000000003
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.publisher_name FROM ( SELECT T4.publisher_name, COUNT(DISTINCT T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id INNER JOIN game_publisher AS T3 ON T2.id = T3.game_id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T1.genre_name = 'Action' GROUP BY T4.publisher_name ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3501,
        "pred_sql": "SELECT game_platform.platform_id FROM game_platform JOIN game ON game_platform.game_publisher_id = game.id WHERE game.game_name = 'Airborne Troops: Countdown to D-Day'",
        "retrieved": [
            3324
        ],
        "token_usage": {
            "tokens": 1205,
            "cost": 0.00025364999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.platform_id FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Airborne Troops: Countdown to D-Day'"
    },
    {
        "sample_id": 3474,
        "pred_sql": "SELECT COUNT(DISTINCT game_publisher.game_id) FROM game_publisher WHERE game_publisher.publisher_id IN (SELECT publisher.id FROM publisher WHERE publisher.publisher_name IN ('Capcom', 'Sony Computer Entertainment'))",
        "retrieved": [
            3323
        ],
        "token_usage": {
            "tokens": 1178,
            "cost": 0.0002352
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')"
    },
    {
        "sample_id": 3462,
        "pred_sql": "SELECT SUM(region_sales.num_sales) * 100000 AS total_sales FROM region_sales WHERE region_sales.region_id = 4",
        "retrieved": [
            3367
        ],
        "token_usage": {
            "tokens": 1188,
            "cost": 0.000234
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.region_id = 4"
    },
    {
        "sample_id": 3453,
        "pred_sql": "SELECT region.region_name FROM region INNER JOIN region_sales AS T2 ON region.id = T2.region_id GROUP BY region.region_name ORDER BY SUM(num_sales * 100000) DESC LIMIT 1",
        "retrieved": [
            3367
        ],
        "token_usage": {
            "tokens": 1233,
            "cost": 0.00026145
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.region_name FROM ( SELECT T2.region_name, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id GROUP BY T4.platform_name ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3500,
        "pred_sql": "SELECT DISTINCT p.publisher_name FROM publisher p INNER JOIN game_publisher gp ON p.id = gp.publisher_id INNER JOIN game_platform gpl ON gp.game_id = gpl.game_publisher_id INNER JOIN region_sales rs ON gpl.id = rs.game_platform_id WHERE rs.num_sales < 10000;",
        "retrieved": [
            3353
        ],
        "token_usage": {
            "tokens": 1290,
            "cost": 0.0002826
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.publisher_name FROM ( SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' AND T2.num_sales * 100000 < 10000 LIMIT 5 ) t"
    },
    {
        "sample_id": 3470,
        "pred_sql": "SELECT COUNT(DISTINCT game_publisher.publisher_id) FROM game_platform JOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id JOIN platform ON game_platform.platform_id = platform.id WHERE platform.platform_name = 'X360';",
        "retrieved": [
            3323
        ],
        "token_usage": {
            "tokens": 1198,
            "cost": 0.000249
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'"
    },
    {
        "sample_id": 3433,
        "pred_sql": "SELECT game.id, game.game_name FROM game INNER JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'adventure'",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1249,
            "cost": 0.00024404999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Adventure'"
    },
    {
        "sample_id": 3467,
        "pred_sql": "SELECT COUNT(DISTINCT game_publisher.publisher_id) FROM game_publisher JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id WHERE game_platform.release_year = '1984';",
        "retrieved": [
            3323
        ],
        "token_usage": {
            "tokens": 1182,
            "cost": 0.00023894999999999998
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T.game_publisher_id) FROM game_platform AS T WHERE T.release_year = 1984"
    },
    {
        "sample_id": 3374,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN platform.platform_name = 'PSP' THEN game.id ELSE NULL END) AS FLOAT) * 100 / COUNT(game.id) AS percentage_of_psp_games FROM game INNER JOIN game_platform ON game.id = game_platform.game_publisher_id INNER JOIN game_publisher ON game.id = game_publisher.game_id INNER JOIN region_sales ON game_platform.id = region_sales.game_platform_id WHERE game_platform.release_year = '2004'",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1351,
            "cost": 0.00030119999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.platform_name = 'PSP' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T2.release_year = 2004"
    },
    {
        "sample_id": 3452,
        "pred_sql": "SELECT genre.genre_name FROM game INNER JOIN genre ON game.genre_id = genre.id WHERE game.id = 119",
        "retrieved": [
            3493
        ],
        "token_usage": {
            "tokens": 1155,
            "cost": 0.00022049999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'"
    },
    {
        "sample_id": 3388,
        "pred_sql": "SELECT game.game_name FROM game JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE game_platform.release_year = '2011'",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1143,
            "cost": 0.00022544999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2011"
    },
    {
        "sample_id": 3390,
        "pred_sql": "SELECT g.game_name, gp.release_year FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_platform gp ON g.id = gp.game_publisher_id WHERE ge.genre_name = 'sports'",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1171,
            "cost": 0.0002409
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.game_name, T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' LIMIT 5"
    },
    {
        "sample_id": 3504,
        "pred_sql": "SELECT game_platform.release_year FROM game_platform INNER JOIN game ON game_platform.game_publisher_id = game.id WHERE game.id = 156",
        "retrieved": [
            3493
        ],
        "token_usage": {
            "tokens": 1161,
            "cost": 0.00022635
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id WHERE T2.game_id = 156"
    },
    {
        "sample_id": 3483,
        "pred_sql": "SELECT AVG(region_sales.num_sales * 100000) AS average_sales FROM region_sales WHERE region_sales.region_id = 3",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1192,
            "cost": 0.00023594999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT AVG(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 3"
    },
    {
        "sample_id": 3481,
        "pred_sql": "SELECT (SUM(CASE WHEN gp.release_year = '1990' THEN rs.num_sales * 100000 ELSE 0 END) - SUM(CASE WHEN gp.release_year = '2000' THEN rs.num_sales * 100000 ELSE 0 END)) AS sales_difference FROM game_platform AS gp INNER JOIN region_sales AS rs ON gp.id = rs.game_platform_id;",
        "retrieved": [
            3445
        ],
        "token_usage": {
            "tokens": 1251,
            "cost": 0.00026145
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(CASE WHEN T2.release_year = 2000 THEN T1.num_sales ELSE 0 END) - SUM(CASE WHEN T2.release_year = 1990 THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id"
    },
    {
        "sample_id": 3464,
        "pred_sql": "SELECT (SELECT SUM(num_sales) FROM region_sales WHERE region_id = 2) - (SELECT SUM(num_sales) FROM region_sales WHERE region_id = 3) AS sales_difference;",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1231,
            "cost": 0.00025665
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(CASE WHEN T.region_id = 2 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.region_id = 3 THEN T.num_sales ELSE 0 END) FROM region_sales t"
    },
    {
        "sample_id": 3393,
        "pred_sql": "WITH average_sales AS (SELECT AVG(num_sales * 100000) AS avg_sales FROM region_sales GROUP BY region_id), north_america_sales AS (SELECT num_sales * 100000 AS na_sales FROM region_sales WHERE region_id = 1 AND game_platform_id = 9577) SELECT (na_sales / avg_sales) * 100 AS percent_higher FROM north_america_sales, average_sales WHERE na_sales > avg_sales;",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1265,
            "cost": 0.00027435
        },
        "db_id": "video_games",
        "gold_sql": "SELECT (SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) - AVG(T1.num_sales)) * 100.0 / AVG(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T1.game_platform_id = 9577"
    },
    {
        "sample_id": 3480,
        "pred_sql": "SELECT SUM(region_sales.num_sales * 100000) AS total_sales FROM game_platform INNER JOIN region_sales ON game_platform.id = region_sales.game_platform_id WHERE game_platform.release_year = '2000'",
        "retrieved": [
            3445
        ],
        "token_usage": {
            "tokens": 1254,
            "cost": 0.00026504999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T2.release_year = 2000"
    },
    {
        "sample_id": 7055,
        "pred_sql": "SELECT ep.rate FROM employeepayhistory AS ep INNER JOIN employee AS e ON ep.businessentityid = e.businessentityid INNER JOIN person AS p ON e.businessentityid = p.businessentityid ORDER BY e.hiredate DESC LIMIT 1",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10601,
            "cost": 0.0016549499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.HireDate DESC LIMIT 1"
    },
    {
        "sample_id": 7455,
        "pred_sql": "SELECT (julianday(enddate) - julianday(startdate)) AS days_to_end FROM workorder WHERE workorderid = '425'",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10586,
            "cost": 0.0016518
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425"
    },
    {
        "sample_id": 7279,
        "pred_sql": "SELECT COUNT(*) FROM product WHERE productid IN (SELECT productid FROM productinventory WHERE quantity = 0)",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10600,
            "cost": 0.00165615
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(ProductID) FROM ProductVendor WHERE OnOrderQty = 0"
    },
    {
        "sample_id": 7108,
        "pred_sql": "SELECT COUNT(*) AS VendorCount\nFROM vendor\nWHERE preferredvendorstatus = 1 AND activeflag = 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10463,
            "cost": 0.0016175999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(*) FROM ProductVendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000"
    },
    {
        "sample_id": 7206,
        "pred_sql": "SELECT SUM(salesperson.bonus) AS total_bonus, SUM(salesperson.bonus) / SUM(salesperson.salesquota) * 100 AS bonus_percentage FROM salesperson WHERE salesperson.salesquota > 0 AND salesperson.salesquota IS NOT NULL AND strftime('%Y', salesperson.modifieddate) = '2013'",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10643,
            "cost": 0.0016819499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS REAL) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013'"
    },
    {
        "sample_id": 7295,
        "pred_sql": "SELECT vendor.purchasingwebserviceurl FROM vendor INNER JOIN productvendor ON vendor.businessentityid = productvendor.businessentityid INNER JOIN product ON productvendor.productid = product.productid WHERE product.name = 'Hex Nut 5'",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10588,
            "cost": 0.0016579499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T3.PurchasingWebServiceURL FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5'"
    },
    {
        "sample_id": 7274,
        "pred_sql": "SELECT vendor.name AS vendor_name, location.name AS location_name, product.productid, product.name AS product_name, (product.listprice - product.standardcost) AS profit_on_net, productvendor.averageleadtime FROM product INNER JOIN productvendor ON product.productid = productvendor.productid INNER JOIN vendor ON productvendor.businessentityid = vendor.businessentityid INNER JOIN location ON vendor.businessentityid = location.locationid WHERE product.productid = 843;",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10689,
            "cost": 0.0016951499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.AverageLeadTime, T1.LastReceiptCost - T1.StandardPrice, T4.AddressLine1, T4.AddressLine2 , T4.City, T4.PostalCode FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN BusinessEntityAddress AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN Address AS T4 ON T3.AddressID = T4.AddressID WHERE T1.ProductID = 843"
    },
    {
        "sample_id": 7120,
        "pred_sql": "SELECT firstname, birthdate FROM person WHERE businessentityid = '18'",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10556,
            "cost": 0.0016342499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.FirstName, T2.BirthDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 18"
    },
    {
        "sample_id": 7248,
        "pred_sql": "SELECT product.name, product.listprice FROM product ORDER BY product.listprice DESC LIMIT 5;",
        "retrieved": [
            7307
        ],
        "token_usage": {
            "tokens": 10571,
            "cost": 0.00164685
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT Name FROM Product ORDER BY ListPrice DESC LIMIT 5"
    },
    {
        "sample_id": 7110,
        "pred_sql": "SELECT lastname FROM person WHERE middlename LIKE 'C%'",
        "retrieved": [
            7414
        ],
        "token_usage": {
            "tokens": 10551,
            "cost": 0.00162405
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT LastName FROM Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%'"
    },
    {
        "sample_id": 7156,
        "pred_sql": "SELECT unitmeasurecode FROM billofmaterials WHERE componentid = '494' AND enddate IS NULL",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10543,
            "cost": 0.0016304999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.ComponentID = 494 AND T1.EndDate IS NULL GROUP BY T2.name"
    },
    {
        "sample_id": 7029,
        "pred_sql": "SELECT customer.customerid, SUM(salesorderheader.subtotal) AS total_subtotal\nFROM customer\nINNER JOIN salesorderheader ON customer.customerid = salesorderheader.customerid\nINNER JOIN salesperson ON salesorderheader.salespersonid = salesperson.businessentityid\nWHERE salesperson.bonus = (SELECT MAX(bonus) FROM salesperson)\nGROUP BY customer.customerid\nORDER BY total_subtotal DESC\nLIMIT 1;",
        "retrieved": [
            7193
        ],
        "token_usage": {
            "tokens": 10715,
            "cost": 0.00171435
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.CustomerID FROM SalesOrderHeader AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID ORDER BY T1.SubTotal DESC LIMIT 1"
    },
    {
        "sample_id": 7096,
        "pred_sql": "SELECT SUM(rejectedqty) AS total_rejected_products\nFROM purchaseorderdetail\nWHERE rejectedqty > 0;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10461,
            "cost": 0.0016195499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(T2.ScrappedQty) FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Trim length too long'"
    },
    {
        "sample_id": 7040,
        "pred_sql": "SELECT employeepayhistory.rate FROM employeepayhistory INNER JOIN employee ON employeepayhistory.businessentityid = employee.businessentityid WHERE employee.sickleavehours = (SELECT MIN(sickleavehours) FROM employee)",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10607,
            "cost": 0.0016594499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SickLeaveHours ASC LIMIT 1"
    },
    {
        "sample_id": 7124,
        "pred_sql": "SELECT COUNT(employee.businessentityid) FROM employeedepartmenthistory INNER JOIN department ON employeedepartmenthistory.departmentid = department.departmentid INNER JOIN employee ON employeedepartmenthistory.businessentityid = employee.businessentityid WHERE department.name = 'Finance'",
        "retrieved": [
            7422
        ],
        "token_usage": {
            "tokens": 10629,
            "cost": 0.0016613999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T1.Name = 'Finance'"
    },
    {
        "sample_id": 7211,
        "pred_sql": "SELECT SUM(quantity) AS total_sold\nFROM transactionhistory\nWHERE productid = '989' AND transactiondate >= '2013-08-01' AND transactiondate < '2013-09-01';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10519,
            "cost": 0.00165435
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(Quantity) FROM TransactionHistory WHERE TransactionDate LIKE '2013-08%' AND TransactionType = 'S' AND ProductID = 989"
    },
    {
        "sample_id": 7020,
        "pred_sql": "SELECT product.name, salesorderdetail.linetotal FROM product INNER JOIN salesorderdetail ON product.productid = salesorderdetail.productid WHERE product.class = 'L' ORDER BY salesorderdetail.linetotal DESC LIMIT 1;",
        "retrieved": [
            7012
        ],
        "token_usage": {
            "tokens": 10586,
            "cost": 0.0016535999999999996
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name, T2.LineTotal FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE Class = 'L' ORDER BY OrderQty * UnitPrice DESC LIMIT 1"
    },
    {
        "sample_id": 7439,
        "pred_sql": "SELECT listprice FROM product WHERE productid = '912'",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10543,
            "cost": 0.0016332
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = 912"
    },
    {
        "sample_id": 7060,
        "pred_sql": "SELECT COUNT(*) FROM employee AS e INNER JOIN employeepayhistory AS ep ON e.businessentityid = ep.businessentityid WHERE ep.rate > 35 AND e.sickleavehours > 10;",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10599,
            "cost": 0.00165285
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SickLeaveHours > 10 AND T1.Rate > 35"
    },
    {
        "sample_id": 7097,
        "pred_sql": "SELECT SUM(sod.orderqty) AS total_quantity\nFROM salesorderdetail AS sod\nINNER JOIN salesorderheader AS soh ON sod.salesorderid = soh.salesorderid\nWHERE soh.status = 1 AND soh.employeeid = 257;",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10615,
            "cost": 0.0016723499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(T2.OrderQty) FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID WHERE T1.Status = 1"
    },
    {
        "sample_id": 7317,
        "pred_sql": "SELECT e.businessentityid, e.loginid, ep.rate FROM employee AS e INNER JOIN employeepayhistory AS ep ON e.businessentityid = ep.businessentityid WHERE e.jobtitle != 'Chief Executive Officer' ORDER BY ep.rate DESC LIMIT 1;",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10624,
            "cost": 0.00166695
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.LastName FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle NOT LIKE 'Chief Executive Officer' ORDER BY T1.Rate DESC LIMIT 1"
    },
    {
        "sample_id": 7184,
        "pred_sql": "SELECT product.name FROM transactionhistory INNER JOIN product ON transactionhistory.productid = product.productid WHERE transactionhistory.transactiontype = 'P'",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10565,
            "cost": 0.0016472999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ProductID FROM Product WHERE ProductID IN ( SELECT ProductID FROM TransactionHistory WHERE TransactionType = 'P' )"
    },
    {
        "sample_id": 7320,
        "pred_sql": "SELECT vendor.name, (productvendor.lastreceiptcost - productvendor.standardprice) AS profit_on_net FROM productvendor INNER JOIN vendor ON productvendor.businessentityid = vendor.businessentityid WHERE productvendor.productid = '342' ORDER BY profit_on_net DESC LIMIT 1;",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10659,
            "cost": 0.0016843499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 342 ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1"
    },
    {
        "sample_id": 7081,
        "pred_sql": "SELECT AVG(purchaseorderdetail.unitprice * purchaseorderdetail.orderqty) AS average_cost\nFROM purchaseorderheader\nJOIN purchaseorderdetail ON purchaseorderheader.purchaseorderid = purchaseorderdetail.purchaseorderid\nWHERE purchaseorderheader.orderdate >= '2012-01-01' AND purchaseorderheader.orderdate < '2012-07-01';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10555,
            "cost": 0.0016763999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(ActualCost) AS REAL) / COUNT(TransactionID) FROM TransactionHistoryArchive WHERE TransactionType = 'P' AND TransactionDate >= '2012-01-01' AND TransactionDate < '2012-07-01'"
    },
    {
        "sample_id": 7386,
        "pred_sql": "SELECT person.firstname, person.lastname FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.gender = 'M' AND employee.maritalstatus = 'M' AND employee.jobtitle = 'Production Technician' ORDER BY employee.birthdate DESC LIMIT 10;",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10620,
            "cost": 0.0016739999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate DESC LIMIT 10"
    },
    {
        "sample_id": 7022,
        "pred_sql": "SELECT product.name, product.productline, product.listprice FROM product WHERE product.reorderpoint >= 100 ORDER BY product.name DESC;",
        "retrieved": [
            7012
        ],
        "token_usage": {
            "tokens": 10547,
            "cost": 0.0016315499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MinOrderQty = 100 ORDER BY T1.Name DESC"
    },
    {
        "sample_id": 7371,
        "pred_sql": "SELECT starttime FROM shift WHERE name = 'Night Shift';",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10568,
            "cost": 0.0016355999999999996
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT StartTime FROM Shift WHERE Name = 'Night'"
    },
    {
        "sample_id": 7242,
        "pred_sql": "SELECT employee.businessentityid, employee.rate FROM employeepayhistory AS employee ORDER BY employee.rate DESC LIMIT 1;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10497,
            "cost": 0.0016249499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' ORDER BY T2.Rate DESC LIMIT 1"
    },
    {
        "sample_id": 7440,
        "pred_sql": "SELECT * FROM workorder WHERE plannedcost != actualcost;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10476,
            "cost": 0.0016091999999999996
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CASE WHEN ActualCost = PlannedCost THEN 'No' ELSE 'Yes' END FROM WorkOrderRouting"
    },
    {
        "sample_id": 7063,
        "pred_sql": "SELECT employee.jobtitle FROM employee ORDER BY employee.birthdate LIMIT 1",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10515,
            "cost": 0.00161325
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1"
    },
    {
        "sample_id": 7330,
        "pred_sql": "SELECT salesperson.businessentityid, SUM(salesperson.salesytd) AS total_sales, salesperson.salesquota FROM salesperson INNER JOIN salespersonquotahistory ON salesperson.businessentityid = salespersonquotahistory.businessentityid GROUP BY salesperson.businessentityid ORDER BY total_sales DESC LIMIT 1;",
        "retrieved": [
            7193
        ],
        "token_usage": {
            "tokens": 10667,
            "cost": 0.00168915
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SalesYTD DESC LIMIT 1"
    },
    {
        "sample_id": 7018,
        "pred_sql": "SELECT p.name, p.productline \nFROM product p \nJOIN purchaseorderdetail pod ON p.productid = pod.productid \nJOIN purchaseorderheader poh ON pod.purchaseorderid = poh.purchaseorderid \nWHERE pod.orderqty >= 5000;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10540,
            "cost": 0.0016646999999999996
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999"
    },
    {
        "sample_id": 7126,
        "pred_sql": "SELECT COUNT(CASE WHEN a.city = 'Bothell' THEN 1 END) AS Bothell_Accounts, COUNT(CASE WHEN a.city = 'Kenmore' THEN 1 END) AS Kenmore_Accounts, sp.name AS State_Name FROM address a INNER JOIN stateprovince sp ON a.stateprovinceid = sp.stateprovinceid WHERE a.city IN ('Bothell', 'Kenmore') GROUP BY sp.name;",
        "retrieved": [
            7136
        ],
        "token_usage": {
            "tokens": 10642,
            "cost": 0.0016908
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(IIF(T1.city = 'Bothell', 1, 0)) - SUM(IIF(T1.city = 'Kenmore', 1, 0)) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode"
    },
    {
        "sample_id": 7197,
        "pred_sql": "SELECT COUNT(employee.businessentityid) AS EmployeeCount, employee.organizationlevel FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE person.suffix IS NULL GROUP BY employee.organizationlevel",
        "retrieved": [
            7189
        ],
        "token_usage": {
            "tokens": 10546,
            "cost": 0.0016354499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3"
    },
    {
        "sample_id": 7178,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM phonenumbertype WHERE name = 'Cell') * 100.0 / COUNT(*) AS percentage_cell_phone FROM phonenumbertype;",
        "retrieved": [
            7129
        ],
        "token_usage": {
            "tokens": 10550,
            "cost": 0.0016369499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Name = 'Cell' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Name) FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID"
    },
    {
        "sample_id": 7183,
        "pred_sql": "SELECT product.productid FROM product LEFT JOIN workorder ON product.productid = workorder.productid WHERE workorder.workorderid IS NULL;",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10563,
            "cost": 0.00164655
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ProductID FROM Product WHERE ProductID NOT IN ( SELECT T1.ProductID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID )"
    },
    {
        "sample_id": 7299,
        "pred_sql": "SELECT COUNT(*) FROM (SELECT product.productid FROM product INNER JOIN productvendor ON product.productid = productvendor.productid WHERE product.productline = 'M' GROUP BY product.productid HAVING COUNT(DISTINCT productvendor.businessentityid) > 2) AS vendor_count;",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10614,
            "cost": 0.0016586999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID GROUP BY T1.ProductID HAVING COUNT(T1.Name) > 2"
    },
    {
        "sample_id": 7334,
        "pred_sql": "SELECT vendor.businessentityid, vendor.name, productvendor.averageleadtime \nFROM productvendor \nINNER JOIN vendor ON productvendor.businessentityid = vendor.businessentityid \nWHERE productvendor.productid = '348' \nORDER BY productvendor.averageleadtime ASC \nLIMIT 1;",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10627,
            "cost": 0.00168315
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ProductID = 348 ORDER BY T1.AverageLeadTime ASC LIMIT 1"
    },
    {
        "sample_id": 7252,
        "pred_sql": "SELECT COUNT(DISTINCT employeedepartmenthistory.departmentid) FROM employeedepartmenthistory INNER JOIN employee ON employeedepartmenthistory.businessentityid = employee.businessentityid INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE person.firstname = 'Sheela' AND person.lastname = 'Ward' AND employeedepartmenthistory.startdate >= '2011-01-01' AND employeedepartmenthistory.enddate <= '2012-12-31'",
        "retrieved": [
            7422
        ],
        "token_usage": {
            "tokens": 10721,
            "cost": 0.0017089499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T3.Name) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'Sheela' AND T1.LastName = 'Word' AND STRFTIME('%Y', T3.ModifiedDate) BETWEEN '2011' AND '2012'"
    },
    {
        "sample_id": 7007,
        "pred_sql": "SELECT COUNT(*) FROM transactionhistory WHERE productid IN (SELECT productid FROM product WHERE productline = 'M')",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10538,
            "cost": 0.00161715
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'"
    },
    {
        "sample_id": 7336,
        "pred_sql": "SELECT d.name AS DepartmentName, AVG(julianday('now') - julianday(e.birthdate)) / 365.25 AS AverageAge\nFROM employee e\nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid\nJOIN department d ON edh.departmentid = d.departmentid\nGROUP BY d.name\nORDER BY AverageAge ASC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10561,
            "cost": 0.0016790999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.BirthDate) + 1 , T3.Name FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (BusinessEntityID) INNER JOIN Department AS T3 USING (DepartmentID) ORDER BY T1.BirthDate DESC LIMIT 1"
    },
    {
        "sample_id": 7407,
        "pred_sql": "SELECT store.name FROM store WHERE store.name = 'Valley Bicycle Specialists';",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10541,
            "cost": 0.0016198499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.AddressLine1, T2.AddressLine2 FROM BusinessEntityAddress AS T1 INNER JOIN Address AS T2 ON T1.AddressID = T2.AddressID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Valley Bicycle Specialists'"
    },
    {
        "sample_id": 7286,
        "pred_sql": "SELECT p.name\nFROM product p\nINNER JOIN productreview pr ON p.productid = pr.productid\nWHERE p.finishedgoodsflag = 1\nGROUP BY p.productid\nHAVING COUNT(pr.productreviewid) > 10;",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10642,
            "cost": 0.0016768499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.NAME FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T2.NAME ORDER BY COUNT(T1.comments) > 10"
    },
    {
        "sample_id": 7365,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM productmodelproductdescriptionculture INNER JOIN culture ON productmodelproductdescriptionculture.cultureid = culture.cultureid WHERE culture.name = 'Arabic') * 100.0 / (SELECT COUNT(*) FROM productmodelproductdescriptionculture) AS ArabicPercentage, (SELECT COUNT(*) FROM productmodelproductdescriptionculture INNER JOIN culture ON productmodelproductdescriptionculture.cultureid = culture.cultureid WHERE culture.name = 'Thai') * 100.0 / (SELECT COUNT(*) FROM productmodelproductdescriptionculture) AS ThaiPercentage, ((SELECT COUNT(*) FROM productmodelproductdescriptionculture INNER JOIN culture ON productmodelproductdescriptionculture.cultureid = culture.cultureid WHERE culture.name = 'Arabic') - (SELECT COUNT(*) FROM productmodelproductdescriptionculture INNER JOIN culture ON productmodelproductdescriptionculture.cultureid = culture.cultureid WHERE culture.name = 'Thai')) * 100.0 / (SELECT COUNT(*) FROM productmodelproductdescriptionculture) AS PercentageDifference",
        "retrieved": [
            7137
        ],
        "token_usage": {
            "tokens": 10739,
            "cost": 0.0017399999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID"
    },
    {
        "sample_id": 7457,
        "pred_sql": "SELECT product.standardcost FROM product WHERE product.productid = '847'",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10450,
            "cost": 0.0015958499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT StandardCost FROM ProductCostHistory WHERE ProductID = 847"
    },
    {
        "sample_id": 7050,
        "pred_sql": "SELECT COUNT(document.documentnode) FROM document WHERE document.documentsummary IS NULL",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10510,
            "cost": 0.0016093499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL"
    },
    {
        "sample_id": 7306,
        "pred_sql": "SELECT product.name FROM productreview INNER JOIN product ON productreview.productid = product.productid WHERE product.productline = 'M' GROUP BY product.productid ORDER BY AVG(productreview.rating) DESC LIMIT 1",
        "retrieved": [
            7307
        ],
        "token_usage": {
            "tokens": 10612,
            "cost": 0.00167145
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'M' GROUP BY T2.Name ORDER BY CAST(SUM(T1.Rating) AS REAL) / COUNT(T1.ProductID) DESC LIMIT 1"
    },
    {
        "sample_id": 7066,
        "pred_sql": "SELECT COUNT(person.businessentityid) FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.sickleavehours > 10 AND person.emailpromotion = 1",
        "retrieved": [
            7189
        ],
        "token_usage": {
            "tokens": 10592,
            "cost": 0.0016585499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10"
    },
    {
        "sample_id": 7192,
        "pred_sql": "SELECT salesperson.businessentityid, employee.hiredate FROM salesperson INNER JOIN employee ON salesperson.businessentityid = employee.businessentityid WHERE employee.hiredate < '2010-01-01';",
        "retrieved": [
            7193
        ],
        "token_usage": {
            "tokens": 10586,
            "cost": 0.0016396499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010"
    },
    {
        "sample_id": 7461,
        "pred_sql": "SELECT COUNT(*) FROM product INNER JOIN productphoto ON product.productid = productphoto.productphotoid WHERE productphoto.thumbnailphotofilename = 'roadster_black_small.gif';",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10611,
            "cost": 0.0016591499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(DISTINCT T2.ProductID) FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName = 'roadster_black_large.gif'"
    },
    {
        "sample_id": 7297,
        "pred_sql": "SELECT COUNT(*) FROM product INNER JOIN productvendor ON product.productid = productvendor.productid WHERE product.class = 'H' AND productvendor.preferredvendorstatus = 1;",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10603,
            "cost": 0.0016565999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 USING (ProductID) INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.PreferredVendorStatus = 1 AND T2.Class = 'M'"
    },
    {
        "sample_id": 7264,
        "pred_sql": "SELECT e.jobtitle, p.firstname || ' ' || p.lastname AS full_name FROM employee e INNER JOIN person p ON e.businessentityid = p.businessentityid ORDER BY e.hiredate LIMIT 1;",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10606,
            "cost": 0.0016556999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.JobTitle, T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.HireDate LIMIT 1"
    },
    {
        "sample_id": 7466,
        "pred_sql": "SELECT person.firstname, person.lastname FROM person INNER JOIN emailaddress ON person.businessentityid = emailaddress.businessentityid WHERE emailaddress.emailaddress = 'regina7@adventure-works.com'",
        "retrieved": [
            7236
        ],
        "token_usage": {
            "tokens": 10580,
            "cost": 0.0016427999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.LastName FROM EmailAddress AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailAddress = 'regina7@adventure-works.com'"
    },
    {
        "sample_id": 7442,
        "pred_sql": "SELECT product.name FROM product WHERE product.listprice > 1000;",
        "retrieved": [
            7012
        ],
        "token_usage": {
            "tokens": 10526,
            "cost": 0.00161985
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT DISTINCT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice > 1000"
    },
    {
        "sample_id": 7249,
        "pred_sql": "SELECT MIN(hiredate) AS first_hire_date FROM employee WHERE jobtitle = 'Accountant'",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10558,
            "cost": 0.0016332
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT MIN(HireDate) FROM Employee WHERE JobTitle = 'Accountant'"
    },
    {
        "sample_id": 7069,
        "pred_sql": "SELECT person.firstname FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.gender = 'M' AND person.namestyle = '0'",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10598,
            "cost": 0.0016603499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.Gender = 'M'"
    },
    {
        "sample_id": 7324,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN p.persontype = 'SP' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(p.businessentityid) AS sales_rep_percentage FROM person AS p INNER JOIN employee AS e ON p.businessentityid = e.businessentityid",
        "retrieved": [
            7137
        ],
        "token_usage": {
            "tokens": 10629,
            "cost": 0.0016735499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee"
    },
    {
        "sample_id": 7195,
        "pred_sql": "SELECT AVG(employee.vacationhours) AS average_vacation_hours FROM salesperson INNER JOIN employee ON salesperson.businessentityid = employee.businessentityid;",
        "retrieved": [
            7193
        ],
        "token_usage": {
            "tokens": 10563,
            "cost": 0.0016271999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'"
    },
    {
        "sample_id": 7315,
        "pred_sql": "SELECT employee.jobtitle, department.name FROM employee INNER JOIN employeedepartmenthistory ON employee.businessentityid = employeedepartmenthistory.businessentityid INNER JOIN department ON employeedepartmenthistory.departmentid = department.departmentid ORDER BY employee.birthdate LIMIT 1;",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10590,
            "cost": 0.00165375
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.JobTitle, T4.Name FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID ORDER BY T2.HireDate LIMIT 1"
    },
    {
        "sample_id": 7356,
        "pred_sql": "SELECT product.name, salesorderdetail.orderqty, salesorderheader.salesordernumber \nFROM salesorderdetail \nINNER JOIN salesorderheader ON salesorderdetail.salesorderid = salesorderheader.salesorderid \nINNER JOIN product ON salesorderdetail.productid = product.productid \nWHERE salesorderheader.salesordernumber = 43660;",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10581,
            "cost": 0.0016550999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesOrderID = 43660"
    },
    {
        "sample_id": 7251,
        "pred_sql": "SELECT v.businessentityid, v.name, pv.standardprice, pv.lastreceiptcost, (pv.lastreceiptcost - pv.standardprice) AS profit_on_net\nFROM vendor v\nJOIN productvendor pv ON v.businessentityid = pv.businessentityid\nWHERE pv.standardprice = (SELECT MAX(standardprice) FROM productvendor)\nLIMIT 1;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10552,
            "cost": 0.0016480499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1"
    },
    {
        "sample_id": 7287,
        "pred_sql": "SELECT reviewername FROM productreview INNER JOIN product ON productreview.productid = product.productid WHERE product.class = 'M' AND product.style = 'W' ORDER BY productreview.rating DESC",
        "retrieved": [
            7307
        ],
        "token_usage": {
            "tokens": 10568,
            "cost": 0.0016441499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.ReviewerName FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'M' AND T2.Style = 'W' AND T1.Rating = 5"
    },
    {
        "sample_id": 7450,
        "pred_sql": "SELECT product.name, product.standardcost FROM product WHERE product.productline = 'S' ORDER BY product.standardcost DESC LIMIT 1",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10562,
            "cost": 0.0016644
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.StandardCost FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Sport%'"
    },
    {
        "sample_id": 7410,
        "pred_sql": "SELECT p.firstname, p.lastname, pwd.passwordhash \nFROM person p \nJOIN password pwd ON p.businessentityid = pwd.businessentityid \nWHERE p.firstname = 'David' AND p.lastname = 'Bradley';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10482,
            "cost": 0.0016357499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.PasswordHash FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "sample_id": 7144,
        "pred_sql": "SELECT departmentid FROM department WHERE groupname = 'Sales and Marketing'",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10527,
            "cost": 0.0016244999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing'"
    },
    {
        "sample_id": 7077,
        "pred_sql": "SELECT (MAX(ep.rate) - AVG(ep.rate)) AS pay_difference\nFROM employeepayhistory AS ep\nINNER JOIN employee AS e ON ep.businessentityid = e.businessentityid\nINNER JOIN person AS p ON e.businessentityid = p.businessentityid\nWHERE e.maritalstatus = 'M' AND p.emailpromotion = 1;",
        "retrieved": [
            7189
        ],
        "token_usage": {
            "tokens": 10643,
            "cost": 0.0016877999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT MAX(T1.Rate) - SUM(T1.Rate) / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T2.EmailPromotion = 2 AND T3.MaritalStatus = 'M'"
    },
    {
        "sample_id": 7429,
        "pred_sql": "SELECT COUNT(p.productid) AS product_count \nFROM product p \nINNER JOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid \nINNER JOIN productmodel pm ON p.productmodelid = pm.productmodelid \nINNER JOIN specialofferproduct sop ON p.productid = sop.productid \nINNER JOIN specialoffer so ON sop.specialofferid = so.specialofferid \nWHERE ps.name = 'Clothing' AND so.description = 'LL Road Frame Sale';",
        "retrieved": [
            7168
        ],
        "token_usage": {
            "tokens": 10645,
            "cost": 0.0016840499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID INNER JOIN ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID INNER JOIN ProductCategory AS T5 ON T4.ProductCategoryID = T5.ProductCategoryID WHERE T1.Description = 'LL Road Frame Sale' AND T4.Name = 'Clothing'"
    },
    {
        "sample_id": 7188,
        "pred_sql": "SELECT s.businessentityid, (s.salesytd / s.salesquota) * 100 AS percentage_quota FROM salesperson s INNER JOIN salespersonquotahistory sh ON s.businessentityid = sh.businessentityid WHERE strftime('%Y', sh.quotadate) = '2013' ORDER BY percentage_quota DESC LIMIT 1;",
        "retrieved": [
            7193
        ],
        "token_usage": {
            "tokens": 10673,
            "cost": 0.00168915
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT BusinessEntityID FROM SalesPerson WHERE BusinessEntityID IN ( SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE STRFTIME('%Y', QuotaDate) = '2013' ) ORDER BY CAST(SalesLastYear AS REAL) / SalesQuota DESC LIMIT 1"
    },
    {
        "sample_id": 7296,
        "pred_sql": "SELECT vendor.name FROM vendor INNER JOIN productvendor ON vendor.businessentityid = productvendor.businessentityid INNER JOIN product ON productvendor.productid = product.productid WHERE product.name = 'Hex Nut 5' ORDER BY productvendor.standardprice ASC LIMIT 1;",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10590,
            "cost": 0.0016591499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T3.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice LIMIT 1"
    },
    {
        "sample_id": 7471,
        "pred_sql": "SELECT AVG(listprice - standardcost) AS average_profit_percentage FROM product;",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10541,
            "cost": 0.0016135499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT AVG((T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost) FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 7230,
        "pred_sql": "SELECT territoryid, COUNT(customerid) AS customer_count \nFROM customer \nGROUP BY territoryid \nORDER BY customer_count DESC \nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10505,
            "cost": 0.0016464
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT TerritoryID FROM Customer WHERE ModifiedDate < '2014-12-09' GROUP BY TerritoryID ORDER BY COUNT(TerritoryID) DESC LIMIT 1"
    },
    {
        "sample_id": 7454,
        "pred_sql": "SELECT COUNT(*) FROM product INNER JOIN productproductphoto ON product.productid = productproductphoto.productid WHERE productproductphoto.thumbnailphoto IS NOT NULL",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10580,
            "cost": 0.0016427999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(ProductID) FROM ProductProductPhoto WHERE ProductPhotoID != 1"
    },
    {
        "sample_id": 7181,
        "pred_sql": "SELECT SUM(workorder.stockedqty) AS total_stocked_quantity FROM workorder WHERE workorder.locationid = 40",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10546,
            "cost": 0.001635
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(*) FROM WorkOrderRouting AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.LocationID = T2.ProductAssemblyID INNER JOIN WorkOrder AS T3 ON T3.WorkOrderID = T1.WorkOrderID WHERE T1.LocationID = 40"
    },
    {
        "sample_id": 7016,
        "pred_sql": "SELECT product.name FROM product INNER JOIN purchaseorderdetail ON product.productid = purchaseorderdetail.productid WHERE purchaseorderdetail.receivedqty = 0",
        "retrieved": [
            7012
        ],
        "token_usage": {
            "tokens": 10567,
            "cost": 0.0016457999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = T2.ReceivedQty AND T2.RejectedQty <> 0"
    },
    {
        "sample_id": 7444,
        "pred_sql": "SELECT p.name \nFROM product p \nJOIN productinventory pi ON p.productid = pi.productid \nWHERE pi.locationid = '1' AND pi.shelf = 'L' AND pi.bin = '6';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10486,
            "cost": 0.0016340999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.LocationID = 1 AND T1.Shelf = 'L' AND T1.Bin = 6"
    },
    {
        "sample_id": 7011,
        "pred_sql": "SELECT productreview.productid, productreview.rating, productreview.comments FROM productreview WHERE productreview.reviewername LIKE 'J%';",
        "retrieved": [
            7012
        ],
        "token_usage": {
            "tokens": 10536,
            "cost": 0.0016235999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%'"
    },
    {
        "sample_id": 7111,
        "pred_sql": "SELECT COUNT(DISTINCT pv.businessentityid) AS vendor_count\nFROM productvendor pv\nWHERE pv.averageleadtime = 25;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10457,
            "cost": 0.0016166999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(DISTINCT BusinessEntityID) FROM ProductVendor WHERE AverageLeadTime = 25"
    },
    {
        "sample_id": 7054,
        "pred_sql": "SELECT COUNT(employee.businessentityid) FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.payfrequency = (SELECT MAX(payfrequency) FROM employeepayhistory) AND employee.maritalstatus = 'M'",
        "retrieved": [
            7189
        ],
        "token_usage": {
            "tokens": 10566,
            "cost": 0.0016465499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )"
    },
    {
        "sample_id": 7364,
        "pred_sql": "SELECT sp.name FROM stateprovince sp JOIN salesterritory st ON sp.territoryid = st.territoryid JOIN customer c ON st.territoryid = c.territoryid WHERE c.storeid = (SELECT storeid FROM store WHERE name = 'Racine')",
        "retrieved": [],
        "token_usage": {
            "tokens": 10532,
            "cost": 0.00166395
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T1.City = 'Racine'"
    },
    {
        "sample_id": 7372,
        "pred_sql": "SELECT product.style, product.weight, COUNT(product.productid) AS production_count \nFROM product \nGROUP BY product.style, product.weight \nORDER BY production_count DESC \nLIMIT 1;",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10638,
            "cost": 0.0016595999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT Weight FROM Product WHERE WeightUnitMeasureCode = 'LB' GROUP BY Weight ORDER BY COUNT(Style) DESC LIMIT 1"
    },
    {
        "sample_id": 7085,
        "pred_sql": "SELECT AVG(totaldue) FROM purchaseorderheader WHERE status = 2",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10518,
            "cost": 0.00161955
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(TotalDue) / COUNT(TotalDue) FROM PurchaseOrderHeader WHERE Status = 2"
    },
    {
        "sample_id": 7291,
        "pred_sql": "SELECT pd.description \nFROM product AS p \nJOIN productdescription AS pd ON p.productid = pd.productdescriptionid \nWHERE p.name = 'Headset Ball Bearings';",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10559,
            "cost": 0.0016301999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Description FROM ProductDescription AS T1 INNER JOIN Product AS T2 WHERE T2.Name = 'Headset Ball Bearings' AND T1.productDescriptionID = T2.ProductID"
    },
    {
        "sample_id": 7319,
        "pred_sql": "SELECT p.name FROM product p\nJOIN salesorderdetail sd ON p.productid = sd.productid\nJOIN salesorderheader so ON sd.salesorderid = so.salesorderid\nJOIN store s ON so.storeid = s.businessentityid\nJOIN salesterritory st ON s.territoryid = st.territoryid\nJOIN countryregion cr ON st.countryregioncode = cr.countryregioncode\nWHERE cr.name = 'Australia' AND s.name LIKE '%Bike Retailer%'\nORDER BY p.productid;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10599,
            "cost": 0.0017036999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T3.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Name = 'Australia Bike Retailer'"
    },
    {
        "sample_id": 7068,
        "pred_sql": "SELECT person.firstname, person.lastname, employee.jobtitle, employee.hiredate, employee.birthdate FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.jobtitle = 'Sales Person' ORDER BY employee.birthdate LIMIT 1",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10584,
            "cost": 0.0016506000000000001
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.AdditionalContactInfo FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE PersonType = 'SP' ORDER BY T1.BirthDate ASC LIMIT 1"
    },
    {
        "sample_id": 7187,
        "pred_sql": "SELECT COUNT(employee.businessentityid) FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE person.gender = 'M' AND person.emailpromotion = 0",
        "retrieved": [
            7189
        ],
        "token_usage": {
            "tokens": 10568,
            "cost": 0.00164955
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0 AND T1.Gender = 'M'"
    },
    {
        "sample_id": 7229,
        "pred_sql": "SELECT vendor.businessentityid, vendor.name, vendor.purchasingwebserviceurl FROM vendor WHERE vendor.activeflag = 1 AND vendor.purchasingwebserviceurl IS NOT NULL",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10599,
            "cost": 0.0016631999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT Name FROM Vendor WHERE ActiveFlag = 1"
    },
    {
        "sample_id": 7443,
        "pred_sql": "SELECT product.name, product.listprice - product.standardcost AS profit, productreview.rating FROM product INNER JOIN productreview ON product.productid = productreview.productid WHERE product.listprice - product.standardcost = (SELECT MAX(listprice - standardcost) FROM product)",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10606,
            "cost": 0.0016547999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.ProductID FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.ListPrice - T2.StandardCost DESC LIMIT 1"
    },
    {
        "sample_id": 7103,
        "pred_sql": "SELECT AVG(orderqty) AS average_ordered_quantity\nFROM salesorderdetail sod\nJOIN salesorderheader soh ON sod.salesorderid = soh.salesorderid\nJOIN shipmethod sm ON soh.shipmethodid = sm.shipmethodid\nWHERE sm.name = 'Cargo Transport 5';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10538,
            "cost": 0.0016644
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.ShipMethodID = 5, T3.OrderQty, 0)) AS REAL) / COUNT(T3.ProductID) FROM ShipMethod AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.ShipMethodID = T2.ShipMethodID INNER JOIN PurchaseOrderDetail AS T3 ON T2.PurchaseOrderID = T3.PurchaseOrderID"
    },
    {
        "sample_id": 7104,
        "pred_sql": "SELECT salestaxrate.name FROM salestaxrate JOIN stateprovince ON salestaxrate.stateprovinceid = stateprovince.stateprovinceid JOIN salesterritory ON stateprovince.countryregioncode = salesterritory.countryregioncode JOIN salesperson ON salesterritory.territoryid = salesperson.territoryid WHERE salesperson.salesytd = (SELECT MAX(salesytd) FROM salesperson) AND salesperson.saleslastyear < salesperson.salesytd",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10652,
            "cost": 0.0016864499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM SalesTerritory AS T1 INNER JOIN StateProvince AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode INNER JOIN SalesTaxRate AS T3 ON T2.StateProvinceID = T3.StateProvinceID ORDER BY (T1.SalesYTD - T1.SalesLastYear) / T1.SalesLastYear DESC LIMIT 1"
    },
    {
        "sample_id": 7285,
        "pred_sql": "SELECT COUNT(*) FROM product INNER JOIN productreview ON product.productid = productreview.productid WHERE product.makeflag = 1 AND product.finishedgoodsflag = 1 GROUP BY product.productid HAVING COUNT(productreview.productreviewid) > 10",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10620,
            "cost": 0.0016614
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 USING (ProductID) WHERE T2.FinishedGoodsFlag = 1 AND T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY COUNT(T1.COMMENTS) > 10"
    },
    {
        "sample_id": 7159,
        "pred_sql": "SELECT productphoto.thumbnailphoto FROM productphoto INNER JOIN product ON product.productid = productphoto.productid WHERE product.productid = 1",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10551,
            "cost": 0.001638
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.ThumbNailPhoto FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T2.ProductID = 1"
    },
    {
        "sample_id": 7030,
        "pred_sql": "SELECT SUM(sod.linetotal) AS total_price \nFROM salesorderdetail AS sod \nINNER JOIN salesorderheader AS soh ON sod.salesorderid = soh.salesorderid \nWHERE soh.salesorderid = 46625 \nAND sod.orderqty BETWEEN 11 AND 14 \nAND sod.productid = 716;",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10625,
            "cost": 0.0016769999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.UnitPrice * T2.OrderQty FROM SpecialOffer AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'Volume Discount 11 to 14' AND T1.SpecialOfferID = 2 AND T2.ProductID = 716 AND T2.SalesOrderID = 46625"
    },
    {
        "sample_id": 7057,
        "pred_sql": "SELECT MAX(employeepayhistory.rate) AS highest_pay_rate FROM employeepayhistory INNER JOIN employee ON employeepayhistory.businessentityid = employee.businessentityid WHERE employee.salariedflag = 1",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10651,
            "cost": 0.0016858499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SalariedFlag = 1 ORDER BY T1.Rate DESC LIMIT 1"
    },
    {
        "sample_id": 7169,
        "pred_sql": "SELECT vendor.creditrating FROM vendor WHERE vendor.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10573,
            "cost": 0.0016403999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'"
    },
    {
        "sample_id": 7284,
        "pred_sql": "SELECT product.productid, COUNT(productreview.productreviewid) AS review_count\nFROM product\nINNER JOIN productreview ON product.productid = productreview.productid\nWHERE product.finishedgoodsflag = 1\nGROUP BY product.productid\nORDER BY review_count DESC\nLIMIT 1;",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10660,
            "cost": 0.0016898999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Comments FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.Comments ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1"
    },
    {
        "sample_id": 7906,
        "pred_sql": "SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.gnp < 1000 AND countrylanguage.language = 'Dutch'",
        "retrieved": [
            7851
        ],
        "token_usage": {
            "tokens": 1051,
            "cost": 0.0002328
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GNP < 1000 AND T1.IsOfficial = 'T' AND T1.Language = 'Dutch'"
    },
    {
        "sample_id": 7860,
        "pred_sql": "SELECT SUM(country.population * countrylanguage.percentage / 100) AS chinese_speakers_percentage FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'China' AND countrylanguage.language = 'Chinese';",
        "retrieved": [
            7832
        ],
        "token_usage": {
            "tokens": 994,
            "cost": 0.00022064999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese'"
    },
    {
        "sample_id": 7821,
        "pred_sql": "SELECT AVG(population) AS average_population FROM city WHERE district = 'Karnataka';",
        "retrieved": [
            7869
        ],
        "token_usage": {
            "tokens": 916,
            "cost": 0.00018419999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT AVG(Population) FROM City WHERE District = 'Karnataka' GROUP BY ID"
    },
    {
        "sample_id": 7883,
        "pred_sql": "SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM city INNER JOIN country ON city.countrycode = country.code WHERE city.population IN (SELECT population FROM city ORDER BY population DESC LIMIT 5) GROUP BY country.name ORDER BY language_count DESC LIMIT 1;",
        "retrieved": [
            7834
        ],
        "token_usage": {
            "tokens": 1001,
            "cost": 0.00021945
        },
        "db_id": "world",
        "gold_sql": "SELECT Name FROM ( SELECT T1.Name, T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode GROUP BY T1.Name, T1.Population, T2.Language ORDER BY T1.Population DESC ) AS T3 GROUP BY t3.Name ORDER BY COUNT(Language) DESC LIMIT 1"
    },
    {
        "sample_id": 7837,
        "pred_sql": "SELECT district FROM city WHERE population = (SELECT MIN(population) FROM city)",
        "retrieved": [
            7869
        ],
        "token_usage": {
            "tokens": 917,
            "cost": 0.00018389999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT District FROM City ORDER BY Population LIMIT 1"
    },
    {
        "sample_id": 7875,
        "pred_sql": "SELECT countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode ORDER BY country.population ASC LIMIT 1;",
        "retrieved": [
            7842
        ],
        "token_usage": {
            "tokens": 935,
            "cost": 0.00018524999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 1"
    },
    {
        "sample_id": 7888,
        "pred_sql": "SELECT country.gnp FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Shanghai'",
        "retrieved": [
            7855
        ],
        "token_usage": {
            "tokens": 907,
            "cost": 0.00017879999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT CAST((T1.GNP - T1.GNPOld) AS REAL) / T1.GNPOld FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Shanghai'"
    },
    {
        "sample_id": 7865,
        "pred_sql": "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Italy') AND isofficial = 'F';",
        "retrieved": [
            7820
        ],
        "token_usage": {
            "tokens": 912,
            "cost": 0.0001746
        },
        "db_id": "world",
        "gold_sql": "SELECT SUM(CASE WHEN T2.IsOfficial = 'F' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Italy'"
    },
    {
        "sample_id": 7836,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN countrylanguage.language = 'English' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(country.code) AS percentage FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'North America'",
        "retrieved": [
            7851
        ],
        "token_usage": {
            "tokens": 1019,
            "cost": 0.00021944999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode"
    },
    {
        "sample_id": 7916,
        "pred_sql": "SELECT DISTINCT country.name FROM country INNER JOIN city ON country.code = city.countrycode WHERE city.population BETWEEN 140000 AND 150000 AND country.lifeexpectancy > (SELECT AVG(lifeexpectancy) FROM country) * 0.8;",
        "retrieved": [
            7867
        ],
        "token_usage": {
            "tokens": 1025,
            "cost": 0.00023699999999999996
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population BETWEEN 140000 AND 150000 GROUP BY T2.Name, LifeExpectancy HAVING LifeExpectancy < ( SELECT AVG(LifeExpectancy) FROM Country ) * 0.8"
    },
    {
        "sample_id": 7823,
        "pred_sql": "SELECT COUNT(DISTINCT country.code) AS country_count FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Portuguese' AND countrylanguage.isofficial = 'T'",
        "retrieved": [
            7820
        ],
        "token_usage": {
            "tokens": 971,
            "cost": 0.00021134999999999996
        },
        "db_id": "world",
        "gold_sql": "SELECT SUM(CASE WHEN Language = 'Portuguese' THEN 1 ELSE 0 END) FROM CountryLanguage"
    },
    {
        "sample_id": 7846,
        "pred_sql": "SELECT city.name, city.district FROM country INNER JOIN city ON country.code = city.countrycode WHERE country.localname = 'Hajastan'",
        "retrieved": [
            7849
        ],
        "token_usage": {
            "tokens": 998,
            "cost": 0.00022709999999999996
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name, T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = 'Hajastan'"
    },
    {
        "sample_id": 7843,
        "pred_sql": "SELECT country.surfacearea FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Sutton Coldfield'",
        "retrieved": [
            7892
        ],
        "token_usage": {
            "tokens": 899,
            "cost": 0.0001803
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.SurfaceArea FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Sutton Coldfield'"
    },
    {
        "sample_id": 7872,
        "pred_sql": "SELECT SUM(country.surfacearea) * 100.0 / (SELECT SUM(surfacearea) FROM country) AS percentage_surface_area FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'",
        "retrieved": [
            7832
        ],
        "token_usage": {
            "tokens": 1037,
            "cost": 0.00024419999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.Language = 'Chinese', T1.SurfaceArea, 0)) AS REAL) * 100 / SUM(T1.SurfaceArea) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode"
    },
    {
        "sample_id": 7838,
        "pred_sql": "SELECT continent FROM country WHERE surfacearea = (SELECT MIN(surfacearea) FROM country)",
        "retrieved": [
            7892
        ],
        "token_usage": {
            "tokens": 907,
            "cost": 0.000186
        },
        "db_id": "world",
        "gold_sql": "SELECT Continent FROM Country ORDER BY SurfaceArea LIMIT 1"
    },
    {
        "sample_id": 7905,
        "pred_sql": "SELECT DISTINCT city.district FROM country INNER JOIN city ON country.code = city.countrycode WHERE country.surfacearea = (SELECT MIN(surfacearea) FROM country)",
        "retrieved": [
            7849
        ],
        "token_usage": {
            "tokens": 930,
            "cost": 0.00018854999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.SurfaceArea ASC LIMIT 1"
    },
    {
        "sample_id": 7874,
        "pred_sql": "SELECT country.name FROM country ORDER BY country.population DESC LIMIT 1",
        "retrieved": [
            7869
        ],
        "token_usage": {
            "tokens": 947,
            "cost": 0.0002028
        },
        "db_id": "world",
        "gold_sql": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1"
    },
    {
        "sample_id": 7898,
        "pred_sql": "SELECT DISTINCT city.district FROM city JOIN country ON city.countrycode = country.code WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country)",
        "retrieved": [
            7892
        ],
        "token_usage": {
            "tokens": 909,
            "cost": 0.00018629999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = ( SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1 )"
    },
    {
        "sample_id": 7910,
        "pred_sql": "SELECT country.lifeexpectancy FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Japanese' AND countrylanguage.isofficial = 'T'",
        "retrieved": [
            7828
        ],
        "token_usage": {
            "tokens": 1046,
            "cost": 0.0002406
        },
        "db_id": "world",
        "gold_sql": "SELECT AVG(T2.LifeExpectancy) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Japanese'"
    },
    {
        "sample_id": 7839,
        "pred_sql": "SELECT country.headofstate FROM country INNER JOIN city ON country.code = city.countrycode ORDER BY city.population DESC LIMIT 1;",
        "retrieved": [
            7864
        ],
        "token_usage": {
            "tokens": 939,
            "cost": 0.0001926
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "sample_id": 7909,
        "pred_sql": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.surfacearea > 7000000;",
        "retrieved": [
            7892
        ],
        "token_usage": {
            "tokens": 922,
            "cost": 0.00019229999999999999
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name, T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea > 7000000"
    },
    {
        "sample_id": 2098,
        "pred_sql": "SELECT country.longname FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE countrynotes.seriescode = 'SM.POP.TOTL' AND countrynotes.description = 'Estimates are derived from data on foreign-born population.'",
        "retrieved": [
            2150
        ],
        "token_usage": {
            "tokens": 1808,
            "cost": 0.00037065
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'"
    },
    {
        "sample_id": 2135,
        "pred_sql": "SELECT series.seriescode FROM series WHERE source = 'International Monetary Fund, Balance of Payments Statistics Yearbook and data files' AND year = '2005'",
        "retrieved": [
            2158
        ],
        "token_usage": {
            "tokens": 1711,
            "cost": 0.00031424999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.Seriescode, T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year LIKE '%2005%' AND T2.Source LIKE 'International Monetary Fund%'"
    },
    {
        "sample_id": 2155,
        "pred_sql": "SELECT DISTINCT country.countrycode, country.currencyunit, country.incomegroup FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE country.currencyunit = 'Australian dollar' AND country.incomegroup = 'Middle income'",
        "retrieved": [
            2160
        ],
        "token_usage": {
            "tokens": 1778,
            "cost": 0.00034634999999999993
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.CountryCode, T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Australian dollar' AND T1.IncomeGroup = 'Lower middle income'"
    },
    {
        "sample_id": 2163,
        "pred_sql": "SELECT country.tablename, country.currencyunit FROM country WHERE country.currencyunit = 'Euro'",
        "retrieved": [
            2158
        ],
        "token_usage": {
            "tokens": 1660,
            "cost": 0.00028859999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'"
    },
    {
        "sample_id": 2199,
        "pred_sql": "SELECT country.shortname, MAX(indicators.value) AS max_emissions FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.indicatorname = 'CO2 emissions from transport' GROUP BY country.shortname ORDER BY max_emissions DESC LIMIT 1;",
        "retrieved": [
            2146
        ],
        "token_usage": {
            "tokens": 1836,
            "cost": 0.00037035
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'CO2 emissions FROM transport%' ORDER BY Value DESC LIMIT 1"
    },
    {
        "sample_id": 2188,
        "pred_sql": "SELECT DISTINCT country.shortname FROM indicators INNER JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.value = 'Estimate'",
        "retrieved": [
            2122
        ],
        "token_usage": {
            "tokens": 1706,
            "cost": 0.00030944999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are based on regression.'"
    },
    {
        "sample_id": 2100,
        "pred_sql": "SELECT footnotes.year FROM footnotes INNER JOIN country ON footnotes.countrycode = country.countrycode WHERE footnotes.seriescode = 'AG.LND.FRST.K2' AND country.shortname = 'Aruba'",
        "retrieved": [
            2093
        ],
        "token_usage": {
            "tokens": 1721,
            "cost": 0.0003162
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'"
    },
    {
        "sample_id": 2240,
        "pred_sql": "SELECT country.shortname, countrynotes.description FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE countrynotes.seriescode = 'BX.KLT.DINV.CD.WD'",
        "retrieved": [
            2093
        ],
        "token_usage": {
            "tokens": 1798,
            "cost": 0.00036419999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Seriescode = 'BX.KLT.DINV.CD.WD'"
    },
    {
        "sample_id": 2124,
        "pred_sql": "SELECT DISTINCT series.source FROM footnotes INNER JOIN series AS T2 ON footnotes.seriescode = T2.seriescode INNER JOIN country AS T3 ON footnotes.countrycode = T3.countrycode WHERE T3.region = 'North America' AND T2.indicatorname = 'children who finished primary school education'",
        "retrieved": [
            2122
        ],
        "token_usage": {
            "tokens": 1760,
            "cost": 0.00033779999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T1.Region = 'North America' AND T2.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'"
    },
    {
        "sample_id": 2138,
        "pred_sql": "SELECT indicators.indicatorname FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE country.region = 'Arab World' AND indicators.value > 50 AND indicators.year = '1960';",
        "retrieved": [
            2237
        ],
        "token_usage": {
            "tokens": 1859,
            "cost": 0.00035219999999999994
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50"
    },
    {
        "sample_id": 2182,
        "pred_sql": "SELECT shortname FROM country WHERE vitalregistrationcomplete = 'Yes'",
        "retrieved": [
            2202
        ],
        "token_usage": {
            "tokens": 1704,
            "cost": 0.00031814999999999995
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes'"
    },
    {
        "sample_id": 2149,
        "pred_sql": "SELECT country.seriescode FROM country WHERE country.currencyunit = 'Euro'",
        "retrieved": [
            2158
        ],
        "token_usage": {
            "tokens": 1653,
            "cost": 0.0002844
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Euro'"
    },
    {
        "sample_id": 2165,
        "pred_sql": "SELECT country.countrycode, country.alpha2code FROM country WHERE country.region = 'Asia' AND country.incomegroup = 'High income'",
        "retrieved": [
            2106
        ],
        "token_usage": {
            "tokens": 1701,
            "cost": 0.00031725
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT CountryCode, Region FROM Country WHERE (IncomeGroup = 'High income: OECD' OR IncomeGroup = 'High income: nonOECD') AND Region LIKE '%Asia%'"
    },
    {
        "sample_id": 2154,
        "pred_sql": "SELECT series.seriescode, country.countrycode FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE country.region = 'Latin America & Caribbean' AND countrynotes.seriescode = 'SM.POP.TOTL'",
        "retrieved": [
            2093
        ],
        "token_usage": {
            "tokens": 1749,
            "cost": 0.00033299999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.SeriesCode, T2.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND t1.incomegroup = 'Low income'"
    },
    {
        "sample_id": 2178,
        "pred_sql": "SELECT country.shortname FROM country JOIN indicators ON country.countrycode = indicators.countrycode WHERE country.incomegroup = 'Low income' AND indicators.indicatorname = 'Fertility rate' ORDER BY indicators.value ASC LIMIT 1;",
        "retrieved": [
            2120
        ],
        "token_usage": {
            "tokens": 1767,
            "cost": 0.0003501
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY T2.Value LIMIT 1"
    },
    {
        "sample_id": 2143,
        "pred_sql": "SELECT indicatorname FROM indicators WHERE indicatorcode IN (SELECT seriescode FROM series WHERE aggregationmethod = 'Weighted average') ORDER BY value ASC LIMIT 1;",
        "retrieved": [
            2134
        ],
        "token_usage": {
            "tokens": 1761,
            "cost": 0.00033614999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'"
    },
    {
        "sample_id": 2177,
        "pred_sql": "SELECT series.seriescode, country.wb2code FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode INNER JOIN series ON countrynotes.seriescode = series.seriescode WHERE countrynotes.description = 'Data sources : Eurostat'",
        "retrieved": [
            2093
        ],
        "token_usage": {
            "tokens": 1766,
            "cost": 0.00033959999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.seriescode, T1.Wb2Code FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data sources : Eurostat'"
    },
    {
        "sample_id": 2218,
        "pred_sql": "SELECT country.longname FROM country WHERE country.region = 'Europe & Central Asia' AND country.currencyunit = 'Danish krone';",
        "retrieved": [
            2196
        ],
        "token_usage": {
            "tokens": 1650,
            "cost": 0.00028484999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(longname) FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone' UNION SELECT longname FROM country WHERE currencyunit = 'Danish krone' AND region = 'Europe & Central Asia'"
    },
    {
        "sample_id": 2164,
        "pred_sql": "SELECT LongName FROM country WHERE specialnotes IS NULL",
        "retrieved": [
            2213
        ],
        "token_usage": {
            "tokens": 1728,
            "cost": 0.00029879999999999994
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes = '' UNION SELECT longname FROM country WHERE specialnotes = ''"
    },
    {
        "sample_id": 2198,
        "pred_sql": "SELECT DISTINCT longname FROM country WHERE systemoftrade = 'Special' LIMIT 2;",
        "retrieved": [
            2213
        ],
        "token_usage": {
            "tokens": 1767,
            "cost": 0.00032355
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2"
    },
    {
        "sample_id": 2172,
        "pred_sql": "SELECT country.longname FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.indicatorname = 'DT.DOD.DSTC.CD' AND indicators.year = '1980'",
        "retrieved": [
            2150
        ],
        "token_usage": {
            "tokens": 1725,
            "cost": 0.00032984999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1980 AND T2.IndicatorName IS NOT NULL"
    },
    {
        "sample_id": 2112,
        "pred_sql": "SELECT c.shortname, MAX(i.value) AS highest_value, i.year FROM country AS c INNER JOIN indicators AS i ON c.countrycode = i.countrycode WHERE c.region = 'Latin America & Caribbean' AND i.indicatorname = 'CO2 emissions (kt)' GROUP BY c.shortname ORDER BY AVG(i.value) DESC LIMIT 3;",
        "retrieved": [
            2093
        ],
        "token_usage": {
            "tokens": 1819,
            "cost": 0.0003669
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.CountryCode, T1.Year, T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Latin America & Caribbean' AND T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year > 1965 AND T1.Year < 1980 ORDER BY T1.Value DESC LIMIT 3"
    },
    {
        "sample_id": 2230,
        "pred_sql": "SELECT AVG(indicators.value) AS average_passengers, country.systemoftrade FROM indicators INNER JOIN country ON indicators.countrycode = country.countrycode WHERE country.shortname = 'Bulgaria' AND indicators.indicatorname = 'Passengers carried via air transport' AND indicators.year BETWEEN 1970 AND 1980;",
        "retrieved": [
            2180
        ],
        "token_usage": {
            "tokens": 1799,
            "cost": 0.00035039999999999995
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT AVG(T1.Value), T2.SystemOfTrade FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Air transport, passengers carried' AND T1.Year >= 1970 AND T1.Year < 1981 AND T1.CountryName = 'Bulgaria'"
    },
    {
        "sample_id": 2171,
        "pred_sql": "SELECT country.tablename, indicators.year FROM indicators JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'Air transport, passengers carried'",
        "retrieved": [
            2120
        ],
        "token_usage": {
            "tokens": 1732,
            "cost": 0.00032414999999999994
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T2.Year, T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Air transport, passengers carried'"
    },
    {
        "sample_id": 2108,
        "pred_sql": "SELECT AVG(value) FROM indicators INNER JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'Adjusted net enrolment rate, primary, both sexes (%)' AND country.shortname = 'Algeria' AND indicators.year BETWEEN 1975 AND 1980;",
        "retrieved": [
            2119
        ],
        "token_usage": {
            "tokens": 1788,
            "cost": 0.00034199999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'"
    },
    {
        "sample_id": 2242,
        "pred_sql": "SELECT COUNT(country.countrycode) FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.indicatorname = 'Stocks traded, turnover ratio of domestic shares' AND indicators.value IS NOT NULL",
        "retrieved": [
            2119
        ],
        "token_usage": {
            "tokens": 1810,
            "cost": 0.00036104999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(T1.Countrycode)  FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T2.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'"
    },
    {
        "sample_id": 2221,
        "pred_sql": "SELECT indicators.value FROM indicators JOIN country ON indicators.countrycode = country.countrycode WHERE country.shortname = 'Italy' AND indicators.year = '1968' AND indicators.indicatorname LIKE '%agricultural land area in sq. km%'",
        "retrieved": [
            2200
        ],
        "token_usage": {
            "tokens": 1745,
            "cost": 0.0003486
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT Value FROM Indicators WHERE IndicatorName = 'Agricultural land (sq. km)' AND Year = 1968 AND CountryName = 'Italy'"
    },
    {
        "sample_id": 2191,
        "pred_sql": "SELECT COUNT(country.countrycode) FROM country WHERE country.systemofnationalaccounts = '1968'",
        "retrieved": [
            2119
        ],
        "token_usage": {
            "tokens": 1729,
            "cost": 0.0003138
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(CountryCode)  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.'"
    },
    {
        "sample_id": 2214,
        "pred_sql": "SELECT country.shortname FROM country JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.year = '1980' AND indicators.indicatorname = 'Land under cereal production' AND indicators.value = '3018500' AND country.externaldebtreportingstatus = 'Actual'",
        "retrieved": [
            2202
        ],
        "token_usage": {
            "tokens": 1813,
            "cost": 0.00037769999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.CountryCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName LIKE 'Land under cereal production%' AND T1.Value = 3018500 AND T1.Year = 1980 AND T2.ExternalDebtReportingStatus = 'Actual'"
    },
    {
        "sample_id": 2187,
        "pred_sql": "SELECT country.shortname FROM indicators INNER JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'official aid'",
        "retrieved": [
            2116
        ],
        "token_usage": {
            "tokens": 1783,
            "cost": 0.0003507
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.'"
    },
    {
        "sample_id": 2157,
        "pred_sql": "SELECT country.countrycode, country.shortname FROM country WHERE country.currencyunit = 'Euro' AND country.incomegroup = 'High income';",
        "retrieved": [
            2158
        ],
        "token_usage": {
            "tokens": 1737,
            "cost": 0.00033255
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')"
    },
    {
        "sample_id": 2166,
        "pred_sql": "SELECT longname FROM country WHERE nationalaccountsbaseyear < '1980';",
        "retrieved": [
            2180
        ],
        "token_usage": {
            "tokens": 1735,
            "cost": 0.00031874999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''"
    }
]