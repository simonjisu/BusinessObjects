[
    {
        "sample_id": 5184,
        "pred_sql": "SELECT zip_data.cbsa FROM zip_data WHERE zip_data.asian_population = (SELECT MAX(asian_population) FROM zip_data)",
        "retrieved": [
            5211
        ],
        "token_usage": {
            "tokens": 2341,
            "cost": 0.00040874999999999993
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.asian_population ORDER BY T2.asian_population DESC LIMIT 1"
    },
    {
        "sample_id": 5165,
        "pred_sql": "SELECT COUNT(*) FROM zip_data WHERE state = 'DC' AND black_population > 20000;",
        "retrieved": [
            5148
        ],
        "token_usage": {
            "tokens": 2339,
            "cost": 0.00038504999999999995
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'DISTRICT OF COLUMBIA' AND T2.black_population > 20000"
    },
    {
        "sample_id": 5203,
        "pred_sql": "SELECT (COUNT(CASE WHEN zip_data.type = 'post office' THEN 1 END) * 100.0 / COUNT(*)) AS post_office_percentage FROM zip_data WHERE zip_data.city = 'Saint Croix';",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2400,
            "cost": 0.0004396499999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX'"
    },
    {
        "sample_id": 5166,
        "pred_sql": "SELECT zip_data.city, alias.alias FROM zip_data INNER JOIN alias ON zip_data.zip_code = alias.zip_code WHERE zip_data.zip_code = '19019'",
        "retrieved": [
            5097
        ],
        "token_usage": {
            "tokens": 2331,
            "cost": 0.00040455
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019"
    },
    {
        "sample_id": 5230,
        "pred_sql": "SELECT AVG(total_beneficiaries) FROM zip_data WHERE state = 'GU'",
        "retrieved": [
            5095
        ],
        "token_usage": {
            "tokens": 2323,
            "cost": 0.00039794999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT CAST(SUM(T2.total_beneficiaries) AS REAL) / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Guam'"
    },
    {
        "sample_id": 5122,
        "pred_sql": "SELECT AVG(zip_data.female_median_age) AS average_female_median_age FROM zip_data INNER JOIN country ON zip_data.zip_code = country.zip_code WHERE country.state = (SELECT abbreviation FROM state WHERE name = (SELECT state FROM congress WHERE first_name = 'Ron' AND last_name = 'DeSantis'))",
        "retrieved": [
            5095
        ],
        "token_usage": {
            "tokens": 2367,
            "cost": 0.0004212
        },
        "db_id": "address",
        "gold_sql": "SELECT SUM(T4.female_median_age) / COUNT(T1.county) FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id INNER JOIN zip_data AS T4 ON T1.zip_code = T4.zip_code WHERE T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'"
    },
    {
        "sample_id": 5208,
        "pred_sql": "SELECT zip_data.type FROM zip_data INNER JOIN alias ON zip_data.zip_code = alias.zip_code WHERE alias.alias = 'St Thomas';",
        "retrieved": [
            5097
        ],
        "token_usage": {
            "tokens": 2342,
            "cost": 0.00041115
        },
        "db_id": "address",
        "gold_sql": "SELECT DISTINCT T2.type FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'St Thomas'"
    },
    {
        "sample_id": 5170,
        "pred_sql": "SELECT country.county, zip_data.zip_code FROM country INNER JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE country.state = 'VI'",
        "retrieved": [
            5200
        ],
        "token_usage": {
            "tokens": 2319,
            "cost": 0.0004054499999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.county, T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virgin Islands'"
    },
    {
        "sample_id": 5133,
        "pred_sql": "SELECT state.name FROM state INNER JOIN zip_data ON state.abbreviation = zip_data.state WHERE zip_data.time_zone = 'Central'",
        "retrieved": [
            5169
        ],
        "token_usage": {
            "tokens": 2326,
            "cost": 0.0004011
        },
        "db_id": "address",
        "gold_sql": "SELECT SUM(CASE WHEN T1.time_zone = 'Central' THEN 1 ELSE 0 END) AS count FROM zip_data AS T1 INNER JOIN state AS T2 ON T2.abbreviation = T1.state WHERE T1.time_zone = 'Central'"
    },
    {
        "sample_id": 5150,
        "pred_sql": "SELECT zip_data.city FROM zip_data INNER JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = '939' ORDER BY zip_data.asian_population DESC LIMIT 1;",
        "retrieved": [
            5211
        ],
        "token_usage": {
            "tokens": 2369,
            "cost": 0.00042329999999999993
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.city FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 939 ORDER BY T2.asian_population DESC LIMIT 1"
    },
    {
        "sample_id": 5174,
        "pred_sql": "SELECT zip_data.zip_code, zip_data.organization FROM zip_data INNER JOIN cbsa ON zip_data.cbsa = cbsa.cbsa WHERE cbsa.cbsa_name LIKE '%Kingsport-Bristol%' AND zip_data.state = 'TN' OR zip_data.state = 'VA';",
        "retrieved": [
            5119
        ],
        "token_usage": {
            "tokens": 2425,
            "cost": 0.0004452
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.zip_code, T2.organization FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Kingsport-Bristol, TN-VA'"
    },
    {
        "sample_id": 5112,
        "pred_sql": "SELECT DISTINCT alias.alias FROM zip_data INNER JOIN alias ON zip_data.zip_code = alias.zip_code WHERE zip_data.latitude = '18.090875' AND zip_data.longitude = '-66.867756'",
        "retrieved": [
            5097
        ],
        "token_usage": {
            "tokens": 2352,
            "cost": 0.00041624999999999995
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756"
    },
    {
        "sample_id": 5140,
        "pred_sql": "SELECT avoid.bad_alias FROM zip_data INNER JOIN avoid ON zip_data.zip_code = avoid.zip_code WHERE zip_data.state = 'PR'",
        "retrieved": [
            5092
        ],
        "token_usage": {
            "tokens": 2357,
            "cost": 0.00041474999999999997
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'"
    },
    {
        "sample_id": 5157,
        "pred_sql": "SELECT alias.alias FROM alias INNER JOIN zip_data ON alias.zip_code = zip_data.zip_code WHERE zip_data.population_2010 = '0'",
        "retrieved": [
            5211
        ],
        "token_usage": {
            "tokens": 2321,
            "cost": 0.00039539999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT DISTINCT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 = 0"
    },
    {
        "sample_id": 5223,
        "pred_sql": "SELECT COUNT(DISTINCT T2.zip_code) FROM zip_congress AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T1.district = T3.cognress_rep_id WHERE T3.state = 'PR'",
        "retrieved": [
            5114
        ],
        "token_usage": {
            "tokens": 2396,
            "cost": 0.00043635
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Puerto Rico'"
    },
    {
        "sample_id": 5180,
        "pred_sql": "SELECT DISTINCT country.county FROM area_code INNER JOIN country AS T2 ON area_code.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON area_code.zip_code = T3.zip_code WHERE area_code.area_code = '410'",
        "retrieved": [
            5204
        ],
        "token_usage": {
            "tokens": 2353,
            "cost": 0.00041414999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 410"
    },
    {
        "sample_id": 5113,
        "pred_sql": "SELECT zip_data.city, area_code.area_code FROM area_code INNER JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE zip_data.median_age = (SELECT MAX(median_age) FROM zip_data) LIMIT 1;",
        "retrieved": [
            5129
        ],
        "token_usage": {
            "tokens": 2382,
            "cost": 0.00043109999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.area_code FROM zip_data AS T1 INNER JOIN area_code AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.area_code ORDER BY T1.over_65 DESC LIMIT 1"
    },
    {
        "sample_id": 5087,
        "pred_sql": "SELECT country.county FROM zip_data INNER JOIN country ON zip_data.zip_code = country.zip_code ORDER BY zip_data.avg_income_per_household DESC LIMIT 1;",
        "retrieved": [
            5188
        ],
        "token_usage": {
            "tokens": 2328,
            "cost": 0.00041489999999999995
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' GROUP BY T2.county ORDER BY T1.avg_income_per_household DESC LIMIT 1"
    },
    {
        "sample_id": 5143,
        "pred_sql": "SELECT congress.first_name, congress.last_name FROM congress INNER JOIN zip_congress ON congress.cognress_rep_id = zip_congress.district INNER JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code WHERE zip_data.population_2020 > 30000;",
        "retrieved": [
            5148
        ],
        "token_usage": {
            "tokens": 2420,
            "cost": 0.00043634999999999995
        },
        "db_id": "address",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.population_2020 > 30000 GROUP BY T3.first_name, T3.last_name"
    },
    {
        "sample_id": 5228,
        "pred_sql": "SELECT cbsa.cbsa_name FROM cbsa INNER JOIN zip_data ON cbsa.cbsa = zip_data.cbsa INNER JOIN (SELECT zip_code, SUM(employees) AS total_employees FROM zip_data GROUP BY zip_code ORDER BY total_employees DESC LIMIT 1) AS max_employees ON zip_data.zip_code = max_employees.zip_code",
        "retrieved": [
            5119
        ],
        "token_usage": {
            "tokens": 2460,
            "cost": 0.00046755
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = ( SELECT MAX(employees) FROM zip_data )"
    },
    {
        "sample_id": 5177,
        "pred_sql": "SELECT zip_data.zip_code FROM zip_data INNER JOIN congress ON zip_congress.district = congress.cognress_rep_id WHERE congress.house = 'Senate';",
        "retrieved": [
            5114
        ],
        "token_usage": {
            "tokens": 2371,
            "cost": 0.00042314999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.House = 'House of Repsentatives' GROUP BY T2.zip_code"
    },
    {
        "sample_id": 5212,
        "pred_sql": "SELECT zip_data.elevation FROM zip_data INNER JOIN state ON zip_data.state = state.abbreviation WHERE state.name = 'Massachusetts' AND zip_data.city = 'Hampden'",
        "retrieved": [
            5152
        ],
        "token_usage": {
            "tokens": 2313,
            "cost": 0.0004032
        },
        "db_id": "address",
        "gold_sql": "SELECT T3.elevation FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Massachusetts' AND T2.county = 'HAMPDEN' GROUP BY T3.elevation"
    },
    {
        "sample_id": 5134,
        "pred_sql": "SELECT zip_data.city, state.name FROM zip_data INNER JOIN cbsa ON zip_data.cbsa = cbsa.cbsa INNER JOIN state ON zip_data.state = state.abbreviation WHERE cbsa.cbsa_name = 'Lexington-Fayette, KY' LIMIT 10;",
        "retrieved": [
            5191
        ],
        "token_usage": {
            "tokens": 2423,
            "cost": 0.00045344999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT DISTINCT T2.city, T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10"
    },
    {
        "sample_id": 5201,
        "pred_sql": "SELECT country.county FROM country INNER JOIN zip_data ON country.zip_code = zip_data.zip_code GROUP BY country.county ORDER BY SUM(zip_data.households) DESC LIMIT 1;",
        "retrieved": [
            5183
        ],
        "token_usage": {
            "tokens": 2330,
            "cost": 0.00041699999999999994
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.county ORDER BY T2.households DESC LIMIT 1"
    },
    {
        "sample_id": 5158,
        "pred_sql": "SELECT COUNT(zip_data.city) FROM area_code INNER JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE area_code.area_code = '608' AND zip_data.daylight_savings = 'Yes'",
        "retrieved": [
            5169
        ],
        "token_usage": {
            "tokens": 2346,
            "cost": 0.00041265
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T2.city) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 608 AND T2.daylight_savings = 'Yes'"
    },
    {
        "sample_id": 5106,
        "pred_sql": "SELECT COUNT(*) AS representative_count FROM congress WHERE state = (SELECT state FROM country GROUP BY state ORDER BY SUM(monthly_benefits_retired_workers) DESC LIMIT 1)",
        "retrieved": [
            5189
        ],
        "token_usage": {
            "tokens": 2337,
            "cost": 0.0004184999999999999
        },
        "db_id": "address",
        "gold_sql": "SELECT COUNT(T3.cognress_rep_id) FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation INNER JOIN congress AS T3 ON T2.abbreviation = T3.abbreviation ORDER BY T1.monthly_benefits_retired_workers DESC LIMIT 1"
    },
    {
        "sample_id": 5153,
        "pred_sql": "SELECT area_code.area_code FROM area_code INNER JOIN zip_data ON area_code.zip_code = zip_data.zip_code ORDER BY zip_data.land_area DESC LIMIT 1;",
        "retrieved": [
            5129
        ],
        "token_usage": {
            "tokens": 2360,
            "cost": 0.00041744999999999993
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = ( SELECT MAX(land_area) FROM zip_data )"
    },
    {
        "sample_id": 5120,
        "pred_sql": "SELECT country.county FROM congress INNER JOIN zip_congress ON congress.cognress_rep_id = zip_congress.district INNER JOIN zip_data ON zip_congress.zip_code = zip_data.zip_code INNER JOIN country ON zip_data.zip_code = country.zip_code WHERE congress.first_name = 'Vicky' AND congress.last_name = 'Hartzler'",
        "retrieved": [
            5183
        ],
        "token_usage": {
            "tokens": 2367,
            "cost": 0.0004383
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Hartzler' AND T3.last_name = 'Vicky' GROUP BY T1.county"
    },
    {
        "sample_id": 5213,
        "pred_sql": "SELECT area_code.area_code FROM area_code INNER JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE zip_data.hispanic_population = (SELECT MAX(hispanic_population) FROM zip_data)",
        "retrieved": [
            5211
        ],
        "token_usage": {
            "tokens": 2332,
            "cost": 0.00040334999999999997
        },
        "db_id": "address",
        "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )"
    },
    {
        "sample_id": 5135,
        "pred_sql": "WITH party_counts AS (SELECT congress.party, COUNT(*) AS count FROM congress INNER JOIN state ON congress.abbreviation = state.abbreviation WHERE state.name = 'Indiana' GROUP BY congress.party) SELECT (SELECT count FROM party_counts WHERE party = 'Democrat') * 100.0 / (SELECT SUM(count) FROM party_counts) AS democrat_percentage, (SELECT zip_data.zip_code FROM congress INNER JOIN zip_data ON congress.district = zip_congress.district WHERE congress.party = 'Democrat' AND zip_data.state = 'IN') AS democrat_zip_codes;",
        "retrieved": [
            5110
        ],
        "token_usage": {
            "tokens": 2472,
            "cost": 0.00048239999999999996
        },
        "db_id": "address",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.party = 'Democrat' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.party = 'Republican' THEN 1 ELSE NULL END)FROM zip_congress AS T1 INNER JOIN congress AS T2 ON T2.cognress_rep_id = T1.district"
    },
    {
        "sample_id": 5878,
        "pred_sql": "SELECT COUNT(*) FROM \"air carriers\" INNER JOIN airlines ON air carriers.code = airlines.op_carrier_airline_id WHERE air carriers.description = 'serious reasons' AND airlines.cancelled = 'C' AND airlines.origin = 'CLT' AND airlines.dest = 'AUS'",
        "retrieved": [
            5901
        ],
        "token_usage": {
            "tokens": 1336,
            "cost": 0.00027915
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ORIGIN = 'CLT' AND T1.DEST = 'AUS' AND T2.Description = 'Charlotte, NC: Charlotte Douglas International' AND T1.CANCELLATION_CODE = 'A'"
    },
    {
        "sample_id": 5835,
        "pred_sql": "SELECT T3.description, COUNT(*) AS flight_count FROM airports AS T1 INNER JOIN airlines AS T2 ON T1.code = T2.origin INNER JOIN air_carriers AS T3 ON T2.op_carrier_airline_id = T3.code WHERE T2.fl_date = '2018-08-01' AND (T3.description = 'American Airlines Inc.' OR T3.description = 'Endeavor Air Inc.') GROUP BY T3.description ORDER BY flight_count DESC;",
        "retrieved": [
            5829
        ],
        "token_usage": {
            "tokens": 1416,
            "cost": 0.00032264999999999996
        },
        "db_id": "airline",
        "gold_sql": "SELECT CASE WHEN COUNT(CASE WHEN T3.Description = 'American Airlines Inc.: AA' THEN 1 ELSE NULL END) > COUNT(CASE WHEN T3.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE NULL END) THEN 'American Airlines Inc.: AA' ELSE 'Endeavor Air Inc.: 9E' END AS RESULT FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1'"
    },
    {
        "sample_id": 5842,
        "pred_sql": "SELECT COUNT(airlines.fl_date) FROM airlines WHERE airlines.fl_date = '2018/8/12' AND airlines.origin = (SELECT airports.code FROM airports WHERE airports.description = 'Miami, FL: Miami International') AND airlines.arr_delay < 0",
        "retrieved": [
            5850
        ],
        "token_usage": {
            "tokens": 1409,
            "cost": 0.00029685
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/12' AND T2.DEST = 'MIA' AND T2.ARR_DELAY < 0"
    },
    {
        "sample_id": 5886,
        "pred_sql": "SELECT airports.description FROM airports WHERE airports.code LIKE '%3'",
        "retrieved": [
            5882
        ],
        "token_usage": {
            "tokens": 1186,
            "cost": 0.0002256
        },
        "db_id": "airline",
        "gold_sql": "SELECT Description FROM Airports WHERE Code LIKE '%3'"
    },
    {
        "sample_id": 5857,
        "pred_sql": "SELECT airports.code FROM airports WHERE airports.description = 'Anita Bay Airport'",
        "retrieved": [
            5882
        ],
        "token_usage": {
            "tokens": 1172,
            "cost": 0.00021674999999999998
        },
        "db_id": "airline",
        "gold_sql": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'"
    },
    {
        "sample_id": 5837,
        "pred_sql": "SELECT AVG(flight_count) FROM (SELECT COUNT(*) AS flight_count FROM airlines INNER JOIN air_carriers ON airlines.op_carrier_airline_id = air_carriers.code WHERE air_carriers.description = 'American Airlines Inc.' AND airlines.fl_date BETWEEN '2018-08-01' AND '2018-08-31' GROUP BY airlines.fl_date) AS daily_flights;",
        "retrieved": [
            5901
        ],
        "token_usage": {
            "tokens": 1331,
            "cost": 0.00027749999999999997
        },
        "db_id": "airline",
        "gold_sql": "SELECT CAST( SUM(CASE WHEN T2.FL_DATE LIKE '2018/8%' THEN 1 ELSE 0 END) AS REAL) / 31 FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'"
    },
    {
        "sample_id": 5839,
        "pred_sql": "SELECT COUNT(airlines.tail_num) FROM airlines WHERE airlines.fl_date = '2018/8/27' AND airlines.origin = (SELECT airports.code FROM airports WHERE airports.description = 'Los Angeles, CA: Los Angeles International')",
        "retrieved": [
            5850
        ],
        "token_usage": {
            "tokens": 1341,
            "cost": 0.00025469999999999996
        },
        "db_id": "airline",
        "gold_sql": "SELECT SUM(CASE WHEN T2.FL_DATE = '2018/8/27' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Los Angeles, CA: Los Angeles International'"
    },
    {
        "sample_id": 5908,
        "pred_sql": "SELECT ac.description FROM \"air carriers\" ac INNER JOIN airlines a ON ac.code = a.op_carrier_airline_id WHERE a.arr_delay < 0 AND a.dep_delay < 0;",
        "retrieved": [
            5893
        ],
        "token_usage": {
            "tokens": 1301,
            "cost": 0.00026805
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_DELAY < 0 AND T2.DEP_DELAY < 0 GROUP BY T1.Description"
    },
    {
        "sample_id": 5909,
        "pred_sql": "SELECT tail_num FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air carriers WHERE description = 'Southwest Airlines Co.: WN') AND actual_elapsed_time < (SELECT 0.8 * AVG(actual_elapsed_time) FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air carriers WHERE description = 'Southwest Airlines Co.: WN'))",
        "retrieved": [
            5907
        ],
        "token_usage": {
            "tokens": 1328,
            "cost": 0.0002739
        },
        "db_id": "airline",
        "gold_sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southwest Airlines Co.: WN' AND T2.ACTUAL_ELAPSED_TIME < ( SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines )"
    },
    {
        "sample_id": 5852,
        "pred_sql": "SELECT (SUM(CASE WHEN airlines.actual_elapsed_time < airlines.crs_elapsed_time THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_faster_flights FROM airlines INNER JOIN \"air carriers\" ON airlines.op_carrier_airline_id = \"air carriers\".code WHERE airlines.dest = 'PIT'",
        "retrieved": [
            5844
        ],
        "token_usage": {
            "tokens": 1388,
            "cost": 0.00031035
        },
        "db_id": "airline",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.DEST WHERE T2.Description LIKE '%Pittsburgh%' AND T1.CRS_ELAPSED_TIME IS NOT NULL AND T1.ACTUAL_ELAPSED_TIME IS NOT NULL"
    },
    {
        "sample_id": 5875,
        "pred_sql": "SELECT COUNT(*) FROM airports INNER JOIN airlines AS T2 ON airports.code = T2.origin INNER JOIN \"air carriers\" AS T3 ON T2.op_carrier_airline_id = T3.code WHERE T2.fl_date = '2018-08-01' AND airports.description = 'Allentown, Pennsylvania'",
        "retrieved": [
            5829
        ],
        "token_usage": {
            "tokens": 1348,
            "cost": 0.00028319999999999994
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE'"
    },
    {
        "sample_id": 5880,
        "pred_sql": "SELECT airlines.crs_dep_time, airlines.dep_time FROM airlines WHERE airlines.origin = 'MIA' AND airlines.dest = 'FLL' AND airlines.tail_num = 'N903JB' AND airlines.fl_date = '2018-08-20'",
        "retrieved": [
            5874
        ],
        "token_usage": {
            "tokens": 1318,
            "cost": 0.00027375
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.DEP_TIME FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code INNER JOIN Airports AS T3 ON T1.DEST = T3.Code WHERE T1.FL_DATE = '2018/8/20' AND T1.TAIL_NUM = 'N903JB' AND T2.Description LIKE '%JetBlue Airways%' AND T3.Description LIKE '%Fort Lauderdale-Hollywood%'"
    },
    {
        "sample_id": 5899,
        "pred_sql": "SELECT ac.description FROM airlines a JOIN air_carriers ac ON a.op_carrier_airline_id = ac.code ORDER BY a.actual_elapsed_time DESC LIMIT 1;",
        "retrieved": [
            5890
        ],
        "token_usage": {
            "tokens": 1231,
            "cost": 0.000249
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ACTUAL_ELAPSED_TIME DESC LIMIT 1"
    },
    {
        "sample_id": 5897,
        "pred_sql": "SELECT tail_num FROM airlines INNER JOIN air carriers ON airlines.op_carrier_airline_id = air carriers.code WHERE air carriers.description = 'Asap Air Inc.: ASP' ORDER BY dep_delay DESC LIMIT 1;",
        "retrieved": [
            5905
        ],
        "token_usage": {
            "tokens": 1321,
            "cost": 0.00027419999999999994
        },
        "db_id": "airline",
        "gold_sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1"
    },
    {
        "sample_id": 5841,
        "pred_sql": "SELECT COUNT(*) FROM \"air carriers\" INNER JOIN airlines ON air carriers.code = airlines.op_carrier_airline_id WHERE air carriers.description LIKE 'Alaska Airlines' AND airlines.fl_date = '2018/8/2' AND airlines.dep_delay > 0",
        "retrieved": [
            5893
        ],
        "token_usage": {
            "tokens": 1360,
            "cost": 0.000303
        },
        "db_id": "airline",
        "gold_sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/2' AND T2.Description = 'Alaska Airlines Inc.: AS' AND T1.DEP_DELAY > 0"
    },
    {
        "sample_id": 5910,
        "pred_sql": "SELECT ac.description FROM \"air carriers\" ac INNER JOIN airlines a ON ac.code = a.op_carrier_airline_id WHERE a.arr_time < (SELECT AVG(arr_time) * 0.4 FROM airlines WHERE dest = (SELECT code FROM airports WHERE description LIKE '%Phoenix%'))",
        "retrieved": [
            5893
        ],
        "token_usage": {
            "tokens": 1351,
            "cost": 0.00029309999999999997
        },
        "db_id": "airline",
        "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'PHX' AND T2.ARR_TIME < ( SELECT AVG(ARR_TIME) * 0.4 FROM Airlines ) GROUP BY T1.Description"
    },
    {
        "sample_id": 5864,
        "pred_sql": "SELECT op_carrier_airline_id, COUNT(tail_num) AS aircraft_count FROM airlines GROUP BY op_carrier_airline_id ORDER BY aircraft_count DESC LIMIT 5;",
        "retrieved": [
            5838
        ],
        "token_usage": {
            "tokens": 1222,
            "cost": 0.00025665
        },
        "db_id": "airline",
        "gold_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code GROUP BY T2.Description ORDER BY T1.TAIL_NUM DESC LIMIT 5"
    },
    {
        "sample_id": 5855,
        "pred_sql": "SELECT airports.code FROM airports WHERE airports.description LIKE '%Ankara%'",
        "retrieved": [
            5882
        ],
        "token_usage": {
            "tokens": 1175,
            "cost": 0.00022034999999999996
        },
        "db_id": "airline",
        "gold_sql": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'"
    },
    {
        "sample_id": 5889,
        "pred_sql": "SELECT tail_num FROM airlines WHERE fl_date = '2018-08-17'",
        "retrieved": [
            5846
        ],
        "token_usage": {
            "tokens": 1250,
            "cost": 0.00023159999999999996
        },
        "db_id": "airline",
        "gold_sql": "SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018/8/17' GROUP BY TAIL_NUM"
    },
    {
        "sample_id": 2526,
        "pred_sql": "SELECT playstore.app, SUM(user_reviews.sentiment_subjectivity) AS total_sentiment_subjectivity \nFROM playstore \nINNER JOIN user_reviews ON playstore.app = user_reviews.app \nWHERE playstore.genres LIKE '%/%' \nGROUP BY playstore.app \nORDER BY total_sentiment_subjectivity DESC;",
        "retrieved": [
            2542
        ],
        "token_usage": {
            "tokens": 1210,
            "cost": 0.0002679
        },
        "db_id": "app_store",
        "gold_sql": "SELECT SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres > 1"
    },
    {
        "sample_id": 2550,
        "pred_sql": "SELECT playstore.app FROM playstore WHERE playstore.reviews > '75000000' AND playstore.\"content rating\" = 'Teen'",
        "retrieved": [
            2543
        ],
        "token_usage": {
            "tokens": 1179,
            "cost": 0.00025604999999999996
        },
        "db_id": "app_store",
        "gold_sql": "SELECT DISTINCT App FROM playstore WHERE Reviews > 75000000 AND \"Content Rating\" = 'Teen'"
    },
    {
        "sample_id": 2532,
        "pred_sql": "SELECT COUNT(user_reviews.app) FROM user_reviews INNER JOIN playstore ON user_reviews.app = playstore.app WHERE playstore.app = 'Brit + Co' AND user_reviews.translated_review IS NOT NULL;",
        "retrieved": [
            2522
        ],
        "token_usage": {
            "tokens": 1182,
            "cost": 0.0002583
        },
        "db_id": "app_store",
        "gold_sql": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL"
    },
    {
        "sample_id": 2551,
        "pred_sql": "SELECT DISTINCT genres FROM playstore WHERE installs > '1000000000'",
        "retrieved": [
            2545
        ],
        "token_usage": {
            "tokens": 1081,
            "cost": 0.0002076
        },
        "db_id": "app_store",
        "gold_sql": "SELECT Genres FROM playstore WHERE Installs = '1,000,000,000+' GROUP BY Genres"
    },
    {
        "sample_id": 2547,
        "pred_sql": "SELECT playstore.rating, SUM(user_reviews.sentiment_subjectivity) AS total_sentiment_subjectivity FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.app = 'Onefootball - Soccer Scores'",
        "retrieved": [
            2540
        ],
        "token_usage": {
            "tokens": 1171,
            "cost": 0.0002535
        },
        "db_id": "app_store",
        "gold_sql": "SELECT T1.Rating, SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Onefootball - Soccer Scores'"
    },
    {
        "sample_id": 2573,
        "pred_sql": "SELECT COUNT(playstore.app) AS teen_targeted_apps, AVG(user_reviews.sentiment_polarity) AS average_sentiment_polarity FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.category = 'GAME' AND playstore.genres LIKE '%role playing%' AND playstore.content_rating = 'Teen'",
        "retrieved": [
            2569
        ],
        "token_usage": {
            "tokens": 1218,
            "cost": 0.00027719999999999996
        },
        "db_id": "app_store",
        "gold_sql": "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Teen' AND T1.Genres = 'Role Playing'"
    },
    {
        "sample_id": 2552,
        "pred_sql": "SELECT AVG(CAST(price AS REAL)) FROM playstore WHERE category = 'Dating'",
        "retrieved": [
            2540
        ],
        "token_usage": {
            "tokens": 1064,
            "cost": 0.00019424999999999998
        },
        "db_id": "app_store",
        "gold_sql": "SELECT AVG(Price) FROM playstore WHERE Genres = 'Dating'"
    },
    {
        "sample_id": 2533,
        "pred_sql": "SELECT playstore.app, COUNT(user_reviews.app) AS review_count FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app GROUP BY playstore.app ORDER BY review_count DESC LIMIT 5;",
        "retrieved": [
            2522
        ],
        "token_usage": {
            "tokens": 1167,
            "cost": 0.00025154999999999996
        },
        "db_id": "app_store",
        "gold_sql": "SELECT DISTINCT App FROM playstore WHERE Genres = 'Shopping' GROUP BY App ORDER BY COUNT(App) DESC LIMIT 5"
    },
    {
        "sample_id": 2570,
        "pred_sql": "SELECT playstore.rating, COUNT(user_reviews.sentiment) AS dislike_count FROM playstore LEFT JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.app = 'Dragon Ball Legends' AND user_reviews.sentiment = 'Negative'",
        "retrieved": [
            2523
        ],
        "token_usage": {
            "tokens": 1135,
            "cost": 0.00023864999999999997
        },
        "db_id": "app_store",
        "gold_sql": "SELECT T1.Rating, COUNT(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Dragon Ball Legends' AND CAST(Sentiment_Polarity AS INTEGER) < -0.5"
    },
    {
        "sample_id": 2536,
        "pred_sql": "SELECT translated_review FROM user_reviews WHERE app = 'Dog Run - Pet Dog Simulator' AND sentiment = 'Negative';",
        "retrieved": [
            2556
        ],
        "token_usage": {
            "tokens": 1196,
            "cost": 0.00022934999999999996
        },
        "db_id": "app_store",
        "gold_sql": "SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative'"
    },
    {
        "sample_id": 2561,
        "pred_sql": "SELECT rating FROM playstore WHERE app = 'Learn C++'",
        "retrieved": [
            2530
        ],
        "token_usage": {
            "tokens": 1069,
            "cost": 0.00019769999999999998
        },
        "db_id": "app_store",
        "gold_sql": "SELECT DISTINCT Rating FROM playstore WHERE App = 'Learn C++'"
    },
    {
        "sample_id": 2566,
        "pred_sql": "SELECT playstore.app, COUNT(user_reviews.sentiment) AS negative_sentiment_count FROM playstore INNER JOIN user_reviews ON playstore.app = user_reviews.app WHERE playstore.category = 'GAME' AND user_reviews.sentiment = 'Negative' ORDER BY CAST(playstore.rating AS REAL) ASC LIMIT 5;",
        "retrieved": [
            2537
        ],
        "token_usage": {
            "tokens": 1231,
            "cost": 0.0002742
        },
        "db_id": "app_store",
        "gold_sql": "SELECT T1.App, COUNT(T1.App) COUNTNUMBER FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY T1.Rating LIMIT 5"
    },
    {
        "sample_id": 5307,
        "pred_sql": "SELECT COUNT(*) AS VisaCustomerCount FROM customers INNER JOIN transaction ON customers.customerid = transaction.customerid WHERE transaction.creditcardtype = 'Visa' AND customers.city = 'Folsom';",
        "retrieved": [
            5344
        ],
        "token_usage": {
            "tokens": 1778,
            "cost": 0.00032879999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'Folsom' AND T2.CreditCardType = 'Visa'"
    },
    {
        "sample_id": 5294,
        "pred_sql": "SELECT rootbeer.containertype, (currentretailprice - wholesalecost) AS profit_per_unit FROM rootbeer INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid ORDER BY profit_per_unit DESC LIMIT 1 UNION SELECT rootbeer.containertype, (currentretailprice - wholesalecost) AS profit_per_unit FROM rootbeer INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid ORDER BY profit_per_unit ASC LIMIT 1;",
        "retrieved": [
            5296
        ],
        "token_usage": {
            "tokens": 1949,
            "cost": 0.0004071
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT * FROM ( SELECT T1.BrandName, T2.ContainerType FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID ORDER BY T1.CurrentRetailPrice - T1.WholesaleCost DESC LIMIT 1 ) UNION ALL SELECT * FROM ( SELECT T3.BrandName, T4.ContainerType FROM rootbeerbrand AS T3 INNER JOIN rootbeer AS T4 ON T3.BrandID = T4.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost ASC LIMIT 1 )"
    },
    {
        "sample_id": 5328,
        "pred_sql": "SELECT rootbeerbrand.brandname FROM customers INNER JOIN rootbeerreview ON customers.customerid = rootbeerreview.customerid INNER JOIN rootbeerbrand ON rootbeerreview.brandid = rootbeerbrand.brandid WHERE customers.customerid = '331115' AND rootbeerreview.starrating = 1 AND rootbeerreview.review = 'Yuk, more like licorice soda'",
        "retrieved": [
            5272
        ],
        "token_usage": {
            "tokens": 1858,
            "cost": 0.00036105
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.CustomerID = 331115 AND T2.Review = 'Yuk, more like licorice soda.' AND T2.StarRating = 1"
    },
    {
        "sample_id": 5271,
        "pred_sql": "SELECT COUNT(transactionid) FROM transaction WHERE creditcardtype = 'MasterCard' AND STRFTIME('%Y', transactiondate) = '2014'",
        "retrieved": [
            5238
        ],
        "token_usage": {
            "tokens": 1768,
            "cost": 0.0003246
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(TransactionID) FROM \"transaction\" WHERE CreditCardType = 'MasterCard' AND TransactionDate LIKE '2014%'"
    },
    {
        "sample_id": 5279,
        "pred_sql": "SELECT rb.brandname, COUNT(t.transactionid) AS purchase_count\nFROM rootbeerbrand rb\nINNER JOIN rootbeer r ON rb.brandid = r.brandid\nINNER JOIN transaction t ON r.rootbeerid = t.rootbeerid\nWHERE rb.facebookpage IS NULL AND rb.twitter IS NULL\nGROUP BY rb.brandname\nORDER BY purchase_count DESC\nLIMIT 1;",
        "retrieved": [
            5246
        ],
        "token_usage": {
            "tokens": 1862,
            "cost": 0.00037199999999999993
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FacebookPage IS NULL AND T2.Twitter IS NULL GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 5313,
        "pred_sql": "SELECT geolocation.latitude, COUNT(transaction.rootbeerid) AS beer_count FROM transaction INNER JOIN geolocation ON transaction.locationid = geolocation.locationid INNER JOIN rootbeer ON transaction.rootbeerid = rootbeer.rootbeerid INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid WHERE rootbeerbrand.brandname = 'Thomas Kemper' GROUP BY geolocation.latitude ORDER BY beer_count DESC LIMIT 1;",
        "retrieved": [
            5296
        ],
        "token_usage": {
            "tokens": 1967,
            "cost": 0.00042375
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T3.Latitude FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Thomas Kemper' GROUP BY T3.Latitude ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 5273,
        "pred_sql": "SELECT COUNT(*) FROM rootbeer r INNER JOIN transaction t ON r.rootbeerid = t.rootbeerid INNER JOIN rootbeerbrand rb ON r.brandid = rb.brandid INNER JOIN location l ON t.locationid = l.locationid WHERE rb.canesugar = 'false' AND rb.availableinbottles = 'true' AND l.locationname = 'Sac State American River Courtyard' AND strftime('%Y', t.transactiondate) = '2015';",
        "retrieved": [
            5300
        ],
        "token_usage": {
            "tokens": 1931,
            "cost": 0.00039989999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State American River Courtyard' AND T1.PurchaseDate LIKE '2015%' AND T2.Honey = 'TRUE' AND T2.CaneSugar = 'FALSE' AND T1.ContainerType = 'Bottle'"
    },
    {
        "sample_id": 5232,
        "pred_sql": "SELECT brandname FROM rootbeerbrand ORDER BY firstbrewedyear ASC LIMIT 1",
        "retrieved": [
            5288
        ],
        "token_usage": {
            "tokens": 1742,
            "cost": 0.000318
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = ( SELECT MIN(FirstBrewedYear) FROM rootbeerbrand )"
    },
    {
        "sample_id": 5259,
        "pred_sql": "SELECT customers.firstpurchasedate FROM customers INNER JOIN rootbeerreview ON customers.customerid = rootbeerreview.customerid WHERE rootbeerreview.review = 'Tastes like Australia.'",
        "retrieved": [
            5275
        ],
        "token_usage": {
            "tokens": 1768,
            "cost": 0.00032235
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.FirstPurchaseDate FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Review = 'Tastes like Australia.'"
    },
    {
        "sample_id": 5287,
        "pred_sql": "SELECT (CAST(COUNT(CASE WHEN containertype = 'cans' THEN 1 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_sold_in_cans\nFROM rootbeer\nINNER JOIN transaction ON rootbeer.rootbeerid = transaction.rootbeerid\nWHERE strftime('%Y', transaction.transactiondate) = '2014';",
        "retrieved": [
            5293
        ],
        "token_usage": {
            "tokens": 1865,
            "cost": 0.00037019999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID ELSE NULL END) AS REAL) * 100 / COUNT(RootBeerID) FROM rootbeer WHERE PurchaseDate LIKE '2014%'"
    },
    {
        "sample_id": 5335,
        "pred_sql": "SELECT transaction.creditcardtype FROM customers INNER JOIN transaction ON customers.customerid = transaction.customerid WHERE customers.first = 'Kenneth' AND customers.last = 'Walton'",
        "retrieved": [
            5344
        ],
        "token_usage": {
            "tokens": 1753,
            "cost": 0.00031424999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Kenneth' AND T1.Last = 'Walton'"
    },
    {
        "sample_id": 5351,
        "pred_sql": "SELECT customers.first, customers.last, transaction.creditcardtype FROM customers INNER JOIN transaction ON customers.customerid = transaction.customerid WHERE customers.first = 'Dick' AND customers.last = 'Ruthven'",
        "retrieved": [
            5344
        ],
        "token_usage": {
            "tokens": 1769,
            "cost": 0.00032114999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Dick' AND T1.Last = 'Ruthven'"
    },
    {
        "sample_id": 5330,
        "pred_sql": "SELECT COUNT(transaction.transactionid) FROM transaction INNER JOIN location ON transaction.locationid = location.locationid WHERE location.locationname = 'Sac State Union' AND transaction.creditcardtype = 'American Express' AND STRFTIME('%Y', transaction.transactiondate) = '2014'",
        "retrieved": [
            5238
        ],
        "token_usage": {
            "tokens": 1830,
            "cost": 0.00035864999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union' AND T1.CreditCardType = 'American Express' AND T1.TransactionDate BETWEEN '2014-01-01' AND '2014-12-31'"
    },
    {
        "sample_id": 5358,
        "pred_sql": "SELECT customers.email FROM customers INNER JOIN transaction ON customers.customerid = transaction.customerid WHERE transaction.transactionid = '100016'",
        "retrieved": [
            5344
        ],
        "token_usage": {
            "tokens": 1774,
            "cost": 0.0003237
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.Email FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = '100016'"
    },
    {
        "sample_id": 5314,
        "pred_sql": "SELECT starrating, COUNT(starrating) AS rating_count FROM rootbeerreview INNER JOIN rootbeer ON rootbeerreview.brandid = rootbeer.brandid INNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid WHERE rootbeerbrand.cornsyrup = 'true' GROUP BY starrating ORDER BY rating_count DESC LIMIT 1;",
        "retrieved": [
            5300
        ],
        "token_usage": {
            "tokens": 1902,
            "cost": 0.00039059999999999995
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.StarRating FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CornSyrup = 'TRUE' GROUP BY T2.StarRating ORDER BY COUNT(T2.StarRating) DESC LIMIT 1"
    },
    {
        "sample_id": 5341,
        "pred_sql": "SELECT AVG(starrating) AS average_review FROM rootbeerreview INNER JOIN customers ON rootbeerreview.customerid = customers.customerid WHERE subscribedtoemaillist = 'true'",
        "retrieved": [
            5318
        ],
        "token_usage": {
            "tokens": 1853,
            "cost": 0.00035894999999999997
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE'"
    },
    {
        "sample_id": 5291,
        "pred_sql": "SELECT COUNT(DISTINCT rb.brandid) AS brand_count FROM rootbeer AS r INNER JOIN rootbeerbrand AS rb ON r.brandid = rb.brandid WHERE r.containertype = 'Cans' AND rb.cornsyrup = 'true' AND rb.artificialsweetener = 'true';",
        "retrieved": [
            5342
        ],
        "token_usage": {
            "tokens": 1885,
            "cost": 0.00037544999999999994
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE' AND AvailableInCans = 'TRUE'"
    },
    {
        "sample_id": 5350,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN subscribedtoemaillist = 'true' AND gender = 'female' THEN customerid END) AS FLOAT) * 100 / COUNT(customerid) AS percentage_female_subscribed FROM customers;",
        "retrieved": [
            5302
        ],
        "token_usage": {
            "tokens": 1896,
            "cost": 0.00036045
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN Gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(SubscribedToEmailList) FROM customers WHERE SubscribedToEmailList = 'TRUE'"
    },
    {
        "sample_id": 5331,
        "pred_sql": "SELECT geolocation.latitude, geolocation.longitude FROM location INNER JOIN geolocation AS T2 ON location.locationid = T2.locationid WHERE location.locationname = 'Sac State Union'",
        "retrieved": [
            5362
        ],
        "token_usage": {
            "tokens": 1726,
            "cost": 0.00031695
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'"
    },
    {
        "sample_id": 5336,
        "pred_sql": "SELECT rootbeer.containertype, rootbeerbrand.brandname, rootbeerreview.starrating \nFROM rootbeer \nINNER JOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid \nINNER JOIN rootbeerreview ON rootbeer.brandid = rootbeerreview.brandid \nWHERE rootbeer.rootbeerid = '10054';",
        "retrieved": [
            5275
        ],
        "token_usage": {
            "tokens": 1856,
            "cost": 0.00037695
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T4.ContainerType, T3.BrandName, T1.StarRating FROM rootbeerreview AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID INNER JOIN rootbeer AS T4 ON T2.RootBeerID = T4.RootBeerID WHERE T2.RootBeerID = 100054"
    },
    {
        "sample_id": 5312,
        "pred_sql": "SELECT customers.first, customers.last FROM customers INNER JOIN rootbeerreview ON customers.customerid = rootbeerreview.customerid WHERE rootbeerreview.starrating = 5",
        "retrieved": [
            5275
        ],
        "token_usage": {
            "tokens": 1739,
            "cost": 0.00030719999999999993
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5"
    },
    {
        "sample_id": 5263,
        "pred_sql": "SELECT rootbeerbrand.currentretailprice FROM rootbeerbrand INNER JOIN rootbeerreview ON rootbeerbrand.brandid = rootbeerreview.brandid WHERE rootbeerreview.review = 'The quintessential dessert root beer. No ice cream required.'",
        "retrieved": [
            5356
        ],
        "token_usage": {
            "tokens": 1820,
            "cost": 0.0003405
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.CurrentRetailPrice - T1.WholesaleCost AS price FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.Review = 'The quintessential dessert root beer. No ice cream required.'"
    },
    {
        "sample_id": 5361,
        "pred_sql": "SELECT rootbeerbrand.brandname FROM rootbeerbrand INNER JOIN rootbeerreview ON rootbeerbrand.brandid = rootbeerreview.brandid GROUP BY rootbeerbrand.brandname ORDER BY AVG(rootbeerreview.starrating) DESC LIMIT 3;",
        "retrieved": [
            5356
        ],
        "token_usage": {
            "tokens": 1809,
            "cost": 0.00034289999999999993
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 LIMIT 3"
    },
    {
        "sample_id": 5283,
        "pred_sql": "SELECT rb.brandname \nFROM rootbeerreview rbr \nJOIN rootbeerbrand rb ON rbr.brandid = rb.brandid \nWHERE rbr.starrating = 5 \nGROUP BY rb.brandname \nHAVING COUNT(rbr.customerid) >= 5;",
        "retrieved": [
            5272
        ],
        "token_usage": {
            "tokens": 1850,
            "cost": 0.000363
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T2.BrandID HAVING COUNT(T2.StarRating) >= 5"
    },
    {
        "sample_id": 5244,
        "pred_sql": "SELECT COUNT(rootbeer.rootbeerid) AS total_purchased FROM rootbeerbrand INNER JOIN rootbeer ON rootbeerbrand.brandid = rootbeer.brandid INNER JOIN transaction ON rootbeer.rootbeerid = transaction.rootbeerid WHERE rootbeerbrand.brandname = 'Bulldog' AND transaction.transactiondate BETWEEN '2014-08-01' AND '2014-08-31';",
        "retrieved": [
            5293
        ],
        "token_usage": {
            "tokens": 1850,
            "cost": 0.00036164999999999993
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'"
    },
    {
        "sample_id": 5289,
        "pred_sql": "SELECT T2.brandid, COUNT(*) AS num_customers FROM rootbeerreview AS T1 INNER JOIN rootbeer AS T2 ON T1.brandid = T2.brandid WHERE T1.starrating = 1 GROUP BY T2.brandid ORDER BY num_customers DESC LIMIT 1;",
        "retrieved": [
            5275
        ],
        "token_usage": {
            "tokens": 1835,
            "cost": 0.00036299999999999993
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 5274,
        "pred_sql": "SELECT rb.breweryname, COUNT(t.transactionid) AS purchase_count\nFROM transaction t\nJOIN rootbeer r ON t.rootbeerid = r.rootbeerid\nJOIN rootbeerbrand rb ON r.brandid = rb.brandid\nWHERE strftime('%Y', t.transactiondate) = '2016'\nGROUP BY rb.breweryname\nORDER BY purchase_count DESC\nLIMIT 1;",
        "retrieved": [
            5288
        ],
        "token_usage": {
            "tokens": 1938,
            "cost": 0.00043559999999999996
        },
        "db_id": "beer_factory",
        "gold_sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1"
    },
    {
        "sample_id": 205,
        "pred_sql": "SELECT COUNT(DISTINCT stores.stor_id) AS store_count FROM stores INNER JOIN sales ON stores.stor_id = sales.stor_id INNER JOIN titles ON sales.title_id = titles.title_id WHERE titles.title = 'Life Without Fear' AND stores.state = 'MA';",
        "retrieved": [
            202
        ],
        "token_usage": {
            "tokens": 1530,
            "cost": 0.000315
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'"
    },
    {
        "sample_id": 169,
        "pred_sql": "SELECT titles.title, titles.price, titles.pubdate FROM sales INNER JOIN titles ON sales.title_id = titles.title_id WHERE sales.payterms = 'ON invoice'",
        "retrieved": [
            168
        ],
        "token_usage": {
            "tokens": 1507,
            "cost": 0.0002913
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'"
    },
    {
        "sample_id": 207,
        "pred_sql": "SELECT publishers.pub_name FROM titles INNER JOIN publishers ON titles.pub_id = publishers.pub_id ORDER BY titles.price DESC LIMIT 1;",
        "retrieved": [
            197
        ],
        "token_usage": {
            "tokens": 1490,
            "cost": 0.0002919
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "sample_id": 179,
        "pred_sql": "SELECT stores.stor_name, (SUM(CASE WHEN sales.payterms = 'Net 30' THEN sales.qty ELSE 0 END) * 100.0 / SUM(sales.qty)) AS percentage_net_30 FROM stores INNER JOIN sales ON stores.stor_id = sales.stor_id WHERE stores.stor_id = '7066' GROUP BY stores.stor_id;",
        "retrieved": [
            177
        ],
        "token_usage": {
            "tokens": 1598,
            "cost": 0.00032159999999999996
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name"
    },
    {
        "sample_id": 218,
        "pred_sql": "SELECT authors.au_fname, authors.au_lname, authors.contract FROM titles INNER JOIN titleauthor ON titles.title_id = titleauthor.title_id INNER JOIN authors ON titleauthor.au_id = authors.au_id WHERE titles.title = 'Sushi, Anyone?'",
        "retrieved": [
            192
        ],
        "token_usage": {
            "tokens": 1505,
            "cost": 0.00029099999999999997
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'"
    },
    {
        "sample_id": 223,
        "pred_sql": "SELECT titles.type FROM sales INNER JOIN titles ON sales.title_id = titles.title_id WHERE sales.ord_date = '1993-05-29'",
        "retrieved": [
            168
        ],
        "token_usage": {
            "tokens": 1494,
            "cost": 0.0002826
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'"
    },
    {
        "sample_id": 233,
        "pred_sql": "SELECT titles.title, titles.type, titles.price FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.pub_name = 'New Moon Books' ORDER BY titles.price ASC;",
        "retrieved": [
            213
        ],
        "token_usage": {
            "tokens": 1460,
            "cost": 0.00028199999999999997
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price"
    },
    {
        "sample_id": 193,
        "pred_sql": "SELECT titles.title, titles.ytd_sales FROM titles INNER JOIN titleauthor ON titles.title_id = titleauthor.title_id INNER JOIN authors ON titleauthor.au_id = authors.au_id WHERE authors.contract = '0'",
        "retrieved": [
            197
        ],
        "token_usage": {
            "tokens": 1510,
            "cost": 0.00030165
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title_id, T1.ytd_sales FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0"
    },
    {
        "sample_id": 167,
        "pred_sql": "SELECT ord_date, SUM(qty) AS total_quantity\nFROM sales\nGROUP BY ord_date\nORDER BY total_quantity DESC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1405,
            "cost": 0.00029085
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1"
    },
    {
        "sample_id": 234,
        "pred_sql": "SELECT titles.title, titles.royalty FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.country = 'US' ORDER BY titles.royalty DESC;",
        "retrieved": [
            215
        ],
        "token_usage": {
            "tokens": 1476,
            "cost": 0.0002871
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC"
    },
    {
        "sample_id": 228,
        "pred_sql": "WITH sales_fremont AS (SELECT SUM(sales.qty) AS total_qty FROM sales INNER JOIN stores ON sales.stor_id = stores.stor_id WHERE stores.city = 'Fremont' AND strftime('%Y', sales.ord_date) = '1993'),\n     sales_portland AS (SELECT SUM(sales.qty) AS total_qty FROM sales INNER JOIN stores ON sales.stor_id = stores.stor_id WHERE stores.city = 'Portland' AND strftime('%Y', sales.ord_date) = '1993')\nSELECT (sales_fremont.total_qty - sales_portland.total_qty) * 100.0 / sales_portland.total_qty AS percent_difference\nFROM sales_fremont, sales_portland;",
        "retrieved": [
            202
        ],
        "token_usage": {
            "tokens": 1599,
            "cost": 0.00035594999999999995
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'"
    },
    {
        "sample_id": 196,
        "pred_sql": "SELECT (COUNT(CASE WHEN job_id IN (SELECT job_id FROM jobs WHERE job_desc IN ('Editor', 'Designer')) THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM employee;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1358,
            "cost": 0.00026535
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id"
    },
    {
        "sample_id": 210,
        "pred_sql": "SELECT COUNT(*) AS total_books_ordered FROM sales INNER JOIN titles ON sales.title_id = titles.title_id INNER JOIN stores ON sales.stor_id = stores.stor_id WHERE titles.title LIKE '%business%' AND stores.state = 'MA';",
        "retrieved": [
            168
        ],
        "token_usage": {
            "tokens": 1557,
            "cost": 0.00032445
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'"
    },
    {
        "sample_id": 238,
        "pred_sql": "SELECT titles.title, publishers.state, titles.ytd_sales FROM titles INNER JOIN publishers ON titles.pub_id = publishers.pub_id WHERE titles.title LIKE '%Carefully researched study of the effects of strong emotions on the body%'",
        "retrieved": [
            188
        ],
        "token_usage": {
            "tokens": 1491,
            "cost": 0.0002808
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'"
    },
    {
        "sample_id": 194,
        "pred_sql": "SELECT titles.title FROM titles INNER JOIN titleauthor ON titles.title_id = titleauthor.title_id INNER JOIN authors ON titleauthor.au_id = authors.au_id WHERE authors.state = 'CA' AND authors.contract = '0' ORDER BY titles.ytd_sales DESC LIMIT 1;",
        "retrieved": [
            197
        ],
        "token_usage": {
            "tokens": 1513,
            "cost": 0.00029984999999999994
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1"
    },
    {
        "sample_id": 172,
        "pred_sql": "SELECT titles.title, roysched.lorange FROM titles INNER JOIN roysched ON titles.title_id = roysched.title_id ORDER BY roysched.royalty DESC LIMIT 1;",
        "retrieved": [
            171
        ],
        "token_usage": {
            "tokens": 1573,
            "cost": 0.00031515
        },
        "db_id": "book_publishing_company",
        "gold_sql": "SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1"
    },
    {
        "sample_id": 5950,
        "pred_sql": "SELECT shipping_method.method_name, COUNT(*) as order_count FROM cust_order INNER JOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id GROUP BY shipping_method.method_name ORDER BY order_count DESC LIMIT 1;",
        "retrieved": [
            6069
        ],
        "token_usage": {
            "tokens": 2161,
            "cost": 0.00039929999999999995
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) DESC LIMIT 1"
    },
    {
        "sample_id": 6095,
        "pred_sql": "SELECT book.isbn13, order_line.price FROM book INNER JOIN order_line AS T2 ON book.book_id = T2.book_id WHERE book.isbn13 = '9780763628321'",
        "retrieved": [
            6099
        ],
        "token_usage": {
            "tokens": 2063,
            "cost": 0.0003648
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.isbn13 = 9780763628321"
    },
    {
        "sample_id": 6048,
        "pred_sql": "SELECT COUNT(book.book_id) AS book_count FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Akira Watanabe' AND book.publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Gravity')",
        "retrieved": [
            5998
        ],
        "token_usage": {
            "tokens": 2121,
            "cost": 0.00039329999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'Akira Watanabe'"
    },
    {
        "sample_id": 6067,
        "pred_sql": "SELECT country.country_name FROM address JOIN country ON address.country_id = country.country_id WHERE address.street_number = '9' AND address.street_name = 'Green Ridge Point' AND address.city = 'Arendal';",
        "retrieved": [],
        "token_usage": {
            "tokens": 2011,
            "cost": 0.000384
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.country_name FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T1.street_number = 9 AND T1.street_name = 'Green Ridge Point' AND T1.city = 'Arendal'"
    },
    {
        "sample_id": 5988,
        "pred_sql": "SELECT (COUNT(CASE WHEN shipping_method.method_name = 'international' THEN 1 END) * 100.0 / COUNT(*)) AS international_shipping_percentage\nFROM cust_order\nINNER JOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id\nWHERE strftime('%Y', order_date) = '2020';",
        "retrieved": [
            6088
        ],
        "token_usage": {
            "tokens": 2220,
            "cost": 0.00042974999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id WHERE STRFTIME('%Y', T1.order_date) = '2020'"
    },
    {
        "sample_id": 6080,
        "pred_sql": "SELECT title FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE publisher.publisher_name = 'Free Press' AND publication_date BETWEEN '1990-01-01' AND '2000-12-31' ORDER BY num_pages DESC LIMIT 1;",
        "retrieved": [
            6041
        ],
        "token_usage": {
            "tokens": 2122,
            "cost": 0.0003939
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Free Press' AND STRFTIME('%Y', T1.publication_date) BETWEEN '1990' AND '2000' ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "sample_id": 6062,
        "pred_sql": "SELECT author.author_name, book.title FROM author INNER JOIN book_author ON author.author_id = book_author.author_id INNER JOIN book ON book_author.book_id = book.book_id WHERE author.author_name = 'Tom Clancy';",
        "retrieved": [
            5998
        ],
        "token_usage": {
            "tokens": 2085,
            "cost": 0.00037439999999999994
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Tom Clancy'"
    },
    {
        "sample_id": 5937,
        "pred_sql": "SELECT COUNT(*) AS order_count FROM order_line ol JOIN cust_order co ON ol.order_id = co.order_id JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'O Xar\u00e1';",
        "retrieved": [
            6075
        ],
        "token_usage": {
            "tokens": 2095,
            "cost": 0.0003983999999999999
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'O Xar\u00e1'"
    },
    {
        "sample_id": 6026,
        "pred_sql": "SELECT address.street_number, address.street_name, address.city, country.country_name FROM address INNER JOIN customer_address ON address.address_id = customer_address.address_id INNER JOIN country ON address.country_id = country.country_id WHERE address.city = 'Lazaro Cardenas'",
        "retrieved": [
            6049
        ],
        "token_usage": {
            "tokens": 2137,
            "cost": 0.00039435
        },
        "db_id": "books",
        "gold_sql": "SELECT street_number, street_name, city, country_id FROM address WHERE city = 'Lazaro Cardenas'"
    },
    {
        "sample_id": 6001,
        "pred_sql": "SELECT method_name FROM shipping_method WHERE method_id IN (SELECT shipping_method_id FROM cust_order GROUP BY shipping_method_id ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 1)",
        "retrieved": [
            6069
        ],
        "token_usage": {
            "tokens": 2146,
            "cost": 0.00038984999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) ASC LIMIT 1, 1"
    },
    {
        "sample_id": 5953,
        "pred_sql": "SELECT author.author_name, COUNT(book.book_id) AS book_count FROM author INNER JOIN book_author ON author.author_id = book_author.author_id INNER JOIN book ON book_author.book_id = book.book_id WHERE author.author_name = 'A.R. Braunmuller' GROUP BY author.author_name",
        "retrieved": [
            5998
        ],
        "token_usage": {
            "tokens": 2116,
            "cost": 0.00039165
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'"
    },
    {
        "sample_id": 5954,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = (SELECT title FROM book WHERE author_id = (SELECT author_id FROM author WHERE author_name = 'Agatha Christie') ORDER BY publication_date ASC LIMIT 1)",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2065,
            "cost": 0.00036465
        },
        "db_id": "books",
        "gold_sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Agatha Christie' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6085,
        "pred_sql": "SELECT country.country_name FROM customer INNER JOIN customer_address AS T2 ON customer.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id INNER JOIN customer_address AS T5 ON T5.customer_id = customer.customer_id WHERE customer.email = 'rturbitt2@geocities.jp' AND T5.status_id = '1'",
        "retrieved": [
            5938
        ],
        "token_usage": {
            "tokens": 2210,
            "cost": 0.00042465
        },
        "db_id": "books",
        "gold_sql": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.email = 'rturbitT2@geocities.jp'"
    },
    {
        "sample_id": 6096,
        "pred_sql": "SELECT book.num_pages FROM book JOIN cust_order ON book.book_id = cust_order.order_id WHERE cust_order.order_id = '1167';",
        "retrieved": [
            6075
        ],
        "token_usage": {
            "tokens": 2036,
            "cost": 0.0003612
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.num_pages FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 1167"
    },
    {
        "sample_id": 6022,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = 'The Secret Garden'",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2053,
            "cost": 0.00036015
        },
        "db_id": "books",
        "gold_sql": "SELECT DISTINCT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Secret Garden'"
    },
    {
        "sample_id": 5963,
        "pred_sql": "SELECT book.title FROM book INNER JOIN order_line ON book.book_id = order_line.book_id ORDER BY order_line.price DESC LIMIT 1;",
        "retrieved": [
            6099
        ],
        "token_usage": {
            "tokens": 2077,
            "cost": 0.0003758999999999999
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "sample_id": 5997,
        "pred_sql": "SELECT COUNT(*) FROM address INNER JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'Philippines'",
        "retrieved": [
            5938
        ],
        "token_usage": {
            "tokens": 2107,
            "cost": 0.00036825
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(T2.country_id) FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Philippines'"
    },
    {
        "sample_id": 6087,
        "pred_sql": "SELECT book.title FROM book INNER JOIN book_author AS T2 ON book.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY book.publication_date LIMIT 1",
        "retrieved": [
            5952
        ],
        "token_usage": {
            "tokens": 2158,
            "cost": 0.00039614999999999995
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6052,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id ORDER BY book.publication_date ASC LIMIT 1;",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2074,
            "cost": 0.00037365
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6082,
        "pred_sql": "SELECT country.country_name FROM customer INNER JOIN customer_address AS T2 ON customer.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE customer.first_name = 'Kandy' AND customer.last_name = 'Kandy' AND T2.status_id = '1'",
        "retrieved": [
            5938
        ],
        "token_usage": {
            "tokens": 2185,
            "cost": 0.00041414999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN address_status AS T4 ON T4.status_id = T2.status_id WHERE T1.first_name = 'Kandy'"
    },
    {
        "sample_id": 6084,
        "pred_sql": "SELECT COUNT(*) FROM order_history WHERE status_id = (SELECT status_id FROM order_status WHERE status_value = 'returned') AND STRFTIME('%Y', order_id) = '2022';",
        "retrieved": [
            5990
        ],
        "token_usage": {
            "tokens": 2095,
            "cost": 0.00037679999999999994
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2022'"
    },
    {
        "sample_id": 6013,
        "pred_sql": "SELECT address.city FROM customer_address INNER JOIN address ON customer_address.address_id = address.address_id INNER JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'United States of America'",
        "retrieved": [
            6049
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.0003831
        },
        "db_id": "books",
        "gold_sql": "SELECT DISTINCT T2.city FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'United States of America'"
    },
    {
        "sample_id": 5930,
        "pred_sql": "SELECT title FROM book WHERE language_id = (SELECT language_id FROM book_language WHERE language_name = 'Japanese') ORDER BY publication_date ASC LIMIT 1;",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2070,
            "cost": 0.00037035
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Japanese' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 5915,
        "pred_sql": "SELECT COUNT(book.book_id) FROM book INNER JOIN publisher AS T2 ON book.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'",
        "retrieved": [
            5932
        ],
        "token_usage": {
            "tokens": 2051,
            "cost": 0.00036209999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'"
    },
    {
        "sample_id": 6078,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = 'The Season: A Candid Look at Broadway'",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2082,
            "cost": 0.00037305
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Season: A Candid Look at Broadway'"
    },
    {
        "sample_id": 5984,
        "pred_sql": "SELECT COUNT(cust_order.order_id) AS number_of_orders\nFROM cust_order\nJOIN customer ON cust_order.customer_id = customer.customer_id\nWHERE customer.first_name = 'Daisey' AND customer.last_name = 'Lamball' AND STRFTIME('%Y', cust_order.order_date) = '2021';",
        "retrieved": [
            5990
        ],
        "token_usage": {
            "tokens": 2153,
            "cost": 0.0004088999999999999
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND STRFTIME('%Y', T1.order_date) = '2021'"
    },
    {
        "sample_id": 5931,
        "pred_sql": "SELECT publisher.publisher_name FROM publisher INNER JOIN book ON publisher.publisher_id = book.publisher_id GROUP BY publisher.publisher_id ORDER BY COUNT(book.book_id) DESC LIMIT 1;",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2091,
            "cost": 0.00038159999999999995
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1"
    },
    {
        "sample_id": 6020,
        "pred_sql": "SELECT COUNT(DISTINCT cust_order.customer_id) FROM cust_order INNER JOIN order_line ON cust_order.order_id = order_line.order_id INNER JOIN book ON order_line.book_id = book.book_id INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Stephen King' AND book.title = (SELECT title FROM book WHERE isbn13 = (SELECT isbn13 FROM book WHERE title LIKE '%first book%'))",
        "retrieved": [
            5926
        ],
        "token_usage": {
            "tokens": 2211,
            "cost": 0.00042524999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(T1.publication_date) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T3.author_name = 'Stephen King' ORDER BY T1.publication_date ASC LIMIT 1"
    },
    {
        "sample_id": 6019,
        "pred_sql": "SELECT book.title FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id INNER JOIN book_language ON book.language_id = book_language.language_id WHERE publisher.publisher_name = 'Alfaguara' AND book_language.language_name = 'Spanish'",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2096,
            "cost": 0.00038415
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.title FROM book_language AS T1 INNER JOIN book AS T2 ON T2.language_id = T1.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T1.language_name = 'Spanish' AND T3.publisher_name = 'Alfaguara' GROUP BY T2.title"
    },
    {
        "sample_id": 6074,
        "pred_sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'",
        "retrieved": [
            6034
        ],
        "token_usage": {
            "tokens": 2103,
            "cost": 0.00037799999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'"
    },
    {
        "sample_id": 6042,
        "pred_sql": "SELECT COUNT(book.book_id) FROM book INNER JOIN book_language ON book.language_id = book_language.language_id WHERE book_language.language_name = 'Japanese'",
        "retrieved": [
            5932
        ],
        "token_usage": {
            "tokens": 2069,
            "cost": 0.00037425
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'"
    },
    {
        "sample_id": 6072,
        "pred_sql": "SELECT (COUNT(DISTINCT ba.book_id) * 100.0 / (SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Viz Media'))) AS percentage_books_written_by_hirohiko\nFROM book_author AS ba\nINNER JOIN author AS a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Hirohiko'",
        "retrieved": [
            5998
        ],
        "token_usage": {
            "tokens": 2112,
            "cost": 0.00038564999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'"
    },
    {
        "sample_id": 6090,
        "pred_sql": "SELECT customer.first_name, customer.last_name, MIN(order_line.price) AS cheapest_price\nFROM order_line\nINNER JOIN cust_order ON order_line.order_id = cust_order.order_id\nINNER JOIN customer ON cust_order.customer_id = customer.customer_id\nGROUP BY customer.customer_id;",
        "retrieved": [
            5926
        ],
        "token_usage": {
            "tokens": 2211,
            "cost": 0.00042524999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id ORDER BY T1.price ASC LIMIT 1"
    },
    {
        "sample_id": 6023,
        "pred_sql": "SELECT COUNT(DISTINCT b.book_id) AS book_count\nFROM book AS b\nINNER JOIN publisher AS p ON b.publisher_id = p.publisher_id\nINNER JOIN book_author AS ba ON b.book_id = ba.book_id\nINNER JOIN author AS a ON ba.author_id = a.author_id\nWHERE p.publisher_name = 'Scholastic' AND a.author_name = 'J.K. Rowling';",
        "retrieved": [
            5998
        ],
        "token_usage": {
            "tokens": 2146,
            "cost": 0.00040649999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN book_author AS T3 ON T3.book_id = T1.book_id INNER JOIN author AS T4 ON T4.author_id = T3.author_id WHERE T2.publisher_name = 'Scholastic' AND T4.author_name = 'J.K. Rowling'"
    },
    {
        "sample_id": 5940,
        "pred_sql": "SELECT country.country_name FROM address JOIN country ON address.country_id = country.country_id WHERE address.city = '\u017dirovnica';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1981,
            "cost": 0.00036734999999999996
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = '\u017dirovnica'"
    },
    {
        "sample_id": 5919,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN publisher ON book.publisher_id = publisher.publisher_id ORDER BY book.num_pages DESC LIMIT 1;",
        "retrieved": [
            6041
        ],
        "token_usage": {
            "tokens": 2091,
            "cost": 0.00038115
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1"
    },
    {
        "sample_id": 5981,
        "pred_sql": "SELECT publisher.publisher_name FROM book INNER JOIN book_author ON book.book_id = book_author.book_id INNER JOIN author ON book_author.author_id = author.author_id INNER JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE author.author_name = 'Barry Eisler'",
        "retrieved": [
            6055
        ],
        "token_usage": {
            "tokens": 2134,
            "cost": 0.00040919999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Barry Eisler'"
    },
    {
        "sample_id": 5995,
        "pred_sql": "SELECT language_name FROM book_language WHERE language_id = (SELECT language_id FROM book GROUP BY language_id ORDER BY COUNT(book_id) ASC LIMIT 1)",
        "retrieved": [
            5982
        ],
        "token_usage": {
            "tokens": 2070,
            "cost": 0.00037214999999999997
        },
        "db_id": "books",
        "gold_sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id GROUP BY T2.language_name ORDER BY COUNT(T2.language_name) ASC LIMIT 1"
    },
    {
        "sample_id": 6068,
        "pred_sql": "SELECT address.street_name, address.city FROM address INNER JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'Poland'",
        "retrieved": [
            6004
        ],
        "token_usage": {
            "tokens": 2117,
            "cost": 0.0003738
        },
        "db_id": "books",
        "gold_sql": "SELECT T1.street_number, T1.street_name, T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Poland' LIMIT 10"
    },
    {
        "sample_id": 6105,
        "pred_sql": "SELECT SUM(b.num_pages) AS total_pages\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nJOIN customer c ON co.customer_id = c.customer_id\nWHERE c.first_name = 'Mick' AND c.last_name = 'Sever';",
        "retrieved": [
            6075
        ],
        "token_usage": {
            "tokens": 2068,
            "cost": 0.0003804
        },
        "db_id": "books",
        "gold_sql": "SELECT SUM(T1.num_pages) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Mick' AND T4.last_name = 'Sever'"
    },
    {
        "sample_id": 5992,
        "pred_sql": "SELECT author.author_name, publisher.publisher_name FROM book INNER JOIN book_author AS T2 ON book.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = book.publisher_id WHERE book.publication_date = '1995'",
        "retrieved": [
            5961
        ],
        "token_usage": {
            "tokens": 2112,
            "cost": 0.00038924999999999995
        },
        "db_id": "books",
        "gold_sql": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1995'"
    },
    {
        "sample_id": 9470,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.\"district type\" = 'Merged' AND frpm.\"district type\" = 'Unified' AND frpm.\"county name\" = 'Orange') * 1.0 / (SELECT COUNT(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.\"district type\" = 'Merged' AND frpm.\"district type\" = 'Elementary' AND frpm.\"county name\" = 'Orange') AS ratio;",
        "retrieved": [
            9454
        ],
        "token_usage": {
            "tokens": 3994,
            "cost": 0.0006940499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'"
    },
    {
        "sample_id": 9495,
        "pred_sql": "SELECT frpm.\"frpm count (ages 5-17)\" FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.\"edopsname\" = 'Youth Authority School' AND schools.\"mailstreet\" = 'PO Box 1040';",
        "retrieved": [
            9423
        ],
        "token_usage": {
            "tokens": 3986,
            "cost": 0.00067755
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T1.\"FRPM Count (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'"
    },
    {
        "sample_id": 9483,
        "pred_sql": "SELECT COUNT(*) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"charter school (y/n)\" = '1' AND schools.city = 'Hickman' AND frpm.\"district type\" = 'Elementary School District';",
        "retrieved": [
            9426
        ],
        "token_usage": {
            "tokens": 3926,
            "cost": 0.0006712499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'"
    },
    {
        "sample_id": 9499,
        "pred_sql": "SELECT schools.school, frpm.\"percent (%) eligible frpm (ages 5-17)\" FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.low_grade = 'K' AND frpm.high_grade = '9' AND frpm.county name = 'Los Angeles'",
        "retrieved": [
            9434
        ],
        "token_usage": {
            "tokens": 4090,
            "cost": 0.00073185
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.School, T1.\"FRPM Count (Ages 5-17)\" * 100 / T1.\"Enrollment (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'"
    },
    {
        "sample_id": 9466,
        "pred_sql": "SELECT schools.city, satscores.avgscrwrite FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.numge1500 = (SELECT MAX(numge1500) FROM satscores)",
        "retrieved": [
            9435
        ],
        "token_usage": {
            "tokens": 4023,
            "cost": 0.00071055
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"
    },
    {
        "sample_id": 9439,
        "pred_sql": "SELECT schools.school, frpm.\"charter school number\" FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE satscores.avgscrwrite > 499 ORDER BY satscores.avgscrwrite DESC;",
        "retrieved": [
            9447
        ],
        "token_usage": {
            "tokens": 3974,
            "cost": 0.0006797999999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null"
    },
    {
        "sample_id": 9431,
        "pred_sql": "SELECT COUNT(*) AS number_of_charter_schools FROM (SELECT satscores.sname, frpm.\"charter funding type\" FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrmath > 560 AND frpm.\"charter funding type\" = 'Directly funded') AS charter_schools;",
        "retrieved": [
            9447
        ],
        "token_usage": {
            "tokens": 3991,
            "cost": 0.00068865
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT COUNT(T2.\"School Code\") FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.\"Charter Funding Type\" = 'Directly funded'"
    },
    {
        "sample_id": 9480,
        "pred_sql": "SELECT schools.school, schools.phone, schools.ext FROM schools WHERE schools.mailzip = '95203-3704'",
        "retrieved": [
            9476
        ],
        "token_usage": {
            "tokens": 3854,
            "cost": 0.00063975
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'"
    },
    {
        "sample_id": 9438,
        "pred_sql": "SELECT COUNT(*) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.statustype = 'Merged' AND schools.county = 'Alameda' AND satscores.numtsttakr < 100;",
        "retrieved": [
            9435
        ],
        "token_usage": {
            "tokens": 3928,
            "cost": 0.0006652499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'"
    },
    {
        "sample_id": 9451,
        "pred_sql": "SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode ORDER BY frpm.\"enrollment (k-12)\" DESC LIMIT 1;",
        "retrieved": [
            9445
        ],
        "token_usage": {
            "tokens": 3916,
            "cost": 0.00066075
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.\"Enrollment (K-12)\" DESC LIMIT 1"
    },
    {
        "sample_id": 9465,
        "pred_sql": "SELECT AVG(satscores.avgscrmath) AS average_math_score, schools.county \nFROM satscores \nINNER JOIN schools ON satscores.cds = schools.cdscode \nWHERE (satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite) = \n    (SELECT MIN(satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite) \n     FROM satscores \n     INNER JOIN schools ON satscores.cds = schools.cdscode) \nGROUP BY schools.county;",
        "retrieved": [
            9474
        ],
        "token_usage": {
            "tokens": 4029,
            "cost": 0.0007163999999999998
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1"
    },
    {
        "sample_id": 9455,
        "pred_sql": "SELECT schools.website, frpm.school name FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"free meal count (ages 5-17)\" BETWEEN 1900 AND 2000;",
        "retrieved": [
            9434
        ],
        "token_usage": {
            "tokens": 4002,
            "cost": 0.0006763499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.Website, T1.\"School Name\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL"
    },
    {
        "sample_id": 9459,
        "pred_sql": "SELECT schools.street, schools.city, schools.zip, schools.state FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode ORDER BY (CAST(satscores.numge1500 AS FLOAT) / CAST(satscores.numtsttakr AS FLOAT)) ASC LIMIT 1;",
        "retrieved": [
            9448
        ],
        "token_usage": {
            "tokens": 3991,
            "cost": 0.00069315
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1"
    },
    {
        "sample_id": 9424,
        "pred_sql": "SELECT schools.zip FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"charter school (y/n)\" = '1' AND frpm.\"county name\" = 'Fresno County Office of Education'",
        "retrieved": [
            9448
        ],
        "token_usage": {
            "tokens": 3934,
            "cost": 0.0006625499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"District Name\" = 'Fresno County Office of Education' AND T1.\"Charter School (Y/N)\" = 1"
    },
    {
        "sample_id": 9482,
        "pred_sql": "SELECT schools.website FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"charter school (y/n)\" = '1' AND frpm.virtual = 'P' AND frpm.\"county name\" = 'San Joaquin'",
        "retrieved": [
            9426
        ],
        "token_usage": {
            "tokens": 3920,
            "cost": 0.000669
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1"
    },
    {
        "sample_id": 9428,
        "pred_sql": "SELECT schools.school, schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr > 500 AND schools.magnet = '1'",
        "retrieved": [
            9435
        ],
        "token_usage": {
            "tokens": 3979,
            "cost": 0.0006908999999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500"
    },
    {
        "sample_id": 9477,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE mailstate = 'CA' AND county = 'Colusa') * 1.0 / (SELECT COUNT(*) FROM schools WHERE mailstate = 'CA' AND county = 'Humboldt') AS ratio;",
        "retrieved": [
            9472
        ],
        "token_usage": {
            "tokens": 3899,
            "cost": 0.0006437999999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'"
    },
    {
        "sample_id": 9467,
        "pred_sql": "SELECT schools.school, AVG(satscores.avgscrwrite) AS average_writing_score \nFROM schools \nINNER JOIN satscores ON schools.cdscode = satscores.cds \nWHERE schools.admfname1 = 'Ricci' AND schools.admlname1 = 'Ulrich' \nGROUP BY schools.school;",
        "retrieved": [
            9474
        ],
        "token_usage": {
            "tokens": 3982,
            "cost": 0.0006873
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'"
    },
    {
        "sample_id": 9444,
        "pred_sql": "SELECT schools.school, satscores.numtsttakr FROM satscores JOIN schools ON satscores.cds = schools.cdscode WHERE schools.county = 'Contra Costa' ORDER BY satscores.numtsttakr DESC LIMIT 1;",
        "retrieved": [
            9430
        ],
        "token_usage": {
            "tokens": 3932,
            "cost": 0.0006784499999999999
        },
        "db_id": "california_schools",
        "gold_sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1"
    },
    {
        "sample_id": 1625,
        "pred_sql": "SELECT employees.firstname || ' ' || employees.lastname AS full_name FROM customers INNER JOIN employees ON customers.salesrepemployeenumber = employees.employeenumber WHERE customers.customername = 'Muscle Machine Inc';",
        "retrieved": [
            1628
        ],
        "token_usage": {
            "tokens": 1390,
            "cost": 0.00026519999999999994
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'"
    },
    {
        "sample_id": 1593,
        "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS employee_full_name, e2.firstname || ' ' || e2.lastname AS supervisor_full_name \nFROM payments p \nJOIN customers c ON p.customernumber = c.customernumber \nJOIN employees e ON c.salesrepemployeenumber = e.employeenumber \nJOIN employees e2 ON e.reportsto = e2.employeenumber \nWHERE p.amount = (SELECT MAX(amount) FROM payments)",
        "retrieved": [
            1601
        ],
        "token_usage": {
            "tokens": 1531,
            "cost": 0.00031965
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.firstName, T1.lastName, T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber ORDER BY T3.amount DESC LIMIT 1"
    },
    {
        "sample_id": 1578,
        "pred_sql": "SELECT COUNT(customers.customernumber) FROM customers WHERE customers.creditlimit < 220000 AND customers.country = 'Australia'",
        "retrieved": [
            1586
        ],
        "token_usage": {
            "tokens": 1322,
            "cost": 0.00024285
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'"
    },
    {
        "sample_id": 1604,
        "pred_sql": "SELECT offices.addressline1, offices.addressline2, offices.city, offices.state, offices.country, offices.postalcode FROM offices INNER JOIN employees ON offices.officecode = employees.officecode INNER JOIN customers ON employees.employeenumber = customers.salesrepemployeenumber WHERE customers.city = 'New York';",
        "retrieved": [
            1620
        ],
        "token_usage": {
            "tokens": 1438,
            "cost": 0.0002922
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'"
    },
    {
        "sample_id": 1563,
        "pred_sql": "SELECT AVG(orderdetails.priceeach * orderdetails.quantityordered) AS average_total_price FROM customers INNER JOIN orders ON customers.customernumber = orders.customernumber INNER JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber WHERE customers.customername = 'Exoto Designs' AND STRFTIME('%Y', orders.shippeddate) = '2005'",
        "retrieved": [
            1547
        ],
        "token_usage": {
            "tokens": 1481,
            "cost": 0.00030809999999999995
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND STRFTIME('%Y', T3.orderDate) = '2005'"
    },
    {
        "sample_id": 1642,
        "pred_sql": "SELECT products.productname, SUM(orderdetails.quantityordered) AS total_quantity, (products.msrp - products.buyprice) AS expected_profit_margin FROM orderdetails INNER JOIN products ON orderdetails.productcode = products.productcode GROUP BY products.productname ORDER BY total_quantity DESC LIMIT 1;",
        "retrieved": [
            1606
        ],
        "token_usage": {
            "tokens": 1481,
            "cost": 0.00032655
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT productName, MSRP - buyPrice FROM products WHERE productCode = ( SELECT productCode FROM orderdetails ORDER BY quantityOrdered DESC LIMIT 1 )"
    },
    {
        "sample_id": 1552,
        "pred_sql": "SELECT COUNT(p.checknumber) AS checks_issued\nFROM payments p\nJOIN customers c ON p.customernumber = c.customernumber\nJOIN orders o ON c.customernumber = o.customernumber\nWHERE c.customername = 'Euro+ Shopping Channel' AND strftime('%Y', p.paymentdate) = '2004';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1337,
            "cost": 0.00029325
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'"
    },
    {
        "sample_id": 1592,
        "pred_sql": "SELECT SUM(orderdetails.priceeach * orderdetails.quantityordered) AS total_value FROM customers INNER JOIN orders ON customers.customernumber = orders.customernumber INNER JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber WHERE orders.status = 'Shipped' AND STRFTIME('%Y', orders.shippeddate) BETWEEN '2003' AND '2004' AND customers.customername LIKE '%vintage car%';",
        "retrieved": [
            1547
        ],
        "token_usage": {
            "tokens": 1499,
            "cost": 0.0003189
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'"
    },
    {
        "sample_id": 1630,
        "pred_sql": "SELECT COUNT(DISTINCT employees.employeenumber) FROM employees INNER JOIN offices ON employees.officecode = offices.officecode WHERE offices.country = 'USA'",
        "retrieved": [
            1620
        ],
        "token_usage": {
            "tokens": 1425,
            "cost": 0.00029204999999999997
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(t1.employeeNumber) FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.country = 'USA' AND t1.jobTitle = 'Sales Rep'"
    },
    {
        "sample_id": 1590,
        "pred_sql": "SELECT payments.checknumber FROM payments JOIN customers ON payments.customernumber = customers.customernumber WHERE customers.customername = 'Mini Gifts Distributors Ltd.' AND payments.paymentdate BETWEEN '2003-08-01' AND '2004-08-30';",
        "retrieved": [
            1579
        ],
        "token_usage": {
            "tokens": 1395,
            "cost": 0.00028799999999999995
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'"
    },
    {
        "sample_id": 1597,
        "pred_sql": "SELECT customers.phone FROM customers INNER JOIN employees ON customers.salesrepemployeenumber = employees.employeenumber INNER JOIN offices ON employees.officecode = offices.officecode WHERE customers.contactlastname LIKE 'M%' AND offices.country != 'Germany';",
        "retrieved": [
            1647
        ],
        "token_usage": {
            "tokens": 1446,
            "cost": 0.00030825
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'"
    },
    {
        "sample_id": 1659,
        "pred_sql": "SELECT c.customername, SUM((p.msrp - p.buyprice) * od.quantityordered) AS profit\nFROM orders o\nJOIN customers c ON o.customernumber = c.customernumber\nJOIN orderdetails od ON o.ordernumber = od.ordernumber\nJOIN products p ON od.productcode = p.productcode\nGROUP BY o.ordernumber, c.customername\nORDER BY profit DESC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1388,
            "cost": 0.00032114999999999997
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1"
    },
    {
        "sample_id": 1548,
        "pred_sql": "SELECT COUNT(*) AS employee_count FROM employees INNER JOIN offices ON employees.officecode = offices.officecode WHERE offices.city = 'Sydney'",
        "retrieved": [
            1580
        ],
        "token_usage": {
            "tokens": 1357,
            "cost": 0.00025124999999999995
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )"
    },
    {
        "sample_id": 1549,
        "pred_sql": "SELECT employees.employeenumber FROM employees INNER JOIN offices ON employees.officecode = offices.officecode WHERE offices.city = 'New York' AND employees.reportsto = (SELECT employeenumber FROM employees WHERE firstname = 'Anthony' AND lastname = 'Bow')",
        "retrieved": [
            1628
        ],
        "token_usage": {
            "tokens": 1441,
            "cost": 0.00029219999999999995
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'"
    },
    {
        "sample_id": 1546,
        "pred_sql": "SELECT DISTINCT e.firstname || ' ' || e.lastname AS sales_agent\nFROM customers c\nJOIN payments p ON c.customernumber = p.customernumber\nJOIN employees e ON c.salesrepemployeenumber = e.employeenumber\nWHERE p.amount = (\n    SELECT MAX(total_payment)\n    FROM (\n        SELECT SUM(amount) AS total_payment\n        FROM payments\n        WHERE strftime('%Y', paymentdate) = '2004'\n        GROUP BY customernumber\n    )\n)",
        "retrieved": [
            1651
        ],
        "token_usage": {
            "tokens": 1443,
            "cost": 0.00032129999999999995
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "sample_id": 1656,
        "pred_sql": "SELECT orders.shippeddate FROM orders INNER JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber INNER JOIN products ON orderdetails.productcode = products.productcode ORDER BY products.priceeach DESC LIMIT 1;",
        "retrieved": [
            1606
        ],
        "token_usage": {
            "tokens": 1466,
            "cost": 0.00032025
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1"
    },
    {
        "sample_id": 1584,
        "pred_sql": "SELECT employees.firstname || ' ' || employees.lastname AS fullname, employees.email FROM employees INNER JOIN offices ON employees.officecode = offices.officecode WHERE offices.city = 'Paris'",
        "retrieved": [
            1573
        ],
        "token_usage": {
            "tokens": 1412,
            "cost": 0.0002892
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'"
    },
    {
        "sample_id": 1633,
        "pred_sql": "SELECT SUM(orderdetails.priceeach * orderdetails.quantityordered) AS total_price FROM customers INNER JOIN orders ON customers.customernumber = orders.customernumber INNER JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber WHERE customers.customername = 'Cruz & Sons Co.' AND orders.orderdate = '2003-03-03'",
        "retrieved": [
            1547
        ],
        "token_usage": {
            "tokens": 1465,
            "cost": 0.0002958
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(t1.priceEach * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'"
    },
    {
        "sample_id": 1600,
        "pred_sql": "SELECT COUNT(customers.customernumber) FROM customers JOIN orders ON customers.customernumber = orders.customernumber WHERE orders.status = 'Canceled' AND customers.creditlimit > 115000;",
        "retrieved": [
            1586
        ],
        "token_usage": {
            "tokens": 1390,
            "cost": 0.00028139999999999996
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000"
    },
    {
        "sample_id": 1641,
        "pred_sql": "SELECT customers.customername, SUM(payments.amount) AS total_payment\nFROM payments\nINNER JOIN customers ON payments.customernumber = customers.customernumber\nWHERE strftime('%Y', payments.paymentdate) = '2005'\nGROUP BY customers.customernumber\nORDER BY total_payment DESC\nLIMIT 1;",
        "retrieved": [
            1565
        ],
        "token_usage": {
            "tokens": 1452,
            "cost": 0.0003168
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1"
    },
    {
        "sample_id": 1650,
        "pred_sql": "SELECT SUM(orderdetails.priceeach - products.buyprice) AS actual_profit FROM products INNER JOIN orderdetails ON products.productcode = orderdetails.productcode INNER JOIN orders ON orderdetails.ordernumber = orders.ordernumber WHERE orders.ordernumber = '10100'",
        "retrieved": [
            1595
        ],
        "token_usage": {
            "tokens": 1554,
            "cost": 0.00033299999999999996
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM((t1.priceEach - t2.buyPrice) * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t1.orderNumber = '10100'"
    },
    {
        "sample_id": 1617,
        "pred_sql": "SELECT customers.addressline1, customers.addressline2 FROM customers INNER JOIN orders ON customers.customernumber = orders.customernumber WHERE orders.ordernumber = '10383'",
        "retrieved": [
            1603
        ],
        "token_usage": {
            "tokens": 1415,
            "cost": 0.00029099999999999997
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'"
    },
    {
        "sample_id": 1653,
        "pred_sql": "SELECT productname FROM products ORDER BY priceeach DESC LIMIT 3;",
        "retrieved": [
            1606
        ],
        "token_usage": {
            "tokens": 1343,
            "cost": 0.00024555000000000003
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3"
    },
    {
        "sample_id": 1652,
        "pred_sql": "SELECT SUM(orderdetails.priceeach * orderdetails.quantityordered) AS total_price FROM orders INNER JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber WHERE orders.ordernumber = '10100'",
        "retrieved": [
            1547
        ],
        "token_usage": {
            "tokens": 1433,
            "cost": 0.00028199999999999997
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'"
    },
    {
        "sample_id": 1658,
        "pred_sql": "SELECT orders.ordernumber FROM orders JOIN customers ON orders.customernumber = customers.customernumber WHERE customers.creditlimit = 45300",
        "retrieved": [
            1586
        ],
        "token_usage": {
            "tokens": 1344,
            "cost": 0.00025335
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300"
    },
    {
        "sample_id": 1660,
        "pred_sql": "SELECT strftime('%Y', payments.paymentdate) AS year, COUNT(*) AS transaction_count FROM payments WHERE amount < 10000 GROUP BY year;",
        "retrieved": [
            1555
        ],
        "token_usage": {
            "tokens": 1525,
            "cost": 0.00029535
        },
        "db_id": "car_retails",
        "gold_sql": "SELECT STRFTIME('%Y', t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY STRFTIME('%Y', t1.paymentDate)"
    },
    {
        "sample_id": 9777,
        "pred_sql": "SELECT cards.keywords FROM cards WHERE cards.name = 'Angel of Mercy'",
        "retrieved": [
            9801
        ],
        "token_usage": {
            "tokens": 3843,
            "cost": 0.0006228
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'"
    },
    {
        "sample_id": 9768,
        "pred_sql": "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.power = '*' AND legalities.format = 'commander'",
        "retrieved": [
            9832
        ],
        "token_usage": {
            "tokens": 3954,
            "cost": 0.0006615
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')"
    },
    {
        "sample_id": 9887,
        "pred_sql": "SELECT foreign_data.name FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = \"Ancestor's Chosen\" AND foreign_data.language = 'Korean'",
        "retrieved": [
            9927
        ],
        "token_usage": {
            "tokens": 3969,
            "cost": 0.0006714
        },
        "db_id": "card_games",
        "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'"
    },
    {
        "sample_id": 9809,
        "pred_sql": "SELECT cards.colors FROM cards JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW';",
        "retrieved": [
            9816
        ],
        "token_usage": {
            "tokens": 3904,
            "cost": 0.0006431999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )"
    },
    {
        "sample_id": 9895,
        "pred_sql": "SELECT sets.isforeignonly FROM cards JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Adarkar Valkyrie'",
        "retrieved": [
            9800
        ],
        "token_usage": {
            "tokens": 3881,
            "cost": 0.0006316499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'"
    },
    {
        "sample_id": 9804,
        "pred_sql": "SELECT cards.name, cards.artist FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.isnonfoilonly = '1' AND set_translations.language = 'Japanese'",
        "retrieved": [
            9851
        ],
        "token_usage": {
            "tokens": 3998,
            "cost": 0.0006919499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'"
    },
    {
        "sample_id": 9943,
        "pred_sql": "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.frameversion = '1997' AND cards.hascontentwarning = '1';",
        "retrieved": [
            9832
        ],
        "token_usage": {
            "tokens": 3982,
            "cost": 0.0006684
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'"
    },
    {
        "sample_id": 9907,
        "pred_sql": "SELECT rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Reminisce'",
        "retrieved": [
            9769
        ],
        "token_usage": {
            "tokens": 3920,
            "cost": 0.0006456
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'"
    },
    {
        "sample_id": 9911,
        "pred_sql": "SELECT keyrunecode FROM sets WHERE code = 'PKHC';",
        "retrieved": [
            9864
        ],
        "token_usage": {
            "tokens": 3889,
            "cost": 0.0006292499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'"
    },
    {
        "sample_id": 9866,
        "pred_sql": "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros';",
        "retrieved": [
            9905
        ],
        "token_usage": {
            "tokens": 3943,
            "cost": 0.00064635
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'"
    },
    {
        "sample_id": 9936,
        "pred_sql": "SELECT name, convertedmanacost FROM cards WHERE dueldeck IS NOT NULL ORDER BY convertedmanacost DESC LIMIT 10;",
        "retrieved": [
            9820
        ],
        "token_usage": {
            "tokens": 3929,
            "cost": 0.0006716999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10"
    },
    {
        "sample_id": 9806,
        "pred_sql": "SELECT DISTINCT cards.uuid, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'legacy'",
        "retrieved": [
            9905
        ],
        "token_usage": {
            "tokens": 3968,
            "cost": 0.0006640499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'"
    },
    {
        "sample_id": 9885,
        "pred_sql": "SELECT COUNT(*) FROM set_translations WHERE setcode IN (SELECT sets.code FROM sets WHERE id IN (SELECT cards.setcode FROM cards WHERE name = 'Angel of Mercy'))",
        "retrieved": [
            9927
        ],
        "token_usage": {
            "tokens": 3910,
            "cost": 0.0006378
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL"
    },
    {
        "sample_id": 9861,
        "pred_sql": "SELECT name FROM sets WHERE code = 'ALL'",
        "retrieved": [
            9864
        ],
        "token_usage": {
            "tokens": 3879,
            "cost": 0.0006250499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM sets WHERE code = 'ALL'"
    },
    {
        "sample_id": 9814,
        "pred_sql": "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;",
        "retrieved": [
            9831
        ],
        "token_usage": {
            "tokens": 3984,
            "cost": 0.00067275
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3"
    },
    {
        "sample_id": 9845,
        "pred_sql": "SELECT cards.cardkingdomfoilid, cards.cardkingdomid FROM cards WHERE cards.cardkingdomid IS NOT NULL AND cards.cardkingdomfoilid IS NOT NULL ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;",
        "retrieved": [
            9816
        ],
        "token_usage": {
            "tokens": 3950,
            "cost": 0.0006663
        },
        "db_id": "card_games",
        "gold_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3"
    },
    {
        "sample_id": 9834,
        "pred_sql": "SELECT foreign_data.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type LIKE '%Creature%' AND cards.layout = 'normal' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French';",
        "retrieved": [
            9792
        ],
        "token_usage": {
            "tokens": 3974,
            "cost": 0.00067395
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'"
    },
    {
        "sample_id": 9946,
        "pred_sql": "SELECT DISTINCT artist FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena%'",
        "retrieved": [
            9899
        ],
        "token_usage": {
            "tokens": 3947,
            "cost": 0.0006492
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'"
    },
    {
        "sample_id": 9810,
        "pred_sql": "SELECT cards.name, set_translations.language FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = '10E' AND cards.convertedmanacost = '5';",
        "retrieved": [
            9851
        ],
        "token_usage": {
            "tokens": 3975,
            "cost": 0.0006736499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'"
    },
    {
        "sample_id": 9871,
        "pred_sql": "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'",
        "retrieved": [
            9772
        ],
        "token_usage": {
            "tokens": 3907,
            "cost": 0.00064365
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'"
    },
    {
        "sample_id": 9795,
        "pred_sql": "SELECT DISTINCT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd'",
        "retrieved": [
            9899
        ],
        "token_usage": {
            "tokens": 3935,
            "cost": 0.0006447
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'"
    },
    {
        "sample_id": 9783,
        "pred_sql": "SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.istextless = '0'",
        "retrieved": [
            9805
        ],
        "token_usage": {
            "tokens": 3918,
            "cost": 0.0006524999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0"
    },
    {
        "sample_id": 9898,
        "pred_sql": "SELECT name FROM cards WHERE setcode = 'CSP' ORDER BY convertedmanacost DESC LIMIT 1;",
        "retrieved": [
            9820
        ],
        "token_usage": {
            "tokens": 3900,
            "cost": 0.0006542999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1"
    },
    {
        "sample_id": 9852,
        "pred_sql": "SELECT sets.id, sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name ASC LIMIT 2;",
        "retrieved": [
            9851
        ],
        "token_usage": {
            "tokens": 3951,
            "cost": 0.00065745
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2"
    },
    {
        "sample_id": 9813,
        "pred_sql": "SELECT cards.* FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type = 'Artifact' AND cards.bordercolor = 'black'",
        "retrieved": [
            9792
        ],
        "token_usage": {
            "tokens": 3920,
            "cost": 0.0006464999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'"
    },
    {
        "sample_id": 9881,
        "pred_sql": "SELECT name, convertedmanacost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedmanacost DESC LIMIT 1;",
        "retrieved": [
            9820
        ],
        "token_usage": {
            "tokens": 3897,
            "cost": 0.00065295
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1"
    },
    {
        "sample_id": 9919,
        "pred_sql": "SELECT sets.type FROM sets WHERE sets.name = 'Huiti\u00e8me \u00e9dition'",
        "retrieved": [
            9851
        ],
        "token_usage": {
            "tokens": 3893,
            "cost": 0.0006289499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )"
    },
    {
        "sample_id": 9842,
        "pred_sql": "SELECT COUNT(id) FROM cards WHERE isoversized = '1' AND isreprint = '1' AND ispromo = '1'",
        "retrieved": [
            9831
        ],
        "token_usage": {
            "tokens": 3915,
            "cost": 0.0006353999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1"
    },
    {
        "sample_id": 9891,
        "pred_sql": "SELECT cards.id FROM cards WHERE cards.name = 'Angel of Mercy' AND cards.isonlineonly = '1'",
        "retrieved": [
            9800
        ],
        "token_usage": {
            "tokens": 3903,
            "cost": 0.0006448499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'"
    },
    {
        "sample_id": 9867,
        "pred_sql": "SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'",
        "retrieved": [
            9772
        ],
        "token_usage": {
            "tokens": 3964,
            "cost": 0.0006764999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'"
    },
    {
        "sample_id": 9883,
        "pred_sql": "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;",
        "retrieved": [
            9820
        ],
        "token_usage": {
            "tokens": 3900,
            "cost": 0.0006515999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3"
    },
    {
        "sample_id": 9817,
        "pred_sql": "SELECT COUNT(cards.id) FROM cards WHERE cards.artist = 'UDON' AND cards.availability LIKE '%mtgo%' AND cards.hand = '-1'",
        "retrieved": [
            9841
        ],
        "token_usage": {
            "tokens": 3902,
            "cost": 0.0006419999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'"
    },
    {
        "sample_id": 9890,
        "pred_sql": "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Simplified Chinese';",
        "retrieved": [
            9851
        ],
        "token_usage": {
            "tokens": 3951,
            "cost": 0.0006610499999999998
        },
        "db_id": "card_games",
        "gold_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'"
    },
    {
        "sample_id": 9876,
        "pred_sql": "SELECT COUNT(cards.id) FROM cards WHERE cards.bordercolor = 'white' AND cards.power IS NULL",
        "retrieved": [
            9816
        ],
        "token_usage": {
            "tokens": 3857,
            "cost": 0.00061455
        },
        "db_id": "card_games",
        "gold_sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'"
    },
    {
        "sample_id": 9787,
        "pred_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight'",
        "retrieved": [
            9800
        ],
        "token_usage": {
            "tokens": 3864,
            "cost": 0.00062415
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'"
    },
    {
        "sample_id": 9952,
        "pred_sql": "SELECT DISTINCT cards.frameversion, cards.name FROM cards WHERE cards.artist = 'Allen Williams' UNION SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'banned';",
        "retrieved": [
            9831
        ],
        "token_usage": {
            "tokens": 3990,
            "cost": 0.0006772499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'"
    },
    {
        "sample_id": 9931,
        "pred_sql": "SELECT id FROM sets ORDER BY basesetsize DESC LIMIT 1;",
        "retrieved": [
            9854
        ],
        "token_usage": {
            "tokens": 3926,
            "cost": 0.0006456
        },
        "db_id": "card_games",
        "gold_sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1"
    },
    {
        "sample_id": 9793,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN foreign_data.language = 'French' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(cards.id) AS percentage_french_cards FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.isstoryspotlight = '1'",
        "retrieved": [
            9774
        ],
        "token_usage": {
            "tokens": 4029,
            "cost": 0.0007024499999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1"
    },
    {
        "sample_id": 9921,
        "pred_sql": "SELECT COUNT(*) FROM set_translations WHERE set_translations.setcode IN (SELECT sets.code FROM sets WHERE name = 'Tenth Edition')",
        "retrieved": [
            9927
        ],
        "token_usage": {
            "tokens": 3917,
            "cost": 0.0006437999999999999
        },
        "db_id": "card_games",
        "gold_sql": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL"
    },
    {
        "sample_id": 3119,
        "pred_sql": "SELECT production.id FROM production INNER JOIN country ON production.country = country.origin WHERE country.origin = 'Asia' AND production.model_year = 1979;",
        "retrieved": [
            3132
        ],
        "token_usage": {
            "tokens": 972,
            "cost": 0.00020429999999999998
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.ID FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Japan' AND T1.model_year = 1979"
    },
    {
        "sample_id": 3120,
        "pred_sql": "SELECT country.origin FROM data INNER JOIN production ON data.id = production.id INNER JOIN country ON production.country = country.origin ORDER BY CAST(data.mpg AS FLOAT) ASC LIMIT 1;",
        "retrieved": [
            3094
        ],
        "token_usage": {
            "tokens": 946,
            "cost": 0.0002094
        },
        "db_id": "cars",
        "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg ASC LIMIT 1"
    },
    {
        "sample_id": 3145,
        "pred_sql": "SELECT (CAST(COUNT(CASE WHEN c.origin = 'USA' THEN 1 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_american_cars FROM production p INNER JOIN country c ON p.country = c.origin;",
        "retrieved": [
            3132
        ],
        "token_usage": {
            "tokens": 955,
            "cost": 0.00019814999999999996
        },
        "db_id": "cars",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country"
    },
    {
        "sample_id": 3113,
        "pred_sql": "SELECT data.car_name FROM price INNER JOIN production ON price.id = production.id INNER JOIN country ON production.country = country.origin INNER JOIN data ON data.id = price.id WHERE country.origin = 'Japan' ORDER BY price.price DESC LIMIT 1;",
        "retrieved": [
            3116
        ],
        "token_usage": {
            "tokens": 948,
            "cost": 0.00021374999999999996
        },
        "db_id": "cars",
        "gold_sql": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' ORDER BY T1.price DESC LIMIT 1"
    },
    {
        "sample_id": 3103,
        "pred_sql": "SELECT country.origin, COUNT(production.id) AS car_count, AVG(car_per_year) AS annual_average FROM (SELECT production.country, production.model_year, COUNT(production.id) AS car_per_year FROM production GROUP BY production.country, production.model_year) AS car_per_year_table INNER JOIN country ON car_per_year_table.country = country.origin GROUP BY country.origin ORDER BY car_count DESC LIMIT 1;",
        "retrieved": [
            3132
        ],
        "token_usage": {
            "tokens": 1058,
            "cost": 0.0002514
        },
        "db_id": "cars",
        "gold_sql": "SELECT T2.country, CAST(COUNT(T1.ID) AS REAL) / COUNT(DISTINCT T1.model_year) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin GROUP BY T2.country ORDER BY COUNT(T2.country) DESC LIMIT 1"
    },
    {
        "sample_id": 3096,
        "pred_sql": "SELECT country.origin, AVG(data.mpg) AS average_mpg FROM data INNER JOIN production ON data.id = production.id INNER JOIN country ON country.origin = production.country GROUP BY country.origin ORDER BY average_mpg DESC LIMIT 1;",
        "retrieved": [
            3104
        ],
        "token_usage": {
            "tokens": 1001,
            "cost": 0.00023925
        },
        "db_id": "cars",
        "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg DESC LIMIT 1"
    },
    {
        "sample_id": 3114,
        "pred_sql": "SELECT data.car_name FROM data INNER JOIN price ON data.id = price.id WHERE price.price = 20000",
        "retrieved": [
            3091
        ],
        "token_usage": {
            "tokens": 863,
            "cost": 0.00017535
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000"
    },
    {
        "sample_id": 3097,
        "pred_sql": "SELECT data.car_name, MIN(price.price) AS cheapest_price FROM data INNER JOIN price ON data.id = price.id INNER JOIN production ON data.id = production.id WHERE data.car_name LIKE 'Dodge%' GROUP BY data.car_name ORDER BY cheapest_price LIMIT 1;",
        "retrieved": [
            3093
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.00022409999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name LIKE 'dodge%' ORDER BY T2.price ASC LIMIT 1"
    },
    {
        "sample_id": 3095,
        "pred_sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN data AS T2 ON T2.ID = T1.ID WHERE T2.car_name = 'Ford Maverick'",
        "retrieved": [
            3132
        ],
        "token_usage": {
            "tokens": 990,
            "cost": 0.00021824999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'"
    },
    {
        "sample_id": 3124,
        "pred_sql": "SELECT price.price FROM data INNER JOIN price ON data.id = price.id WHERE data.car_name = 'Chevrolet Bel Air'",
        "retrieved": [
            3093
        ],
        "token_usage": {
            "tokens": 868,
            "cost": 0.00017654999999999998
        },
        "db_id": "cars",
        "gold_sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet bel air'"
    },
    {
        "sample_id": 3090,
        "pred_sql": "SELECT data.displacement / data.cylinders AS swept_volume FROM data INNER JOIN price ON data.id = price.id WHERE price.price = 34538.97449",
        "retrieved": [
            3093
        ],
        "token_usage": {
            "tokens": 903,
            "cost": 0.00019575000000000001
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.displacement / T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 34538.97449"
    },
    {
        "sample_id": 3083,
        "pred_sql": "SELECT data.displacement FROM data INNER JOIN price ON data.id = price.id WHERE price.price = 37443.85589",
        "retrieved": [
            3093
        ],
        "token_usage": {
            "tokens": 885,
            "cost": 0.00018449999999999999
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.displacement FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '37443.85589'"
    },
    {
        "sample_id": 3092,
        "pred_sql": "SELECT COUNT(DISTINCT production.id) FROM production INNER JOIN country ON production.country = country.origin WHERE country.country = 'USA' AND production.model_year = 1981;",
        "retrieved": [
            3132
        ],
        "token_usage": {
            "tokens": 981,
            "cost": 0.00021239999999999996
        },
        "db_id": "cars",
        "gold_sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'USA' AND T1.model_year = 1981"
    },
    {
        "sample_id": 3138,
        "pred_sql": "SELECT data.car_name, price.price FROM data INNER JOIN price ON data.id = price.id ORDER BY data.mpg ASC, price.price DESC LIMIT 1;",
        "retrieved": [
            3104
        ],
        "token_usage": {
            "tokens": 999,
            "cost": 0.0002367
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.mpg DESC, T2.price DESC LIMIT 1"
    },
    {
        "sample_id": 3065,
        "pred_sql": "SELECT data.acceleration FROM price INNER JOIN production ON price.id = production.id INNER JOIN country ON country.origin = production.country INNER JOIN data ON data.id = price.id ORDER BY price.price DESC LIMIT 1",
        "retrieved": [
            3102
        ],
        "token_usage": {
            "tokens": 984,
            "cost": 0.00022365
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1"
    },
    {
        "sample_id": 3135,
        "pred_sql": "SELECT country.origin FROM production INNER JOIN country ON production.country = country.origin INNER JOIN data ON production.id = data.id WHERE data.car_name = 'Chevy C20'",
        "retrieved": [
            3068
        ],
        "token_usage": {
            "tokens": 896,
            "cost": 0.00019874999999999998
        },
        "db_id": "cars",
        "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevy c20'"
    },
    {
        "sample_id": 3109,
        "pred_sql": "SELECT COUNT(data.id) FROM production INNER JOIN data ON production.id = data.id WHERE production.model_year = 1973 AND data.horsepower < 100;",
        "retrieved": [
            3132
        ],
        "token_usage": {
            "tokens": 1018,
            "cost": 0.00023055
        },
        "db_id": "cars",
        "gold_sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1973 AND T1.horsepower < 100"
    },
    {
        "sample_id": 3128,
        "pred_sql": "SELECT data.car_name, production.model_year, data.acceleration, data.cylinders FROM data INNER JOIN production ON data.id = production.id INNER JOIN price ON data.id = price.id ORDER BY price.price ASC LIMIT 1;",
        "retrieved": [
            3121
        ],
        "token_usage": {
            "tokens": 969,
            "cost": 0.00022724999999999997
        },
        "db_id": "cars",
        "gold_sql": "SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1"
    },
    {
        "sample_id": 8738,
        "pred_sql": "SELECT crime.case_number, crime.date, crime.block FROM crime INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.crime_against = 'Persons' AND fbi_code.title = 'Criminal Sexual Assault' AND crime.arrest = 'true' LIMIT 3;",
        "retrieved": [
            8647
        ],
        "token_usage": {
            "tokens": 1872,
            "cost": 0.00039464999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Criminal Sexual Assault' AND T2.arrest = 'TRUE' AND T1.crime_against = 'Persons' LIMIT 3"
    },
    {
        "sample_id": 8742,
        "pred_sql": "SELECT iucr.primary_description FROM community_area INNER JOIN crime ON community_area.community_area_no = crime.community_area_no INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE community_area.community_area_name = 'Rogers Park' GROUP BY iucr.primary_description ORDER BY COUNT(*) DESC LIMIT 1;",
        "retrieved": [
            8664
        ],
        "token_usage": {
            "tokens": 1803,
            "cost": 0.00035729999999999996
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.fbi_code_no, T1.title FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Rogers Park' GROUP BY T1.fbi_code_no, T1.title"
    },
    {
        "sample_id": 8701,
        "pred_sql": "SELECT COUNT(CASE WHEN fbi_code.title = 'Crime Against Society' THEN crime.report_no END) AS crimes_against_society_count FROM community_area INNER JOIN crime ON crime.community_area_no = community_area.community_area_no INNER JOIN fbi_code ON fbi_code.fbi_code_no = crime.fbi_code_no WHERE community_area.side = 'Wentworth'",
        "retrieved": [
            8652
        ],
        "token_usage": {
            "tokens": 1859,
            "cost": 0.00036885
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'"
    },
    {
        "sample_id": 8690,
        "pred_sql": "SELECT community_area.community_area_name, community_area.population FROM community_area INNER JOIN crime ON community_area.community_area_no = crime.community_area_no INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'Solicitation of Prostitution' GROUP BY community_area.community_area_no HAVING COUNT(crime.case_number) > (SELECT AVG(solicitation_count) FROM (SELECT COUNT(case_number) AS solicitation_count FROM crime INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'Solicitation of Prostitution' GROUP BY community_area.community_area_no));",
        "retrieved": [
            8620
        ],
        "token_usage": {
            "tokens": 1945,
            "cost": 0.00041595
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.community_area_name, T2.population FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T3.iucr_no = ( SELECT iucr_no FROM IUCR WHERE secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY iucr_no HAVING COUNT(iucr_no) > ( SELECT SUM(CASE WHEN secondary_description = 'SOLICIT FOR PROSTITUTE' THEN 1.0 ELSE 0 END) / COUNT(iucr_no) AS average FROM IUCR ) )"
    },
    {
        "sample_id": 8717,
        "pred_sql": "SELECT iucr.primary_description, iucr.secondary_description \nFROM iucr \nINNER JOIN crime ON iucr.iucr_no = crime.iucr_no \nWHERE crime.location_description LIKE '%aircraft%' \nGROUP BY iucr.primary_description, iucr.secondary_description \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "retrieved": [
            8645
        ],
        "token_usage": {
            "tokens": 1801,
            "cost": 0.00036644999999999994
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1"
    },
    {
        "sample_id": 8756,
        "pred_sql": "SELECT ward_no FROM ward ORDER BY population DESC LIMIT 1;",
        "retrieved": [
            8706
        ],
        "token_usage": {
            "tokens": 1779,
            "cost": 0.00031679999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1"
    },
    {
        "sample_id": 8596,
        "pred_sql": "SELECT COUNT(*) AS total_crimes FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'Central Chicago';",
        "retrieved": [
            8646
        ],
        "token_usage": {
            "tokens": 1777,
            "cost": 0.00033315
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'"
    },
    {
        "sample_id": 8680,
        "pred_sql": "SELECT crime.location_description, COUNT(*) as crime_count FROM crime GROUP BY crime.location_description ORDER BY crime_count DESC LIMIT 1;",
        "retrieved": [
            8662
        ],
        "token_usage": {
            "tokens": 1767,
            "cost": 0.0003294
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.location_description FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Austin' GROUP BY T2.location_description ORDER BY COUNT(T2.case_number) DESC LIMIT 1"
    },
    {
        "sample_id": 8753,
        "pred_sql": "SELECT crime.report_no FROM district INNER JOIN crime ON district.district_no = crime.district_no WHERE district.commander = 'Jill M. Stevens'",
        "retrieved": [
            8770
        ],
        "token_usage": {
            "tokens": 1740,
            "cost": 0.00033164999999999996
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.commander = 'Jill M. Stevens' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no"
    },
    {
        "sample_id": 8719,
        "pred_sql": "SELECT SUM(CASE WHEN crime.arrest = 'true' THEN 1 ELSE 0 END) AS total_arrests FROM crime INNER JOIN district ON crime.district_no = district.district_no WHERE crime.iucr_no = (SELECT iucr_no FROM iucr WHERE primary_description = 'Burglary' AND secondary_description = 'Forcible Entry') AND crime.location_description = 'Day Care Center'",
        "retrieved": [
            8647
        ],
        "token_usage": {
            "tokens": 1780,
            "cost": 0.00033765
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'DAY CARE CENTER' AND T1.secondary_description = 'FORCIBLE ENTRY' AND T1.primary_description = 'BURGLARY'"
    },
    {
        "sample_id": 8607,
        "pred_sql": "SELECT district.district_name FROM district INNER JOIN crime ON district.district_no = crime.district_no WHERE crime.case_number = 'JB100065'",
        "retrieved": [
            8770
        ],
        "token_usage": {
            "tokens": 1707,
            "cost": 0.0003123
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB100065'"
    },
    {
        "sample_id": 8600,
        "pred_sql": "SELECT COUNT(*) FROM crime INNER JOIN neighborhood ON crime.community_area_no = neighborhood.community_area_no WHERE neighborhood.neighborhood_name = 'Woodlawn' AND crime.date LIKE '2018-01%'",
        "retrieved": [
            8646
        ],
        "token_usage": {
            "tokens": 1772,
            "cost": 0.0003252
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'"
    },
    {
        "sample_id": 8765,
        "pred_sql": "SELECT COUNT(*) FROM crime INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE iucr.primary_description = 'BATTERY' AND crime.arrest = 'false';",
        "retrieved": [
            8758
        ],
        "token_usage": {
            "tokens": 1726,
            "cost": 0.00033495
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T2.arrest = 'FALSE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'"
    },
    {
        "sample_id": 8681,
        "pred_sql": "SELECT side, COUNT(*) AS average_community_areas FROM community_area GROUP BY side;",
        "retrieved": [
            8675
        ],
        "token_usage": {
            "tokens": 1679,
            "cost": 0.00029774999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(T1.ward_no) AS REAL) / COUNT(DISTINCT T3.side) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no"
    },
    {
        "sample_id": 8617,
        "pred_sql": "SELECT fbi_code.fbi_code_no, fbi_code.description FROM fbi_code JOIN crime ON fbi_code.fbi_code_no = crime.fbi_code_no WHERE crime.case_number = 'JB134191'",
        "retrieved": [
            8678
        ],
        "token_usage": {
            "tokens": 1734,
            "cost": 0.00033884999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'"
    },
    {
        "sample_id": 8741,
        "pred_sql": "SELECT community_area.community_area_name FROM community_area INNER JOIN crime ON community_area.community_area_no = crime.community_area_no WHERE crime.fbi_code_no = (SELECT fbi_code_no FROM fbi_code WHERE title = 'Fraud') GROUP BY community_area.community_area_name LIMIT 3;",
        "retrieved": [
            8664
        ],
        "token_usage": {
            "tokens": 1777,
            "cost": 0.00034439999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Criminal Sexual Assault' LIMIT 3"
    },
    {
        "sample_id": 8757,
        "pred_sql": "SELECT COUNT(*) FROM crime WHERE iucr_no IN (SELECT iucr_no FROM iucr WHERE primary_description = 'ASSAULT')",
        "retrieved": [
            8694
        ],
        "token_usage": {
            "tokens": 1704,
            "cost": 0.00031769999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) FROM IUCR WHERE primary_description = 'ASSAULT'"
    },
    {
        "sample_id": 8667,
        "pred_sql": "SELECT crime.report_no FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.side = 'far north side' AND community_area.population > 60000;",
        "retrieved": [
            8652
        ],
        "token_usage": {
            "tokens": 1802,
            "cost": 0.00033015
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T1.population > 60000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Far North '"
    },
    {
        "sample_id": 8611,
        "pred_sql": "SELECT crime.district_no, COUNT(*) AS murder_count FROM crime INNER JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'First Degree Murder' GROUP BY crime.district_no ORDER BY murder_count DESC LIMIT 1;",
        "retrieved": [
            8595
        ],
        "token_usage": {
            "tokens": 1743,
            "cost": 0.0003348
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.district_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "sample_id": 8610,
        "pred_sql": "SELECT COUNT(*) FROM crime INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE iucr.primary_description = 'Simple Assault' AND crime.date = '2018/09/08';",
        "retrieved": [
            8700
        ],
        "token_usage": {
            "tokens": 1760,
            "cost": 0.00034139999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T2.secondary_description = 'SIMPLE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '%9/8/2018%' AND T2.primary_description = 'ASSAULT'"
    },
    {
        "sample_id": 8624,
        "pred_sql": "SELECT MIN(population) AS least_population FROM district;",
        "retrieved": [
            8675
        ],
        "token_usage": {
            "tokens": 1649,
            "cost": 0.0002802
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(population) FROM Community_Area GROUP BY side ORDER BY SUM(population) LIMIT 1"
    },
    {
        "sample_id": 8739,
        "pred_sql": "SELECT district.district_name FROM district INNER JOIN crime ON district.district_no = crime.district_no WHERE crime.case_number = 'JB106545';",
        "retrieved": [
            8700
        ],
        "token_usage": {
            "tokens": 1721,
            "cost": 0.000318
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Criminal Sexual Assault' AND T2.crime_against = 'Persons' AND T1.arrest = 'TRUE' LIMIT 3"
    },
    {
        "sample_id": 8656,
        "pred_sql": "SELECT (SUM(CASE WHEN crime.arrest = 'true' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS arrest_percentage FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'West Pullman' AND crime.domestic = 'true';",
        "retrieved": [
            8700
        ],
        "token_usage": {
            "tokens": 1854,
            "cost": 0.0003978
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.arrest = 'TRUE' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'West Pullman' AND T2.domestic = 'TRUE'"
    },
    {
        "sample_id": 8712,
        "pred_sql": "SELECT COUNT(*) FROM district WHERE zip_code = 60608;",
        "retrieved": [
            8647
        ],
        "token_usage": {
            "tokens": 1710,
            "cost": 0.00029654999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) AS cnt FROM District WHERE zip_code = 60608"
    },
    {
        "sample_id": 8659,
        "pred_sql": "SELECT COUNT(*) FROM crime WHERE date = '2018-01-01'",
        "retrieved": [
            8646
        ],
        "token_usage": {
            "tokens": 1730,
            "cost": 0.00030224999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%'"
    },
    {
        "sample_id": 8589,
        "pred_sql": "SELECT ward.alderman_first_name, ward.alderman_last_name FROM ward INNER JOIN crime ON ward.ward_no = crime.ward_no INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'Central Chicago' GROUP BY ward.alderman_first_name, ward.alderman_last_name;",
        "retrieved": [
            8646
        ],
        "token_usage": {
            "tokens": 1842,
            "cost": 0.00037035
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT commander FROM District WHERE district_name = 'Central'"
    },
    {
        "sample_id": 8603,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN crime.location_description IS NOT NULL THEN 1 ELSE 0 END) AS FLOAT) * 1.0 / COUNT(crime.location_description) AS average_crimes FROM community_area INNER JOIN crime ON community_area.community_area_no = crime.community_area_no INNER JOIN neighborhood ON crime.community_area_no = neighborhood.community_area_no WHERE neighborhood.neighborhood_name = 'Central Chicago'",
        "retrieved": [
            8754
        ],
        "token_usage": {
            "tokens": 1835,
            "cost": 0.00035939999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(T1.report_no) AS REAL) / COUNT(T2.community_area_no) FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.side = 'Central'"
    },
    {
        "sample_id": 8609,
        "pred_sql": "SELECT district.commander FROM crime INNER JOIN district ON crime.district_no = district.district_no WHERE crime.case_number = 'JB524952'",
        "retrieved": [
            8646
        ],
        "token_usage": {
            "tokens": 1787,
            "cost": 0.00033555
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB524952'"
    },
    {
        "sample_id": 8604,
        "pred_sql": "SELECT (COUNT(CASE WHEN d.district_name = 'Central' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_crimes_in_central_district\nFROM crime c\nJOIN district d ON c.district_no = d.district_no;",
        "retrieved": [
            8770
        ],
        "token_usage": {
            "tokens": 1709,
            "cost": 0.00031125
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no"
    },
    {
        "sample_id": 8699,
        "pred_sql": "SELECT COUNT(DISTINCT iucr.primary_description) AS different_crime_types FROM crime INNER JOIN neighborhood ON crime.community_area_no = neighborhood.community_area_no INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE neighborhood.neighborhood_name = 'Hermosa';",
        "retrieved": [
            8692
        ],
        "token_usage": {
            "tokens": 1879,
            "cost": 0.0003516
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT SUM(CASE WHEN T4.neighborhood_name = 'Hermosa' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T4 ON T4.community_area_no = T3.community_area_no"
    },
    {
        "sample_id": 8657,
        "pred_sql": "WITH DomesticCases AS (\n    SELECT COUNT(*) AS total_domestic_cases\n    FROM crime\n    WHERE domestic = 'true' AND district_no IN (\n        SELECT district_no\n        FROM district\n        WHERE commander = 'Christopher Taliaferro'\n    )\n), TotalCases AS (\n    SELECT COUNT(*) AS total_cases\n    FROM crime\n    WHERE district_no IN (\n        SELECT district_no\n        FROM district\n        WHERE commander = 'Christopher Taliaferro'\n    )\n), BankDomesticCases AS (\n    SELECT report_no\n    FROM crime\n    WHERE domestic = 'true' AND location_description LIKE '%bank%' AND district_no IN (\n        SELECT district_no\n        FROM district\n        WHERE commander = 'Christopher Taliaferro'\n    )\n)\nSELECT (SELECT total_domestic_cases FROM DomesticCases) * 100.0 / (SELECT total_cases FROM TotalCases) AS domestic_percentage,\n       (SELECT GROUP_CONCAT(report_no) FROM BankDomesticCases) AS bank_case_reports;",
        "retrieved": [
            8700
        ],
        "token_usage": {
            "tokens": 1913,
            "cost": 0.00042599999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.domestic = 'TRUE' THEN T1.report_no END) AS REAL) * 100 / COUNT(T1.report_no), COUNT(CASE WHEN T1.domestic = 'TRUE' AND T1.location_description = 'BANK' THEN T1.report_no END) AS \"number\" FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T2.alderman_first_name = 'Christopher' AND T2.alderman_last_name = 'Taliaferro'"
    },
    {
        "sample_id": 8695,
        "pred_sql": "SELECT ward.alderman_first_name FROM ward WHERE population > 50000;",
        "retrieved": [
            8653
        ],
        "token_usage": {
            "tokens": 1773,
            "cost": 0.0003249
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT alderman_first_name FROM Ward WHERE Population > 50000"
    },
    {
        "sample_id": 8641,
        "pred_sql": "SELECT district.commander, district.email FROM district JOIN community_area ON district.district_no = community_area.side WHERE community_area.community_area_name = 'Chicago Lawn'",
        "retrieved": [
            8677
        ],
        "token_usage": {
            "tokens": 1674,
            "cost": 0.00030734999999999996
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn'"
    },
    {
        "sample_id": 8682,
        "pred_sql": "SELECT community_area.community_area_name, COUNT(crime.report_no) AS crime_count\nFROM community_area\nINNER JOIN crime ON crime.community_area_no = community_area.community_area_no\nGROUP BY community_area.community_area_name\nORDER BY crime_count DESC\nLIMIT 1;",
        "retrieved": [
            8652
        ],
        "token_usage": {
            "tokens": 1825,
            "cost": 0.00034935
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T2.location_description = 'STREET' GROUP BY T1.community_area_no ORDER BY COUNT(T2.location_description) DESC LIMIT 1"
    },
    {
        "sample_id": 8592,
        "pred_sql": "SELECT COUNT(neighborhood.neighborhood_name) AS neighborhood_count FROM community_area INNER JOIN neighborhood ON neighborhood.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'Lincoln Square'",
        "retrieved": [
            8650
        ],
        "token_usage": {
            "tokens": 1713,
            "cost": 0.0003141
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3"
    },
    {
        "sample_id": 8614,
        "pred_sql": "SELECT ward.alderman_first_name || ' ' || ward.alderman_last_name AS full_name \nFROM crime \nINNER JOIN ward ON crime.ward_no = ward.ward_no \nWHERE crime.case_number = 'JB103470'",
        "retrieved": [
            8646
        ],
        "token_usage": {
            "tokens": 1822,
            "cost": 0.00035339999999999997
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.case_number = 'JB103470'"
    },
    {
        "sample_id": 8708,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM crime WHERE district_no = (SELECT district_no FROM district WHERE district_name = 'Jefferson Park'))) AS non_domestic_crime_percentage FROM crime WHERE district_no = (SELECT district_no FROM district WHERE district_name = 'Jefferson Park') AND domestic = 'false';",
        "retrieved": [
            8700
        ],
        "token_usage": {
            "tokens": 1736,
            "cost": 0.00032654999999999994
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T2.case_number END) AS REAL) * 100 / COUNT(T2.case_number) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Jefferson Park'"
    },
    {
        "sample_id": 8709,
        "pred_sql": "SELECT AVG(ward.population) AS average_population\nFROM crime\nINNER JOIN ward ON crime.ward_no = ward.ward_no\nINNER JOIN iucr ON crime.iucr_no = iucr.iucr_no\nWHERE iucr.primary_description = 'Apartment' AND crime.arrest = 'false';",
        "retrieved": [
            8646
        ],
        "token_usage": {
            "tokens": 1828,
            "cost": 0.00036014999999999995
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT AVG(T2.Population) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T1.arrest = 'FALSE'"
    },
    {
        "sample_id": 8698,
        "pred_sql": "SELECT crime.latitude, crime.longitude, crime.location_description FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'Belmont Cragin'",
        "retrieved": [
            8653
        ],
        "token_usage": {
            "tokens": 1808,
            "cost": 0.00034725
        },
        "db_id": "chicago_crime",
        "gold_sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Belmont Cragin' GROUP BY T2.latitude, T2.longitude"
    },
    {
        "sample_id": 4154,
        "pred_sql": "SELECT COUNT(cites.cited_paper_id) FROM cites JOIN paper ON cites.citing_paper_id = paper.paper_id JOIN content ON paper.paper_id = content.paper_id WHERE cites.citing_paper_id = 'schmidt99advanced' AND content.word_cited_id = 'word3555';",
        "retrieved": [
            4140
        ],
        "token_usage": {
            "tokens": 740,
            "cost": 0.00018389999999999997
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT COUNT(T2.paper_id) FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'schmidt99advanced' AND T2.word_cited_id = 'word3555'"
    },
    {
        "sample_id": 4150,
        "pred_sql": "SELECT DISTINCT word_cited_id FROM (SELECT DISTINCT content.word_cited_id FROM paper INNER JOIN content ON paper.paper_id = content.paper_id WHERE paper.class_label = 'AI') AS ai_words INNER JOIN (SELECT DISTINCT content.word_cited_id FROM paper INNER JOIN content ON paper.paper_id = content.paper_id WHERE paper.class_label = 'IR') AS ir_words ON ai_words.word_cited_id = ir_words.word_cited_id;",
        "retrieved": [
            4147
        ],
        "token_usage": {
            "tokens": 789,
            "cost": 0.00021824999999999997
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'"
    },
    {
        "sample_id": 4142,
        "pred_sql": "SELECT p2.paper_id, p2.class_label FROM cites AS c INNER JOIN content AS co ON c.cited_paper_id = co.paper_id INNER JOIN paper AS p2 ON c.citing_paper_id = p2.paper_id WHERE co.word_cited_id = 1 AND c.cited_paper_id = '315017';",
        "retrieved": [
            4145
        ],
        "token_usage": {
            "tokens": 796,
            "cost": 0.00020264999999999997
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017"
    },
    {
        "sample_id": 4153,
        "pred_sql": "SELECT content.word_cited_id FROM cites INNER JOIN paper ON cites.cited_paper_id = paper.paper_id INNER JOIN content ON cites.cited_paper_id = content.paper_id WHERE paper.class_label = 'sima01computational'",
        "retrieved": [
            4143
        ],
        "token_usage": {
            "tokens": 785,
            "cost": 0.00019154999999999997
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT DISTINCT T2.word_cited_id FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'sima01computational'"
    },
    {
        "sample_id": 4157,
        "pred_sql": "SELECT COUNT(cites.cited_paper_id) AS citation_count FROM cites JOIN paper ON cites.cited_paper_id = paper.paper_id WHERE paper.class_label = 'ML' AND cites.cited_paper_id = 'butz01algorithmic';",
        "retrieved": [
            4151
        ],
        "token_usage": {
            "tokens": 823,
            "cost": 0.00019004999999999998
        },
        "db_id": "citeseer",
        "gold_sql": "SELECT COUNT(T1.paper_id) FROM paper AS T1 INNER JOIN cites AS T2 ON T1.paper_id = T2.citing_paper_id WHERE T1.class_label = 'ML' AND T2.cited_paper_id = 'butz01algorithmic'"
    },
    {
        "sample_id": 570,
        "pred_sql": "SELECT repo.id FROM repo INNER JOIN solution ON repo.id = solution.repid GROUP BY repo.id ORDER BY COUNT(solution.path) DESC LIMIT 1",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 966,
            "cost": 0.00020924999999999996
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1"
    },
    {
        "sample_id": 687,
        "pred_sql": "SELECT COUNT(solution.path) FROM solution INNER JOIN repo ON solution.repid = repo.id WHERE repo.stars = '111' AND repo.forks = '58' AND repo.watchers = '111'",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 977,
            "cost": 0.00021314999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111"
    },
    {
        "sample_id": 579,
        "pred_sql": "SELECT COUNT(DISTINCT solution.path) FROM solution INNER JOIN repo ON solution.repid = repo.id WHERE repo.stars = (SELECT stars FROM repo ORDER BY stars DESC LIMIT 1 OFFSET 1)",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 961,
            "cost": 0.00020625
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )"
    },
    {
        "sample_id": 671,
        "pred_sql": "SELECT method.apicalls FROM method WHERE method.id = '10'",
        "retrieved": [
            589
        ],
        "token_usage": {
            "tokens": 880,
            "cost": 0.00018149999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10"
    },
    {
        "sample_id": 624,
        "pred_sql": "SELECT solution.path FROM solution INNER JOIN method ON solution.id = method.solutionid WHERE method.name LIKE '%sw%' GROUP BY solution.path ORDER BY COUNT(solution.path) DESC",
        "retrieved": [
            616
        ],
        "token_usage": {
            "tokens": 971,
            "cost": 0.0002028
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'"
    },
    {
        "sample_id": 607,
        "pred_sql": "SELECT repo.stars FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.id = '45997'",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 952,
            "cost": 0.0002004
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997"
    },
    {
        "sample_id": 675,
        "pred_sql": "SELECT SUBSTRING(SUBSTRING(method.name, INSTR(method.name, '.') + 1), 1, INSTR(SUBSTRING(method.name, INSTR(method.name, '.') + 1), '.') - 1) FROM method WHERE method.nametokenized = 'Sky.Excel.ExcelBook.TypeConvert'",
        "retrieved": [
            587
        ],
        "token_usage": {
            "tokens": 1096,
            "cost": 0.00027015
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'"
    },
    {
        "sample_id": 604,
        "pred_sql": "SELECT method.fullcomment FROM method WHERE method.name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'",
        "retrieved": [
            658
        ],
        "token_usage": {
            "tokens": 989,
            "cost": 0.00021674999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'"
    },
    {
        "sample_id": 623,
        "pred_sql": "SELECT COUNT(solution.repoid) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.stars = '3060'",
        "retrieved": [
            608
        ],
        "token_usage": {
            "tokens": 926,
            "cost": 0.00019245
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060"
    },
    {
        "sample_id": 683,
        "pred_sql": "SELECT method.name FROM method INNER JOIN solution ON method.solutionid = solution.id WHERE solution.path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln'",
        "retrieved": [
            654
        ],
        "token_usage": {
            "tokens": 991,
            "cost": 0.00022064999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'"
    },
    {
        "sample_id": 588,
        "pred_sql": "SELECT method.commentisxml FROM method WHERE method.name = 'HtmlSharp.HtmlParser.Feed'",
        "retrieved": [
            680
        ],
        "token_usage": {
            "tokens": 973,
            "cost": 0.00020625
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'"
    },
    {
        "sample_id": 618,
        "pred_sql": "SELECT COUNT(*) FROM solution WHERE repoid IN (SELECT id FROM repo WHERE stars = '189') AND wascompiled = '0'",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 940,
            "cost": 0.00019049999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0"
    },
    {
        "sample_id": 666,
        "pred_sql": "SELECT summary FROM method WHERE lang = 'cs'",
        "retrieved": [
            689
        ],
        "token_usage": {
            "tokens": 916,
            "cost": 0.00018059999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'"
    },
    {
        "sample_id": 651,
        "pred_sql": "SELECT DISTINCT solution.path FROM repo INNER JOIN solution AS T2 ON repo.id = T2.repid WHERE T2.id = '1'",
        "retrieved": [
            634
        ],
        "token_usage": {
            "tokens": 925,
            "cost": 0.0002004
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1"
    },
    {
        "sample_id": 686,
        "pred_sql": "SELECT COUNT(repo.id) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.path = 'ninject_Ninject\\Ninject.sln'",
        "retrieved": [
            599
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.00019754999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'"
    },
    {
        "sample_id": 590,
        "pred_sql": "SELECT COUNT(solution.id) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.stars = (SELECT MAX(stars) FROM repo)",
        "retrieved": [
            595
        ],
        "token_usage": {
            "tokens": 910,
            "cost": 0.00018015
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )"
    },
    {
        "sample_id": 577,
        "pred_sql": "SELECT repo.url, COUNT(solution.path) AS solution_count, SUM(CASE WHEN solution.wascompiled = '0' THEN 1 ELSE 0 END) AS compiled_count\nFROM repo\nINNER JOIN solution ON repo.id = solution.repid\nWHERE repo.stars BETWEEN 6000 AND 9000\nGROUP BY repo.url\nORDER BY solution_count DESC\nLIMIT 1;",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 1059,
            "cost": 0.0002511
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1"
    },
    {
        "sample_id": 665,
        "pred_sql": "SELECT DISTINCT solution.path FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.stars = (SELECT MAX(stars) FROM repo)",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 1009,
            "cost": 0.00023549999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )"
    },
    {
        "sample_id": 635,
        "pred_sql": "SELECT repo.id FROM repo INNER JOIN solution ON repo.id = solution.repid INNER JOIN method ON solution.id = method.solutionid WHERE method.name LIKE '%ro%';",
        "retrieved": [
            685
        ],
        "token_usage": {
            "tokens": 933,
            "cost": 0.00018809999999999996
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'"
    },
    {
        "sample_id": 581,
        "pred_sql": "SELECT method.fullcomment FROM method INNER JOIN solution ON method.solutionid = solution.id WHERE solution.path = 'bmatzelle_nini\\Source\\Nini.sln' AND method.nametokenized = 'alias text add alias'",
        "retrieved": [
            658
        ],
        "token_usage": {
            "tokens": 1041,
            "cost": 0.00024839999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'"
    },
    {
        "sample_id": 677,
        "pred_sql": "SELECT repo.watchers FROM solution INNER JOIN repo ON solution.repid = repo.id WHERE solution.path = 'maff_se3ue7\\US7.sln'",
        "retrieved": [
            616
        ],
        "token_usage": {
            "tokens": 1024,
            "cost": 0.00023234999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'"
    },
    {
        "sample_id": 649,
        "pred_sql": "SELECT method.name FROM method INNER JOIN solution ON method.solutionid = solution.id WHERE solution.path = 'wallerdev_htmlsharp\\HtmlSharp.sln'",
        "retrieved": [
            654
        ],
        "token_usage": {
            "tokens": 992,
            "cost": 0.00022574999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'"
    },
    {
        "sample_id": 617,
        "pred_sql": "SELECT repo.watchers FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE solution.id = '338082'",
        "retrieved": [
            646
        ],
        "token_usage": {
            "tokens": 961,
            "cost": 0.00021525
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082"
    },
    {
        "sample_id": 661,
        "pred_sql": "SELECT ((r1.stars - r2.stars) / r2.stars) * 100 AS percentage_difference FROM solution s1 INNER JOIN repo r1 ON s1.repid = r1.id INNER JOIN solution s2 ON s2.id = '2' INNER JOIN repo r2 ON s2.repid = r2.id WHERE s1.id = '1';",
        "retrieved": [
            591
        ],
        "token_usage": {
            "tokens": 981,
            "cost": 0.00021509999999999997
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId"
    },
    {
        "sample_id": 644,
        "pred_sql": "SELECT r.forks FROM repo r JOIN solution s ON r.id = s.repid WHERE s.id = '35'",
        "retrieved": [
            569
        ],
        "token_usage": {
            "tokens": 912,
            "cost": 0.00018764999999999998
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35"
    },
    {
        "sample_id": 593,
        "pred_sql": "SELECT COUNT(solution.repoid) FROM repo INNER JOIN solution ON repo.id = solution.repid WHERE repo.stars > 1000 AND solution.wascompiled = 1",
        "retrieved": [
            595
        ],
        "token_usage": {
            "tokens": 975,
            "cost": 0.0002115
        },
        "db_id": "codebase_comments",
        "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1"
    },
    {
        "sample_id": 10136,
        "pred_sql": "SELECT comments.text, comments.creationdate FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Harvey Motulsky'",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1896,
            "cost": 0.0003564
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'"
    },
    {
        "sample_id": 10020,
        "pred_sql": "SELECT (COUNT(CASE WHEN strftime('%Y', date) = '2010' THEN 1 END) * 100.0 / COUNT(*)) - (COUNT(CASE WHEN strftime('%Y', date) = '2011' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_difference FROM badges;",
        "retrieved": [
            10114
        ],
        "token_usage": {
            "tokens": 1886,
            "cost": 0.00035805
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'"
    },
    {
        "sample_id": 9994,
        "pred_sql": "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1894,
            "cost": 0.000348
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"
    },
    {
        "sample_id": 10067,
        "pred_sql": "SELECT COUNT(*) AS negative_comment_count FROM comments WHERE userid = 13 AND score < 60;",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1825,
            "cost": 0.0003156
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60"
    },
    {
        "sample_id": 10062,
        "pred_sql": "SELECT (SELECT viewcount FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Mornington')) - (SELECT viewcount FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Amos')) AS view_count_difference;",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1877,
            "cost": 0.00034005
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId"
    },
    {
        "sample_id": 10106,
        "pred_sql": "SELECT (COUNT(CASE WHEN users.age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(users.id)) AS teenage_percentage FROM users;",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1894,
            "cost": 0.00034034999999999995
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users"
    },
    {
        "sample_id": 10050,
        "pred_sql": "SELECT users.displayname FROM users WHERE users.views = (SELECT MAX(users.views) FROM users)",
        "retrieved": [
            9956
        ],
        "token_usage": {
            "tokens": 1790,
            "cost": 0.00031035
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"
    },
    {
        "sample_id": 10122,
        "pred_sql": "SELECT COUNT(*) FROM votes WHERE bountyamount > 30;",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1897,
            "cost": 0.00033899999999999995
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30"
    },
    {
        "sample_id": 10009,
        "pred_sql": "SELECT posts.title, COUNT(comments.id) AS comment_count, AVG(posts.viewcount) AS average_view_count FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'humor' GROUP BY posts.id ORDER BY average_view_count;",
        "retrieved": [
            10109
        ],
        "token_usage": {
            "tokens": 1951,
            "cost": 0.00037454999999999997
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text"
    },
    {
        "sample_id": 10034,
        "pred_sql": "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'Pierre'",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1836,
            "cost": 0.00032445
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'"
    },
    {
        "sample_id": 9973,
        "pred_sql": "SELECT COUNT(*) AS badge_count FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'csgillespie')",
        "retrieved": [
            9976
        ],
        "token_usage": {
            "tokens": 1820,
            "cost": 0.00030764999999999997
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    },
    {
        "sample_id": 10100,
        "pred_sql": "SELECT posts.id, posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;",
        "retrieved": [
            10071
        ],
        "token_usage": {
            "tokens": 1893,
            "cost": 0.00035324999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1"
    },
    {
        "sample_id": 9972,
        "pred_sql": "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;",
        "retrieved": [
            10052
        ],
        "token_usage": {
            "tokens": 1887,
            "cost": 0.0003402
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )"
    },
    {
        "sample_id": 9995,
        "pred_sql": "SELECT * FROM comments WHERE score = 17;",
        "retrieved": [
            10109
        ],
        "token_usage": {
            "tokens": 1820,
            "cost": 0.00030179999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT Text FROM comments WHERE Score = 17"
    },
    {
        "sample_id": 10069,
        "pred_sql": "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date LIKE '2011%' AND users.location = 'North Pole'",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1885,
            "cost": 0.00035295
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'"
    },
    {
        "sample_id": 10091,
        "pred_sql": "SELECT MIN(votes.creationdate) AS first_vote_date FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'chl'",
        "retrieved": [
            10054
        ],
        "token_usage": {
            "tokens": 1901,
            "cost": 0.0003481499999999999
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1"
    },
    {
        "sample_id": 10075,
        "pred_sql": "SELECT users.displayname FROM users WHERE users.id = (SELECT posts.owneruserid FROM posts ORDER BY posts.viewcount DESC LIMIT 1)",
        "retrieved": [
            10078
        ],
        "token_usage": {
            "tokens": 1848,
            "cost": 0.00031814999999999995
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )"
    },
    {
        "sample_id": 10099,
        "pred_sql": "SELECT COUNT(users.id) FROM users INNER JOIN posts AS T2 ON users.id = T2.owneruserid WHERE users.displayname = 'Jay Stevens' AND strftime('%Y', T2.creationdate) = '2010'",
        "retrieved": [
            9989
        ],
        "token_usage": {
            "tokens": 1851,
            "cost": 0.00033255
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'"
    },
    {
        "sample_id": 10066,
        "pred_sql": "SELECT posthistory.id, posts.lasteditdate FROM posthistory INNER JOIN posts AS T2 ON posthistory.postid = T2.id WHERE posts.title = 'Detecting a given face in a database of facial images'",
        "retrieved": [
            10071
        ],
        "token_usage": {
            "tokens": 1858,
            "cost": 0.00033045
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'"
    },
    {
        "sample_id": 10021,
        "pred_sql": "SELECT DISTINCT posthistorytypeid FROM posthistory WHERE postid = 3720; SELECT COUNT(DISTINCT userid) FROM comments WHERE postid = 3720;",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1876,
            "cost": 0.00034079999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720"
    },
    {
        "sample_id": 9998,
        "pred_sql": "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.text = 'thank you user93!';",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1875,
            "cost": 0.00034605
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'"
    },
    {
        "sample_id": 10026,
        "pred_sql": "SELECT AVG(users.upvotes) AS average_upvotes, AVG(users.age) AS average_age FROM users INNER JOIN posts ON users.id = posts.owneruserid GROUP BY users.id HAVING COUNT(posts.id) > 10;",
        "retrieved": [
            9979
        ],
        "token_usage": {
            "tokens": 1946,
            "cost": 0.0003648
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId"
    },
    {
        "sample_id": 9960,
        "pred_sql": "SELECT posts.title FROM posts INNER JOIN users AS T2 ON posts.owneruserid = T2.id WHERE T2.displayname = 'csgillespie'",
        "retrieved": [
            10004
        ],
        "token_usage": {
            "tokens": 1868,
            "cost": 0.0003405
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    },
    {
        "sample_id": 10005,
        "pred_sql": "SELECT SUM(posts.score) AS total_score, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE users.displayname = 'Yevgeny'",
        "retrieved": [
            10102
        ],
        "token_usage": {
            "tokens": 1876,
            "cost": 0.0003435
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl"
    },
    {
        "sample_id": 9967,
        "pred_sql": "SELECT COUNT(posts.id) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE users.displayname = 'csgillespie' AND posts.parentid IS NULL",
        "retrieved": [
            9989
        ],
        "token_usage": {
            "tokens": 1853,
            "cost": 0.00033105
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL"
    },
    {
        "sample_id": 10093,
        "pred_sql": "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1;",
        "retrieved": [
            9976
        ],
        "token_usage": {
            "tokens": 1893,
            "cost": 0.0003492
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.\"Name\" = 'Autobiographer' ORDER BY T2.Date LIMIT 1"
    },
    {
        "sample_id": 10002,
        "pred_sql": "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10;",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1837,
            "cost": 0.0003273
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10"
    },
    {
        "sample_id": 10128,
        "pred_sql": "SELECT comments.text, users.displayname FROM users INNER JOIN posts AS T2 ON users.id = T2.owneruserid INNER JOIN comments AS T3 ON T2.id = T3.postid WHERE T2.title = 'linear regression' ORDER BY users.creationdate;",
        "retrieved": [
            10116
        ],
        "token_usage": {
            "tokens": 1936,
            "cost": 0.00036734999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'"
    },
    {
        "sample_id": 10024,
        "pred_sql": "SELECT posts.id, posts.owneruserid FROM posts WHERE posts.score > 60;",
        "retrieved": [
            10102
        ],
        "token_usage": {
            "tokens": 1845,
            "cost": 0.00032399999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )"
    },
    {
        "sample_id": 9953,
        "pred_sql": "SELECT displayname, reputation FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY reputation DESC LIMIT 1;",
        "retrieved": [
            10016
        ],
        "token_usage": {
            "tokens": 1837,
            "cost": 0.00032189999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )"
    },
    {
        "sample_id": 10096,
        "pred_sql": "SELECT users.displayname FROM users WHERE users.reputation = (SELECT MAX(users.reputation) FROM users)",
        "retrieved": [
            10065
        ],
        "token_usage": {
            "tokens": 1834,
            "cost": 0.0003327
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"
    },
    {
        "sample_id": 10058,
        "pred_sql": "SELECT COUNT(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 60;",
        "retrieved": [
            10109
        ],
        "token_usage": {
            "tokens": 1909,
            "cost": 0.00035429999999999994
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60"
    },
    {
        "sample_id": 9984,
        "pred_sql": "SELECT COUNT(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount = 1910",
        "retrieved": [
            10131
        ],
        "token_usage": {
            "tokens": 1848,
            "cost": 0.00032399999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910"
    },
    {
        "sample_id": 10138,
        "pred_sql": "SELECT (COUNT(CASE WHEN u.upvotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_zero_upvotes\nFROM comments c\nJOIN users u ON c.userid = u.id\nWHERE c.score BETWEEN 5 AND 10;",
        "retrieved": [
            10109
        ],
        "token_usage": {
            "tokens": 1981,
            "cost": 0.00039255
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10"
    },
    {
        "sample_id": 10082,
        "pred_sql": "SELECT posts.owneruserid FROM posts WHERE posts.score = (SELECT MAX(score) FROM posts)",
        "retrieved": [
            10078
        ],
        "token_usage": {
            "tokens": 1877,
            "cost": 0.00033555
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )"
    },
    {
        "sample_id": 10022,
        "pred_sql": "SELECT posts.id, posts.title, posts.viewcount, posts.favoritecount FROM postlinks INNER JOIN posts ON postlinks.relatedpostid = posts.id WHERE postlinks.postid = '61217';",
        "retrieved": [
            10071
        ],
        "token_usage": {
            "tokens": 1891,
            "cost": 0.00035204999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217"
    },
    {
        "sample_id": 9974,
        "pred_sql": "SELECT badges.name FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.displayname = 'csgillespie'",
        "retrieved": [
            10044
        ],
        "token_usage": {
            "tokens": 1830,
            "cost": 0.00032264999999999996
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT T1.\"Name\" FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"
    },
    {
        "sample_id": 10046,
        "pred_sql": "SELECT displayname FROM users WHERE id = 30;",
        "retrieved": [
            10085
        ],
        "token_usage": {
            "tokens": 1790,
            "cost": 0.00031214999999999997
        },
        "db_id": "codebase_community",
        "gold_sql": "SELECT DisplayName FROM users WHERE Id = 30"
    },
    {
        "sample_id": 6274,
        "pred_sql": "SELECT price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = '2013-04-28'",
        "retrieved": [
            6279
        ],
        "token_usage": {
            "tokens": 1283,
            "cost": 0.00023654999999999998
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'"
    },
    {
        "sample_id": 6287,
        "pred_sql": "SELECT coins.name FROM coins INNER JOIN historical AS T2 ON coins.id = T2.coin_id WHERE T2.date = '2013-05-01' AND T2.open IS NULL",
        "retrieved": [
            6265
        ],
        "token_usage": {
            "tokens": 1347,
            "cost": 0.00027539999999999997
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL"
    },
    {
        "sample_id": 6283,
        "pred_sql": "SELECT coins.name FROM coins INNER JOIN historical ON coins.id = historical.coin_id ORDER BY historical.high DESC LIMIT 1;",
        "retrieved": [
            6252
        ],
        "token_usage": {
            "tokens": 1368,
            "cost": 0.00027269999999999996
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )"
    },
    {
        "sample_id": 6267,
        "pred_sql": "SELECT historical.time_high, historical.time_low, historical.date FROM coins INNER JOIN historical AS T2 ON coins.id = T2.coin_id WHERE coins.name = 'Bitcoin' AND STRFTIME('%Y-%m', historical.date) = '2013-04'",
        "retrieved": [
            6252
        ],
        "token_usage": {
            "tokens": 1378,
            "cost": 0.00027689999999999995
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'"
    },
    {
        "sample_id": 6259,
        "pred_sql": "SELECT c.name, c.status FROM coins AS c INNER JOIN historical AS h ON c.id = h.coin_id GROUP BY c.id HAVING AVG(h.price) > 1000;",
        "retrieved": [
            6251
        ],
        "token_usage": {
            "tokens": 1441,
            "cost": 0.0002823
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000"
    },
    {
        "sample_id": 6261,
        "pred_sql": "SELECT coins.name, (historical.high - historical.low) AS max_profit FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE coins.category = 'token' ORDER BY max_profit DESC LIMIT 1;",
        "retrieved": [
            6268
        ],
        "token_usage": {
            "tokens": 1399,
            "cost": 0.00029624999999999996
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.category = 'token' ORDER BY T2.high - T2.low DESC LIMIT 1"
    },
    {
        "sample_id": 6260,
        "pred_sql": "SELECT coins.name, historical.date FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE historical.percent_change_1h = (SELECT MIN(percent_change_1h) FROM historical)",
        "retrieved": [
            6254
        ],
        "token_usage": {
            "tokens": 1402,
            "cost": 0.00029039999999999996
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )"
    },
    {
        "sample_id": 6258,
        "pred_sql": "SELECT historical.date, historical.price FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE coins.name = 'Bitcoin' ORDER BY historical.low LIMIT 1;",
        "retrieved": [
            6285
        ],
        "token_usage": {
            "tokens": 1332,
            "cost": 0.00026234999999999995
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1"
    },
    {
        "sample_id": 6250,
        "pred_sql": "SELECT SUM(historical.volume_24h) AS total_volume_24h FROM historical INNER JOIN coins ON historical.coin_id = coins.id WHERE coins.name = 'Argentum' AND historical.date = '2016-10-11'",
        "retrieved": [
            6286
        ],
        "token_usage": {
            "tokens": 1355,
            "cost": 0.00028155
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'"
    },
    {
        "sample_id": 6266,
        "pred_sql": "SELECT historical.price FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE coins.name = 'Bitcoin' AND historical.date = '2013-04-29'",
        "retrieved": [
            6252
        ],
        "token_usage": {
            "tokens": 1349,
            "cost": 0.0002559
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'"
    },
    {
        "sample_id": 6295,
        "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = 20130428 AND h.price > (SELECT AVG(price) FROM historical WHERE date = 20130428)",
        "retrieved": [
            6279
        ],
        "token_usage": {
            "tokens": 1363,
            "cost": 0.0002823
        },
        "db_id": "coinmarketcap",
        "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )"
    },
    {
        "sample_id": 3698,
        "pred_sql": "SELECT SUM(grad_100) AS total_hispanic_male_grads FROM institution_grads INNER JOIN institution_details ON institution_grads.unitid = institution_details.unitid WHERE institution_details.chronname = 'Amridge University' AND institution_grads.gender = 'M' AND institution_grads.race = 'H';",
        "retrieved": [
            3694
        ],
        "token_usage": {
            "tokens": 3389,
            "cost": 0.00058125
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.gender = 'M' AND T2.race = 'H'"
    },
    {
        "sample_id": 3719,
        "pred_sql": "SELECT chronname, site FROM institution_details WHERE state = 'PA' ORDER BY lat_y DESC LIMIT 1;",
        "retrieved": [
            3683
        ],
        "token_usage": {
            "tokens": 3295,
            "cost": 0.0005451
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' AND T1.lat_y = ( SELECT MAX(T1.lat_y) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' )"
    },
    {
        "sample_id": 3703,
        "pred_sql": "SELECT institution_details.chronname, AVG(institution_grads.grad_150) AS avg_grad_150_rate FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.year = 2011 AND institution_grads.gender = 'M' AND institution_grads.race = 'W' GROUP BY institution_details.chronname ORDER BY avg_grad_150_rate DESC LIMIT 1;",
        "retrieved": [
            3756
        ],
        "token_usage": {
            "tokens": 3452,
            "cost": 0.00062535
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' AND T2.grad_150 = ( SELECT MAX(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' )"
    },
    {
        "sample_id": 3713,
        "pred_sql": "SELECT state FROM institution_details WHERE chronname = 'Mercer University'",
        "retrieved": [
            3718
        ],
        "token_usage": {
            "tokens": 3320,
            "cost": 0.000534
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Mercer University' THEN state ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 3699,
        "pred_sql": "SELECT COUNT(state_sector_grads.grad_cohort) FROM state_sector_details INNER JOIN state_sector_grads AS T2 ON T2.stateid = state_sector_details.stateid WHERE state_sector_grads.level = '4-year' AND state_sector_grads.control = 'Public' AND state_sector_grads.cohort = '4y bach' AND state_sector_details.schools_count > 0 AND T2.unitid = (SELECT unitid FROM institution_details WHERE chronname = 'Lincoln College' AND state = (SELECT state FROM institution_details WHERE chronname = 'Lincoln College')) AND T2.year = 2011;",
        "retrieved": [
            3728
        ],
        "token_usage": {
            "tokens": 3531,
            "cost": 0.0006529499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT COUNT(T1.unitid) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Lincoln College' AND T2.year = 2011 AND T2.cohort = '4y bach'"
    },
    {
        "sample_id": 3707,
        "pred_sql": "SELECT COUNT(*) FROM institution_details AS id INNER JOIN institution_grads AS ig ON id.unitid = ig.unitid WHERE id.state = 'Alabama' AND id.med_sat_percentile = 77 AND ig.year = 2011 AND ig.grad_cohort > 500;",
        "retrieved": [
            3742
        ],
        "token_usage": {
            "tokens": 3415,
            "cost": 0.0005874
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.med_sat_percentile = '100' AND T2.year = 2011 AND T2.grad_cohort > 500"
    },
    {
        "sample_id": 3738,
        "pred_sql": "SELECT institution_details.site FROM institution_details INNER JOIN state_sector_grads ON institution_details.state = state_sector_grads.state WHERE state_sector_grads.year = (SELECT MAX(year) FROM state_sector_grads) AND institution_details.student_count BETWEEN 500 AND 1000;",
        "retrieved": [
            3683
        ],
        "token_usage": {
            "tokens": 3393,
            "cost": 0.0006007499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count BETWEEN 500 AND 1000 AND T2.year = ( SELECT MAX(T2.year) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )"
    },
    {
        "sample_id": 3730,
        "pred_sql": "SELECT institution_details.state, institution_details.chronname FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.year BETWEEN 2010 AND 2012 AND institution_grads.race = 'B'",
        "retrieved": [
            3718
        ],
        "token_usage": {
            "tokens": 3441,
            "cost": 0.0006007499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'B' AND T2.year BETWEEN 2010 AND 2012"
    },
    {
        "sample_id": 3715,
        "pred_sql": "SELECT state_abbr FROM state_sector_details WHERE state = 'Delaware'",
        "retrieved": [
            3718
        ],
        "token_usage": {
            "tokens": 3337,
            "cost": 0.0005446499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Delaware' THEN state_abbr ELSE NULL END AS T FROM state_sector_grads ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 3712,
        "pred_sql": "SELECT institution_details.site FROM institution_details WHERE institution_details.chronname = 'Swarthmore College'",
        "retrieved": [
            3683
        ],
        "token_usage": {
            "tokens": 3267,
            "cost": 0.000531
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Swarthmore College' THEN site ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 3693,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN institution_grads.race = 'B' THEN institution_grads.grad_cohort ELSE 0 END) AS FLOAT) * 100 / SUM(institution_grads.grad_cohort) AS percentage_black_students FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_details.control = 'Private for-profit'",
        "retrieved": [
            3694
        ],
        "token_usage": {
            "tokens": 3465,
            "cost": 0.0006272999999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'B' AND T1.control = 'Private for-profit'"
    },
    {
        "sample_id": 3689,
        "pred_sql": "SELECT institution_details.chronname, institution_details.fte_value FROM institution_details INNER JOIN institution_grads ON institution_details.unitid = institution_grads.unitid WHERE institution_grads.grad_cohort < 200 AND institution_grads.year = 2013;",
        "retrieved": [
            3691
        ],
        "token_usage": {
            "tokens": 3393,
            "cost": 0.0005827499999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200"
    },
    {
        "sample_id": 3740,
        "pred_sql": "SELECT institution_details.site, institution_details.chronname FROM institution_details INNER JOIN (SELECT COUNT(state_sector_grads.grad_cohort) AS cohort_count, state_sector_grads.unitid FROM state_sector_grads WHERE state_sector_grads.year = 2011 AND state_sector_grads.gender = 'B' AND state_sector_grads.race = 'B' AND state_sector_grads.cohort = '4y bach' GROUP BY state_sector_grads.unitid HAVING cohort_count BETWEEN 20 AND 30) AS T1 ON institution_details.unitid = T1.unitid;",
        "retrieved": [
            3728
        ],
        "token_usage": {
            "tokens": 3541,
            "cost": 0.0006575999999999999
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT DISTINCT T1.site, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.race = 'B' AND T2.grad_cohort BETWEEN 20 AND 30"
    },
    {
        "sample_id": 3685,
        "pred_sql": "SELECT SUM(grad_cohort) AS total_male_graduates\nFROM institution_grads\nWHERE year = 2012 AND gender = 'M' AND unitid IN (\n    SELECT unitid\n    FROM institution_details\n    WHERE state = (\n        SELECT state\n        FROM institution_details\n        ORDER BY aid_value DESC\n        LIMIT 1\n    )\n)",
        "retrieved": [
            3718
        ],
        "token_usage": {
            "tokens": 3462,
            "cost": 0.0006102
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T2.gender = 'M' ORDER BY T1.aid_value DESC LIMIT 1"
    },
    {
        "sample_id": 3744,
        "pred_sql": "SELECT institution_details.chronname FROM institution_details INNER JOIN state_sector_grads ON state_sector_grads.state = institution_details.state WHERE state_sector_grads.state_abbr = 'CT' ORDER BY state_sector_grads.retain_percentile DESC LIMIT 1",
        "retrieved": [
            3718
        ],
        "token_usage": {
            "tokens": 3422,
            "cost": 0.000588
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' AND retain_percentile = ( SELECT MAX(retain_percentile) FROM institution_details WHERE state = 'Connecticut' )"
    },
    {
        "sample_id": 3711,
        "pred_sql": "SELECT AVG(institution_grads.grad_100_rate) FROM institution_details INNER JOIN institution_grads ON institution_grads.unitid = institution_details.unitid WHERE institution_details.chronname = 'Central Alabama Community College'",
        "retrieved": [
            3756
        ],
        "token_usage": {
            "tokens": 3414,
            "cost": 0.00060345
        },
        "db_id": "college_completion",
        "gold_sql": "SELECT AVG(T2.grad_100_rate) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'"
    },
    {
        "sample_id": 1006,
        "pred_sql": "SELECT person.yearsinprogram, person.inphase FROM person INNER JOIN (SELECT advisedby.p_id, COUNT(advisedby.p_id_dummy) AS advisor_count FROM advisedby INNER JOIN person ON advisedby.p_id = person.p_id WHERE person.student = 1 GROUP BY advisedby.p_id ORDER BY advisor_count DESC LIMIT 1) AS most_advised ON person.p_id = most_advised.p_id;",
        "retrieved": [
            1023
        ],
        "token_usage": {
            "tokens": 960,
            "cost": 0.0002322
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.yearsInProgram, T2.inPhase FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "sample_id": 979,
        "pred_sql": "SELECT course.courselevel FROM advisedby INNER JOIN person AS T2 ON advisedby.p_id_dummy = T2.p_id INNER JOIN taughtby AS T3 ON T2.p_id = T3.p_id INNER JOIN course ON T3.course_id = course.course_id WHERE advisedby.p_id = 80;",
        "retrieved": [
            973
        ],
        "token_usage": {
            "tokens": 951,
            "cost": 0.0002115
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80"
    },
    {
        "sample_id": 968,
        "pred_sql": "SELECT COUNT(DISTINCT person.p_id) AS professor_count FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id WHERE taughtby.course_id = '18' AND person.professor = 0;",
        "retrieved": [
            1008
        ],
        "token_usage": {
            "tokens": 918,
            "cost": 0.00021464999999999999
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id = 18"
    },
    {
        "sample_id": 1010,
        "pred_sql": "SELECT person.p_id, course.courselevel FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id INNER JOIN course ON taughtby.course_id = course.course_id WHERE taughtby.course_id = 104 AND person.professor = 0;",
        "retrieved": [
            1008
        ],
        "token_usage": {
            "tokens": 943,
            "cost": 0.00022605
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course_id = 104 AND T1.hasPosition <> 0"
    },
    {
        "sample_id": 1031,
        "pred_sql": "SELECT CAST(COUNT(taughtby.course_id) AS FLOAT) / COUNT(DISTINCT T2.p_id) AS average_courses_taught FROM taughtby INNER JOIN person AS T2 ON taughtby.p_id = T2.p_id INNER JOIN course ON taughtby.course_id = course.course_id WHERE T2.professor = 0 AND course.courselevel = 'Level_500'",
        "retrieved": [
            1000
        ],
        "token_usage": {
            "tokens": 988,
            "cost": 0.00024359999999999996
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500'"
    },
    {
        "sample_id": 989,
        "pred_sql": "SELECT person.p_id FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id INNER JOIN course ON taughtby.course_id = course.course_id WHERE person.professor = 0 AND course.courselevel = 'Level_300'",
        "retrieved": [
            1008
        ],
        "token_usage": {
            "tokens": 933,
            "cost": 0.00022004999999999995
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'"
    },
    {
        "sample_id": 971,
        "pred_sql": "SELECT person.p_id, taughtby.course_id FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id WHERE person.professor = 0 AND person.hasposition = 0;",
        "retrieved": [
            998
        ],
        "token_usage": {
            "tokens": 944,
            "cost": 0.00020774999999999998
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0"
    },
    {
        "sample_id": 976,
        "pred_sql": "SELECT course.courselevel, person.p_id FROM course INNER JOIN taughtby ON course.course_id = taughtby.course_id INNER JOIN person ON taughtby.p_id = person.p_id WHERE course.course_id = '165' AND person.professor = 0;",
        "retrieved": [
            993
        ],
        "token_usage": {
            "tokens": 999,
            "cost": 0.0002115
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165"
    },
    {
        "sample_id": 1016,
        "pred_sql": "SELECT COUNT(*) FROM course WHERE courselevel = 'Level_500'",
        "retrieved": [
            1032
        ],
        "token_usage": {
            "tokens": 878,
            "cost": 0.00018345
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'"
    },
    {
        "sample_id": 972,
        "pred_sql": "SELECT person.p_id FROM person INNER JOIN taughtby ON person.p_id = taughtby.p_id INNER JOIN course ON taughtby.course_id = course.course_id WHERE course.courselevel = 'Level_400'",
        "retrieved": [
            1008
        ],
        "token_usage": {
            "tokens": 908,
            "cost": 0.00020639999999999998
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'"
    },
    {
        "sample_id": 999,
        "pred_sql": "SELECT COUNT(advisedby.p_id_dummy) FROM advisedby INNER JOIN person AS T2 ON advisedby.p_id = T2.p_id WHERE T2.yearsinprogram = 3 AND T2.student = 1",
        "retrieved": [
            1023
        ],
        "token_usage": {
            "tokens": 912,
            "cost": 0.00020159999999999997
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT COUNT(DISTINCT T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'"
    },
    {
        "sample_id": 969,
        "pred_sql": "SELECT course_id FROM course WHERE courselevel = 'Level_500'",
        "retrieved": [
            982
        ],
        "token_usage": {
            "tokens": 880,
            "cost": 0.00017565
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT course_id FROM course WHERE courseLevel = 'Level_500'"
    },
    {
        "sample_id": 977,
        "pred_sql": "SELECT person.p_id, person.yearsinprogram FROM person INNER JOIN advisedby ON person.p_id = advisedby.p_id WHERE advisedby.p_id_dummy = 5 AND person.student = 1;",
        "retrieved": [
            992
        ],
        "token_usage": {
            "tokens": 920,
            "cost": 0.00021495
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5"
    },
    {
        "sample_id": 1003,
        "pred_sql": "SELECT taughtby.p_id FROM taughtby WHERE taughtby.course_id = 18",
        "retrieved": [
            998
        ],
        "token_usage": {
            "tokens": 864,
            "cost": 0.00016245
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT p_id FROM taughtBy WHERE course_id = 18"
    },
    {
        "sample_id": 1004,
        "pred_sql": "SELECT person.p_id, person.hasposition FROM advisedby INNER JOIN person ON advisedby.p_id_dummy = person.p_id WHERE advisedby.p_id = '303'",
        "retrieved": [
            1013
        ],
        "token_usage": {
            "tokens": 911,
            "cost": 0.00020415
        },
        "db_id": "computer_student",
        "gold_sql": "SELECT T2.hasPosition, T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE T1.p_id = 303"
    },
    {
        "sample_id": 8875,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN quantity ON recipe.recipe_id = quantity.recipe_id INNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id WHERE ingredient.name = 'frozen raspberries in light syrup' ORDER BY quantity.max_qty DESC LIMIT 1;",
        "retrieved": [
            8921
        ],
        "token_usage": {
            "tokens": 1518,
            "cost": 0.00029790000000000003
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'frozen raspberries in light syrup' AND T2.max_qty = T2.min_qty"
    },
    {
        "sample_id": 8924,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM recipe WHERE recipe.recipe_id IN (SELECT quantity.recipe_id FROM quantity INNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id WHERE ingredient.name = 'cheese'))) AS percentage FROM recipe WHERE recipe.recipe_id IN (SELECT quantity.recipe_id FROM quantity INNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id WHERE ingredient.name = 'cheese') AND recipe.recipe_id IN (SELECT nutrition.recipe_id FROM nutrition WHERE nutrition.calories > 200);",
        "retrieved": [
            8883
        ],
        "token_usage": {
            "tokens": 1588,
            "cost": 0.00032775
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T4.calories > 200 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T4 ON T4.recipe_id = T1.recipe_id WHERE T3.category = 'cheese'"
    },
    {
        "sample_id": 8922,
        "pred_sql": "SELECT i.name, q.max_qty, q.min_qty, q.unit, q.preparation \nFROM recipe r \nJOIN quantity q ON r.recipe_id = q.recipe_id \nJOIN ingredient i ON q.ingredient_id = i.ingredient_id \nWHERE r.cook_min = (SELECT MAX(cook_min) FROM recipe)",
        "retrieved": [
            8909
        ],
        "token_usage": {
            "tokens": 1577,
            "cost": 0.00031935
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1"
    },
    {
        "sample_id": 8917,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE nutrition.iron > 20",
        "retrieved": [
            8856
        ],
        "token_usage": {
            "tokens": 1486,
            "cost": 0.00027689999999999995
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "sample_id": 8898,
        "pred_sql": "SELECT recipe.title, (recipe.prep_min + recipe.cook_min + recipe.stnd_min) AS total_time FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY CAST(nutrition.total_fat AS INTEGER) DESC LIMIT 1;",
        "retrieved": [
            8909
        ],
        "token_usage": {
            "tokens": 1593,
            "cost": 0.00032534999999999997
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1"
    },
    {
        "sample_id": 8912,
        "pred_sql": "SELECT pcnt_cal_prot FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id INNER JOIN quantity ON recipe.recipe_id = quantity.recipe_id INNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id WHERE ingredient.name = 'Raspberry Chiffon Pie';",
        "retrieved": [
            8883
        ],
        "token_usage": {
            "tokens": 1543,
            "cost": 0.00030345
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT pcnt_cal_prot FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'"
    },
    {
        "sample_id": 8923,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM recipe WHERE recipe_id IN (SELECT recipe_id FROM nutrition WHERE cholestrl = '0') AND (prep_min + cook_min + stnd_min) < 20) * 100.0 / COUNT(*) AS percentage_no_cholesterol_less_20_minutes FROM recipe;",
        "retrieved": [
            8909
        ],
        "token_usage": {
            "tokens": 1587,
            "cost": 0.00031949999999999996
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.cook_min < 20 AND T2.cholestrl = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id"
    },
    {
        "sample_id": 8872,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY nutrition.total_fat DESC LIMIT 1",
        "retrieved": [
            8856
        ],
        "token_usage": {
            "tokens": 1494,
            "cost": 0.00027990000000000003
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1"
    },
    {
        "sample_id": 8876,
        "pred_sql": "SELECT ingredient.name, CAST(COUNT(quantity.ingredient_id) AS FLOAT) * 1 / (SELECT COUNT(quantity.ingredient_id) FROM ingredient AS T1 INNER JOIN quantity AS T2 ON T2.ingredient_id = T1.ingredient_id) AS proportion FROM ingredient INNER JOIN quantity AS T2 ON T2.ingredient_id = ingredient.ingredient_id GROUP BY quantity.ingredient_id ORDER BY COUNT(quantity.ingredient_id) DESC LIMIT 1",
        "retrieved": [
            8897
        ],
        "token_usage": {
            "tokens": 1664,
            "cost": 0.0003405
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1"
    },
    {
        "sample_id": 8880,
        "pred_sql": "SELECT nutrition.vitamin_a FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE recipe.title = 'Sherry beef';",
        "retrieved": [
            8887
        ],
        "token_usage": {
            "tokens": 1496,
            "cost": 0.00027839999999999994
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T2.vitamin_a FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Sherried Beef'"
    },
    {
        "sample_id": 8888,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY nutrition.vitamin_c DESC LIMIT 5",
        "retrieved": [
            8879
        ],
        "token_usage": {
            "tokens": 1487,
            "cost": 0.0002739
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 5"
    },
    {
        "sample_id": 8904,
        "pred_sql": "SELECT ingredient.name, quantity.max_qty, quantity.min_qty, quantity.unit, quantity.preparation, quantity.optional \nFROM recipe \nINNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id \nINNER JOIN quantity ON recipe.recipe_id = quantity.recipe_id \nINNER JOIN ingredient ON quantity.ingredient_id = ingredient.ingredient_id \nWHERE nutrition.vitamin_a = (SELECT MAX(nutrition.vitamin_a) FROM nutrition) \nORDER BY ingredient.name;",
        "retrieved": [
            8879
        ],
        "token_usage": {
            "tokens": 1578,
            "cost": 0.0003285
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id ORDER BY T3.vitamin_a DESC LIMIT 1"
    },
    {
        "sample_id": 8869,
        "pred_sql": "SELECT AVG(nutrition.calories) FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE recipe.source = 'Produce for Better Health Foundation and 5 a Day'",
        "retrieved": [
            8883
        ],
        "token_usage": {
            "tokens": 1533,
            "cost": 0.00029204999999999997
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT AVG(T2.calories) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'Produce for Better Health Foundation and 5 a Day'"
    },
    {
        "sample_id": 8878,
        "pred_sql": "SELECT q.max_qty AS cups_of_almonds FROM quantity q INNER JOIN ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'almonds' AND q.recipe_id IN (SELECT recipe_id FROM recipe WHERE title LIKE '%chicken pocket sandwich%')",
        "retrieved": [
            8887
        ],
        "token_usage": {
            "tokens": 1509,
            "cost": 0.0002844
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Chicken Pocket Sandwich' AND T3.name = 'almonds' AND T2.unit = 'cup(s)'"
    },
    {
        "sample_id": 8884,
        "pred_sql": "SELECT recipe.title FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id WHERE nutrition.iron > 20",
        "retrieved": [
            8856
        ],
        "token_usage": {
            "tokens": 1494,
            "cost": 0.0002808
        },
        "db_id": "cookbook",
        "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20"
    },
    {
        "sample_id": 876,
        "pred_sql": "SELECT prof.first_name, prof.last_name FROM prof INNER JOIN ra AS T2 ON prof.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'",
        "retrieved": [
            858
        ],
        "token_usage": {
            "tokens": 1360,
            "cost": 0.00030345
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'"
    },
    {
        "sample_id": 856,
        "pred_sql": "SELECT COUNT(*) FROM prof WHERE popularity > (SELECT popularity FROM prof WHERE first_name = 'Zhou' AND last_name = 'Zhihua')",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1200,
            "cost": 0.0002187
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )"
    },
    {
        "sample_id": 860,
        "pred_sql": "SELECT student.f_name, student.l_name FROM student WHERE student.student_id IN (SELECT ra.student_id FROM ra WHERE ra.capability = (SELECT MAX(capability) FROM ra))",
        "retrieved": [
            922
        ],
        "token_usage": {
            "tokens": 1258,
            "cost": 0.0002571
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5"
    },
    {
        "sample_id": 958,
        "pred_sql": "SELECT (COUNT(CASE WHEN r.sat = 5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_highly_satisfied FROM registration r INNER JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to Database 2';",
        "retrieved": [
            899
        ],
        "token_usage": {
            "tokens": 1293,
            "cost": 0.00028034999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'"
    },
    {
        "sample_id": 912,
        "pred_sql": "SELECT student.f_name, student.l_name, student.gpa FROM prof INNER JOIN ra ON prof.prof_id = ra.prof_id INNER JOIN student ON ra.student_id = student.student_id WHERE prof.popularity = (SELECT MAX(popularity) FROM prof)",
        "retrieved": [
            914
        ],
        "token_usage": {
            "tokens": 1279,
            "cost": 0.0002634
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1"
    },
    {
        "sample_id": 956,
        "pred_sql": "SELECT prof.graduate_from FROM prof INNER JOIN ra ON prof.prof_id = ra.prof_id INNER JOIN student ON ra.student_id = student.student_id WHERE student.type = 'UG' GROUP BY prof.prof_id ORDER BY COUNT(student.student_id) DESC LIMIT 1;",
        "retrieved": [
            858
        ],
        "token_usage": {
            "tokens": 1380,
            "cost": 0.00031634999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1"
    },
    {
        "sample_id": 966,
        "pred_sql": "SELECT COUNT(*) AS count, type FROM student WHERE student_id IN (SELECT student_id FROM ra WHERE capability < 3) GROUP BY type;",
        "retrieved": [
            922
        ],
        "token_usage": {
            "tokens": 1212,
            "cost": 0.00022815
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3"
    },
    {
        "sample_id": 855,
        "pred_sql": "SELECT name FROM course WHERE diff < (SELECT diff FROM course WHERE name = 'Machine Learning Theory')",
        "retrieved": [
            896
        ],
        "token_usage": {
            "tokens": 1203,
            "cost": 0.00021915
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )"
    },
    {
        "sample_id": 941,
        "pred_sql": "SELECT (COUNT(CASE WHEN ra.salary = 'low' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_low_salary\nFROM ra\nINNER JOIN prof ON ra.prof_id = prof.prof_id\nWHERE prof.teachingability <= 3;",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1292,
            "cost": 0.00026714999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3"
    },
    {
        "sample_id": 931,
        "pred_sql": "SELECT course.name FROM registration INNER JOIN course ON registration.course_id = course.course_id INNER JOIN student ON registration.student_id = student.student_id WHERE student.type = 'UG' ORDER BY registration.sat DESC LIMIT 1;",
        "retrieved": [
            899
        ],
        "token_usage": {
            "tokens": 1267,
            "cost": 0.00026474999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1"
    },
    {
        "sample_id": 940,
        "pred_sql": "SELECT student.email FROM student INNER JOIN registration ON student.student_id = registration.student_id INNER JOIN course ON registration.course_id = course.course_id WHERE registration.grade = 3 AND course.diff > (SELECT AVG(CAST(diff AS INTEGER)) * 0.8 FROM course)",
        "retrieved": [
            896
        ],
        "token_usage": {
            "tokens": 1326,
            "cost": 0.00028845
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8"
    },
    {
        "sample_id": 881,
        "pred_sql": "SELECT COUNT(registration.course_id) FROM registration INNER JOIN student ON registration.student_id = student.student_id WHERE student.f_name = 'Alvera' AND student.l_name = 'McQuillin'",
        "retrieved": [
            874
        ],
        "token_usage": {
            "tokens": 1243,
            "cost": 0.00024765
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'"
    },
    {
        "sample_id": 943,
        "pred_sql": "SELECT AVG(prof.teachingability) FROM prof WHERE prof.popularity = (SELECT MAX(popularity) FROM prof)",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1225,
            "cost": 0.0002337
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )"
    },
    {
        "sample_id": 867,
        "pred_sql": "SELECT COUNT(*) FROM prof WHERE gender = 1 AND prof_id IN (SELECT prof_id FROM ra GROUP BY prof_id HAVING COUNT(student_id) > 3)",
        "retrieved": [
            859
        ],
        "token_usage": {
            "tokens": 1226,
            "cost": 0.00024375
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )"
    },
    {
        "sample_id": 939,
        "pred_sql": "SELECT COUNT(*) FROM student INNER JOIN ra ON student.student_id = ra.student_id WHERE ra.salary = 'low' AND student.gpa >= 3.5;",
        "retrieved": [
            906
        ],
        "token_usage": {
            "tokens": 1272,
            "cost": 0.00025334999999999995
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'"
    },
    {
        "sample_id": 909,
        "pred_sql": "SELECT registration.course_id, registration.student_id FROM registration WHERE registration.grade IS NULL",
        "retrieved": [
            865
        ],
        "token_usage": {
            "tokens": 1192,
            "cost": 0.00021434999999999998
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''"
    },
    {
        "sample_id": 900,
        "pred_sql": "SELECT course.name FROM student INNER JOIN registration AS T2 ON student.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE student.intelligence = (SELECT MIN(intelligence) FROM student) AND registration.sat = (SELECT MIN(sat) FROM registration WHERE registration.student_id IN (SELECT student_id FROM student WHERE intelligence = (SELECT MIN(intelligence) FROM student)));",
        "retrieved": [
            965
        ],
        "token_usage": {
            "tokens": 1300,
            "cost": 0.000285
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1"
    },
    {
        "sample_id": 932,
        "pred_sql": "SELECT student.student_id, ra.capability FROM student JOIN ra ON student.student_id = ra.student_id WHERE student.type = 'RPG' AND student.intelligence >= 4;",
        "retrieved": [
            922
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.00027509999999999996
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4"
    },
    {
        "sample_id": 905,
        "pred_sql": "SELECT COUNT(DISTINCT registration.student_id) FROM registration INNER JOIN student ON registration.student_id = student.student_id WHERE registration.grade = 'A' AND student.type = 'UG'",
        "retrieved": [
            874
        ],
        "token_usage": {
            "tokens": 1269,
            "cost": 0.00025964999999999994
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'"
    },
    {
        "sample_id": 952,
        "pred_sql": "SELECT COUNT(DISTINCT registration.student_id) FROM registration JOIN course ON registration.course_id = course.course_id JOIN ra ON registration.student_id = ra.student_id WHERE course.name = 'computer vision' AND ra.salary = 'high';",
        "retrieved": [
            922
        ],
        "token_usage": {
            "tokens": 1241,
            "cost": 0.00024870000000000003
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'"
    },
    {
        "sample_id": 861,
        "pred_sql": "SELECT COUNT(ra.student_id) FROM ra INNER JOIN student ON ra.student_id = student.student_id INNER JOIN prof ON ra.prof_id = prof.prof_id WHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki' AND ra.salary = 'med'",
        "retrieved": [
            930
        ],
        "token_usage": {
            "tokens": 1233,
            "cost": 0.00024209999999999998
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'"
    },
    {
        "sample_id": 854,
        "pred_sql": "SELECT name FROM course WHERE name IN ('Intro to BlockChain', 'Computer Network') ORDER BY diff DESC LIMIT 1;",
        "retrieved": [
            925
        ],
        "token_usage": {
            "tokens": 1161,
            "cost": 0.00021959999999999997
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1"
    },
    {
        "sample_id": 889,
        "pred_sql": "SELECT first_name, last_name FROM prof WHERE graduate_from = 'Ivy League'",
        "retrieved": [
            869
        ],
        "token_usage": {
            "tokens": 1232,
            "cost": 0.0002406
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )"
    },
    {
        "sample_id": 879,
        "pred_sql": "SELECT prof.first_name, prof.last_name FROM ra INNER JOIN prof ON ra.prof_id = prof.prof_id WHERE prof.teachingability > (SELECT AVG(teachingability) FROM prof) GROUP BY prof.prof_id HAVING COUNT(ra.student_id) > 2",
        "retrieved": [
            957
        ],
        "token_usage": {
            "tokens": 1292,
            "cost": 0.00026849999999999997
        },
        "db_id": "cs_semester",
        "gold_sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1"
    },
    {
        "sample_id": 10907,
        "pred_sql": "SELECT (SUM(CASE WHEN customerid = '7' THEN consumption ELSE 0 END) - SUM(CASE WHEN customerid = '5' THEN consumption ELSE 0 END)) AS consumption_difference FROM yearmonth WHERE date BETWEEN '2013-04-01' AND '2013-04-30'",
        "retrieved": [
            10921
        ],
        "token_usage": {
            "tokens": 860,
            "cost": 0.00020009999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'"
    },
    {
        "sample_id": 10935,
        "pred_sql": "SELECT DISTINCT gasstations.country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid INNER JOIN yearmonth AS T3 ON T1.customerid = T3.customerid WHERE T1.date = '2012-08-25' LIMIT 1",
        "retrieved": [
            10923
        ],
        "token_usage": {
            "tokens": 904,
            "cost": 0.00022514999999999997
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1"
    },
    {
        "sample_id": 10946,
        "pred_sql": "SELECT customers.country FROM transactions_1k JOIN customers ON transactions_1k.customerid = customers.customerid WHERE transactions_1k.price * transactions_1k.amount = 548.4 AND transactions_1k.date = '2012/8/24';",
        "retrieved": [
            10893
        ],
        "token_usage": {
            "tokens": 901,
            "cost": 0.00023505
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4"
    },
    {
        "sample_id": 10948,
        "pred_sql": "SELECT (SUM(CASE WHEN strftime('%Y', date) = '2012' THEN consumption ELSE 0 END) - SUM(CASE WHEN strftime('%Y', date) = '2013' THEN consumption ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', date) = '2012' THEN consumption ELSE 0 END) * 100 AS consumption_decrease_rate\nFROM yearmonth\nJOIN customers ON yearmonth.customerid = customers.customerid\nJOIN transactions_1k ON customers.customerid = transactions_1k.customerid\nWHERE transactions_1k.price * transactions_1k.amount = 634.8 AND strftime('%Y-%m-%d', transactions_1k.date) = '2012-08-25'",
        "retrieved": [
            10921
        ],
        "token_usage": {
            "tokens": 1011,
            "cost": 0.00028349999999999995
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )"
    },
    {
        "sample_id": 10905,
        "pred_sql": "SELECT SUM(yearmonth.consumption) AS total_consumption FROM yearmonth WHERE customerid = 6 AND date BETWEEN 201308 AND 201311;",
        "retrieved": [
            10915
        ],
        "token_usage": {
            "tokens": 864,
            "cost": 0.0002025
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'"
    },
    {
        "sample_id": 10913,
        "pred_sql": "SELECT gasstations.country, COUNT(*) AS total_value_for_money_gas_stations\nFROM gasstations\nWHERE gasstations.segment = 'value for money'\nGROUP BY gasstations.country;",
        "retrieved": [
            10906
        ],
        "token_usage": {
            "tokens": 852,
            "cost": 0.00019979999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1"
    },
    {
        "sample_id": 10940,
        "pred_sql": "SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012/8/24' AND transactions_1k.time = '12:42:00';",
        "retrieved": [],
        "token_usage": {
            "tokens": 708,
            "cost": 0.0001764
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'"
    },
    {
        "sample_id": 10937,
        "pred_sql": "SELECT customers.segment FROM customers INNER JOIN yearmonth AS T2 ON customers.customerid = T2.customerid WHERE T2.date = '2012-08-23' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) LIMIT 1",
        "retrieved": [
            10918
        ],
        "token_usage": {
            "tokens": 851,
            "cost": 0.00020595
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'"
    },
    {
        "sample_id": 10910,
        "pred_sql": "SELECT customers.customerid, SUM(yearmonth.consumption) AS total_consumption FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY total_consumption DESC LIMIT 1;",
        "retrieved": [
            10921
        ],
        "token_usage": {
            "tokens": 863,
            "cost": 0.0002028
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"
    },
    {
        "sample_id": 10945,
        "pred_sql": "SELECT gasstations.country FROM transactions_1k JOIN customers ON transactions_1k.customerid = customers.customerid JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 'No.667467';",
        "retrieved": [],
        "token_usage": {
            "tokens": 707,
            "cost": 0.00018074999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'"
    },
    {
        "sample_id": 10952,
        "pred_sql": "SELECT p.description, SUM(t.amount) AS total_sold\nFROM transactions_1k t\nJOIN products p ON t.productid = p.productid\nGROUP BY p.productid, p.description\nORDER BY total_sold DESC\nLIMIT 5;",
        "retrieved": [],
        "token_usage": {
            "tokens": 718,
            "cost": 0.00018554999999999998
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5"
    },
    {
        "sample_id": 10943,
        "pred_sql": "SELECT COUNT(*) FROM transactions_1k WHERE gasstationid IN (SELECT gasstationid FROM gasstations WHERE country = 'CZE') AND date = '2012/8/26' AND time BETWEEN '08:00:00' AND '09:00:00';",
        "retrieved": [
            10909
        ],
        "token_usage": {
            "tokens": 864,
            "cost": 0.00019574999999999996
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'"
    },
    {
        "sample_id": 10892,
        "pred_sql": "SELECT COUNT(DISTINCT gasstations.gasstationid) FROM gasstations JOIN products ON gasstations.segment = products.productid WHERE gasstations.country = 'CZE' AND products.description = 'Premium gas';",
        "retrieved": [
            10949
        ],
        "token_usage": {
            "tokens": 822,
            "cost": 0.00019935
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'"
    },
    {
        "sample_id": 10894,
        "pred_sql": "SELECT customers.customerid, SUM(yearmonth.consumption) AS total_consumption FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date BETWEEN 20120101 AND 20121231 AND customers.segment = 'LAM' GROUP BY customers.customerid ORDER BY total_consumption ASC LIMIT 1;",
        "retrieved": [
            10912
        ],
        "token_usage": {
            "tokens": 890,
            "cost": 0.00022349999999999996
        },
        "db_id": "debit_card_specializing",
        "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"
    },
    {
        "sample_id": 4652,
        "pred_sql": "SELECT voice-actors.character FROM voice-actors WHERE voice-actors.voice-actor = 'Frank Welker'",
        "retrieved": [
            4694
        ],
        "token_usage": {
            "tokens": 1146,
            "cost": 0.00022094999999999998
        },
        "db_id": "disney",
        "gold_sql": "SELECT character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Frank Welker'"
    },
    {
        "sample_id": 4649,
        "pred_sql": "SELECT COUNT(DISTINCT T1.movie_title) FROM director AS T2 INNER JOIN movies_total_gross AS T1 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman';",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1244,
            "cost": 0.00025049999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'"
    },
    {
        "sample_id": 4699,
        "pred_sql": "SELECT voice-actors.\"voice-actor\" FROM \"voice-actors\" INNER JOIN characters ON voice-actors.movie = characters.movie_title WHERE characters.hero = 'Calliope' AND characters.movie_title = 'Hercules'",
        "retrieved": [
            4694
        ],
        "token_usage": {
            "tokens": 1224,
            "cost": 0.00026684999999999995
        },
        "db_id": "disney",
        "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Hercules' AND character = 'Calliope'"
    },
    {
        "sample_id": 4623,
        "pred_sql": "SELECT director FROM director WHERE name = 'Pinocchio'",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1119,
            "cost": 0.0002061
        },
        "db_id": "disney",
        "gold_sql": "SELECT director FROM director WHERE name = 'Pinocchio'"
    },
    {
        "sample_id": 4645,
        "pred_sql": "SELECT director FROM director INNER JOIN movies_total_gross ON director.name = movies_total_gross.movie_title WHERE movies_total_gross.genre = 'Adventure' AND movies_total_gross.release_date = '2007-03-30';",
        "retrieved": [
            4656
        ],
        "token_usage": {
            "tokens": 1284,
            "cost": 0.0002718
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.director FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.name WHERE T2.genre = 'Adventure' AND T2.release_date = 'Mar 30, 2007'"
    },
    {
        "sample_id": 4663,
        "pred_sql": "SELECT voice-actors.\"voice-actor\" FROM \"voice-actors\" INNER JOIN characters ON voice-actors.movie = characters.movie_title WHERE characters.movie_title = 'Meet the Robinsons'",
        "retrieved": [
            4694
        ],
        "token_usage": {
            "tokens": 1170,
            "cost": 0.00023535
        },
        "db_id": "disney",
        "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Meet the Robinsons'"
    },
    {
        "sample_id": 4732,
        "pred_sql": "SELECT movies_total_gross.movie_title, movies_total_gross.total_gross FROM director INNER JOIN movies_total_gross ON director.name = movies_total_gross.movie_title WHERE director.director = 'Chris Buck' ORDER BY CAST(REPLACE(SUBSTRING(movies_total_gross.total_gross, 1), ',', '') AS INT) DESC LIMIT 1;",
        "retrieved": [
            4658
        ],
        "token_usage": {
            "tokens": 1240,
            "cost": 0.000258
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title, MAX(T1.release_date), MAX(T1.inflation_adjusted_gross) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Chris Buck'"
    },
    {
        "sample_id": 4682,
        "pred_sql": "SELECT movies_total_gross.movie_title FROM director INNER JOIN movies_total_gross ON director.name = movies_total_gross.movie_title WHERE director.director = 'Jack Kinney' ORDER BY CAST(REPLACE(TRIM(movies_total_gross.total_gross, ' '), ',', '') AS FLOAT)",
        "retrieved": [
            4677
        ],
        "token_usage": {
            "tokens": 1227,
            "cost": 0.00025425
        },
        "db_id": "disney",
        "gold_sql": "SELECT name FROM director WHERE director = 'Jack Kinney'"
    },
    {
        "sample_id": 4685,
        "pred_sql": "SELECT characters.movie_title, voice-actors.character FROM voice-actors JOIN characters ON voice-actors.movie = characters.movie_title WHERE voice-actors.voice-actor = 'Bill Thompson';",
        "retrieved": [
            4719
        ],
        "token_usage": {
            "tokens": 1178,
            "cost": 0.0002500499999999999
        },
        "db_id": "disney",
        "gold_sql": "SELECT movie, character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Bill Thompson'"
    },
    {
        "sample_id": 4673,
        "pred_sql": "SELECT d.director FROM director d INNER JOIN (SELECT movie, COUNT(*) as voice_actor_count FROM \"voice-actors\" GROUP BY movie ORDER BY voice_actor_count DESC LIMIT 1) va ON d.name = va.movie;",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1261,
            "cost": 0.00029174999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT T2.director, COUNT(DISTINCT T1.\"voice-actor\") FROM \"voice-actors\" AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.\"voice-actor\") DESC LIMIT 1"
    },
    {
        "sample_id": 4727,
        "pred_sql": "SELECT (revenue.\"walt disney parks and resorts\" / total) * 100 AS proportion FROM revenue WHERE revenue.year = '2010'",
        "retrieved": [
            4622
        ],
        "token_usage": {
            "tokens": 1181,
            "cost": 0.00024464999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT SUM(\"Walt Disney Parks and Resorts\") / SUM(Total) * 100 FROM revenue WHERE year = 2010"
    },
    {
        "sample_id": 4678,
        "pred_sql": "SELECT AVG(CAST(REPLACE(TRIM(movies_total_gross.total_gross, '[$]'), ',', '') AS FLOAT)) AS average_total_gross\nFROM voice-actors\nJOIN characters ON voice-actors.character = characters.hero\nJOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title\nWHERE voice-actors.voice_actor = 'Sterling Holloway';",
        "retrieved": [
            4683
        ],
        "token_usage": {
            "tokens": 1265,
            "cost": 0.0002694
        },
        "db_id": "disney",
        "gold_sql": "SELECT SUM(CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL)) / COUNT(T2.movie_title) FROM \"voice-actors\" AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE T1.\"voice-actor\" = 'Sterling Holloway'"
    },
    {
        "sample_id": 4627,
        "pred_sql": "SELECT voice-actors.\"voice-actor\", characters.villian FROM \"voice-actors\" INNER JOIN characters AS T2 ON voice-actors.movie = T2.movie_title WHERE characters.movie_title = 'Alice in Wonderland'",
        "retrieved": [
            4694
        ],
        "token_usage": {
            "tokens": 1170,
            "cost": 0.00023354999999999996
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'"
    },
    {
        "sample_id": 4687,
        "pred_sql": "SELECT c.movie_title, c.hero, r.song \nFROM characters AS c \nJOIN director AS d ON c.movie_title = d.name \nJOIN round AS r ON c.movie_title = r.movie \nWHERE d.director = 'Wolfgang Reitherman' AND c.release_date LIKE '1977%';",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1281,
            "cost": 0.00026639999999999997
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title, T2.hero, T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name WHERE T3.director = 'Wolfgang Reitherman' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1977'"
    },
    {
        "sample_id": 4669,
        "pred_sql": "SELECT voice-actors.\"voice-actor\", characters.villian FROM \"voice-actors\" INNER JOIN characters AS T2 ON voice-actors.movie = T2.movie_title WHERE characters.movie_title = 'The Rescuers'",
        "retrieved": [
            4694
        ],
        "token_usage": {
            "tokens": 1197,
            "cost": 0.00025199999999999995
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie WHERE T2.movie_title = 'The Rescuers' AND T1.character = T2.villian"
    },
    {
        "sample_id": 4733,
        "pred_sql": "SELECT voice_actor, COUNT(character) AS character_count FROM voice_actors GROUP BY voice_actor HAVING COUNT(character) > 5;",
        "retrieved": [
            4694
        ],
        "token_usage": {
            "tokens": 1171,
            "cost": 0.00023730000000000002
        },
        "db_id": "disney",
        "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" GROUP BY \"voice-actor\" HAVING COUNT(movie) > 5"
    },
    {
        "sample_id": 4689,
        "pred_sql": "SELECT characters.hero, director.director, characters.release_date FROM characters INNER JOIN director ON director.name = characters.movie_title WHERE characters.movie_title = 'Mulan'",
        "retrieved": [
            4641
        ],
        "token_usage": {
            "tokens": 1112,
            "cost": 0.00021224999999999998
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.hero, T2.director, T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.movie_title = 'Mulan'"
    },
    {
        "sample_id": 4633,
        "pred_sql": "SELECT characters.villian FROM characters INNER JOIN movies_total_gross ON characters.movie_title = movies_total_gross.movie_title ORDER BY movies_total_gross.total_gross DESC LIMIT 1;",
        "retrieved": [
            4694
        ],
        "token_usage": {
            "tokens": 1175,
            "cost": 0.00023925
        },
        "db_id": "disney",
        "gold_sql": "SELECT T2.villian FROM \"movies_total_gross\" AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1"
    },
    {
        "sample_id": 4691,
        "pred_sql": "SELECT characters.movie_title, director.director, characters.release_date FROM characters INNER JOIN \"voice-actors\" ON characters.hero = voice-actors.character INNER JOIN director ON director.name = characters.movie_title WHERE voice-actors.\"voice-actor\" = 'Freddie Jones'",
        "retrieved": [
            4644
        ],
        "token_usage": {
            "tokens": 1264,
            "cost": 0.00029084999999999994
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie, T3.director, T2.release_date FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T1.\"voice-actor\" = 'Freddie Jones'"
    },
    {
        "sample_id": 4637,
        "pred_sql": "SELECT characters.movie_title FROM characters INNER JOIN round ON characters.movie_title = round.movie WHERE round.song = 'I Thought I Lost You';",
        "retrieved": [
            4672
        ],
        "token_usage": {
            "tokens": 1231,
            "cost": 0.000249
        },
        "db_id": "disney",
        "gold_sql": "SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You'"
    },
    {
        "sample_id": 4646,
        "pred_sql": "SELECT T1.movie_title, T1.inflation_adjusted_gross FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY T1.inflation_adjusted_gross DESC LIMIT 1;",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1313,
            "cost": 0.00028649999999999997
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY CAST(REPLACE(SUBSTR(inflation_adjusted_gross, 2), ',', '') AS REAL) DESC LIMIT 1"
    },
    {
        "sample_id": 4708,
        "pred_sql": "SELECT c.movie_title FROM characters AS c LEFT JOIN round AS r ON c.movie_title = r.movie_title WHERE c.hero IS NOT NULL AND r.villian IS NULL AND c.movie_title IN (SELECT m.movie_title FROM director AS d INNER JOIN movies_total_gross AS m ON d.name = m.movie_title WHERE d.director = 'Wolfgang Reitherman')",
        "retrieved": [
            4630
        ],
        "token_usage": {
            "tokens": 1319,
            "cost": 0.00029414999999999997
        },
        "db_id": "disney",
        "gold_sql": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.villian IS NULL"
    },
    {
        "sample_id": 4659,
        "pred_sql": "SELECT voice_actors.voice_actor FROM voice_actors INNER JOIN characters ON voice_actors.movie = characters.movie_title INNER JOIN director ON characters.movie_title = director.name WHERE director.director = 'Ben Sharpsteen' AND characters.release_date = '1940-02-09';",
        "retrieved": [
            4643
        ],
        "token_usage": {
            "tokens": 1213,
            "cost": 0.0002562
        },
        "db_id": "disney",
        "gold_sql": "SELECT T2.\"voice-actor\" FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 INNER JOIN movies_total_gross AS T3 ON T1.name = T2.movie AND T2.movie = T3.movie_title WHERE T1.director = 'Ben Sharpsteen' AND T3.release_date = 'Feb 9, 1940' AND T2.\"voice-actor\" != 'None' GROUP BY T2.\"voice-actor\""
    },
    {
        "sample_id": 2787,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.awayteam = 'Werder Bremen' AND divisions.name = 'Bundesliga' AND matchs.ftr = 'A';",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 826,
            "cost": 0.0002103
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.AwayTeam = 'Werder Bremen' AND T1.FTR = 'A'"
    },
    {
        "sample_id": 2777,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Scottish League One' AND matchs.date = (SELECT date FROM matchs WHERE hometeam = 'Pro Vercelli' AND awayteam = 'Pescara' AND fthg = '5' AND ftag = '2')",
        "retrieved": [
            2763
        ],
        "token_usage": {
            "tokens": 768,
            "cost": 0.00018944999999999997
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Date) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish League One' AND T1.Date = ( SELECT Date FROM matchs WHERE FTHG = 5 AND FTAG = 2 AND HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' )"
    },
    {
        "sample_id": 2778,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.country = 'Greece' AND matchs.fthg = '5' AND matchs.ftag = '0';",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 792,
            "cost": 0.00019214999999999998
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' AND T1.FTHG = 5 AND T1.FTAG = 0"
    },
    {
        "sample_id": 2759,
        "pred_sql": "SELECT divisions.division, divisions.country FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.hometeam = 'Hearts' AND matchs.awayteam = 'Hibernian'",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 781,
            "cost": 0.00017835
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'"
    },
    {
        "sample_id": 2776,
        "pred_sql": "SELECT divisions.name, COUNT(*) AS zero_zero_count FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.fthg = '0' AND matchs.ftag = '0' GROUP BY divisions.name ORDER BY zero_zero_count DESC LIMIT 1;",
        "retrieved": [
            2770
        ],
        "token_usage": {
            "tokens": 859,
            "cost": 0.0002274
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTAG = 0 AND T1.FTHG = 0 GROUP BY T2.division ORDER BY COUNT(T1.FTAG) DESC LIMIT 1"
    },
    {
        "sample_id": 2775,
        "pred_sql": "SELECT divisions.name FROM divisions INNER JOIN matchs ON divisions.division = matchs.div WHERE matchs.date = '2020-02-22' AND (matchs.fthg + matchs.ftag) > 5 GROUP BY divisions.name ORDER BY COUNT(*) DESC LIMIT 1;",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 873,
            "cost": 0.000234
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-02-22' AND T1.FTAG + T1.FTHG > 5 ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1"
    },
    {
        "sample_id": 2764,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Seria A' AND matchs.fthg = matchs.ftag;",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 770,
            "cost": 0.0001785
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Seria A' AND T1.FTR = 'D'"
    },
    {
        "sample_id": 2773,
        "pred_sql": "SELECT divisions.country, SUM(matchs.ftag) AS total_away_goals FROM matchs INNER JOIN divisions ON matchs.div = divisions.division GROUP BY divisions.country ORDER BY total_away_goals DESC LIMIT 1;",
        "retrieved": [
            2747
        ],
        "token_usage": {
            "tokens": 814,
            "cost": 0.00020669999999999998
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division GROUP BY T2.country ORDER BY SUM(T1.FTAG) DESC LIMIT 1"
    },
    {
        "sample_id": 2762,
        "pred_sql": "SELECT divisions.name FROM divisions INNER JOIN matchs ON divisions.division = matchs.div GROUP BY divisions.name, matchs.season HAVING matchs.season = '2019' AND COUNT(CASE WHEN matchs.ftr = 'D' THEN 1 END) = (SELECT MIN(draft_count) FROM (SELECT COUNT(*) AS draft_count FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE matchs.season = '2019' GROUP BY divisions.name))",
        "retrieved": [
            2783
        ],
        "token_usage": {
            "tokens": 863,
            "cost": 0.00024645
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T1.FTR = 'D' GROUP BY T2.division ORDER BY COUNT(FTR) LIMIT 1"
    },
    {
        "sample_id": 2748,
        "pred_sql": "SELECT COUNT(*) FROM matchs WHERE season = '2019' AND (fthg = '2' AND ftag = '2') AND div IN (SELECT division FROM divisions WHERE name = 'Scottish Championship');",
        "retrieved": [
            2751
        ],
        "token_usage": {
            "tokens": 990,
            "cost": 0.00021329999999999998
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2"
    },
    {
        "sample_id": 2758,
        "pred_sql": "SELECT COUNT(*) FROM matchs INNER JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Scottish Premiership' AND matchs.date BETWEEN '2006-01-01' AND '2008-12-31';",
        "retrieved": [
            2763
        ],
        "token_usage": {
            "tokens": 772,
            "cost": 0.00019724999999999997
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)"
    },
    {
        "sample_id": 2742,
        "pred_sql": "WITH AwayMatches AS (\n    SELECT awayteam, \n           COUNT(*) AS total_matches, \n           SUM(CASE WHEN ftr = 'A' THEN 1 ELSE 0 END) AS wins\n    FROM matchs\n    INNER JOIN divisions ON matchs.div = divisions.division\n    WHERE divisions.name = 'Caen' AND matchs.season = '2010'\n    GROUP BY awayteam\n), WinningPercentages AS (\n    SELECT awayteam, \n           (wins * 1.0 / total_matches) AS winning_percentage\n    FROM AwayMatches\n)\nSELECT awayteam\nFROM WinningPercentages\nORDER BY winning_percentage DESC\nLIMIT 1;",
        "retrieved": [
            2770
        ],
        "token_usage": {
            "tokens": 922,
            "cost": 0.0002607
        },
        "db_id": "european_football_1",
        "gold_sql": "SELECT AwayTeam FROM matchs WHERE HomeTeam = 'Caen' AND season = 2010 AND FTR = 'A' GROUP BY AwayTeam ORDER BY COUNT(AwayTeam) DESC LIMIT 1"
    },
    {
        "sample_id": 10455,
        "pred_sql": "SELECT AVG(height) FROM player WHERE birthday >= '1990-01-01' AND birthday <= '1995-12-31';",
        "retrieved": [
            10490
        ],
        "token_usage": {
            "tokens": 4775,
            "cost": 0.0007616999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'"
    },
    {
        "sample_id": 10530,
        "pred_sql": "SELECT team_attributes.buildupplayspeedclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date LIKE '2011-02-22%'",
        "retrieved": [
            10532
        ],
        "token_usage": {
            "tokens": 4833,
            "cost": 0.0007987499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.\"date\", 1, 10) = '2011-02-22'"
    },
    {
        "sample_id": 10500,
        "pred_sql": "SELECT player_name, birthday FROM player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;",
        "retrieved": [
            10482
        ],
        "token_usage": {
            "tokens": 4721,
            "cost": 0.0007653
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10556,
        "pred_sql": "SELECT (SELECT jumping FROM player_attributes WHERE player_api_id = 6) - (SELECT jumping FROM player_attributes WHERE player_api_id = 23) AS jumping_difference;",
        "retrieved": [
            10444
        ],
        "token_usage": {
            "tokens": 4720,
            "cost": 0.0007503
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1"
    },
    {
        "sample_id": 10569,
        "pred_sql": "SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = (SELECT MAX(overall_rating) FROM player_attributes)",
        "retrieved": [
            10473
        ],
        "token_usage": {
            "tokens": 4760,
            "cost": 0.0007639499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)"
    },
    {
        "sample_id": 10512,
        "pred_sql": "SELECT long_passing FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player ORDER BY birthday ASC LIMIT 1)",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4868,
            "cost": 0.0007931999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10501,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.height DESC LIMIT 1",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4796,
            "cost": 0.0007733999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"
    },
    {
        "sample_id": 10498,
        "pred_sql": "SELECT AVG(ball_control) AS avg_ball_control FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name IN ('Abdou Diallo', 'Aaron Appindangoye'))",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4855,
            "cost": 0.0007799999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id"
    },
    {
        "sample_id": 10495,
        "pred_sql": "SELECT COUNT(*) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Germany 1. Bundesliga' AND match.date BETWEEN '2008-08-01' AND '2008-10-31';",
        "retrieved": [
            10452
        ],
        "token_usage": {
            "tokens": 4829,
            "cost": 0.0007936499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.\"date\", 1, 7) BETWEEN '2008-08' AND '2008-10'"
    },
    {
        "sample_id": 10538,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 GROUP BY player.id ORDER BY player.height DESC LIMIT 10",
        "retrieved": [
            10462
        ],
        "token_usage": {
            "tokens": 4840,
            "cost": 0.0007989
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1"
    },
    {
        "sample_id": 10563,
        "pred_sql": "SELECT team.team_long_name, team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge'",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4913,
            "cost": 0.0008165999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'"
    },
    {
        "sample_id": 10493,
        "pred_sql": "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4928,
            "cost": 0.0008147999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32"
    },
    {
        "sample_id": 10534,
        "pred_sql": "SELECT team_attributes.chancecreationcrossingclass FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22';",
        "retrieved": [
            10446
        ],
        "token_usage": {
            "tokens": 4771,
            "cost": 0.0007907999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.\"date\", 1, 10) = '2010-02-22'"
    },
    {
        "sample_id": 10524,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = '77' AND player_attributes.date = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1;",
        "retrieved": [
            10536
        ],
        "token_usage": {
            "tokens": 4872,
            "cost": 0.0008108999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10468,
        "pred_sql": "SELECT team_attributes.buildupplaypositioningclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'ADO Den Haag'",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4893,
            "cost": 0.0008032499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'"
    },
    {
        "sample_id": 10480,
        "pred_sql": "SELECT player.player_name, AVG(CAST(player_attributes.finishing AS FLOAT)) AS average_finishing_rate\nFROM player\nINNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id\nWHERE player.height = (SELECT MAX(height) FROM player) OR player.height = (SELECT MIN(height) FROM player)\nGROUP BY player.player_name\nORDER BY average_finishing_rate DESC\nLIMIT 1;",
        "retrieved": [
            10490
        ],
        "token_usage": {
            "tokens": 4891,
            "cost": 0.0008322
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1"
    },
    {
        "sample_id": 10540,
        "pred_sql": "SELECT player_name FROM player WHERE birthday <= date('now', '-35 years')",
        "retrieved": [],
        "token_usage": {
            "tokens": 4665,
            "cost": 0.00076635
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35"
    },
    {
        "sample_id": 10526,
        "pred_sql": "SELECT potential FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30'",
        "retrieved": [
            10444
        ],
        "token_usage": {
            "tokens": 4751,
            "cost": 0.0007670999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'"
    },
    {
        "sample_id": 10543,
        "pred_sql": "SELECT SUM(m.home_team_goal) AS total_home_goals\nFROM match AS m\nJOIN player AS p ON p.player_api_id IN (m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5, m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11)\nWHERE (strftime('%Y', 'now') - strftime('%Y', p.birthday)) <= 30;",
        "retrieved": [
            10479
        ],
        "token_usage": {
            "tokens": 4900,
            "cost": 0.0008407499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31"
    },
    {
        "sample_id": 10515,
        "pred_sql": "SELECT AVG(CAST(player_attributes.overall_rating AS FLOAT)) AS average_overall_rating FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE STRFTIME('%Y', player.birthday) < '1986'",
        "retrieved": [
            10490
        ],
        "token_usage": {
            "tokens": 4850,
            "cost": 0.0008066999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'"
    },
    {
        "sample_id": 10558,
        "pred_sql": "SELECT COUNT(*) FROM player_attributes WHERE preferred_foot = 'left' AND potential = (SELECT MAX(potential) FROM player_attributes)",
        "retrieved": [
            10444
        ],
        "token_usage": {
            "tokens": 4775,
            "cost": 0.0007805999999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)"
    },
    {
        "sample_id": 10447,
        "pred_sql": "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = 2016 GROUP BY league.name ORDER BY SUM(match.home_team_goal + match.away_team_goal) DESC LIMIT 1;",
        "retrieved": [
            10561
        ],
        "token_usage": {
            "tokens": 4855,
            "cost": 0.0008304
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1"
    },
    {
        "sample_id": 10457,
        "pred_sql": "SELECT team.team_fifa_api_id FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed > 50 AND team_attributes.buildupplayspeed < 60;",
        "retrieved": [
            10532
        ],
        "token_usage": {
            "tokens": 4802,
            "cost": 0.0007801499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60"
    },
    {
        "sample_id": 10549,
        "pred_sql": "SELECT country.name FROM country INNER JOIN player ON player.player_fifa_api_id = player_attributes.player_fifa_api_id INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.vision >= 90",
        "retrieved": [
            10550
        ],
        "token_usage": {
            "tokens": 4858,
            "cost": 0.0008133
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89"
    },
    {
        "sample_id": 10461,
        "pred_sql": "SELECT AVG(player_attributes.long_shots) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ahmed Samir Farag'",
        "retrieved": [
            10479
        ],
        "token_usage": {
            "tokens": 4789,
            "cost": 0.0007759499999999999
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.\"date\") FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'"
    },
    {
        "sample_id": 10520,
        "pred_sql": "SELECT MAX(chancecreationpassing) AS highest_chance_creation_passing, chancecreationpassingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax'",
        "retrieved": [
            10458
        ],
        "token_usage": {
            "tokens": 4901,
            "cost": 0.0008107499999999998
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1"
    },
    {
        "sample_id": 10521,
        "pred_sql": "SELECT player_attributes.preferred_foot FROM player_attributes JOIN player ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Abdou Diallo'",
        "retrieved": [
            10444
        ],
        "token_usage": {
            "tokens": 4758,
            "cost": 0.0007753500000000001
        },
        "db_id": "european_football_2",
        "gold_sql": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'"
    },
    {
        "sample_id": 9600,
        "pred_sql": "SELECT card.type FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE client.client_id = 9",
        "retrieved": [
            9525
        ],
        "token_usage": {
            "tokens": 1678,
            "cost": 0.00030795
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9"
    },
    {
        "sample_id": 9593,
        "pred_sql": "SELECT (SELECT SUM(a15) FROM district WHERE a3 = 'East Bohemia') - (SELECT SUM(a15) FROM district WHERE a3 = 'North Bohemia') AS crime_difference",
        "retrieved": [
            9555
        ],
        "token_usage": {
            "tokens": 1675,
            "cost": 0.00032234999999999995
        },
        "db_id": "financial",
        "gold_sql": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district"
    },
    {
        "sample_id": 9607,
        "pred_sql": "SELECT CAST(SUM(client.gender = 'F') AS FLOAT) * 100 / COUNT(client.client_id) AS female_percentage FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'Prague'",
        "retrieved": [
            9537
        ],
        "token_usage": {
            "tokens": 1754,
            "cost": 0.0003333
        },
        "db_id": "financial",
        "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'"
    },
    {
        "sample_id": 9536,
        "pred_sql": "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Prague' ORDER BY account.date LIMIT 1;",
        "retrieved": [
            9611
        ],
        "token_usage": {
            "tokens": 1843,
            "cost": 0.00037544999999999994
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1"
    },
    {
        "sample_id": 9571,
        "pred_sql": "SELECT DISTINCT account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.account_id NOT IN (SELECT account_id FROM loan) AND district.a11 > 8000 AND district.a11 <= 9000;",
        "retrieved": [
            9559
        ],
        "token_usage": {
            "tokens": 1743,
            "cost": 0.00032444999999999994
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000"
    },
    {
        "sample_id": 9580,
        "pred_sql": "SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;",
        "retrieved": [
            9570
        ],
        "token_usage": {
            "tokens": 1688,
            "cost": 0.00030674999999999995
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.district_id FROM \"order\" AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333"
    },
    {
        "sample_id": 9598,
        "pred_sql": "SELECT SUM(loan.amount) AS total_debt, loan.status FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 992 GROUP BY loan.status;",
        "retrieved": [
            9601
        ],
        "token_usage": {
            "tokens": 1760,
            "cost": 0.00034634999999999993
        },
        "db_id": "financial",
        "gold_sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992"
    },
    {
        "sample_id": 9585,
        "pred_sql": "SELECT district.a3 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.a3 ORDER BY COUNT(account.account_id) DESC LIMIT 1;",
        "retrieved": [
            9553
        ],
        "token_usage": {
            "tokens": 1776,
            "cost": 0.00034784999999999997
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1"
    },
    {
        "sample_id": 9551,
        "pred_sql": "SELECT d.a2 AS district_name, SUM(t.amount) AS total_withdrawals\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.type = 'VYDAJ' AND strftime('%Y%m', t.date) = '199601'\nGROUP BY d.district_id\nORDER BY total_withdrawals DESC\nLIMIT 10;",
        "retrieved": [
            9555
        ],
        "token_usage": {
            "tokens": 1797,
            "cost": 0.0003951
        },
        "db_id": "financial",
        "gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10"
    },
    {
        "sample_id": 9616,
        "pred_sql": "SELECT client.client_id, (strftime('%Y', 'now') - (birth_date / 10000)) AS age FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND account.account_id IN (SELECT account_id FROM loan)",
        "retrieved": [
            9525
        ],
        "token_usage": {
            "tokens": 1811,
            "cost": 0.00038415
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'"
    },
    {
        "sample_id": 9613,
        "pred_sql": "SELECT COUNT(DISTINCT loan.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'weekly'",
        "retrieved": [
            9610
        ],
        "token_usage": {
            "tokens": 1722,
            "cost": 0.00033434999999999997
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'"
    },
    {
        "sample_id": 9518,
        "pred_sql": "SELECT COUNT(DISTINCT c.client_id) AS owner_count\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nWHERE a.frequency = 'weekly' AND d.type = 'OWNER';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1585,
            "cost": 0.00031335
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'"
    },
    {
        "sample_id": 9581,
        "pred_sql": "SELECT trans.* FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE client.client_id = 3356 AND trans.operation = 'VYBER'",
        "retrieved": [
            9601
        ],
        "token_usage": {
            "tokens": 1734,
            "cost": 0.0003325499999999999
        },
        "db_id": "financial",
        "gold_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'"
    },
    {
        "sample_id": 9529,
        "pred_sql": "SELECT client.gender FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE account.date = (SELECT MIN(account.date) FROM account INNER JOIN district AS d ON account.district_id = d.district_id WHERE d.a11 = (SELECT MAX(a11) FROM district)) LIMIT 1;",
        "retrieved": [
            9611
        ],
        "token_usage": {
            "tokens": 1806,
            "cost": 0.00035279999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1"
    },
    {
        "sample_id": 9554,
        "pred_sql": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M'",
        "retrieved": [
            9546
        ],
        "token_usage": {
            "tokens": 1710,
            "cost": 0.0003231
        },
        "db_id": "financial",
        "gold_sql": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'"
    },
    {
        "sample_id": 9531,
        "pred_sql": "SELECT COUNT(DISTINCT client.client_id) AS number_of_women_clients FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND district.district_name = 'Jesenik';",
        "retrieved": [
            9611
        ],
        "token_usage": {
            "tokens": 1822,
            "cost": 0.0003651
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'"
    },
    {
        "sample_id": 9591,
        "pred_sql": "SELECT (SUM(CASE WHEN loan.date BETWEEN 960101 AND 970101 THEN loan.amount ELSE 0 END) - SUM(CASE WHEN loan.date BETWEEN 950101 AND 960101 THEN loan.amount ELSE 0 END)) / SUM(CASE WHEN loan.date BETWEEN 950101 AND 960101 THEN loan.amount ELSE 0 END) * 100 AS growth_rate\nFROM loan\nJOIN disp ON loan.account_id = disp.account_id\nJOIN client ON disp.client_id = client.client_id\nWHERE client.gender = 'M';",
        "retrieved": [
            9556
        ],
        "token_usage": {
            "tokens": 1882,
            "cost": 0.00042314999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'"
    },
    {
        "sample_id": 9547,
        "pred_sql": "SELECT district.a2, (district.a13 - district.a12) AS unemployment_rate_increment\nFROM district\nJOIN account ON district.district_id = account.district_id\nJOIN loan ON account.account_id = loan.account_id\nWHERE loan.status = 'D'",
        "retrieved": [
            9556
        ],
        "token_usage": {
            "tokens": 1766,
            "cost": 0.0003495
        },
        "db_id": "financial",
        "gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'"
    },
    {
        "sample_id": 9587,
        "pred_sql": "SELECT trans.* FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = '5'",
        "retrieved": [
            9559
        ],
        "token_usage": {
            "tokens": 1695,
            "cost": 0.00030734999999999996
        },
        "db_id": "financial",
        "gold_sql": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5"
    },
    {
        "sample_id": 9549,
        "pred_sql": "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 0 ORDER BY loan.amount",
        "retrieved": [
            9610
        ],
        "token_usage": {
            "tokens": 1686,
            "cost": 0.00031724999999999993
        },
        "db_id": "financial",
        "gold_sql": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'"
    },
    {
        "sample_id": 9526,
        "pred_sql": "SELECT account.date FROM account WHERE account.account_id = (SELECT trans.account_id FROM trans WHERE trans.amount = 840 AND trans.date = '19981014')",
        "retrieved": [
            9523
        ],
        "token_usage": {
            "tokens": 1637,
            "cost": 0.0002937
        },
        "db_id": "financial",
        "gold_sql": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'"
    },
    {
        "sample_id": 9576,
        "pred_sql": "SELECT district.a2, COUNT(client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.a2 = 'Hl.m. Praha' GROUP BY district.district_id, district.a2",
        "retrieved": [
            9550
        ],
        "token_usage": {
            "tokens": 1753,
            "cost": 0.00034484999999999995
        },
        "db_id": "financial",
        "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'"
    },
    {
        "sample_id": 8773,
        "pred_sql": "SELECT COUNT(DISTINCT owner_name) FROM businesses WHERE owner_state = 'California'",
        "retrieved": [
            8808
        ],
        "token_usage": {
            "tokens": 960,
            "cost": 0.00019259999999999997
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(owner_state) FROM businesses WHERE owner_state = 'CA'"
    },
    {
        "sample_id": 8813,
        "pred_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE T2.tax_code = 'H24' AND T3.type = 5",
        "retrieved": [
            8815
        ],
        "token_usage": {
            "tokens": 1108,
            "cost": 0.00025035
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'H24' AND T1.type = 'Complaint' GROUP BY T1.business_id HAVING COUNT(T1.business_id) > 5 ) T3"
    },
    {
        "sample_id": 8798,
        "pred_sql": "SELECT b.address FROM businesses b INNER JOIN (SELECT business_id, COUNT(*) as violation_count FROM violations WHERE risk_category = 'Low' GROUP BY business_id) v ON b.business_id = v.business_id ORDER BY v.violation_count DESC LIMIT 1;",
        "retrieved": [
            8844
        ],
        "token_usage": {
            "tokens": 1043,
            "cost": 0.0002415
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.address FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk' GROUP BY T2.address ORDER BY COUNT(T1.business_id) DESC LIMIT 1"
    },
    {
        "sample_id": 8804,
        "pred_sql": "SELECT COUNT(*) FROM businesses WHERE city = 'Hayward';",
        "retrieved": [
            8808
        ],
        "token_usage": {
            "tokens": 978,
            "cost": 0.00020339999999999998
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD'"
    },
    {
        "sample_id": 8853,
        "pred_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE STRFTIME('%Y', T1.date) = '2016' AND T3.type = 'unscheduled'",
        "retrieved": [
            8815
        ],
        "token_usage": {
            "tokens": 1075,
            "cost": 0.00023099999999999998
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.type = 'Routine - Unscheduled'"
    },
    {
        "sample_id": 8797,
        "pred_sql": "SELECT COUNT(inspections.business_id) FROM inspections INNER JOIN businesses ON inspections.business_id = businesses.business_id WHERE inspections.type = 'unscheduled' AND businesses.name = 'Soma Restaurant And Bar'",
        "retrieved": [
            8783
        ],
        "token_usage": {
            "tokens": 975,
            "cost": 0.00020429999999999998
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Soma Restaurant And Bar' AND T1.type = 'Routine - Unscheduled'"
    },
    {
        "sample_id": 8847,
        "pred_sql": "SELECT b.name FROM businesses b INNER JOIN inspections i ON b.business_id = i.business_id INNER JOIN violations v ON b.business_id = v.business_id WHERE v.violation_type_id = '103157' AND v.date = '2016-05-27' AND i.type = 'unscheduled';",
        "retrieved": [
            8815
        ],
        "token_usage": {
            "tokens": 1126,
            "cost": 0.00025575
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT DISTINCT T3.name FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T1.\"date\" = '2016-05-27' AND T1.violation_type_id = 103157 AND T2.type = 'Routine - Unscheduled'"
    },
    {
        "sample_id": 8810,
        "pred_sql": "SELECT city, COUNT(DISTINCT businesses.business_id) AS establishment_count \nFROM businesses \nJOIN inspections ON businesses.business_id = inspections.business_id \nJOIN violations ON businesses.business_id = violations.business_id \nWHERE STRFTIME('%Y', inspections.date) = '2016' \nAND violations.risk_category = 'High' \nGROUP BY city \nORDER BY establishment_count DESC \nLIMIT 1;",
        "retrieved": [
            8822
        ],
        "token_usage": {
            "tokens": 1095,
            "cost": 0.0002691
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.city FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T1.risk_category = 'High Risk' GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1"
    },
    {
        "sample_id": 8833,
        "pred_sql": "SELECT businesses.name, businesses.city, businesses.tax_code FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.date = '2014-06-03' AND violations.risk_category = 'High' LIMIT 5;",
        "retrieved": [
            8787
        ],
        "token_usage": {
            "tokens": 1067,
            "cost": 0.00023475
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT DISTINCT T2.name, T2.city, T2.tax_code FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.\"date\" = '2014-06-03' LIMIT 5"
    },
    {
        "sample_id": 8792,
        "pred_sql": "SELECT businesses.name FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.risk_category = 'High' GROUP BY businesses.name ORDER BY COUNT(violations.business_id) DESC LIMIT 1",
        "retrieved": [
            8787
        ],
        "token_usage": {
            "tokens": 1074,
            "cost": 0.0002448
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1"
    },
    {
        "sample_id": 8817,
        "pred_sql": "SELECT AVG(inspections.score) FROM inspections INNER JOIN businesses ON inspections.business_id = businesses.business_id WHERE businesses.owner_name = 'Yiu Tim Chan' AND businesses.address = '808 Pacific Ave' AND businesses.city = 'San Francisco' AND inspections.date BETWEEN '2014-01-01' AND '2016-12-31';",
        "retrieved": [
            8818
        ],
        "token_usage": {
            "tokens": 1086,
            "cost": 0.00025335
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") BETWEEN '2014' AND '2016' AND T2.owner_name = 'Yiu Tim Chan' AND T2.address = '808 Pacific Ave' AND T2.city = 'San Francisco'"
    },
    {
        "sample_id": 8824,
        "pred_sql": "SELECT COUNT(DISTINCT businesses.business_id) FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.description = 'unpermitted food facility' AND violations.risk_category = 'Low'",
        "retrieved": [
            8828
        ],
        "token_usage": {
            "tokens": 1022,
            "cost": 0.0002271
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(DISTINCT business_id) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility'"
    },
    {
        "sample_id": 8777,
        "pred_sql": "SELECT COUNT(DISTINCT businesses.business_id) FROM inspections INNER JOIN businesses ON inspections.business_id = businesses.business_id WHERE STRFTIME('%Y', inspections.date) = '2016' AND businesses.city = 'San Francisco'",
        "retrieved": [
            8809
        ],
        "token_usage": {
            "tokens": 1052,
            "cost": 0.00024735
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')"
    },
    {
        "sample_id": 8830,
        "pred_sql": "SELECT businesses.business_id, businesses.name, businesses.address FROM inspections INNER JOIN businesses ON inspections.business_id = businesses.business_id WHERE inspections.date = '2016-07-30';",
        "retrieved": [
            8816
        ],
        "token_usage": {
            "tokens": 1703,
            "cost": 0.0003225
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT DISTINCT T2.business_id, T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.date = '2016-07-30'"
    },
    {
        "sample_id": 8793,
        "pred_sql": "SELECT COUNT(violations.business_id) FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Stacks Restaurant' AND violations.date = '2016-10-04'",
        "retrieved": [
            8812
        ],
        "token_usage": {
            "tokens": 996,
            "cost": 0.00021464999999999999
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(DISTINCT T1.violation_type_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Stacks Restaurant' AND T1.\"date\" = '2016-10-04'"
    },
    {
        "sample_id": 8855,
        "pred_sql": "SELECT (COUNT(DISTINCT T1.business_id) * 100.0 / (SELECT COUNT(*) FROM businesses WHERE postal_code = '94110' AND business_id IN (SELECT business_id FROM inspections WHERE score < 95))) AS low_risk_percentage FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.postal_code = '94110' AND T1.risk_category = 'Low'",
        "retrieved": [
            8844
        ],
        "token_usage": {
            "tokens": 1095,
            "cost": 0.0002646
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.risk_category = 'Low Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.risk_category) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T2.score < 95 AND T3.postal_code = 94110"
    },
    {
        "sample_id": 8799,
        "pred_sql": "SELECT b.name FROM violations v INNER JOIN businesses b ON v.business_id = b.business_id WHERE v.description = 'Permit license or inspection report not posted' AND v.risk_category = 'Low' ORDER BY v.date ASC LIMIT 1;",
        "retrieved": [
            8815
        ],
        "token_usage": {
            "tokens": 1127,
            "cost": 0.00025634999999999997
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = ( SELECT MIN(\"date\") FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'"
    },
    {
        "sample_id": 8774,
        "pred_sql": "SELECT COUNT(DISTINCT T3.name) AS restaurant_count FROM (SELECT T2.name, STRFTIME('%Y', T1.date) AS years FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100) AS T3",
        "retrieved": [
            8816
        ],
        "token_usage": {
            "tokens": 1716,
            "cost": 0.0003348
        },
        "db_id": "food_inspection",
        "gold_sql": "SELECT COUNT(score) FROM inspections WHERE score = 100"
    },
    {
        "sample_id": 6164,
        "pred_sql": "SELECT COUNT(DISTINCT establishment.license_no) AS restaurant_count FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE establishment.facility_type = 'Restaurant' AND establishment.risk_level = (SELECT MAX(risk_level) FROM establishment WHERE facility_type = 'Restaurant') AND inspection.results IN ('Pass', 'Pass w/ Conditions');",
        "retrieved": [
            6213
        ],
        "token_usage": {
            "tokens": 1686,
            "cost": 0.00035415
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Pass' AND T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6194,
        "pred_sql": "SELECT inspection.results FROM inspection INNER JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Thomas' AND employee.last_name = 'Langley'",
        "retrieved": [
            6161
        ],
        "token_usage": {
            "tokens": 1609,
            "cost": 0.00030749999999999994
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'"
    },
    {
        "sample_id": 6166,
        "pred_sql": "SELECT employee.title FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = '60332';",
        "retrieved": [
            6165
        ],
        "token_usage": {
            "tokens": 1597,
            "cost": 0.0003048
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332"
    },
    {
        "sample_id": 6134,
        "pred_sql": "SELECT COUNT(DISTINCT establishment.license_no) AS establishment_count \nFROM establishment \nINNER JOIN inspection ON establishment.license_no = inspection.license_no \nINNER JOIN employee ON inspection.employee_id = employee.employee_id \nWHERE employee.address = '5000 N Wolcott Ave' \nAND STRFTIME('%Y-%m', inspection.inspection_date) = '2011-05';",
        "retrieved": [
            6161
        ],
        "token_usage": {
            "tokens": 1686,
            "cost": 0.00034605
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND strftime('%Y-%m', T1.inspection_date) = '2011-05'"
    },
    {
        "sample_id": 6151,
        "pred_sql": "SELECT e.first_name || ' ' || e.last_name AS assumed_name, SUM(v.fine) AS total_fine\nFROM violation v\nJOIN inspection i ON v.inspection_id = i.inspection_id\nJOIN establishment est ON i.license_no = est.license_no\nJOIN employee e ON i.employee_id = e.employee_id\nWHERE STRFTIME('%Y', i.inspection_date) = '2014'\nGROUP BY est.dba_name\nORDER BY total_fine DESC\nLIMIT 1;",
        "retrieved": [
            6182
        ],
        "token_usage": {
            "tokens": 1735,
            "cost": 0.00036779999999999994
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T.dba_name FROM ( SELECT T1.dba_name, SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y', T2.inspection_date) = '2014' GROUP BY T1.dba_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) AS T"
    },
    {
        "sample_id": 6115,
        "pred_sql": "SELECT DISTINCT establishment.latitude, establishment.longitude FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE inspection.inspection_date = '2010-05-11'",
        "retrieved": [
            6161
        ],
        "token_usage": {
            "tokens": 1625,
            "cost": 0.00031305
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'"
    },
    {
        "sample_id": 6153,
        "pred_sql": "SELECT violation.inspector_comment, inspection_point.code FROM inspection_point INNER JOIN violation ON inspection_point.point_id = violation.point_id INNER JOIN inspection ON violation.inspection_id = inspection.inspection_id INNER JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'Taqueria La Fiesta' AND inspection.inspection_date = '2010-01-25'",
        "retrieved": [
            6171
        ],
        "token_usage": {
            "tokens": 1712,
            "cost": 0.00037604999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T3.inspector_comment FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2010-01-25' AND T1.dba_name = 'TAQUERIA LA FIESTA'"
    },
    {
        "sample_id": 6175,
        "pred_sql": "SELECT COUNT(*) AS failed_inspections_count FROM inspection WHERE results = 'Fail' AND strftime('%Y', inspection_date) = '2014';",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1574,
            "cost": 0.00029414999999999997
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y', inspection_date) = '2014' AND results = 'Fail'"
    },
    {
        "sample_id": 6131,
        "pred_sql": "SELECT COUNT(inspection.inspection_id) AS total_inspections FROM inspection INNER JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.address = '3635 W DIVERSEY AVE';",
        "retrieved": [
            6190
        ],
        "token_usage": {
            "tokens": 1652,
            "cost": 0.0003207
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.address = '3635 W DIVERSEY AVE ' AND T1.facility_type = 'Grocery Store'"
    },
    {
        "sample_id": 6197,
        "pred_sql": "SELECT title FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = '52269'",
        "retrieved": [
            6119
        ],
        "token_usage": {
            "tokens": 1632,
            "cost": 0.00032085
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52269"
    },
    {
        "sample_id": 6202,
        "pred_sql": "SELECT DISTINCT establishment.dba_name FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE inspection.results IN ('Pass', 'Pass w/ Conditions')",
        "retrieved": [
            6181
        ],
        "token_usage": {
            "tokens": 1583,
            "cost": 0.00029955
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results LIKE '%Pass%'"
    },
    {
        "sample_id": 6207,
        "pred_sql": "SELECT DISTINCT employee.first_name, employee.last_name FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no INNER JOIN employee ON inspection.employee_id = employee.employee_id WHERE establishment.license_no = 1334073",
        "retrieved": [
            6155
        ],
        "token_usage": {
            "tokens": 1633,
            "cost": 0.00032235
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1334073"
    },
    {
        "sample_id": 6222,
        "pred_sql": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1458,
            "cost": 0.0002763
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6236,
        "pred_sql": "SELECT violation.inspection_id FROM violation INNER JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE violation.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND inspection_point.code IN ('7-38-030', '015', '010 (A)', '005 (A)')",
        "retrieved": [
            6171
        ],
        "token_usage": {
            "tokens": 1680,
            "cost": 0.00034559999999999994
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND T1.code = '7-38-030, 015, 010 (A), 005 (A)'"
    },
    {
        "sample_id": 6191,
        "pred_sql": "SELECT first_name FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_id = '48225'",
        "retrieved": [
            6119
        ],
        "token_usage": {
            "tokens": 1623,
            "cost": 0.0003158999999999999
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225"
    },
    {
        "sample_id": 6232,
        "pred_sql": "SELECT inspection.inspection_id, inspection.inspection_date, inspection.results FROM inspection INNER JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Arnold' AND employee.last_name = 'Holder' AND inspection.inspection_date = '2010-02-24';",
        "retrieved": [
            6165
        ],
        "token_usage": {
            "tokens": 1646,
            "cost": 0.00033015
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-02-24' AND T1.first_name = 'Arnold' AND T1.last_name = 'Holder'"
    },
    {
        "sample_id": 6177,
        "pred_sql": "SELECT DISTINCT inspection_point.point_id, violation.fine FROM inspection INNER JOIN violation ON inspection.inspection_id = violation.inspection_id INNER JOIN inspection_point ON violation.point_id = inspection_point.point_id WHERE inspection.inspection_date = '2010-08-07'",
        "retrieved": [
            6182
        ],
        "token_usage": {
            "tokens": 1664,
            "cost": 0.0003252
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T2.point_id, T2.fine FROM inspection AS T1 INNER JOIN violation AS T2 ON T1.inspection_id = T2.inspection_id WHERE T1.inspection_date = '2010-08-07'"
    },
    {
        "sample_id": 6120,
        "pred_sql": "SELECT COUNT(inspection.inspection_id) FROM inspection INNER JOIN employee AS T2 ON inspection.employee_id = T2.employee_id WHERE T2.first_name = 'Joshua' AND T2.last_name = 'Rosa' AND inspection.results = 'Pass'",
        "retrieved": [
            6133
        ],
        "token_usage": {
            "tokens": 1558,
            "cost": 0.00029174999999999996
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "sample_id": 6231,
        "pred_sql": "SELECT establishment.facility_type, establishment.license_no FROM establishment INNER JOIN inspection ON establishment.license_no = inspection.license_no WHERE establishment.risk_level = (SELECT MIN(risk_level) FROM establishment) AND inspection.results = 'Fail';",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1635,
            "cost": 0.00032625
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.facility_type, T1.license_no FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 1 AND T2.results = 'Fail'"
    },
    {
        "sample_id": 6204,
        "pred_sql": "SELECT AVG(employee.salary) AS average_salary FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_type = 'License Re-Inspection';",
        "retrieved": [
            6157
        ],
        "token_usage": {
            "tokens": 1603,
            "cost": 0.00030255
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT AVG(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_type = 'License Re-Inspection'"
    },
    {
        "sample_id": 6217,
        "pred_sql": "SELECT (COUNT(CASE WHEN v.fine = 250 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_restaurants_with_fine_250\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN violation v ON i.inspection_id = v.inspection_id\nWHERE e.facility_type = 'Restaurant';",
        "retrieved": [
            6182
        ],
        "token_usage": {
            "tokens": 1746,
            "cost": 0.00037529999999999996
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.fine = 250 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6112,
        "pred_sql": "SELECT COUNT(inspection.inspection_id) AS inspection_count FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE employee.first_name = 'Joshua' AND employee.last_name = 'Rosa' AND STRFTIME('%Y', inspection.inspection_date) = '2010'",
        "retrieved": [
            6190
        ],
        "token_usage": {
            "tokens": 1633,
            "cost": 0.00031335
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'"
    },
    {
        "sample_id": 6127,
        "pred_sql": "SELECT MIN(inspection.inspection_date) AS first_inspection_date \nFROM establishment \nINNER JOIN inspection ON establishment.license_no = inspection.license_no \nWHERE establishment.dba_name = 'Wing Hung Chop Suey Restaurant';",
        "retrieved": [
            6181
        ],
        "token_usage": {
            "tokens": 1590,
            "cost": 0.0003024
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.aka_name = 'WING HUNG CHOP SUEY RESTAURANT'"
    },
    {
        "sample_id": 6246,
        "pred_sql": "SELECT COUNT(CASE WHEN results = 'Pass' THEN 1 END) - COUNT(CASE WHEN results = 'Fail' THEN 1 END) AS difference FROM inspection WHERE inspection_type = 'canvass' AND results IN ('Pass', 'Fail');",
        "retrieved": [
            6152
        ],
        "token_usage": {
            "tokens": 1589,
            "cost": 0.00029865
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(CASE WHEN T2.results = 'Pass' THEN T1.license_no END) - COUNT(CASE WHEN T2.results = 'Fail' THEN T1.license_no END) AS diff FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'Canvass' AND T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6111,
        "pred_sql": "SELECT DISTINCT employee.first_name, employee.last_name FROM employee INNER JOIN inspection ON employee.employee_id = inspection.employee_id WHERE inspection.inspection_date BETWEEN '2010-05-01' AND '2010-05-31' AND employee.title = 'Sanitarian'",
        "retrieved": [
            6165
        ],
        "token_usage": {
            "tokens": 1639,
            "cost": 0.00032684999999999995
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-05' AND T1.title = 'Sanitarian'"
    },
    {
        "sample_id": 6124,
        "pred_sql": "SELECT DISTINCT inspection_point.point_level FROM inspection_point INNER JOIN violation AS T2 ON inspection_point.point_id = T2.point_id WHERE inspection_point.description = 'Refrigeration and metal stem thermometers provided and conspicuous'",
        "retrieved": [
            6230
        ],
        "token_usage": {
            "tokens": 1640,
            "cost": 0.000327
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous '"
    },
    {
        "sample_id": 6226,
        "pred_sql": "SELECT COUNT(*) FROM establishment WHERE risk_level = (SELECT MAX(risk_level) FROM establishment)",
        "retrieved": [
            6213
        ],
        "token_usage": {
            "tokens": 1534,
            "cost": 0.00026294999999999997
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 3"
    },
    {
        "sample_id": 6138,
        "pred_sql": "SELECT COUNT(CASE WHEN results IN ('Pass', 'Pass w/ Conditions') THEN 1 END) * 100.0 / COUNT(*) AS pass_rate FROM inspection INNER JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'Pockets Restaurant'",
        "retrieved": [
            6181
        ],
        "token_usage": {
            "tokens": 1651,
            "cost": 0.00034035
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.results = 'Pass' THEN T2.inspection_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'POCKETS' AND T1.facility_type = 'Restaurant'"
    },
    {
        "sample_id": 6185,
        "pred_sql": "SELECT inspection.results FROM inspection INNER JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Jean' AND employee.last_name = 'Samocki'",
        "retrieved": [
            6133
        ],
        "token_usage": {
            "tokens": 1570,
            "cost": 0.00030345
        },
        "db_id": "food_inspection_2",
        "gold_sql": "SELECT T3.first_name, T3.last_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'JEAN SAMOCKI'"
    },
    {
        "sample_id": 10357,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN NOT results.time IS NULL THEN results.driverid END) AS FLOAT) * 100 / COUNT(results.driverid) AS percentage_completed FROM races INNER JOIN results ON results.raceid = races.raceid WHERE races.date = '2008-03-16'",
        "retrieved": [
            10303
        ],
        "token_usage": {
            "tokens": 1642,
            "cost": 0.00033765
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL"
    },
    {
        "sample_id": 10421,
        "pred_sql": "SELECT races.name FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds ASC LIMIT 1;",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1676,
            "cost": 0.00033195
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1"
    },
    {
        "sample_id": 10422,
        "pred_sql": "SELECT circuits.name, circuits.location, circuits.country FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid ORDER BY races.date DESC LIMIT 1;",
        "retrieved": [
            10321
        ],
        "token_usage": {
            "tokens": 1572,
            "cost": 0.00029295
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1"
    },
    {
        "sample_id": 10397,
        "pred_sql": "SELECT races.year, MIN(laptimes.milliseconds) AS lowest_lap_time FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid GROUP BY races.year ORDER BY lowest_lap_time ASC LIMIT 1;",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1679,
            "cost": 0.0003405
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1"
    },
    {
        "sample_id": 10300,
        "pred_sql": "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.raceid = '348' ORDER BY laptimes.milliseconds ASC LIMIT 1;",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1663,
            "cost": 0.00032505
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1"
    },
    {
        "sample_id": 10437,
        "pred_sql": "SELECT races.name, races.date, results.fastestlap, results.fastestlaptime FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Austrian Grand Prix' AND results.fastestlap IS NOT NULL ORDER BY results.fastestlaptime ASC LIMIT 1;",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1720,
            "cost": 0.00037049999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'"
    },
    {
        "sample_id": 10385,
        "pred_sql": "SELECT COUNT(*) FROM (SELECT laptimes.milliseconds, drivers.forename, drivers.surname, races.name FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.nationality = 'French' AND laptimes.milliseconds < 120000) AS FrenchDrivers;",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1700,
            "cost": 0.00034904999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120"
    },
    {
        "sample_id": 10276,
        "pred_sql": "SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'Australian Grand Prix'",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1643,
            "cost": 0.00032655
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'"
    },
    {
        "sample_id": 10290,
        "pred_sql": "SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Malaysian Grand Prix'",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1630,
            "cost": 0.00031919999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'"
    },
    {
        "sample_id": 10414,
        "pred_sql": "SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1692,
            "cost": 0.00035459999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC"
    },
    {
        "sample_id": 10372,
        "pred_sql": "SELECT constructors.name FROM constructorresults INNER JOIN constructors ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = '291' AND constructorresults.points = '0'",
        "retrieved": [
            10291
        ],
        "token_usage": {
            "tokens": 1568,
            "cost": 0.0002874
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291"
    },
    {
        "sample_id": 10400,
        "pred_sql": "SELECT circuits.location, circuits.lat, circuits.lng, COUNT(races.raceid) AS race_count FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Austria' GROUP BY circuits.location, circuits.lat, circuits.lng;",
        "retrieved": [
            10270
        ],
        "token_usage": {
            "tokens": 1586,
            "cost": 0.00031889999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'"
    },
    {
        "sample_id": 10336,
        "pred_sql": "SELECT COUNT(*) FROM drivers WHERE code IS NULL",
        "retrieved": [
            10379
        ],
        "token_usage": {
            "tokens": 1494,
            "cost": 0.0002601
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers"
    },
    {
        "sample_id": 10339,
        "pred_sql": "SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson'",
        "retrieved": [
            10412
        ],
        "token_usage": {
            "tokens": 1551,
            "cost": 0.0002844
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'"
    },
    {
        "sample_id": 10431,
        "pred_sql": "SELECT pitstops.lap, pitstops.duration, drivers.forename, drivers.surname \nFROM pitstops \nINNER JOIN drivers ON pitstops.driverid = drivers.driverid \nINNER JOIN races ON pitstops.raceid = races.raceid \nWHERE races.year = '2011' AND races.name = 'Australian Grand Prix'",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1701,
            "cost": 0.0003492
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'"
    },
    {
        "sample_id": 10268,
        "pred_sql": "SELECT drivers.driverref FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.round = '20' AND qualifying.position > 16;",
        "retrieved": [
            10324
        ],
        "token_usage": {
            "tokens": 1660,
            "cost": 0.00032865
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5"
    },
    {
        "sample_id": 10281,
        "pred_sql": "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE qualifying.raceid = '354' AND drivers.forename = 'Bruno' AND drivers.surname = 'Senna';",
        "retrieved": [
            10283
        ],
        "token_usage": {
            "tokens": 1561,
            "cost": 0.00029354999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'"
    },
    {
        "sample_id": 10363,
        "pred_sql": "SELECT SUM(results.points) AS total_points FROM results WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')",
        "retrieved": [
            10352
        ],
        "token_usage": {
            "tokens": 1529,
            "cost": 0.00027885
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'"
    },
    {
        "sample_id": 10383,
        "pred_sql": "SELECT races.name, races.year FROM races ORDER BY races.time ASC LIMIT 1;",
        "retrieved": [
            10304
        ],
        "token_usage": {
            "tokens": 1523,
            "cost": 0.0002847
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1"
    },
    {
        "sample_id": 10366,
        "pred_sql": "SELECT (CAST(champion_time AS FLOAT) - CAST(last_place_time AS FLOAT)) / CAST(last_place_time AS FLOAT) * 100 AS percentage_faster\nFROM (\n    SELECT MIN(CASE WHEN position = '1' THEN time END) AS champion_time,\n           MIN(CASE WHEN position = (SELECT MAX(position) FROM results WHERE raceid = r.raceid) THEN time END) AS last_place_time\n    FROM results r\n    INNER JOIN races ra ON r.raceid = ra.raceid\n    WHERE ra.year = '2008' AND ra.name = 'Australian Grand Prix'\n) AS times;",
        "retrieved": [
            10303
        ],
        "token_usage": {
            "tokens": 1692,
            "cost": 0.00036405
        },
        "db_id": "formula_1",
        "gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)"
    },
    {
        "sample_id": 10356,
        "pred_sql": "SELECT drivers.forename, drivers.surname FROM qualifying INNER JOIN drivers ON drivers.driverid = qualifying.driverid INNER JOIN races ON races.raceid = qualifying.raceid WHERE qualifying.position = 4 AND races.year = '1989' AND races.name = 'Australian Grand Prix'",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1629,
            "cost": 0.00031949999999999996
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989"
    },
    {
        "sample_id": 10317,
        "pred_sql": "SELECT AVG(laptimes.time) AS average_lap_time FROM laptimes JOIN results ON laptimes.raceid = results.raceid WHERE results.driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND results.raceid = (SELECT raceid FROM races WHERE name = 'Malaysian Grand Prix' AND year = '2009')",
        "retrieved": [
            10352
        ],
        "token_usage": {
            "tokens": 1598,
            "cost": 0.00032069999999999993
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'"
    },
    {
        "sample_id": 10393,
        "pred_sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1570,
            "cost": 0.00029355
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1"
    },
    {
        "sample_id": 10331,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN races.country = 'Germany' THEN races.raceid END) AS FLOAT) * 100 / COUNT(races.raceid) AS percentage FROM races WHERE races.name LIKE '%European Grand Prix%';",
        "retrieved": [
            10303
        ],
        "token_usage": {
            "tokens": 1565,
            "cost": 0.00029055
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'"
    },
    {
        "sample_id": 10278,
        "pred_sql": "SELECT races.date, races.time FROM circuits INNER JOIN races ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit'",
        "retrieved": [
            10270
        ],
        "token_usage": {
            "tokens": 1542,
            "cost": 0.00029385
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'"
    },
    {
        "sample_id": 10434,
        "pred_sql": "SELECT circuits.name, results.position FROM circuits JOIN races ON circuits.circuitid = races.circuitid JOIN results ON races.raceid = results.raceid WHERE results.driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND results.fastestlap = '1'",
        "retrieved": [
            10352
        ],
        "token_usage": {
            "tokens": 1589,
            "cost": 0.00031439999999999994
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1"
    },
    {
        "sample_id": 10416,
        "pred_sql": "SELECT constructors.name, constructors.nationality, SUM(constructorstandings.points) AS total_points \nFROM constructorstandings \nJOIN races ON constructorstandings.raceid = races.raceid \nJOIN constructors ON constructorstandings.constructorid = constructors.constructorid \nWHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN '1980' AND '2010' \nGROUP BY constructors.constructorid \nORDER BY total_points DESC \nLIMIT 1;",
        "retrieved": [
            10319
        ],
        "token_usage": {
            "tokens": 1726,
            "cost": 0.00036285
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1"
    },
    {
        "sample_id": 10279,
        "pred_sql": "SELECT circuits.lat, circuits.lng FROM laptimes INNER JOIN races AS T2 ON laptimes.raceid = T2.raceid INNER JOIN circuits AS T3 ON T2.circuitid = T3.circuitid WHERE T3.name = 'Abu Dhabi Grand Prix'",
        "retrieved": [
            10439
        ],
        "token_usage": {
            "tokens": 1629,
            "cost": 0.00031949999999999996
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'"
    },
    {
        "sample_id": 10292,
        "pred_sql": "SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverid = drivers.driverid WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceid = '345'",
        "retrieved": [
            10283
        ],
        "token_usage": {
            "tokens": 1575,
            "cost": 0.00030194999999999994
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'"
    },
    {
        "sample_id": 10351,
        "pred_sql": "SELECT races.name FROM races WHERE races.raceid IN (SELECT results.raceid FROM results WHERE results.driverid = (SELECT driverid FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))",
        "retrieved": [
            10352
        ],
        "token_usage": {
            "tokens": 1536,
            "cost": 0.00028619999999999996
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'"
    },
    {
        "sample_id": 10330,
        "pred_sql": "SELECT races.name, races.year, circuits.location FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.laps = (SELECT MAX(laps) FROM races);",
        "retrieved": [
            10321
        ],
        "token_usage": {
            "tokens": 1573,
            "cost": 0.00028815
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1"
    },
    {
        "sample_id": 10361,
        "pred_sql": "SELECT COUNT(DISTINCT drivers.driverid) AS num_drivers FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.year = '2008' AND races.name = 'Australian Grand Prix' AND drivers.nationality = 'UN';",
        "retrieved": [
            10303
        ],
        "token_usage": {
            "tokens": 1570,
            "cost": 0.00029489999999999996
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008"
    },
    {
        "sample_id": 10413,
        "pred_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';",
        "retrieved": [
            10269
        ],
        "token_usage": {
            "tokens": 1622,
            "cost": 0.00031979999999999997
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'"
    },
    {
        "sample_id": 10407,
        "pred_sql": "SELECT laptimes.milliseconds, drivers.forename, drivers.surname, races.name FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'French Grand Prix' AND laptimes.lap = 3 ORDER BY laptimes.milliseconds ASC LIMIT 1;",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1714,
            "cost": 0.00035519999999999996
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1"
    },
    {
        "sample_id": 10375,
        "pred_sql": "SELECT COUNT(DISTINCT constructors.constructorid) AS french_constructor_count \nFROM constructors \nJOIN results ON constructors.constructorid = results.constructorid \nJOIN laptimes ON results.raceid = laptimes.raceid \nWHERE constructors.nationality = 'French' \nAND laptimes.lap > 50;",
        "retrieved": [
            10316
        ],
        "token_usage": {
            "tokens": 1698,
            "cost": 0.00035055
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'"
    },
    {
        "sample_id": 10376,
        "pred_sql": "SELECT races.year, CAST(COUNT(CASE WHEN NOT results.time IS NULL AND drivers.nationality = 'Japanese' THEN results.driverid END) AS FLOAT) * 100 / COUNT(CASE WHEN drivers.nationality = 'Japanese' THEN results.driverid END) AS completion_percentage\nFROM races\nINNER JOIN results ON results.raceid = races.raceid\nINNER JOIN drivers ON drivers.driverid = results.driverid\nWHERE races.year BETWEEN '2007' AND '2009'\nGROUP BY races.year;",
        "retrieved": [
            10303
        ],
        "token_usage": {
            "tokens": 1675,
            "cost": 0.00035699999999999995
        },
        "db_id": "formula_1",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009"
    },
    {
        "sample_id": 2507,
        "pred_sql": "SELECT g.geneid FROM genes g JOIN interactions i ON g.geneid = i.geneid1 JOIN classification c ON i.geneid2 = c.geneid WHERE c.localization = 'nucleus' AND i.expression_corr > 0;",
        "retrieved": [
            2504
        ],
        "token_usage": {
            "tokens": 885,
            "cost": 0.00023894999999999998
        },
        "db_id": "genes",
        "gold_sql": "SELECT T1.GeneID FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Localization = 'nucleus'"
    },
    {
        "sample_id": 2493,
        "pred_sql": "SELECT MAX(i.expression_corr) AS highest_expression_corr\nFROM interactions i\nJOIN genes g1 ON i.geneid1 = g1.geneid\nJOIN genes g2 ON i.geneid2 = g2.geneid\nWHERE g1.localization = 'nucleus' AND g2.localization = 'nucleus';",
        "retrieved": [
            2504
        ],
        "token_usage": {
            "tokens": 821,
            "cost": 0.00019965
        },
        "db_id": "genes",
        "gold_sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T1.Localization = 'nucleus' AND T3.Localization = 'nucleus' ORDER BY T2.Expression_Corr DESC LIMIT 1"
    },
    {
        "sample_id": 2510,
        "pred_sql": "SELECT (SUM(CASE WHEN i.expression_corr > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS positive_interaction_percentage\nFROM genes g\nJOIN classification c ON g.geneid = c.geneid\nJOIN interactions i ON g.geneid = i.geneid1\nWHERE g.phenotype = 'nucleic acid metabolism defects' AND g.motif = 'PS00107' AND i.type = 'Physical';",
        "retrieved": [
            2504
        ],
        "token_usage": {
            "tokens": 869,
            "cost": 0.00022574999999999998
        },
        "db_id": "genes",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.Expression_Corr > 0, 1, 0)) AS REAL) * 100 / COUNT(T2.GeneID1) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Phenotype = 'Nucleic acid metabolism defects' AND T1.Motif = 'PS00107'"
    },
    {
        "sample_id": 2502,
        "pred_sql": "SELECT geneid FROM genes WHERE localization = 'cytoplasm' AND function = 'metabolism';",
        "retrieved": [
            2494
        ],
        "token_usage": {
            "tokens": 797,
            "cost": 0.00017175
        },
        "db_id": "genes",
        "gold_sql": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'"
    },
    {
        "sample_id": 2495,
        "pred_sql": "SELECT COUNT(DISTINCT i.geneid1) AS negatively_correlated_gene_pairs\nFROM interactions i\nJOIN genes g1 ON i.geneid1 = g1.geneid\nJOIN genes g2 ON i.geneid2 = g2.geneid\nWHERE g1.class != 'motorproteins' AND g2.class != 'motorproteins' AND i.expression_corr < 0;",
        "retrieved": [
            2511
        ],
        "token_usage": {
            "tokens": 977,
            "cost": 0.0002523
        },
        "db_id": "genes",
        "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'"
    },
    {
        "sample_id": 2491,
        "pred_sql": "SELECT COUNT(genes.geneid) FROM genes INNER JOIN interactions ON genes.geneid = interactions.geneid1 WHERE genes.function = 'nucleic acid metabolism' AND genes.localization = 'vacuole'",
        "retrieved": [
            2498
        ],
        "token_usage": {
            "tokens": 805,
            "cost": 0.00017339999999999999
        },
        "db_id": "genes",
        "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'"
    },
    {
        "sample_id": 7669,
        "pred_sql": "SELECT COUNT(DISTINCT master.playerid) AS num_players FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE master.birthcity = 'Toronto' AND awardsplayers.award = 'All-Rookie';",
        "retrieved": [
            7675
        ],
        "token_usage": {
            "tokens": 5630,
            "cost": 0.0009304499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthCity = 'Toronto'"
    },
    {
        "sample_id": 7723,
        "pred_sql": "WITH CoachWins AS (SELECT coaches.coachid, SUM(coaches.w) AS total_wins FROM coaches GROUP BY coaches.coachid), CoachAwards AS (SELECT awardscoaches.coachid, awardscoaches.award, COUNT(*) AS award_count FROM awardscoaches INNER JOIN CoachWins ON awardscoaches.coachid = CoachWins.coachid GROUP BY awardscoaches.coachid, awardscoaches.award), MostWins AS (SELECT coachid FROM CoachWins ORDER BY total_wins DESC LIMIT 1) SELECT award FROM CoachAwards WHERE coachid IN (SELECT coachid FROM MostWins) ORDER BY award_count DESC LIMIT 1;",
        "retrieved": [
            7737
        ],
        "token_usage": {
            "tokens": 5772,
            "cost": 0.0010021499999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT award FROM Teams AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.lgID = T2.lgID WHERE T1.lgID = 'NHL' GROUP BY T2.coachID, T2.award ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "sample_id": 7720,
        "pred_sql": "SELECT g.legendsid FROM goalies g JOIN teams t ON g.tmid = t.tmid AND g.year = t.year WHERE g.year = '2011' AND g.postgp > 0 ORDER BY (g.w / (g.w + g.l)) DESC LIMIT 1;",
        "retrieved": [
            7651
        ],
        "token_usage": {
            "tokens": 5607,
            "cost": 0.000927
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.legendsID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2011 ORDER BY 1 - CAST(T1.PostGA AS REAL) / T1.PostSA DESC LIMIT 1"
    },
    {
        "sample_id": 7796,
        "pred_sql": "SELECT COUNT(goalies.playerid) FROM goalies WHERE goalies.tmid = 'CGY'",
        "retrieved": [
            7650
        ],
        "token_usage": {
            "tokens": 5492,
            "cost": 0.0008719499999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(DISTINCT playerID) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Calgary Flames'"
    },
    {
        "sample_id": 7714,
        "pred_sql": "SELECT master.shootcatch FROM scoring JOIN master ON scoring.playerid = master.playerid WHERE scoring.year = '1989' AND scoring.shg = 7",
        "retrieved": [
            7650
        ],
        "token_usage": {
            "tokens": 5525,
            "cost": 0.0008863499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1989 GROUP BY T2.playerID HAVING SUM(T2.SHG) = 7"
    },
    {
        "sample_id": 7688,
        "pred_sql": "SELECT SUM(coaches.w) AS total_wins\nFROM awardscoaches\nINNER JOIN coaches ON awardscoaches.coachid = coaches.coachid\nWHERE awardscoaches.award = 'Second Team All-Star' AND awardscoaches.year = 1933;",
        "retrieved": [
            7737
        ],
        "token_usage": {
            "tokens": 5633,
            "cost": 0.00091515
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T1.W) FROM Coaches AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1933 AND T2.award = 'Second Team All-Star'"
    },
    {
        "sample_id": 7721,
        "pred_sql": "SELECT COUNT(DISTINCT master.coachid) FROM master WHERE master.coachid IS NOT NULL;",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5549,
            "cost": 0.0008881499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(playerID) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL"
    },
    {
        "sample_id": 7710,
        "pred_sql": "SELECT master.shootcatch FROM goalies INNER JOIN master ON goalies.playerid = master.playerid WHERE goalies.year = '1996' AND goalies.sho = (SELECT MAX(sho) FROM goalies WHERE year = '1996')",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5675,
            "cost": 0.0009371999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 ORDER BY T2.SHO DESC LIMIT 1"
    },
    {
        "sample_id": 7667,
        "pred_sql": "SELECT COUNT(DISTINCT m.coachid) FROM master m INNER JOIN hof h ON m.hofid = h.hofid WHERE m.coachid IS NOT NULL;",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5556,
            "cost": 0.0008891999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.playerID IS NOT NULL AND T1.coachID IS NOT NULL"
    },
    {
        "sample_id": 7639,
        "pred_sql": "SELECT c.firstname, c.lastname, t.name, (CAST(c.w AS FLOAT) / (CAST(c.w AS FLOAT) + CAST(c.l AS FLOAT))) AS winning_percentage\nFROM coaches c\nJOIN teams t ON c.tmid = t.tmid AND c.year = t.year\nJOIN master m ON c.coachid = m.coachid\nWHERE m.playerid IS NULL\nORDER BY winning_percentage DESC\nLIMIT 1;",
        "retrieved": [
            7773
        ],
        "token_usage": {
            "tokens": 5704,
            "cost": 0.0009482999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.nameGiven, T3.name FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.coachID IS NOT NULL ORDER BY CAST(T1.w AS REAL) / T1.g DESC LIMIT 1"
    },
    {
        "sample_id": 7680,
        "pred_sql": "SELECT AVG((weight / (height * height)) * 703) AS average_bmi FROM coaches INNER JOIN hof ON coaches.coachid = hof.hofid WHERE hof.category = 'Coach' AND coaches.weight IS NOT NULL AND coaches.height IS NOT NULL;",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5599,
            "cost": 0.0009154499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T1.weight / (T1.height * T1.height)) / COUNT(T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID"
    },
    {
        "sample_id": 7623,
        "pred_sql": "SELECT master.firstname, master.lastname, goalies.year FROM goalies JOIN master ON goalies.playerid = master.playerid WHERE goalies.eng >= 10",
        "retrieved": [
            7650
        ],
        "token_usage": {
            "tokens": 5550,
            "cost": 0.0009008999999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName , T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.ENG >= 10"
    },
    {
        "sample_id": 7620,
        "pred_sql": "SELECT DISTINCT master.namegiven FROM master JOIN goalies ON master.playerid = goalies.playerid WHERE goalies.lgid IN ('PCHA', 'NHL')",
        "retrieved": [
            7630
        ],
        "token_usage": {
            "tokens": 5580,
            "cost": 0.000918
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1"
    },
    {
        "sample_id": 7708,
        "pred_sql": "SELECT master.birthyear FROM goalies JOIN master ON goalies.playerid = master.playerid WHERE goalies.year = '2008' ORDER BY goalies.sa DESC LIMIT 1",
        "retrieved": [
            7651
        ],
        "token_usage": {
            "tokens": 5593,
            "cost": 0.00091995
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2008 ORDER BY T2.PostSA DESC LIMIT 1"
    },
    {
        "sample_id": 7712,
        "pred_sql": "SELECT m.firstname, m.lastname FROM master m JOIN scoring s ON m.playerid = s.playerid WHERE s.year = '1981' ORDER BY s.'+/-' DESC LIMIT 1;",
        "retrieved": [
            7632
        ],
        "token_usage": {
            "tokens": 5570,
            "cost": 0.0009101999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1981 GROUP BY T2.playerID ORDER BY SUM(T2.\"+/-\") DESC LIMIT 1"
    },
    {
        "sample_id": 7701,
        "pred_sql": "SELECT SUM(scoring.gp) AS total_games_played FROM scoring INNER JOIN master ON scoring.playerid = master.playerid INNER JOIN teams ON scoring.year = teams.year WHERE master.playerid = 'broadpu01' AND teams.year = '1922';",
        "retrieved": [
            7750
        ],
        "token_usage": {
            "tokens": 5687,
            "cost": 0.0009408
        },
        "db_id": "hockey",
        "gold_sql": "SELECT GP FROM ScoringSC WHERE playerID = 'broadpu01' AND YEAR = 1922"
    },
    {
        "sample_id": 7751,
        "pred_sql": "SELECT SUM(teams.pim) AS total_bench_minor_penalties FROM teams WHERE teams.name = 'St. Louis Blues'",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5554,
            "cost": 0.0008888999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT CAST(SUM(BenchMinor) AS REAL) / 2 FROM Teams WHERE name = 'St. Louis Blues'"
    },
    {
        "sample_id": 7655,
        "pred_sql": "SELECT COUNT(*) AS player_count FROM hof WHERE year > '1980' AND category = 'Player';",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5671,
            "cost": 0.0009168
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(hofID) FROM HOF WHERE year > 1980 AND category = 'Player'"
    },
    {
        "sample_id": 7764,
        "pred_sql": "SELECT teams.name FROM teams WHERE teams.year = '1909' AND teams.t = '1' GROUP BY teams.tmid, teams.name ORDER BY SUM(teams.pim)",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5646,
            "cost": 0.0009459
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.name, T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.oppID = T3.tmID WHERE T1.year = 1909 AND T1.T = 1"
    },
    {
        "sample_id": 7717,
        "pred_sql": "SELECT coaches.year, coaches.tmid, coaches.lgid, coaches.stint, coaches.notes, coaches.g, coaches.w, coaches.l, coaches.t, teams.name FROM coaches JOIN teams ON coaches.year = teams.year AND coaches.tmid = teams.tmid WHERE teams.year = '2003' GROUP BY teams.tmid ORDER BY SUM(teams.pim) DESC LIMIT 1;",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5647,
            "cost": 0.0009451499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T3.firstName, T3.lastName FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.year = '2003' GROUP BY T3.firstName, T3.lastName ORDER BY SUM(T1.BenchMinor) DESC LIMIT 1"
    },
    {
        "sample_id": 7664,
        "pred_sql": "SELECT awardscoaches.award, awardscoaches.year, master.firstname, master.lastname \nFROM awardscoaches \nINNER JOIN master ON awardscoaches.coachid = master.coachid \nWHERE master.deathyear IS NOT NULL AND master.deathyear <> '' \nAND awardscoaches.lgid = 'NHL'",
        "retrieved": [
            7663
        ],
        "token_usage": {
            "tokens": 5632,
            "cost": 0.0009356999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.lgID = 'NHL'"
    },
    {
        "sample_id": 7770,
        "pred_sql": "SELECT COUNT(coaches.coachid) FROM master INNER JOIN coaches ON master.coachid = coaches.coachid WHERE coaches.lgid = 'NHL' AND master.birthcountry = 'USA' AND coaches.tmid = 'PHI'",
        "retrieved": [
            7660
        ],
        "token_usage": {
            "tokens": 5608,
            "cost": 0.0009212999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthCountry = 'USA'"
    },
    {
        "sample_id": 7691,
        "pred_sql": "SELECT master.birthcity, master.birthstate, master.birthcountry FROM coaches INNER JOIN master ON coaches.coachid = master.coachid WHERE coaches.year = '1998' AND coaches.tmid IN (SELECT tmid FROM coaches WHERE coachid != (SELECT coachid FROM master WHERE firstname = 'Dave' AND lastname = 'Lewis'))",
        "retrieved": [
            7661
        ],
        "token_usage": {
            "tokens": 5623,
            "cost": 0.0009194999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach with Dave Lewis'"
    },
    {
        "sample_id": 7715,
        "pred_sql": "SELECT master.firstname, master.lastname FROM master INNER JOIN goalies ON master.playerid = goalies.playerid WHERE goalies.year = '1986' GROUP BY master.playerid ORDER BY SUM(goalies.ga) ASC LIMIT 1;",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5703,
            "cost": 0.0009422999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1986 GROUP BY T2.playerID ORDER BY SUM(T2.GWG) DESC LIMIT 1"
    },
    {
        "sample_id": 7679,
        "pred_sql": "SELECT master.pos FROM master JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE master.birthcountry = 'Canada' AND awardsplayers.award = 'All-Rookie'",
        "retrieved": [
            7729
        ],
        "token_usage": {
            "tokens": 5566,
            "cost": 0.0009015
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'Canada' AND T2.award = 'All-Rookie'"
    },
    {
        "sample_id": 7810,
        "pred_sql": "SELECT master.playerid FROM master INNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid WHERE awardsplayers.pos LIKE '%W%' AND master.weight > 200;",
        "retrieved": [
            7815
        ],
        "token_usage": {
            "tokens": 5591,
            "cost": 0.0009146999999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT playerID FROM Master WHERE pos LIKE '%L%' AND weight > 200 AND playerID IS NOT NULL AND pos = 'L'"
    },
    {
        "sample_id": 7755,
        "pred_sql": "SELECT teams.name FROM teams WHERE teams.year = '2006' GROUP BY teams.tmid, teams.name ORDER BY SUM(teams.pim) DESC LIMIT 1",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5601,
            "cost": 0.00092025
        },
        "db_id": "hockey",
        "gold_sql": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY CAST(SUM(BenchMinor) AS REAL) / 2 DESC LIMIT 1"
    },
    {
        "sample_id": 7734,
        "pred_sql": "WITH goalie_info AS (SELECT master.firstname, master.lastname, goalies.year, master.height, teams.name AS team_name FROM goalies INNER JOIN master ON goalies.playerid = master.playerid INNER JOIN teams ON goalies.tmid = teams.tmid WHERE master.birthyear BETWEEN 1970 AND 1979 AND master.shootcatch = 'L' AND master.pos = 'G') SELECT AVG(height) AS average_height, team_name FROM goalie_info WHERE height = (SELECT MAX(height) FROM goalie_info) GROUP BY team_name;",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5783,
            "cost": 0.0009948
        },
        "db_id": "hockey",
        "gold_sql": "SELECT CAST(SUM(T2.height) AS REAL) / COUNT(*) FROM AwardsPlayers AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.height IS NOT NULL AND (T2.pos = 'LW' OR T2.pos = 'L/C')"
    },
    {
        "sample_id": 7808,
        "pred_sql": "SELECT SUM(scoring.g) AS total_goals, (2023 - CAST(master.birthyear AS INTEGER)) AS age FROM master INNER JOIN scoring ON master.playerid = scoring.playerid WHERE master.playerid = 'aaltoan01'",
        "retrieved": [
            7695
        ],
        "token_usage": {
            "tokens": 5660,
            "cost": 0.0009138
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T2.G), STRFTIME('%Y', CURRENT_TIMESTAMP) - T1.birthyear FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01' GROUP BY T1.birthyear"
    },
    {
        "sample_id": 7779,
        "pred_sql": "SELECT coaches.year, master.firstname FROM coaches INNER JOIN master ON coaches.coachid = master.coachid INNER JOIN teams ON coaches.tmid = teams.tmid WHERE teams.name = 'Montreal Canadiens' ORDER BY coaches.year ASC LIMIT 1;",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5626,
            "cost": 0.0009091499999999998
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' ORDER BY T1.year LIMIT 1"
    },
    {
        "sample_id": 7817,
        "pred_sql": "SELECT T.tmid, M.birthcountry FROM teamssc AS T INNER JOIN master AS M ON T.tmid = M.playerid WHERE T.year = '2000' ORDER BY (T.w * 1.0) / (T.w + T.l) DESC LIMIT 1;",
        "retrieved": [
            7758
        ],
        "token_usage": {
            "tokens": 5659,
            "cost": 0.0009419999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T3.tmID, T1.birthCountry FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID INNER JOIN ( SELECT year, tmID FROM Teams WHERE year = 2000 ORDER BY W / (W + L) DESC LIMIT 1 ) AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year"
    },
    {
        "sample_id": 7762,
        "pred_sql": "SELECT teamssc.tmid, teams.name, teamssc.w FROM teamspost INNER JOIN teams ON teamspost.tmid = teams.tmid WHERE teamspost.year = (SELECT MAX(year) FROM teamspost) ORDER BY teamspost.w DESC LIMIT 1;",
        "retrieved": [
            7758
        ],
        "token_usage": {
            "tokens": 5638,
            "cost": 0.00093615
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year GROUP BY T2.name ORDER BY SUM(T1.W) DESC LIMIT 1"
    },
    {
        "sample_id": 7776,
        "pred_sql": "SELECT SUM(teams.pim) AS total_penalty_minutes FROM teams WHERE teams.year = '1918' AND teams.tmid = (SELECT tmid FROM teams WHERE name = 'Montreal Canadiens' AND year = '1918')",
        "retrieved": [
            7756
        ],
        "token_usage": {
            "tokens": 5561,
            "cost": 0.0008935499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T2.PIM FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T1.year = 1918"
    },
    {
        "sample_id": 7800,
        "pred_sql": "SELECT (SUM(gp) - SUM(postgp)) / SUM(gp) * 100 AS decrease_rate FROM goaliessc WHERE playerid = (SELECT playerid FROM master WHERE firstname = 'David' AND lastname = 'Aebischer') AND year = 2005;",
        "retrieved": [
            7650
        ],
        "token_usage": {
            "tokens": 5560,
            "cost": 0.0009068999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) - SUM(CASE WHEN T1.year = 2006 THEN T1.GP ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.firstName = 'David' AND T2.lastName = 'Aebischer'"
    },
    {
        "sample_id": 7637,
        "pred_sql": "SELECT DISTINCT teams.name FROM goalies INNER JOIN master ON goalies.playerid = master.playerid INNER JOIN teams ON goalies.tmid = teams.tmid WHERE goalies.year < '1950' AND master.deathyear IS NULL;",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5692,
            "cost": 0.0009442499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.lgID = T3.lgID AND T2.year = T3.year WHERE T1.deathYear IS NOT NULL AND T1.firstNHL < 1950"
    },
    {
        "sample_id": 7719,
        "pred_sql": "SELECT (CAST(SUM(CASE WHEN t1.w > t1.l THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS winning_rate_improvement\nFROM (\n    SELECT w, l\n    FROM coaches c\n    JOIN teams t ON c.year = t.year AND c.tmid = t.tmid\n    WHERE c.coachid = (SELECT coachid FROM master WHERE firstname = 'Alain' AND lastname = 'Vigneault')\n    AND t.year = '2006'\n) AS t1\nJOIN (\n    SELECT w, l\n    FROM coaches c\n    JOIN teams t ON c.year = t.year AND c.tmid = t.tmid\n    WHERE c.coachid = (SELECT coachid FROM master WHERE firstname = 'Alain' AND lastname = 'Vigneault')\n    AND t.year < '2006'\n) AS t2;",
        "retrieved": [
            7724
        ],
        "token_usage": {
            "tokens": 5753,
            "cost": 0.0009894
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(CASE WHEN T1.year = 2006 THEN CAST(T1.W AS REAL) * 100 / (T1.W + T1.L) ELSE 0 END) - ( SELECT CAST(W AS REAL) * 100 / (W + L) FROM Teams WHERE year = '2005' AND name = 'Vancouver Canucks' ) FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.name = 'Vancouver Canucks' AND T3.firstName = 'Alain' AND T3.lastName = 'Vigneault'"
    },
    {
        "sample_id": 7622,
        "pred_sql": "SELECT master.namegiven, master.height, master.weight, (2023 - master.birthyear) AS age FROM goalies INNER JOIN master ON goalies.playerid = master.playerid INNER JOIN teams ON goalies.tmid = teams.tmid WHERE goalies.year BETWEEN '2000' AND '2010' AND teams.tmid = 'COL';",
        "retrieved": [
            7634
        ],
        "token_usage": {
            "tokens": 5704,
            "cost": 0.0009505499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.nameGiven, T1.height , T1.weight, STRFTIME('%Y', CURRENT_TIMESTAMP) - birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID"
    },
    {
        "sample_id": 7743,
        "pred_sql": "SELECT coaches.g FROM coaches INNER JOIN awardscoaches ON coaches.coachid = awardscoaches.coachid WHERE awardscoaches.award = 'Second Team All-Star' AND awardscoaches.year = (SELECT MIN(year) FROM awardscoaches WHERE award = 'Second Team All-Star')",
        "retrieved": [
            7737
        ],
        "token_usage": {
            "tokens": 5642,
            "cost": 0.0009209999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT SUM(T1.g) FROM Coaches AS T1 INNER JOIN ( SELECT coachID, year FROM AwardsCoaches WHERE award = 'Second Team All-Star' ORDER BY year LIMIT 1 ) AS T2 ON T1.coachID = T2.coachID AND T1.year < T2.year"
    },
    {
        "sample_id": 7676,
        "pred_sql": "SELECT master.birthyear, COUNT(awardsplayers.award) AS total_awards\nFROM master\nINNER JOIN awardsplayers ON master.playerid = awardsplayers.playerid\nGROUP BY master.birthyear\nORDER BY total_awards DESC\nLIMIT 1;",
        "retrieved": [
            7661
        ],
        "token_usage": {
            "tokens": 5632,
            "cost": 0.0009284999999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthYear ORDER BY COUNT(T2.award) DESC LIMIT 1"
    },
    {
        "sample_id": 7809,
        "pred_sql": "SELECT DISTINCT coaches.coachid FROM coaches INNER JOIN awardscoaches ON coaches.coachid = awardscoaches.coachid LEFT JOIN master ON coaches.coachid = master.coachid WHERE master.playerid IS NULL;",
        "retrieved": [
            7661
        ],
        "token_usage": {
            "tokens": 5624,
            "cost": 0.00092055
        },
        "db_id": "hockey",
        "gold_sql": "SELECT DISTINCT T2.coachID FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.playerID IS NULL"
    },
    {
        "sample_id": 7696,
        "pred_sql": "SELECT m.firstname, m.lastname, g.sa\nFROM goalies g\nJOIN master m ON g.playerid = m.playerid\nWHERE g.tmid = 'NJD'\nORDER BY g.sa DESC\nLIMIT 1;",
        "retrieved": [
            7651
        ],
        "token_usage": {
            "tokens": 5588,
            "cost": 0.00091605
        },
        "db_id": "hockey",
        "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'NJD' GROUP BY T2.playerID ORDER BY SUM(T2.SA - T2.GA) DESC LIMIT 1"
    },
    {
        "sample_id": 7754,
        "pred_sql": "SELECT COUNT(*) FROM teamssc WHERE year = '2006' AND w > l AND pts > 100;",
        "retrieved": [
            7758
        ],
        "token_usage": {
            "tokens": 5578,
            "cost": 0.0008938499999999999
        },
        "db_id": "hockey",
        "gold_sql": "SELECT COUNT(tmID) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100"
    },
    {
        "sample_id": 8971,
        "pred_sql": "SELECT locationcity, address FROM location WHERE zipcode > '90000';",
        "retrieved": [],
        "token_usage": {
            "tokens": 680,
            "cost": 0.000147
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT locationcity, address FROM location WHERE zipcode > 90000"
    },
    {
        "sample_id": 8958,
        "pred_sql": "SELECT COUNT(*) FROM position WHERE maxsalary <= 1000000",
        "retrieved": [
            8976
        ],
        "token_usage": {
            "tokens": 814,
            "cost": 0.00017114999999999996
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(SUBSTR(maxsalary, 4), ',', '') AS REAL) < 100000"
    },
    {
        "sample_id": 8969,
        "pred_sql": "SELECT firstname, lastname, performance FROM employee WHERE salary = (SELECT MIN(salary) FROM employee)",
        "retrieved": [
            8980
        ],
        "token_usage": {
            "tokens": 846,
            "cost": 0.00018539999999999998
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1"
    },
    {
        "sample_id": 8979,
        "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS manager_full_name, l.locationcity, l.address, l.zipcode FROM employee e INNER JOIN location l ON e.locationid = l.locationid WHERE e.performance = 'Poor' AND e.positionid IN (SELECT positionid FROM position WHERE positiontitle = 'Manager')",
        "retrieved": [
            8951
        ],
        "token_usage": {
            "tokens": 898,
            "cost": 0.00021344999999999998
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'"
    },
    {
        "sample_id": 8961,
        "pred_sql": "SELECT location.address FROM location INNER JOIN employee ON location.locationid = employee.locationid GROUP BY location.address ORDER BY COUNT(employee.ssn) DESC LIMIT 1;",
        "retrieved": [
            8945
        ],
        "token_usage": {
            "tokens": 857,
            "cost": 0.00020054999999999997
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T2.address, T2.locationcity, T2.state, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID GROUP BY T2.address, T2.locationcity, T2.state, T2.zipcode ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "sample_id": 8925,
        "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employee ORDER BY salary DESC LIMIT 1;",
        "retrieved": [
            8976
        ],
        "token_usage": {
            "tokens": 820,
            "cost": 0.00017609999999999997
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1"
    },
    {
        "sample_id": 8957,
        "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employee ORDER BY salary DESC LIMIT 1;",
        "retrieved": [
            8976
        ],
        "token_usage": {
            "tokens": 829,
            "cost": 0.00018149999999999997
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )"
    },
    {
        "sample_id": 8963,
        "pred_sql": "SELECT COUNT(*) FROM employee INNER JOIN position ON employee.positionid = position.positionid WHERE position.positiontitle = 'Regional Manager' AND employee.gender = 'Male'",
        "retrieved": [
            8933
        ],
        "token_usage": {
            "tokens": 823,
            "cost": 0.00018554999999999998
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'"
    },
    {
        "sample_id": 8930,
        "pred_sql": "SELECT location.locationcity FROM employee INNER JOIN location ON employee.locationid = location.locationid WHERE employee.firstname = 'Sandy' AND employee.lastname = 'Adams'",
        "retrieved": [
            8945
        ],
        "token_usage": {
            "tokens": 840,
            "cost": 0.00019259999999999997
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'"
    },
    {
        "sample_id": 8944,
        "pred_sql": "SELECT COUNT(*) FROM employee WHERE gender = 'Female'",
        "retrieved": [
            8933
        ],
        "token_usage": {
            "tokens": 765,
            "cost": 0.0001512
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT COUNT(*) FROM employee WHERE gender = 'F'"
    },
    {
        "sample_id": 8927,
        "pred_sql": "SELECT ssn FROM employee WHERE gender = 'Male' AND salary > 70000",
        "retrieved": [
            8940
        ],
        "token_usage": {
            "tokens": 831,
            "cost": 0.00018764999999999998
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 70000"
    },
    {
        "sample_id": 8962,
        "pred_sql": "SELECT AVG(CAST(REPLACE(SUBSTRING(employee.salary, 1, LENGTH(employee.salary)), ',', '') AS FLOAT)) FROM employee INNER JOIN position ON employee.positionid = position.positionid WHERE position.educationrequired = 2",
        "retrieved": [
            8967
        ],
        "token_usage": {
            "tokens": 891,
            "cost": 0.00020835
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree'"
    },
    {
        "sample_id": 8977,
        "pred_sql": "SELECT employee.firstname, employee.lastname, employee.gender, position.positiontitle FROM employee INNER JOIN location ON employee.locationid = location.locationid INNER JOIN position ON employee.positionid = position.positionid WHERE location.locationcity = 'New York'",
        "retrieved": [
            8982
        ],
        "token_usage": {
            "tokens": 847,
            "cost": 0.00018329999999999998
        },
        "db_id": "human_resources",
        "gold_sql": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'"
    },
    {
        "sample_id": 6990,
        "pred_sql": "SELECT COUNT(*) AS playoffs_count FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE playerinfo.playername = 'Per Mars' AND seasonstatus.gametype = 'playoffs';",
        "retrieved": [
            6935
        ],
        "token_usage": {
            "tokens": 1378,
            "cost": 0.00027915
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT SUM(T2.GP) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PlayerName = 'Per Mars' AND T2.GAMETYPE = 'Playoffs'"
    },
    {
        "sample_id": 6982,
        "pred_sql": "SELECT COUNT(DISTINCT ss.team) FROM playerinfo pi INNER JOIN seasonstatus ss ON pi.eliteid = ss.eliteid WHERE pi.eliteid = (SELECT eliteid FROM playerinfo WHERE weight = (SELECT weight_id FROM weight_info ORDER BY weight_in_kg DESC LIMIT 1) AND eliteid IN (SELECT eliteid FROM seasonstatus WHERE team = 'Arizona Coyotes'))",
        "retrieved": [
            6989
        ],
        "token_usage": {
            "tokens": 1528,
            "cost": 0.00030884999999999994
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT COUNT(T2.TEAM) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T1.weight = T3.weight_id WHERE T1.overallby = 'Arizona Coyotes' ORDER BY T3.weight_in_lbs DESC LIMIT 1"
    },
    {
        "sample_id": 6948,
        "pred_sql": "SELECT playerinfo.playername FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid ORDER BY seasonstatus.p DESC LIMIT 1",
        "retrieved": [
            6935
        ],
        "token_usage": {
            "tokens": 1367,
            "cost": 0.00027075
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.P = ( SELECT MAX(P) FROM SeasonStatus )"
    },
    {
        "sample_id": 6992,
        "pred_sql": "SELECT T1.nation, COUNT(DISTINCT T2.eliteid) AS player_count FROM playerinfo AS T1 INNER JOIN seasonstatus AS T2 ON T1.eliteid = T2.eliteid WHERE T2.team = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY player_count DESC LIMIT 1;",
        "retrieved": [
            6989
        ],
        "token_usage": {
            "tokens": 1531,
            "cost": 0.00031245
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T.nation FROM ( SELECT T1.nation, COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(T1.ELITEID) DESC LIMIT 1 ) AS T"
    },
    {
        "sample_id": 6951,
        "pred_sql": "SELECT playerinfo.playername, seasonstatus.team FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE seasonstatus.season = '2006-2007' AND seasonstatus.league = 'SuperElit' AND seasonstatus.gp > 0 ORDER BY seasonstatus.p DESC LIMIT 1;",
        "retrieved": [
            6935
        ],
        "token_usage": {
            "tokens": 1446,
            "cost": 0.00031095
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName, T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2006-2007' AND T1.GAMETYPE = 'Playoffs' AND T1.LEAGUE = 'SuperElit' ORDER BY T1.P DESC LIMIT 1"
    },
    {
        "sample_id": 6915,
        "pred_sql": "SELECT T1.playername, T3.height_in_inch FROM playerinfo AS T1 INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T1.playername = 'David Bornhammar'",
        "retrieved": [
            6996
        ],
        "token_usage": {
            "tokens": 1598,
            "cost": 0.00029864999999999997
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.height_in_inch FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar'"
    },
    {
        "sample_id": 6929,
        "pred_sql": "SELECT MAX(weight_info.weight_in_lbs) FROM playerinfo INNER JOIN weight_info ON playerinfo.weight = weight_info.weight_id;",
        "retrieved": [
            6941
        ],
        "token_usage": {
            "tokens": 1322,
            "cost": 0.00024465
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT MAX(T2.weight_in_lbs) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id"
    },
    {
        "sample_id": 6949,
        "pred_sql": "SELECT (COUNT(CASE WHEN nation IN ('Estonia', 'Latvia', 'Lithuania', 'Poland', 'Slovakia', 'Ukraine', 'Belarus', 'Moldova', 'Romania', 'Hungary') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_eastern_europe_players FROM playerinfo INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.overallby = 'Toronto Maple Leafs';",
        "retrieved": [
            6989
        ],
        "token_usage": {
            "tokens": 1592,
            "cost": 0.00034634999999999993
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN nation IN ('Belarus', 'Czech Rep.', 'Slovakia', 'Ukraine') THEN ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs'"
    },
    {
        "sample_id": 6979,
        "pred_sql": "SELECT playerinfo.playername FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE seasonstatus.season = '2000-2001' AND seasonstatus.league = 'International' AND seasonstatus.g = '0' AND seasonstatus.team = 'Avangard Omsk'",
        "retrieved": [
            6943
        ],
        "token_usage": {
            "tokens": 1434,
            "cost": 0.00029115
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' AND T1.TEAM = 'Czech Republic (all)' AND T1.G = 0"
    },
    {
        "sample_id": 6964,
        "pred_sql": "SELECT DISTINCT playerinfo.nation FROM playerinfo INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.season = '1997-1998'",
        "retrieved": [
            6995
        ],
        "token_usage": {
            "tokens": 1373,
            "cost": 0.0002649
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT DISTINCT T2.nation FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998'"
    },
    {
        "sample_id": 6980,
        "pred_sql": "SELECT playerinfo.playername, playerinfo.birthyear FROM playerinfo INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.team = 'Avangard Omsk' AND seasonstatus.season = '2000-2001' AND seasonstatus.gametype = 'Regular season' ORDER BY playerinfo.birthyear ASC LIMIT 1;",
        "retrieved": [
            6940
        ],
        "token_usage": {
            "tokens": 1698,
            "cost": 0.00034784999999999997
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Avangard Omsk' ORDER BY T2.birthdate ASC LIMIT 1"
    },
    {
        "sample_id": 6919,
        "pred_sql": "SELECT weight_info.weight_in_kg FROM playerinfo INNER JOIN weight_info ON playerinfo.weight = weight_info.weight_id WHERE playerinfo.playername = 'David Bornhammar'",
        "retrieved": [
            6923
        ],
        "token_usage": {
            "tokens": 1330,
            "cost": 0.00024809999999999996
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'"
    },
    {
        "sample_id": 6924,
        "pred_sql": "SELECT (SELECT height_in_cm FROM height_info WHERE height_id = (SELECT height FROM playerinfo WHERE playername = 'David Bornhammar')) - (SELECT height_in_cm FROM height_info WHERE height_id = (SELECT height FROM playerinfo WHERE playername = 'Pauli Levokari')) AS height_difference;",
        "retrieved": [
            6996
        ],
        "token_usage": {
            "tokens": 1632,
            "cost": 0.00031679999999999995
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )"
    },
    {
        "sample_id": 6953,
        "pred_sql": "SELECT height_info.height_in_cm FROM playerinfo INNER JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid INNER JOIN height_info ON playerinfo.height = height_info.height_id WHERE playerinfo.birthplace = 'Yale University' AND seasonstatus.season = '2005-2006' AND seasonstatus.pim = '28'",
        "retrieved": [
            6973
        ],
        "token_usage": {
            "tokens": 1460,
            "cost": 0.0003072
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T3.height_in_cm FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T2.height = T3.height_id WHERE T1.SEASON = '2005-2006' AND T1.TEAM = 'Yale Univ.' AND T1.PIM = 28"
    },
    {
        "sample_id": 6968,
        "pred_sql": "SELECT COUNT(*) FROM playerinfo AS p INNER JOIN height_info AS h ON p.height = h.height_id WHERE p.birthyear = 1982 AND h.height_in_cm > 182;",
        "retrieved": [
            6996
        ],
        "token_usage": {
            "tokens": 1632,
            "cost": 0.00031634999999999996
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND strftime('%Y', T2.birthdate) = '1982'"
    },
    {
        "sample_id": 6932,
        "pred_sql": "SELECT T1.playername, T3.height_in_cm FROM playerinfo AS T1 INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T1.birthplace = 'Edmonton, Alberta, Canada' ORDER BY T3.height_in_cm DESC LIMIT 1;",
        "retrieved": [
            6996
        ],
        "token_usage": {
            "tokens": 1626,
            "cost": 0.00031275
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN' ORDER BY T2.height_in_cm DESC LIMIT 1"
    },
    {
        "sample_id": 6944,
        "pred_sql": "SELECT playerinfo.playername FROM seasonstatus INNER JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE seasonstatus.gp >= 100 AND seasonstatus.team = 'Chilliwack Chiefs'",
        "retrieved": [
            6935
        ],
        "token_usage": {
            "tokens": 1383,
            "cost": 0.00027719999999999996
        },
        "db_id": "ice_hockey_draft",
        "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P >= 100"
    },
    {
        "sample_id": 7493,
        "pred_sql": "SELECT COUNT(DISTINCT pred_classes.pred_class_id) AS number_of_predicted_classes FROM img_rel INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE img_rel.obj1_sample_id = img_rel.obj2_sample_id;",
        "retrieved": [
            7521
        ],
        "token_usage": {
            "tokens": 1123,
            "cost": 0.00023459999999999996
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(PRED_CLASS_ID) FROM PRED_CLASSES"
    },
    {
        "sample_id": 7544,
        "pred_sql": "SELECT DISTINCT obj_classes.obj_class, att_classes.att_class, pred_classes.pred_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id INNER JOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id INNER JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id INNER JOIN img_rel ON img_obj.img_id = img_rel.img_id INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE img_obj.x = '422' AND img_obj.y = '63' AND img_obj.w = '77' AND img_obj.h = '363'",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1395,
            "cost": 0.00034289999999999993
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363"
    },
    {
        "sample_id": 7482,
        "pred_sql": "SELECT pred_classes.pred_class FROM img_rel INNER JOIN img_obj AS obj1 ON img_rel.obj1_sample_id = obj1.obj_sample_id INNER JOIN img_obj AS obj2 ON img_rel.obj2_sample_id = obj2.obj_sample_id INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE img_rel.img_id = '1' AND obj1.obj_sample_id = '8' AND obj2.obj_sample_id = '4';",
        "retrieved": [
            7575
        ],
        "token_usage": {
            "tokens": 1270,
            "cost": 0.00030614999999999993
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4"
    },
    {
        "sample_id": 7600,
        "pred_sql": "SELECT DISTINCT obj_classes.obj_class, att_classes.att_class, pred_classes.pred_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id INNER JOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id INNER JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id INNER JOIN img_rel ON img_obj.img_id = img_rel.img_id INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE img_obj.img_id = '36' AND img_obj.x = '0' AND img_obj.y = '0'",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1385,
            "cost": 0.00033959999999999996
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0"
    },
    {
        "sample_id": 7496,
        "pred_sql": "SELECT COUNT(img_obj.obj_sample_id) FROM img_obj_att JOIN img_obj ON img_obj_att.img_id = img_obj.img_id AND img_obj_att.obj_sample_id = img_obj.obj_sample_id JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id WHERE img_obj.img_id = '2377985' AND att_classes.att_class = 'electrical'",
        "retrieved": [
            7509
        ],
        "token_usage": {
            "tokens": 1168,
            "cost": 0.00027419999999999994
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915"
    },
    {
        "sample_id": 7602,
        "pred_sql": "SELECT obj_classes.obj_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '126' AND img_obj.y = '363'",
        "retrieved": [
            7526
        ],
        "token_usage": {
            "tokens": 1120,
            "cost": 0.00022964999999999997
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.IMG_ID, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 126 AND T1.Y = 363"
    },
    {
        "sample_id": 7586,
        "pred_sql": "SELECT img_obj.w, img_obj.h FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '5' AND img_obj.y = '647' AND obj_classes.obj_class = 'keyboard'",
        "retrieved": [
            7552
        ],
        "token_usage": {
            "tokens": 1185,
            "cost": 0.0002673
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard' AND T1.X = 5 AND T1.Y = 647"
    },
    {
        "sample_id": 7523,
        "pred_sql": "SELECT COUNT(DISTINCT img_obj.img_id) AS image_count FROM img_rel INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id INNER JOIN img_obj ON img_rel.img_id = img_obj.img_id WHERE img_rel.obj1_sample_id = img_rel.obj2_sample_id AND pred_classes.pred_class = 'on';",
        "retrieved": [
            7521
        ],
        "token_usage": {
            "tokens": 1198,
            "cost": 0.0002724
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on'"
    },
    {
        "sample_id": 7489,
        "pred_sql": "SELECT AVG(obj1.y - obj2.y) AS average_difference_y\nFROM img_rel\nJOIN img_obj AS obj1 ON img_rel.obj1_sample_id = obj1.obj_sample_id AND img_rel.img_id = obj1.img_id\nJOIN img_obj AS obj2 ON img_rel.obj2_sample_id = obj2.obj_sample_id AND img_rel.img_id = obj2.img_id\nWHERE img_rel.pred_class_id = (SELECT pred_class_id FROM pred_classes WHERE pred_class = 'parked on')\nAND obj1.img_id = '1';",
        "retrieved": [
            7563
        ],
        "token_usage": {
            "tokens": 1259,
            "cost": 0.0003225
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT CAST(SUM(T3.Y) AS REAL) / COUNT(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE NULL END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID"
    },
    {
        "sample_id": 7478,
        "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h FROM img_obj INNER JOIN img_rel ON img_obj.img_id = img_rel.img_id WHERE img_obj.img_id = '5' AND img_rel.obj1_sample_id = img_rel.obj2_sample_id;",
        "retrieved": [
            7487
        ],
        "token_usage": {
            "tokens": 1192,
            "cost": 0.0002715
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID"
    },
    {
        "sample_id": 7534,
        "pred_sql": "SELECT att_class.att_class \nFROM img_obj \nJOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id \nJOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id \nWHERE img_obj.img_id = '1' AND att_classes.att_class LIKE '%colour%';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1035,
            "cost": 0.00024254999999999996
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1 GROUP BY T4.ATT_CLASS"
    },
    {
        "sample_id": 7591,
        "pred_sql": "SELECT COUNT(subquery_t3.img_id) FROM (SELECT img_obj_att.img_id FROM img_obj_att INNER JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id WHERE att_classes.att_class = 'picture' GROUP BY img_obj_att.img_id) AS subquery_t3",
        "retrieved": [
            7515
        ],
        "token_usage": {
            "tokens": 1184,
            "cost": 0.00025724999999999994
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'picture'"
    },
    {
        "sample_id": 7546,
        "pred_sql": "SELECT DISTINCT obj_classes.obj_class, att_classes.att_class, pred_classes.pred_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id INNER JOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id INNER JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id INNER JOIN img_rel ON img_obj.img_id = img_rel.img_id INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE img_obj.img_id = '8'",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1298,
            "cost": 0.00028964999999999997
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8"
    },
    {
        "sample_id": 7598,
        "pred_sql": "SELECT COUNT(*) FROM img_obj WHERE img_id = '12' AND y = '0'",
        "retrieved": [
            7563
        ],
        "token_usage": {
            "tokens": 1044,
            "cost": 0.00019889999999999998
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0"
    },
    {
        "sample_id": 7606,
        "pred_sql": "SELECT COUNT(pred_classes.pred_class_id) FROM img_rel JOIN img_obj ON img_rel.img_id = img_obj.img_id WHERE img_obj.img_id = '107' AND pred_classes.pred_class_id = 'has'",
        "retrieved": [
            7538
        ],
        "token_usage": {
            "tokens": 1104,
            "cost": 0.00025065
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T2.PRED_CLASS) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 107 AND T2.PRED_CLASS = 'has'"
    },
    {
        "sample_id": 7516,
        "pred_sql": "SELECT img_rel.pred_class_id FROM img_obj INNER JOIN img_rel ON img_obj.img_id = img_rel.img_id WHERE img_obj.h = (SELECT MAX(h) FROM img_obj)",
        "retrieved": [
            7487
        ],
        "token_usage": {
            "tokens": 1092,
            "cost": 0.00021554999999999998
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.PRED_CLASS_ID FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID ORDER BY T2.H DESC LIMIT 1"
    },
    {
        "sample_id": 7533,
        "pred_sql": "SELECT CAST(COUNT(img_obj.obj_sample_id) AS FLOAT) / COUNT(DISTINCT img_obj.img_id) AS average_object_elements FROM img_obj",
        "retrieved": [
            7566
        ],
        "token_usage": {
            "tokens": 1058,
            "cost": 0.00021945
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT CAST(COUNT(OBJ_CLASS_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ"
    },
    {
        "sample_id": 7590,
        "pred_sql": "SELECT COUNT(DISTINCT img_obj.img_id) AS image_count FROM img_rel INNER JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id INNER JOIN img_obj ON img_rel.img_id = img_obj.img_id WHERE pred_classes.pred_class = 'reading' AND img_obj.obj_sample_id IN (SELECT obj_sample_id FROM img_rel WHERE obj1_sample_id = obj2_sample_id)",
        "retrieved": [
            7521
        ],
        "token_usage": {
            "tokens": 1219,
            "cost": 0.00028635
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading'"
    },
    {
        "sample_id": 7510,
        "pred_sql": "SELECT img_obj.obj_sample_id FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE obj_classes.obj_class = 'transportation'",
        "retrieved": [
            7538
        ],
        "token_usage": {
            "tokens": 1087,
            "cost": 0.00024045
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc')"
    },
    {
        "sample_id": 7601,
        "pred_sql": "SELECT img_obj.x, img_obj.y FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE obj_classes.obj_class = 'pizza' LIMIT 10;",
        "retrieved": [
            7526
        ],
        "token_usage": {
            "tokens": 1113,
            "cost": 0.00022815
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T1.IMG_ID, T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'pizza' LIMIT 10"
    },
    {
        "sample_id": 7559,
        "pred_sql": "SELECT obj_classes.obj_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id ORDER BY (img_obj.y + img_obj.h) ASC LIMIT 1;",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1233,
            "cost": 0.0002502
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H LIMIT 1"
    },
    {
        "sample_id": 7492,
        "pred_sql": "SELECT COUNT(*) AS total_object_classes FROM obj_classes;",
        "retrieved": [
            7479
        ],
        "token_usage": {
            "tokens": 1093,
            "cost": 0.0002085
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(OBJ_CLASS_ID) FROM OBJ_CLASSES"
    },
    {
        "sample_id": 7522,
        "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.img_id = '2222' AND obj_classes.obj_class = 'feathers'",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1299,
            "cost": 0.00028799999999999995
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.X, T2.Y, T2.H, T2.W FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2222 AND T1.OBJ_CLASS = 'feathers'"
    },
    {
        "sample_id": 7558,
        "pred_sql": "SELECT COUNT(img_obj.obj_sample_id) AS sample_count FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.img_id = '1098' AND obj_classes.obj_class = 'bed'",
        "retrieved": [
            7566
        ],
        "token_usage": {
            "tokens": 1102,
            "cost": 0.0002427
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'bed' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1098"
    },
    {
        "sample_id": 7486,
        "pred_sql": "SELECT img_rel.img_id FROM img_rel JOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id WHERE pred_classes.pred_class = 'parked on' GROUP BY img_rel.img_id HAVING COUNT(DISTINCT img_rel.obj1_sample_id, img_rel.obj2_sample_id) > 2;",
        "retrieved": [
            7563
        ],
        "token_usage": {
            "tokens": 1140,
            "cost": 0.00025245
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.IMG_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.PRED_CLASS = 'parked on' AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID GROUP BY T2.IMG_ID HAVING COUNT(T2.IMG_ID) > 2"
    },
    {
        "sample_id": 7578,
        "pred_sql": "SELECT COUNT(DISTINCT img_id) FROM img_obj WHERE x = '5' AND y = '5';",
        "retrieved": [
            7596
        ],
        "token_usage": {
            "tokens": 1079,
            "cost": 0.00021944999999999997
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5"
    },
    {
        "sample_id": 7508,
        "pred_sql": "SELECT DISTINCT img_id FROM img_rel WHERE obj1_sample_id = obj2_sample_id;",
        "retrieved": [
            7487
        ],
        "token_usage": {
            "tokens": 1118,
            "cost": 0.0002298
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID"
    },
    {
        "sample_id": 7480,
        "pred_sql": "SELECT COUNT(DISTINCT img_obj.img_id) FROM img_obj JOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id JOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id WHERE att_classes.att_class = 'man';",
        "retrieved": [
            7566
        ],
        "token_usage": {
            "tokens": 1095,
            "cost": 0.0002394
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'man' GROUP BY T2.IMG_ID ) T"
    },
    {
        "sample_id": 7584,
        "pred_sql": "SELECT DISTINCT obj_classes.obj_class FROM img_obj INNER JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '5' AND img_obj.y = '5'",
        "retrieved": [
            7535
        ],
        "token_usage": {
            "tokens": 1286,
            "cost": 0.0002793
        },
        "db_id": "image_and_language",
        "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 5 AND T1.Y = 5"
    },
    {
        "sample_id": 1299,
        "pred_sql": "SELECT credit.role, person.name FROM credit INNER JOIN person ON person.person_id = credit.person_id WHERE credit.credited = 0",
        "retrieved": [
            1275
        ],
        "token_usage": {
            "tokens": 1547,
            "cost": 0.0003
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT DISTINCT role FROM Credit WHERE credited = 'false'"
    },
    {
        "sample_id": 1258,
        "pred_sql": "SELECT COUNT(keyword.keyword) AS keyword_count FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.title = 'Disciple'",
        "retrieved": [
            1284
        ],
        "token_usage": {
            "tokens": 1547,
            "cost": 0.00029055
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple'"
    },
    {
        "sample_id": 1329,
        "pred_sql": "SELECT episode.title FROM episode ORDER BY episode.rating DESC LIMIT 3",
        "retrieved": [
            1300
        ],
        "token_usage": {
            "tokens": 1461,
            "cost": 0.00027585
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars BETWEEN 1 AND 10 GROUP BY T2.title ORDER BY CAST(SUM(T1.stars * T1.percent) AS REAL) / 100 DESC LIMIT 3"
    },
    {
        "sample_id": 1355,
        "pred_sql": "SELECT person.name FROM person INNER JOIN credit ON person.person_id = credit.person_id INNER JOIN episode ON credit.episode_id = episode.episode_id INNER JOIN award ON episode.episode_id = award.episode_id WHERE person.height_meters > 1.80 AND award.result = 'Winner';",
        "retrieved": [
            1282
        ],
        "token_usage": {
            "tokens": 1596,
            "cost": 0.00033705
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T2.height_meters > 1.80"
    },
    {
        "sample_id": 1281,
        "pred_sql": "SELECT COUNT(award.award_id) FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.year = 1998 AND award.result = 'Winner' AND award.organization = 'International Monitor Awards'",
        "retrieved": [
            1323
        ],
        "token_usage": {
            "tokens": 1562,
            "cost": 0.00030855
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'"
    },
    {
        "sample_id": 1312,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN award ON episode.episode_id = award.episode_id GROUP BY episode.episode_id ORDER BY COUNT(award.award_id) DESC LIMIT 1;",
        "retrieved": [
            1282
        ],
        "token_usage": {
            "tokens": 1512,
            "cost": 0.00029114999999999995
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' GROUP BY T2.episode_id ORDER BY COUNT(T1.result) DESC LIMIT 1"
    },
    {
        "sample_id": 1260,
        "pred_sql": "SELECT COUNT(award.award_id) FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE episode.season = '9' AND episode.episode = '20'",
        "retrieved": [
            1282
        ],
        "token_usage": {
            "tokens": 1507,
            "cost": 0.00028635
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 20"
    },
    {
        "sample_id": 1290,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id INNER JOIN person ON person.person_id = credit.person_id WHERE credit.credited = '1' AND person.name = 'Art Department' GROUP BY episode.episode_id ORDER BY COUNT(credit.person_id) DESC LIMIT 1;",
        "retrieved": [
            1306
        ],
        "token_usage": {
            "tokens": 1592,
            "cost": 0.00033555
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.title FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Art Department' GROUP BY T2.episode_id ORDER BY COUNT(T1.category) DESC LIMIT 1"
    },
    {
        "sample_id": 1276,
        "pred_sql": "SELECT COUNT(DISTINCT p.person_id) FROM person p INNER JOIN award a ON p.person_id = a.person_id WHERE p.birth_country = 'Canada' AND a.year = 1999 AND a.result = 'Winner'",
        "retrieved": [
            1272
        ],
        "token_usage": {
            "tokens": 1591,
            "cost": 0.00031784999999999995
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 1999 AND T1.birth_country = 'Canada'"
    },
    {
        "sample_id": 1322,
        "pred_sql": "SELECT person.name FROM person INNER JOIN award ON person.person_id = award.person_id INNER JOIN episode ON award.episode_id = episode.episode_id WHERE award.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND award.award = 'Television Silver Gavel Award' AND award.result = 'Winner' AND award.year IN (SELECT year FROM award WHERE person_id = person.person_id AND award.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' AND award.result = 'Winner' GROUP BY year HAVING COUNT(DISTINCT year) = 2)",
        "retrieved": [
            1323
        ],
        "token_usage": {
            "tokens": 1681,
            "cost": 0.0003723
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT t3.name FROM ( SELECT DISTINCT T2.year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T2.series = 'Law and Order' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2"
    },
    {
        "sample_id": 1332,
        "pred_sql": "SELECT COUNT(credit.episode_id) AS episode_count FROM credit INNER JOIN person ON credit.person_id = person.person_id WHERE person.name = 'Jerry Orbach'",
        "retrieved": [
            1270
        ],
        "token_usage": {
            "tokens": 1589,
            "cost": 0.0003045
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Jerry Orbach'"
    },
    {
        "sample_id": 1340,
        "pred_sql": "SELECT episode.title, COUNT(award.award) AS award_count FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.result = 'Winner' GROUP BY episode.title ORDER BY award_count DESC LIMIT 1;",
        "retrieved": [
            1285
        ],
        "token_usage": {
            "tokens": 1546,
            "cost": 0.00031514999999999994
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Winner' GROUP BY T1.episode_id ORDER BY COUNT(T2.award_id) DESC LIMIT 1"
    },
    {
        "sample_id": 1279,
        "pred_sql": "SELECT (SUM(vote.votes) * 100.0 / (SELECT SUM(votes) FROM vote WHERE episode_id = e.episode_id)) AS percentage FROM episode e INNER JOIN vote v ON e.episode_id = v.episode_id WHERE v.stars = 1 AND e.title = 'True North';",
        "retrieved": [
            1268
        ],
        "token_usage": {
            "tokens": 1525,
            "cost": 0.00029895
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.stars = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North' AND T1.episode_id = 'tt0629477'"
    },
    {
        "sample_id": 1278,
        "pred_sql": "SELECT keyword.keyword FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.series = 'Shield'",
        "retrieved": [
            1247
        ],
        "token_usage": {
            "tokens": 1466,
            "cost": 0.00027255
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'"
    },
    {
        "sample_id": 1252,
        "pred_sql": "SELECT person.name, credit.role FROM credit INNER JOIN person ON person.person_id = credit.person_id INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'Cherished' AND person.name = 'Park Dietz'",
        "retrieved": [
            1328
        ],
        "token_usage": {
            "tokens": 1588,
            "cost": 0.00033495
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'"
    },
    {
        "sample_id": 1336,
        "pred_sql": "SELECT person.name, episode.number_in_series FROM person INNER JOIN award ON person.person_id = award.person_id INNER JOIN credit ON person.person_id = credit.person_id INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE award.result = 'Winner' AND credit.role = 'director';",
        "retrieved": [
            1282
        ],
        "token_usage": {
            "tokens": 1539,
            "cost": 0.00030645
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'"
    },
    {
        "sample_id": 1341,
        "pred_sql": "SELECT COUNT(credit.episode_id) AS total_credits FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE credit.credited = '1' AND episode.number_in_series BETWEEN '1' AND '10'",
        "retrieved": [
            1270
        ],
        "token_usage": {
            "tokens": 1606,
            "cost": 0.00031289999999999996
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.credited = 'true' AND T2.episode BETWEEN 1 AND 10"
    },
    {
        "sample_id": 1295,
        "pred_sql": "SELECT person.name FROM credit INNER JOIN person ON credit.person_id = person.person_id INNER JOIN episode ON credit.episode_id = episode.episode_id",
        "retrieved": [
            1328
        ],
        "token_usage": {
            "tokens": 1496,
            "cost": 0.000282
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.category = 'Cast'"
    },
    {
        "sample_id": 1311,
        "pred_sql": "SELECT person.name FROM credit INNER JOIN person ON person.person_id = credit.person_id ORDER BY person.height_meters DESC LIMIT 1",
        "retrieved": [
            1275
        ],
        "token_usage": {
            "tokens": 1518,
            "cost": 0.00028484999999999996
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id ORDER BY T1.height_meters DESC LIMIT 1"
    },
    {
        "sample_id": 1345,
        "pred_sql": "SELECT COUNT(award.award_id) FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.result = 'Winner' AND award.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'",
        "retrieved": [
            1323
        ],
        "token_usage": {
            "tokens": 1558,
            "cost": 0.000303
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'"
    },
    {
        "sample_id": 1298,
        "pred_sql": "SELECT COUNT(episode.episode_id) FROM episode LEFT JOIN award ON episode.episode_id = award.episode_id WHERE award.result != 'Winner' OR award.result IS NULL;",
        "retrieved": [
            1323
        ],
        "token_usage": {
            "tokens": 1531,
            "cost": 0.00029265
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE Result = 'Nominee'"
    },
    {
        "sample_id": 1316,
        "pred_sql": "SELECT CAST(COUNT(credit.episode_id) AS FLOAT) / (SELECT COUNT(*) FROM episode) * 100 AS percentage FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE credit.category = 'additional crew' AND credit.credited = '1' AND episode.title = 'True North'",
        "retrieved": [
            1270
        ],
        "token_usage": {
            "tokens": 1663,
            "cost": 0.00034665
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.role = 'Additional Crew' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North'"
    },
    {
        "sample_id": 1303,
        "pred_sql": "SELECT title FROM episode WHERE episode_id IN (SELECT episode_id FROM vote ORDER BY stars ASC LIMIT 1)",
        "retrieved": [
            1306
        ],
        "token_usage": {
            "tokens": 1514,
            "cost": 0.0002919
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 1"
    },
    {
        "sample_id": 1331,
        "pred_sql": "SELECT COUNT(DISTINCT award.person_id) AS number_of_nominees FROM award INNER JOIN person ON award.person_id = person.person_id WHERE person.birth_country = 'Canada'",
        "retrieved": [
            1287
        ],
        "token_usage": {
            "tokens": 1505,
            "cost": 0.00028335
        },
        "db_id": "law_episode",
        "gold_sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.birth_country = 'Canada'"
    },
    {
        "sample_id": 4910,
        "pred_sql": "SELECT current-terms.contact_form FROM \"current-terms\" INNER JOIN current AS T2 ON T2.bioguide_id = current-terms.bioguide WHERE T2.official_full_name = 'Rick Crawford'",
        "retrieved": [
            4893
        ],
        "token_usage": {
            "tokens": 4651,
            "cost": 0.00076425
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.contact_form FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Rick Crawford'"
    },
    {
        "sample_id": 4863,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM current WHERE wikipedia_id IS NOT NULL) * 1.0 / (SELECT COUNT(*) FROM historical WHERE wikipedia_id IS NOT NULL) AS ratio_famous_legislators;",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4665,
            "cost": 0.0007636499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) FROM historical ) FROM current"
    },
    {
        "sample_id": 4848,
        "pred_sql": "SELECT current.bioguide_id FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4",
        "retrieved": [
            4752
        ],
        "token_usage": {
            "tokens": 4723,
            "cost": 0.00078945
        },
        "db_id": "legislator",
        "gold_sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F'"
    },
    {
        "sample_id": 4903,
        "pred_sql": "SELECT COUNT(subquery_q0.cid) FROM (SELECT current.bioguide_id FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4)",
        "retrieved": [
            4752
        ],
        "token_usage": {
            "tokens": 4761,
            "cost": 0.0008108999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(gender_bio) FROM current WHERE gender_bio = 'F'"
    },
    {
        "sample_id": 4758,
        "pred_sql": "SELECT COUNT(*) FROM \"social-media\" WHERE instagram IS NOT NULL",
        "retrieved": [
            4755
        ],
        "token_usage": {
            "tokens": 4627,
            "cost": 0.0007430999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM \"social-media\" WHERE instagram IS NOT NULL AND instagram <> ''"
    },
    {
        "sample_id": 4905,
        "pred_sql": "SELECT current-terms.address FROM \"current-terms\" INNER JOIN current AS T2 ON T2.bioguide_id = current-terms.bioguide WHERE current-terms.contact_form = 'http://www.carper.senate.gov/contact/'",
        "retrieved": [
            4893
        ],
        "token_usage": {
            "tokens": 4692,
            "cost": 0.00078435
        },
        "db_id": "legislator",
        "gold_sql": "SELECT address FROM \"current-terms\" WHERE contact_form = 'http://www.carper.senate.gov/contact/'"
    },
    {
        "sample_id": 4850,
        "pred_sql": "SELECT COUNT(*) FROM current-terms WHERE type = 'sen'",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4693,
            "cost": 0.00077145
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class IS NULL"
    },
    {
        "sample_id": 4875,
        "pred_sql": "SELECT current.official_full_name FROM current INNER JOIN \"social-media\" ON social-media.bioguide = current.bioguide_id WHERE social-media.facebook_id IS NOT NULL AND social-media.instagram_id IS NOT NULL AND social-media.twitter_id IS NOT NULL AND social-media.youtube_id IS NOT NULL;",
        "retrieved": [
            4744
        ],
        "token_usage": {
            "tokens": 4699,
            "cost": 0.0007912499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL"
    },
    {
        "sample_id": 4737,
        "pred_sql": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''",
        "retrieved": [
            4853
        ],
        "token_usage": {
            "tokens": 4619,
            "cost": 0.00074415
        },
        "db_id": "legislator",
        "gold_sql": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''"
    },
    {
        "sample_id": 4816,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN current.birthday_bio < '1975-01-01' AND current.bioguide_id NOT IN (SELECT bioguide FROM current-terms WHERE type = 'sen') THEN current.bioguide_id ELSE NULL END) AS FLOAT) * 100 / (SELECT COUNT(*) FROM current) AS percentage_not_senators_born_before_1975;",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4717,
            "cost": 0.0007930499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.class IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE CAST(T1.birthday_bio AS DATE) <= 1975"
    },
    {
        "sample_id": 4815,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN ct.type = 'sen' AND strftime('%Y', ct.birthday_bio) = '1964' THEN ct.bioguide ELSE NULL END) AS FLOAT) * 100 / (SELECT COUNT(*) FROM current_terms WHERE type = 'sen') AS percentage_senators_born_1964 FROM current_terms ct",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4777,
            "cost": 0.0008294999999999998
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.class IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio LIKE '%1964%'"
    },
    {
        "sample_id": 4874,
        "pred_sql": "SELECT current-terms.party, COUNT(*) as num_legislators FROM current INNER JOIN \"current-terms\" ON current.bioguide_id = \"current-terms\".bioguide WHERE current.religion_bio = 'Baptist' GROUP BY current-terms.party ORDER BY num_legislators DESC LIMIT 1;",
        "retrieved": [
            4783
        ],
        "token_usage": {
            "tokens": 4728,
            "cost": 0.0007982999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.party FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Baptist' GROUP BY T2.party ORDER BY COUNT(T2.party) DESC LIMIT 1"
    },
    {
        "sample_id": 4779,
        "pred_sql": "SELECT current.official_full_name FROM \"current-terms\" INNER JOIN current AS T2 ON T2.bioguide_id = current-terms.bioguide WHERE current-terms.state = 'VA'",
        "retrieved": [
            4762
        ],
        "token_usage": {
            "tokens": 4656,
            "cost": 0.0007595999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'VA' GROUP BY T1.official_full_name"
    },
    {
        "sample_id": 4873,
        "pred_sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Jewish' AND bioguide_id NOT IN (SELECT bioguide FROM social-media WHERE facebook IS NOT NULL)",
        "retrieved": [
            4853
        ],
        "token_usage": {
            "tokens": 4654,
            "cost": 0.00077235
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(T3.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NULL GROUP BY T1.bioguide_id ) T3"
    },
    {
        "sample_id": 4829,
        "pred_sql": "SELECT current.official_full_name FROM current INNER JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE strftime('%Y', current.birthday_bio) = '1960'",
        "retrieved": [
            4762
        ],
        "token_usage": {
            "tokens": 4686,
            "cost": 0.0007762499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT official_full_name FROM current WHERE birthday_bio LIKE '1960%'"
    },
    {
        "sample_id": 4865,
        "pred_sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Catholic' AND (ballotpedia_id IS NULL OR ballotpedia_id = '')",
        "retrieved": [
            4885
        ],
        "token_usage": {
            "tokens": 4635,
            "cost": 0.00076545
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(bioguide_id) FROM historical WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL"
    },
    {
        "sample_id": 4775,
        "pred_sql": "SELECT social-media.youtube_id FROM current INNER JOIN \"social-media\" ON current.bioguide_id = social-media.bioguide WHERE current.nickname_name = 'RepWassermanSchultz'",
        "retrieved": [
            4744
        ],
        "token_usage": {
            "tokens": 4648,
            "cost": 0.0007624499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT youtube_id FROM \"social-media\" WHERE youtube = 'RepWassermanSchultz'"
    },
    {
        "sample_id": 4792,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN current-terms.class = 1 THEN current-terms.bioguide ELSE NULL END) AS FLOAT) * 100 / (SELECT COUNT(*) FROM current-terms WHERE class IS NOT NULL) AS percent_senators_class_1 FROM current-terms;",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4676,
            "cost": 0.00077115
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"historical-terms\" WHERE type = 'sen'"
    },
    {
        "sample_id": 4794,
        "pred_sql": "SELECT SUM(julianday(end) - julianday(start)) / 365.25 AS years_served FROM historical-terms WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'John' AND last_name = 'Conyers' AND suffix_name = 'Jr.');",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4737,
            "cost": 0.00079515
        },
        "db_id": "legislator",
        "gold_sql": "SELECT SUM(CAST(T2.END - T2.start AS DATE)) AS sum FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'"
    },
    {
        "sample_id": 4839,
        "pred_sql": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = '186'",
        "retrieved": [
            4834
        ],
        "token_usage": {
            "tokens": 4726,
            "cost": 0.0007853999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = 186 GROUP BY T2.party, T2.state"
    },
    {
        "sample_id": 4743,
        "pred_sql": "SELECT COUNT(*) FROM current AS T1 LEFT JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.instagram IS NULL",
        "retrieved": [
            4853
        ],
        "token_usage": {
            "tokens": 4625,
            "cost": 0.0007535999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.instagram IS NULL"
    },
    {
        "sample_id": 4751,
        "pred_sql": "SELECT current-terms.state FROM \"current-terms\" INNER JOIN current ON current.bioguide_id = current-terms.bioguide WHERE current.official_full_name = 'Sherrod Brown' AND current-terms.start = '1993-01-05'",
        "retrieved": [
            4750
        ],
        "token_usage": {
            "tokens": 4683,
            "cost": 0.00078435
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.state FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'"
    },
    {
        "sample_id": 4789,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN historical.gender_bio = 'male' THEN historical.bioguide_id ELSE NULL END) AS FLOAT) / (SELECT COUNT(*) FROM historical) AS male_ratio, CAST(COUNT(CASE WHEN historical.gender_bio = 'female' THEN historical.bioguide_id ELSE NULL END) AS FLOAT) / (SELECT COUNT(*) FROM historical) AS female_ratio FROM historical",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4727,
            "cost": 0.0008012999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical"
    },
    {
        "sample_id": 4746,
        "pred_sql": "SELECT social-media.facebook FROM current INNER JOIN \"social-media\" AS T2 ON current.bioguide_id = T2.bioguide WHERE NOT current.wikipedia_id IS NULL AND current.birthday_bio = (SELECT MIN(birthday_bio) FROM current)",
        "retrieved": [
            4891
        ],
        "token_usage": {
            "tokens": 4728,
            "cost": 0.0008000999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id ORDER BY T1.birthday_bio LIMIT 1"
    },
    {
        "sample_id": 4748,
        "pred_sql": "SELECT COUNT(*) FROM \"current-terms\" WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Roger' AND last_name = 'Wicker') AND type = 'rep'",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4693,
            "cost": 0.0007664999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''"
    },
    {
        "sample_id": 4811,
        "pred_sql": "SELECT current.title FROM current WHERE current.birthday_bio = '1942-02-20'",
        "retrieved": [
            4817
        ],
        "token_usage": {
            "tokens": 4627,
            "cost": 0.0007511999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.title FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1942-02-20' GROUP BY T2.title"
    },
    {
        "sample_id": 4797,
        "pred_sql": "SELECT current.official_full_name, current.nickname_name FROM current INNER JOIN \"social-media\" ON current.bioguide_id = \"social-media\".bioguide WHERE \"social-media\".instagram IS NOT NULL AND current.thomas_id < 1000",
        "retrieved": [
            4853
        ],
        "token_usage": {
            "tokens": 4696,
            "cost": 0.000789
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.official_full_name, T1.nickname_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.instagram IS NOT NULL AND T1.thomas_id < 1000"
    },
    {
        "sample_id": 4771,
        "pred_sql": "SELECT current_terms.district FROM current_terms INNER JOIN current ON current.bioguide_id = current_terms.bioguide WHERE current.first_name = 'Chris' AND current.last_name = 'Van Hollen'",
        "retrieved": [
            4832
        ],
        "token_usage": {
            "tokens": 4690,
            "cost": 0.0007750499999999998
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T2.district FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Chris Van Hollen' AND T2.district IS NOT NULL GROUP BY T2.district"
    },
    {
        "sample_id": 4825,
        "pred_sql": "SELECT COUNT(CASE WHEN current.gender_bio = 'male' THEN current.bioguide_id ELSE NULL END) AS male_count FROM current;",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4631,
            "cost": 0.0007455
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'"
    },
    {
        "sample_id": 4799,
        "pred_sql": "SELECT ct.party, ct.state FROM current c INNER JOIN \"current-terms\" ct ON c.bioguide_id = ct.bioguide WHERE c.birthday_bio LIKE '1738%' AND ct.type = 'rep';",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4793,
            "cost": 0.0008211
        },
        "db_id": "legislator",
        "gold_sql": "SELECT T1.party, T1.state FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.house_history_id IS NOT NULL AND T2.birthday_bio LIKE '%1738%'"
    },
    {
        "sample_id": 4756,
        "pred_sql": "SELECT COUNT(*) AS male_count FROM current WHERE gender_bio = 'male';",
        "retrieved": [
            4774
        ],
        "token_usage": {
            "tokens": 4615,
            "cost": 0.0007349999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'"
    },
    {
        "sample_id": 4866,
        "pred_sql": "SELECT COUNT(*) FROM \"current-terms\" WHERE class = '1' AND party = 'Republican'",
        "retrieved": [
            4762
        ],
        "token_usage": {
            "tokens": 4624,
            "cost": 0.0007394999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class = 1 AND party = 'Republican'"
    },
    {
        "sample_id": 4879,
        "pred_sql": "SELECT COUNT(*) FROM historical INNER JOIN \"historical-terms\" AS T2 ON historical.bioguide_id = T2.bioguide WHERE historical.first_name = 'Benjamin' AND T2.party = 'Federalist'",
        "retrieved": [
            4769
        ],
        "token_usage": {
            "tokens": 4721,
            "cost": 0.0007841999999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T2.party = 'Federalist' AND T2.type = 'rep' GROUP BY T1.bioguide_id ) AS T"
    },
    {
        "sample_id": 4880,
        "pred_sql": "SELECT COUNT(subquery_q0.cid) FROM (SELECT current.bioguide_id FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND (julianday(T2.end) - julianday(T2.start)) / 365.25 >= 10 GROUP BY T2.bioguide HAVING COUNT(T2.bioguide) > 4) AS subquery_q0",
        "retrieved": [
            4752
        ],
        "token_usage": {
            "tokens": 4862,
            "cost": 0.0008674499999999999
        },
        "db_id": "legislator",
        "gold_sql": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.\"end\") AS int) - CAST(strftime('%Y', T2.start) AS int)) > 10 THEN 1 ELSE 0 END AS result FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3"
    },
    {
        "sample_id": 4892,
        "pred_sql": "SELECT COUNT(subquery_q0.cid) FROM (SELECT current.bioguide_id FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = (SELECT MIN(birthday_bio) FROM current) GROUP BY T2.bioguide) AS subquery_q0",
        "retrieved": [
            4753
        ],
        "token_usage": {
            "tokens": 4741,
            "cost": 0.000798
        },
        "db_id": "legislator",
        "gold_sql": "SELECT COUNT(T2.bioguide) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = ( SELECT MIN(birthday_bio) FROM current )"
    },
    {
        "sample_id": 4869,
        "pred_sql": "SELECT current.official_full_name FROM \"current-terms\" INNER JOIN current AS T2 ON T2.bioguide_id = current-terms.bioguide ORDER BY current.birthday_bio ASC LIMIT 1",
        "retrieved": [
            4762
        ],
        "token_usage": {
            "tokens": 4673,
            "cost": 0.00076935
        },
        "db_id": "legislator",
        "gold_sql": "SELECT first_name, last_name FROM historical ORDER BY birthday_bio LIMIT 1"
    },
    {
        "sample_id": 4584,
        "pred_sql": "SELECT COUNT(answer.userid) FROM question AS Q INNER JOIN answer AS A ON Q.questionid = A.questionid WHERE A.surveyid = 2014 AND Q.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND A.answertext = 'No'",
        "retrieved": [
            4594
        ],
        "token_usage": {
            "tokens": 1049,
            "cost": 0.0002415
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND T2.SurveyID = 2014 AND T2.AnswerText LIKE 'NO'"
    },
    {
        "sample_id": 4612,
        "pred_sql": "SELECT (SELECT COUNT(answer.userid) FROM question AS T1 INNER JOIN answer AS T2 ON T1.questionid = T2.questionid WHERE T2.surveyid = 2017 AND T1.questiontext LIKE 'mental health survey%') * 1.0 / (SELECT COUNT(answer.userid) FROM question AS T1 INNER JOIN answer AS T2 ON T1.questionid = T2.questionid WHERE T2.surveyid = 2018 AND T1.questiontext LIKE 'mental health survey%') AS ratio;",
        "retrieved": [
            4594
        ],
        "token_usage": {
            "tokens": 1049,
            "cost": 0.00024239999999999998
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT CAST(COUNT(T1.UserID) AS REAL) / ( SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018' ) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2017'"
    },
    {
        "sample_id": 4602,
        "pred_sql": "SELECT COUNT(DISTINCT answer.userid) FROM question AS T1 INNER JOIN answer AS T2 ON T1.questionid = T2.questionid WHERE T2.surveyid = '2016' AND T1.questiontext LIKE 'mental health survey%'",
        "retrieved": [
            4594
        ],
        "token_usage": {
            "tokens": 1056,
            "cost": 0.00025245
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2016'"
    },
    {
        "sample_id": 4613,
        "pred_sql": "SELECT CAST(COUNT(answer.userid) AS FLOAT) / (SELECT COUNT(*) FROM answer WHERE surveyid = 2016) * 100 AS percentage FROM question AS T1 INNER JOIN answer AS T2 ON T1.questionid = T2.questionid WHERE T2.surveyid = 2016 AND T1.questiontext LIKE 'Do you currently have a mental health disorder?' AND T2.answertext = 'Yes'",
        "retrieved": [
            4594
        ],
        "token_usage": {
            "tokens": 1057,
            "cost": 0.00025124999999999995
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SurveyID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 32 AND T1.SurveyID = 2016"
    },
    {
        "sample_id": 4587,
        "pred_sql": "SELECT answer.answertext FROM answer INNER JOIN question ON answer.questionid = question.questionid WHERE answer.surveyid = 2014 AND question.questiontext = 'Any additional notes or comments' AND answer.answertext IS NOT NULL;",
        "retrieved": [
            4574
        ],
        "token_usage": {
            "tokens": 928,
            "cost": 0.00022695
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Any additional notes or comments' AND T2.SurveyID = 2014 AND T2.AnswerText <> -1"
    },
    {
        "sample_id": 4619,
        "pred_sql": "SELECT COUNT(answer.userid) FROM question AS Q INNER JOIN answer AS A ON Q.questionid = A.questionid WHERE Q.questiontext LIKE 'Have you been diagnosed with Substance Use Disorder?'",
        "retrieved": [
            4594
        ],
        "token_usage": {
            "tokens": 979,
            "cost": 0.00020669999999999998
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(AnswerText) FROM Answer WHERE AnswerText LIKE 'Substance Use Disorder'"
    },
    {
        "sample_id": 4603,
        "pred_sql": "SELECT answer.answertext, COUNT(answer.userid) AS answer_count FROM answer JOIN question ON answer.questionid = question.questionid WHERE question.questiontext = 'What country do you work in?' GROUP BY answer.answertext ORDER BY answer_count DESC LIMIT 1;",
        "retrieved": [
            4572
        ],
        "token_usage": {
            "tokens": 812,
            "cost": 0.0001965
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'What country do you work in?' GROUP BY T1.AnswerText ORDER BY COUNT(T1.AnswerText) DESC LIMIT 1"
    },
    {
        "sample_id": 4592,
        "pred_sql": "SELECT COUNT(answer.userid) FROM question AS T1 INNER JOIN answer AS T2 ON T1.questionid = T2.questionid WHERE T1.questiontext = 'Have you had a mental health disorder in the past?' AND T2.surveyid IN (2016, 2017, 2018) AND T2.answertext = 'Yes'",
        "retrieved": [
            4594
        ],
        "token_usage": {
            "tokens": 1051,
            "cost": 0.00024314999999999997
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2016, 2017, 2018) AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'"
    },
    {
        "sample_id": 4600,
        "pred_sql": "SELECT COUNT(DISTINCT survey.surveyid) FROM survey JOIN answer ON survey.surveyid = answer.surveyid JOIN question ON answer.questionid = question.questionid WHERE question.questiontext = 'What country do you work in?';",
        "retrieved": [
            4582
        ],
        "token_usage": {
            "tokens": 818,
            "cost": 0.000192
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT COUNT(DISTINCT T1.QuestionID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T2.questiontext = 'What country do you work in?'"
    },
    {
        "sample_id": 4588,
        "pred_sql": "SELECT DISTINCT q.questiontext \nFROM question q \nJOIN answer a1 ON q.questionid = a1.questionid \nJOIN answer a2 ON q.questionid = a2.questionid \nWHERE a1.surveyid = '2014' \nAND a2.surveyid = '2016';",
        "retrieved": [
            4594
        ],
        "token_usage": {
            "tokens": 1048,
            "cost": 0.00024765
        },
        "db_id": "mental_health_survey",
        "gold_sql": "SELECT T1.questiontext FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2014, 2016) GROUP BY T1.questiontext"
    },
    {
        "sample_id": 8252,
        "pred_sql": "SELECT city.name FROM city INNER JOIN located ON city.name = located.city INNER JOIN lake ON lake.name = located.lake WHERE lake.altitude = (SELECT MAX(altitude) FROM lake)",
        "retrieved": [
            8337
        ],
        "token_usage": {
            "tokens": 2740,
            "cost": 0.00047894999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.City FROM lake AS T1 LEFT JOIN located AS T2 ON T2.Lake = T1.Name ORDER BY T1.Altitude DESC LIMIT 1"
    },
    {
        "sample_id": 8296,
        "pred_sql": "SELECT (SELECT MAX(length) FROM borders WHERE country1 = 'USA' OR country2 = 'USA') / (SELECT MIN(length) FROM borders WHERE country1 = 'USA' OR country2 = 'USA') AS border_ratio;",
        "retrieved": [
            8342
        ],
        "token_usage": {
            "tokens": 2765,
            "cost": 0.0004997999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T1.Name = 'United States'"
    },
    {
        "sample_id": 8245,
        "pred_sql": "SELECT country.name FROM country INNER JOIN economy ON country.code = economy.country ORDER BY economy.gdp DESC LIMIT 1;",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2694,
            "cost": 0.00045224999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1"
    },
    {
        "sample_id": 8354,
        "pred_sql": "SELECT AVG(country.area) AS average_area FROM country INNER JOIN encompasses ON country.code = encompasses.country INNER JOIN continent ON encompasses.continent = continent.name WHERE continent.name = 'Asia';",
        "retrieved": [
            8281
        ],
        "token_usage": {
            "tokens": 2776,
            "cost": 0.0004802999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT AVG(Area) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia'"
    },
    {
        "sample_id": 8370,
        "pred_sql": "SELECT city.population FROM city INNER JOIN country ON city.country = country.code INNER JOIN politics ON country.code = politics.country WHERE country.capital = city.name AND politics.independence = '1947-08-15';",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2728,
            "cost": 0.0004632
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T3.Population FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN city AS T3 ON T3.Name = T2.Capital WHERE T1.Independence = '1947-08-15'"
    },
    {
        "sample_id": 8310,
        "pred_sql": "SELECT SUM(economy.gdp) AS total_gdp FROM country INNER JOIN encompasses ON country.code = encompasses.country INNER JOIN economy ON country.code = economy.country WHERE encompasses.continent = 'Europe';",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2728,
            "cost": 0.0004722
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT SUM(T4.GDP) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN economy AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe'"
    },
    {
        "sample_id": 8231,
        "pred_sql": "SELECT country.population * (ethnicgroup.percentage) FROM ethnicgroup INNER JOIN country ON ethnicgroup.country = country.code WHERE ethnicgroup.name = 'African' AND country.name = 'Turks and Caicos Islands'",
        "retrieved": [
            8294
        ],
        "token_usage": {
            "tokens": 2801,
            "cost": 0.0004975499999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Name = 'Turks and Caicos Islands'"
    },
    {
        "sample_id": 8225,
        "pred_sql": "SELECT country.name FROM ethnicgroup INNER JOIN country AS T2 ON ethnicgroup.country = T2.code WHERE ethnicgroup.name = 'African' AND ethnicgroup.percentage = 100",
        "retrieved": [
            8218
        ],
        "token_usage": {
            "tokens": 2722,
            "cost": 0.0004663499999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Percentage = 100 AND T1.Name = 'African'"
    },
    {
        "sample_id": 8456,
        "pred_sql": "SELECT mountain.name, province.name AS province_name, country.name AS country_name, mountain.type FROM mountain INNER JOIN geo_mountain ON mountain.name = geo_mountain.mountain INNER JOIN province ON geo_mountain.province = province.name INNER JOIN country ON province.country = country.code WHERE mountain.name = 'Ampato';",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2843,
            "cost": 0.00052095
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Type, T3.Name, T4.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T3.Country = T4.Code WHERE T1.Name = 'Ampato'"
    },
    {
        "sample_id": 8309,
        "pred_sql": "SELECT country1, country2 FROM borders ORDER BY length ASC LIMIT 1;",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2705,
            "cost": 0.0004584
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length ASC LIMIT 1"
    },
    {
        "sample_id": 8458,
        "pred_sql": "SELECT (COUNT(DISTINCT c.code) * 100.0 / (SELECT COUNT(*) FROM country)) AS percentage_independent_nations,\n       (SELECT name FROM country c2\n        INNER JOIN politics p2 ON c2.code = p2.country\n        WHERE p2.independence IS NOT NULL AND p2.independence > '1993-01-01' AND c2.government = 'parliamentary'\n        LIMIT 3) AS three_parliamentary_democracies\nFROM country c\nINNER JOIN politics p ON c.code = p.country\nWHERE p.independence IS NOT NULL AND p.independence > '1993-01-01' AND c.government = 'parliamentary';",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2880,
            "cost": 0.0005526
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT SUM(IIF(government = 'parliamentary democracy', 1, 0)) , CAST(SUM(IIF(government = 'parliamentary democracy', 1, 0)) AS REAL) * 100 / COUNT(*) FROM politics AS t1 WHERE STRFTIME('%Y', independence) >= '1993'"
    },
    {
        "sample_id": 8247,
        "pred_sql": "SELECT country.capital FROM country INNER JOIN economy ON country.code = economy.country WHERE economy.inflation < 2;",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2702,
            "cost": 0.0004539
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2"
    },
    {
        "sample_id": 8262,
        "pred_sql": "SELECT COUNT(*) FROM organization WHERE country IN (SELECT country FROM language WHERE name = 'Bosnian')",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2673,
            "cost": 0.00044505
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T2.Name) FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Bosnian'"
    },
    {
        "sample_id": 8274,
        "pred_sql": "SELECT c.name FROM country c JOIN (SELECT country1, COUNT(country2) AS neighbors_count FROM borders GROUP BY country1) AS b ON c.code = b.country1 ORDER BY b.neighbors_count DESC LIMIT 1;",
        "retrieved": [
            8244
        ],
        "token_usage": {
            "tokens": 2757,
            "cost": 0.0004886999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1"
    },
    {
        "sample_id": 8224,
        "pred_sql": "SELECT country.name, ethnicgroup.name, ethnicgroup.percentage FROM country JOIN ethnicgroup ON country.code = ethnicgroup.country WHERE ethnicgroup.percentage = (SELECT MAX(percentage) FROM ethnicgroup WHERE country = country.code)",
        "retrieved": [
            8406
        ],
        "token_usage": {
            "tokens": 2758,
            "cost": 0.00048479999999999997
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage"
    },
    {
        "sample_id": 8236,
        "pred_sql": "SELECT country.name, population.population, population.population_growth FROM country INNER JOIN population ON country.code = population.country WHERE population.population_growth < 0;",
        "retrieved": [
            8315
        ],
        "token_usage": {
            "tokens": 2743,
            "cost": 0.0004739999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T1.Population, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth < 0"
    },
    {
        "sample_id": 8464,
        "pred_sql": "SELECT abbreviation, name, established FROM organization WHERE city = 'Paris' ORDER BY established ASC LIMIT 1;",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2710,
            "cost": 0.00046365
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Abbreviation, Name, Established FROM organization WHERE City = 'Paris' ORDER BY Established ASC LIMIT 1"
    },
    {
        "sample_id": 8408,
        "pred_sql": "SELECT geo_river.province, river.name FROM geo_river INNER JOIN river ON geo_river.river = river.name GROUP BY river.name HAVING COUNT(DISTINCT geo_river.country) > 1;",
        "retrieved": [
            8342
        ],
        "token_usage": {
            "tokens": 2717,
            "cost": 0.00046965
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT River, GROUP_CONCAT(Province) FROM geo_river GROUP BY River HAVING COUNT(DISTINCT Country) > 1"
    },
    {
        "sample_id": 8505,
        "pred_sql": "SELECT country.name, politics.independence, country.government FROM country INNER JOIN politics ON country.code = politics.country WHERE country.government = 'parliamentary democracy' AND politics.independence BETWEEN '1950-01-01' AND '1999-12-31';",
        "retrieved": [
            8285
        ],
        "token_usage": {
            "tokens": 2796,
            "cost": 0.00050895
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT * FROM politics WHERE STRFTIME('%Y', Independence) BETWEEN '1950' AND '1999' AND Government = 'parliamentary democracy'"
    },
    {
        "sample_id": 8407,
        "pred_sql": "SELECT d.name FROM desert d LEFT JOIN geo_desert gd ON d.name = gd.desert GROUP BY d.name HAVING COUNT(gd.country) > 1;",
        "retrieved": [
            8364
        ],
        "token_usage": {
            "tokens": 2714,
            "cost": 0.0004728
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Desert FROM geo_desert GROUP BY Desert HAVING COUNT(DISTINCT Country) > 1"
    },
    {
        "sample_id": 8462,
        "pred_sql": "SELECT name FROM organization WHERE city = 'London'",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2652,
            "cost": 0.00043335
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Name FROM organization WHERE City = 'London'"
    },
    {
        "sample_id": 8331,
        "pred_sql": "SELECT name, height FROM mountain WHERE mountains = 'Himalaya' ORDER BY height DESC LIMIT 1;",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2743,
            "cost": 0.0004632
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Name, Height FROM mountain WHERE Mountains = 'Himalaya' ORDER BY Height DESC LIMIT 1"
    },
    {
        "sample_id": 8416,
        "pred_sql": "SELECT geo_river.river FROM geo_river INNER JOIN river ON geo_river.river = river.name WHERE river.river = 'Donau' AND river.length > 500 AND geo_river.country = 'Slovenia'",
        "retrieved": [
            8342
        ],
        "token_usage": {
            "tokens": 2801,
            "cost": 0.00051825
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.River FROM country AS T1 INNER JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Slovenia' AND T2.River IN ( SELECT NAME FROM river WHERE Length > 500 AND River = 'Donau' )"
    },
    {
        "sample_id": 8237,
        "pred_sql": "SELECT country.name, population.infant_mortality FROM country INNER JOIN population ON country.code = population.country WHERE country.area BETWEEN 500000 AND 1000000;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2791,
            "cost": 0.00048795
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Area BETWEEN 500000 AND 1000000"
    },
    {
        "sample_id": 8415,
        "pred_sql": "SELECT DISTINCT c.name \nFROM country c \nJOIN city ci ON c.code = ci.country \nJOIN ismember im ON c.code = im.country \nWHERE ci.population BETWEEN 50000 AND 300000 \nAND im.organization = 'EBRD' \nAND im.type = 'member' \nAND c.code IN (SELECT country FROM organization WHERE established BETWEEN '1991-03-01' AND '1991-04-30')",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2927,
            "cost": 0.0005618999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Country FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country INNER JOIN city AS T4 ON T4.Country = T3.Country WHERE T3.Abbreviation = 'EBRD' AND T4.Population BETWEEN 50000 AND 300000 AND T3.Established BETWEEN '1991-01-31' AND '1991-04-30'"
    },
    {
        "sample_id": 8333,
        "pred_sql": "SELECT mountain.name FROM mountain WHERE height BETWEEN 2000 AND 4000;",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2723,
            "cost": 0.0004494
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Name FROM mountain WHERE Type = 'volcano' AND Height BETWEEN 2000 AND 4000"
    },
    {
        "sample_id": 8313,
        "pred_sql": "SELECT country.name FROM country INNER JOIN encompasses ON country.code = encompasses.country INNER JOIN continent ON encompasses.continent = continent.name INNER JOIN population ON country.code = population.country WHERE continent.name = 'Europe' AND population.population_growth > 3;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2810,
            "cost": 0.0005002499999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Country FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Population_Growth > 0.03"
    },
    {
        "sample_id": 8433,
        "pred_sql": "SELECT (SELECT population FROM country WHERE name = 'United Kingdom') - (SELECT population FROM country WHERE name = 'Italy') AS population_gap;",
        "retrieved": [
            8294
        ],
        "token_usage": {
            "tokens": 2729,
            "cost": 0.00045614999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT MAX(Population) - MIN(Population) FROM country WHERE Name = 'United Kingdom' OR Name = 'Italy'"
    },
    {
        "sample_id": 8390,
        "pred_sql": "SELECT COUNT(*) FROM city WHERE country = (SELECT code FROM country WHERE name = 'Japan')",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2727,
            "cost": 0.00046125
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Japan'"
    },
    {
        "sample_id": 8402,
        "pred_sql": "SELECT economy.gdp / country.population AS gdp_per_capita FROM country INNER JOIN economy ON country.code = economy.country WHERE country.name = 'Switzerland'",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2703,
            "cost": 0.00045765
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.GDP / T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'"
    },
    {
        "sample_id": 8306,
        "pred_sql": "SELECT COUNT(DISTINCT T1.code) FROM country AS T1 INNER JOIN economy AS T2 ON T1.code = T2.country INNER JOIN geo_mountain AS T3 ON T1.code = T3.country WHERE T2.gdp > 1000000 AND T3.height > 1000;",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2796,
            "cost": 0.00050535
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T1.Code INNER JOIN mountain AS T4 ON T4.Name = T2.Mountain WHERE T3.GDP > 1000000 AND T4.Height > 1000"
    },
    {
        "sample_id": 8382,
        "pred_sql": "SELECT sea.name, sea.depth FROM sea INNER JOIN geo_mountain ON sea.country = geo_mountain.country WHERE geo_mountain.mountain = 'Kerinci'",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2742,
            "cost": 0.00046214999999999993
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T4.Sea) FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island INNER JOIN islandIn AS T4 ON T4.Island = T3.Name WHERE T1.Name = 'Kerinci'"
    },
    {
        "sample_id": 8371,
        "pred_sql": "SELECT SUM(country.population * (ethnicgroup.percentage / 100)) AS total_afro_asian_population\nFROM ethnicgroup\nINNER JOIN country ON ethnicgroup.country = country.code\nWHERE (ethnicgroup.name = 'Afro' OR ethnicgroup.name = 'Asian')\nAND country.code IN (\n    SELECT code\n    FROM country\n    WHERE continent = 'Asia'\n    AND government = 'monarchy'\n    ORDER BY population DESC\n    LIMIT 1\n)",
        "retrieved": [
            8294
        ],
        "token_usage": {
            "tokens": 2845,
            "cost": 0.0005216999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T5.Percentage * T6.Population FROM ethnicGroup AS T5 INNER JOIN country AS T6 ON T5.Country = T6.Code WHERE Country = ( SELECT T3.Code FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN politics AS T4 ON T4.Country = T3.Code WHERE T4.Government = 'monarchy' AND T1.Name = 'Asia' ORDER BY T3.Population DESC LIMIT 1 ) AND T5.Name = 'Afro-Asian'"
    },
    {
        "sample_id": 8365,
        "pred_sql": "SELECT COUNT(*) FROM geo_lake WHERE country = (SELECT code FROM country WHERE population = (SELECT population FROM country WHERE code IN (SELECT country FROM politics WHERE government = 'republic') ORDER BY population DESC LIMIT 1 OFFSET 3))",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2782,
            "cost": 0.00048975
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(*) FROM geo_lake WHERE Country = ( SELECT T4.Code FROM ( SELECT T2.Code, T2.Population FROM encompasses AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN politics AS T3 ON T1.Country = T3.Country WHERE T1.Continent = 'Africa' AND T1.Percentage = 100 AND T3.Government = 'republic' ORDER BY Population DESC LIMIT 4 ) AS T4 ORDER BY population ASC LIMIT 1 )"
    },
    {
        "sample_id": 8451,
        "pred_sql": "SELECT organization.name FROM ismember INNER JOIN organization ON ismember.country = organization.country WHERE ismember.type = 'associated';",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2716,
            "cost": 0.0004686
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT NAME FROM organization WHERE country IN ( SELECT country FROM politics WHERE dependent != '' )"
    },
    {
        "sample_id": 8424,
        "pred_sql": "SELECT sea.name FROM sea WHERE sea.name IN (SELECT mergeswith.sea1 FROM mergeswith WHERE mergeswith.sea2 = (SELECT name FROM sea ORDER BY depth DESC LIMIT 1))",
        "retrieved": [
            8291
        ],
        "token_usage": {
            "tokens": 2649,
            "cost": 0.000441
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Sea2 FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = ( SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1 )"
    },
    {
        "sample_id": 8229,
        "pred_sql": "SELECT politics.independence FROM country INNER JOIN politics AS T2 ON country.code = T2.country WHERE country.name = 'Bulgaria'",
        "retrieved": [
            8285
        ],
        "token_usage": {
            "tokens": 2711,
            "cost": 0.00046604999999999997
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'"
    },
    {
        "sample_id": 8263,
        "pred_sql": "SELECT MAX(population.infant_mortality) FROM country INNER JOIN economy ON country.code = economy.country INNER JOIN population ON population.country = country.code WHERE economy.inflation < 3;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2811,
            "cost": 0.0005012999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT MAX(T2.Infant_Mortality) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3"
    },
    {
        "sample_id": 8475,
        "pred_sql": "SELECT organization.name, COUNT(ismember.country) AS member_count FROM organization JOIN ismember ON organization.country = ismember.country GROUP BY organization.name ORDER BY member_count DESC LIMIT 1;",
        "retrieved": [
            8406
        ],
        "token_usage": {
            "tokens": 2730,
            "cost": 0.00047519999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1"
    },
    {
        "sample_id": 8491,
        "pred_sql": "SELECT name FROM organization WHERE country = 'SA' ORDER BY established DESC LIMIT 1;",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2702,
            "cost": 0.00046199999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Saudi Arabia' ORDER BY T1.Established DESC LIMIT 1"
    },
    {
        "sample_id": 8473,
        "pred_sql": "SELECT country, COUNT(organization) AS membership_count FROM ismember GROUP BY country ORDER BY membership_count ASC LIMIT 1;",
        "retrieved": [
            8261
        ],
        "token_usage": {
            "tokens": 2703,
            "cost": 0.0004652999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT country FROM organization WHERE country IN ( SELECT Code FROM country ) GROUP BY country ORDER BY COUNT(NAME) LIMIT 1"
    },
    {
        "sample_id": 8360,
        "pred_sql": "SELECT politics.government FROM country INNER JOIN economy ON country.code = economy.country INNER JOIN politics ON politics.country = economy.country WHERE NOT economy.inflation IS NULL ORDER BY economy.inflation DESC LIMIT 1;",
        "retrieved": [
            8501
        ],
        "token_usage": {
            "tokens": 2794,
            "cost": 0.00050055
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Government FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country ORDER BY T2.Inflation DESC LIMIT 1"
    },
    {
        "sample_id": 8339,
        "pred_sql": "SELECT river.name, mountain.name, mountain.height, mountain.latitude, mountain.longitude \nFROM river \nINNER JOIN located ON located.river = river.name \nINNER JOIN geo_mountain ON geo_mountain.country = located.country \nINNER JOIN mountain ON mountain.name = geo_mountain.mountain \nWHERE located.city = 'Lorraine'",
        "retrieved": [
            8338
        ],
        "token_usage": {
            "tokens": 2806,
            "cost": 0.0004982999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.SourceLongitude, T1.SourceLatitude, T1.SourceAltitude FROM river AS T1 INNER JOIN geo_river AS T2 ON T2.River = T1.Name WHERE T2.Province = 'Lorraine'"
    },
    {
        "sample_id": 8487,
        "pred_sql": "SELECT country.name, country.population FROM country JOIN ethnicgroup ON country.code = ethnicgroup.country WHERE ethnicgroup.name = 'Chinese' AND ethnicgroup.percentage > 70;",
        "retrieved": [
            8406
        ],
        "token_usage": {
            "tokens": 2754,
            "cost": 0.0004851
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name, T1.Population * T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Chinese' AND T2.Percentage > 70"
    },
    {
        "sample_id": 8470,
        "pred_sql": "SELECT ismember.country, ismember.type FROM ismember WHERE ismember.organization = 'Islamic Development Bank'",
        "retrieved": [
            8271
        ],
        "token_usage": {
            "tokens": 2695,
            "cost": 0.00045374999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Country, T2.Type FROM organization AS T1 INNER JOIN isMember AS T2 ON T1.Abbreviation = T2.Organization INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Name = 'Islamic Development Bank'"
    },
    {
        "sample_id": 8477,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM organization WHERE country = 'USA')) AS percentage FROM organization WHERE country = 'USA' AND city = 'Washington';",
        "retrieved": [
            8249
        ],
        "token_usage": {
            "tokens": 2751,
            "cost": 0.00048689999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.City = 'Washington' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.City) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T2.Country = 'USA'"
    },
    {
        "sample_id": 8288,
        "pred_sql": "SELECT country.capital, country.province FROM country WHERE country.code = (SELECT ethnicgroup.country FROM ethnicgroup WHERE ethnicgroup.name = 'Malay' ORDER BY ethnicgroup.percentage DESC LIMIT 1)",
        "retrieved": [
            8429
        ],
        "token_usage": {
            "tokens": 2660,
            "cost": 0.00045434999999999996
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Malay' ORDER BY T2.Percentage DESC LIMIT 1"
    },
    {
        "sample_id": 8242,
        "pred_sql": "SELECT country.name FROM country JOIN ethnicgroup ON country.code = ethnicgroup.country WHERE ethnicgroup.name = 'Albanian' ORDER BY ethnicgroup.percentage DESC LIMIT 1;",
        "retrieved": [
            8406
        ],
        "token_usage": {
            "tokens": 2741,
            "cost": 0.00047909999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1"
    },
    {
        "sample_id": 8452,
        "pred_sql": "SELECT DISTINCT country.name FROM country INNER JOIN geo_desert ON country.code = geo_desert.country WHERE geo_desert.desert = 'Kalahari'",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2752,
            "cost": 0.00046904999999999994
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T3.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Kalahari'"
    },
    {
        "sample_id": 8471,
        "pred_sql": "SELECT country.area, country.population FROM country INNER JOIN organization ON country.code = organization.country WHERE organization.name = 'Asia Pacific Economic Cooperation';",
        "retrieved": [
            8249
        ],
        "token_usage": {
            "tokens": 2690,
            "cost": 0.00045299999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T2.Name, T2.Population FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Asia Pacific Economic Cooperation'"
    },
    {
        "sample_id": 8446,
        "pred_sql": "SELECT country.name, economy.gdp, economy.agriculture FROM country INNER JOIN economy ON country.code = economy.country ORDER BY economy.gdp DESC LIMIT 3;",
        "retrieved": [
            8249
        ],
        "token_usage": {
            "tokens": 2719,
            "cost": 0.0004694999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC, T2.Agriculture ASC LIMIT 1"
    },
    {
        "sample_id": 8405,
        "pred_sql": "SELECT CAST(c.population AS FLOAT) / CAST(c.area AS FLOAT) AS population_density FROM country AS c WHERE c.code = (SELECT country FROM city WHERE name = 'Hanoi')",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2712,
            "cost": 0.00045225
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Hanoi'"
    },
    {
        "sample_id": 8434,
        "pred_sql": "SELECT city.name, city.province FROM city INNER JOIN organization ON city.country = organization.country WHERE organization.name = 'European Bank for Reconstruction and Development'",
        "retrieved": [
            8324
        ],
        "token_usage": {
            "tokens": 2719,
            "cost": 0.00045869999999999993
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development'"
    },
    {
        "sample_id": 8393,
        "pred_sql": "SELECT country.name FROM country INNER JOIN city ON country.code = city.country WHERE city.name = 'Grozny';",
        "retrieved": [
            8295
        ],
        "token_usage": {
            "tokens": 2720,
            "cost": 0.0004538999999999999
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Grozny'"
    },
    {
        "sample_id": 8265,
        "pred_sql": "SELECT country.name, (CAST(economy.gdp AS REAL) / CAST(country.population AS REAL)) AS gdp_per_capita FROM country INNER JOIN economy ON country.code = economy.country ORDER BY gdp_per_capita DESC LIMIT 1;",
        "retrieved": [
            8317
        ],
        "token_usage": {
            "tokens": 2742,
            "cost": 0.00048015
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP / T1.Population DESC LIMIT 1"
    },
    {
        "sample_id": 8301,
        "pred_sql": "SELECT COUNT(geo_desert.desert) AS desert_count, country.name \nFROM country \nJOIN geo_desert ON country.code = geo_desert.country \nJOIN politics ON country.code = politics.country \nWHERE politics.independence IS NOT NULL \nAND country.government = 'republic' \nGROUP BY country.name \nORDER BY desert_count DESC \nLIMIT 1;",
        "retrieved": [
            8364
        ],
        "token_usage": {
            "tokens": 2772,
            "cost": 0.00050445
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT COUNT(T3.Desert) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_desert AS T3 ON T3.Country = T2.Country WHERE T2.Government = 'republic'"
    },
    {
        "sample_id": 8380,
        "pred_sql": "SELECT country.name FROM country INNER JOIN economy ON country.code = economy.country WHERE country.population > 1000000000 ORDER BY economy.gdp ASC LIMIT 1;",
        "retrieved": [
            8389
        ],
        "token_usage": {
            "tokens": 2741,
            "cost": 0.00047279999999999995
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population > 1000000000 ORDER BY T2.GDP ASC LIMIT 1"
    },
    {
        "sample_id": 8292,
        "pred_sql": "SELECT country.area FROM country INNER JOIN politics ON country.code = politics.country WHERE politics.independence = '1921-03-13'",
        "retrieved": [
            8285
        ],
        "token_usage": {
            "tokens": 2700,
            "cost": 0.0004554
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Area FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'"
    },
    {
        "sample_id": 8330,
        "pred_sql": "SELECT lake.name, located.city FROM lake INNER JOIN located ON lake.name = located.lake WHERE located.province = 'Albania';",
        "retrieved": [
            8324
        ],
        "token_usage": {
            "tokens": 2722,
            "cost": 0.00046545
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT Lake, City FROM located WHERE Province = 'Albania' AND Lake IS NOT NULL"
    },
    {
        "sample_id": 8226,
        "pred_sql": "SELECT p.infant_mortality FROM population p INNER JOIN country c ON p.country = c.code INNER JOIN ethnicgroup e ON e.country = c.code WHERE e.name = 'Amerindian' ORDER BY e.percentage ASC LIMIT 1;",
        "retrieved": [
            8314
        ],
        "token_usage": {
            "tokens": 2803,
            "cost": 0.0004992
        },
        "db_id": "mondial_geo",
        "gold_sql": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1"
    },
    {
        "sample_id": 768,
        "pred_sql": "SELECT movie.\"mpaa rating\", movie.title FROM movie INNER JOIN characters ON movie.movieid = characters.movieid INNER JOIN actor ON actor.actorid = characters.actorid WHERE actor.name = 'Leonardo DiCaprio' ORDER BY movie.budget DESC LIMIT 1;",
        "retrieved": [
            765
        ],
        "token_usage": {
            "tokens": 1187,
            "cost": 0.00026084999999999997
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.\"MPAA Rating\", T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1"
    },
    {
        "sample_id": 760,
        "pred_sql": "SELECT COUNT(*) FROM movie WHERE \"mpaa rating\" = 'PG' AND strftime('%Y-%m', \"release date\") = '1990-06';",
        "retrieved": [
            736
        ],
        "token_usage": {
            "tokens": 1117,
            "cost": 0.00023909999999999996
        },
        "db_id": "movie",
        "gold_sql": "SELECT COUNT(*) FROM movie WHERE \"MPAA Rating\" = 'PG' AND \"Release Date\" LIKE '1990-06%'"
    },
    {
        "sample_id": 734,
        "pred_sql": "SELECT movie.title FROM movie INNER JOIN characters ON movie.movieid = characters.movieid WHERE characters.\"character name\" = 'Dr. Archibald ''Moonlight'' Graham'",
        "retrieved": [
            754
        ],
        "token_usage": {
            "tokens": 1064,
            "cost": 0.00021629999999999997
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.\"Character Name\" = 'Dr. Archibald ''Moonlight'' Graham'"
    },
    {
        "sample_id": 746,
        "pred_sql": "SELECT characters.\"character name\" FROM movie INNER JOIN characters ON movie.movieid = characters.movieid WHERE movie.genre = 'thriller' ORDER BY movie.rating DESC LIMIT 1;",
        "retrieved": [
            754
        ],
        "token_usage": {
            "tokens": 1075,
            "cost": 0.00022155
        },
        "db_id": "movie",
        "gold_sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1"
    },
    {
        "sample_id": 757,
        "pred_sql": "SELECT (COUNT(DISTINCT a.actorid) * 100.0 / (SELECT COUNT(*) FROM actor WHERE birth country = 'USA')) AS percentage_usa_actors FROM actor a INNER JOIN characters c ON a.actorid = c.actorid INNER JOIN movie m ON c.movieid = m.movieid WHERE m.title = 'Mrs. Doubtfire';",
        "retrieved": [
            756
        ],
        "token_usage": {
            "tokens": 1141,
            "cost": 0.00025035
        },
        "db_id": "movie",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.\"Birth Country\" = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.\"Birth Country\") FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'"
    },
    {
        "sample_id": 735,
        "pred_sql": "SELECT movie.title FROM characters INNER JOIN actor ON characters.actorid = actor.actorid INNER JOIN movie ON characters.movieid = movie.movieid WHERE actor.name = 'Tom Cruise'",
        "retrieved": [
            747
        ],
        "token_usage": {
            "tokens": 1116,
            "cost": 0.00023265
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'"
    },
    {
        "sample_id": 750,
        "pred_sql": "SELECT actor.\"date of birth\" FROM actor INNER JOIN characters ON actor.actorid = characters.actorid WHERE characters.\"character name\" = 'Sully'",
        "retrieved": [
            756
        ],
        "token_usage": {
            "tokens": 1059,
            "cost": 0.00020609999999999997
        },
        "db_id": "movie",
        "gold_sql": "SELECT T2.\"Date of Birth\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Sully'"
    },
    {
        "sample_id": 730,
        "pred_sql": "SELECT actor.name FROM characters INNER JOIN actor AS T2 ON characters.actorid = T2.actorid INNER JOIN movie AS T3 ON T3.movieid = characters.movieid WHERE T3.title = 'Look Who's Talking' ORDER BY characters.screentime",
        "retrieved": [
            747
        ],
        "token_usage": {
            "tokens": 1180,
            "cost": 0.00026924999999999996
        },
        "db_id": "movie",
        "gold_sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'"
    },
    {
        "sample_id": 764,
        "pred_sql": "SELECT actor.\"height (inches)\", actor.networth FROM movie INNER JOIN characters ON movie.movieid = characters.movieid INNER JOIN actor ON actor.actorid = characters.actorid WHERE movie.title = 'Three Men and a Little Lady'",
        "retrieved": [
            766
        ],
        "token_usage": {
            "tokens": 1097,
            "cost": 0.00021674999999999998
        },
        "db_id": "movie",
        "gold_sql": "SELECT T3.\"Height (Inches)\", T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'"
    },
    {
        "sample_id": 770,
        "pred_sql": "SELECT movie.runtime FROM movie INNER JOIN characters ON movie.movieid = characters.movieid INNER JOIN actor ON actor.actorid = characters.actorid WHERE actor.ethnicity = 'African-American' AND actor.date of birth = '1954-12-28'",
        "retrieved": [
            773
        ],
        "token_usage": {
            "tokens": 1148,
            "cost": 0.00025005
        },
        "db_id": "movie",
        "gold_sql": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Ethnicity = 'African American' AND T3.\"Date of Birth\" = '1954-12-28'"
    },
    {
        "sample_id": 9203,
        "pred_sql": "SELECT film.title FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'Emily' AND actor.last_name = 'Dee'",
        "retrieved": [
            9101
        ],
        "token_usage": {
            "tokens": 2207,
            "cost": 0.00040485
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Emily' AND T1.last_name = 'Dee'"
    },
    {
        "sample_id": 9300,
        "pred_sql": "SELECT film.rating FROM film INNER JOIN film_category ON film.film_id = film_category.film_id INNER JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Behind the Scenes';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2265,
            "cost": 0.0004014
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT rating FROM film WHERE special_features LIKE '%Behind the Scenes%'"
    },
    {
        "sample_id": 9354,
        "pred_sql": "SELECT (COUNT(CASE WHEN c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS horror_percentage\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE f.language_id = (SELECT language_id FROM language WHERE name = 'English');",
        "retrieved": [
            9101
        ],
        "token_usage": {
            "tokens": 2239,
            "cost": 0.0004226999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'"
    },
    {
        "sample_id": 9201,
        "pred_sql": "SELECT title, description FROM film_text WHERE film_id = '996';",
        "retrieved": [
            9210
        ],
        "token_usage": {
            "tokens": 2214,
            "cost": 0.0003726
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT description, title FROM film_text WHERE film_id = 996"
    },
    {
        "sample_id": 9355,
        "pred_sql": "SELECT COUNT(film.film_id) FROM film INNER JOIN film_category AS T2 ON film.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE film.rental_duration < 4 AND T3.name = 'Adult'",
        "retrieved": [
            9182
        ],
        "token_usage": {
            "tokens": 2282,
            "cost": 0.00041834999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND rental_duration < 4"
    },
    {
        "sample_id": 9118,
        "pred_sql": "SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.length DESC LIMIT 1;",
        "retrieved": [
            9256
        ],
        "token_usage": {
            "tokens": 2225,
            "cost": 0.00042014999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1"
    },
    {
        "sample_id": 9386,
        "pred_sql": "SELECT film.title FROM actor INNER JOIN film_actor AS T2 ON actor.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE actor.first_name = 'Burt' AND actor.last_name = 'Dukakis'",
        "retrieved": [
            9266
        ],
        "token_usage": {
            "tokens": 2240,
            "cost": 0.00040754999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'BURT' AND T2.last_name = 'DUKAKIS'"
    },
    {
        "sample_id": 9419,
        "pred_sql": "SELECT SUM(payment.amount) AS total_spent FROM payment INNER JOIN rental ON payment.rental_id = rental.rental_id INNER JOIN customer ON rental.customer_id = customer.customer_id INNER JOIN address ON customer.address_id = address.address_id INNER JOIN city ON address.city_id = city.city_id INNER JOIN country ON city.country_id = country.country_id WHERE country.country = 'Italy';",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2399,
            "cost": 0.00045794999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT SUM(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'"
    },
    {
        "sample_id": 9219,
        "pred_sql": "SELECT SUM(payment.amount) FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Diane' AND customer.last_name = 'Collins'",
        "retrieved": [
            9372
        ],
        "token_usage": {
            "tokens": 2215,
            "cost": 0.00039075
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT SUM(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'"
    },
    {
        "sample_id": 9309,
        "pred_sql": "SELECT film.title, COUNT(rental.rental_id) AS rental_count FROM rental INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id INNER JOIN film ON inventory.film_id = film.film_id GROUP BY film.film_id ORDER BY rental_count DESC LIMIT 5;",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2330,
            "cost": 0.00043545
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.title FROM ( SELECT T3.title, COUNT(T2.inventory_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 5"
    },
    {
        "sample_id": 9351,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'BIRD INDEPENDENCE'",
        "retrieved": [
            9266
        ],
        "token_usage": {
            "tokens": 2280,
            "cost": 0.00042929999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T1.title = 'BIRD INDEPENDENCE'"
    },
    {
        "sample_id": 9243,
        "pred_sql": "SELECT (COUNT(CASE WHEN c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS horror_percentage FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id;",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2257,
            "cost": 0.00043845
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.name = 'horror', 1, 0)) AS REAL) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 9287,
        "pred_sql": "SELECT category.name FROM film INNER JOIN film_category ON film.film_id = film_category.film_id INNER JOIN category ON film_category.category_id = category.category_id WHERE film.title = 'Agent Truman'",
        "retrieved": [
            9206
        ],
        "token_usage": {
            "tokens": 2260,
            "cost": 0.00040245
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'AGENT TRUMAN'"
    },
    {
        "sample_id": 9170,
        "pred_sql": "SELECT title FROM film WHERE length > 180",
        "retrieved": [
            9256
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.00035925
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE length > 180"
    },
    {
        "sample_id": 9200,
        "pred_sql": "SELECT (COUNT(CASE WHEN active = '0' THEN 1 END) * 100.0 / COUNT(*)) AS inactive_percentage FROM customer;",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2271,
            "cost": 0.0003838499999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(active = 0, 1, 0)) AS REAL) * 100 / COUNT(customer_id) FROM customer"
    },
    {
        "sample_id": 9123,
        "pred_sql": "SELECT film.title FROM customer INNER JOIN rental AS T2 ON customer.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE customer.first_name = 'RUTH' AND customer.last_name = 'MARTINEZ' ORDER BY film.replacement_cost",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2353,
            "cost": 0.0004452
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'"
    },
    {
        "sample_id": 9215,
        "pred_sql": "SELECT (COUNT(CASE WHEN c.address_id IN (SELECT a.address_id FROM address a JOIN city ci ON a.city_id = ci.city_id WHERE ci.country_id = (SELECT country_id FROM country WHERE country = 'India')) THEN 1 END) * 100.0 / COUNT(*)) AS percentage_customers_in_india FROM customer c;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2108,
            "cost": 0.00039045
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id"
    },
    {
        "sample_id": 9135,
        "pred_sql": "SELECT AVG(film.length) AS average_duration FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'PENELOPE' AND actor.last_name = 'GUINESS';",
        "retrieved": [
            9256
        ],
        "token_usage": {
            "tokens": 2213,
            "cost": 0.0004147499999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT AVG(T3.length) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'"
    },
    {
        "sample_id": 9204,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'CHOCOLATE DUCK'",
        "retrieved": [
            9116
        ],
        "token_usage": {
            "tokens": 2272,
            "cost": 0.00041189999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = 'CHOCOLATE DUCK'"
    },
    {
        "sample_id": 9174,
        "pred_sql": "SELECT COUNT(*) FROM rental WHERE return_date = '2005-05-27'",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2289,
            "cost": 0.0004090499999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'"
    },
    {
        "sample_id": 9330,
        "pred_sql": "SELECT (SUM(payment.amount) / (SELECT SUM(amount) FROM payment) * 100) AS percentage FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'MARGARET' AND customer.last_name = 'MOORE';",
        "retrieved": [
            9372
        ],
        "token_usage": {
            "tokens": 2292,
            "cost": 0.00043425
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE', T1.amount, 0)) AS REAL) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id"
    },
    {
        "sample_id": 9269,
        "pred_sql": "SELECT COUNT(*) AS num_customers FROM customer WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM rental INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id WHERE inventory.store_id = (SELECT store_id FROM store WHERE manager_staff_id = (SELECT staff_id FROM staff WHERE first_name = 'Mike')))",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2310,
            "cost": 0.00042254999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id WHERE T3.first_name != 'Mike'"
    },
    {
        "sample_id": 9137,
        "pred_sql": "SELECT COUNT(*) AS inactive_customer_count FROM customer WHERE active = 0;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2059,
            "cost": 0.00036284999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 0"
    },
    {
        "sample_id": 9420,
        "pred_sql": "SELECT COUNT(payment.payment_id) FROM payment INNER JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.first_name = 'Mary' AND customer.last_name = 'Smith' AND payment.amount > 4.99;",
        "retrieved": [
            9415
        ],
        "token_usage": {
            "tokens": 2191,
            "cost": 0.00038805
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND T1.amount > 4.99"
    },
    {
        "sample_id": 9211,
        "pred_sql": "SELECT inventory.inventory_id, actor.first_name, actor.last_name \nFROM film \nINNER JOIN film_actor ON film.film_id = film_actor.film_id \nINNER JOIN actor ON film_actor.actor_id = actor.actor_id \nINNER JOIN inventory ON film.film_id = inventory.film_id \nWHERE film.title = 'STREETCAR INTENTIONS';",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2342,
            "cost": 0.0004404
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.inventory_id, T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T2.film_id = T4.film_id WHERE T3.title = 'STREETCAR INTENTIONS'"
    },
    {
        "sample_id": 9105,
        "pred_sql": "SELECT staff.email FROM staff WHERE staff.first_name = 'Jon' AND staff.last_name = 'Stephens' AND staff.active = 1;",
        "retrieved": [
            9106
        ],
        "token_usage": {
            "tokens": 2174,
            "cost": 0.00039045
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'"
    },
    {
        "sample_id": 9154,
        "pred_sql": "SELECT COUNT(customer.customer_id) FROM city INNER JOIN address AS T2 ON city.city_id = T2.city_id INNER JOIN customer AS T3 ON T2.address_id = T3.address_id WHERE city.city = 'Woodridge'",
        "retrieved": [
            9186
        ],
        "token_usage": {
            "tokens": 2178,
            "cost": 0.0003834
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.address_id) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = 'Woodridge'"
    },
    {
        "sample_id": 9285,
        "pred_sql": "SELECT city.city FROM address JOIN city ON address.city_id = city.city_id WHERE address.address = '1623 Kingstown Drive';",
        "retrieved": [],
        "token_usage": {
            "tokens": 2101,
            "cost": 0.0003849
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.city FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id WHERE T2.address = '1623 Kingstown Drive'"
    },
    {
        "sample_id": 9359,
        "pred_sql": "SELECT COUNT(payment.payment_id) AS payment_count \nFROM payment \nJOIN rental ON payment.rental_id = rental.rental_id \nJOIN customer ON rental.customer_id = customer.customer_id \nWHERE customer.first_name = 'Susan' AND customer.last_name = 'Wilson' \nAND payment.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 22:08:29';",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2308,
            "cost": 0.0004532999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'"
    },
    {
        "sample_id": 9336,
        "pred_sql": "SELECT title FROM film WHERE rating = 'G'",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2124,
            "cost": 0.00035639999999999994
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE rating = 'G'"
    },
    {
        "sample_id": 9179,
        "pred_sql": "SELECT film.title FROM rental INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id INNER JOIN film ON inventory.film_id = film.film_id GROUP BY film.title ORDER BY COUNT(rental.rental_id) DESC LIMIT 1;",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2302,
            "cost": 0.00041864999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 9346,
        "pred_sql": "SELECT customer.first_name FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id WHERE rental.staff_id = 1;",
        "retrieved": [
            9324
        ],
        "token_usage": {
            "tokens": 2207,
            "cost": 0.00039719999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 1"
    },
    {
        "sample_id": 9319,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id ORDER BY film.rental_rate DESC LIMIT 1;",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2321,
            "cost": 0.0004116
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id ORDER BY T3.rental_rate DESC LIMIT 1"
    },
    {
        "sample_id": 9293,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ACADEMY DINOSAUR'",
        "retrieved": [
            9116
        ],
        "token_usage": {
            "tokens": 2259,
            "cost": 0.00040589999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'"
    },
    {
        "sample_id": 9252,
        "pred_sql": "SELECT COUNT(DISTINCT customer_id) * 100.0 / (SELECT COUNT(*) FROM customer WHERE store_id = '1') AS percentage_customers_paid_above_average\nFROM payment\nWHERE amount > (SELECT AVG(amount) FROM payment INNER JOIN rental ON payment.rental_id = rental.rental_id INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id WHERE inventory.store_id = '1');",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2460,
            "cost": 0.0004927499999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT CAST(( SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount > ( SELECT AVG(amount) FROM payment ) ) AS REAL) * 100 / ( SELECT COUNT(customer_id) FROM customer )"
    },
    {
        "sample_id": 9326,
        "pred_sql": "SELECT actor.first_name, actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.title = 'ANONYMOUS HUMAN';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2288,
            "cost": 0.0004160999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T3.title = 'ANONYMOUS HUMAN'"
    },
    {
        "sample_id": 9409,
        "pred_sql": "SELECT COUNT(customer_id) AS active_customers_count FROM customer WHERE store_id = '1' AND active = '1';",
        "retrieved": [
            9106
        ],
        "token_usage": {
            "tokens": 2182,
            "cost": 0.00039255
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1 AND store_id = 1"
    },
    {
        "sample_id": 9208,
        "pred_sql": "SELECT language.name, (film.rental_rate / film.rental_duration) AS rental_cost_per_day FROM film INNER JOIN language ON film.language_id = language.language_id WHERE film.title = 'Untouchables Sunrise';",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2316,
            "cost": 0.0004068
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.name, T1.replacement_cost / T1.rental_duration AS cost FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'"
    },
    {
        "sample_id": 9228,
        "pred_sql": "SELECT COUNT(film.film_id) FROM film JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE film.length = 113 AND (actor.first_name = 'Kirk' AND actor.last_name = 'Jovovich')",
        "retrieved": [
            9256
        ],
        "token_usage": {
            "tokens": 2220,
            "cost": 0.00041625
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length = 113 AND T1.first_name = 'Kirk' AND T1.last_name = 'Jovovich'"
    },
    {
        "sample_id": 9338,
        "pred_sql": "SELECT film.title, film.last_update FROM film WHERE film.release_year = 2006 AND film.language_id = (SELECT language_id FROM language WHERE name = 'English')",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2203,
            "cost": 0.00040199999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT DISTINCT T1.last_update FROM film AS T1 INNER JOIN \"language\" AS T2 ON T1.language_id = T2.language_id WHERE T2.\"name\" = 'English' AND T1.release_year = 2006"
    },
    {
        "sample_id": 9149,
        "pred_sql": "SELECT COUNT(DISTINCT T3.film_id) AS film_count FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Daryl' AND T1.last_name = 'Wahlberg';",
        "retrieved": [
            9206
        ],
        "token_usage": {
            "tokens": 2307,
            "cost": 0.00042974999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'DARYL' AND T2.last_name = 'WAHLBERG'"
    },
    {
        "sample_id": 9286,
        "pred_sql": "SELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Algeria') LIMIT 3;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2046,
            "cost": 0.00035415
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'"
    },
    {
        "sample_id": 9188,
        "pred_sql": "SELECT customer.first_name, customer.last_name FROM address INNER JOIN city AS T2 ON address.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON address.address_id = T4.address_id WHERE T3.country = 'India'",
        "retrieved": [
            9412
        ],
        "token_usage": {
            "tokens": 2249,
            "cost": 0.00040934999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.first_name, T4.last_name FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id WHERE T1.country = 'India'"
    },
    {
        "sample_id": 9223,
        "pred_sql": "SELECT actor.last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'",
        "retrieved": [
            9266
        ],
        "token_usage": {
            "tokens": 2314,
            "cost": 0.00043979999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'"
    },
    {
        "sample_id": 9103,
        "pred_sql": "SELECT COUNT(*) FROM film WHERE rental_rate = 2.99 AND special_features LIKE '%Deleted Scenes%'",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2192,
            "cost": 0.00039359999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 2.99 AND special_features = 'Deleted Scenes'"
    },
    {
        "sample_id": 9322,
        "pred_sql": "SELECT address.address, address.postal_code FROM customer INNER JOIN address ON customer.address_id = address.address_id WHERE customer.first_name = 'SUSAN' AND address.postal_code = '77948';",
        "retrieved": [
            9324
        ],
        "token_usage": {
            "tokens": 2211,
            "cost": 0.00039869999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'SUSAN' AND T1.postal_code = 77948"
    },
    {
        "sample_id": 9389,
        "pred_sql": "SELECT film.title FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE actor.first_name = 'Karl' AND actor.last_name = 'Berr' AND film.rating = 'PG';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2299,
            "cost": 0.00042044999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'KARL' AND T1.last_name = 'BERRY' AND T3.rating = 'PG'"
    },
    {
        "sample_id": 9378,
        "pred_sql": "SELECT title FROM film ORDER BY length DESC, title ASC;",
        "retrieved": [
            9101
        ],
        "token_usage": {
            "tokens": 2177,
            "cost": 0.00038459999999999997
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )"
    },
    {
        "sample_id": 9271,
        "pred_sql": "SELECT customer.first_name, customer.last_name FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id WHERE rental.return_date IS NULL GROUP BY customer.customer_id ORDER BY COUNT(rental.rental_id) DESC LIMIT 1;",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2341,
            "cost": 0.00042089999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.first_name FROM ( SELECT T2.first_name, COUNT(T1.rental_date) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 9159,
        "pred_sql": "SELECT category.name FROM film_category INNER JOIN category ON film_category.category_id = category.category_id INNER JOIN film ON film_category.film_id = film.film_id WHERE film.title = 'Working Microcosmos'",
        "retrieved": [
            9120
        ],
        "token_usage": {
            "tokens": 2160,
            "cost": 0.00037305
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'WORKING MICROCOSMOS'"
    },
    {
        "sample_id": 9199,
        "pred_sql": "SELECT staff.first_name, staff.last_name, staff.email FROM staff WHERE staff.store_id = '2' AND staff.active = 1",
        "retrieved": [
            9106
        ],
        "token_usage": {
            "tokens": 2174,
            "cost": 0.00038865000000000004
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2"
    },
    {
        "sample_id": 9382,
        "pred_sql": "SELECT title FROM film WHERE rating = 'PG-13';",
        "retrieved": [
            9236
        ],
        "token_usage": {
            "tokens": 2229,
            "cost": 0.0003798
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE rating = 'PG-13'"
    },
    {
        "sample_id": 9401,
        "pred_sql": "SELECT inventory.store_id FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id INNER JOIN inventory ON film.film_id = inventory.film_id WHERE film.length <= 100 AND actor.first_name = 'Reese' AND actor.last_name = 'West'",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2335,
            "cost": 0.00043529999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.store_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length < 100 AND T1.first_name = 'Reese' AND T1.last_name = 'West'"
    },
    {
        "sample_id": 9357,
        "pred_sql": "SELECT DISTINCT customer.email FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id WHERE rental.rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49' AND customer.active = '1';",
        "retrieved": [
            9253
        ],
        "token_usage": {
            "tokens": 2402,
            "cost": 0.00044669999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.email FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49' AND T2.active = 1"
    },
    {
        "sample_id": 9196,
        "pred_sql": "SELECT title, description, special_features FROM film ORDER BY length DESC LIMIT 5;",
        "retrieved": [
            9182
        ],
        "token_usage": {
            "tokens": 2229,
            "cost": 0.000387
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title, description, special_features FROM film WHERE length = ( SELECT MAX(length) FROM film ) LIMIT 5"
    },
    {
        "sample_id": 9405,
        "pred_sql": "SELECT COUNT(f.title) FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE f.rental_rate = 2.99 AND a.first_name = 'Nina' AND a.last_name = 'Soto';",
        "retrieved": [
            9099
        ],
        "token_usage": {
            "tokens": 2235,
            "cost": 0.00041894999999999996
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate = 2.99 AND T2.first_name = 'Nina' AND T2.last_name = 'Soto'"
    },
    {
        "sample_id": 9333,
        "pred_sql": "SELECT title FROM film WHERE film_id BETWEEN '1' AND '10'",
        "retrieved": [
            9101
        ],
        "token_usage": {
            "tokens": 2153,
            "cost": 0.00037154999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10"
    },
    {
        "sample_id": 9214,
        "pred_sql": "SELECT customer.first_name || ' ' || customer.last_name AS full_name, city.city AS city_name \nFROM customer \nINNER JOIN rental ON customer.customer_id = rental.customer_id \nINNER JOIN inventory ON rental.inventory_id = inventory.inventory_id \nINNER JOIN film ON inventory.film_id = film.film_id \nINNER JOIN address ON customer.address_id = address.address_id \nINNER JOIN city ON address.city_id = city.city_id \nWHERE film.title = 'DREAM PICKUP';",
        "retrieved": [
            9210
        ],
        "token_usage": {
            "tokens": 2372,
            "cost": 0.00046515
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T4.first_name, T4.last_name, T6.city FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN customer AS T4 ON T3.customer_id = T4.customer_id INNER JOIN address AS T5 ON T4.address_id = T5.address_id INNER JOIN city AS T6 ON T5.city_id = T6.city_id WHERE T1.title = 'DREAM PICKUP'"
    },
    {
        "sample_id": 9202,
        "pred_sql": "SELECT SUM(payment.amount) FROM payment WHERE strftime('%Y-%m', payment.payment_date) = '2005-08'",
        "retrieved": [
            9372
        ],
        "token_usage": {
            "tokens": 2223,
            "cost": 0.00039374999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT SUM(amount) FROM payment WHERE SUBSTR(payment_date, 1, 7) = '2005-08'"
    },
    {
        "sample_id": 9232,
        "pred_sql": "SELECT inventory.inventory_id, store.store_id FROM film INNER JOIN inventory ON film.film_id = inventory.film_id INNER JOIN store ON inventory.store_id = store.store_id ORDER BY film.length DESC LIMIT 1;",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2317,
            "cost": 0.0004272
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T2.store_id, T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id ORDER BY T1.length DESC LIMIT 1"
    },
    {
        "sample_id": 9376,
        "pred_sql": "SELECT rental_duration FROM film WHERE title = 'Dirty Ace';",
        "retrieved": [
            9182
        ],
        "token_usage": {
            "tokens": 2197,
            "cost": 0.0003704999999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'"
    },
    {
        "sample_id": 9316,
        "pred_sql": "SELECT first_name, last_name FROM actor WHERE actor_id = 5;",
        "retrieved": [
            9231
        ],
        "token_usage": {
            "tokens": 2253,
            "cost": 0.00039059999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT first_name, last_name FROM actor WHERE actor_id = 5"
    },
    {
        "sample_id": 9302,
        "pred_sql": "SELECT film.title FROM film WHERE film.description LIKE '%Lacklusture%'",
        "retrieved": [
            9101
        ],
        "token_usage": {
            "tokens": 2161,
            "cost": 0.00037409999999999993
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT title FROM film_text WHERE description LIKE '%Lacklusture%'"
    },
    {
        "sample_id": 9306,
        "pred_sql": "SELECT category.name, COUNT(film_category.film_id) AS film_count FROM film_category INNER JOIN category ON film_category.category_id = category.category_id GROUP BY category.name ORDER BY film_count DESC LIMIT 1;",
        "retrieved": [
            9120
        ],
        "token_usage": {
            "tokens": 2211,
            "cost": 0.00040589999999999995
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT T.name FROM ( SELECT T2.name, COUNT(T2.name) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 9380,
        "pred_sql": "SELECT COUNT(f.title) AS total_titles, (COUNT(f.title) * 100.0 / (SELECT COUNT(*) FROM rental WHERE strftime('%Y', rental_date) = '2005')) AS percentage_rented FROM customer c INNER JOIN rental r ON c.customer_id = r.customer_id INNER JOIN inventory i ON r.inventory_id = i.inventory_id INNER JOIN film f ON i.film_id = f.film_id WHERE c.first_name = 'Mary' AND c.last_name = 'Smith' AND strftime('%Y-%m', r.rental_date) = '2005-06';",
        "retrieved": [
            9125
        ],
        "token_usage": {
            "tokens": 2436,
            "cost": 0.0004927499999999999
        },
        "db_id": "movie_3",
        "gold_sql": "SELECT COUNT(T2.rental_id) , CAST(SUM(IIF(STRFTIME('%m',T2.rental_date) = '7', 1, 0)) AS REAL) * 100 / COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller' AND STRFTIME('%Y',T2.rental_date) = '2005'"
    },
    {
        "sample_id": 2292,
        "pred_sql": "SELECT DISTINCT m.movieid FROM movies AS m WHERE m.runningtime = '0'",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 983,
            "cost": 0.00018615
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )"
    },
    {
        "sample_id": 2306,
        "pred_sql": "SELECT movies2actors.actorid FROM movies2actors JOIN movies ON movies2actors.movieid = movies.movieid WHERE movies.country = 'France' GROUP BY movies2actors.actorid HAVING COUNT(movies2actors.movieid) >= 2;",
        "retrieved": [
            2333
        ],
        "token_usage": {
            "tokens": 1009,
            "cost": 0.00022739999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France' GROUP BY T2.actorid HAVING COUNT(T1.movieid) > 2"
    },
    {
        "sample_id": 2270,
        "pred_sql": "SELECT DISTINCT users.age FROM u2base INNER JOIN movies ON u2base.movieid = movies.movieid INNER JOIN users ON u2base.userid = users.userid WHERE u2base.rating = 3",
        "retrieved": [
            2268
        ],
        "token_usage": {
            "tokens": 1038,
            "cost": 0.00021374999999999996
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3"
    },
    {
        "sample_id": 2321,
        "pred_sql": "SELECT users.userid, users.age FROM u2base INNER JOIN users ON u2base.userid = users.userid WHERE u2base.movieid = '2409051' AND u2base.rating = 2;",
        "retrieved": [
            2247
        ],
        "token_usage": {
            "tokens": 988,
            "cost": 0.00021164999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T1.userid, T1.age FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.movieid = '2409051' AND T2.rating = 2"
    },
    {
        "sample_id": 2287,
        "pred_sql": "SELECT DISTINCT movies.country FROM movies INNER JOIN movies2actors ON movies.movieid = movies2actors.movieid INNER JOIN actors ON movies2actors.actorid = actors.actorid WHERE actors.a_quality = (SELECT MIN(a_quality) FROM actors)",
        "retrieved": [
            2302
        ],
        "token_usage": {
            "tokens": 1061,
            "cost": 0.0002316
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0"
    },
    {
        "sample_id": 2285,
        "pred_sql": "SELECT DISTINCT movies2directors.genre FROM directors INNER JOIN movies2directors ON directors.directorid = movies2directors.directorid WHERE directors.avg_revenue = (SELECT MAX(avg_revenue) FROM directors)",
        "retrieved": [
            2317
        ],
        "token_usage": {
            "tokens": 993,
            "cost": 0.00021194999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4"
    },
    {
        "sample_id": 2288,
        "pred_sql": "SELECT AVG(u2base.rating) AS highest_average_rating FROM movies INNER JOIN movies2directors ON movies.movieid = movies2directors.movieid INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies2directors.genre = 'action' AND movies.country = 'USA' GROUP BY movies.movieid ORDER BY highest_average_rating DESC LIMIT 1;",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1140,
            "cost": 0.0002808
        },
        "db_id": "movielens",
        "gold_sql": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1"
    },
    {
        "sample_id": 2313,
        "pred_sql": "SELECT COUNT(*) FROM movies WHERE year = '4' AND movieid IN (SELECT movieid FROM movies2directors WHERE genre IN (1, 2))",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1056,
            "cost": 0.00023265
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')"
    },
    {
        "sample_id": 2264,
        "pred_sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.year = '4' AND T1.a_gender = 'F'",
        "retrieved": [
            2286
        ],
        "token_usage": {
            "tokens": 1079,
            "cost": 0.00025544999999999995
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_gender = 'F' AND T1.year = 4"
    },
    {
        "sample_id": 2331,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM movies2actors WHERE movieid = '1672580')) AS female_percentage FROM movies2actors INNER JOIN actors ON movies2actors.actorid = actors.actorid WHERE movies2actors.movieid = '1672580' AND actors.a_gender = 'F' AND actors.a_quality = '2' GROUP BY movies2actors.actorid HAVING COUNT(movies2actors.actorid) = 2;",
        "retrieved": [
            2302
        ],
        "token_usage": {
            "tokens": 1112,
            "cost": 0.00025814999999999996
        },
        "db_id": "movielens",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'"
    },
    {
        "sample_id": 2253,
        "pred_sql": "SELECT movies.movieid, AVG(u2base.rating) AS avg_rating FROM movies INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.country = 'USA' GROUP BY movies.movieid ORDER BY avg_rating DESC LIMIT 10;",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1101,
            "cost": 0.00025335
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10"
    },
    {
        "sample_id": 2281,
        "pred_sql": "SELECT DISTINCT movies.movieid FROM movies INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.year = (SELECT MAX(year) FROM movies) AND u2base.rating = (SELECT MIN(rating) FROM u2base INNER JOIN movies ON u2base.movieid = movies.movieid)",
        "retrieved": [
            2247
        ],
        "token_usage": {
            "tokens": 1027,
            "cost": 0.00023729999999999997
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1"
    },
    {
        "sample_id": 2310,
        "pred_sql": "SELECT COUNT(DISTINCT directors.directorid) FROM directors INNER JOIN movies2directors ON directors.directorid = movies2directors.directorid WHERE directors.avg_revenue = 4 AND movies2directors.genre IN (1, 2);",
        "retrieved": [
            2317
        ],
        "token_usage": {
            "tokens": 1043,
            "cost": 0.00024375
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')"
    },
    {
        "sample_id": 2248,
        "pred_sql": "SELECT COUNT(DISTINCT u.userid) FROM users AS u INNER JOIN u2base AS r ON u.userid = r.userid WHERE r.rating = 5 AND u.u_gender = 'M'",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1063,
            "cost": 0.0002328
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'"
    },
    {
        "sample_id": 2271,
        "pred_sql": "SELECT directors.country, COUNT(directors.directorid) AS director_count FROM directors INNER JOIN movies2directors ON directors.directorid = movies2directors.directorid INNER JOIN movies ON movies2directors.movieid = movies.movieid WHERE movies.genre = 'action' GROUP BY directors.country ORDER BY director_count DESC;",
        "retrieved": [
            2298
        ],
        "token_usage": {
            "tokens": 1076,
            "cost": 0.00027029999999999996
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1"
    },
    {
        "sample_id": 2303,
        "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM directors WHERE d_quality = 5) AS proportion FROM (SELECT DISTINCT movies2directors.movieid FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.d_quality = 5 AND T1.directorid = (SELECT directorid FROM directors WHERE d_quality = 5 AND avg_revenue > 0)) AS t1",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1072,
            "cost": 0.0002382
        },
        "db_id": "movielens",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'"
    },
    {
        "sample_id": 2323,
        "pred_sql": "SELECT movies.movieid, AVG(u2base.rating) AS avg_rating FROM movies INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.country = 'France' GROUP BY movies.movieid ORDER BY avg_rating ASC LIMIT 1;",
        "retrieved": [
            2302
        ],
        "token_usage": {
            "tokens": 1043,
            "cost": 0.00022349999999999996
        },
        "db_id": "movielens",
        "gold_sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1"
    },
    {
        "sample_id": 2324,
        "pred_sql": "SELECT COUNT(DISTINCT T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T3.country IN ('France', 'USA') AND T1.a_gender = 'F'",
        "retrieved": [
            2286
        ],
        "token_usage": {
            "tokens": 1100,
            "cost": 0.00026625
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')"
    },
    {
        "sample_id": 2319,
        "pred_sql": "SELECT u2base.movieid FROM u2base INNER JOIN users ON u2base.userid = users.userid WHERE users.age = '25' GROUP BY u2base.movieid ORDER BY COUNT(u2base.rating) DESC LIMIT 1;",
        "retrieved": [
            2268
        ],
        "token_usage": {
            "tokens": 1080,
            "cost": 0.00023894999999999998
        },
        "db_id": "movielens",
        "gold_sql": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T1.age = 25 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1"
    },
    {
        "sample_id": 2256,
        "pred_sql": "SELECT COUNT(DISTINCT movies2actors.movieid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 'best' AND T3.rating = 5",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1101,
            "cost": 0.00025425
        },
        "db_id": "movielens",
        "gold_sql": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5"
    },
    {
        "sample_id": 2257,
        "pred_sql": "SELECT AVG(u2base.rating) FROM movies INNER JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.year = '4' AND movies.country = 'France'",
        "retrieved": [
            2289
        ],
        "token_usage": {
            "tokens": 1069,
            "cost": 0.00023909999999999996
        },
        "db_id": "movielens",
        "gold_sql": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4"
    },
    {
        "sample_id": 516,
        "pred_sql": "SELECT AVG(revenue) AS average_revenue FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'Latin'",
        "retrieved": [
            421
        ],
        "token_usage": {
            "tokens": 2086,
            "cost": 0.00037499999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'"
    },
    {
        "sample_id": 511,
        "pred_sql": "SELECT movie.title FROM movie INNER JOIN production_country AS T2 ON movie.movie_id = T2.movie_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T3.country_name = 'Nederlands' AND movie.movie_status = 'Released'",
        "retrieved": [
            481
        ],
        "token_usage": {
            "tokens": 2104,
            "cost": 0.00038354999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'"
    },
    {
        "sample_id": 496,
        "pred_sql": "SELECT genre.genre_name FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE movie.tagline = 'A long time ago in a galaxy far, far away\u2026'",
        "retrieved": [
            492
        ],
        "token_usage": {
            "tokens": 2189,
            "cost": 0.00041565
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T3.genre_id = T2.genre_id WHERE T1.tagline = 'A long time ago in a galaxy far, far away...'"
    },
    {
        "sample_id": 455,
        "pred_sql": "SELECT movie_crew.person_id FROM movie_crew WHERE movie_crew.movie_id = '12' AND movie_crew.job = 'Film Editor' ORDER BY movie_crew.person_id LIMIT 1 OFFSET 1;",
        "retrieved": [
            418
        ],
        "token_usage": {
            "tokens": 2173,
            "cost": 0.00040694999999999994
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'"
    },
    {
        "sample_id": 525,
        "pred_sql": "SELECT keyword.keyword_name, COUNT(movie_keywords.keyword_id) AS keyword_count\nFROM movie\nINNER JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id\nWHERE movie.release_date LIKE '2006%'\nGROUP BY movie_keywords.keyword_id\nORDER BY keyword_count DESC\nLIMIT 1;",
        "retrieved": [
            425
        ],
        "token_usage": {
            "tokens": 2172,
            "cost": 0.0004437
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1"
    },
    {
        "sample_id": 533,
        "pred_sql": "SELECT title FROM movie WHERE movie_id = (SELECT movie_id FROM movie_keywords GROUP BY movie_id ORDER BY COUNT(keyword_id) DESC LIMIT 1)",
        "retrieved": [
            425
        ],
        "token_usage": {
            "tokens": 2061,
            "cost": 0.00037889999999999994
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1"
    },
    {
        "sample_id": 503,
        "pred_sql": "SELECT production_company.company_id FROM production_company INNER JOIN movie_company ON production_company.company_id = movie_company.company_id INNER JOIN movie ON movie_company.movie_id = movie.movie_id WHERE movie.title = 'Gladiator'",
        "retrieved": [
            447
        ],
        "token_usage": {
            "tokens": 2106,
            "cost": 0.00037529999999999996
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'"
    },
    {
        "sample_id": 441,
        "pred_sql": "SELECT title FROM movie ORDER BY vote_average DESC LIMIT 1",
        "retrieved": [
            418
        ],
        "token_usage": {
            "tokens": 2108,
            "cost": 0.00036749999999999993
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1"
    },
    {
        "sample_id": 408,
        "pred_sql": "SELECT production_company.company_name FROM production_company INNER JOIN movie_company AS T2 ON production_company.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'",
        "retrieved": [
            431
        ],
        "token_usage": {
            "tokens": 2080,
            "cost": 0.00037814999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'"
    },
    {
        "sample_id": 529,
        "pred_sql": "SELECT AVG(revenue) FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'France'",
        "retrieved": [
            421
        ],
        "token_usage": {
            "tokens": 2099,
            "cost": 0.0003827999999999999
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'"
    },
    {
        "sample_id": 562,
        "pred_sql": "SELECT mc.character_name \nFROM movie_cast mc \nJOIN movie m ON mc.movie_id = m.movie_id \nWHERE m.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' \nAND mc.person_id = (SELECT person_id FROM person WHERE person_name = 'Orlando Bloom');",
        "retrieved": [],
        "token_usage": {
            "tokens": 1988,
            "cost": 0.00037469999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'"
    },
    {
        "sample_id": 536,
        "pred_sql": "SELECT (SELECT COUNT(gender.gender) FROM movie INNER JOIN movie_cast AS T2 ON movie.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE gender.gender = 'female') * 1.0 / (SELECT COUNT(gender.gender) FROM movie INNER JOIN movie_cast AS T2 ON movie.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE gender.gender = 'male') AS average_ratio",
        "retrieved": [
            448
        ],
        "token_usage": {
            "tokens": 2176,
            "cost": 0.00042584999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id"
    },
    {
        "sample_id": 544,
        "pred_sql": "SELECT person.person_name FROM movie INNER JOIN movie_cast ON movie.movie_id = movie_cast.movie_id INNER JOIN person ON movie_cast.person_id = person.person_id WHERE movie.title = 'Pirates of the Caribbean: At World\\'s End' AND movie_cast.cast_order = '1'",
        "retrieved": [
            418
        ],
        "token_usage": {
            "tokens": 2160,
            "cost": 0.00039735
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1"
    },
    {
        "sample_id": 534,
        "pred_sql": "SELECT d.department_name, COUNT(mc.person_id) AS num_people\nFROM department d\nLEFT JOIN movie_crew mc ON d.department_id = mc.department_id\nGROUP BY d.department_id\nORDER BY num_people DESC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1978,
            "cost": 0.00037499999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1"
    },
    {
        "sample_id": 430,
        "pred_sql": "SELECT COUNT(DISTINCT mc.company_id) AS producer_count FROM movie m INNER JOIN movie_company mc ON m.movie_id = mc.movie_id WHERE m.title = 'The Amityville Horror';",
        "retrieved": [
            449
        ],
        "token_usage": {
            "tokens": 2123,
            "cost": 0.00039495
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'"
    },
    {
        "sample_id": 469,
        "pred_sql": "SELECT movie.title FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_name = 'Latin' AND movie.release_date BETWEEN '1990-01-01' AND '1995-12-31';",
        "retrieved": [
            486
        ],
        "token_usage": {
            "tokens": 2102,
            "cost": 0.00040034999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'"
    },
    {
        "sample_id": 524,
        "pred_sql": "SELECT person.person_name FROM movie_cast INNER JOIN person ON movie_cast.person_id = person.person_id WHERE movie_cast.character_name LIKE '%captain%';",
        "retrieved": [
            542
        ],
        "token_usage": {
            "tokens": 2082,
            "cost": 0.00037305
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'"
    },
    {
        "sample_id": 497,
        "pred_sql": "SELECT production_country.country_id FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id WHERE movie.title = 'Pirates of the Caribbean: Dead Man's Chest'",
        "retrieved": [
            481
        ],
        "token_usage": {
            "tokens": 2097,
            "cost": 0.00037215
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'"
    },
    {
        "sample_id": 465,
        "pred_sql": "SELECT movie.title FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Horror' AND movie.vote_average > 7;",
        "retrieved": [
            418
        ],
        "token_usage": {
            "tokens": 2151,
            "cost": 0.00039374999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7"
    },
    {
        "sample_id": 499,
        "pred_sql": "SELECT SUM(m.budget) AS total_budget \nFROM movie m \nJOIN movie_keywords mk ON m.movie_id = mk.movie_id \nJOIN keyword k ON mk.keyword_id = k.keyword_id \nWHERE k.keyword_name = 'video game';",
        "retrieved": [
            437
        ],
        "token_usage": {
            "tokens": 2045,
            "cost": 0.00037559999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'"
    },
    {
        "sample_id": 426,
        "pred_sql": "SELECT person.person_name FROM movie INNER JOIN movie_crew ON movie.movie_id = movie_crew.movie_id INNER JOIN department ON movie_crew.department_id = department.department_id WHERE department.department_name = 'Directing' AND movie.title = 'Land of the Dead'",
        "retrieved": [
            542
        ],
        "token_usage": {
            "tokens": 2122,
            "cost": 0.0003984
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'"
    },
    {
        "sample_id": 470,
        "pred_sql": "SELECT AVG(movie.revenue) FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'United States' AND strftime('%Y', movie.release_date) = '2006'",
        "retrieved": [
            421
        ],
        "token_usage": {
            "tokens": 2120,
            "cost": 0.00039404999999999996
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006"
    },
    {
        "sample_id": 527,
        "pred_sql": "SELECT genre.genre_name FROM movie_genres INNER JOIN genre ON movie_genres.genre_id = genre.genre_id GROUP BY genre.genre_name ORDER BY COUNT(movie_genres.movie_id) ASC LIMIT 1 OFFSET 2;",
        "retrieved": [
            484
        ],
        "token_usage": {
            "tokens": 2154,
            "cost": 0.00039059999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1"
    },
    {
        "sample_id": 552,
        "pred_sql": "SELECT (SELECT CAST(COUNT(CASE WHEN keyword.keyword_name = 'woman director' THEN movie.movie_id ELSE NULL END) AS FLOAT) * 100 / COUNT(movie.movie_id) FROM movie INNER JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id) - (SELECT CAST(COUNT(CASE WHEN keyword.keyword_name = 'independent film' THEN movie.movie_id ELSE NULL END) AS FLOAT) * 100 / COUNT(movie.movie_id) FROM movie INNER JOIN movie_keywords ON movie.movie_id = movie_keywords.movie_id) AS percentage_difference;",
        "retrieved": [
            484
        ],
        "token_usage": {
            "tokens": 2235,
            "cost": 0.00043334999999999994
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id"
    },
    {
        "sample_id": 554,
        "pred_sql": "SELECT COUNT(*) FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', movie.release_date) AS INT) = 2000;",
        "retrieved": [
            486
        ],
        "token_usage": {
            "tokens": 2091,
            "cost": 0.00039869999999999993
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000"
    },
    {
        "sample_id": 513,
        "pred_sql": "SELECT movie.homepage FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'Bahasa Indonesia'",
        "retrieved": [
            481
        ],
        "token_usage": {
            "tokens": 2115,
            "cost": 0.00039014999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'"
    },
    {
        "sample_id": 531,
        "pred_sql": "SELECT T3.person_name, COUNT(T1.movie_id) AS movie_count FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' GROUP BY T3.person_name ORDER BY movie_count DESC LIMIT 5;",
        "retrieved": [
            418
        ],
        "token_usage": {
            "tokens": 2272,
            "cost": 0.00046859999999999995
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5"
    },
    {
        "sample_id": 521,
        "pred_sql": "SELECT country_iso_code FROM country WHERE country_name = 'Kyrgyz Republic';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1924,
            "cost": 0.00033989999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'"
    },
    {
        "sample_id": 420,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN movie.vote_average > 5.0 THEN movie.movie_id ELSE NULL END) AS FLOAT) * 100 / COUNT(movie.movie_id) AS percentage FROM movie INNER JOIN movie_crew ON movie.movie_id = movie_crew.movie_id WHERE movie_crew.job = 'Director of Photography' AND movie_crew.person_id = (SELECT person_id FROM person WHERE person_name = 'Dariusz Wolski')",
        "retrieved": [
            484
        ],
        "token_usage": {
            "tokens": 2282,
            "cost": 0.00045525
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'"
    },
    {
        "sample_id": 551,
        "pred_sql": "SELECT production_company.company_name \nFROM production_company \nINNER JOIN movie_company ON production_company.company_id = movie_company.company_id \nINNER JOIN movie ON movie_company.movie_id = movie.movie_id \nWHERE movie.release_date LIKE '2016%' \nAND movie.runtime > (SELECT AVG(runtime) * 0.35 FROM movie WHERE release_date LIKE '2016%') \nGROUP BY production_company.company_id;",
        "retrieved": [
            447
        ],
        "token_usage": {
            "tokens": 2198,
            "cost": 0.00042825
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100"
    },
    {
        "sample_id": 459,
        "pred_sql": "SELECT COUNT(movie.movie_id) FROM movie INNER JOIN movie_cast AS T2 ON movie.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Bob Peterson'",
        "retrieved": [
            452
        ],
        "token_usage": {
            "tokens": 2109,
            "cost": 0.00038655
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Bob Peterson'"
    },
    {
        "sample_id": 462,
        "pred_sql": "SELECT movie.title FROM movie JOIN movie_cast ON movie.movie_id = movie_cast.movie_id JOIN person ON movie_cast.person_id = person.person_id WHERE person.person_name = 'Jim Carrey';",
        "retrieved": [
            437
        ],
        "token_usage": {
            "tokens": 2049,
            "cost": 0.0003797999999999999
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'"
    },
    {
        "sample_id": 506,
        "pred_sql": "SELECT movie.title FROM movie JOIN movie_company ON movie.movie_id = movie_company.movie_id JOIN production_company ON movie_company.company_id = production_company.company_id WHERE production_company.company_name = 'Warner Bros. Pictures' ORDER BY movie.revenue DESC LIMIT 1;",
        "retrieved": [
            422
        ],
        "token_usage": {
            "tokens": 2056,
            "cost": 0.00038804999999999997
        },
        "db_id": "movies_4",
        "gold_sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1"
    },
    {
        "sample_id": 7925,
        "pred_sql": "SELECT reviews.author_id FROM reviews INNER JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Pop Rocket' AND reviews.created_at LIKE '2016%' AND reviews.rating < 5;",
        "retrieved": [
            7931
        ],
        "token_usage": {
            "tokens": 986,
            "cost": 0.00023339999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Pop Rocket' AND T2.created_at LIKE '2016-%' AND T2.rating < 5"
    },
    {
        "sample_id": 7961,
        "pred_sql": "SELECT p.title \nFROM podcasts p \nJOIN reviews r ON p.podcast_id = r.podcast_id \nJOIN categories c ON p.podcast_id = c.podcast_id \nWHERE r.content LIKE '%love%' \nAND c.category = 'art' \nAND r.created_at BETWEEN '2018-01-01' AND '2019-12-31';",
        "retrieved": [],
        "token_usage": {
            "tokens": 939,
            "cost": 0.00025425
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE (T2.created_at LIKE '2018-%' AND T1.category = 'arts' AND T2.content LIKE '%love%') OR (T2.created_at LIKE '2019-%' AND T1.category = 'arts' AND T2.content LIKE '%love%')"
    },
    {
        "sample_id": 7985,
        "pred_sql": "SELECT COUNT(*) FROM reviews INNER JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally' AND reviews.rating = 5;",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 982,
            "cost": 0.00021074999999999995
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5"
    },
    {
        "sample_id": 7946,
        "pred_sql": "SELECT AVG(reviews.rating) FROM reviews INNER JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE strftime('%Y', reviews.created_at) = '2019'",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 1009,
            "cost": 0.0002292
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(rating) FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00-07:00' AND '2019-12-31T23:59:59-07:00'"
    },
    {
        "sample_id": 7966,
        "pred_sql": "SELECT reviews.content FROM reviews WHERE reviews.title = 'Hosts bring the show down'",
        "retrieved": [
            7965
        ],
        "token_usage": {
            "tokens": 882,
            "cost": 0.00018855
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT title FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down' )"
    },
    {
        "sample_id": 7956,
        "pred_sql": "SELECT AVG(reviews.rating) FROM categories INNER JOIN podcasts ON podcasts.podcast_id = categories.podcast_id INNER JOIN reviews ON reviews.podcast_id = podcasts.podcast_id WHERE categories.category = 'true crime'",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 991,
            "cost": 0.00022155
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'"
    },
    {
        "sample_id": 7986,
        "pred_sql": "SELECT AVG(reviews.rating) FROM categories INNER JOIN podcasts AS T2 ON T2.podcast_id = categories.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE podcasts.title = 'Please Excuse My Dead Aunt Sally'",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 983,
            "cost": 0.00021314999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally'"
    },
    {
        "sample_id": 7984,
        "pred_sql": "SELECT podcasts.title FROM podcasts INNER JOIN reviews ON podcasts.podcast_id = reviews.podcast_id WHERE reviews.author_id = 'F7E5A318989779D'",
        "retrieved": [
            7931
        ],
        "token_usage": {
            "tokens": 936,
            "cost": 0.0002016
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT T2.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'F7E5A318989779D'"
    },
    {
        "sample_id": 7945,
        "pred_sql": "SELECT (COUNT(CASE WHEN c.category = 'fiction-science-fiction' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM podcasts p INNER JOIN categories c ON p.podcast_id = c.podcast_id;",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 1014,
            "cost": 0.00023399999999999994
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN category = 'fiction-science-fiction' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(podcast_id) OR '%' \"percentage\" FROM categories"
    },
    {
        "sample_id": 7944,
        "pred_sql": "SELECT COUNT(*) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01' AND '2015-03-31';",
        "retrieved": [
            7943
        ],
        "token_usage": {
            "tokens": 948,
            "cost": 0.00022319999999999998
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'"
    },
    {
        "sample_id": 7949,
        "pred_sql": "SELECT reviews.rating, categories.category FROM podcasts INNER JOIN reviews ON podcasts.podcast_id = reviews.podcast_id INNER JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'Sitcomadon'",
        "retrieved": [
            7960
        ],
        "token_usage": {
            "tokens": 952,
            "cost": 0.00021075
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT DISTINCT T3.rating, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'Sitcomadon'"
    },
    {
        "sample_id": 7963,
        "pred_sql": "SELECT AVG(reviews.rating) FROM categories INNER JOIN podcasts ON podcasts.podcast_id = categories.podcast_id INNER JOIN reviews ON reviews.podcast_id = podcasts.podcast_id WHERE categories.category = 'comedy'",
        "retrieved": [
            7941
        ],
        "token_usage": {
            "tokens": 992,
            "cost": 0.00022169999999999997
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'"
    },
    {
        "sample_id": 7935,
        "pred_sql": "SELECT categories.category FROM podcasts INNER JOIN categories ON podcasts.podcast_id = categories.podcast_id WHERE podcasts.title = 'SciFi Tech Talk'",
        "retrieved": [
            7967
        ],
        "token_usage": {
            "tokens": 944,
            "cost": 0.00019469999999999996
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'SciFi Tech Talk'"
    },
    {
        "sample_id": 7979,
        "pred_sql": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16'",
        "retrieved": [
            7965
        ],
        "token_usage": {
            "tokens": 918,
            "cost": 0.0002025
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'"
    },
    {
        "sample_id": 7976,
        "pred_sql": "SELECT COUNT(reviews.podcast_id) AS review_count FROM reviews INNER JOIN podcasts ON reviews.podcast_id = podcasts.podcast_id WHERE podcasts.title = 'Planet Money'",
        "retrieved": [
            7973
        ],
        "token_usage": {
            "tokens": 944,
            "cost": 0.00020325
        },
        "db_id": "music_platform_2",
        "gold_sql": "SELECT COUNT(T2.podcast_id) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Planet Money'"
    },
    {
        "sample_id": 2066,
        "pred_sql": "SELECT (MAX(CAST(groupyear AS INTEGER)) - MIN(CAST(groupyear AS INTEGER))) AS years_passed FROM torrents WHERE artist = '2Pac' AND groupyear > '1991';",
        "retrieved": [
            2067
        ],
        "token_usage": {
            "tokens": 754,
            "cost": 0.00018825
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT ( SELECT groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' ORDER BY groupYear LIMIT 1, 1 ) - groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' AND groupYear = 1991"
    },
    {
        "sample_id": 2049,
        "pred_sql": "SELECT torrents.groupname FROM torrents INNER JOIN tags ON torrents.id = tags.id WHERE torrents.releasetype = 'single' AND tags.tag LIKE 'funk' ORDER BY torrents.groupyear ASC LIMIT 1;",
        "retrieved": [
            2086
        ],
        "token_usage": {
            "tokens": 733,
            "cost": 0.00019184999999999997
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1"
    },
    {
        "sample_id": 2082,
        "pred_sql": "SELECT COUNT(*) FROM torrents WHERE artist = 'sugar daddy' AND releasetype = 'single' AND groupyear = '1980';",
        "retrieved": [],
        "token_usage": {
            "tokens": 541,
            "cost": 0.00012615
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT COUNT(releaseType) FROM torrents WHERE artist LIKE 'sugar daddy' AND releaseType LIKE 'Single' AND groupYear = 1980"
    },
    {
        "sample_id": 2076,
        "pred_sql": "SELECT torrents.groupname FROM torrents JOIN tags ON torrents.id = tags.id WHERE tags.tag = 'jazz' AND torrents.groupyear >= '1982' ORDER BY torrents.totalsnatched DESC LIMIT 1;",
        "retrieved": [
            2069
        ],
        "token_usage": {
            "tokens": 753,
            "cost": 0.00018585
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "sample_id": 2073,
        "pred_sql": "SELECT torrents.artist FROM torrents INNER JOIN tags AS T2 ON torrents.id = T2.id WHERE T2.tag = 'funk' AND torrents.totalsnatched <= '100' AND torrents.groupyear = '1980'",
        "retrieved": [
            2072
        ],
        "token_usage": {
            "tokens": 768,
            "cost": 0.00020429999999999998
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.totalSnatched <= 100"
    },
    {
        "sample_id": 2089,
        "pred_sql": "SELECT (COUNT(CASE WHEN torrents.artist = 'united.states' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM torrents WHERE torrents.releasetype = 'album' AND torrents.groupyear BETWEEN '1979' AND '1982';",
        "retrieved": [
            2067
        ],
        "token_usage": {
            "tokens": 808,
            "cost": 0.00022289999999999997
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.tag LIKE 'united.states' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.releaseType) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1979 AND 1982 AND T1.releaseType LIKE 'album'"
    },
    {
        "sample_id": 2045,
        "pred_sql": "SELECT torrents.groupname FROM torrents WHERE torrents.artist = 'Ron Hunt' AND torrents.groupyear = '1979' AND torrents.releasetype = 'single' AND torrents.totalsnatched = '239'",
        "retrieved": [
            2063
        ],
        "token_usage": {
            "tokens": 773,
            "cost": 0.00022124999999999998
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239"
    },
    {
        "sample_id": 2065,
        "pred_sql": "SELECT releasetype, COUNT(*) as total_releases FROM torrents WHERE artist = '50 cent' AND groupyear BETWEEN '2010' AND '2015' AND (releasetype = 'album' OR releasetype = 'Single-Tape') GROUP BY releasetype;",
        "retrieved": [
            2046
        ],
        "token_usage": {
            "tokens": 724,
            "cost": 0.0001896
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT COUNT(id), ( SELECT COUNT(id) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'album' ) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'Single'"
    },
    {
        "sample_id": 2052,
        "pred_sql": "SELECT tags.tag, torrents.artist FROM torrents INNER JOIN tags ON torrents.id = tags.id WHERE torrents.releasetype = 'single' ORDER BY torrents.totalsnatched DESC LIMIT 1;",
        "retrieved": [
            2060
        ],
        "token_usage": {
            "tokens": 757,
            "cost": 0.0002031
        },
        "db_id": "music_tracker",
        "gold_sql": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1"
    },
    {
        "sample_id": 4985,
        "pred_sql": "SELECT AVG(person.height) FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id INNER JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id INNER JOIN event ON competitor_event.event_id = event.id INNER JOIN sport ON event.sport_id = sport.id WHERE person.gender = 'M' AND sport.sport_name = 'basketball'",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1593,
            "cost": 0.0003375
        },
        "db_id": "olympics",
        "gold_sql": "SELECT AVG(T5.height) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T1.sport_name = 'Basketball' AND T5.gender = 'M'"
    },
    {
        "sample_id": 5000,
        "pred_sql": "SELECT sport_name FROM sport WHERE id = 19;",
        "retrieved": [
            5050
        ],
        "token_usage": {
            "tokens": 1494,
            "cost": 0.00026639999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT sport_name FROM sport WHERE id = 19"
    },
    {
        "sample_id": 4957,
        "pred_sql": "SELECT city.city_name FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games ON games_city.games_id = games.id WHERE games.games_year = 1976",
        "retrieved": [
            5008
        ],
        "token_usage": {
            "tokens": 1496,
            "cost": 0.00027885
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')"
    },
    {
        "sample_id": 4919,
        "pred_sql": "SELECT noc_region.noc FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id INNER JOIN person_region ON games_competitor.person_id = person_region.person_id INNER JOIN noc_region ON person_region.region_id = noc_region.id WHERE person.gender = 'M' AND person.height = (SELECT MAX(height) FROM person WHERE gender = 'M')",
        "retrieved": [
            4998
        ],
        "token_usage": {
            "tokens": 1635,
            "cost": 0.0003312
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1"
    },
    {
        "sample_id": 4974,
        "pred_sql": "SELECT COUNT(DISTINCT games_competitor.id) AS athlete_count FROM games_competitor INNER JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id INNER JOIN person ON games_competitor.person_id = person.id INNER JOIN person_region ON person.id = person_region.person_id WHERE person_region.region_id = 151 AND competitor_event.medal_id IS NOT NULL;",
        "retrieved": [
            4979
        ],
        "token_usage": {
            "tokens": 1622,
            "cost": 0.0003405
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4"
    },
    {
        "sample_id": 5028,
        "pred_sql": "SELECT COUNT(games_competitor.person_id) FROM competitor_event INNER JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id INNER JOIN games ON games_competitor.games_id = games.id INNER JOIN event ON competitor_event.event_id = event.id INNER JOIN person ON games_competitor.person_id = person.id WHERE games.games_year = 1948 AND event.sport_id IN (SELECT id FROM sport WHERE sport_name LIKE '%Summer%') AND person.gender = 'M'",
        "retrieved": [
            4942
        ],
        "token_usage": {
            "tokens": 1567,
            "cost": 0.00032235
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'"
    },
    {
        "sample_id": 4996,
        "pred_sql": "SELECT games.games_name FROM games INNER JOIN games_city ON games.id = games_city.games_id INNER JOIN games_competitor ON games.id = games_competitor.games_id WHERE games_city.city_id = (SELECT id FROM city WHERE city_name = 'Los Angeles') GROUP BY games.id ORDER BY COUNT(games_competitor.person_id) DESC LIMIT 1;",
        "retrieved": [
            4942
        ],
        "token_usage": {
            "tokens": 1560,
            "cost": 0.00031319999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1"
    },
    {
        "sample_id": 5040,
        "pred_sql": "SELECT games.games_name FROM games INNER JOIN games_competitor ON games.id = games_competitor.games_id WHERE games_competitor.games_id = 13",
        "retrieved": [
            4914
        ],
        "token_usage": {
            "tokens": 1548,
            "cost": 0.00029564999999999995
        },
        "db_id": "olympics",
        "gold_sql": "SELECT DISTINCT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T2.games_id = 13"
    },
    {
        "sample_id": 5078,
        "pred_sql": "SELECT person.full_name, person.height FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id ORDER BY person.height DESC LIMIT 1",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1491,
            "cost": 0.0002781
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1"
    },
    {
        "sample_id": 4941,
        "pred_sql": "SELECT full_name, MIN(age) AS youngest_age FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1538,
            "cost": 0.00030495
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1"
    },
    {
        "sample_id": 4920,
        "pred_sql": "SELECT COUNT(*) AS female_competitors FROM games_competitor AS gc INNER JOIN person AS p ON gc.person_id = p.id INNER JOIN person_region AS pr ON p.id = pr.person_id INNER JOIN noc_region AS nr ON pr.region_id = nr.id WHERE nr.noc = 'FIN' AND p.gender = 'F';",
        "retrieved": [
            4981
        ],
        "token_usage": {
            "tokens": 1604,
            "cost": 0.00031844999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'"
    },
    {
        "sample_id": 5075,
        "pred_sql": "SELECT person.full_name FROM competitor_event INNER JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id INNER JOIN medal ON competitor_event.medal_id = medal.id INNER JOIN person ON games_competitor.person_id = person.id WHERE medal.medal_name = 'Gold'",
        "retrieved": [
            4945
        ],
        "token_usage": {
            "tokens": 1580,
            "cost": 0.000309
        },
        "db_id": "olympics",
        "gold_sql": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'"
    },
    {
        "sample_id": 5020,
        "pred_sql": "SELECT COUNT(games.id) AS number_of_games FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games ON games_city.games_id = games.id WHERE city.city_name = 'London' AND games.games_year BETWEEN 1900 AND 1992;",
        "retrieved": [
            5019
        ],
        "token_usage": {
            "tokens": 1548,
            "cost": 0.00030599999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992"
    },
    {
        "sample_id": 4987,
        "pred_sql": "SELECT noc_region.region_name FROM person_region INNER JOIN noc_region ON person_region.region_id = noc_region.id INNER JOIN person ON person_region.person_id = person.id WHERE person.full_name = 'Yao Ming'",
        "retrieved": [
            5016
        ],
        "token_usage": {
            "tokens": 1507,
            "cost": 0.0002877
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'"
    },
    {
        "sample_id": 4938,
        "pred_sql": "SELECT COUNT(games_competitor.id) AS competitor_count FROM games_competitor INNER JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'Martina Kohlov'",
        "retrieved": [
            4937
        ],
        "token_usage": {
            "tokens": 1497,
            "cost": 0.0002835
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'"
    },
    {
        "sample_id": 4948,
        "pred_sql": "SELECT COUNT(*) FROM games AS g INNER JOIN games_city AS gc ON g.id = gc.games_id INNER JOIN city AS c ON gc.city_id = c.id WHERE c.city_name = 'Stockholm' AND g.games_name LIKE '%Summer%';",
        "retrieved": [
            5019
        ],
        "token_usage": {
            "tokens": 1530,
            "cost": 0.00029834999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'"
    },
    {
        "sample_id": 5065,
        "pred_sql": "SELECT city.city_name FROM games_city INNER JOIN city AS T2 ON games_city.city_id = T2.id INNER JOIN games AS T3 ON games_city.games_id = T3.id WHERE T3.games_name LIKE '%Paris%'",
        "retrieved": [
            5019
        ],
        "token_usage": {
            "tokens": 1538,
            "cost": 0.00030269999999999993
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'"
    },
    {
        "sample_id": 4949,
        "pred_sql": "SELECT noc_region.region_name, COUNT(person.id) AS athlete_count FROM person_region INNER JOIN person ON person_region.person_id = person.id INNER JOIN noc_region ON person_region.region_id = noc_region.id GROUP BY noc_region.region_name ORDER BY athlete_count DESC LIMIT 1;",
        "retrieved": [
            4998
        ],
        "token_usage": {
            "tokens": 1613,
            "cost": 0.00032159999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1"
    },
    {
        "sample_id": 4978,
        "pred_sql": "SELECT person.full_name FROM competitor_event INNER JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id INNER JOIN event ON competitor_event.event_id = event.id INNER JOIN sport ON event.sport_id = sport.id INNER JOIN medal ON competitor_event.medal_id = medal.id INNER JOIN games ON games_competitor.games_id = games.id WHERE medal.medal_name = 'Gold' AND sport.sport_name = 'Cycling'",
        "retrieved": [
            4945
        ],
        "token_usage": {
            "tokens": 1689,
            "cost": 0.00037394999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1"
    },
    {
        "sample_id": 4925,
        "pred_sql": "SELECT AVG(person.height) FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id INNER JOIN person_region ON person.id = person_region.person_id INNER JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Finland' AND person.gender = 'M'",
        "retrieved": [
            5076
        ],
        "token_usage": {
            "tokens": 1548,
            "cost": 0.00031005
        },
        "db_id": "olympics",
        "gold_sql": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'"
    },
    {
        "sample_id": 5006,
        "pred_sql": "SELECT COUNT(event.event_name) FROM sport INNER JOIN event ON sport.id = event.sport_id WHERE sport.sport_name = 'cycling'",
        "retrieved": [
            4930
        ],
        "token_usage": {
            "tokens": 1488,
            "cost": 0.0002853
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Cycling'"
    },
    {
        "sample_id": 5002,
        "pred_sql": "SELECT sport.id FROM sport WHERE sport.sport_name = 'hockey'",
        "retrieved": [
            5050
        ],
        "token_usage": {
            "tokens": 1481,
            "cost": 0.00025995
        },
        "db_id": "olympics",
        "gold_sql": "SELECT id FROM sport WHERE sport_name = 'Hockey'"
    },
    {
        "sample_id": 5068,
        "pred_sql": "SELECT full_name FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id ORDER BY age ASC LIMIT 1;",
        "retrieved": [
            4915
        ],
        "token_usage": {
            "tokens": 1543,
            "cost": 0.00029759999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1"
    },
    {
        "sample_id": 5043,
        "pred_sql": "SELECT event.event_name FROM sport INNER JOIN event ON sport.id = event.sport_id WHERE sport.sport_name = 'Basketball'",
        "retrieved": [
            4930
        ],
        "token_usage": {
            "tokens": 1457,
            "cost": 0.00026894999999999995
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Basketball'"
    },
    {
        "sample_id": 4932,
        "pred_sql": "SELECT games.id FROM games INNER JOIN games_competitor ON games.id = games_competitor.games_id INNER JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'Jessica Carolina Aguilera Aguilera';",
        "retrieved": [
            4937
        ],
        "token_usage": {
            "tokens": 1568,
            "cost": 0.00032204999999999994
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'"
    },
    {
        "sample_id": 5030,
        "pred_sql": "SELECT p.full_name, MIN(gc.age) AS youngest_age FROM games g INNER JOIN games_competitor gc ON g.id = gc.games_id INNER JOIN person p ON gc.person_id = p.id WHERE g.games_year = 2014 AND g.games_name LIKE '%Winter%' GROUP BY p.full_name ORDER BY youngest_age ASC LIMIT 1;",
        "retrieved": [
            4942
        ],
        "token_usage": {
            "tokens": 1571,
            "cost": 0.0003252
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2014 Winter' ORDER BY T2.age LIMIT 1"
    },
    {
        "sample_id": 4952,
        "pred_sql": "SELECT COUNT(games_competitor.person_id) FROM competitor_event INNER JOIN games_competitor AS T2 ON competitor_event.competitor_id = T2.id INNER JOIN event AS T3 ON competitor_event.event_id = T3.id INNER JOIN games AS T4 ON T2.games_id = T4.id WHERE T4.games_year = 1992 AND T4.games_name LIKE '%Summer%'",
        "retrieved": [
            4942
        ],
        "token_usage": {
            "tokens": 1552,
            "cost": 0.00031424999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'"
    },
    {
        "sample_id": 4924,
        "pred_sql": "SELECT COUNT(*) AS number_of_games FROM games_city INNER JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'London';",
        "retrieved": [
            5019
        ],
        "token_usage": {
            "tokens": 1509,
            "cost": 0.00028485
        },
        "db_id": "olympics",
        "gold_sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'"
    },
    {
        "sample_id": 4955,
        "pred_sql": "SELECT age, COUNT(*) as count FROM games_competitor GROUP BY age ORDER BY count DESC LIMIT 1;",
        "retrieved": [
            4988
        ],
        "token_usage": {
            "tokens": 1504,
            "cost": 0.00028680000000000003
        },
        "db_id": "olympics",
        "gold_sql": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1"
    },
    {
        "sample_id": 4971,
        "pred_sql": "SELECT games_year FROM games WHERE games_year NOT IN (SELECT games_year FROM games WHERE games_name LIKE '%winter%') AND games_name LIKE '%summer%';",
        "retrieved": [
            5008
        ],
        "token_usage": {
            "tokens": 1490,
            "cost": 0.00027749999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1"
    },
    {
        "sample_id": 5031,
        "pred_sql": "SELECT AVG(games_competitor.age) FROM games INNER JOIN games_competitor AS T2 ON games.id = T2.games_id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id INNER JOIN noc_region AS T4 ON T3.region_id = T4.id WHERE games.games_name = '1988 Winter'",
        "retrieved": [
            4998
        ],
        "token_usage": {
            "tokens": 1648,
            "cost": 0.00034035
        },
        "db_id": "olympics",
        "gold_sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1988 Winter'"
    },
    {
        "sample_id": 5073,
        "pred_sql": "SELECT city.city_name FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games ON games_city.games_id = games.id WHERE games.games_year = 2004 AND games.games_name = 'Summer'",
        "retrieved": [
            5008
        ],
        "token_usage": {
            "tokens": 1533,
            "cost": 0.0003024
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'"
    },
    {
        "sample_id": 5024,
        "pred_sql": "SELECT games.games_name FROM games INNER JOIN games_city ON games.id = games_city.games_id INNER JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'Beijing' AND games.games_year = 2008;",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1509,
            "cost": 0.00029069999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Beijing' AND T3.games_year = 2008"
    },
    {
        "sample_id": 5060,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN person.gender = 'M' THEN 1 ELSE NULL END) AS FLOAT) * 100 / COUNT(games_competitor.person_id) AS bronze_percentage FROM games INNER JOIN games_competitor ON games.id = games_competitor.games_id INNER JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id INNER JOIN medal ON competitor_event.medal_id = medal.id INNER JOIN person ON games_competitor.person_id = person.id WHERE medal.medal_name = 'Bronze' AND games.games_name = 'Basketball'",
        "retrieved": [
            4980
        ],
        "token_usage": {
            "tokens": 1678,
            "cost": 0.00035519999999999996
        },
        "db_id": "olympics",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'"
    },
    {
        "sample_id": 5054,
        "pred_sql": "SELECT city.city_name FROM games_city INNER JOIN city ON games_city.city_id = city.id INNER JOIN games_competitor ON games_city.games_id = games_competitor.games_id INNER JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'John Aalberg'",
        "retrieved": [
            5037
        ],
        "token_usage": {
            "tokens": 1521,
            "cost": 0.00029969999999999997
        },
        "db_id": "olympics",
        "gold_sql": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'John Aalberg'"
    },
    {
        "sample_id": 2937,
        "pred_sql": "SELECT T.name, SUM(PT.rebounds) AS total_rebounds\nFROM teams AS T\nINNER JOIN players_teams AS PT ON T.tmid = PT.tmid AND T.year = PT.year\nWHERE T.playoff IS NULL AND T.year = '1997'\nGROUP BY T.name\nORDER BY total_rebounds DESC\nLIMIT 1;",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4214,
            "cost": 0.00073065
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 1997 ORDER BY T1.rebounds DESC LIMIT 1"
    },
    {
        "sample_id": 2910,
        "pred_sql": "SELECT (COUNT(DISTINCT p.playerid) * 100.0 / (SELECT COUNT(*) FROM players WHERE college = 'Auburn')) AS percentage FROM awards_players ap INNER JOIN players p ON ap.playerid = p.playerid WHERE p.college = 'Auburn' AND ap.award = 'All-Defensive Second Team';",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4185,
            "cost": 0.00071145
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.award = 'All-Defensive Second Team' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Auburn'"
    },
    {
        "sample_id": 2821,
        "pred_sql": "SELECT DISTINCT c.coachid FROM coaches c WHERE c.lgid = 'NBA' AND c.coachid IN (SELECT coachid FROM coaches WHERE lgid = 'NBA' GROUP BY coachid HAVING COUNT(DISTINCT tmid) > 2)",
        "retrieved": [
            2823
        ],
        "token_usage": {
            "tokens": 4212,
            "cost": 0.0007303499999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2"
    },
    {
        "sample_id": 2841,
        "pred_sql": "SELECT COUNT(awards_coaches.id) FROM awards_coaches INNER JOIN teams AS T2 ON awards_coaches.year = T2.year WHERE awards_coaches.year BETWEEN '1962' AND '1975'",
        "retrieved": [
            2930
        ],
        "token_usage": {
            "tokens": 4090,
            "cost": 0.00067965
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 1975"
    },
    {
        "sample_id": 2830,
        "pred_sql": "SELECT COUNT(DISTINCT players.playerid) AS mvp_winners FROM players JOIN awards_players ON players.playerid = awards_players.playerid WHERE players.birthcity = 'Whitestone' AND awards_players.award = 'MVP';",
        "retrieved": [
            2893
        ],
        "token_usage": {
            "tokens": 4128,
            "cost": 0.0007055999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'Houston'"
    },
    {
        "sample_id": 2846,
        "pred_sql": "SELECT MIN(weight) FROM players INNER JOIN player_allstar ON players.playerid = player_allstar.playerid WHERE players.college = 'UCLA'",
        "retrieved": [
            2814
        ],
        "token_usage": {
            "tokens": 4079,
            "cost": 0.0006743999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT MIN(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'UCLA'"
    },
    {
        "sample_id": 2904,
        "pred_sql": "SELECT CAST(teams.lost AS FLOAT) / (teams.won + teams.lost) * 100 AS percentage_lost FROM teams WHERE teams.name = 'Houston Mavericks'",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4070,
            "cost": 0.0006788999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT CAST(SUM(lost) AS REAL) * 100 / SUM(games) FROM teams WHERE name = 'Houston Mavericks'"
    },
    {
        "sample_id": 2876,
        "pred_sql": "SELECT COUNT(coachid) FROM (SELECT coachid, COUNT(*) as award_count FROM awards_coaches WHERE year BETWEEN '1950' AND '1970' GROUP BY coachid HAVING COUNT(*) > 1) AS award_counts;",
        "retrieved": [
            2930
        ],
        "token_usage": {
            "tokens": 4128,
            "cost": 0.0007006499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(coachID) FROM awards_coaches WHERE year BETWEEN 1950 AND 1970 GROUP BY coachID HAVING COUNT(coachID) > 1"
    },
    {
        "sample_id": 2951,
        "pred_sql": "SELECT teams.name FROM teams INNER JOIN (SELECT * FROM awards_players WHERE year = '1997' AND award = 'Rebounding Champion') AS T1 ON teams.tmid = T1.playerid WHERE teams.year = '1997'",
        "retrieved": [
            2867
        ],
        "token_usage": {
            "tokens": 4205,
            "cost": 0.0006946499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.year = 1997 GROUP BY T1.name ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1"
    },
    {
        "sample_id": 2889,
        "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name, (strftime('%Y', 'now') - strftime('%Y', p.birthdate)) AS age FROM awards_players ap JOIN players p ON ap.playerid = p.playerid WHERE ap.award = 'Finals MVP' AND ap.year = '2003';",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4177,
            "cost": 0.00070665
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.firstName, T1.middleName, T1.lastName , 2003 - strftime('%Y', T1.birthDate) FROM awards_players AS T2 JOIN players AS T1 ON T2.playerID = T1.playerID WHERE T2.award = 'Finals MVP' AND T2.year = 2003"
    },
    {
        "sample_id": 2908,
        "pred_sql": "WITH post_season_stats AS (\n    SELECT year, tmid, won, lost,\n           CAST(won AS FLOAT) / (won + lost) * 100 AS winning_percentage\n    FROM teams\n    WHERE tmid = 'CHS' AND year IN ('1946', '1947')\n)\nSELECT \n    MAX(CASE WHEN year = '1946' THEN winning_percentage END) - \n    MAX(CASE WHEN year = '1947' THEN winning_percentage END) AS winning_rate_difference\nFROM post_season_stats;",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4156,
            "cost": 0.0007219499999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1947 THEN 1 ELSE 0 END) - CAST(SUM(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1946 THEN 1 ELSE 0 END) FROM series_post"
    },
    {
        "sample_id": 2902,
        "pred_sql": "SELECT COUNT(*) AS black_all_star_players FROM players INNER JOIN player_allstar ON players.playerid = player_allstar.playerid WHERE player_allstar.season_id = 1973 AND players.race = 'B';",
        "retrieved": [
            2812
        ],
        "token_usage": {
            "tokens": 4117,
            "cost": 0.00068865
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1973 AND T1.race = 'B'"
    },
    {
        "sample_id": 2798,
        "pred_sql": "SELECT t1.name, t1.won FROM teams t1 JOIN teams t2 ON t1.year = '2005' AND t2.year = '2004' WHERE t1.won > t2.won;",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4068,
            "cost": 0.0006727499999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.name, T1.won FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE year = 2004 ) AS T2 on T1.tmID = T2.tmID WHERE T1.year = 2005 and T1.won > T2.won"
    },
    {
        "sample_id": 2845,
        "pred_sql": "SELECT players.firstname, players.lastname FROM players WHERE players.height > 75",
        "retrieved": [
            2947
        ],
        "token_usage": {
            "tokens": 4070,
            "cost": 0.0006604499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.height > 75"
    },
    {
        "sample_id": 2933,
        "pred_sql": "SELECT playerid FROM players_teams WHERE year = '1988' AND tmid NOT IN (SELECT tmid FROM teams WHERE year = '1988' AND playoff IS NOT NULL) ORDER BY turnovers DESC LIMIT 1;",
        "retrieved": [
            2804
        ],
        "token_usage": {
            "tokens": 4124,
            "cost": 0.0006968999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T2.playerID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.PostGP = 0 AND T1.year = 1988 ORDER BY T1.turnovers DESC LIMIT 1"
    },
    {
        "sample_id": 2856,
        "pred_sql": "SELECT COUNT(DISTINCT players.playerid) \nFROM players \nJOIN players_teams ON players.playerid = players_teams.playerid \nJOIN teams ON players_teams.tmid = teams.tmid AND players_teams.year = teams.year \nWHERE teams.year = '1990' \nAND CAST(teams.won AS FLOAT) / (CAST(teams.won AS FLOAT) + CAST(teams.lost AS FLOAT)) > 0.75;",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4143,
            "cost": 0.00071955
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990"
    },
    {
        "sample_id": 2864,
        "pred_sql": "SELECT players.firstname, players.lastname, COUNT(awards_players.award) AS award_count \nFROM players \nJOIN awards_players ON players.playerid = awards_players.playerid \nWHERE players.deathdate != '0000-00-00' \nGROUP BY players.playerid \nORDER BY award_count DESC \nLIMIT 1;",
        "retrieved": [
            2893
        ],
        "token_usage": {
            "tokens": 4145,
            "cost": 0.0007171499999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1"
    },
    {
        "sample_id": 2885,
        "pred_sql": "SELECT coachid, year, tmid, won, lost FROM coaches WHERE year = '1988' AND won > lost ORDER BY won DESC LIMIT 1;",
        "retrieved": [
            2804
        ],
        "token_usage": {
            "tokens": 4077,
            "cost": 0.0006705
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT coachID FROM coaches WHERE year = 1988 ORDER BY won - lost DESC LIMIT 1"
    },
    {
        "sample_id": 2932,
        "pred_sql": "SELECT P.firstname, P.lastname, MAX(PA.steals) AS max_steals\nFROM players AS P\nJOIN players_teams AS PT ON P.playerid = PT.playerid\nJOIN player_allstar AS PA ON P.playerid = PA.playerid\nLEFT JOIN teams AS T ON PT.tmid = T.tmid AND PT.year = T.year\nWHERE PT.year = '1996' AND T.playoff IS NULL\nGROUP BY P.playerid\nORDER BY max_steals DESC\nLIMIT 1;",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4286,
            "cost": 0.0007725
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 AND T2.PostGP = 0 ORDER BY T2.steals DESC LIMIT 1"
    },
    {
        "sample_id": 2898,
        "pred_sql": "SELECT coaches.coachid FROM coaches WHERE coaches.tmid = 'OKC'",
        "retrieved": [
            2823
        ],
        "token_usage": {
            "tokens": 4067,
            "cost": 0.0006460499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT DISTINCT coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE name = 'Oklahoma City Thunder'"
    },
    {
        "sample_id": 2870,
        "pred_sql": "SELECT coaches.coachid, MAX(coaches.won) AS max_won_games\nFROM awards_coaches\nINNER JOIN coaches ON awards_coaches.coachid = coaches.coachid\nWHERE awards_coaches.award = 'ABA Coach of the Year'\nGROUP BY coaches.coachid\nORDER BY max_won_games DESC\nLIMIT 1;",
        "retrieved": [
            2930
        ],
        "token_usage": {
            "tokens": 4177,
            "cost": 0.0007268999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.award = 'ABA Coach of the Year' GROUP BY T1.coachID, T1.won ORDER BY T1.won DESC LIMIT 1"
    },
    {
        "sample_id": 2919,
        "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name, pt.tmid, MAX(pt.blocks) AS max_blocks\nFROM players AS p\nJOIN players_teams AS pt ON p.playerid = pt.playerid\nWHERE p.birthcity = 'Atlanta'\nGROUP BY p.playerid, pt.tmid\nORDER BY max_blocks DESC\nLIMIT 1;",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4245,
            "cost": 0.0007429499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.firstName, T1.lastName, T2.tmID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Atlanta' ORDER BY T2.blocks DESC LIMIT 1"
    },
    {
        "sample_id": 2873,
        "pred_sql": "SELECT teams.name FROM teams INNER JOIN (SELECT * FROM teams WHERE lgID = 'ABA' AND year = 1972) AS T2 ON teams.tmid = T2.tmid WHERE teams.lgid = (SELECT lgid FROM draft WHERE firstname = 'Mike' AND lastname = 'Lynn') AND teams.year = (SELECT draftyear FROM draft WHERE firstname = 'Mike' AND lastname = 'Lynn')",
        "retrieved": [
            2867
        ],
        "token_usage": {
            "tokens": 4209,
            "cost": 0.0007011
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.name FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.draftYear WHERE T2.firstName = 'Mike' AND T2.lastName = 'Lynn'"
    },
    {
        "sample_id": 2946,
        "pred_sql": "SELECT teams.name FROM players_teams INNER JOIN players ON players_teams.playerid = players.playerid INNER JOIN teams ON players_teams.tmid = teams.tmid WHERE players_teams.year = '2000' AND players_teams.gp = 82 AND players_teams.minutes = (SELECT MIN(minutes) FROM players_teams WHERE year = '2000' AND gp = 82)",
        "retrieved": [
            2814
        ],
        "token_usage": {
            "tokens": 4204,
            "cost": 0.0007417499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = 82 AND T2.year = 2000 GROUP BY T1.tmID ORDER BY SUM(T2.PostMinutes) ASC LIMIT 1"
    },
    {
        "sample_id": 2938,
        "pred_sql": "SELECT players_teams.tmid FROM draft INNER JOIN players_teams ON draft.playerid = players_teams.playerid WHERE draft.draftyear = '1976' AND draft.draftround = '1' AND draft.draftselection = '6';",
        "retrieved": [
            2901
        ],
        "token_usage": {
            "tokens": 4112,
            "cost": 0.0006879
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T2.tmID FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 6 AND T1.draftYear = 1976"
    },
    {
        "sample_id": 2842,
        "pred_sql": "SELECT coachid FROM awards_coaches WHERE year BETWEEN '1970' AND '1990' GROUP BY coachid HAVING COUNT(award) = 2;",
        "retrieved": [
            2915
        ],
        "token_usage": {
            "tokens": 4038,
            "cost": 0.00066375
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID, award HAVING COUNT(award) = 2"
    },
    {
        "sample_id": 2943,
        "pred_sql": "SELECT SUM(pt.points) AS total_points FROM players AS p INNER JOIN players_teams AS pt ON p.playerid = pt.playerid WHERE p.pos IN ('C', 'F', 'G') AND p.playerid = (SELECT playerid FROM players ORDER BY birthdate DESC LIMIT 1)",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4149,
            "cost": 0.00068895
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.pos = 'C-F-G' GROUP BY T2.playerID, T2.year ORDER BY T2.year DESC LIMIT 1"
    },
    {
        "sample_id": 2799,
        "pred_sql": "SELECT teams.name, teams.o_pts FROM teams WHERE (CAST(teams.homewon AS FLOAT) / (teams.homewon + teams.homelost)) > 0.8",
        "retrieved": [
            2835
        ],
        "token_usage": {
            "tokens": 4078,
            "cost": 0.0006791999999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT name, o_pts FROM teams WHERE CAST((homeWon - homeLost) AS REAL) * 100 / games > 80"
    },
    {
        "sample_id": 2940,
        "pred_sql": "SELECT p.weight, p.height FROM players p INNER JOIN player_allstar pa ON p.playerid = pa.playerid GROUP BY p.playerid ORDER BY SUM(pa.rebounds) DESC LIMIT 1;",
        "retrieved": [
            2812
        ],
        "token_usage": {
            "tokens": 4152,
            "cost": 0.0007074
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.weight, T1.height FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID ORDER BY T2.rebounds DESC LIMIT 1"
    },
    {
        "sample_id": 2840,
        "pred_sql": "SELECT players.lastname FROM players INNER JOIN players_teams ON players.playerid = players_teams.playerid WHERE players_teams.tmid = 'BLB'",
        "retrieved": [
            2872
        ],
        "token_usage": {
            "tokens": 4118,
            "cost": 0.0006761999999999998
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'BLB'"
    },
    {
        "sample_id": 2913,
        "pred_sql": "SELECT DISTINCT playerid FROM player_allstar WHERE season_id = 1996 AND ft_made / ft_attempted > 0.7",
        "retrieved": [
            2914
        ],
        "token_usage": {
            "tokens": 4112,
            "cost": 0.0006793499999999999
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT playerID FROM player_allstar WHERE season_id = 1996 AND CAST(ft_made AS REAL) * 100 / ft_attempted > 70"
    },
    {
        "sample_id": 2852,
        "pred_sql": "SELECT MAX(pt.points) FROM (SELECT pt.playerid, SUM(pt.points) AS points FROM players_teams AS pt INNER JOIN teams AS t ON pt.tmid = t.tmid AND pt.year = t.year WHERE t.rank = 1 AND pt.year BETWEEN '1950' AND '1970' GROUP BY pt.playerid) AS pt;",
        "retrieved": [
            2838
        ],
        "token_usage": {
            "tokens": 4217,
            "cost": 0.00073065
        },
        "db_id": "professional_basketball",
        "gold_sql": "SELECT MAX(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1950 AND 1970 AND T1.rank = 1"
    },
    {
        "sample_id": 4029,
        "pred_sql": "SELECT COUNT(tips.user_id) * 100.0 / (SELECT COUNT(*) FROM tips) AS medium_tip_percentage, users.user_yelping_since_year FROM tips JOIN users ON tips.user_id = users.user_id WHERE tips.tip_length = 'medium'",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2080,
            "cost": 0.00037095
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.tip_length = 'Medium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tip_length), T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id"
    },
    {
        "sample_id": 3913,
        "pred_sql": "SELECT business.business_id, COUNT(reviews.review_stars) AS review_count, STDEV(reviews.review_stars) AS stddev_review_stars\nFROM business\nJOIN reviews ON business.business_id = reviews.business_id\nWHERE business.active = 'True'\nGROUP BY business.business_id\nORDER BY review_count DESC\nLIMIT 1;",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2190,
            "cost": 0.00042929999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.category_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Reviews AS T3 ON T3.business_id = T1.business_id WHERE T2.category_name = 'Hotels & Travel' GROUP BY T2.category_id ORDER BY COUNT(T2.category_id) DESC LIMIT 1"
    },
    {
        "sample_id": 3876,
        "pred_sql": "SELECT AVG(users.user_average_stars) FROM users JOIN reviews ON users.user_id = reviews.user_id JOIN business ON reviews.business_id = business.business_id WHERE users.user_id = 3 AND business.state = 'Arizona';",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2103,
            "cost": 0.00038745
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state LIKE 'AZ' AND T2.user_id = 3"
    },
    {
        "sample_id": 3987,
        "pred_sql": "SELECT COUNT(*) FROM business WHERE stars = 2 AND city = 'Phoenix' AND state = 'Arizona' AND active = 'True'",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2168,
            "cost": 0.0003774
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND state = 'AZ' AND stars = 2"
    },
    {
        "sample_id": 3945,
        "pred_sql": "SELECT business.city FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id INNER JOIN days ON business_hours.day_id = days.day_id WHERE business_hours.opening_time = '13:00' AND business_hours.closing_time = '18:00' AND days.day_of_week = '6'",
        "retrieved": [
            3947
        ],
        "token_usage": {
            "tokens": 2167,
            "cost": 0.00040109999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '6PM' AND T2.opening_time LIKE '1PM' AND T3.day_of_week LIKE 'Saturday'"
    },
    {
        "sample_id": 3985,
        "pred_sql": "SELECT uc.compliment_type, u.user_fans\nFROM users_compliments uc\nJOIN users u ON uc.user_id = u.user_id\nWHERE u.user_id < 100\nGROUP BY uc.compliment_type\nORDER BY SUM(uc.number_of_compliments) DESC\nLIMIT 1;",
        "retrieved": [
            3936
        ],
        "token_usage": {
            "tokens": 2163,
            "cost": 0.00040229999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100"
    },
    {
        "sample_id": 3928,
        "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.active = 'True' \nAND b.city = 'Mesa' \nAND b.state = 'AZ' \nAND b.review_count < 10;",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2191,
            "cost": 0.00044114999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.review_count = 'Low' AND T1.city = 'Mesa' AND T1.active = 'true' AND T1.state = 'AZ'"
    },
    {
        "sample_id": 3786,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business JOIN business_categories ON business.business_id = business_categories.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'hair removal' AND business.active = 'True'",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2105,
            "cost": 0.0003918
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Hair Removal'"
    },
    {
        "sample_id": 3781,
        "pred_sql": "SELECT business.business_id FROM business INNER JOIN reviews ON business.business_id = reviews.business_id WHERE business.active = 'False' AND business.city = 'Sun City' GROUP BY business.business_id ORDER BY COUNT(reviews.review_count) DESC LIMIT 1;",
        "retrieved": [
            4052
        ],
        "token_usage": {
            "tokens": 2202,
            "cost": 0.00040679999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Sun City' AND T1.active LIKE 'FALSE' GROUP BY T1.business_id ORDER BY COUNT(T2.review_length) DESC LIMIT 1"
    },
    {
        "sample_id": 3939,
        "pred_sql": "SELECT COUNT(DISTINCT business_id) AS total_businesses_open_24_hours FROM business_hours WHERE (closing_time - opening_time) = 24",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2161,
            "cost": 0.00038174999999999993
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Open 24 Hours'"
    },
    {
        "sample_id": 4025,
        "pred_sql": "SELECT COUNT(business_attributes.business_id) FROM business_attributes INNER JOIN business ON business_attributes.business_id = business.business_id WHERE business.stars > 3 AND business_attributes.attribute_value = 'full_bar'",
        "retrieved": [
            4032
        ],
        "token_usage": {
            "tokens": 2109,
            "cost": 0.00038609999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'full_bar'"
    },
    {
        "sample_id": 3774,
        "pred_sql": "SELECT (COUNT(CASE WHEN bc.category_id = (SELECT category_id FROM categories WHERE category_name = 'Automotive') THEN 1 END) * 100.0) / COUNT(*) AS percentage_automotive_businesses FROM business_categories bc JOIN business b ON bc.business_id = b.business_id;",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2088,
            "cost": 0.00037979999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Automotive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"percentage\" FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 4080,
        "pred_sql": "SELECT users.user_id, users.user_yelping_since_year FROM users INNER JOIN users_compliments ON users.user_id = users_compliments.user_id WHERE users_compliments.number_of_compliments >= 100 LIMIT 5;",
        "retrieved": [
            3909
        ],
        "token_usage": {
            "tokens": 2153,
            "cost": 0.00039945
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T3.user_id, T3.user_yelping_since_year FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.compliment_type = 'profile' AND T2.number_of_compliments = 'Uber' LIMIT 5"
    },
    {
        "sample_id": 3868,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS good_for_kids_businesses\nFROM business b\nJOIN business_attributes ba ON b.business_id = ba.business_id\nWHERE ba.attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'Good for Kids')\nAND b.business_id IN (\n    SELECT bh.business_id\n    FROM business_hours bh\n    JOIN days d ON bh.day_id = d.day_id\n    GROUP BY bh.business_id\n    HAVING COUNT(DISTINCT d.day_id) = 7\n)",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2258,
            "cost": 0.00043634999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Attributes AS T3 ON T1.business_id = T3.business_id INNER JOIN Attributes AS T4 ON T4.attribute_id = T4.attribute_id WHERE T2.day_id IN (1, 2, 3, 4, 5, 6, 7) AND T4.attribute_name = 'Good for Kids' AND T3.attribute_value = 'true'"
    },
    {
        "sample_id": 3920,
        "pred_sql": "SELECT review_length FROM reviews WHERE user_id = 60776 AND business_id = 1;",
        "retrieved": [
            4052
        ],
        "token_usage": {
            "tokens": 2151,
            "cost": 0.00037799999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT review_length FROM Reviews WHERE user_id = 60776 AND business_id = 1"
    },
    {
        "sample_id": 4089,
        "pred_sql": "SELECT AVG(tip_length) AS average_tip_length FROM tips JOIN users ON tips.user_id = users.user_id WHERE users.user_average_stars = 3",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2059,
            "cost": 0.00036105
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY COUNT(T2.tip_length) DESC LIMIT 1"
    },
    {
        "sample_id": 4015,
        "pred_sql": "SELECT b.business_id, bh.opening_time, bh.closing_time FROM business b INNER JOIN business_hours bh ON b.business_id = bh.business_id INNER JOIN reviews r ON b.business_id = r.business_id WHERE b.city = 'Black Canyon City' AND b.active = 'True' GROUP BY b.business_id HAVING COUNT(r.review_id) > (SELECT AVG(review_count) FROM (SELECT COUNT(*) AS review_count FROM reviews GROUP BY business_id))",
        "retrieved": [
            4052
        ],
        "token_usage": {
            "tokens": 2230,
            "cost": 0.00042584999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' GROUP BY t2.business_id HAVING T1.review_count > AVG(T1.review_count)"
    },
    {
        "sample_id": 4037,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_votes_funny > 0 AND users.user_fans > 0",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2051,
            "cost": 0.0003585
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT user_id) FROM Reviews WHERE review_votes_funny = 'Uber'"
    },
    {
        "sample_id": 3859,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Food' AND b.business_id IN (SELECT business_id FROM business_attributes WHERE attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'Good for Kids')) AND b.active = 'True';",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2175,
            "cost": 0.00043109999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T3.stars) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.category_name LIKE 'Food' AND T5.attribute_name LIKE 'Good for Kids' AND T4.attribute_value LIKE 'TRUE'"
    },
    {
        "sample_id": 3922,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS count_below_3_stars FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE c.category_name = 'automotive' AND b.stars < 3;",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2123,
            "cost": 0.0003908999999999999
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Automotive' AND T1.stars < 3"
    },
    {
        "sample_id": 4094,
        "pred_sql": "SELECT DISTINCT bc.category_id FROM business b JOIN business_categories bc ON b.business_id = bc.business_id WHERE b.stars = '5'",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2080,
            "cost": 0.00036825
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.stars = 5"
    },
    {
        "sample_id": 3803,
        "pred_sql": "SELECT business.business_id FROM business JOIN business_categories ON business.business_id = business_categories.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE business.stars < 5 AND categories.category_name = 'men's clothing'",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2116,
            "cost": 0.00038714999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Men''s Clothing' AND T3.stars < 5"
    },
    {
        "sample_id": 3831,
        "pred_sql": "SELECT (business_hours.closing_time - business_hours.opening_time) AS hours_open FROM business_hours INNER JOIN days ON business_hours.day_id = days.day_id WHERE days.day_of_week = 'Friday' AND business_hours.business_id = 53;",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2193,
            "cost": 0.00039959999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.closing_time - T1.opening_time AS \"opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Friday' AND T1.business_id = 53"
    },
    {
        "sample_id": 4088,
        "pred_sql": "SELECT SUM(tips.likes) FROM tips JOIN users ON tips.user_id = users.user_id WHERE users.user_yelping_since_year = 2010 AND tips.tip_length < 50;",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2097,
            "cost": 0.00038429999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010"
    },
    {
        "sample_id": 4132,
        "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.city = 'Goodyear' AND b.state = 'AZ' AND b.active = 'True' AND b.review_count > 10;",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2175,
            "cost": 0.00042974999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.review_count = 'High' AND T1.city = 'Goodyear' AND T1.state = 'AZ' AND T1.active = 'true'"
    },
    {
        "sample_id": 3801,
        "pred_sql": "SELECT COUNT(DISTINCT bc.business_id) AS open_business_count\nFROM business_categories AS bc\nINNER JOIN categories AS c ON bc.category_id = c.category_id\nINNER JOIN business_hours AS bh ON bc.business_id = bh.business_id\nINNER JOIN days AS d ON bh.day_id = d.day_id\nWHERE c.category_name = 'your_category_name' \nAND d.day_of_week IN (1, 2, 3, 4) \nAND bh.opening_time IS NOT NULL \nAND bh.closing_time IS NOT NULL;",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2176,
            "cost": 0.00040919999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id INNER JOIN Days AS T5 ON T4.day_id = T5.day_id WHERE T5.day_of_week LIKE 'Monday' OR T5.day_of_week LIKE 'Tuesday' OR T5.day_of_week LIKE 'Wednesday' OR T5.day_of_week LIKE 'Thursday'"
    },
    {
        "sample_id": 3810,
        "pred_sql": "SELECT COUNT(business.business_id) AS business_count, (COUNT(business.business_id) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage FROM business WHERE business.city = 'Phoenix' AND business.active = 'True';",
        "retrieved": [
            3898
        ],
        "token_usage": {
            "tokens": 2133,
            "cost": 0.00040679999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.city) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id"
    },
    {
        "sample_id": 3895,
        "pred_sql": "SELECT business_hours.opening_time FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id INNER JOIN reviews ON business.business_id = reviews.business_id WHERE business.active = 'True' AND business.city = 'Chandler' AND reviews.review_count = 'medium'",
        "retrieved": [
            4052
        ],
        "token_usage": {
            "tokens": 2196,
            "cost": 0.000405
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Chandler' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'"
    },
    {
        "sample_id": 3811,
        "pred_sql": "SELECT COUNT(DISTINCT city) AS active_city_count, (SELECT COUNT(*) FROM business WHERE review_count < 10) * 100.0 / COUNT(*) AS low_review_percentage FROM business WHERE business_id IN (SELECT business_id FROM business_categories WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'active life'))",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2106,
            "cost": 0.0003879
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id"
    },
    {
        "sample_id": 3875,
        "pred_sql": "SELECT AVG(reviews.review_stars) AS average_stars FROM reviews JOIN business ON reviews.business_id = business.business_id WHERE business.city = 'Anthem'",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2093,
            "cost": 0.0003738
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Anthem'"
    },
    {
        "sample_id": 3806,
        "pred_sql": "SELECT business_attributes.attribute_value FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN attributes ON business_attributes.attribute_id = attributes.attribute_id WHERE business.city = 'Scottsdale' AND business.active = 'True' AND business_categories.category_id IN (SELECT category_id FROM categories WHERE category_name LIKE '%fashion%')",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2209,
            "cost": 0.00040065
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T4.category_name LIKE 'Fashion' AND T1.city LIKE 'Scottsdale'"
    },
    {
        "sample_id": 4070,
        "pred_sql": "WITH OpenBusinesses AS (  SELECT b.business_id  FROM business b  INNER JOIN business_categories bc ON b.business_id = bc.business_id  INNER JOIN categories c ON bc.category_id = c.category_id  INNER JOIN business_hours bh ON b.business_id = bh.business_id  WHERE c.category_name = 'food' AND bh.opening_time <= 700 AND bh.closing_time >= 2000), TotalBusinesses AS (  SELECT COUNT(*) AS total FROM business b  INNER JOIN business_categories bc ON b.business_id = bc.business_id  INNER JOIN categories c ON bc.category_id = c.category_id  WHERE c.category_name = 'food') SELECT (COUNT(*) * 100.0 / (SELECT total FROM TotalBusinesses)) AS percentage FROM OpenBusinesses;",
        "retrieved": [
            3837
        ],
        "token_usage": {
            "tokens": 2277,
            "cost": 0.00046754999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.category_name = 'Food' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.category_name) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id"
    },
    {
        "sample_id": 4126,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) AS business_count FROM business JOIN business_categories ON business.business_id = business_categories.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'food' AND business.stars < 3;",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2129,
            "cost": 0.00039449999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.stars < 3"
    },
    {
        "sample_id": 4129,
        "pred_sql": "SELECT categories.category_name FROM reviews INNER JOIN business AS T2 ON reviews.business_id = T2.business_id INNER JOIN business_categories AS T3 ON T2.business_id = T3.business_id INNER JOIN categories AS T4 ON T3.category_id = T4.category_id WHERE reviews.review_length < 50 AND T2.business_id BETWEEN 7 AND 14 ORDER BY reviews.review_stars DESC LIMIT 1",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2284,
            "cost": 0.000447
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T3.category_name FROM Reviews AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T2.business_id >= 7 AND T2.business_id < 15 AND T1.review_length = 'Short' AND T1.review_stars = ( SELECT MAX(review_stars) FROM Reviews )"
    },
    {
        "sample_id": 3992,
        "pred_sql": "SELECT DISTINCT business.business_id FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN business_hours ON business.business_id = business_hours.business_id INNER JOIN days ON business_hours.day_id = days.day_id WHERE business.active = 'True' AND business_categories.category_id IN (SELECT category_id FROM categories WHERE category_name = 'tires') GROUP BY business.business_id HAVING COUNT(DISTINCT days.day_id) = 7",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2206,
            "cost": 0.00042855
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7"
    },
    {
        "sample_id": 4009,
        "pred_sql": "SELECT (COUNT(CASE WHEN b.stars > 3 THEN 1 END) * 100.0 / COUNT(*)) AS percent_wonderful_experience\nFROM business b\nWHERE b.city = 'Avondale' AND b.state = 'AZ' AND b.active = 'False';",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2280,
            "cost": 0.00043919999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business WHERE city = 'Avondale' AND active = 'false'"
    },
    {
        "sample_id": 3778,
        "pred_sql": "SELECT COUNT(business.business_id) FROM business WHERE business.active = 'True' AND business.city = 'Tolleson'",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2083,
            "cost": 0.00037725
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Tolleson' AND active LIKE 'TRUE'"
    },
    {
        "sample_id": 3822,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_yelping_since_year >= 2012 AND users.user_votes_funny > 10",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2149,
            "cost": 0.00041369999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012 AND user_votes_funny LIKE 'High'"
    },
    {
        "sample_id": 4117,
        "pred_sql": "SELECT AVG(b.stars) AS average_stars FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Obstetricians & Gynecologists'",
        "retrieved": [
            3954
        ],
        "token_usage": {
            "tokens": 2072,
            "cost": 0.0003765
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Obstetricians & Gynecologists'"
    },
    {
        "sample_id": 4104,
        "pred_sql": "SELECT COUNT(DISTINCT business_id) AS number_of_businesses FROM (SELECT business_id, COUNT(DISTINCT day_id) AS open_days, SUM(closing_time - opening_time) AS total_hours FROM business_hours GROUP BY business_id HAVING COUNT(DISTINCT day_id) = 7 AND SUM(closing_time - opening_time) / 7 = (SELECT SUM(closing_time - opening_time) / COUNT(DISTINCT day_id) FROM business_hours WHERE business_id = business_hours.business_id)) AS consistent_hours;",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2297,
            "cost": 0.00046064999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'"
    },
    {
        "sample_id": 3906,
        "pred_sql": "SELECT categories.category_name FROM reviews INNER JOIN business AS T2 ON reviews.business_id = T2.business_id INNER JOIN business_categories AS T3 ON T2.business_id = T3.business_id INNER JOIN categories AS T4 ON T3.category_id = T4.category_id WHERE reviews.review_stars = 4 OR reviews.review_stars = 3 AND T2.state = 'Arizona' GROUP BY categories.category_name ORDER BY COUNT(reviews.review_stars) DESC;",
        "retrieved": [
            3888
        ],
        "token_usage": {
            "tokens": 2268,
            "cost": 0.000441
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3"
    },
    {
        "sample_id": 4083,
        "pred_sql": "SELECT (COUNT(CASE WHEN (bh.closing_time - bh.opening_time) = 12 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_opened_sunday\nFROM business b\nJOIN business_hours bh ON b.business_id = bh.business_id\nWHERE bh.day_id = 1 AND b.active = 'True';",
        "retrieved": [
            3837
        ],
        "token_usage": {
            "tokens": 2221,
            "cost": 0.00043484999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.opening_time = '9AM' AND T2.closing_time = '9PM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.day_id) FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday'"
    },
    {
        "sample_id": 4135,
        "pred_sql": "SELECT business_attributes.attribute_value FROM business_attributes JOIN (SELECT business.business_id FROM business WHERE business.stars = '3' AND business.city = 'Goodyear' AND business.review_count < '10' AND business.active = 'True') AS active_businesses ON business_attributes.business_id = active_businesses.business_id",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2124,
            "cost": 0.00038789999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state = 'AZ' AND T1.city = 'Goodyear' AND T1.active = 'true' AND T1.stars = 3 AND T1.review_count = 'Low'"
    },
    {
        "sample_id": 3760,
        "pred_sql": "SELECT COUNT(reviews.business_id) FROM reviews INNER JOIN users ON reviews.user_id = users.user_id WHERE users.user_id = 36139 AND reviews.review_length > 100",
        "retrieved": [
            3909
        ],
        "token_usage": {
            "tokens": 2132,
            "cost": 0.00039135
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 36139 AND review_length LIKE 'long'"
    },
    {
        "sample_id": 4031,
        "pred_sql": "SELECT business.state FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business_hours.closing_time = '12:00 AM' AND business.active = 'True';",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2214,
            "cost": 0.00040454999999999994
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.closing_time = '12AM'"
    },
    {
        "sample_id": 4049,
        "pred_sql": "SELECT COUNT(*) AS total_businesses, SUM(CASE WHEN hours_open > 8 THEN 1 ELSE 0 END) AS businesses_open_more_than_8_hours, (SUM(CASE WHEN active = 'True' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS active_business_percentage\nFROM (\n    SELECT b.business_id, b.active, (bh.closing_time - bh.opening_time) AS hours_open\n    FROM business b\n    INNER JOIN business_hours bh ON b.business_id = bh.business_id\n    WHERE b.city = 'Mesa'\n) AS business_info;",
        "retrieved": [
            3837
        ],
        "token_usage": {
            "tokens": 2272,
            "cost": 0.00046725
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS ACT FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'"
    },
    {
        "sample_id": 4020,
        "pred_sql": "SELECT business_hours.closing_time FROM business_hours INNER JOIN days ON business_hours.day_id = days.day_id WHERE days.day_of_week = 'Sunday' AND business_hours.business_id = 4",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2181,
            "cost": 0.0003924
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.closing_time FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.business_id = 4"
    },
    {
        "sample_id": 4021,
        "pred_sql": "SELECT business.business_id FROM business WHERE business.city LIKE 'Phoenix' AND business.review_count < 50",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2081,
            "cost": 0.0003782999999999999
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_length = 'Short'"
    },
    {
        "sample_id": 3973,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM compliments)) AS percentage_low_compliments FROM users_compliments WHERE number_of_compliments < 5;",
        "retrieved": [
            3936
        ],
        "token_usage": {
            "tokens": 2185,
            "cost": 0.00041685
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users_compliments"
    },
    {
        "sample_id": 3919,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_yelping_since_year BETWEEN 2010 AND 2012 AND users.user_fans < 10",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2042,
            "cost": 0.00034859999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2010 AND 2012 AND user_fans LIKE 'Low'"
    },
    {
        "sample_id": 3994,
        "pred_sql": "SELECT business.business_id FROM business WHERE business.stars = '4' AND business.business_id IN (SELECT business_id FROM business_categories WHERE category_id = (SELECT category_id FROM categories WHERE category_name = 'shopping'))",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2108,
            "cost": 0.00038459999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Shopping' AND T1.stars = 4"
    },
    {
        "sample_id": 3930,
        "pred_sql": "SELECT business.city, business.state FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business_hours.opening_time = 900 AND business_hours.closing_time = 2100 AND business_hours.day_id = (SELECT day_id FROM days WHERE day_of_week = 6)",
        "retrieved": [
            3837
        ],
        "token_usage": {
            "tokens": 2199,
            "cost": 0.00042479999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '9AM' AND T3.day_of_week LIKE 'Saturday' GROUP BY T1.city"
    },
    {
        "sample_id": 4100,
        "pred_sql": "SELECT COUNT(*) AS active_business_count FROM business WHERE city = 'Mesa' AND active = 'True'",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2181,
            "cost": 0.00038564999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Mesa' AND active = 'true'"
    },
    {
        "sample_id": 3866,
        "pred_sql": "SELECT COUNT(*) FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id INNER JOIN days ON business_hours.day_id = days.day_id WHERE business.city = 'Arizona' AND business.active = 'True' AND business_hours.closing_time = '12:00 PM' AND days.day_of_week = 0;",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2299,
            "cost": 0.00045285
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM' AND T3.state LIKE 'AZ'"
    },
    {
        "sample_id": 4123,
        "pred_sql": "SELECT COUNT(users.user_id) FROM users WHERE users.user_yelping_since_year BETWEEN 2009 AND 2011 AND users.user_fans < 10",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2046,
            "cost": 0.00035055
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year >= 2009 AND user_yelping_since_year < 2012 AND user_fans = 'Low'"
    },
    {
        "sample_id": 4067,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) AS active_businesses_after_12PM FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business.city = 'Arizona' AND business.active = 'True' AND business_hours.closing_time > 12",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2221,
            "cost": 0.00040784999999999997
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T1.opening_time > '12PM'"
    },
    {
        "sample_id": 3923,
        "pred_sql": "SELECT business.business_id, business.stars FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'Pets' AND business.active = 'True'",
        "retrieved": [
            4084
        ],
        "token_usage": {
            "tokens": 2230,
            "cost": 0.00044879999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Pets'"
    },
    {
        "sample_id": 4086,
        "pred_sql": "SELECT business.business_id, business.active, business.city FROM business JOIN reviews ON business.business_id = reviews.business_id WHERE reviews.review_stars >= 4 GROUP BY business.business_id HAVING COUNT(CASE WHEN reviews.review_stars >= 4 THEN 1 END) * 1.0 / COUNT(reviews.review_stars) >= 0.65;",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2197,
            "cost": 0.0004326
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T2.business_id, T2.city FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 AND ( SELECT CAST(( SELECT COUNT(DISTINCT T1.user_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 ) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users ) > 65 )"
    },
    {
        "sample_id": 3894,
        "pred_sql": "SELECT business_attributes.attribute_value FROM business_attributes JOIN (SELECT business.business_id FROM business WHERE business.stars = '3' AND business.city = 'Mesa' AND business.review_count > '0') AS active_businesses ON business_attributes.business_id = active_businesses.business_id WHERE business_attributes.attribute_id IN (SELECT attribute_id FROM attributes)",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2138,
            "cost": 0.00039719999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3"
    },
    {
        "sample_id": 3773,
        "pred_sql": "SELECT business.stars FROM business JOIN tips ON business.business_id = tips.business_id WHERE tips.user_id = 69722",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2055,
            "cost": 0.00035505
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.stars FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.user_id = 69722"
    },
    {
        "sample_id": 3788,
        "pred_sql": "SELECT business.city FROM business INNER JOIN tips ON business.business_id = tips.business_id WHERE tips.user_id = 63469 AND tips.likes = 1;",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2064,
            "cost": 0.0003627
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.likes = 1 AND T2.user_id = 63469"
    },
    {
        "sample_id": 3857,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) FROM business JOIN business_categories ON business.business_id = business_categories.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE business.city = 'Anthem' AND categories.category_name = 'Food';",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2109,
            "cost": 0.00039195
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' AND T3.city LIKE 'Anthem'"
    },
    {
        "sample_id": 3986,
        "pred_sql": "SELECT business.business_id, business.city, business.state FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id WHERE business_hours.closing_time = 20",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2194,
            "cost": 0.0003938999999999999
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE closing_time = '8PM'"
    },
    {
        "sample_id": 3967,
        "pred_sql": "SELECT (COUNT(DISTINCT b.business_id) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Pets';",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2130,
            "cost": 0.00040409999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category_name) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 3770,
        "pred_sql": "SELECT c.category_name FROM business_categories bc JOIN business b ON bc.business_id = b.business_id JOIN tips t ON b.business_id = t.business_id JOIN categories c ON bc.category_id = c.category_id GROUP BY b.business_id ORDER BY COUNT(t.tip_length) DESC LIMIT 1;",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2136,
            "cost": 0.00040544999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'"
    },
    {
        "sample_id": 4118,
        "pred_sql": "SELECT (SELECT COUNT(user_id) FROM users WHERE user_yelping_since_year = 2011 AND user_fans > 100) * 100.0 / (SELECT COUNT(user_id) FROM users WHERE user_yelping_since_year = 2011) AS percentage_of_elite_users_with_high_fans;",
        "retrieved": [
            3882
        ],
        "token_usage": {
            "tokens": 2145,
            "cost": 0.0004122
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.user_fans = 'High' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.user_fans) FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.actual_year = 2011"
    },
    {
        "sample_id": 3993,
        "pred_sql": "SELECT users.user_id FROM users INNER JOIN elite ON users.user_id = elite.user_id WHERE elite.year_id = 2012",
        "retrieved": [
            3872
        ],
        "token_usage": {
            "tokens": 2093,
            "cost": 0.00037065
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT DISTINCT T1.user_id FROM Elite AS T1 INNER JOIN Years AS T2 ON T1.year_id = T2.year_id WHERE T2.actual_year = 2012"
    },
    {
        "sample_id": 3984,
        "pred_sql": "SELECT COUNT(business_categories.business_id) AS business_count, categories.category_name FROM business_categories INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name IN ('Men''s Clothing', 'Women''s Clothing') GROUP BY categories.category_name;",
        "retrieved": [
            4032
        ],
        "token_usage": {
            "tokens": 2105,
            "cost": 0.00038235
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT SUM(CASE WHEN T1.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS diff FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id"
    },
    {
        "sample_id": 4013,
        "pred_sql": "SELECT COUNT(*) AS short_tips_count FROM tips WHERE business_id = 2 AND tip_length < 50;",
        "retrieved": [
            4084
        ],
        "token_usage": {
            "tokens": 2090,
            "cost": 0.00036615
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(business_id) FROM Tips WHERE business_id = 2 AND tip_length = 'Short'"
    },
    {
        "sample_id": 3903,
        "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count FROM business b INNER JOIN business_attributes ba ON b.business_id = ba.business_id WHERE b.city = 'Phoenix' AND b.state = 'Arizona' AND b.active = 'True' AND ba.attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'waiter service')",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2268,
            "cost": 0.0004374
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city LIKE 'Phoenix' AND T3.attribute_name LIKE 'waiter_service' AND T2.attribute_id = 2"
    },
    {
        "sample_id": 4060,
        "pred_sql": "SELECT business.business_id, COUNT(DISTINCT days.day_id) AS working_days_count\nFROM business\nINNER JOIN business_hours ON business.business_id = business_hours.business_id\nINNER JOIN days ON business_hours.day_id = days.day_id\nINNER JOIN business_categories ON business.business_id = business_categories.business_id\nINNER JOIN categories ON business_categories.category_id = categories.category_id\nWHERE days.day_of_week BETWEEN 1 AND 6  -- Monday to Saturday\nGROUP BY business.business_id\nORDER BY working_days_count DESC;",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2217,
            "cost": 0.00043065
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id GROUP BY T2.category_name ORDER BY COUNT(T3.day_id) DESC LIMIT 1"
    },
    {
        "sample_id": 4112,
        "pred_sql": "SELECT COUNT(*) AS open_business_count FROM business WHERE city = 'Phoenix' AND active = 'True' AND review_count > 100",
        "retrieved": [
            3916
        ],
        "token_usage": {
            "tokens": 2120,
            "cost": 0.00040169999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_length = 'Long' AND T2.active = 'true' AND T2.city = 'Phoenix'"
    },
    {
        "sample_id": 3798,
        "pred_sql": "SELECT DISTINCT business_hours.opening_time, business_hours.day_id FROM business_categories AS T1 INNER JOIN categories AS T2 ON T1.category_id = T2.category_id INNER JOIN business_hours AS T3 ON T1.business_id = T3.business_id INNER JOIN days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'fashion'",
        "retrieved": [
            4059
        ],
        "token_usage": {
            "tokens": 2136,
            "cost": 0.0003852
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T4.opening_time FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion'"
    },
    {
        "sample_id": 3785,
        "pred_sql": "SELECT (business_hours.closing_time - business_hours.opening_time) AS hours_open FROM business_hours INNER JOIN days ON business_hours.day_id = days.day_id WHERE days.day_of_week = 'Saturday' AND business_hours.business_id = '5734'",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2181,
            "cost": 0.00039059999999999995
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.closing_time - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Saturday' AND T1.business_id = 5734"
    },
    {
        "sample_id": 4116,
        "pred_sql": "SELECT COUNT(DISTINCT business.business_id) AS number_of_businesses\nFROM business\nINNER JOIN business_hours ON business.business_id = business_hours.business_id\nINNER JOIN days ON business_hours.day_id = days.day_id\nWHERE business.city = 'Scottsdale'\nAND business.active = 'True'\nAND days.day_of_week = 0  -- Assuming 0 represents Sunday\nAND business_hours.opening_time <= '12:00' AND business_hours.closing_time > '12:00';",
        "retrieved": [
            3934
        ],
        "token_usage": {
            "tokens": 2357,
            "cost": 0.00048945
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business AS T1 INNER JOIN Business_hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Scottsdale' AND T3.day_of_week = 'Sunday' AND T2.opening_time = '12PM'"
    },
    {
        "sample_id": 4061,
        "pred_sql": "SELECT business.business_id FROM business INNER JOIN business_hours ON business.business_id = business_hours.business_id INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id INNER JOIN days ON business_hours.day_id = days.day_id WHERE categories.category_name = 'Arts & Entertainment' AND days.day_of_week = 'Sunday' AND business_hours.closing_time IS NOT NULL;",
        "retrieved": [
            3960
        ],
        "token_usage": {
            "tokens": 2289,
            "cost": 0.00045449999999999993
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'"
    },
    {
        "sample_id": 3858,
        "pred_sql": "SELECT business.business_id FROM business JOIN elite ON business.business_id = elite.user_id WHERE business.stars = (SELECT MAX(business.stars) FROM business JOIN business_categories ON business.business_id = business_categories.business_id JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'Food')",
        "retrieved": [
            4102
        ],
        "token_usage": {
            "tokens": 2157,
            "cost": 0.00040994999999999996
        },
        "db_id": "public_review_platform",
        "gold_sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' ORDER BY T3.stars DESC LIMIT 1"
    },
    {
        "sample_id": 2697,
        "pred_sql": "SELECT (SUM(CASE WHEN so.orderdate = '04/04/2020' AND sl.state = 'New York' THEN so.order quantity ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_of_orders FROM \"sales orders\" so JOIN \"store locations\" sl ON so._storeid = sl.storeid;",
        "retrieved": [
            2626
        ],
        "token_usage": {
            "tokens": 1341,
            "cost": 0.00029025
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'"
    },
    {
        "sample_id": 2680,
        "pred_sql": "SELECT customers.\"customer names\" FROM customers INNER JOIN \"sales orders\" ON sales orders._customerid = customers.customerid WHERE sales orders.\"order quantity\" = '3' AND sales orders.\"orderdate\" LIKE '02/%/2018';",
        "retrieved": [
            2735
        ],
        "token_usage": {
            "tokens": 1364,
            "cost": 0.00028739999999999994
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Order Quantity\" = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2653,
        "pred_sql": "SELECT so.ordernumber FROM \"sales orders\" so JOIN customers c ON so._customerid = c.customerid WHERE c.\"customer names\" = 'Qualitest' ORDER BY so.\"order quantity\" DESC LIMIT 1;",
        "retrieved": [
            2634
        ],
        "token_usage": {
            "tokens": 1285,
            "cost": 0.00026474999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T1.OrderNumber FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.\"Customer Names\" = 'Qualitest ' ORDER BY T1.\"Order Quantity\" DESC LIMIT 1"
    },
    {
        "sample_id": 2642,
        "pred_sql": "SELECT customers.\"customer names\" FROM \"sales orders\" INNER JOIN customers ON sales orders._customerid = customers.customerid WHERE sales orders.\"order quantity\" > 5 AND sales orders.\"orderdate\" = '6/1/2018'",
        "retrieved": [
            2705
        ],
        "token_usage": {
            "tokens": 1298,
            "cost": 0.00026309999999999994
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SUM(T1.\"Order Quantity\") > 5 THEN T2.\"Customer Names\" END AS T FROM \"Sales Orders\" T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate = '6/1/18' GROUP BY T1._CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2701,
        "pred_sql": "SELECT DISTINCT sales_orders.ordernumber FROM sales_orders WHERE orderdate > '1/1/2018'",
        "retrieved": [
            2583
        ],
        "token_usage": {
            "tokens": 1261,
            "cost": 0.00023324999999999998
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN OrderDate > '1/1/18' THEN OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2610,
        "pred_sql": "SELECT products.\"product name\" FROM products JOIN \"sales orders\" ON products.productid = \"sales orders\"._productid WHERE \"sales orders\".\"unit cost\" = '781.22'",
        "retrieved": [
            2634
        ],
        "token_usage": {
            "tokens": 1279,
            "cost": 0.00025935
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT IIF(T1.\"Unit Cost\" = 781.22, T2.\"Product Name\", NULL) AS T FROM \"Sales Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2623,
        "pred_sql": "SELECT customers.\"customer names\" FROM \"sales orders\" JOIN customers ON sales orders._customerid = customers.customerid WHERE REPLACE(sales orders.\"unit cost\", ',', '') > '4000'",
        "retrieved": [
            2634
        ],
        "token_usage": {
            "tokens": 1267,
            "cost": 0.0002517
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Unit Cost\" > 4000 THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2647,
        "pred_sql": "SELECT productid, `product name` FROM products WHERE productid BETWEEN 30 AND 40;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1097,
            "cost": 0.00020774999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2679,
        "pred_sql": "SELECT products.productid, products.\"product name\", SUM(REPLACE(sales_orders.\"unit price\", ',', '') - REPLACE(sales_orders.\"unit cost\", ',', '')) AS net_profit FROM sales_orders INNER JOIN products ON sales_orders._productid = products.productid GROUP BY products.productid, products.\"product name\" ORDER BY net_profit DESC LIMIT 10;",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1346,
            "cost": 0.0002847
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) DESC LIMIT 10"
    },
    {
        "sample_id": 2711,
        "pred_sql": "SELECT storeid FROM \"store locations\" INNER JOIN \"sales orders\" ON \"store locations\".storeid = \"sales orders\"._storeid WHERE \"store locations\".state = 'California' AND \"sales orders\".\"discount applied\" = '0.2';",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1345,
            "cost": 0.00028995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.State = 'California' AND T1.\"Sales Channel\" = 'In-Store' AND T1.\"Discount Applied\" = 0.2 THEN T2.StoreID END AS T FROM \"Sales Orders\" T1 INNER JOIN \"Store Locations\" T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2656,
        "pred_sql": "SELECT p.productid, p.product_name, SUM(so.order_quantity) AS total_sold\nFROM sales_orders so\nJOIN store_locations sl ON so._storeid = sl.storeid\nJOIN products p ON so._productid = p.productid\nWHERE sl.county = 'Maricopa County'\nGROUP BY p.productid, p.product_name\nORDER BY total_sold ASC\nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1236,
            "cost": 0.00029114999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T3.County = 'Maricopa County' ORDER BY T2.\"Order Quantity\" ASC LIMIT 1"
    },
    {
        "sample_id": 2687,
        "pred_sql": "SELECT \"sales team\".sales team, SUM(REPLACE(sales orders.\"unit price\", ',', '') - REPLACE(sales orders.\"unit cost\", ',', '')) AS net_profit\nFROM \"sales orders\"\nINNER JOIN \"sales team\" ON sales orders._salesteamid = sales team.salesteamid\nGROUP BY \"sales team\".sales team\nORDER BY net_profit DESC\nLIMIT 5;",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1389,
            "cost": 0.00030915
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 5"
    },
    {
        "sample_id": 2686,
        "pred_sql": "SELECT \"sales channel\", COUNT(*) AS channel_count \nFROM \"sales orders\" \nINNER JOIN \"store locations\" ON \"sales orders\"._storeid = \"store locations\".storeid \nINNER JOIN ( \n    SELECT statecode, median income \n    FROM \"store locations\" \n    ORDER BY median income DESC \n    LIMIT 3 \n) AS top_states ON \"store locations\".statecode = top_states.statecode \nGROUP BY \"sales channel\" \nORDER BY channel_count DESC;",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1409,
            "cost": 0.00032025
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT \"Sales Channel\" FROM ( SELECT T1.\"Sales Channel\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.\"Median Income\" DESC LIMIT 3 ) GROUP BY \"Sales Channel\" ORDER BY COUNT(\"Sales Channel\") DESC LIMIT 1"
    },
    {
        "sample_id": 2612,
        "pred_sql": "SELECT COUNT(sales orders.ordernumber) FROM \"sales orders\" WHERE sales orders.orderdate LIKE '2018%'",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1245,
            "cost": 0.00023219999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.\"Product Name\" = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
    },
    {
        "sample_id": 2713,
        "pred_sql": "SELECT SUM(CASE WHEN products.product name = 'Candles' THEN sales orders.order quantity ELSE 0 END) AS total_candles_ordered, \n       (SUM(CASE WHEN products.product name = 'Candles' THEN sales orders.order quantity ELSE 0 END) * 100.0 / SUM(sales orders.order quantity)) AS percentage_candles \nFROM sales orders \nJOIN products ON sales orders._productid = products.productid;",
        "retrieved": [
            2626
        ],
        "token_usage": {
            "tokens": 1367,
            "cost": 0.00030585
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END), CAST(SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END) AS REAL) * 100 / SUM(T2.\"Order Quantity\") FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID"
    },
    {
        "sample_id": 2638,
        "pred_sql": "SELECT store locations.* FROM \"sales orders\" INNER JOIN \"store locations\" ON \"sales orders\"._storeid = \"store locations\".storeid WHERE \"sales orders\".ordernumber = 'SO - 000115';",
        "retrieved": [
            2735
        ],
        "token_usage": {
            "tokens": 1356,
            "cost": 0.00028485
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'"
    },
    {
        "sample_id": 2582,
        "pred_sql": "SELECT c.\"customer names\", so.\"orderdate\", so.\"ordernumber\" FROM \"sales orders\" so JOIN customers c ON so.\"_customerid\" = c.\"customerid\" WHERE REPLACE(so.\"unit price\", ',', '') = (SELECT REPLACE(\"unit price\", ',', '') FROM \"sales orders\" ORDER BY REPLACE(\"unit price\", ',', '') DESC LIMIT 1)",
        "retrieved": [
            2634
        ],
        "token_usage": {
            "tokens": 1303,
            "cost": 0.00027554999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.OrderNumber, T1.\"Customer Names\", T2.OrderDate FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.\"Unit Cost\" DESC LIMIT 1"
    },
    {
        "sample_id": 2671,
        "pred_sql": "SELECT sales_orders.ordernumber, products.product_name FROM sales_orders INNER JOIN products ON sales_orders._productid = products.productid WHERE sales_orders.orderdate = '06/06/2018'",
        "retrieved": [
            2705
        ],
        "token_usage": {
            "tokens": 1286,
            "cost": 0.00025679999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT OrderNumber, \"Product Name\" FROM ( SELECT IIF(T2.OrderDate = '6/6/18', T2.OrderNumber, NULL) AS \"OrderNumber\" , IIF(T2.OrderDate = '6/6/18', T1.\"Product Name\", NULL) AS \"Product Name\" FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID ) WHERE OrderNumber IS NOT NULL AND \"Product Name\" IS NOT NULL"
    },
    {
        "sample_id": 2669,
        "pred_sql": "SELECT COUNT(sales_orders.ordernumber) FROM sales_orders INNER JOIN store_locations ON store_locations.storeid = sales_orders._storeid WHERE store_locations.population BETWEEN '3000000' AND '4000000';",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1320,
            "cost": 0.00027315
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.Population BETWEEN 3000000 AND 4000000"
    },
    {
        "sample_id": 2725,
        "pred_sql": "SELECT T2.sales team, COUNT(T1.ordernumber) AS order_count \nFROM \"sales orders\" AS T1 \nINNER JOIN \"sales team\" AS T2 ON T2.salesteamid = T1._salesteamid \nWHERE strftime('%Y', T1.shipdate) = '2019' \nGROUP BY T2.salesteamid \nORDER BY order_count DESC \nLIMIT 1;",
        "retrieved": [
            2604
        ],
        "token_usage": {
            "tokens": 1408,
            "cost": 0.0003093
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT COUNT(T1.OrderNumber), T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.\"Sales Team\" ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "sample_id": 2579,
        "pred_sql": "SELECT so.ordernumber, p.productname \nFROM sales orders AS so \nINNER JOIN products AS p ON so._productid = p.productid \nINNER JOIN sales team AS st ON so._salesteamid = st.salesteamid \nWHERE st.sales team = 'Douglas Tucker'",
        "retrieved": [
            2657
        ],
        "token_usage": {
            "tokens": 1386,
            "cost": 0.00030825
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T1.ProductID, T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.\"Sales Team\" = 'Douglas Tucker'"
    },
    {
        "sample_id": 2625,
        "pred_sql": "SELECT \"city name\", MAX(population) AS largest_population FROM \"store locations\" GROUP BY \"city name\" ORDER BY largest_population DESC LIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1177,
            "cost": 0.00025979999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT \"City Name\" FROM \"Store Locations\" ORDER BY Population DESC LIMIT 1"
    },
    {
        "sample_id": 2602,
        "pred_sql": "SELECT SUM(CASE WHEN products.product_name = 'Platters' THEN CAST(sales_orders.order_quantity AS INTEGER) ELSE 0 END) AS total_orders_platters, SUM(CASE WHEN products.product_name = 'Serveware' THEN CAST(sales_orders.order_quantity AS INTEGER) ELSE 0 END) AS total_orders_serveware FROM sales_orders JOIN products ON sales_orders._productid = products.productid;",
        "retrieved": [
            2661
        ],
        "token_usage": {
            "tokens": 1309,
            "cost": 0.00027689999999999995
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T2.\"Product Name\" = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.\"Product Name\" = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID"
    },
    {
        "sample_id": 2710,
        "pred_sql": "SELECT sales_team.sales_team, COUNT(sales_orders.ordernumber) AS order_count \nFROM \"sales orders\" \nINNER JOIN \"sales team\" ON sales_orders._salesteamid = sales_team.salesteamid \nWHERE sales_team.region = 'Midwest' \nGROUP BY sales_team.salesteamid \nHAVING COUNT(sales_orders.ordernumber) > 5;",
        "retrieved": [
            2604
        ],
        "token_usage": {
            "tokens": 1359,
            "cost": 0.00028619999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.\"Order Quantity\" > 5"
    },
    {
        "sample_id": 2718,
        "pred_sql": "SELECT COUNT(sales_orders.ordernumber) FROM \"sales orders\" WHERE \"sales channel\" = 'Online' AND orderdate LIKE '06/%/2018'",
        "retrieved": [
            2639
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.000258
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(IIF(ShipDate LIKE '6/%/18' AND \"Sales Channel\" = 'Online', 1, 0)) FROM \"Sales Orders\""
    },
    {
        "sample_id": 2714,
        "pred_sql": "SELECT regions.region FROM customers JOIN store locations ON customers.customerid = store locations.storeid JOIN regions ON store locations.statecode = regions.statecode WHERE customers.customer names = 'Joshua Bennet';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1136,
            "cost": 0.00023429999999999998
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN \"Sales Team\" = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM \"Sales Team\" ) WHERE T IS NOT NULL"
    },
    {
        "sample_id": 2685,
        "pred_sql": "SELECT COUNT(DISTINCT storeid) FROM \"store locations\" INNER JOIN \"sales orders\" ON \"store locations\".storeid = \"sales orders\"._storeid WHERE \"store locations\".\"city name\" = 'Oregon' AND \"sales orders\".procureddate = '10/27/2018';",
        "retrieved": [
            2735
        ],
        "token_usage": {
            "tokens": 1410,
            "cost": 0.00031545
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.\"City Name\" = 'Orlando' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID"
    },
    {
        "sample_id": 2632,
        "pred_sql": "SELECT strftime('%Y', orderdate) AS year, COUNT(ordernumber) AS order_count \nFROM sales_orders \nJOIN customers ON sales_orders._customerid = customers.customerid \nWHERE customers.customer_names = 'George Lewis' \nAND strftime('%Y', orderdate) BETWEEN '2018' AND '2020' \nGROUP BY year \nORDER BY order_count DESC \nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1210,
            "cost": 0.0002724
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.\"Sales Team\" = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1"
    },
    {
        "sample_id": 2595,
        "pred_sql": "SELECT storeid, \"city name\", state, region FROM \"store locations\" WHERE \"type\" IN ('borough', 'CDP') GROUP BY \"type\" HAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM \"store locations\" WHERE \"type\" IN ('borough', 'CDP') GROUP BY \"type\"))",
        "retrieved": [
            2600
        ],
        "token_usage": {
            "tokens": 1312,
            "cost": 0.00027509999999999996
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT DISTINCT T2.StoreID, T2.\"City Name\", T1.State, T2.Type FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'"
    },
    {
        "sample_id": 2723,
        "pred_sql": "SELECT COUNT(*) AS store_count FROM \"store locations\" WHERE \"statecode\" IN (SELECT \"statecode\" FROM \"regions\" WHERE \"region\" = 'West') AND \"land area\" < 20000000;",
        "retrieved": [
            2600
        ],
        "token_usage": {
            "tokens": 1278,
            "cost": 0.0002538
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.\"Land Area\" < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode"
    },
    {
        "sample_id": 2708,
        "pred_sql": "SELECT T1.\"storeid\", T2.\"city name\", SUM(REPLACE(T1.\"unit price\", ',', '') - REPLACE(T1.\"unit cost\", ',', '')) AS net_profit\nFROM \"sales orders\" AS T1\nINNER JOIN \"store locations\" AS T2 ON T1._storeid = T2.storeid\nWHERE T2.\"state\" = 'Arizona'\nGROUP BY T1.\"storeid\", T2.\"city name\"\nORDER BY net_profit DESC\nLIMIT 1;",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1423,
            "cost": 0.00033224999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.StoreID FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Arizona' ORDER BY T1.\"Unit Price\" - T1.\"Unit Cost\" DESC LIMIT 1"
    },
    {
        "sample_id": 2591,
        "pred_sql": "SELECT productid, product name FROM products WHERE product name LIKE '%Outdoor%';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1093,
            "cost": 0.00020624999999999997
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT ProductID, T FROM ( SELECT ProductID , CASE  WHEN \"Product Name\" LIKE '%Outdoor%' THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL ORDER BY T DESC"
    },
    {
        "sample_id": 2738,
        "pred_sql": "SELECT MAX(\"discount applied\") AS best_discount FROM \"sales orders\" WHERE strftime('%Y', \"orderdate\") = '2020'",
        "retrieved": [
            2619
        ],
        "token_usage": {
            "tokens": 1258,
            "cost": 0.00023549999999999998
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT MAX(\"Discount Applied\") FROM \"Sales Orders\" WHERE OrderDate LIKE '%/%/20'"
    },
    {
        "sample_id": 2727,
        "pred_sql": "SELECT store locations.latitude, store locations.longitude FROM (SELECT sales orders._storeid, SUM(REPLACE(sales orders.\"unit price\", ',', '') - REPLACE(sales orders.\"unit cost\", ',', '')) AS net_profit FROM sales orders GROUP BY sales orders._storeid ORDER BY net_profit DESC LIMIT 4) AS profit_table INNER JOIN store locations ON profit_table._storeid = store locations.storeid ORDER BY profit_table.net_profit DESC LIMIT 1;",
        "retrieved": [
            2603
        ],
        "token_usage": {
            "tokens": 1412,
            "cost": 0.00032025
        },
        "db_id": "regional_sales",
        "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 3, 1"
    },
    {
        "sample_id": 1719,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN generalinfo.review > 4 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(generalinfo.id_restaurant) AS percentage_over_4 FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.region = 'Bay Area'",
        "retrieved": [
            1738
        ],
        "token_usage": {
            "tokens": 858,
            "cost": 0.00021014999999999999
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.review > 4, 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'"
    },
    {
        "sample_id": 1751,
        "pred_sql": "SELECT city FROM geographic WHERE county IS NULL OR county = '';",
        "retrieved": [],
        "token_usage": {
            "tokens": 625,
            "cost": 0.00014189999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT city FROM geographic WHERE county = 'unknown'"
    },
    {
        "sample_id": 1759,
        "pred_sql": "SELECT location.street_num FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.label = 'Tulocay Winery'",
        "retrieved": [
            1709
        ],
        "token_usage": {
            "tokens": 776,
            "cost": 0.00016994999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'"
    },
    {
        "sample_id": 1770,
        "pred_sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant INNER JOIN geographic AS T3 ON T1.city = T3.city WHERE T1.city = 'San Francisco' AND T2.food_type = 'Asian' ORDER BY T2.review DESC LIMIT 1",
        "retrieved": [
            1684
        ],
        "token_usage": {
            "tokens": 843,
            "cost": 0.0002142
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' )"
    },
    {
        "sample_id": 1734,
        "pred_sql": "SELECT geographic.region FROM location INNER JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE location.street_num = '1149' AND location.street_name = 'El Camino Real'",
        "retrieved": [
            1712
        ],
        "token_usage": {
            "tokens": 845,
            "cost": 0.0002073
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'"
    },
    {
        "sample_id": 1679,
        "pred_sql": "SELECT generalinfo.food_type FROM location INNER JOIN generalinfo AS T2 ON location.id_restaurant = T2.id_restaurant WHERE location.street_num = '' AND location.street_name = 'Adeline Street' AND generalinfo.city = 'Berkeley'",
        "retrieved": [
            1766
        ],
        "token_usage": {
            "tokens": 819,
            "cost": 0.00019214999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'"
    },
    {
        "sample_id": 1772,
        "pred_sql": "SELECT COUNT(*) FROM generalinfo WHERE food_type = 'deli' AND city = 'Belmont' AND review >= 2.0;",
        "retrieved": [
            1671
        ],
        "token_usage": {
            "tokens": 755,
            "cost": 0.00017265
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'"
    },
    {
        "sample_id": 1780,
        "pred_sql": "SELECT geographic.region FROM geographic INNER JOIN location ON geographic.city = location.city GROUP BY geographic.region ORDER BY COUNT(location.id_restaurant) DESC LIMIT 1",
        "retrieved": [
            1785
        ],
        "token_usage": {
            "tokens": 795,
            "cost": 0.00018135
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1"
    },
    {
        "sample_id": 1681,
        "pred_sql": "SELECT DISTINCT geographic.county FROM location INNER JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.label = 'A&W Root Beer'",
        "retrieved": [
            1693
        ],
        "token_usage": {
            "tokens": 841,
            "cost": 0.00019679999999999999
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'"
    },
    {
        "sample_id": 1686,
        "pred_sql": "SELECT COUNT(DISTINCT geographic.county) FROM location INNER JOIN geographic ON location.city = geographic.city WHERE location.street_name = 'Appian Way';",
        "retrieved": [
            1699
        ],
        "token_usage": {
            "tokens": 843,
            "cost": 0.00019034999999999996
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'"
    },
    {
        "sample_id": 1733,
        "pred_sql": "SELECT location.street_name, COUNT(generalinfo.id_restaurant) AS burger_count \nFROM location \nJOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant \nWHERE location.city = 'San Francisco' AND generalinfo.food_type = 'burger' \nGROUP BY location.street_name \nORDER BY burger_count DESC \nLIMIT 1;",
        "retrieved": [
            1740
        ],
        "token_usage": {
            "tokens": 826,
            "cost": 0.00023009999999999996
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1"
    },
    {
        "sample_id": 1760,
        "pred_sql": "SELECT generalinfo.review, generalinfo.label FROM location INNER JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE location.city = 'Hayward' AND location.street_name = 'Mission Blvd.'",
        "retrieved": [
            1756
        ],
        "token_usage": {
            "tokens": 795,
            "cost": 0.00018449999999999999
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.review, T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'hayward' AND T1.street_name = 'mission blvd'"
    },
    {
        "sample_id": 1779,
        "pred_sql": "SELECT COUNT(*) FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.city = 'Oakland' AND generalinfo.review <= 3",
        "retrieved": [
            1786
        ],
        "token_usage": {
            "tokens": 821,
            "cost": 0.00020459999999999999
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.street_name = 'broadway' AND T2.review < 3 AND T1.city = 'oakland'"
    },
    {
        "sample_id": 1769,
        "pred_sql": "SELECT (COUNT(CASE WHEN gi.food_type = 'Afghani' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_afghani_restaurants\nFROM generalinfo gi\nINNER JOIN location l ON gi.id_restaurant = l.id_restaurant\nWHERE l.street_num BETWEEN '1000' AND '2000';",
        "retrieved": [
            1713
        ],
        "token_usage": {
            "tokens": 873,
            "cost": 0.0002169
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000"
    },
    {
        "sample_id": 1765,
        "pred_sql": "SELECT location.street_num, location.street_name, generalinfo.city FROM generalinfo INNER JOIN location AS T2 ON generalinfo.id_restaurant = T2.id_restaurant WHERE generalinfo.label = 'Sanuki Restaurant'",
        "retrieved": [
            1709
        ],
        "token_usage": {
            "tokens": 811,
            "cost": 0.00019364999999999996
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'"
    },
    {
        "sample_id": 1689,
        "pred_sql": "SELECT generalinfo.label FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant INNER JOIN geographic ON location.city = geographic.city WHERE geographic.county = 'Yolo County'",
        "retrieved": [
            1693
        ],
        "token_usage": {
            "tokens": 829,
            "cost": 0.00018915
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'"
    },
    {
        "sample_id": 1737,
        "pred_sql": "SELECT location.street_name, location.street_num, location.city FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.street_name = 'Park St'",
        "retrieved": [
            1783
        ],
        "token_usage": {
            "tokens": 764,
            "cost": 0.0001713
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'"
    },
    {
        "sample_id": 1691,
        "pred_sql": "SELECT location.street_num, location.street_name, location.city FROM location INNER JOIN generalinfo AS T2 ON location.city = T2.city WHERE T2.review = 1.7 AND location.city = 'San Francisco'",
        "retrieved": [
            1786
        ],
        "token_usage": {
            "tokens": 788,
            "cost": 0.00018299999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7"
    },
    {
        "sample_id": 1762,
        "pred_sql": "SELECT COUNT(*) FROM location INNER JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE generalinfo.review = 2 AND CAST(location.street_num AS INTEGER) < 500;",
        "retrieved": [
            1786
        ],
        "token_usage": {
            "tokens": 793,
            "cost": 0.00018645
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.review = 2 AND T1.street_num < 500"
    },
    {
        "sample_id": 1706,
        "pred_sql": "SELECT generalinfo.label, generalinfo.review FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.city = 'San Francisco' ORDER BY generalinfo.review DESC",
        "retrieved": [
            1707
        ],
        "token_usage": {
            "tokens": 774,
            "cost": 0.00016785
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )"
    },
    {
        "sample_id": 1763,
        "pred_sql": "SELECT COUNT(*) FROM generalinfo INNER JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.food_type = 'Asian' AND location.street_name = 'N. Milpitas Blvd.' AND location.city = 'Milpitas' AND generalinfo.id_restaurant > '385';",
        "retrieved": [
            1783
        ],
        "token_usage": {
            "tokens": 829,
            "cost": 0.00020175
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385"
    },
    {
        "sample_id": 1748,
        "pred_sql": "SELECT geographic.county, COUNT(*) AS restaurant_count FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'Italian' GROUP BY geographic.county ORDER BY restaurant_count DESC LIMIT 1;",
        "retrieved": [
            1671
        ],
        "token_usage": {
            "tokens": 792,
            "cost": 0.00019709999999999997
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'Italian' GROUP BY T2.county ORDER BY COUNT(T1.id_restaurant) DESC LIMIT 1"
    },
    {
        "sample_id": 1729,
        "pred_sql": "SELECT geographic.region FROM geographic INNER JOIN generalinfo ON geographic.city = generalinfo.city WHERE generalinfo.food_type = 'Greek' GROUP BY geographic.region",
        "retrieved": [
            1785
        ],
        "token_usage": {
            "tokens": 776,
            "cost": 0.00017309999999999998
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'"
    },
    {
        "sample_id": 1697,
        "pred_sql": "SELECT AVG(generalinfo.review) FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.county = 'Santa Cruz County'",
        "retrieved": [
            1739
        ],
        "token_usage": {
            "tokens": 811,
            "cost": 0.00017745
        },
        "db_id": "restaurant",
        "gold_sql": "SELECT AVG(T2.review) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'santa cruz county'"
    },
    {
        "sample_id": 399,
        "pred_sql": "SELECT COUNT(reviews.stars) AS five_star_reviews_count FROM reviews INNER JOIN district ON reviews.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE reviews.stars = '5' AND district.city = 'Nashville' AND state.state = 'Tennessee';",
        "retrieved": [
            296
        ],
        "token_usage": {
            "tokens": 1579,
            "cost": 0.00031109999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T2.Stars) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Nashville' AND T1.state_abbrev = 'TN' AND T2.Product = 'Eagle National Mortgage' AND T2.Stars = 5"
    },
    {
        "sample_id": 388,
        "pred_sql": "SELECT COUNT(callcenterlogs.\"rand client\") FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\" WHERE client.city = 'Omaha' AND callcenterlogs.product = 'Credit card' AND strftime('%Y', callcenterlogs.\"date received\") = '2012'",
        "retrieved": [
            348
        ],
        "token_usage": {
            "tokens": 1602,
            "cost": 0.0003474
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND strftime('%Y', T2.\"Date received\") = '2012' AND T2.Product = 'Credit card'"
    },
    {
        "sample_id": 314,
        "pred_sql": "SELECT (COUNT(CASE WHEN c.age >= 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_clients_age_50_and_older\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.rand_client\nWHERE cl.submitted_via = 'postal mail';",
        "retrieved": [
            263
        ],
        "token_usage": {
            "tokens": 1722,
            "cost": 0.00036899999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.age > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.\"Submitted via\") FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Postal mail'"
    },
    {
        "sample_id": 355,
        "pred_sql": "SELECT events.product FROM client INNER JOIN events ON client.client_id = events.client_id WHERE client.first = 'Alexander' AND client.last = 'Lewis'",
        "retrieved": [
            311
        ],
        "token_usage": {
            "tokens": 1477,
            "cost": 0.00028859999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'"
    },
    {
        "sample_id": 359,
        "pred_sql": "SELECT callcenterlogs.type, callcenterlogs.outcome, callcenterlogs.ser_time FROM callcenterlogs WHERE callcenterlogs.ser_time < '00:10:00'",
        "retrieved": [
            240
        ],
        "token_usage": {
            "tokens": 1484,
            "cost": 0.00029414999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE strftime('%M', T1.ser_time) < '10'"
    },
    {
        "sample_id": 293,
        "pred_sql": "SELECT \"date received\", \"complaint id\" FROM callcenterlogs WHERE priority = '2' ORDER BY \"date received\";",
        "retrieved": [
            263
        ],
        "token_usage": {
            "tokens": 1569,
            "cost": 0.00028125
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT \"Complaint ID\" FROM callcenterlogs WHERE priority = 2 ORDER BY \"Date received\" DESC"
    },
    {
        "sample_id": 370,
        "pred_sql": "SELECT district.city, COUNT(reviews.stars) AS star_count FROM reviews INNER JOIN district ON reviews.district_id = district.district_id WHERE reviews.stars = '5' AND strftime('%Y', reviews.date) = '2016' GROUP BY district.city ORDER BY star_count DESC LIMIT 5;",
        "retrieved": [
            296
        ],
        "token_usage": {
            "tokens": 1576,
            "cost": 0.00030839999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5"
    },
    {
        "sample_id": 385,
        "pred_sql": "SELECT state.state, COUNT(district.city) AS city_count \nFROM state \nJOIN district ON state.statecode = district.state_abbrev \nGROUP BY state.state \nORDER BY city_count DESC \nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1438,
            "cost": 0.00031245
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1"
    },
    {
        "sample_id": 394,
        "pred_sql": "SELECT callcenterlogs.rand client FROM callcenterlogs JOIN events ON callcenterlogs.complaint id = events.complaint id WHERE events.date received = '2014-04-16' AND events.submitted via = 'fax';",
        "retrieved": [
            292
        ],
        "token_usage": {
            "tokens": 1552,
            "cost": 0.00029355
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.\"Submitted via\" = 'Fax' AND T1.\"Date received\" = '2014-04-16'"
    },
    {
        "sample_id": 248,
        "pred_sql": "SELECT client.first, client.middle, client.last FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.date_received = '2017/3/27' AND callcenterlogs.vru_line = 'MICHAL';",
        "retrieved": [
            263
        ],
        "token_usage": {
            "tokens": 1703,
            "cost": 0.00035444999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.\"Date received\" = '2017-03-27' AND T2.server = 'MICHAL'"
    },
    {
        "sample_id": 276,
        "pred_sql": "SELECT client.email FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.outcome = 'hung'",
        "retrieved": [
            362
        ],
        "token_usage": {
            "tokens": 1516,
            "cost": 0.0003048
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.outcome = 'HANG'"
    },
    {
        "sample_id": 379,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN client.sex = 'female' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(client.sex) AS female_percentage FROM client INNER JOIN events ON client.client_id = events.client_id INNER JOIN district ON client.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE state.region = 'Middle Atlantic'",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1613,
            "cost": 0.00033194999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'"
    },
    {
        "sample_id": 287,
        "pred_sql": "SELECT (COUNT(CASE WHEN cl.priority = '1' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_priority_1\nFROM callcenterlogs cl\nJOIN client c ON cl.rand client = c.client_id\nJOIN district d ON c.district_id = d.district_id\nJOIN state s ON d.state_abbrev = s.statecode\nWHERE s.state = 'California';",
        "retrieved": [
            242
        ],
        "token_usage": {
            "tokens": 1606,
            "cost": 0.00034169999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'"
    },
    {
        "sample_id": 398,
        "pred_sql": "SELECT reviews.product FROM reviews INNER JOIN district ON reviews.district_id = district.district_id INNER JOIN state ON district.state_abbrev = state.statecode WHERE reviews.stars = '1' AND reviews.date = '2016-03-14' AND district.city = 'Newton' AND state.state = 'Massachusetts';",
        "retrieved": [
            296
        ],
        "token_usage": {
            "tokens": 1581,
            "cost": 0.00031319999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.Product FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Newton' AND T1.state_abbrev = 'MA' AND T2.Date = '2016-03-14' AND T2.Stars = 1"
    },
    {
        "sample_id": 241,
        "pred_sql": "SELECT MIN(\"date received\") FROM callcenterlogs WHERE \"date received\" = '2017-03-22'",
        "retrieved": [
            240
        ],
        "token_usage": {
            "tokens": 1437,
            "cost": 0.00026595
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT MIN(ser_time) FROM callcenterlogs WHERE \"Date received\" = '2017-03-22'"
    },
    {
        "sample_id": 352,
        "pred_sql": "SELECT client.first, client.middle, client.last FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\" WHERE callcenterlogs.ser_time >= '00:20:00'",
        "retrieved": [
            249
        ],
        "token_usage": {
            "tokens": 1520,
            "cost": 0.00029505
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE strftime('%M', T2.ser_time) > '20'"
    },
    {
        "sample_id": 299,
        "pred_sql": "SELECT COUNT(*) AS male_client_count FROM client INNER JOIN state ON client.state = state.statecode WHERE client.sex = 'male' AND state.state = 'Massachusetts';",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1565,
            "cost": 0.00030359999999999995
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'"
    },
    {
        "sample_id": 351,
        "pred_sql": "SELECT (COUNT(CASE WHEN c.email LIKE '%@gmail.com%' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_google_complaints\nFROM callcenterlogs cl\nJOIN client c ON cl.rand_client = c.client_id\nWHERE cl.server = 'ZOHARI';",
        "retrieved": [
            263
        ],
        "token_usage": {
            "tokens": 1651,
            "cost": 0.0003273
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.server = 'ZOHARI'"
    },
    {
        "sample_id": 329,
        "pred_sql": "SELECT issue, COUNT(issue) AS issue_count\nFROM callcenterlogs\nJOIN events ON callcenterlogs.\"complaint id\" = events.\"complaint id\"\nWHERE callcenterlogs.priority = '2'\nGROUP BY issue\nORDER BY issue_count DESC\nLIMIT 1;",
        "retrieved": [
            242
        ],
        "token_usage": {
            "tokens": 1595,
            "cost": 0.00033555
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.Issue FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.priority = 2 GROUP BY T1.Issue ORDER BY COUNT(T1.Issue) DESC LIMIT 1"
    },
    {
        "sample_id": 383,
        "pred_sql": "SELECT client.city, COUNT(client.client_id) AS customer_count\nFROM client\nINNER JOIN district ON client.district_id = district.district_id\nWHERE client.age > 60 AND district.state_abbrev = 'MN' OR district.state_abbrev = 'IA' OR district.state_abbrev = 'MO' OR district.state_abbrev = 'ND' OR district.state_abbrev = 'SD' OR district.state_abbrev = 'NE' OR district.state_abbrev = 'KS'\nGROUP BY client.city\nORDER BY customer_count DESC\nLIMIT 1;",
        "retrieved": [
            284
        ],
        "token_usage": {
            "tokens": 1745,
            "cost": 0.00040574999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'West North Central' AND T1.age > 60 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1"
    },
    {
        "sample_id": 246,
        "pred_sql": "SELECT \"consumer consent provided?\" FROM events JOIN client ON events.client_id = client.client_id WHERE client.first = 'Matthew' AND client.last = 'Pierce' AND events.\"date received\" = '2016-10-28'",
        "retrieved": [
            292
        ],
        "token_usage": {
            "tokens": 1612,
            "cost": 0.0003291
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CASE WHEN T2.\"Consumer consent provided?\" IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.\"Date received\" = '2016-10-28'"
    },
    {
        "sample_id": 338,
        "pred_sql": "SELECT region, COUNT(client_id) AS client_count FROM client JOIN district ON client.district_id = district.district_id JOIN state ON district.state_abbrev = state.statecode GROUP BY region ORDER BY client_count DESC LIMIT 1 OFFSET 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1410,
            "cost": 0.00029519999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1"
    },
    {
        "sample_id": 281,
        "pred_sql": "SELECT COUNT(callcenterlogs.complaint_id) AS number_of_complaints\nFROM callcenterlogs\nINNER JOIN client ON callcenterlogs.rand_client = client.client_id\nINNER JOIN events ON events.client_id = client.client_id\nWHERE client.sex = 'female' AND events.product = 'Credit cards';",
        "retrieved": [
            270
        ],
        "token_usage": {
            "tokens": 1584,
            "cost": 0.00031319999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'"
    },
    {
        "sample_id": 390,
        "pred_sql": "SELECT client.phone, callcenterlogs.\"complaint id\" FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\" WHERE callcenterlogs.outcome = 'in progress'",
        "retrieved": [
            348
        ],
        "token_usage": {
            "tokens": 1520,
            "cost": 0.0002991
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.phone, T2.\"Complaint ID\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Company response to consumer\" = 'In progress'"
    },
    {
        "sample_id": 250,
        "pred_sql": "SELECT COUNT(callcenterlogs.\"rand client\") FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\" WHERE client.city = 'New York' AND callcenterlogs.type = 'Deposits and withdrawals'",
        "retrieved": [
            348
        ],
        "token_usage": {
            "tokens": 1549,
            "cost": 0.00031154999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'"
    },
    {
        "sample_id": 368,
        "pred_sql": "SELECT COUNT(*) AS female_clients_under_18 FROM client JOIN district ON client.district_id = district.district_id JOIN state ON district.state_abbrev = state.statecode WHERE client.sex = 'female' AND client.age <= '18' AND state.region = 'Middle Atlantic';",
        "retrieved": [
            273
        ],
        "token_usage": {
            "tokens": 1543,
            "cost": 0.00031424999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Middle Atlantic' AND T1.sex = 'Female' AND T1.age < 18"
    },
    {
        "sample_id": 343,
        "pred_sql": "WITH TeenagerClients AS (\n    SELECT client_id, email\n    FROM client\n    WHERE age = 'teenager'\n),\nGoogleClients AS (\n    SELECT COUNT(*) AS google_count\n    FROM TeenagerClients\n    WHERE email LIKE '%@gmail.com'\n),\nMicrosoftClients AS (\n    SELECT COUNT(*) AS microsoft_count\n    FROM TeenagerClients\n    WHERE email LIKE '%@outlook.com'\n)\nSELECT 'Google' AS account_type, google_count AS count FROM GoogleClients\nUNION ALL\nSELECT 'Microsoft' AS account_type, microsoft_count AS count FROM MicrosoftClients;",
        "retrieved": [
            273
        ],
        "token_usage": {
            "tokens": 1587,
            "cost": 0.00034064999999999996
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19"
    },
    {
        "sample_id": 321,
        "pred_sql": "SELECT (STRFTIME('%Y', events.\"date sent to company\") - STRFTIME('%Y', events.\"date received\")) * 365 + (STRFTIME('%m', events.\"date sent to company\") - STRFTIME('%m', events.\"date received\")) * 30 + (STRFTIME('%d', events.\"date sent to company\") - STRFTIME('%d', events.\"date received\")) AS complaint_duration FROM client INNER JOIN events ON client.client_id = events.client_id WHERE client.first = 'Kendall' AND client.last = 'Allen' AND events.product = 'credit card'",
        "retrieved": [
            263
        ],
        "token_usage": {
            "tokens": 1707,
            "cost": 0.0003627
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'"
    },
    {
        "sample_id": 278,
        "pred_sql": "SELECT client.first || ' ' || client.last AS full_name, client.phone FROM client INNER JOIN events ON client.client_id = events.client_id WHERE events.\"submitted via\" = 'fax'",
        "retrieved": [
            362
        ],
        "token_usage": {
            "tokens": 1498,
            "cost": 0.0002922
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Fax'"
    },
    {
        "sample_id": 367,
        "pred_sql": "SELECT STRFTIME('%Y', events.\"date received\") AS year, COUNT(events.\"complaint id\") AS complaint_count \nFROM callcenterlogs \nINNER JOIN client ON callcenterlogs.\"rand client\" = client.client_id \nINNER JOIN events ON callcenterlogs.\"complaint id\" = events.\"complaint id\" \nWHERE events.product = 'credit card' AND events.issue = 'overlimit fees' \nGROUP BY year",
        "retrieved": [
            284
        ],
        "token_usage": {
            "tokens": 1615,
            "cost": 0.0003291
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT strftime('%Y', \"Date received\"), COUNT(\"Date received\") FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', \"Date received\") HAVING COUNT(\"Date received\")"
    },
    {
        "sample_id": 400,
        "pred_sql": "SELECT DISTINCT callcenterlogs.\"type\" FROM client INNER JOIN events ON client.client_id = events.client_id INNER JOIN callcenterlogs ON events.\"complaint id\" = callcenterlogs.\"complaint id\" WHERE client.age <= 25 AND client.sex = 'male'",
        "retrieved": [
            397
        ],
        "token_usage": {
            "tokens": 1548,
            "cost": 0.00030825
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25"
    },
    {
        "sample_id": 291,
        "pred_sql": "SELECT client.client_id FROM client LEFT JOIN events ON client.client_id = events.client_id WHERE events.\"consumer consent provided?\" IS NULL OR events.\"consumer consent provided?\" = 'N/A' OR events.\"consumer consent provided?\" = ''",
        "retrieved": [
            262
        ],
        "token_usage": {
            "tokens": 1595,
            "cost": 0.00031485
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT Client_ID FROM events WHERE \"Consumer consent provided?\" = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''"
    },
    {
        "sample_id": 335,
        "pred_sql": "SELECT callcenterlogs.server FROM callcenterlogs WHERE callcenterlogs.complaint_id IN (SELECT events.complaint_id FROM events WHERE events.timely_response = 'No')",
        "retrieved": [
            240
        ],
        "token_usage": {
            "tokens": 1467,
            "cost": 0.00028349999999999995
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT DISTINCT T2.server FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.\"Submitted via\" = 'Phone' AND T1.\"Timely response?\" = 'No'"
    },
    {
        "sample_id": 387,
        "pred_sql": "SELECT client.email FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.\"rand client\" WHERE callcenterlogs.\"date received\" = '7/3/2014'",
        "retrieved": [
            312
        ],
        "token_usage": {
            "tokens": 1497,
            "cost": 0.0002835
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Date received\" = '2014-07-03'"
    },
    {
        "sample_id": 386,
        "pred_sql": "SELECT client.first, client.phone FROM client INNER JOIN callcenterlogs ON client.client_id = callcenterlogs.rand client WHERE callcenterlogs.complaint id = 'CR0922485'",
        "retrieved": [
            249
        ],
        "token_usage": {
            "tokens": 1540,
            "cost": 0.00030524999999999997
        },
        "db_id": "retail_complains",
        "gold_sql": "SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Complaint ID\" = 'CR0922485'"
    },
    {
        "sample_id": 6644,
        "pred_sql": "SELECT orders.orderid FROM orders INNER JOIN employees ON orders.employeeid = employees.employeeid WHERE employees.firstname = 'Michael' AND employees.lastname = 'Suyama'",
        "retrieved": [
            6339
        ],
        "token_usage": {
            "tokens": 1193,
            "cost": 0.00022214999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "sample_id": 6355,
        "pred_sql": "SELECT COUNT(*) FROM customers WHERE country = (SELECT country FROM customers GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1)",
        "retrieved": [
            6495
        ],
        "token_usage": {
            "tokens": 1121,
            "cost": 0.00020504999999999997
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1"
    },
    {
        "sample_id": 6470,
        "pred_sql": "SELECT suppliers.contactname FROM products JOIN suppliers ON products.supplierid = suppliers.supplierid WHERE products.productname = 'Teatime Chocolate Biscuits';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1075,
            "cost": 0.00021255
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'"
    },
    {
        "sample_id": 6482,
        "pred_sql": "SELECT COUNT(DISTINCT p.productid) AS seafood_count FROM products p INNER JOIN orderdetails od ON p.productid = od.productid WHERE p.categoryid = (SELECT categoryid FROM categories WHERE categoryname = 'Seafood') AND od.quantity > 50;",
        "retrieved": [
            6629
        ],
        "token_usage": {
            "tokens": 1226,
            "cost": 0.00024825
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50"
    },
    {
        "sample_id": 6655,
        "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employees WHERE birthdate = '1955-03-04 00:00:00';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1130,
            "cost": 0.00023969999999999997
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'"
    },
    {
        "sample_id": 6653,
        "pred_sql": "SELECT COUNT(customers.city) FROM customers WHERE customers.country = 'UK' AND customers.city = 'London'",
        "retrieved": [
            6495
        ],
        "token_usage": {
            "tokens": 1164,
            "cost": 0.000234
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'"
    },
    {
        "sample_id": 6552,
        "pred_sql": "SELECT COUNT(orders.customerid) FROM customers INNER JOIN orders ON customers.customerid = orders.customerid WHERE customers.country = 'Ireland'",
        "retrieved": [
            6508
        ],
        "token_usage": {
            "tokens": 1212,
            "cost": 0.00023715
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'"
    },
    {
        "sample_id": 6657,
        "pred_sql": "SELECT COUNT(orders.orderid) FROM employees INNER JOIN orders ON employees.employeeid = orders.employeeid WHERE employees.city = 'Tacoma'",
        "retrieved": [
            6334
        ],
        "token_usage": {
            "tokens": 1166,
            "cost": 0.00022034999999999996
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'"
    },
    {
        "sample_id": 6603,
        "pred_sql": "SELECT COUNT(orderdetails.quantity) AS total_quantity, (COUNT(orderdetails.quantity) * 100.0 / (SELECT SUM(quantity) FROM orderdetails)) AS percentage FROM products INNER JOIN orderdetails ON products.productid = orderdetails.productid WHERE products.productname = 'Geitost'",
        "retrieved": [
            6578
        ],
        "token_usage": {
            "tokens": 1256,
            "cost": 0.00026579999999999996
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 6429,
        "pred_sql": "SELECT products.productname FROM products INNER JOIN categories ON products.categoryid = categories.categoryid WHERE categories.categoryname = 'beverage'",
        "retrieved": [
            6344
        ],
        "token_usage": {
            "tokens": 1140,
            "cost": 0.00021329999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'"
    },
    {
        "sample_id": 6332,
        "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employees ORDER BY birthdate DESC LIMIT 1;",
        "retrieved": [
            6656
        ],
        "token_usage": {
            "tokens": 1152,
            "cost": 0.00021959999999999997
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )"
    },
    {
        "sample_id": 6660,
        "pred_sql": "SELECT customers.phone FROM customers INNER JOIN orders ON customers.customerid = orders.customerid WHERE orders.orderid = '10264'",
        "retrieved": [
            6339
        ],
        "token_usage": {
            "tokens": 1223,
            "cost": 0.00024014999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264"
    },
    {
        "sample_id": 6434,
        "pred_sql": "SELECT suppliers.contactname FROM products JOIN suppliers ON products.supplierid = suppliers.supplierid WHERE products.productname = 'Camembert Pierrot';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1093,
            "cost": 0.00022334999999999998
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'"
    },
    {
        "sample_id": 6446,
        "pred_sql": "SELECT MAX(orderdetails.quantity) FROM products INNER JOIN orderdetails ON products.productid = orderdetails.productid WHERE products.productname = 'Manjimup Dried Apples'",
        "retrieved": [
            6578
        ],
        "token_usage": {
            "tokens": 1179,
            "cost": 0.00022184999999999997
        },
        "db_id": "retail_world",
        "gold_sql": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 6699,
        "pred_sql": "SELECT c_name FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey WHERE o.o_clerk = 'Clerk#000000803' AND o.o_orderdate = '1997-12-10';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1715,
            "cost": 0.00033824999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate = '1997-12-10' AND T1.o_clerk = 'Clerk#000000803'"
    },
    {
        "sample_id": 6679,
        "pred_sql": "SELECT o_orderkey FROM orders INNER JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_acctbal < 0;",
        "retrieved": [
            6767
        ],
        "token_usage": {
            "tokens": 1795,
            "cost": 0.00033495
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0"
    },
    {
        "sample_id": 6700,
        "pred_sql": "SELECT (l_extendedprice * (1 - l_discount)) - (ps_supplycost * l_quantity) AS profit\nFROM lineitem\nJOIN partsupp ON lineitem.l_partkey = partsupp.ps_partkey AND lineitem.l_suppkey = partsupp.ps_suppkey\nWHERE lineitem.l_orderkey = 817154 AND lineitem.l_suppkey = 7414;",
        "retrieved": [
            6723
        ],
        "token_usage": {
            "tokens": 2086,
            "cost": 0.00039749999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_suppkey = 7414 AND T1.l_orderkey = 817154"
    },
    {
        "sample_id": 6708,
        "pred_sql": "SELECT COUNT(c_custkey) AS num_customers FROM customer WHERE c_mktsegment = 'automobile'",
        "retrieved": [
            6716
        ],
        "token_usage": {
            "tokens": 1930,
            "cost": 0.00034035
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'AUTOMOBILE'"
    },
    {
        "sample_id": 6717,
        "pred_sql": "SELECT nation.n_name, nation.n_nationkey FROM nation INNER JOIN region AS T2 ON nation.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'Asia'",
        "retrieved": [
            6733
        ],
        "token_usage": {
            "tokens": 1755,
            "cost": 0.0003249
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'"
    },
    {
        "sample_id": 6774,
        "pred_sql": "SELECT p.p_name, SUM(ps.ps_availqty) AS total_available_quantity\nFROM partsupp ps\nINNER JOIN part p ON ps.ps_partkey = p.p_partkey\nGROUP BY p.p_name\nORDER BY total_available_quantity DESC\nLIMIT 10;",
        "retrieved": [
            6872
        ],
        "token_usage": {
            "tokens": 1816,
            "cost": 0.00035249999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey ORDER BY T2.ps_availqty DESC LIMIT 10"
    },
    {
        "sample_id": 6765,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM partsupp) AS percentage_above_500 FROM partsupp WHERE ps_supplycost > 500;",
        "retrieved": [
            6808
        ],
        "token_usage": {
            "tokens": 1800,
            "cost": 0.00034379999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(ps_supplycost > 500, 1, 0)) AS REAL) * 100 / COUNT(ps_suppkey) FROM partsupp"
    },
    {
        "sample_id": 6739,
        "pred_sql": "SELECT COUNT(supplier.s_suppkey) FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'Middle East' AND supplier.s_acctbal < 0",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1753,
            "cost": 0.00033
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T3.s_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T3.s_acctbal < 0 AND T1.r_name = 'MIDDLE EAST'"
    },
    {
        "sample_id": 6791,
        "pred_sql": "SELECT COUNT(customer.c_custkey) FROM orders INNER JOIN customer AS T2 ON orders.o_custkey = T2.c_custkey INNER JOIN nation ON T2.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'Mozambique' AND orders.o_orderpriority = '1'",
        "retrieved": [
            6767
        ],
        "token_usage": {
            "tokens": 1838,
            "cost": 0.00036344999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'MOZAMBIQUE' AND T3.o_orderpriority = '5-LOW'"
    },
    {
        "sample_id": 6690,
        "pred_sql": "SELECT nation.n_name FROM supplier INNER JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE supplier.s_suppkey = 34;",
        "retrieved": [
            6872
        ],
        "token_usage": {
            "tokens": 1752,
            "cost": 0.00031859999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 34"
    },
    {
        "sample_id": 6803,
        "pred_sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33;",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1723,
            "cost": 0.0003048
        },
        "db_id": "retails",
        "gold_sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33"
    },
    {
        "sample_id": 6714,
        "pred_sql": "SELECT COUNT(*) FROM supplier WHERE supplier.s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Japan')",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1795,
            "cost": 0.0003453
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "sample_id": 6911,
        "pred_sql": "SELECT SUM(l_quantity) AS total_quantity\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nWHERE orders.o_custkey = '101660' AND orders.o_orderdate = '1995-10-05';",
        "retrieved": [
            6723
        ],
        "token_usage": {
            "tokens": 2049,
            "cost": 0.0003734999999999999
        },
        "db_id": "retails",
        "gold_sql": "SELECT SUM(T2.l_quantity) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1995-10-05' AND T1.o_custkey = 101660"
    },
    {
        "sample_id": 6899,
        "pred_sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-01-01' AND '1994-12-31' AND l_shipmode = 'TRUCK' AND l_returnflag = 'R'",
        "retrieved": [
            6724
        ],
        "token_usage": {
            "tokens": 1825,
            "cost": 0.0003687
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994' AND l_returnflag = 'R' AND l_shipmode = 'TRUCK'"
    },
    {
        "sample_id": 6703,
        "pred_sql": "SELECT (COUNT(CASE WHEN s_acctbal < 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_debt_japanese_suppliers FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Japan';",
        "retrieved": [
            6866
        ],
        "token_usage": {
            "tokens": 1779,
            "cost": 0.00034694999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.n_name = 'JAPAN', 1, 0)) AS REAL) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0"
    },
    {
        "sample_id": 6815,
        "pred_sql": "SELECT c_name FROM customer WHERE c_custkey = '93697' AND (SELECT SUM(o_totalprice) FROM orders WHERE o_custkey = c_custkey) = 191918.92;",
        "retrieved": [
            6723
        ],
        "token_usage": {
            "tokens": 2059,
            "cost": 0.00037949999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697"
    },
    {
        "sample_id": 6852,
        "pred_sql": "SELECT supplier.s_suppkey, supplier.s_acctbal FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Argentina' AND supplier.s_acctbal < 0",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1791,
            "cost": 0.00033884999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.s_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'ARGENTINA'"
    },
    {
        "sample_id": 6773,
        "pred_sql": "SELECT (COUNT(c.c_custkey) * 100.0 / (SELECT COUNT(*) FROM customer WHERE c_nationkey IN (SELECT n_nationkey FROM nation WHERE n_regionkey = (SELECT r_regionkey FROM region WHERE r_name = 'Africa')))) AS percentage FROM customer c WHERE c.c_mktsegment = 'HOUSEHOLD';",
        "retrieved": [
            6744
        ],
        "token_usage": {
            "tokens": 1776,
            "cost": 0.0003348
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.r_name = 'AFRICA', 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey WHERE T3.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "sample_id": 6749,
        "pred_sql": "SELECT o_comment FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_mktsegment = 'FURNITURE') LIMIT 5;",
        "retrieved": [
            6716
        ],
        "token_usage": {
            "tokens": 2013,
            "cost": 0.00038654999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'Furniture' LIMIT 5"
    },
    {
        "sample_id": 6831,
        "pred_sql": "SELECT r.r_name, COUNT(c.c_custkey) AS customer_count FROM region AS r INNER JOIN nation AS n ON r.r_regionkey = n.n_regionkey INNER JOIN customer AS c ON n.n_nationkey = c.c_nationkey GROUP BY r.r_name ORDER BY customer_count DESC LIMIT 1;",
        "retrieved": [
            6753
        ],
        "token_usage": {
            "tokens": 1877,
            "cost": 0.0003769499999999999
        },
        "db_id": "retails",
        "gold_sql": "SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 6905,
        "pred_sql": "SELECT nation.n_name, COUNT(supplier.s_suppkey) AS supplier_count FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey GROUP BY nation.n_name ORDER BY supplier_count ASC LIMIT 1;",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1833,
            "cost": 0.0003671999999999999
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1"
    },
    {
        "sample_id": 6711,
        "pred_sql": "SELECT nation.n_name, COUNT(customer.c_custkey) AS customer_count \nFROM customer \nJOIN nation ON customer.c_nationkey = nation.n_nationkey \nGROUP BY nation.n_name \nORDER BY customer_count DESC \nLIMIT 1;",
        "retrieved": [
            6744
        ],
        "token_usage": {
            "tokens": 1808,
            "cost": 0.00035534999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT T.n_name FROM ( SELECT T2.n_name, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 6798,
        "pred_sql": "SELECT (COUNT(c.c_custkey) * 100.0 / (SELECT COUNT(*) FROM customer)) AS percentage FROM customer c WHERE c.c_mktsegment = 'HOUSEHOLD' AND c.c_nationkey = (SELECT n.n_nationkey FROM nation n WHERE n.n_name = 'Iran');",
        "retrieved": [
            6744
        ],
        "token_usage": {
            "tokens": 1764,
            "cost": 0.00032805
        },
        "db_id": "retails",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.n_name = 'IRAN', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "sample_id": 6742,
        "pred_sql": "SELECT COUNT(orders.o_orderkey) FROM orders INNER JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE strftime('%Y', lineitem.l_shipdate) = '1994'",
        "retrieved": [
            6715
        ],
        "token_usage": {
            "tokens": 1813,
            "cost": 0.00034845
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994'"
    },
    {
        "sample_id": 6851,
        "pred_sql": "SELECT supplier.s_phone FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Japan';",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1779,
            "cost": 0.00033479999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "sample_id": 6685,
        "pred_sql": "SELECT SUM(o_totalprice) AS total_price FROM orders INNER JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany');",
        "retrieved": [
            6723
        ],
        "token_usage": {
            "tokens": 2061,
            "cost": 0.00038429999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "sample_id": 6694,
        "pred_sql": "SELECT COUNT(customer.c_custkey) FROM customer INNER JOIN nation AS T2 ON customer.c_nationkey = T2.n_nationkey WHERE customer.c_acctbal < 0 AND T2.n_name = 'Morocco'",
        "retrieved": [
            6732
        ],
        "token_usage": {
            "tokens": 1813,
            "cost": 0.00034304999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'MOROCCO' AND T1.c_acctbal < 0"
    },
    {
        "sample_id": 6880,
        "pred_sql": "SELECT SUM(l_quantity) AS total_quantity\nFROM lineitem\nJOIN orders ON lineitem.l_orderkey = orders.o_orderkey\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE part.p_name = 'hot spring dodger dim light';",
        "retrieved": [
            6723
        ],
        "token_usage": {
            "tokens": 2060,
            "cost": 0.000381
        },
        "db_id": "retails",
        "gold_sql": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'"
    },
    {
        "sample_id": 6820,
        "pred_sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = 0",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1705,
            "cost": 0.0002967
        },
        "db_id": "retails",
        "gold_sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'"
    },
    {
        "sample_id": 6816,
        "pred_sql": "SELECT nation.n_name, region.r_name FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey INNER JOIN region ON nation.n_regionkey = region.r_regionkey WHERE customer.c_custkey = '000000008';",
        "retrieved": [
            6753
        ],
        "token_usage": {
            "tokens": 1800,
            "cost": 0.00032849999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'"
    },
    {
        "sample_id": 6890,
        "pred_sql": "SELECT MAX(lineitem.l_discount) AS biggest_discount FROM lineitem JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate'",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1767,
            "cost": 0.00032715
        },
        "db_id": "retails",
        "gold_sql": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "sample_id": 6900,
        "pred_sql": "SELECT COUNT(c_custkey) AS num_customers_in_debt FROM customer WHERE c_mktsegment = 'machinery' AND c_acctbal < 0;",
        "retrieved": [
            6716
        ],
        "token_usage": {
            "tokens": 1966,
            "cost": 0.00036149999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0 AND c_mktsegment = 'MACHINERY'"
    },
    {
        "sample_id": 6813,
        "pred_sql": "SELECT r_name, COUNT(n_name) AS num_countries FROM nation INNER JOIN region ON nation.n_regionkey = region.r_regionkey GROUP BY r_name ORDER BY num_countries ASC LIMIT 1;",
        "retrieved": [
            6753
        ],
        "token_usage": {
            "tokens": 1829,
            "cost": 0.00034815
        },
        "db_id": "retails",
        "gold_sql": "SELECT T.r_name FROM ( SELECT T1.r_name, COUNT(T2.n_name) AS num FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey GROUP BY T1.r_name ) AS T ORDER BY T.num LIMIT 1"
    },
    {
        "sample_id": 6758,
        "pred_sql": "SELECT COUNT(customer.c_custkey) FROM customer INNER JOIN nation AS T2 ON customer.c_nationkey = T2.n_nationkey WHERE customer.c_acctbal < 1000 AND T2.n_name = 'Brazil'",
        "retrieved": [
            6732
        ],
        "token_usage": {
            "tokens": 1828,
            "cost": 0.00034754999999999996
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000"
    },
    {
        "sample_id": 6895,
        "pred_sql": "SELECT (l_extendedprice * (1 - l_discount)) AS discounted_price FROM lineitem JOIN orders ON lineitem.l_orderkey = orders.o_orderkey JOIN part ON lineitem.l_partkey = part.p_partkey WHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' AND orders.o_orderkey = 1;",
        "retrieved": [
            6804
        ],
        "token_usage": {
            "tokens": 1841,
            "cost": 0.00036615
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1"
    },
    {
        "sample_id": 6795,
        "pred_sql": "SELECT COUNT(*) AS supplier_count FROM supplier WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany') AND s_comment LIKE '%carefully regular packages%';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1684,
            "cost": 0.00032324999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'"
    },
    {
        "sample_id": 6846,
        "pred_sql": "SELECT customer.c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_discount = (SELECT MAX(lineitem.l_discount) FROM lineitem)",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1858,
            "cost": 0.00038714999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY T2.l_discount DESC LIMIT 1"
    },
    {
        "sample_id": 6842,
        "pred_sql": "SELECT l_linenumber, l_quantity FROM lineitem WHERE l_shipmode = 'air' ORDER BY l_quantity DESC LIMIT 1;",
        "retrieved": [
            6724
        ],
        "token_usage": {
            "tokens": 1757,
            "cost": 0.00033015
        },
        "db_id": "retails",
        "gold_sql": "SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1"
    },
    {
        "sample_id": 6822,
        "pred_sql": "SELECT supplier.s_suppkey, supplier.s_acctbal FROM supplier ORDER BY supplier.s_acctbal DESC LIMIT 1",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1763,
            "cost": 0.0003252
        },
        "db_id": "retails",
        "gold_sql": "SELECT MAX(s_acctbal) FROM supplier"
    },
    {
        "sample_id": 6897,
        "pred_sql": "SELECT COUNT(orders.o_orderkey) FROM orders INNER JOIN lineitem AS T2 ON orders.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'MAIL' AND strftime('%Y', orders.o_orderdate) = '1997'",
        "retrieved": [
            6715
        ],
        "token_usage": {
            "tokens": 1810,
            "cost": 0.0003453
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'"
    },
    {
        "sample_id": 6670,
        "pred_sql": "SELECT COUNT(l_partkey) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'",
        "retrieved": [
            6886
        ],
        "token_usage": {
            "tokens": 1794,
            "cost": 0.00033029999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'"
    },
    {
        "sample_id": 6859,
        "pred_sql": "SELECT COUNT(*) FROM part WHERE p_retailprice > 1900;",
        "retrieved": [
            6718
        ],
        "token_usage": {
            "tokens": 1736,
            "cost": 0.00030539999999999994
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900"
    },
    {
        "sample_id": 6704,
        "pred_sql": "SELECT customer.c_name FROM customer WHERE customer.c_acctbal = (SELECT MIN(customer.c_acctbal) FROM customer)",
        "retrieved": [
            6819
        ],
        "token_usage": {
            "tokens": 1766,
            "cost": 0.00033555
        },
        "db_id": "retails",
        "gold_sql": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "sample_id": 6906,
        "pred_sql": "SELECT ps_supplycost FROM partsupp INNER JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'dodger linen' AND part.p_size = 'medium' AND part.p_color = 'metallic grey'",
        "retrieved": [
            6718
        ],
        "token_usage": {
            "tokens": 1798,
            "cost": 0.00034125
        },
        "db_id": "retails",
        "gold_sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'medium metallic grey dodger linen'"
    },
    {
        "sample_id": 6757,
        "pred_sql": "SELECT customer.c_name, nation.n_name, region.r_name, customer.c_address FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE customer.c_address = 'wH55UnX7 VI';",
        "retrieved": [
            6744
        ],
        "token_usage": {
            "tokens": 1794,
            "cost": 0.0003429
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'"
    },
    {
        "sample_id": 6794,
        "pred_sql": "SELECT p_name FROM part",
        "retrieved": [
            6718
        ],
        "token_usage": {
            "tokens": 1714,
            "cost": 0.00029354999999999995
        },
        "db_id": "retails",
        "gold_sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.l_discount = 0.0000"
    },
    {
        "sample_id": 6785,
        "pred_sql": "SELECT COUNT(*) FROM supplier WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Egypt') AND s_acctbal < 0;",
        "retrieved": [
            6766
        ],
        "token_usage": {
            "tokens": 1792,
            "cost": 0.00034215
        },
        "db_id": "retails",
        "gold_sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'EGYPT'"
    },
    {
        "sample_id": 6910,
        "pred_sql": "SELECT orders.o_clerk FROM orders JOIN lineitem ON orders.o_orderkey = lineitem.l_orderkey WHERE lineitem.l_extendedprice = (SELECT MAX(lineitem.l_extendedprice) FROM lineitem)",
        "retrieved": [
            6725
        ],
        "token_usage": {
            "tokens": 1808,
            "cost": 0.00035444999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T2.l_extendedprice DESC LIMIT 1"
    },
    {
        "sample_id": 6861,
        "pred_sql": "SELECT DISTINCT p_brand FROM part WHERE p_type = 'promo brushed steel';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1647,
            "cost": 0.00030104999999999997
        },
        "db_id": "retails",
        "gold_sql": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "sample_id": 5402,
        "pred_sql": "SELECT employees.firstname, employees.middleinitial, employees.lastname FROM employees INNER JOIN sales ON employees.employeeid = sales.salespersonid INNER JOIN customers ON sales.customerid = customers.customerid INNER JOIN products ON sales.productid = products.productid WHERE customers.firstname = 'Elizabeth' AND customers.middleinitial = 'A' AND customers.lastname = 'White' AND products.name = 'Road-250 Black' AND products.price = '48'",
        "retrieved": [
            5381
        ],
        "token_usage": {
            "tokens": 883,
            "cost": 0.00021974999999999997
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID INNER JOIN Customers AS T4 ON T2.CustomerID = T4.CustomerID WHERE T4.MiddleInitial = 'A' AND T4.LastName = 'White' AND T1.Name = 'Road-250 Black, 48' AND T4.FirstName = 'Elizabeth'"
    },
    {
        "sample_id": 5384,
        "pred_sql": "SELECT customers.firstname, customers.lastname, SUM(sales.quantity) AS total_quantity \nFROM customers \nINNER JOIN sales ON customers.customerid = sales.customerid \nWHERE customers.lastname = 'Valdez' \nGROUP BY customers.customerid \nORDER BY total_quantity DESC \nLIMIT 1;",
        "retrieved": [
            5421
        ],
        "token_usage": {
            "tokens": 876,
            "cost": 0.0002187
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.LastName = 'Valdez' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 5417,
        "pred_sql": "SELECT employees.firstname FROM employees INNER JOIN sales ON sales.salespersonid = employees.employeeid INNER JOIN products ON sales.productid = products.productid WHERE sales.quantity > 500 GROUP BY employees.firstname",
        "retrieved": [
            5448
        ],
        "token_usage": {
            "tokens": 881,
            "cost": 0.00020054999999999997
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.Quantity > 500"
    },
    {
        "sample_id": 5363,
        "pred_sql": "SELECT COUNT(salesid) FROM sales WHERE customerid = '80'",
        "retrieved": [
            5364
        ],
        "token_usage": {
            "tokens": 731,
            "cost": 0.00014745
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80"
    },
    {
        "sample_id": 5438,
        "pred_sql": "SELECT products.name, products.price FROM products INNER JOIN sales ON products.productid = sales.productid INNER JOIN customers ON sales.customerid = customers.customerid WHERE customers.firstname = 'Erica' AND customers.lastname = 'Xu'",
        "retrieved": [
            5411
        ],
        "token_usage": {
            "tokens": 960,
            "cost": 0.00023175
        },
        "db_id": "sales",
        "gold_sql": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'"
    },
    {
        "sample_id": 5451,
        "pred_sql": "SELECT SUM(sales.quantity * products.price) AS total_sales_amount FROM customers INNER JOIN sales ON customers.customerid = sales.customerid INNER JOIN employees ON sales.salespersonid = employees.employeeid INNER JOIN products ON sales.productid = products.productid WHERE employees.firstname = 'Heather' AND employees.lastname = 'McBadden'",
        "retrieved": [
            5419
        ],
        "token_usage": {
            "tokens": 938,
            "cost": 0.00023475
        },
        "db_id": "sales",
        "gold_sql": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Heather' AND T1.LastName = 'McBadden'"
    },
    {
        "sample_id": 5414,
        "pred_sql": "SELECT employees.firstname, employees.lastname FROM employees INNER JOIN sales ON employees.employeeid = sales.salespersonid GROUP BY employees.employeeid ORDER BY SUM(sales.quantity) DESC LIMIT 1;",
        "retrieved": [
            5419
        ],
        "token_usage": {
            "tokens": 900,
            "cost": 0.00021239999999999996
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 5393,
        "pred_sql": "SELECT products.name FROM products INNER JOIN sales ON products.productid = sales.productid GROUP BY products.name HAVING SUM(sales.quantity) > 950",
        "retrieved": [
            5455
        ],
        "token_usage": {
            "tokens": 858,
            "cost": 0.00019125
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 950"
    },
    {
        "sample_id": 5396,
        "pred_sql": "SELECT SUM(s.quantity * p.price) AS total_sales_amount FROM sales s JOIN products p ON s.productid = p.productid WHERE p.name = 'Reflector'",
        "retrieved": [
            5364
        ],
        "token_usage": {
            "tokens": 766,
            "cost": 0.00016934999999999997
        },
        "db_id": "sales",
        "gold_sql": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Reflector'"
    },
    {
        "sample_id": 5418,
        "pred_sql": "SELECT customers.firstname FROM sales INNER JOIN customers ON sales.customerid = customers.customerid WHERE sales.salespersonid = '1'",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 829,
            "cost": 0.00018194999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 1"
    },
    {
        "sample_id": 5447,
        "pred_sql": "SELECT COUNT(products.productid) FROM products WHERE products.price <= 0.0",
        "retrieved": [
            5428
        ],
        "token_usage": {
            "tokens": 768,
            "cost": 0.00016334999999999999
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0"
    },
    {
        "sample_id": 5420,
        "pred_sql": "SELECT customers.firstname, customers.lastname FROM customers INNER JOIN sales ON customers.customerid = sales.customerid WHERE sales.quantity > 600",
        "retrieved": [
            5415
        ],
        "token_usage": {
            "tokens": 776,
            "cost": 0.0001605
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Quantity > 600"
    },
    {
        "sample_id": 5457,
        "pred_sql": "SELECT SUM(quantity) AS total_bolts_sold FROM sales WHERE salesid = '551971' AND productid = (SELECT productid FROM products WHERE name = 'chainring bolt');",
        "retrieved": [],
        "token_usage": {
            "tokens": 727,
            "cost": 0.00018104999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Chainring Bolts' AND T1.SalesID = 551971"
    },
    {
        "sample_id": 5435,
        "pred_sql": "SELECT COUNT(DISTINCT customers.customerid) AS customer_count FROM customers INNER JOIN sales ON customers.customerid = sales.customerid WHERE customers.firstname = 'Erica' AND sales.quantity < 200;",
        "retrieved": [
            5421
        ],
        "token_usage": {
            "tokens": 836,
            "cost": 0.00019289999999999997
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(T1.ProductID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Erica' AND T1.Quantity < 200"
    },
    {
        "sample_id": 5456,
        "pred_sql": "SELECT COUNT(sales.salesid) FROM sales INNER JOIN employees ON sales.salespersonid = employees.employeeid INNER JOIN products ON sales.productid = products.productid WHERE products.name = 'ML Road Frame-W - Yellow, 40'",
        "retrieved": [
            5399
        ],
        "token_usage": {
            "tokens": 862,
            "cost": 0.00020444999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'ML Road Frame-W - Yellow, 40'"
    },
    {
        "sample_id": 5454,
        "pred_sql": "SELECT employees.firstname, employees.middleinitial, employees.lastname FROM employees INNER JOIN sales ON sales.salespersonid = employees.employeeid GROUP BY sales.salespersonid, employees.firstname, employees.middleinitial, employees.lastname ORDER BY COUNT(sales.salesid) DESC LIMIT 3",
        "retrieved": [
            5448
        ],
        "token_usage": {
            "tokens": 914,
            "cost": 0.00021854999999999997
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 3"
    },
    {
        "sample_id": 5416,
        "pred_sql": "SELECT products.name FROM products INNER JOIN sales ON products.productid = sales.productid WHERE sales.salespersonid = '20' GROUP BY products.name ORDER BY SUM(sales.quantity) DESC LIMIT 1;",
        "retrieved": [
            5373
        ],
        "token_usage": {
            "tokens": 849,
            "cost": 0.00020385
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 20 ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "sample_id": 5423,
        "pred_sql": "SELECT DISTINCT sales.customerid FROM sales INNER JOIN products ON sales.productid = products.productid WHERE products.price BETWEEN '1000' AND '2000'",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 827,
            "cost": 0.00018119999999999999
        },
        "db_id": "sales",
        "gold_sql": "SELECT DISTINCT T2.CustomerID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 1000 AND 2000"
    },
    {
        "sample_id": 5426,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN products.name = 'blades' THEN sales.quantity ELSE 0 END) AS FLOAT) * 100 / COUNT(sales.salesid) AS percentage_sold_blades FROM sales INNER JOIN products ON sales.productid = products.productid",
        "retrieved": [
            5411
        ],
        "token_usage": {
            "tokens": 934,
            "cost": 0.0002166
        },
        "db_id": "sales",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.Name = 'Blade', T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 5425,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN products.price = '0.0' THEN sales.quantity ELSE 0 END) AS FLOAT) * 100.0 / SUM(sales.quantity) AS gift_percentage FROM sales INNER JOIN products ON sales.productid = products.productid;",
        "retrieved": [
            5411
        ],
        "token_usage": {
            "tokens": 937,
            "cost": 0.00021794999999999999
        },
        "db_id": "sales",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.Price = 0, T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity)FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 5434,
        "pred_sql": "SELECT COUNT(*) FROM sales INNER JOIN products ON sales.productid = products.productid WHERE sales.quantity = 60 AND products.price <= 500",
        "retrieved": [
            5433
        ],
        "token_usage": {
            "tokens": 831,
            "cost": 0.00017999999999999998
        },
        "db_id": "sales",
        "gold_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity = 60 AND T1.Price <= 500"
    },
    {
        "sample_id": 5439,
        "pred_sql": "SELECT sales.salesid FROM sales INNER JOIN products ON sales.productid = products.productid WHERE sales.quantity = 590 AND products.name = 'External Lock Washer 7'",
        "retrieved": [
            5440
        ],
        "token_usage": {
            "tokens": 817,
            "cost": 0.00017249999999999996
        },
        "db_id": "sales",
        "gold_sql": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'External Lock Washer 7' AND T1.Quantity = 590"
    },
    {
        "sample_id": 8156,
        "pred_sql": "SELECT (CAST(SUM(CASE WHEN sales_in_weather.item_nbr = '5' THEN sales_in_weather.units ELSE 0 END) AS FLOAT) / SUM(sales_in_weather.units)) * 100 AS percentage_units_sold\nFROM sales_in_weather\nINNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr\nINNER JOIN weather ON relation.station_nbr = weather.station_nbr\nWHERE sales_in_weather.store_nbr = '3' AND weather.tmax = (SELECT MAX(tmax) FROM weather WHERE date LIKE '2012%')",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1423,
            "cost": 0.00033765
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' )"
    },
    {
        "sample_id": 8181,
        "pred_sql": "SELECT relation.station_nbr, COUNT(DISTINCT relation.store_nbr) AS store_count FROM relation GROUP BY relation.station_nbr ORDER BY store_count DESC LIMIT 1;",
        "retrieved": [
            8187
        ],
        "token_usage": {
            "tokens": 1233,
            "cost": 0.0002565
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1"
    },
    {
        "sample_id": 8189,
        "pred_sql": "SELECT sales_in_weather.store_nbr, SUM(sales_in_weather.units) AS total_units_sold \nFROM sales_in_weather \nINNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr \nWHERE relation.station_nbr = 17 \nAND sales_in_weather.item_nbr = 45 \nAND sales_in_weather.date BETWEEN '2012-10-01' AND '2012-10-31' \nGROUP BY sales_in_weather.store_nbr \nORDER BY total_units_sold DESC \nLIMIT 1;",
        "retrieved": [
            8187
        ],
        "token_usage": {
            "tokens": 1346,
            "cost": 0.0003189
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 45 AND T2.station_nbr = 17 AND T1.\"date\" LIKE '%2012-10%' GROUP BY T1.store_nbr ORDER BY SUM(T1.units) DESC LIMIT 1"
    },
    {
        "sample_id": 8195,
        "pred_sql": "SELECT relation.station_nbr, COUNT(DISTINCT relation.store_nbr) AS store_count, AVG(weather.tmax) AS avg_max_temp\nFROM relation\nJOIN weather ON relation.station_nbr = weather.station_nbr\nWHERE weather.date BETWEEN '2012-02-01' AND '2012-02-29'\nGROUP BY relation.station_nbr\nORDER BY store_count DESC\nLIMIT 1;",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1352,
            "cost": 0.00030135
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT CAST(SUM(T2.tmax) AS REAL) / 29 FROM ( SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1 ) AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE SUBSTR(T2.\"date\", 1, 7) = '2012-02'"
    },
    {
        "sample_id": 8177,
        "pred_sql": "SELECT sales_in_weather.item_nbr FROM sales_in_weather WHERE sales_in_weather.\"date\" = '1/1/2012' AND sales_in_weather.store_nbr = '1' ORDER BY sales_in_weather.units DESC LIMIT 1",
        "retrieved": [
            8139
        ],
        "token_usage": {
            "tokens": 1198,
            "cost": 0.0002454
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT item_nbr FROM sales_in_weather WHERE \"date\" = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1"
    },
    {
        "sample_id": 8149,
        "pred_sql": "SELECT SUM(sales_in_weather.units) AS total_units_sold FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.store_nbr = '3' AND sales_in_weather.item_nbr = '5' AND weather.preciptotal > 0.05;",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1322,
            "cost": 0.0002802
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5"
    },
    {
        "sample_id": 8138,
        "pred_sql": "SELECT SUM(units) AS total_units_sold FROM sales_in_weather WHERE item_nbr = '9' AND store_nbr = '1' AND date BETWEEN '2012-01-01' AND '2012-01-31';",
        "retrieved": [
            8139
        ],
        "token_usage": {
            "tokens": 1174,
            "cost": 0.00023324999999999995
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(units) FROM sales_in_weather WHERE SUBSTR(\"date\", 6, 2) = '01' AND SUBSTR(\"date\", 1, 4) = '2012' AND item_nbr = 9 AND store_nbr = 1"
    },
    {
        "sample_id": 8164,
        "pred_sql": "SELECT COUNT(DISTINCT relation.store_nbr) AS store_count \nFROM weather \nJOIN relation ON weather.station_nbr = relation.station_nbr \nWHERE weather.depart > 0 \nAND weather.tmax = (SELECT MAX(tmax) \n                   FROM weather \n                   WHERE depart > 0);",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1275,
            "cost": 0.00025515
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY depart DESC LIMIT 1 )"
    },
    {
        "sample_id": 8171,
        "pred_sql": "SELECT codesum FROM weather INNER JOIN relation ON weather.station_nbr = relation.station_nbr INNER JOIN sales_in_weather ON relation.store_nbr = sales_in_weather.store_nbr WHERE relation.store_nbr = 2 AND sales_in_weather.date = '2013/2/12'",
        "retrieved": [
            8151
        ],
        "token_usage": {
            "tokens": 1305,
            "cost": 0.00027045
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT T1.codesum FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2013-02-12' AND T2.store_nbr = 2"
    },
    {
        "sample_id": 8190,
        "pred_sql": "SELECT sales_in_weather.item_nbr FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE weather.snowfall = (SELECT MAX(snowfall) FROM weather)",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1320,
            "cost": 0.00028395
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN ( SELECT station_nbr, \"date\" FROM weather ORDER BY snowfall DESC LIMIT 1 ) AS T3 ON T2.station_nbr = T3.station_nbr"
    },
    {
        "sample_id": 8152,
        "pred_sql": "SELECT (SELECT SUM(sales_in_weather.units) FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.store_nbr = '5' AND sales_in_weather.item_nbr = '16' AND weather.tmax = (SELECT MAX(tmax) FROM weather WHERE date LIKE '2012%')) - (SELECT SUM(sales_in_weather.units) FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE sales_in_weather.store_nbr = '10' AND sales_in_weather.item_nbr = '16' AND weather.tmax = (SELECT MAX(tmax) FROM weather WHERE date LIKE '2012%')) AS units_difference;",
        "retrieved": [
            8155
        ],
        "token_usage": {
            "tokens": 1525,
            "cost": 0.00039975
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )"
    },
    {
        "sample_id": 8180,
        "pred_sql": "SELECT weather.date FROM weather WHERE weather.station_nbr = 1 AND weather.tmax = (SELECT MAX(tmax) FROM weather WHERE station_nbr = 1 AND date BETWEEN '2012-01-01' AND '2014-12-31')",
        "retrieved": [
            8140
        ],
        "token_usage": {
            "tokens": 1189,
            "cost": 0.00024854999999999994
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT \"date\" FROM weather WHERE station_nbr = 1 AND CAST(SUBSTR(\"date\", 1, 4) AS int) BETWEEN 2012 AND 2014 ORDER BY tmax DESC LIMIT 1"
    },
    {
        "sample_id": 8184,
        "pred_sql": "SELECT COUNT(DISTINCT relation.store_nbr) AS store_count FROM relation INNER JOIN weather ON relation.station_nbr = weather.station_nbr WHERE weather.avgspeed = (SELECT MAX(avgspeed) FROM weather)",
        "retrieved": [
            8150
        ],
        "token_usage": {
            "tokens": 1211,
            "cost": 0.00022979999999999997
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 )"
    },
    {
        "sample_id": 8178,
        "pred_sql": "SELECT COUNT(DISTINCT relation.store_nbr) AS store_count FROM relation WHERE relation.station_nbr = 12;",
        "retrieved": [
            8187
        ],
        "token_usage": {
            "tokens": 1220,
            "cost": 0.0002487
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(store_nbr) FROM relation WHERE station_nbr = 12"
    },
    {
        "sample_id": 8146,
        "pred_sql": "SELECT COUNT(DISTINCT sales_in_weather.date) AS days_count \nFROM sales_in_weather \nINNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr \nINNER JOIN weather ON relation.station_nbr = weather.station_nbr \nWHERE sales_in_weather.item_nbr = '5' \nAND sales_in_weather.store_nbr = '3' \nAND weather.tmax > 90 \nAND sales_in_weather.units > 100;",
        "retrieved": [
            8153
        ],
        "token_usage": {
            "tokens": 1492,
            "cost": 0.00033719999999999996
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90"
    },
    {
        "sample_id": 8200,
        "pred_sql": "SELECT MIN(weather.dewpoint) AS min_dewpoint FROM sales_in_weather INNER JOIN relation ON sales_in_weather.store_nbr = relation.store_nbr INNER JOIN weather ON relation.station_nbr = weather.station_nbr;",
        "retrieved": [
            8145
        ],
        "token_usage": {
            "tokens": 1293,
            "cost": 0.00026549999999999995
        },
        "db_id": "sales_in_weather",
        "gold_sql": "SELECT MIN(dewpoint) FROM weather"
    },
    {
        "sample_id": 3018,
        "pred_sql": "SELECT COUNT(paragraphs.chapter_id) FROM works INNER JOIN chapters AS T2 ON works.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE works.title = 'Comedy of Errors' AND T2.act = '5' AND T2.scene = '1'",
        "retrieved": [
            2999
        ],
        "token_usage": {
            "tokens": 898,
            "cost": 0.0002031
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 5 AND T2.Scene = 1 AND T1.Title = 'Comedy of Errors'"
    },
    {
        "sample_id": 3015,
        "pred_sql": "SELECT COUNT(chapters.scene) AS scene_count FROM works INNER JOIN chapters ON works.id = chapters.work_id WHERE works.id = 9 AND chapters.act = '5'",
        "retrieved": [
            3022
        ],
        "token_usage": {
            "tokens": 892,
            "cost": 0.00019184999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5"
    },
    {
        "sample_id": 3056,
        "pred_sql": "SELECT COUNT(paragraphs.plaintext) AS total_lines FROM paragraphs INNER JOIN chapters ON paragraphs.chapter_id = chapters.id INNER JOIN works ON chapters.work_id = works.id WHERE chapters.act = '1' AND chapters.scene = '2' AND works.title = 'Twelfth Night' AND paragraphs.character_id = (SELECT id FROM characters WHERE charname = 'Viola')",
        "retrieved": [
            3008
        ],
        "token_usage": {
            "tokens": 939,
            "cost": 0.00021869999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night'"
    },
    {
        "sample_id": 2980,
        "pred_sql": "SELECT chapters.description FROM works INNER JOIN chapters AS T2 ON works.id = T2.work_id WHERE T2.act = '2' AND T2.scene = '2' AND works.title = 'Midsummer Night's Dream'",
        "retrieved": [
            3008
        ],
        "token_usage": {
            "tokens": 911,
            "cost": 0.00020324999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'"
    },
    {
        "sample_id": 3010,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN works.genretype = 'comedy' THEN chapters.scene ELSE 0 END) AS FLOAT) / COUNT(chapters.scene) AS average_scenes FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.title LIKE '%Shakespeare%';",
        "retrieved": [
            2983
        ],
        "token_usage": {
            "tokens": 963,
            "cost": 0.00022005
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'"
    },
    {
        "sample_id": 2992,
        "pred_sql": "SELECT works.longtitle FROM works INNER JOIN chapters ON works.id = chapters.work_id WHERE chapters.act = '1' GROUP BY works.longtitle ORDER BY COUNT(chapters.scene) DESC LIMIT 1;",
        "retrieved": [
            2981
        ],
        "token_usage": {
            "tokens": 1125,
            "cost": 0.00026145
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1"
    },
    {
        "sample_id": 2979,
        "pred_sql": "SELECT DISTINCT chapters.description FROM characters INNER JOIN paragraphs AS T2 ON characters.id = T2.character_id INNER JOIN chapters AS T3 ON T2.chapter_id = T3.id WHERE characters.id = 324 AND chapters.description = 'this friend of Caesar'",
        "retrieved": [
            3035
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.00021194999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'"
    },
    {
        "sample_id": 2966,
        "pred_sql": "SELECT AVG(character_count) FROM (SELECT COUNT(DISTINCT characters.id) AS character_count FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE works.title LIKE '%Shakespeare%' GROUP BY works.id) AS work_character_counts;",
        "retrieved": [
            3062
        ],
        "token_usage": {
            "tokens": 997,
            "cost": 0.00022784999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT SUM(DISTINCT T4.id) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id"
    },
    {
        "sample_id": 3044,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN works.genretype = 'historical' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(chapters.scene) AS percentage FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.date BETWEEN 1500 AND 1599 AND chapters.scene >= 5",
        "retrieved": [
            2983
        ],
        "token_usage": {
            "tokens": 963,
            "cost": 0.0002187
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599"
    },
    {
        "sample_id": 3054,
        "pred_sql": "SELECT COUNT(DISTINCT works.id) AS work_count FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE characters.charname = 'Third Servingman' AND works.date BETWEEN 1600 AND 1610;",
        "retrieved": [
            2965
        ],
        "token_usage": {
            "tokens": 1183,
            "cost": 0.00026789999999999995
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman'"
    },
    {
        "sample_id": 3031,
        "pred_sql": "SELECT title FROM works ORDER BY date DESC LIMIT 1;",
        "retrieved": [
            3060
        ],
        "token_usage": {
            "tokens": 903,
            "cost": 0.00018585
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1"
    },
    {
        "sample_id": 3037,
        "pred_sql": "SELECT characters.description FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.paragraphnum = 20",
        "retrieved": [
            3025
        ],
        "token_usage": {
            "tokens": 835,
            "cost": 0.00017069999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 20"
    },
    {
        "sample_id": 2967,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN works.genretype = 'comedy' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(chapters.scene) AS average_scenes_per_act FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.title = 'Twelfth Night'",
        "retrieved": [
            2983
        ],
        "token_usage": {
            "tokens": 981,
            "cost": 0.0002322
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'"
    },
    {
        "sample_id": 3038,
        "pred_sql": "SELECT COUNT(DISTINCT chapters.id) FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id INNER JOIN chapters ON paragraphs.chapter_id = chapters.id WHERE characters.charname = 'Gratiano' AND characters.description = 'friend to Antonio and Bassiano'",
        "retrieved": [
            3035
        ],
        "token_usage": {
            "tokens": 932,
            "cost": 0.0002028
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Gratiano' AND T1.Description = 'friend to Antonio and Bassiano'"
    },
    {
        "sample_id": 3020,
        "pred_sql": "SELECT DISTINCT works.title FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE characters.charname = 'Froth'",
        "retrieved": [
            3060
        ],
        "token_usage": {
            "tokens": 928,
            "cost": 0.00019769999999999998
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'"
    },
    {
        "sample_id": 2978,
        "pred_sql": "SELECT COUNT(DISTINCT chapters.id) AS chapter_count FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id INNER JOIN chapters ON paragraphs.chapter_id = chapters.id WHERE characters.charname = 'Demetrius'",
        "retrieved": [
            3035
        ],
        "token_usage": {
            "tokens": 951,
            "cost": 0.00021735
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Demetrius'"
    },
    {
        "sample_id": 2972,
        "pred_sql": "SELECT characters.charname FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id WHERE paragraphs.plaintext = 'Would he do so, I'ld beg your precious mistress, Which he counts but a trifle.'",
        "retrieved": [
            3053
        ],
        "token_usage": {
            "tokens": 932,
            "cost": 0.00021315
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'Would he do so, I''ld beg your precious mistress,Which he counts but a trifle.'"
    },
    {
        "sample_id": 2973,
        "pred_sql": "SELECT COUNT(characters.id) FROM characters WHERE characters.abbrev = 'Titus Andronicus'",
        "retrieved": [
            3028
        ],
        "token_usage": {
            "tokens": 802,
            "cost": 0.00016575
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'"
    },
    {
        "sample_id": 2959,
        "pred_sql": "SELECT COUNT(paragraphs.chapter_id) FROM works INNER JOIN chapters AS T2 ON works.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE works.title = 'Twelfth Night' AND T2.act = '1' AND T2.scene = '1'",
        "retrieved": [
            2999
        ],
        "token_usage": {
            "tokens": 897,
            "cost": 0.00020294999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'"
    },
    {
        "sample_id": 2984,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN works.genretype = 'play' THEN 1 ELSE 0 END) AS FLOAT) * 1.0 / COUNT(chapters.scene) FROM chapters INNER JOIN works ON chapters.work_id = works.id WHERE works.date = '1599'",
        "retrieved": [
            2983
        ],
        "token_usage": {
            "tokens": 927,
            "cost": 0.00020025000000000002
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'"
    },
    {
        "sample_id": 3016,
        "pred_sql": "SELECT characters.charname, characters.description FROM characters INNER JOIN paragraphs ON characters.id = paragraphs.character_id INNER JOIN chapters ON paragraphs.chapter_id = chapters.id WHERE chapters.id = '18710'",
        "retrieved": [
            3035
        ],
        "token_usage": {
            "tokens": 929,
            "cost": 0.00020459999999999999
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710"
    },
    {
        "sample_id": 3001,
        "pred_sql": "SELECT COUNT(DISTINCT T4.id) AS character_count FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.title = 'Hamlet';",
        "retrieved": [
            2965
        ],
        "token_usage": {
            "tokens": 1117,
            "cost": 0.00023729999999999997
        },
        "db_id": "shakespeare",
        "gold_sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'"
    },
    {
        "sample_id": 5677,
        "pred_sql": "SELECT ship_id FROM shipment WHERE city_id = (SELECT city_id FROM city ORDER BY population DESC LIMIT 1)",
        "retrieved": [
            5612
        ],
        "token_usage": {
            "tokens": 1279,
            "cost": 0.00023099999999999998
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.population DESC LIMIT 1"
    },
    {
        "sample_id": 5676,
        "pred_sql": "SELECT customer.cust_name FROM customer INNER JOIN shipment ON customer.cust_id = shipment.cust_id WHERE shipment.ship_id = 1147;",
        "retrieved": [
            5609
        ],
        "token_usage": {
            "tokens": 1272,
            "cost": 0.00026054999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1147'"
    },
    {
        "sample_id": 5625,
        "pred_sql": "SELECT customer.cust_name FROM shipment INNER JOIN customer ON shipment.cust_id = customer.cust_id INNER JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'Oak Park'",
        "retrieved": [
            5607
        ],
        "token_usage": {
            "tokens": 1263,
            "cost": 0.00026460000000000003
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Oak Park'"
    },
    {
        "sample_id": 5624,
        "pred_sql": "SELECT driver.first_name, driver.last_name FROM driver INNER JOIN shipment ON driver.driver_id = shipment.driver_id INNER JOIN city ON city.city_id = shipment.city_id WHERE city.city_name = 'New York' AND shipment.ship_date BETWEEN '2016-02-01' AND '2016-02-29'",
        "retrieved": [
            5612
        ],
        "token_usage": {
            "tokens": 1353,
            "cost": 0.00027089999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.city_name = 'New York' AND T1.ship_date LIKE '2016-02%'"
    },
    {
        "sample_id": 5634,
        "pred_sql": "SELECT truck.make FROM truck INNER JOIN shipment AS T2 ON truck.truck_id = T2.truck_id WHERE T2.ship_id = '1011'",
        "retrieved": [
            5643
        ],
        "token_usage": {
            "tokens": 1245,
            "cost": 0.00024434999999999995
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1011'"
    },
    {
        "sample_id": 5583,
        "pred_sql": "SELECT COUNT(DISTINCT c.cust_id) FROM customer c INNER JOIN shipment s ON c.cust_id = s.cust_id WHERE s.ship_date BETWEEN '2017-01-01' AND '2017-12-31' AND c.annual_revenue > 30000000;",
        "retrieved": [
            5614
        ],
        "token_usage": {
            "tokens": 1309,
            "cost": 0.00026475
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2017' AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) T3"
    },
    {
        "sample_id": 5672,
        "pred_sql": "SELECT customer.annual_revenue FROM shipment INNER JOIN customer ON shipment.cust_id = customer.cust_id WHERE shipment.ship_id = 1047",
        "retrieved": [
            5614
        ],
        "token_usage": {
            "tokens": 1274,
            "cost": 0.00025005
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1047'"
    },
    {
        "sample_id": 5667,
        "pred_sql": "SELECT truck.make, truck.model_year FROM truck INNER JOIN shipment AS T2 ON truck.truck_id = T2.truck_id WHERE T2.ship_id = '1233'",
        "retrieved": [
            5643
        ],
        "token_usage": {
            "tokens": 1237,
            "cost": 0.00023999999999999998
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1233'"
    },
    {
        "sample_id": 5636,
        "pred_sql": "SELECT driver.state FROM shipment INNER JOIN driver ON shipment.driver_id = driver.driver_id WHERE shipment.ship_id = 1055;",
        "retrieved": [
            5608
        ],
        "token_usage": {
            "tokens": 1231,
            "cost": 0.00023414999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.state FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1055'"
    },
    {
        "sample_id": 5595,
        "pred_sql": "SELECT city.city_name FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE shipment.ship_id = 1701;",
        "retrieved": [
            5630
        ],
        "token_usage": {
            "tokens": 1245,
            "cost": 0.00023624999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1701'"
    },
    {
        "sample_id": 5593,
        "pred_sql": "SELECT COUNT(*) AS shipment_count FROM shipment WHERE truck_id IN (SELECT truck_id FROM truck ORDER BY model_year ASC LIMIT 1)",
        "retrieved": [
            5643
        ],
        "token_usage": {
            "tokens": 1276,
            "cost": 0.0002643
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id GROUP BY T1.model_year ORDER BY T1.model_year ASC LIMIT 1"
    },
    {
        "sample_id": 5652,
        "pred_sql": "SELECT truck.make FROM truck INNER JOIN shipment ON truck.truck_id = shipment.truck_id INNER JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks'",
        "retrieved": [
            5592
        ],
        "token_usage": {
            "tokens": 1258,
            "cost": 0.00025574999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT DISTINCT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks'"
    },
    {
        "sample_id": 5631,
        "pred_sql": "SELECT COUNT(DISTINCT city.city_id) FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE city.population > 50000 AND strftime('%Y', shipment.ship_date) = '2017'",
        "retrieved": [
            5630
        ],
        "token_usage": {
            "tokens": 1326,
            "cost": 0.00028125
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND STRFTIME('%Y', T2.ship_date) = '2017'"
    },
    {
        "sample_id": 5659,
        "pred_sql": "SELECT city.city_name FROM shipment INNER JOIN city ON shipment.city_id = city.city_id ORDER BY shipment.weight DESC LIMIT 1;",
        "retrieved": [
            5630
        ],
        "token_usage": {
            "tokens": 1262,
            "cost": 0.00024734999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T1.weight DESC LIMIT 1"
    },
    {
        "sample_id": 5619,
        "pred_sql": "SELECT SUM(s.weight) AS total_weight FROM shipment s INNER JOIN city c ON s.city_id = c.city_id WHERE c.city_name = 'San Mateo' AND c.state = 'California' AND strftime('%Y', s.ship_date) = '2016';",
        "retrieved": [
            5591
        ],
        "token_usage": {
            "tokens": 1335,
            "cost": 0.00028484999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT SUM(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'San Mateo' AND STRFTIME('%Y', T1.ship_date) = '2016'"
    },
    {
        "sample_id": 5653,
        "pred_sql": "SELECT DISTINCT customer.cust_name FROM shipment INNER JOIN customer ON shipment.cust_id = customer.cust_id WHERE shipment.ship_date BETWEEN '2017-02-01' AND '2017-02-28'",
        "retrieved": [
            5607
        ],
        "token_usage": {
            "tokens": 1242,
            "cost": 0.0002493
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_date LIKE '2017-02%'"
    },
    {
        "sample_id": 5579,
        "pred_sql": "SELECT SUM(s.weight) FROM shipment AS s INNER JOIN customer AS c ON s.cust_id = c.cust_id WHERE c.cust_name = 'S K L Enterprises Inc'",
        "retrieved": [
            5630
        ],
        "token_usage": {
            "tokens": 1266,
            "cost": 0.00024704999999999996
        },
        "db_id": "shipping",
        "gold_sql": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'"
    },
    {
        "sample_id": 5680,
        "pred_sql": "SELECT customer.address FROM customer INNER JOIN shipment ON customer.cust_id = shipment.cust_id WHERE shipment.ship_id = 1117;",
        "retrieved": [
            5609
        ],
        "token_usage": {
            "tokens": 1275,
            "cost": 0.0002619
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1117'"
    },
    {
        "sample_id": 5641,
        "pred_sql": "SELECT driver.last_name FROM shipment INNER JOIN driver ON shipment.driver_id = driver.driver_id WHERE shipment.ship_id = 1088;",
        "retrieved": [
            5608
        ],
        "token_usage": {
            "tokens": 1235,
            "cost": 0.00023654999999999998
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1088'"
    },
    {
        "sample_id": 5658,
        "pred_sql": "SELECT COUNT(*) FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE city.state = 'California' ORDER BY city.population ASC LIMIT 1;",
        "retrieved": [
            5617
        ],
        "token_usage": {
            "tokens": 1266,
            "cost": 0.00025739999999999997
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(T3.city_name) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.state = 'California' ORDER BY T3.population ASC LIMIT 1"
    },
    {
        "sample_id": 5584,
        "pred_sql": "SELECT COUNT(*) FROM customer INNER JOIN shipment ON customer.cust_id = shipment.cust_id WHERE STRFTIME('%Y', shipment.ship_date) = '2017' AND customer.cust_name = 'Sue Newell'",
        "retrieved": [
            5651
        ],
        "token_usage": {
            "tokens": 1263,
            "cost": 0.0002556
        },
        "db_id": "shipping",
        "gold_sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'"
    },
    {
        "sample_id": 5622,
        "pred_sql": "SELECT city.city_name, city.state FROM shipment INNER JOIN city ON shipment.city_id = city.city_id WHERE shipment.ship_id = 1002;",
        "retrieved": [
            5630
        ],
        "token_usage": {
            "tokens": 1259,
            "cost": 0.00024555
        },
        "db_id": "shipping",
        "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'"
    },
    {
        "sample_id": 2466,
        "pred_sql": "SELECT (COUNT(CASE WHEN incidents.subject_statuses = 'Shoot and Miss' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM incidents WHERE incidents.subject_weapon = 'Handgun';",
        "retrieved": [
            2482
        ],
        "token_usage": {
            "tokens": 803,
            "cost": 0.00019289999999999997
        },
        "db_id": "shooting",
        "gold_sql": "SELECT CAST(SUM(subject_statuses = 'Shoot and Miss') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Handgun'"
    },
    {
        "sample_id": 2461,
        "pred_sql": "SELECT CAST(SUM(officers.race = 'White') AS FLOAT) * 100 / COUNT(officers.case_number) AS percentage_white_officers FROM officers WHERE officers.gender = 'M'",
        "retrieved": [
            2476
        ],
        "token_usage": {
            "tokens": 815,
            "cost": 0.00019515
        },
        "db_id": "shooting",
        "gold_sql": "SELECT CAST(SUM(IIF(race = 'W', 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'"
    },
    {
        "sample_id": 2486,
        "pred_sql": "SELECT incidents.subject_weapon, subjects.race, subjects.gender FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.case_number = '031347-2015';",
        "retrieved": [
            2482
        ],
        "token_usage": {
            "tokens": 764,
            "cost": 0.00016544999999999998
        },
        "db_id": "shooting",
        "gold_sql": "SELECT T1.subject_weapon, T2.race, T2.gender FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '031347-2015'"
    },
    {
        "sample_id": 2480,
        "pred_sql": "SELECT COUNT(incidents.location) FROM incidents WHERE incidents.date BETWEEN '2015-06-01' AND '2015-06-30'",
        "retrieved": [
            2481
        ],
        "token_usage": {
            "tokens": 773,
            "cost": 0.00016815
        },
        "db_id": "shooting",
        "gold_sql": "SELECT COUNT(case_number) FROM incidents WHERE date BETWEEN '2015-06-01' AND '2015-06-30'"
    },
    {
        "sample_id": 2471,
        "pred_sql": "SELECT officers.last_name, incidents.subject_statuses FROM incidents INNER JOIN officers ON incidents.case_number = officers.case_number WHERE incidents.case_number = '134472-2015'",
        "retrieved": [
            2468
        ],
        "token_usage": {
            "tokens": 808,
            "cost": 0.0001869
        },
        "db_id": "shooting",
        "gold_sql": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'"
    },
    {
        "sample_id": 2483,
        "pred_sql": "SELECT CAST(SUM(officers.race = 'White') AS FLOAT) * 1.0 / COUNT(officers.case_number) AS proportion_white_males FROM officers WHERE officers.gender = 'M';\nSELECT CAST(SUM(officers.race = 'White') AS FLOAT) * 1.0 / COUNT(officers.case_number) AS proportion_white_females FROM officers WHERE officers.gender = 'F';",
        "retrieved": [
            2476
        ],
        "token_usage": {
            "tokens": 855,
            "cost": 0.00021959999999999997
        },
        "db_id": "shooting",
        "gold_sql": "SELECT CAST(SUM(gender = 'M') AS REAL) / SUM(gender = 'F') FROM officers WHERE race = 'W'"
    },
    {
        "sample_id": 4340,
        "pred_sql": "SELECT COUNT(*) FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE vote.stars > 5 AND strftime('%Y', episode.air_date) = '2008';",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1446,
            "cost": 0.0002862
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2008' AND T2.stars > 5;"
    },
    {
        "sample_id": 4324,
        "pred_sql": "SELECT keyword.keyword FROM award INNER JOIN episode ON award.episode_id = episode.episode_id WHERE award.award = 'WGA Award (TV)' AND award.result = 'Winner'",
        "retrieved": [
            4226
        ],
        "token_usage": {
            "tokens": 1475,
            "cost": 0.0002802
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'WGA Award (TV)';"
    },
    {
        "sample_id": 4253,
        "pred_sql": "SELECT keyword FROM keyword INNER JOIN episode ON keyword.episode_id = episode.episode_id WHERE episode.title = 'Double, Double, Boy in Trouble';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1296,
            "cost": 0.0002601
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Double, Double, Boy in Trouble';"
    },
    {
        "sample_id": 4172,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN vote ON vote.episode_id = episode.episode_id WHERE vote.votes > 0 AND vote.stars = 7 ORDER BY vote.votes DESC LIMIT 1",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1437,
            "cost": 0.0002925
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "sample_id": 4261,
        "pred_sql": "SELECT episode.title, episode.episode_id FROM award INNER JOIN vote ON award.episode_id = vote.episode_id INNER JOIN episode ON award.episode_id = episode.episode_id WHERE award.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND vote.votes > 200;",
        "retrieved": [
            4265
        ],
        "token_usage": {
            "tokens": 1527,
            "cost": 0.00030104999999999997
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.role = 'composer' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T2.votes > 200;"
    },
    {
        "sample_id": 4245,
        "pred_sql": "SELECT person.name FROM credit INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'The simpson 20s: Season 20' AND credit.role = 'producer';",
        "retrieved": [
            4313
        ],
        "token_usage": {
            "tokens": 1430,
            "cost": 0.00029955
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT person FROM Credit WHERE role = 'producer';"
    },
    {
        "sample_id": 4284,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE vote.stars = 2 AND vote.votes > 20",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1429,
            "cost": 0.00027735
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2 AND T2.votes > 20 AND T1.rating > 5.0 AND T1.rating <= 7.0;"
    },
    {
        "sample_id": 4238,
        "pred_sql": "SELECT keyword.keyword FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.title = 'Take My Life, Please'",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1365,
            "cost": 0.00026235
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';"
    },
    {
        "sample_id": 4193,
        "pred_sql": "SELECT episode.title FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE vote.stars = 10 ORDER BY vote.votes DESC LIMIT 1;",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1446,
            "cost": 0.00029115
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.votes DESC LIMIT 1;"
    },
    {
        "sample_id": 4208,
        "pred_sql": "SELECT person.birth_place FROM person INNER JOIN award ON person.name = award.person WHERE award.award = 'Best Voice-Over Performance' AND award.organization = 'Online Film & Television Association' AND award.year = 2009",
        "retrieved": [
            4348
        ],
        "token_usage": {
            "tokens": 1381,
            "cost": 0.00025619999999999994
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Best Voice-Over Performance' AND T2.organization = 'Online Film & Television Association' AND T2.year = 2009;"
    },
    {
        "sample_id": 4222,
        "pred_sql": "SELECT award.person, keyword.keyword, episode.episode_id FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id INNER JOIN award ON episode.episode_id = award.episode_id WHERE episode.title = 'The Good, the Sad and the Drugly' AND award.result = 'Nominee'",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1430,
            "cost": 0.00029775
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T3.person, T1.keyword, T1.episode_id FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T2.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';"
    },
    {
        "sample_id": 4259,
        "pred_sql": "SELECT DISTINCT credit.person FROM credit INNER JOIN vote ON credit.episode_id = vote.episode_id INNER JOIN episode ON credit.episode_id = episode.episode_id WHERE vote.stars > 5 AND episode.air_date LIKE '2009%'",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1451,
            "cost": 0.00029144999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;"
    },
    {
        "sample_id": 4258,
        "pred_sql": "SELECT person.name FROM award INNER JOIN episode ON award.episode_id = episode.episode_id WHERE award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND episode.title = 'No Loan Again, Naturally' AND award.result = 'Winner'",
        "retrieved": [
            4226
        ],
        "token_usage": {
            "tokens": 1523,
            "cost": 0.00030179999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'director' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally';"
    },
    {
        "sample_id": 4357,
        "pred_sql": "SELECT v.percent FROM vote v INNER JOIN episode e ON v.episode_id = e.episode_id WHERE e.air_date LIKE '2008%' AND v.votes BETWEEN 920 AND 950;",
        "retrieved": [
            4265
        ],
        "token_usage": {
            "tokens": 1552,
            "cost": 0.00031784999999999995
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T1.votes BETWEEN 950 AND 960;"
    },
    {
        "sample_id": 4364,
        "pred_sql": "SELECT award.award_category FROM award INNER JOIN vote ON award.episode_id = vote.episode_id WHERE vote.votes = (SELECT MAX(votes) FROM vote)",
        "retrieved": [
            4293
        ],
        "token_usage": {
            "tokens": 1433,
            "cost": 0.00027299999999999997
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;"
    },
    {
        "sample_id": 4310,
        "pred_sql": "SELECT COUNT(DISTINCT credit.person) FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id WHERE credit.category = 'Casting Department' AND credit.credited = '1'",
        "retrieved": [
            4294
        ],
        "token_usage": {
            "tokens": 1407,
            "cost": 0.00027945
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.category = 'Casting Department';"
    },
    {
        "sample_id": 4268,
        "pred_sql": "SELECT COUNT(DISTINCT credit.person) AS executive_producer_count FROM award INNER JOIN credit ON award.episode_id = credit.episode_id WHERE award.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND award.result = 'Nominee' AND credit.role = 'Executive Producer'",
        "retrieved": [
            4290
        ],
        "token_usage": {
            "tokens": 1415,
            "cost": 0.00028244999999999995
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';"
    },
    {
        "sample_id": 4337,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM award WHERE result = 'Winner') AS percentage_winners_above_1_75_meters\nFROM person\nWHERE height_meters > 1.75 AND name IN (SELECT person FROM award WHERE result = 'Winner');",
        "retrieved": [],
        "token_usage": {
            "tokens": 1332,
            "cost": 0.00028169999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.height_meters > 1.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';"
    },
    {
        "sample_id": 4205,
        "pred_sql": "SELECT award.year - person.birthdate AS age, person.name FROM award INNER JOIN person ON award.person = person.name WHERE award.role = 'Winner' AND award.organization = 'Primetime Emmy Awards' AND award.award = 'Outstanding Voice-Over Performance' AND award.result = 'Winner' AND award.year = (SELECT MIN(year) FROM award WHERE award.organization = 'Primetime Emmy Awards' AND award.award = 'Outstanding Voice-Over Performance')",
        "retrieved": [
            4246
        ],
        "token_usage": {
            "tokens": 1567,
            "cost": 0.0003336
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.year - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Winner';"
    },
    {
        "sample_id": 4225,
        "pred_sql": "SELECT episode.episode_id, episode.title, keyword.keyword FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE vote.votes > 0 AND vote.stars = 1 ORDER BY vote.votes DESC LIMIT 3;",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1482,
            "cost": 0.0003158999999999999
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T3.episode_id, T2.title, T1.keyword FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 ORDER BY T3.votes DESC LIMIT 3;"
    },
    {
        "sample_id": 4174,
        "pred_sql": "SELECT (COUNT(DISTINCT e.episode_id) * 100.0 / (SELECT COUNT(DISTINCT episode_id) FROM episode WHERE rating > 7)) AS percentage\nFROM episode e\nINNER JOIN award a ON e.episode_id = a.episode_id\nWHERE a.award = 'Primetime Emmy' AND e.rating > 7;",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1484,
            "cost": 0.00030674999999999995
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.award_category = 'Primetime Emmy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating > 7 AND T1.result = 'Nominee';"
    },
    {
        "sample_id": 4167,
        "pred_sql": "SELECT episode.rating FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.person = 'Dan Castellaneta' AND award.award = 'Outstanding Voice-Over Performance' AND award.year = 2009;",
        "retrieved": [
            4293
        ],
        "token_usage": {
            "tokens": 1465,
            "cost": 0.00028859999999999997
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';"
    },
    {
        "sample_id": 4296,
        "pred_sql": "SELECT credit.person FROM credit INNER JOIN vote ON credit.episode_id = vote.episode_id WHERE vote.stars = 10 AND credit.role = 'writer' ORDER BY vote.votes DESC LIMIT 1;",
        "retrieved": [
            4168
        ],
        "token_usage": {
            "tokens": 1420,
            "cost": 0.0002877
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.person FROM Credit AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'Writer' AND T2.stars = 10 GROUP BY T1.person ORDER BY COUNT(*) DESC LIMIT 1;"
    },
    {
        "sample_id": 4166,
        "pred_sql": "SELECT COUNT(keyword.keyword) FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.air_date = '2008-10-19'",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1375,
            "cost": 0.00026609999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';"
    },
    {
        "sample_id": 4319,
        "pred_sql": "SELECT keyword.keyword, credit.person FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.episode_id = 'S20-E1'",
        "retrieved": [
            4191
        ],
        "token_usage": {
            "tokens": 1431,
            "cost": 0.00029384999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.keyword, T2.person FROM Keyword AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode_id = 'S20-E1';"
    },
    {
        "sample_id": 4344,
        "pred_sql": "SELECT person.name FROM person INNER JOIN credit ON person.name = credit.person WHERE credit.role = 'Smithers';",
        "retrieved": [
            4312
        ],
        "token_usage": {
            "tokens": 1387,
            "cost": 0.0002652
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Smithers';"
    },
    {
        "sample_id": 4189,
        "pred_sql": "SELECT COUNT(DISTINCT person.name) AS nominee_count FROM award INNER JOIN person ON award.person = person.name WHERE award.award = 'Comedy Series Award' AND award.year = 2009 AND person.birth_place = 'California' AND award.result = 'Nominee';",
        "retrieved": [
            4290
        ],
        "token_usage": {
            "tokens": 1409,
            "cost": 0.00027929999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.year = 2009 AND T2.award = 'Comedy Series' AND T1.birth_region = 'California';"
    },
    {
        "sample_id": 4327,
        "pred_sql": "SELECT SUM(CASE WHEN vote.votes < 5 THEN 5 ELSE vote.votes END) AS total_rating, CAST(SUM(CASE WHEN vote.votes < 5 THEN 5 ELSE vote.votes END) AS FLOAT) * 100.0 / COUNT(*) AS average_percentage FROM award INNER JOIN vote ON award.episode_id = vote.episode_id INNER JOIN episode ON award.episode_id = episode.episode_id WHERE award.award IN ('OFTA Television Award', 'WGA Award (TV)') AND award.result = 'Winner'",
        "retrieved": [
            4265
        ],
        "token_usage": {
            "tokens": 1612,
            "cost": 0.00035564999999999994
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT SUM(T2.rating) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award_category IN ('Jupiter Award ', 'WGA Award (TV)');"
    },
    {
        "sample_id": 4188,
        "pred_sql": "SELECT DISTINCT character_award.character FROM award INNER JOIN character_award ON award.award_id = character_award.award_id WHERE award.award = 'Outstanding Voice-Over Performance' AND award.year = 2009 AND award.result = 'Winner'",
        "retrieved": [
            4290
        ],
        "token_usage": {
            "tokens": 1383,
            "cost": 0.00026594999999999993
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance';"
    },
    {
        "sample_id": 4216,
        "pred_sql": "SELECT name, birthdate FROM person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;",
        "retrieved": [
            4312
        ],
        "token_usage": {
            "tokens": 1459,
            "cost": 0.00030119999999999995
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT name, birthdate FROM Person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;"
    },
    {
        "sample_id": 4360,
        "pred_sql": "SELECT DISTINCT episode.title FROM episode INNER JOIN award ON episode.episode_id = award.episode_id WHERE award.award = 'WGA Award (TV)' AND episode.votes > 1000",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1442,
            "cost": 0.00028424999999999994
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 1000 AND T1.award_category = 'WGA Award (TV)' AND T1.result = 'Nominee';"
    },
    {
        "sample_id": 4306,
        "pred_sql": "SELECT COUNT(*) AS not_born_in_connecticut FROM person WHERE birth_country != 'USA' OR (birth_country = 'USA' AND birth_region != 'Connecticut');",
        "retrieved": [],
        "token_usage": {
            "tokens": 1295,
            "cost": 0.00026175
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(name) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';"
    },
    {
        "sample_id": 4211,
        "pred_sql": "SELECT COUNT(DISTINCT award.person) FROM award INNER JOIN person ON award.person = person.name WHERE person.birth_country = 'USA' AND award.result = 'Winner';",
        "retrieved": [
            4290
        ],
        "token_usage": {
            "tokens": 1372,
            "cost": 0.0002634
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Winner';"
    },
    {
        "sample_id": 4179,
        "pred_sql": "SELECT episode.title, keyword.keyword FROM episode INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.air_date = '2009-03-22'",
        "retrieved": [
            4277
        ],
        "token_usage": {
            "tokens": 1437,
            "cost": 0.00030195
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';"
    },
    {
        "sample_id": 4173,
        "pred_sql": "SELECT AVG(vote.stars) AS average_stars FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id WHERE episode.title = 'Lost Verizon'",
        "retrieved": [
            4366
        ],
        "token_usage": {
            "tokens": 1418,
            "cost": 0.00027435
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT CAST(SUM(T2.votes * T2.stars) AS REAL) / SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon';"
    },
    {
        "sample_id": 4196,
        "pred_sql": "SELECT COUNT(*) FROM person INNER JOIN credit ON person.name = credit.person WHERE credit.episode_id = 'E20-5'",
        "retrieved": [
            4312
        ],
        "token_usage": {
            "tokens": 1403,
            "cost": 0.0002703
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(DISTINCT T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 5;"
    },
    {
        "sample_id": 4275,
        "pred_sql": "SELECT DISTINCT character_award.character FROM award INNER JOIN character_award ON award.award_id = character_award.award_id WHERE award.person = 'Dan Castellaneta' AND award.result = 'Winner'",
        "retrieved": [
            4290
        ],
        "token_usage": {
            "tokens": 1381,
            "cost": 0.00026474999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award LIKE '%Voice-Over%' AND T1.person = 'Dan Castellaneta';"
    },
    {
        "sample_id": 4204,
        "pred_sql": "SELECT COUNT(e.episode_id) AS episode_count FROM episode e WHERE e.episode_id NOT IN (SELECT c.episode_id FROM credit c WHERE c.person = 'Dell Hake')",
        "retrieved": [
            4313
        ],
        "token_usage": {
            "tokens": 1408,
            "cost": 0.00028589999999999996
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT COUNT(*) FROM Credit WHERE person = 'Dell Hake' AND credited = 'false';"
    },
    {
        "sample_id": 4280,
        "pred_sql": "SELECT vote.votes FROM episode INNER JOIN vote ON vote.episode_id = episode.episode_id WHERE episode.title = 'Lisa the Drama Queen' AND vote.stars = 5",
        "retrieved": [
            4170
        ],
        "token_usage": {
            "tokens": 1429,
            "cost": 0.0002877
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lisa the Drama Queen' AND T2.stars = 5;"
    },
    {
        "sample_id": 4283,
        "pred_sql": "SELECT keyword.keyword FROM keyword INNER JOIN episode ON keyword.episode_id = episode.episode_id ORDER BY episode.votes ASC LIMIT 1;",
        "retrieved": [
            4177
        ],
        "token_usage": {
            "tokens": 1395,
            "cost": 0.0002799
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.votes LIMIT 1;"
    },
    {
        "sample_id": 4342,
        "pred_sql": "SELECT DISTINCT award.year FROM award INNER JOIN character_award ON award.award_id = character_award.award_id WHERE character_award.character = 'Mr. Burns' AND award.result = 'Winner'",
        "retrieved": [
            4290
        ],
        "token_usage": {
            "tokens": 1379,
            "cost": 0.0002658
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';"
    },
    {
        "sample_id": 4363,
        "pred_sql": "SELECT episode.title, episode.episode_image, award.award, award.person FROM award INNER JOIN episode ON award.episode_id = episode.episode_id WHERE episode.rating BETWEEN 5.0 AND 7.0 AND SUBSTR(episode.air_date, 1, 10) = '2009-04-19' AND award.award = 'Prism Award' AND award.result = 'Nominee'",
        "retrieved": [
            4226
        ],
        "token_usage": {
            "tokens": 1583,
            "cost": 0.0003405
        },
        "db_id": "simpson_episodes",
        "gold_sql": "SELECT T3.title FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.air_date = '2009-04-19' AND T1.award_category = 'Prism Award' AND T2.stars = 5 AND T1.result = 'Nominee';"
    },
    {
        "sample_id": 1889,
        "pred_sql": "SELECT COUNT(*) FROM venue WHERE city_id = (SELECT city_id FROM city WHERE city_name = 'Pune')",
        "retrieved": [
            1926
        ],
        "token_usage": {
            "tokens": 2554,
            "cost": 0.00043259999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'"
    },
    {
        "sample_id": 1936,
        "pred_sql": "SELECT venue.venue_name, city.city_name FROM match INNER JOIN venue ON match.venue_id = venue.venue_id INNER JOIN city ON venue.city_id = city.city_id WHERE match.match_id = 336005;",
        "retrieved": [
            1904
        ],
        "token_usage": {
            "tokens": 2530,
            "cost": 0.0004411499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Venue_Name, T3.City_Name FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN City AS T3 ON T2.City_Id = T3.City_Id WHERE T1.Match_Id = '336005'"
    },
    {
        "sample_id": 1940,
        "pred_sql": "SELECT player.player_name, player_match.role_id, match.match_date FROM player INNER JOIN player_match ON player.player_id = player_match.player_id INNER JOIN match ON player_match.match_id = match.match_id WHERE player.dob = (SELECT MIN(dob) FROM player)",
        "retrieved": [
            1809
        ],
        "token_usage": {
            "tokens": 2529,
            "cost": 0.00044234999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Match_Date, T4.Role_Desc FROM \"Match\" AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id ORDER BY T3.DOB DESC LIMIT 1"
    },
    {
        "sample_id": 1902,
        "pred_sql": "SELECT COUNT(DISTINCT match.venue_id) AS venue_count FROM match WHERE match.toss_winner = match.team_2 AND match.match_winner != match.team_2;",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2567,
            "cost": 0.0004583999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Team_2 = T1.Match_Winner THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Team_1 = T1.Toss_Winner"
    },
    {
        "sample_id": 1863,
        "pred_sql": "SELECT COUNT(*) AS man_of_the_match_count FROM match INNER JOIN player ON match.man_of_the_match = player.player_id WHERE player.player_name = 'Yuvraj Singh'",
        "retrieved": [
            1809
        ],
        "token_usage": {
            "tokens": 2538,
            "cost": 0.0004473
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'Yuvraj Singh' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match"
    },
    {
        "sample_id": 2006,
        "pred_sql": "SELECT country_id FROM city WHERE city_name = 'East London';",
        "retrieved": [],
        "token_usage": {
            "tokens": 2363,
            "cost": 0.0003963
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Country_id FROM City WHERE City_Name = 'East London'"
    },
    {
        "sample_id": 1944,
        "pred_sql": "SELECT match.match_date FROM match WHERE match.match_winner = (SELECT team.team_id FROM team WHERE team.team_name = 'Sunrisers Hyderabad') ORDER BY match.match_date ASC LIMIT 1;",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2523,
            "cost": 0.0004338
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'"
    },
    {
        "sample_id": 2042,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN player_match ON player.player_id = player_match.player_id INNER JOIN rolee ON player_match.role_id = rolee.role_id WHERE rolee.role_desc = 'captain'",
        "retrieved": [
            1916
        ],
        "token_usage": {
            "tokens": 2608,
            "cost": 0.00046454999999999993
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Player_Name FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' GROUP BY T2.Player_Name"
    },
    {
        "sample_id": 2026,
        "pred_sql": "SELECT player.dob, player_match.role_id FROM player JOIN player_match ON player.player_id = player_match.player_id WHERE player.player_name = 'R Dravid'",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2507,
            "cost": 0.0004485
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.DOB, T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'R Dravid' GROUP BY T1.DOB, T3.Role_Desc"
    },
    {
        "sample_id": 1788,
        "pred_sql": "SELECT COUNT(*) FROM match WHERE match_date BETWEEN '2008-05-01' AND '2008-05-31';",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2546,
            "cost": 0.0004305
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'"
    },
    {
        "sample_id": 1883,
        "pred_sql": "SELECT venue.venue_name FROM match INNER JOIN venue ON match.venue_id = venue.venue_id WHERE match.season_id = 2 GROUP BY venue.venue_name",
        "retrieved": [
            1904
        ],
        "token_usage": {
            "tokens": 2518,
            "cost": 0.00043754999999999993
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Venue_Name FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T1.Season_Id = 2 GROUP BY T2.Venue_Name"
    },
    {
        "sample_id": 2013,
        "pred_sql": "SELECT player.player_name FROM player INNER JOIN batsman_scored ON player.player_id = batsman_scored.striker WHERE batsman_scored.runs_scored < 3;",
        "retrieved": [
            1914
        ],
        "token_usage": {
            "tokens": 2535,
            "cost": 0.00044189999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Batsman_Scored AS T3 ON T2.Match_ID = T3.Match_ID WHERE T3.Runs_Scored < 3 GROUP BY T1.Player_Name"
    },
    {
        "sample_id": 1954,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team AS T2 ON T2.team_id = match.team_1 ORDER BY match.match_id LIMIT 1",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2525,
            "cost": 0.00043634999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Team_Name FROM team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Season_Id = 1 ORDER BY T2.Match_Date LIMIT 1"
    },
    {
        "sample_id": 1988,
        "pred_sql": "SELECT T1.team_name AS Team1, T2.team_name AS Team2 FROM match AS M INNER JOIN team AS T1 ON M.team_1 = T1.team_id INNER JOIN team AS T2 ON M.team_2 = T2.team_id WHERE M.win_margin = 38 AND M.match_date = '2009-04-30';",
        "retrieved": [
            1852
        ],
        "token_usage": {
            "tokens": 2640,
            "cost": 0.00047519999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'"
    },
    {
        "sample_id": 1947,
        "pred_sql": "SELECT SUM(batsman_scored.runs_scored) * 6.0 / 16 AS run_rate, player.player_name AS man_of_the_match\nFROM match\nJOIN batsman_scored ON match.match_id = batsman_scored.match_id\nJOIN player ON match.man_of_the_match = player.player_id\nWHERE match.match_id = 335999 AND batsman_scored.innings_no = 1 AND batsman_scored.over_id <= 16;",
        "retrieved": [
            1914
        ],
        "token_usage": {
            "tokens": 2676,
            "cost": 0.0005193
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 16"
    },
    {
        "sample_id": 1934,
        "pred_sql": "SELECT m.match_id, m.match_date FROM match m JOIN venue v ON m.venue_id = v.venue_id WHERE v.venue_name = 'Kingsmead' AND m.match_date IN (SELECT match_date FROM match WHERE venue_id = v.venue_id ORDER BY match_date LIMIT 3)",
        "retrieved": [
            1860
        ],
        "token_usage": {
            "tokens": 2548,
            "cost": 0.00046859999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Match_Id, T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'Kingsmead'"
    },
    {
        "sample_id": 1878,
        "pred_sql": "SELECT team.team_name FROM match JOIN team ON match.toss_winner = team.team_id WHERE match.match_id BETWEEN 336010 AND 336020;",
        "retrieved": [
            1911
        ],
        "token_usage": {
            "tokens": 2564,
            "cost": 0.0004629
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Toss_Winner WHERE T1.Match_Id BETWEEN 336010 AND 336020"
    },
    {
        "sample_id": 1872,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM match WHERE venue_id IN (SELECT venue_id FROM venue WHERE city_id = (SELECT city_id FROM city WHERE city_name = 'Mumbai')))) AS percentage FROM match WHERE venue_id = (SELECT venue_id FROM venue WHERE venue_name = 'Wankhede Stadium') AND venue_id IN (SELECT venue_id FROM venue WHERE city_id = (SELECT city_id FROM city WHERE city_name = 'Mumbai'));",
        "retrieved": [
            1904
        ],
        "token_usage": {
            "tokens": 2562,
            "cost": 0.0004599
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Venue_Name = 'Wankhede Stadium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Match_Id) FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Match AS T3 ON T3.Venue_Id = T2.Venue_Id WHERE T1.City_Name = 'Mumbai'"
    },
    {
        "sample_id": 1840,
        "pred_sql": "SELECT COUNT(*) AS total_matches FROM player_match WHERE player_id = '2';",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2530,
            "cost": 0.00041999999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN Player_Id = 2 THEN 1 ELSE 0 END) FROM Player_Match"
    },
    {
        "sample_id": 1866,
        "pred_sql": "SELECT (CAST(SUM(CASE WHEN match.match_winner = (SELECT team.team_id FROM team WHERE team_name = 'Chennai Super Kings') THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS win_rate FROM match WHERE match.team_1 = (SELECT team.team_id FROM team WHERE team_name = 'Chennai Super Kings') OR match.team_2 = (SELECT team.team_id FROM team WHERE team_name = 'Chennai Super Kings');",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2644,
            "cost": 0.0005059499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T2.Team_Name = 'Chennai Super Kings' OR T3.Team_Name = 'Chennai Super Kings'"
    },
    {
        "sample_id": 1993,
        "pred_sql": "SELECT COUNT(*) FROM player_match WHERE player_id = (SELECT player_id FROM player WHERE player_name = 'K Goel') AND role_id NOT IN (SELECT role_id FROM rolee WHERE role_desc != 'player');",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2568,
            "cost": 0.00044324999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(T1.Match_Id) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3"
    },
    {
        "sample_id": 1946,
        "pred_sql": "SELECT SUM(batsman_scored.runs_scored) * 6.0 / 17 AS run_rate FROM batsman_scored WHERE batsman_scored.match_id = 335987 AND batsman_scored.innings_no = 1 AND batsman_scored.over_id <= 17;",
        "retrieved": [
            1933
        ],
        "token_usage": {
            "tokens": 2705,
            "cost": 0.0005092499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 17"
    },
    {
        "sample_id": 1832,
        "pred_sql": "SELECT venue.venue_name, COUNT(*) as match_count FROM match INNER JOIN venue ON match.venue_id = venue.venue_id WHERE match.team_1 = (SELECT team.team_id FROM team WHERE team.team_name = 'Kolkata Knight Riders') GROUP BY venue.venue_name ORDER BY match_count DESC LIMIT 1;",
        "retrieved": [
            1880
        ],
        "token_usage": {
            "tokens": 2609,
            "cost": 0.00047505
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T3.Venue_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 INNER JOIN Venue AS T3 ON T2.Venue_Id = T3.Venue_Id WHERE T1.Team_Name = 'Kolkata Knight Riders' GROUP BY T3.Venue_Id ORDER BY COUNT(T3.Venue_Id) DESC LIMIT 1"
    },
    {
        "sample_id": 1907,
        "pred_sql": "SELECT player.player_name, country.country_name FROM player INNER JOIN wicket_taken ON player.player_id = wicket_taken.player_out GROUP BY player.player_id HAVING COUNT(wicket_taken.player_out) > (SELECT AVG(catch_count) FROM (SELECT COUNT(wicket_taken.player_out) AS catch_count FROM wicket_taken GROUP BY wicket_taken.player_out)) ORDER BY COUNT(wicket_taken.player_out) ASC;",
        "retrieved": [
            1813
        ],
        "token_usage": {
            "tokens": 2677,
            "cost": 0.00051315
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name, T4.Country_Name FROM Player AS T1 INNER JOIN Wicket_Taken AS T2 ON T1.Player_Id = T2.Fielders INNER JOIN Out_Type AS T3 ON T2.Kind_Out = T3.Out_Id INNER JOIN Country AS T4 ON T1.Country_Name = T4.Country_Id GROUP BY T1.Player_Name ORDER BY COUNT(T3.Out_Name) ASC"
    },
    {
        "sample_id": 1862,
        "pred_sql": "SELECT COUNT(wicket_taken.match_id) FROM wicket_taken WHERE wicket_taken.innings_no = 2 AND wicket_taken.kind_out = (SELECT out_id FROM out_type WHERE out_name = 'stumped')",
        "retrieved": [
            1985
        ],
        "token_usage": {
            "tokens": 2528,
            "cost": 0.00045299999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Innings_No = 2 THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'stumped'"
    },
    {
        "sample_id": 1931,
        "pred_sql": "SELECT season.man_of_the_series FROM season WHERE season.season_year BETWEEN 2011 AND 2015;",
        "retrieved": [
            1916
        ],
        "token_usage": {
            "tokens": 2582,
            "cost": 0.0004417499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Man_of_the_Series FROM Season WHERE 2011 < Season_Year < 2015"
    },
    {
        "sample_id": 1827,
        "pred_sql": "SELECT player.player_name, COUNT(match.man_of_the_match) AS awards_count \nFROM player \nINNER JOIN match ON player.player_id = match.man_of_the_match \nGROUP BY player.player_id \nORDER BY awards_count DESC \nLIMIT 1;",
        "retrieved": [
            1809
        ],
        "token_usage": {
            "tokens": 2598,
            "cost": 0.0004815
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match GROUP BY T2.Man_of_the_Match ORDER BY COUNT(T2.Man_of_the_Match) DESC LIMIT 1"
    },
    {
        "sample_id": 1874,
        "pred_sql": "SELECT (COUNT(CASE WHEN toss_decide = 'bowl' THEN 1 END) * 100.0 / COUNT(*)) AS percent_bowl_first\nFROM match\nWHERE match.match_date BETWEEN '2010-01-01' AND '2016-12-31';",
        "retrieved": [
            1937
        ],
        "token_usage": {
            "tokens": 2621,
            "cost": 0.0004907999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'"
    },
    {
        "sample_id": 1965,
        "pred_sql": "SELECT DISTINCT innings_no FROM batsman_scored WHERE match_id = 336011",
        "retrieved": [
            1966
        ],
        "token_usage": {
            "tokens": 2559,
            "cost": 0.0004517999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN Innings_No = 1 THEN 1 ELSE 0 END) AS IN1 , SUM(CASE WHEN Innings_No = 2 THEN 1 ELSE 0 END) AS IN2 FROM Ball_by_Ball WHERE Match_Id = 336011"
    },
    {
        "sample_id": 2000,
        "pred_sql": "SELECT COUNT(*) FROM player WHERE bowling_skill > 2;",
        "retrieved": [
            1914
        ],
        "token_usage": {
            "tokens": 2474,
            "cost": 0.00040665
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Player_Name) FROM Player WHERE Bowling_skill > 2"
    },
    {
        "sample_id": 2029,
        "pred_sql": "SELECT team.team_name FROM match JOIN win_by ON match.win_type = win_by.win_id JOIN team ON match.match_winner = team.team_id WHERE match.match_id = 335993 AND win_by.win_type = 'wickets';",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2581,
            "cost": 0.00046859999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Win_By AS T4 ON T2.Win_Type = T4.Win_Id WHERE T2.Match_Id = '335993' GROUP BY T1.Team_Name"
    },
    {
        "sample_id": 1922,
        "pred_sql": "SELECT umpire.umpire_name FROM umpire INNER JOIN country ON umpire.umpire_country = country.country_id WHERE country.country_name = 'New Zealand';",
        "retrieved": [
            1904
        ],
        "token_usage": {
            "tokens": 2503,
            "cost": 0.00042899999999999997
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'"
    },
    {
        "sample_id": 1955,
        "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'U.A.E')",
        "retrieved": [],
        "token_usage": {
            "tokens": 2404,
            "cost": 0.00042044999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'U.A.E' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN country AS T2 ON T1.Country_id = T2.Country_id"
    },
    {
        "sample_id": 1888,
        "pred_sql": "SELECT COUNT(*) AS total_wins FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Deccan Chargers')",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2546,
            "cost": 0.00044849999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T1.Team_Name = 'Deccan Chargers'"
    },
    {
        "sample_id": 1819,
        "pred_sql": "SELECT COUNT(CASE WHEN venue.venue_name = 'M Chinnaswamy Stadium' THEN 1 END) AS chinnaswamy_count, COUNT(CASE WHEN venue.venue_name = 'Maharashtra Cricket Association Stadium' THEN 1 END) AS maharashtra_count FROM match INNER JOIN venue ON match.venue_id = venue.venue_id;",
        "retrieved": [
            1904
        ],
        "token_usage": {
            "tokens": 2562,
            "cost": 0.0004603499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Venue_Name = 'M Chinnaswamy Stadium' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Venue_Name = 'Maharashtra Cricket Association Stadium' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id"
    },
    {
        "sample_id": 2003,
        "pred_sql": "SELECT COUNT(*) FROM match WHERE match_date BETWEEN '2008-04-01' AND '2008-04-30';",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2561,
            "cost": 0.0004395
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Match_Id) FROM Match WHERE Match_date LIKE '2008-04%'"
    },
    {
        "sample_id": 1831,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team AS T2 ON T2.team_id = match.team_1 WHERE match.season_id = 1 GROUP BY match.match_winner ORDER BY COUNT(match.match_winner) DESC LIMIT 1;",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2605,
            "cost": 0.00048209999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT Match_Winner FROM \"Match\" WHERE season_Id = 1 GROUP BY Match_Winner ORDER BY COUNT(Match_Winner) DESC LIMIT 1 )"
    },
    {
        "sample_id": 1797,
        "pred_sql": "SELECT MAX(dob) AS oldest_bowler_birthdate FROM player WHERE bowling_skill = (SELECT bowling_id FROM bowling_style WHERE bowling_skill = 'Legbreak')",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2493,
            "cost": 0.00043694999999999997
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT MIN(T1.DOB) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_Skill = 'Legbreak'"
    },
    {
        "sample_id": 1818,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'India')) AS indian_cities_count, (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa')) AS south_african_cities_count, (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'India')) / (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa')) AS ratio;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2473,
            "cost": 0.00045735
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id"
    },
    {
        "sample_id": 1952,
        "pred_sql": "SELECT COUNT(player_id) AS player_count FROM (SELECT man_of_the_match, COUNT(*) AS match_awards FROM match GROUP BY man_of_the_match HAVING COUNT(*) >= 5) AS award_counts;",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2600,
            "cost": 0.0004615499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5"
    },
    {
        "sample_id": 1881,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team AS T2 ON T2.team_id = match.match_winner WHERE match.match_id = 336000",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2561,
            "cost": 0.00045749999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Id = 336000"
    },
    {
        "sample_id": 2025,
        "pred_sql": "SELECT COUNT(DISTINCT season.season_id) AS seasons_participated FROM match INNER JOIN team ON match.team_1 = team.team_id OR match.team_2 = team.team_id WHERE team.team_name = 'Pune Warriors';",
        "retrieved": [
            1880
        ],
        "token_usage": {
            "tokens": 2577,
            "cost": 0.00045945
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(T.Season_Year) FROM ( SELECT T4.Season_Year FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Pune Warriors' GROUP BY T4.Season_Year ) T"
    },
    {
        "sample_id": 1896,
        "pred_sql": "SELECT country.country_name, COUNT(umpire.umpire_id) AS total_umpires FROM umpire INNER JOIN country ON umpire.umpire_country = country.country_id GROUP BY country.country_name ORDER BY total_umpires DESC LIMIT 1;",
        "retrieved": [
            1942
        ],
        "token_usage": {
            "tokens": 2644,
            "cost": 0.00048525
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Country_Id, COUNT(T1.Umpire_Id) FROM Umpire AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Umpire_Country GROUP BY T2.Country_Id ORDER BY COUNT(T1.Umpire_Id) DESC LIMIT 1"
    },
    {
        "sample_id": 1868,
        "pred_sql": "SELECT player.player_name, player.dob FROM player JOIN bowling_style ON player.bowling_skill = bowling_style.bowling_id WHERE bowling_style.bowling_skill = 'left-arm fast'",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2472,
            "cost": 0.00042659999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name, T1.DOB FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill WHERE T2.Bowling_skill = 'Left-arm fast'"
    },
    {
        "sample_id": 2043,
        "pred_sql": "SELECT venue.venue_name, team.team_name FROM match INNER JOIN venue ON match.venue_id = venue.venue_id INNER JOIN team ON match.match_winner = team.team_id WHERE match.match_id = 392194;",
        "retrieved": [
            1996
        ],
        "token_usage": {
            "tokens": 2511,
            "cost": 0.00044144999999999997
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Venue_Name, T3.Team_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id INNER JOIN Team AS T3 ON T2.match_winner = T3.Team_Id WHERE T2.Match_Id = 392194"
    },
    {
        "sample_id": 2008,
        "pred_sql": "SELECT player.player_name FROM player WHERE player.batting_hand = (SELECT batting_id FROM batting_style WHERE batting_hand = 'left')",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2469,
            "cost": 0.00042615000000000003
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_hand = 'Left-hand bat'"
    },
    {
        "sample_id": 1804,
        "pred_sql": "SELECT (COUNT(CASE WHEN batting_hand.batting_hand = 'right' THEN 1 END) * 100.0 / COUNT(*)) AS right_hand_percentage\nFROM player\nJOIN batting_style ON player.batting_hand = batting_style.batting_id\nWHERE player.dob > '1985-01-01';",
        "retrieved": [
            1839
        ],
        "token_usage": {
            "tokens": 2571,
            "cost": 0.0004797
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_Hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE SUBSTR(T1.DOB, 1, 4) > 1985"
    },
    {
        "sample_id": 1807,
        "pred_sql": "SELECT player.player_name FROM ball_by_ball JOIN player ON ball_by_ball.striker = player.player_id WHERE ball_by_ball.match_id = 419169 AND ball_by_ball.over_id = 3 AND ball_by_ball.ball_id = 2 AND ball_by_ball.innings_no = 2;",
        "retrieved": [
            1933
        ],
        "token_usage": {
            "tokens": 2672,
            "cost": 0.0004881
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT T2.Player_Name FROM Ball_by_Ball AS T1 INNER JOIN Player AS T2 ON T1.Striker = T2.Player_Id WHERE T1.Match_Id = 419169 AND T1.Over_Id = 3 AND T1.Ball_Id = 2 AND T1.Innings_No = 2"
    },
    {
        "sample_id": 2044,
        "pred_sql": "SELECT (COUNT(CASE WHEN match.match_winner = (SELECT team.team_id FROM team WHERE team_name = 'Delhi Daredevils') THEN 1 END) * 100.0 / COUNT(*)) AS win_percentage\nFROM match\nWHERE match.match_date BETWEEN '2009-01-01' AND '2009-12-31' AND (match.team_1 = (SELECT team.team_id FROM team WHERE team_name = 'Delhi Daredevils') OR match.team_2 = (SELECT team.team_id FROM team WHERE team_name = 'Delhi Daredevils'));",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2616,
            "cost": 0.00048419999999999995
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'"
    },
    {
        "sample_id": 1995,
        "pred_sql": "SELECT team.team_name FROM match INNER JOIN team AS T2 ON T2.team_id = match.team_1 WHERE match.match_id = 336039",
        "retrieved": [
            1841
        ],
        "token_usage": {
            "tokens": 2523,
            "cost": 0.00043559999999999996
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT CASE WHEN Team_1 = Match_Winner THEN Team_2 ELSE Team_1 END FROM Match WHERE match_id = 336039 )"
    },
    {
        "sample_id": 1991,
        "pred_sql": "SELECT COUNT(*) AS total_won_matches FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Delhi Daredevils') AND season_id = (SELECT season_id FROM season WHERE season_year = 2014);",
        "retrieved": [
            1806
        ],
        "token_usage": {
            "tokens": 2573,
            "cost": 0.0004601999999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT COUNT(T1.Match_Winner) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 OR T2.Team_Id = T1.Team_2 WHERE T2.team_name = 'Delhi Daredevils' AND T1.Match_Date LIKE '2014%'"
    },
    {
        "sample_id": 1850,
        "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa')",
        "retrieved": [],
        "token_usage": {
            "tokens": 2385,
            "cost": 0.00040904999999999994
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id"
    },
    {
        "sample_id": 1858,
        "pred_sql": "SELECT COUNT(*) AS players_out FROM wicket_taken WHERE match_id = 548335 AND innings_no = 1;",
        "retrieved": [
            1966
        ],
        "token_usage": {
            "tokens": 2535,
            "cost": 0.0004369499999999999
        },
        "db_id": "soccer_2016",
        "gold_sql": "SELECT SUM(CASE WHEN Match_Id = 548335 THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Innings_No = 1"
    },
    {
        "sample_id": 853,
        "pred_sql": "SELECT location.city, AVG(twitter.likes) AS average_likes FROM twitter INNER JOIN location ON twitter.locationid = location.locationid WHERE location.city IN ('Bangkok', 'Chiang Mai') GROUP BY location.city ORDER BY average_likes DESC;",
        "retrieved": [
            794
        ],
        "token_usage": {
            "tokens": 979,
            "cost": 0.00021705
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')"
    },
    {
        "sample_id": 827,
        "pred_sql": "SELECT location.country FROM twitter INNER JOIN location ON location.locationid = twitter.locationid WHERE twitter.tweetid = 'tw-682723090279841798'",
        "retrieved": [
            783
        ],
        "token_usage": {
            "tokens": 918,
            "cost": 0.00018449999999999999
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'"
    },
    {
        "sample_id": 809,
        "pred_sql": "SELECT user.gender FROM twitter INNER JOIN user ON twitter.userid = user.userid ORDER BY twitter.likes DESC LIMIT 1;",
        "retrieved": [
            812
        ],
        "token_usage": {
            "tokens": 992,
            "cost": 0.00021629999999999997
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1"
    },
    {
        "sample_id": 838,
        "pred_sql": "SELECT text FROM twitter ORDER BY reach DESC LIMIT 3;",
        "retrieved": [
            823
        ],
        "token_usage": {
            "tokens": 1029,
            "cost": 0.00020429999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3"
    },
    {
        "sample_id": 847,
        "pred_sql": "SELECT location.city, COUNT(twitter.tweetid) AS tweet_count FROM twitter INNER JOIN location ON location.locationid = twitter.locationid WHERE location.city IN ('Bangkok', 'Chiang Mai') GROUP BY location.city ORDER BY tweet_count DESC",
        "retrieved": [
            783
        ],
        "token_usage": {
            "tokens": 948,
            "cost": 0.00020429999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN T2.City = 'Chiang Mai' THEN 1 ELSE 0 END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')"
    },
    {
        "sample_id": 805,
        "pred_sql": "SELECT user.gender FROM twitter INNER JOIN user ON twitter.userid = user.userid WHERE twitter.tweetid = 'tw-715909161071091712'",
        "retrieved": [
            791
        ],
        "token_usage": {
            "tokens": 943,
            "cost": 0.0002076
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-715909161071091712'"
    },
    {
        "sample_id": 825,
        "pred_sql": "SELECT COUNT(DISTINCT twitter.tweetid) FROM twitter JOIN user ON twitter.userid = user.userid WHERE user.gender = 'Female' AND twitter.isreshare = 'true'",
        "retrieved": [
            837
        ],
        "token_usage": {
            "tokens": 946,
            "cost": 0.00021525
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'"
    },
    {
        "sample_id": 846,
        "pred_sql": "SELECT location.city FROM twitter INNER JOIN location ON twitter.locationid = location.locationid ORDER BY twitter.retweetcount DESC LIMIT 1;",
        "retrieved": [
            849
        ],
        "token_usage": {
            "tokens": 1075,
            "cost": 0.00021884999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID ORDER BY T1.RetweetCount DESC LIMIT 1"
    },
    {
        "sample_id": 839,
        "pred_sql": "SELECT COUNT(tweetid) FROM twitter WHERE isreshare = 'true' AND likes > 100",
        "retrieved": [
            800
        ],
        "token_usage": {
            "tokens": 906,
            "cost": 0.00018629999999999997
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100"
    },
    {
        "sample_id": 813,
        "pred_sql": "SELECT (SUM(CASE WHEN T1.sentiment > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS positive_percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T1.locationid = T2.locationid WHERE T2.state = 'California';",
        "retrieved": [
            831
        ],
        "token_usage": {
            "tokens": 1127,
            "cost": 0.0002622
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'"
    },
    {
        "sample_id": 826,
        "pred_sql": "SELECT location.country, SUM(twitter.likes) AS total_likes FROM twitter INNER JOIN location ON twitter.locationid = location.locationid GROUP BY location.country ORDER BY total_likes DESC LIMIT 1;",
        "retrieved": [
            851
        ],
        "token_usage": {
            "tokens": 980,
            "cost": 0.00021089999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Likes) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 841,
        "pred_sql": "SELECT user.gender FROM twitter INNER JOIN user ON twitter.userid = user.userid ORDER BY twitter.likes DESC LIMIT 1",
        "retrieved": [
            791
        ],
        "token_usage": {
            "tokens": 911,
            "cost": 0.0001893
        },
        "db_id": "social_media",
        "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1"
    },
    {
        "sample_id": 789,
        "pred_sql": "SELECT COUNT(DISTINCT u.userid) AS male_user_count FROM twitter t INNER JOIN user u ON t.userid = u.userid WHERE t.likes > 1000 AND u.gender = 1;",
        "retrieved": [
            823
        ],
        "token_usage": {
            "tokens": 1133,
            "cost": 0.00026579999999999996
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'"
    },
    {
        "sample_id": 798,
        "pred_sql": "SELECT statecode FROM location WHERE state = 'Gwynedd'",
        "retrieved": [
            797
        ],
        "token_usage": {
            "tokens": 838,
            "cost": 0.00016664999999999998
        },
        "db_id": "social_media",
        "gold_sql": "SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'"
    },
    {
        "sample_id": 822,
        "pred_sql": "SELECT COUNT(twitter.tweetid) AS total_male_tweet_ids FROM twitter INNER JOIN user ON twitter.userid = user.userid WHERE user.gender = 'Male'",
        "retrieved": [
            795
        ],
        "token_usage": {
            "tokens": 947,
            "cost": 0.00019649999999999995
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'"
    },
    {
        "sample_id": 792,
        "pred_sql": "SELECT COUNT(twitter.tweetid) AS tweet_count FROM twitter INNER JOIN user ON twitter.userid = user.userid INNER JOIN location ON twitter.locationid = location.locationid WHERE user.gender = 1 AND location.country = 'Argentina'",
        "retrieved": [
            795
        ],
        "token_usage": {
            "tokens": 1027,
            "cost": 0.00024359999999999999
        },
        "db_id": "social_media",
        "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T3.Gender = 'Male' AND T2.Country = 'Argentina'"
    },
    {
        "sample_id": 832,
        "pred_sql": "SELECT SUM(twitter.likes) AS total_likes FROM twitter INNER JOIN user ON twitter.userid = user.userid INNER JOIN location ON twitter.locationid = location.locationid WHERE user.gender = 1 AND location.country = 'ru'",
        "retrieved": [
            795
        ],
        "token_usage": {
            "tokens": 1016,
            "cost": 0.00023474999999999996
        },
        "db_id": "social_media",
        "gold_sql": "SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'"
    },
    {
        "sample_id": 8570,
        "pred_sql": "SELECT SUM(demog.income_k * demog.inhabitants_k * 12) AS total_income FROM demog JOIN customers ON demog.geoid = customers.geoid WHERE customers.sex = 'Female' AND customers.age BETWEEN 30 AND 55 AND customers.occupation = 'machine-op-inspct'",
        "retrieved": [
            8543
        ],
        "token_usage": {
            "tokens": 1330,
            "cost": 0.00029354999999999995
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'"
    },
    {
        "sample_id": 8566,
        "pred_sql": "SELECT demog.income_k FROM demog WHERE demog.geoid IN (SELECT customers.geoid FROM customers WHERE customers.educationnum <= 3 AND customers.sex = 'Female')",
        "retrieved": [
            8543
        ],
        "token_usage": {
            "tokens": 1250,
            "cost": 0.00024915
        },
        "db_id": "software_company",
        "gold_sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )"
    },
    {
        "sample_id": 8535,
        "pred_sql": "SELECT inhabitants_k, income_k FROM demog WHERE geoid = '239'",
        "retrieved": [
            8562
        ],
        "token_usage": {
            "tokens": 1260,
            "cost": 0.00025515
        },
        "db_id": "software_company",
        "gold_sql": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239"
    },
    {
        "sample_id": 8512,
        "pred_sql": "SELECT occupation FROM customers WHERE educationnum = 11",
        "retrieved": [
            8581
        ],
        "token_usage": {
            "tokens": 1246,
            "cost": 0.00022605
        },
        "db_id": "software_company",
        "gold_sql": "SELECT DISTINCT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11"
    },
    {
        "sample_id": 8538,
        "pred_sql": "SELECT customers.geoid, demog.income_k FROM customers JOIN demog ON customers.geoid = demog.geoid WHERE customers.age > 65",
        "retrieved": [
            8543
        ],
        "token_usage": {
            "tokens": 1246,
            "cost": 0.0002499
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T1.GEOID, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T1.age DESC LIMIT 1"
    },
    {
        "sample_id": 8539,
        "pred_sql": "SELECT demog.income_k FROM demog JOIN customers ON demog.geoid = customers.geoid WHERE customers.sex = 'male' AND customers.educationnum <= 4;",
        "retrieved": [
            8515
        ],
        "token_usage": {
            "tokens": 1261,
            "cost": 0.00026024999999999996
        },
        "db_id": "software_company",
        "gold_sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )"
    },
    {
        "sample_id": 8576,
        "pred_sql": "SELECT demog.income_k, demog.inhabitants_k FROM demog INNER JOIN customers ON demog.geoid = customers.geoid WHERE customers.id > (SELECT AVG(refid) FROM mailings3 WHERE response = 0) * 0.5",
        "retrieved": [
            8519
        ],
        "token_usage": {
            "tokens": 1304,
            "cost": 0.00027255
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )"
    },
    {
        "sample_id": 8542,
        "pred_sql": "SELECT customers.occupation FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE demog.inhabitants_k > 30 AND demog.inhabitants_k < 40",
        "retrieved": [
            8520
        ],
        "token_usage": {
            "tokens": 1284,
            "cost": 0.0002556
        },
        "db_id": "software_company",
        "gold_sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K >= 30 AND T2.INHABITANTS_K <= 40"
    },
    {
        "sample_id": 8541,
        "pred_sql": "SELECT COUNT(*) FROM customers WHERE sex = 'Male' AND marital_status = 'Widowed' AND age BETWEEN 40 AND 60 AND geoid IN (SELECT geoid FROM demog WHERE income_k >= 3000)",
        "retrieved": [
            8543
        ],
        "token_usage": {
            "tokens": 1245,
            "cost": 0.00024209999999999998
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000"
    },
    {
        "sample_id": 8518,
        "pred_sql": "SELECT COUNT(*) AS male_customers_over_30k FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.sex = 'male' AND demog.inhabitants_k > 30;",
        "retrieved": [
            8546
        ],
        "token_usage": {
            "tokens": 1352,
            "cost": 0.00029055
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30"
    },
    {
        "sample_id": 8554,
        "pred_sql": "SELECT COUNT(*) FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.occupation = 'other services' AND demog.inhabitants_k > 20;",
        "retrieved": [
            8546
        ],
        "token_usage": {
            "tokens": 1325,
            "cost": 0.00027435
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20"
    },
    {
        "sample_id": 8540,
        "pred_sql": "SELECT customers.occupation, demog.income_k FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.sex = 'male' AND customers.educationnum BETWEEN 4 AND 6;",
        "retrieved": [
            8528
        ],
        "token_usage": {
            "tokens": 1334,
            "cost": 0.00028875
        },
        "db_id": "software_company",
        "gold_sql": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'"
    },
    {
        "sample_id": 8578,
        "pred_sql": "SELECT demog.geoid, (demog.inhabitants_k * demog.income_k * 12) AS total_income_per_year FROM demog WHERE (demog.income_k > 3300)",
        "retrieved": [
            8580
        ],
        "token_usage": {
            "tokens": 1304,
            "cost": 0.00025725
        },
        "db_id": "software_company",
        "gold_sql": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300"
    },
    {
        "sample_id": 8514,
        "pred_sql": "SELECT COUNT(customers.geoid) FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.occupation = 'Machine-op-inspcts' AND customers.age > 30",
        "retrieved": [
            8520
        ],
        "token_usage": {
            "tokens": 1288,
            "cost": 0.000258
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(ID) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age > 30"
    },
    {
        "sample_id": 8553,
        "pred_sql": "SELECT COUNT(*) AS teenager_machine_op_count \nFROM customers \nWHERE age BETWEEN 13 AND 19 AND occupation = 'Machine-op-inspct';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1123,
            "cost": 0.00022244999999999996
        },
        "db_id": "software_company",
        "gold_sql": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19"
    },
    {
        "sample_id": 10821,
        "pred_sql": "SELECT attendance.link_to_event FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women''s Soccer'",
        "retrieved": [
            10851
        ],
        "token_usage": {
            "tokens": 1846,
            "cost": 0.00035519999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'"
    },
    {
        "sample_id": 10836,
        "pred_sql": "SELECT major.major_name FROM member INNER JOIN major AS T2 ON member.link_to_major = T2.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'",
        "retrieved": [
            10734
        ],
        "token_usage": {
            "tokens": 1825,
            "cost": 0.0003443999999999999
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'"
    },
    {
        "sample_id": 10875,
        "pred_sql": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'parking' AND expense.cost < (SELECT AVG(cost) FROM expense WHERE expense.expense_description = 'parking')",
        "retrieved": [
            10870
        ],
        "token_usage": {
            "tokens": 1947,
            "cost": 0.00038205
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)"
    },
    {
        "sample_id": 10790,
        "pred_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1793,
            "cost": 0.00033735
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'"
    },
    {
        "sample_id": 10859,
        "pred_sql": "SELECT member.first_name, member.last_name, attendance.link_to_event FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN expense ON expense.link_to_member = member.member_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';",
        "retrieved": [
            10743
        ],
        "token_usage": {
            "tokens": 1981,
            "cost": 0.0003983999999999999
        },
        "db_id": "student_club",
        "gold_sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'"
    },
    {
        "sample_id": 10805,
        "pred_sql": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1778,
            "cost": 0.00033194999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'"
    },
    {
        "sample_id": 10841,
        "pred_sql": "SELECT event.type FROM event WHERE event.event_date = '2020-03-24T12:00:00'",
        "retrieved": [
            10827
        ],
        "token_usage": {
            "tokens": 1823,
            "cost": 0.00034499999999999993
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'"
    },
    {
        "sample_id": 10839,
        "pred_sql": "SELECT DISTINCT event.type FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30;",
        "retrieved": [
            10827
        ],
        "token_usage": {
            "tokens": 1795,
            "cost": 0.00033224999999999997
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30"
    },
    {
        "sample_id": 10735,
        "pred_sql": "SELECT COUNT(member.member_id) FROM member INNER JOIN major ON major.major_id = member.link_to_major WHERE member.position = 'Student' AND major.college = 'College of Engineering'",
        "retrieved": [
            10863
        ],
        "token_usage": {
            "tokens": 1779,
            "cost": 0.00031545
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'"
    },
    {
        "sample_id": 10856,
        "pred_sql": "SELECT zip_code.zip_code FROM zip_code WHERE zip_code.type = 'PO Box' AND zip_code.city = 'San Juan Municipio' AND zip_code.state = 'Puerto Rico';",
        "retrieved": [
            10775
        ],
        "token_usage": {
            "tokens": 1820,
            "cost": 0.00034274999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'"
    },
    {
        "sample_id": 10818,
        "pred_sql": "SELECT COUNT(event.event_id) AS event_count, major.major_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi'",
        "retrieved": [
            10743
        ],
        "token_usage": {
            "tokens": 1931,
            "cost": 0.00037739999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'"
    },
    {
        "sample_id": 10799,
        "pred_sql": "SELECT COUNT(member.member_id) FROM member WHERE member.position = 'president'",
        "retrieved": [
            10863
        ],
        "token_usage": {
            "tokens": 1763,
            "cost": 0.00030855
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'"
    },
    {
        "sample_id": 10833,
        "pred_sql": "SELECT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison'",
        "retrieved": [
            10761
        ],
        "token_usage": {
            "tokens": 1850,
            "cost": 0.00033059999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'"
    },
    {
        "sample_id": 10796,
        "pred_sql": "SELECT COUNT(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.phone = '954-555-6240'",
        "retrieved": [
            10743
        ],
        "token_usage": {
            "tokens": 1896,
            "cost": 0.00035505
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'"
    },
    {
        "sample_id": 10791,
        "pred_sql": "SELECT event.event_name, SUM(budget.amount) AS total_budget FROM event JOIN budget ON event.event_id = budget.link_to_event GROUP BY event.event_id ORDER BY total_budget DESC LIMIT 1;",
        "retrieved": [
            10827
        ],
        "token_usage": {
            "tokens": 1810,
            "cost": 0.00034484999999999995
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "sample_id": 10852,
        "pred_sql": "SELECT member.last_name, member.position FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'pizza' AND expense.expense_date = '2019-09-10'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1806,
            "cost": 0.00034379999999999995
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'"
    },
    {
        "sample_id": 10814,
        "pred_sql": "SELECT income.source, SUM(income.amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY total_amount DESC LIMIT 1;",
        "retrieved": [
            10884
        ],
        "token_usage": {
            "tokens": 1819,
            "cost": 0.0003498
        },
        "db_id": "student_club",
        "gold_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1"
    },
    {
        "sample_id": 10855,
        "pred_sql": "SELECT DISTINCT zip_code.city, zip_code.state FROM zip_code WHERE zip_code.type = 'PO Box'",
        "retrieved": [
            10775
        ],
        "token_usage": {
            "tokens": 1776,
            "cost": 0.00032355
        },
        "db_id": "student_club",
        "gold_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL"
    },
    {
        "sample_id": 10854,
        "pred_sql": "SELECT (SUM(income.amount) * 100.0 / (SELECT SUM(amount) FROM income)) AS percentage_received FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'medium' AND income.amount = '50'",
        "retrieved": [
            10863
        ],
        "token_usage": {
            "tokens": 1886,
            "cost": 0.00037469999999999995
        },
        "db_id": "student_club",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'"
    },
    {
        "sample_id": 10879,
        "pred_sql": "SELECT member.first_name || ' ' || member.last_name AS full_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member GROUP BY member.member_id HAVING SUM(expense.cost) > (SELECT AVG(cost) FROM expense)",
        "retrieved": [
            10761
        ],
        "token_usage": {
            "tokens": 1945,
            "cost": 0.00038354999999999997
        },
        "db_id": "student_club",
        "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )"
    },
    {
        "sample_id": 10813,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Finance')) * 1.0 / (SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics')) AS ratio;",
        "retrieved": [],
        "token_usage": {
            "tokens": 1659,
            "cost": 0.0003033
        },
        "db_id": "student_club",
        "gold_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major"
    },
    {
        "sample_id": 10865,
        "pred_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'",
        "retrieved": [
            10851
        ],
        "token_usage": {
            "tokens": 1813,
            "cost": 0.00033045
        },
        "db_id": "student_club",
        "gold_sql": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'"
    },
    {
        "sample_id": 10768,
        "pred_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1652,
            "cost": 0.00030044999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'"
    },
    {
        "sample_id": 10846,
        "pred_sql": "SELECT COUNT(member.member_id) FROM member WHERE member.t_shirt_size = 'XL'",
        "retrieved": [
            10863
        ],
        "token_usage": {
            "tokens": 1773,
            "cost": 0.0003114
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'"
    },
    {
        "sample_id": 10779,
        "pred_sql": "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton');",
        "retrieved": [],
        "token_usage": {
            "tokens": 1673,
            "cost": 0.00031304999999999994
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'"
    },
    {
        "sample_id": 10770,
        "pred_sql": "SELECT COUNT(*) AS exceeded_budget_count FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;",
        "retrieved": [
            10754
        ],
        "token_usage": {
            "tokens": 1832,
            "cost": 0.00033915
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0"
    },
    {
        "sample_id": 10760,
        "pred_sql": "SELECT expense.approved FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.event_name = 'October Meeting' AND event.event_date = '2019-10-08'",
        "retrieved": [
            10870
        ],
        "token_usage": {
            "tokens": 1897,
            "cost": 0.00035025
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'"
    },
    {
        "sample_id": 10848,
        "pred_sql": "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1754,
            "cost": 0.0003135
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'"
    },
    {
        "sample_id": 10845,
        "pred_sql": "SELECT COUNT(*) FROM income WHERE amount = '50'",
        "retrieved": [
            10806
        ],
        "token_usage": {
            "tokens": 1740,
            "cost": 0.00029879999999999994
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(income_id) FROM income WHERE amount = 50"
    },
    {
        "sample_id": 10776,
        "pred_sql": "SELECT major.major_name FROM member INNER JOIN major AS T2 ON member.link_to_major = T2.major_id WHERE member.position = 'Vice President'",
        "retrieved": [
            10734
        ],
        "token_usage": {
            "tokens": 1786,
            "cost": 0.00032054999999999996
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"
    },
    {
        "sample_id": 10850,
        "pred_sql": "SELECT zip_code.city, zip_code.state FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1784,
            "cost": 0.00033374999999999995
        },
        "db_id": "student_club",
        "gold_sql": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'"
    },
    {
        "sample_id": 10883,
        "pred_sql": "SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'",
        "retrieved": [
            10736
        ],
        "token_usage": {
            "tokens": 1758,
            "cost": 0.00031725
        },
        "db_id": "student_club",
        "gold_sql": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'"
    },
    {
        "sample_id": 10838,
        "pred_sql": "SELECT COUNT(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1688,
            "cost": 0.0003207
        },
        "db_id": "student_club",
        "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'"
    },
    {
        "sample_id": 4399,
        "pred_sql": "SELECT COUNT(unemployed.name) FROM unemployed INNER JOIN enrolled ON unemployed.name = enrolled.name WHERE enrolled.school = 'SMC'",
        "retrieved": [
            4493
        ],
        "token_usage": {
            "tokens": 855,
            "cost": 0.00018629999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN unemployed AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'"
    },
    {
        "sample_id": 4527,
        "pred_sql": "SELECT COUNT(filed_for_bankrupcy.name) FROM filed_for_bankrupcy INNER JOIN enlist ON filed_for_bankrupcy.name = enlist.name WHERE enlist.organ = 'navy'",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 903,
            "cost": 0.0002097
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'"
    },
    {
        "sample_id": 4473,
        "pred_sql": "SELECT COUNT(enlist.name) FROM enlist WHERE enlist.organ = 'Army' AND enlist.name IN (SELECT unemployed.name FROM unemployed)",
        "retrieved": [
            4530
        ],
        "token_usage": {
            "tokens": 836,
            "cost": 0.00018929999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.organ = 'army'"
    },
    {
        "sample_id": 4413,
        "pred_sql": "SELECT person.name, \n       CASE \n           WHEN no_payment_due.bool = 'neg' THEN 'No Payment Due' \n           ELSE 'Has Payment Due' \n       END AS payment_status, \n       CASE \n           WHEN disabled.name IS NOT NULL THEN 'Disabled' \n           ELSE 'Not Disabled' \n       END AS disability_status, \n       CASE \n           WHEN male.name IS NOT NULL THEN 'Male' \n           ELSE 'Female' \n       END AS gender_status, \n       enrolled.school \nFROM person \nLEFT JOIN no_payment_due ON person.name = no_payment_due.name \nLEFT JOIN disabled ON person.name = disabled.name \nLEFT JOIN male ON person.name = male.name \nLEFT JOIN enrolled ON person.name = enrolled.name \nWHERE person.name IN ('student180', 'student117');",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 1050,
            "cost": 0.00030375
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT ( SELECT COUNT(name) FROM disabled WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM unemployed WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM male WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM no_payment_due WHERE name IN ('student180', 'student117'))"
    },
    {
        "sample_id": 4440,
        "pred_sql": "SELECT filed_for_bankrupcy.name FROM filed_for_bankrupcy INNER JOIN longest_absense_from_school ON filed_for_bankrupcy.name = longest_absense_from_school.name WHERE longest_absense_from_school.month = '0'",
        "retrieved": [
            4568
        ],
        "token_usage": {
            "tokens": 956,
            "cost": 0.00024059999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.month = 0"
    },
    {
        "sample_id": 4538,
        "pred_sql": "SELECT enlist.name FROM enlist WHERE enlist.organ = 'fire department'",
        "retrieved": [
            4542
        ],
        "token_usage": {
            "tokens": 825,
            "cost": 0.00016064999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT name FROM enlist WHERE organ = 'fire_department'"
    },
    {
        "sample_id": 4505,
        "pred_sql": "SELECT enlist.organ, COUNT(enlist.name) AS female_count FROM enlist LEFT JOIN male ON male.name = enlist.name WHERE male.name IS NULL GROUP BY enlist.organ;",
        "retrieved": [
            4489
        ],
        "token_usage": {
            "tokens": 895,
            "cost": 0.00020355
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gender FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name GROUP BY T1.organ"
    },
    {
        "sample_id": 4496,
        "pred_sql": "SELECT enlist.organ, no_payment_due.bool FROM enlist INNER JOIN no_payment_due ON enlist.name = no_payment_due.name WHERE enlist.name = 'student160'",
        "retrieved": [
            4475
        ],
        "token_usage": {
            "tokens": 913,
            "cost": 0.00019634999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'"
    },
    {
        "sample_id": 4561,
        "pred_sql": "SELECT enlist.organ, COUNT(male.name) AS male_count FROM enlist LEFT JOIN male ON enlist.name = male.name GROUP BY enlist.organ ORDER BY male_count ASC LIMIT 1;",
        "retrieved": [
            4560
        ],
        "token_usage": {
            "tokens": 952,
            "cost": 0.00022155
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T.organ FROM ( SELECT T2.organ, COUNT(T1.name) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ) T ORDER BY T.num LIMIT 1"
    },
    {
        "sample_id": 4531,
        "pred_sql": "SELECT COUNT(*) FROM longest_absense_from_school WHERE month < '4'",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 833,
            "cost": 0.0001623
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 4"
    },
    {
        "sample_id": 4504,
        "pred_sql": "SELECT enrolled.school, COUNT(disabled.name) AS disabled_count FROM disabled INNER JOIN person ON disabled.name = person.name INNER JOIN enrolled ON person.name = enrolled.name GROUP BY enrolled.school",
        "retrieved": [
            4375
        ],
        "token_usage": {
            "tokens": 904,
            "cost": 0.00020444999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name GROUP BY T1.school"
    },
    {
        "sample_id": 4416,
        "pred_sql": "SELECT COUNT(CASE WHEN male.name IS NULL THEN 1 END) AS female_count, COUNT(CASE WHEN male.name IS NOT NULL THEN 1 END) AS male_count FROM disabled INNER JOIN person ON disabled.name = person.name LEFT JOIN male ON person.name = male.name;",
        "retrieved": [
            4560
        ],
        "token_usage": {
            "tokens": 984,
            "cost": 0.00024029999999999999
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T2.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T1.\"name\" = T2.\"name\""
    },
    {
        "sample_id": 4374,
        "pred_sql": "SELECT COUNT(no_payment_due.name) FROM no_payment_due INNER JOIN enlist ON enlist.name = no_payment_due.name WHERE enlist.organ = 'navy' AND no_payment_due.bool = 'pos'",
        "retrieved": [
            4475
        ],
        "token_usage": {
            "tokens": 935,
            "cost": 0.0002091
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'navy' AND T2.bool = 'pos'"
    },
    {
        "sample_id": 4435,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM person)) AS percentage FROM (SELECT longest_absense_from_school.name FROM longest_absense_from_school INNER JOIN unemployed ON longest_absense_from_school.name = unemployed.name WHERE longest_absense_from_school.month = '5') AS unemployed_absent_students;",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 972,
            "cost": 0.00024299999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.month > 5, 1, 0)) AS REAL) * 100 / COUNT(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name"
    },
    {
        "sample_id": 4412,
        "pred_sql": "SELECT disabled.name FROM disabled INNER JOIN male ON disabled.name = male.name WHERE disabled.name = '124'",
        "retrieved": [
            4375
        ],
        "token_usage": {
            "tokens": 883,
            "cost": 0.0001914
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124'"
    },
    {
        "sample_id": 4480,
        "pred_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy';",
        "retrieved": [
            4484
        ],
        "token_usage": {
            "tokens": 804,
            "cost": 0.00016064999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "sample_id": 4395,
        "pred_sql": "SELECT enlist.name FROM enlist INNER JOIN disabled AS T2 ON enlist.name = T2.name WHERE enlist.organ = 'SMC'",
        "retrieved": [
            4542
        ],
        "token_usage": {
            "tokens": 889,
            "cost": 0.00019949999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'"
    },
    {
        "sample_id": 4392,
        "pred_sql": "SELECT enlist.name, enrolled.school FROM enlist LEFT JOIN male ON male.name = enlist.name LEFT JOIN enrolled ON enrolled.name = enlist.name WHERE male.name IS NULL AND enlist.organ = 'air force'",
        "retrieved": [
            4489
        ],
        "token_usage": {
            "tokens": 933,
            "cost": 0.00022365
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name, T1.school FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'air_force'"
    },
    {
        "sample_id": 4525,
        "pred_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.organ = 'marines'",
        "retrieved": [
            4542
        ],
        "token_usage": {
            "tokens": 858,
            "cost": 0.00017999999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'"
    },
    {
        "sample_id": 4465,
        "pred_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'Navy'",
        "retrieved": [
            4484
        ],
        "token_usage": {
            "tokens": 818,
            "cost": 0.00016815
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'"
    },
    {
        "sample_id": 4567,
        "pred_sql": "SELECT longest_absense_from_school.month FROM longest_absense_from_school JOIN enlist ON longest_absense_from_school.name = enlist.name WHERE enlist.organ = 'Air Force' AND longest_absense_from_school.month = (SELECT MAX(longest_absense_from_school.month) FROM longest_absense_from_school JOIN enlist ON longest_absense_from_school.name = enlist.name WHERE enlist.organ = 'Air Force')",
        "retrieved": [
            4445
        ],
        "token_usage": {
            "tokens": 938,
            "cost": 0.00022845
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "sample_id": 4389,
        "pred_sql": "SELECT longest_absense_from_school.name FROM longest_absense_from_school INNER JOIN unemployed AS T2 ON longest_absense_from_school.name = T2.name WHERE longest_absense_from_school.month = '6'",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 902,
            "cost": 0.0002037
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT name FROM longest_absense_from_school WHERE \"month\" = 6"
    },
    {
        "sample_id": 4490,
        "pred_sql": "SELECT COUNT(person.name) FROM person LEFT JOIN disabled ON person.name = disabled.name WHERE disabled.name IS NULL;",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 853,
            "cost": 0.0001896
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(CASE  WHEN T2.name IS NULL THEN T1.name END) AS \"number\" FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name"
    },
    {
        "sample_id": 4516,
        "pred_sql": "WITH disabled_attendance AS (SELECT COUNT(name) AS disabled_count, SUM(CASE WHEN month = '0' THEN 1 ELSE 0 END) AS disabled_present FROM longest_absense_from_school WHERE name IN (SELECT name FROM disabled)), non_disabled_attendance AS (SELECT COUNT(name) AS non_disabled_count, SUM(CASE WHEN month = '0' THEN 1 ELSE 0 END) AS non_disabled_present FROM longest_absense_from_school WHERE name NOT IN (SELECT name FROM disabled)) SELECT (disabled_present * 100.0 / disabled_count) AS disabled_attendance_percentage, (non_disabled_present * 100.0 / non_disabled_count) AS non_disabled_attendance_percentage, CASE WHEN (disabled_present * 100.0 / disabled_count) > (non_disabled_present * 100.0 / non_disabled_count) THEN 'Yes' ELSE 'No' END AS better_attendance FROM disabled_attendance, non_disabled_attendance;",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 1061,
            "cost": 0.0003063
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT CAST((SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0))) AS REAL) * 100 / COUNT(T1.name), IIF(SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0)) > 0, 'YES', 'NO') AS isHigh FROM longest_absense_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name"
    },
    {
        "sample_id": 4570,
        "pred_sql": "SELECT enlist.organ, \n       COUNT(CASE WHEN male.name IS NOT NULL THEN 1 END) AS male_count, \n       COUNT(*) AS total_count, \n       (COUNT(CASE WHEN male.name IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage \nFROM enlist \nLEFT JOIN person ON enlist.name = person.name \nLEFT JOIN male ON person.name = male.name \nGROUP BY enlist.organ \nORDER BY male_count DESC \nLIMIT 1;",
        "retrieved": [
            4560
        ],
        "token_usage": {
            "tokens": 1045,
            "cost": 0.0002715
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T.organ, T.per FROM ( SELECT T1.organ, CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per , COUNT(T3.name) AS num FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name GROUP BY T1.organ ) T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "sample_id": 4546,
        "pred_sql": "SELECT enrolled.school, CASE WHEN male.name IS NOT NULL THEN 'male' ELSE 'female' END AS gender FROM person LEFT JOIN enrolled ON person.name = enrolled.name LEFT JOIN male ON person.name = male.name WHERE person.name = 'student34'",
        "retrieved": [
            4417
        ],
        "token_usage": {
            "tokens": 907,
            "cost": 0.00021794999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.school , IIF(T3.name IS NULL, 'female', 'male') AS gender FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.name = 'student34'"
    },
    {
        "sample_id": 4517,
        "pred_sql": "SELECT AVG(CAST(longest_absense_from_school.month AS INTEGER)) AS average_absence_duration FROM longest_absense_from_school JOIN disabled ON longest_absense_from_school.name = disabled.name JOIN male ON longest_absense_from_school.name = male.name;",
        "retrieved": [
            4424
        ],
        "token_usage": {
            "tokens": 900,
            "cost": 0.00021734999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name"
    },
    {
        "sample_id": 4566,
        "pred_sql": "SELECT COUNT(*) AS disabled_students_count FROM disabled INNER JOIN filed_for_bankrupcy ON disabled.name = filed_for_bankrupcy.name",
        "retrieved": [
            4375
        ],
        "token_usage": {
            "tokens": 885,
            "cost": 0.00019079999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name"
    },
    {
        "sample_id": 4446,
        "pred_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army';",
        "retrieved": [
            4484
        ],
        "token_usage": {
            "tokens": 810,
            "cost": 0.00016379999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'"
    },
    {
        "sample_id": 4420,
        "pred_sql": "SELECT AVG(CAST(longest_absense_from_school.month AS INTEGER)) AS average_absence FROM longest_absense_from_school INNER JOIN employed ON longest_absense_from_school.name = employed.name",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 913,
            "cost": 0.00021075
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT AVG(month) FROM longest_absense_from_school WHERE name NOT IN ( SELECT name FROM unemployed )"
    },
    {
        "sample_id": 4377,
        "pred_sql": "SELECT COUNT(unemployed.name) FROM unemployed INNER JOIN no_payment_due ON unemployed.name = no_payment_due.name WHERE no_payment_due.bool = 'pos'",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 880,
            "cost": 0.00020579999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\""
    },
    {
        "sample_id": 4521,
        "pred_sql": "SELECT no_payment_due.name, no_payment_due.bool FROM no_payment_due WHERE no_payment_due.name = '124'",
        "retrieved": [
            4475
        ],
        "token_usage": {
            "tokens": 867,
            "cost": 0.00017054999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT \"bool\" FROM no_payment_due WHERE name = 'student124'"
    },
    {
        "sample_id": 4450,
        "pred_sql": "SELECT COUNT(no_payment_due.name) FROM no_payment_due INNER JOIN unemployed AS T2 ON no_payment_due.name = T2.name WHERE no_payment_due.bool = 'pos'",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 845,
            "cost": 0.00018524999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'"
    },
    {
        "sample_id": 4432,
        "pred_sql": "SELECT disabled.name FROM disabled INNER JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name ORDER BY longest_absense_from_school.month DESC LIMIT 1;",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 901,
            "cost": 0.00020129999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name ORDER BY T2.month DESC LIMIT 1"
    },
    {
        "sample_id": 4563,
        "pred_sql": "SELECT COUNT(disabled.name) FROM disabled INNER JOIN unemployed ON disabled.name = unemployed.name;",
        "retrieved": [
            4492
        ],
        "token_usage": {
            "tokens": 852,
            "cost": 0.0001791
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name"
    },
    {
        "sample_id": 4524,
        "pred_sql": "SELECT longest_absense_from_school.name FROM longest_absense_from_school INNER JOIN no_payment_due ON longest_absense_from_school.name = no_payment_due.name WHERE longest_absense_from_school.month = '5' AND no_payment_due.bool = 'neg'",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 966,
            "cost": 0.00023804999999999996
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T1.month = 5 AND T2.bool = 'neg'"
    },
    {
        "sample_id": 4369,
        "pred_sql": "SELECT longest_absense_from_school.month FROM longest_absense_from_school WHERE longest_absense_from_school.month = (SELECT MAX(longest_absense_from_school.month) FROM longest_absense_from_school)",
        "retrieved": [
            4445
        ],
        "token_usage": {
            "tokens": 897,
            "cost": 0.0002007
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT MAX(month) FROM longest_absense_from_school"
    },
    {
        "sample_id": 4426,
        "pred_sql": "SELECT COUNT(no_payment_due.name) FROM no_payment_due WHERE no_payment_due.bool = 'neg'",
        "retrieved": [
            4522
        ],
        "token_usage": {
            "tokens": 849,
            "cost": 0.00018674999999999999
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'neg'"
    },
    {
        "sample_id": 4467,
        "pred_sql": "SELECT COUNT(enlist.name) FROM enlist WHERE enlist.organ = 'Peace Corps' AND enlist.name IN (SELECT enrolled.name FROM enrolled WHERE enrolled.school = 'UCSD')",
        "retrieved": [
            4472
        ],
        "token_usage": {
            "tokens": 863,
            "cost": 0.00019649999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'peace_corps' AND T2.school = 'ucsd'"
    },
    {
        "sample_id": 4554,
        "pred_sql": "SELECT enlist.name FROM enlist LEFT JOIN male AS T2 ON T2.name = enlist.name WHERE T2.name IS NULL AND enlist.organ = 'Marines'",
        "retrieved": [
            4489
        ],
        "token_usage": {
            "tokens": 866,
            "cost": 0.0001848
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT name FROM enlist WHERE organ = 'marines'"
    },
    {
        "sample_id": 4437,
        "pred_sql": "SELECT longest_absense_from_school.name FROM longest_absense_from_school INNER JOIN unemployed ON longest_absense_from_school.name = unemployed.name WHERE longest_absense_from_school.month != '0' ORDER BY longest_absense_from_school.month DESC LIMIT 1;",
        "retrieved": [
            4438
        ],
        "token_usage": {
            "tokens": 950,
            "cost": 0.00023069999999999997
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1"
    },
    {
        "sample_id": 4415,
        "pred_sql": "SELECT enlist.organ, enrolled.school FROM person LEFT JOIN enlist ON person.name = enlist.name LEFT JOIN enrolled ON person.name = enrolled.name WHERE person.name IN ('student27', 'student17', 'student101')",
        "retrieved": [
            4489
        ],
        "token_usage": {
            "tokens": 896,
            "cost": 0.00020009999999999998
        },
        "db_id": "student_loan",
        "gold_sql": "SELECT T1.school, T2.organ FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.\"name\" IN ('student27,student17,studetn101')"
    },
    {
        "sample_id": 10259,
        "pred_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)",
        "retrieved": [
            10208
        ],
        "token_usage": {
            "tokens": 1650,
            "cost": 0.00030555
        },
        "db_id": "superhero",
        "gold_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )"
    },
    {
        "sample_id": 10161,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'death touch'",
        "retrieved": [
            10193
        ],
        "token_usage": {
            "tokens": 1658,
            "cost": 0.00031124999999999995
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'"
    },
    {
        "sample_id": 10230,
        "pred_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = '108' AND superhero.height_cm = '188';",
        "retrieved": [
            10211
        ],
        "token_usage": {
            "tokens": 1632,
            "cost": 0.00030104999999999997
        },
        "db_id": "superhero",
        "gold_sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"
    },
    {
        "sample_id": 10220,
        "pred_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "retrieved": [
            10248
        ],
        "token_usage": {
            "tokens": 1639,
            "cost": 0.0003003
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
    },
    {
        "sample_id": 10153,
        "pred_sql": "SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';",
        "retrieved": [
            10248
        ],
        "token_usage": {
            "tokens": 1622,
            "cost": 0.00029279999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'"
    },
    {
        "sample_id": 10214,
        "pred_sql": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination'",
        "retrieved": [
            10267
        ],
        "token_usage": {
            "tokens": 1637,
            "cost": 0.0003
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'"
    },
    {
        "sample_id": 10257,
        "pred_sql": "SELECT (CAST(COUNT(*) AS FLOAT) * 100 / (SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics')) AS percentage_good_superheroes FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON alignment.id = superhero.alignment_id WHERE alignment.alignment = 'Good' AND publisher.publisher_name = 'Marvel Comics';",
        "retrieved": [
            10165
        ],
        "token_usage": {
            "tokens": 1773,
            "cost": 0.00035505
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'"
    },
    {
        "sample_id": 10168,
        "pred_sql": "SELECT AVG(attribute_value) FROM hero_attribute;",
        "retrieved": [
            10208
        ],
        "token_usage": {
            "tokens": 1616,
            "cost": 0.00028649999999999997
        },
        "db_id": "superhero",
        "gold_sql": "SELECT AVG(attribute_value) FROM hero_attribute"
    },
    {
        "sample_id": 10171,
        "pred_sql": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE superhero.superhero_name = 'Deathlok'",
        "retrieved": [
            10139
        ],
        "token_usage": {
            "tokens": 1657,
            "cost": 0.00031154999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'"
    },
    {
        "sample_id": 10189,
        "pred_sql": "SELECT AVG(height_cm) FROM superhero WHERE skin_colour_id IS NULL",
        "retrieved": [
            10151
        ],
        "token_usage": {
            "tokens": 1593,
            "cost": 0.00028349999999999995
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id"
    },
    {
        "sample_id": 10256,
        "pred_sql": "SELECT (CAST(COUNT(*) AS FLOAT) * 100 / (SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'George Lucas')) AS female_percentage FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'George Lucas' AND superhero.gender_id = (SELECT id FROM gender WHERE gender = 'female')",
        "retrieved": [
            10165
        ],
        "token_usage": {
            "tokens": 1765,
            "cost": 0.0003507
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'"
    },
    {
        "sample_id": 10245,
        "pred_sql": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'female' AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')",
        "retrieved": [
            10162
        ],
        "token_usage": {
            "tokens": 1677,
            "cost": 0.00030824999999999993
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'"
    },
    {
        "sample_id": 10200,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'adaptation'",
        "retrieved": [
            10193
        ],
        "token_usage": {
            "tokens": 1653,
            "cost": 0.00031005
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'"
    },
    {
        "sample_id": 10201,
        "pred_sql": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE superhero.superhero_name = 'Amazo'",
        "retrieved": [
            10145
        ],
        "token_usage": {
            "tokens": 1712,
            "cost": 0.00032204999999999994
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'"
    },
    {
        "sample_id": 10187,
        "pred_sql": "SELECT COUNT(superhero.id) FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'stealth'",
        "retrieved": [
            10145
        ],
        "token_usage": {
            "tokens": 1722,
            "cost": 0.00032894999999999995
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'"
    },
    {
        "sample_id": 10255,
        "pred_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "retrieved": [
            10212
        ],
        "token_usage": {
            "tokens": 1576,
            "cost": 0.00027689999999999995
        },
        "db_id": "superhero",
        "gold_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'"
    },
    {
        "sample_id": 10197,
        "pred_sql": "SELECT (CAST(COUNT(*) AS FLOAT) * 100 / (SELECT COUNT(*) FROM superhero WHERE gender_id IN (SELECT id FROM gender WHERE gender = 'female'))) AS percentage_blue_female_superheroes FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'blue' AND superhero.gender_id IN (SELECT id FROM gender WHERE gender = 'female')",
        "retrieved": [
            10165
        ],
        "token_usage": {
            "tokens": 1740,
            "cost": 0.0003366
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'"
    },
    {
        "sample_id": 10218,
        "pred_sql": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.full_name = '3-D Man'",
        "retrieved": [
            10188
        ],
        "token_usage": {
            "tokens": 1669,
            "cost": 0.00030614999999999993
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'"
    },
    {
        "sample_id": 10216,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power AS T2 ON superhero.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'super speed'",
        "retrieved": [
            10193
        ],
        "token_usage": {
            "tokens": 1648,
            "cost": 0.00030884999999999994
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1"
    },
    {
        "sample_id": 10154,
        "pred_sql": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id ORDER BY superhero.weight_kg ASC LIMIT 1;",
        "retrieved": [
            10248
        ],
        "token_usage": {
            "tokens": 1629,
            "cost": 0.00029699999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1"
    },
    {
        "sample_id": 10222,
        "pred_sql": "SELECT (CAST(COUNT(*) AS FLOAT) * 100 / (SELECT COUNT(*) FROM superhero)) AS percentage_blue_eyes FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')",
        "retrieved": [
            10165
        ],
        "token_usage": {
            "tokens": 1713,
            "cost": 0.00032219999999999997
        },
        "db_id": "superhero",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id"
    },
    {
        "sample_id": 10150,
        "pred_sql": "SELECT colour.colour, COUNT(superhero.id) AS superhero_count \nFROM superhero \nINNER JOIN colour ON superhero.eye_colour_id = colour.id \nWHERE superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') \nGROUP BY colour.colour \nORDER BY superhero_count DESC;",
        "retrieved": [
            10145
        ],
        "token_usage": {
            "tokens": 1725,
            "cost": 0.0003258
        },
        "db_id": "superhero",
        "gold_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour"
    },
    {
        "sample_id": 10263,
        "pred_sql": "SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = '40'",
        "retrieved": [
            10159
        ],
        "token_usage": {
            "tokens": 1603,
            "cost": 0.000294
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40"
    },
    {
        "sample_id": 10141,
        "pred_sql": "SELECT COUNT(*) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;",
        "retrieved": [
            10267
        ],
        "token_usage": {
            "tokens": 1702,
            "cost": 0.00033135
        },
        "db_id": "superhero",
        "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200"
    },
    {
        "sample_id": 10254,
        "pred_sql": "SELECT superhero.superhero_name, superhero.height_cm, RANK() OVER (ORDER BY superhero.height_cm DESC) AS height_rank FROM superhero ORDER BY height_rank LIMIT 1",
        "retrieved": [
            10148
        ],
        "token_usage": {
            "tokens": 1657,
            "cost": 0.00032189999999999996
        },
        "db_id": "superhero",
        "gold_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"
    },
    {
        "sample_id": 10146,
        "pred_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'blue' AND hair_colour.colour = 'blond'",
        "retrieved": [
            10193
        ],
        "token_usage": {
            "tokens": 1650,
            "cost": 0.0003051
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'"
    },
    {
        "sample_id": 10181,
        "pred_sql": "SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero)",
        "retrieved": [
            10212
        ],
        "token_usage": {
            "tokens": 1613,
            "cost": 0.00029775
        },
        "db_id": "superhero",
        "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1"
    },
    {
        "sample_id": 2396,
        "pred_sql": "SELECT DISTINCT product.\"product name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"customer id\" = T2.\"customer id\" INNER JOIN product AS T3 ON T3.\"product id\" = T1.\"product id\" WHERE T2.\"customer name\" = 'Anne McFarland'",
        "retrieved": [
            2365
        ],
        "token_usage": {
            "tokens": 2192,
            "cost": 0.00040529999999999993
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Anne McFarland'"
    },
    {
        "sample_id": 2411,
        "pred_sql": "SELECT category, SUM(ws.sales) AS total_sales FROM west_superstore AS ws INNER JOIN product AS p ON ws.product_id = p.product_id GROUP BY category ORDER BY total_sales ASC LIMIT 1;",
        "retrieved": [
            2381
        ],
        "token_usage": {
            "tokens": 2172,
            "cost": 0.00039869999999999993
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T2.Category FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" ORDER BY T1.Sales LIMIT 1"
    },
    {
        "sample_id": 2419,
        "pred_sql": "SELECT SUM(central_superstore.profit) FROM people INNER JOIN central_superstore ON people.\"customer id\" = central_superstore.\"customer id\" WHERE people.\"customer name\" = 'Anna Chung' AND central_superstore.region = 'Central'",
        "retrieved": [
            2371
        ],
        "token_usage": {
            "tokens": 2192,
            "cost": 0.0004008
        },
        "db_id": "superstore",
        "gold_sql": "SELECT MAX(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Anna Chung'"
    },
    {
        "sample_id": 2409,
        "pred_sql": "SELECT SUM(south_superstore.quantity) FROM people INNER JOIN south_superstore ON people.\"customer id\" = south_superstore.\"customer id\" INNER JOIN product ON product.\"product id\" = south_superstore.\"product id\" WHERE people.\"customer name\" = 'Cindy Stewart' AND product.\"product name\" = 'Lexmark X 9575 Professional All-in-One Color Printer'",
        "retrieved": [
            2355
        ],
        "token_usage": {
            "tokens": 2293,
            "cost": 0.0004452
        },
        "db_id": "superstore",
        "gold_sql": "SELECT SUM(T1.Quantity) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Cindy Stewart' AND T3.\"Product Name\" = 'Lexmark X 9575 Professional All-in-One Color Printer'"
    },
    {
        "sample_id": 2417,
        "pred_sql": "SELECT product.\"product name\", SUM(central_superstore.quantity) AS total_quantity\nFROM central_superstore\nINNER JOIN product ON central_superstore.\"product id\" = product.\"product id\"\nWHERE product.\"sub-category\" = 'Art'\nGROUP BY product.\"product name\"\nORDER BY total_quantity DESC\nLIMIT 1;",
        "retrieved": [
            2355
        ],
        "token_usage": {
            "tokens": 2224,
            "cost": 0.00040965
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Sub-Category\" = 'Art' GROUP BY T2.\"Product Name\" ORDER BY COUNT(T2.\"Product ID\") DESC LIMIT 1"
    },
    {
        "sample_id": 2435,
        "pred_sql": "SELECT COUNT(*) AS order_count FROM west_superstore INNER JOIN people ON west_superstore.\"customer id\" = people.\"customer id\" WHERE people.\"customer name\" = 'Aaron Bergman' AND west_superstore.\"ship mode\" = 'Standard Class'",
        "retrieved": [
            2423
        ],
        "token_usage": {
            "tokens": 2199,
            "cost": 0.00039735
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aaron Bergman' AND T2.\"Ship Mode\" = 'Standard Class'"
    },
    {
        "sample_id": 2346,
        "pred_sql": "SELECT MAX(julianday(ship_date) - julianday(order_date)) AS longest_shipment_time\nFROM west_superstore\nINNER JOIN people ON west_superstore.customer_id = people.customer_id\nWHERE people.customer_name = 'Aimee Bixby'",
        "retrieved": [
            2423
        ],
        "token_usage": {
            "tokens": 2209,
            "cost": 0.00040244999999999994
        },
        "db_id": "superstore",
        "gold_sql": "SELECT MAX(strftime('%J', \"Ship Date\") - strftime('%J', \"Order Date\")) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby'"
    },
    {
        "sample_id": 2429,
        "pred_sql": "SELECT COUNT(*) AS order_count FROM (SELECT * FROM central_superstore WHERE quantity > 5 AND ship_mode = 'First Class' UNION ALL SELECT * FROM east_superstore WHERE quantity > 5 AND ship_mode = 'First Class' UNION ALL SELECT * FROM south_superstore WHERE quantity > 5 AND ship_mode = 'First Class' UNION ALL SELECT * FROM west_superstore WHERE quantity > 5 AND ship_mode = 'First Class') AS combined_orders;",
        "retrieved": [
            2423
        ],
        "token_usage": {
            "tokens": 2242,
            "cost": 0.0004226999999999999
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(DISTINCT \"Order ID\") FROM central_superstore WHERE Quantity > 5 AND \"Ship Mode\" = 'First Class'"
    },
    {
        "sample_id": 2410,
        "pred_sql": "SELECT product.\"product name\" FROM central_superstore INNER JOIN product ON central_superstore.\"product id\" = product.\"product id\" WHERE central_superstore.\"quantity\" >= 10 AND central_superstore.\"ship mode\" = 'Standard Class'",
        "retrieved": [
            2349
        ],
        "token_usage": {
            "tokens": 2220,
            "cost": 0.00040679999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'Standard Class' AND T1.Quantity >= 10"
    },
    {
        "sample_id": 2367,
        "pred_sql": "SELECT DISTINCT product.\"product name\" FROM central_superstore INNER JOIN product ON central_superstore.\"product id\" = product.\"product id\" WHERE central_superstore.profit >= 1000 UNION SELECT DISTINCT product.\"product name\" FROM east_superstore INNER JOIN product ON east_superstore.\"product id\" = product.\"product id\" WHERE east_superstore.profit >= 1000 UNION SELECT DISTINCT product.\"product name\" FROM south_superstore INNER JOIN product ON south_superstore.\"product id\" = product.\"product id\" WHERE south_superstore.profit >= 1000 UNION SELECT DISTINCT product.\"product name\" FROM west_superstore INNER JOIN product ON west_superstore.\"product id\" = product.\"product id\" WHERE west_superstore.profit >= 1000;",
        "retrieved": [
            2391
        ],
        "token_usage": {
            "tokens": 2326,
            "cost": 0.00047669999999999993
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.Profit > 1000"
    },
    {
        "sample_id": 2441,
        "pred_sql": "SELECT SUM(central_superstore.quantity) FROM central_superstore INNER JOIN product ON central_superstore.product_id = product.product_id WHERE product.category = 'Furniture'",
        "retrieved": [
            2355
        ],
        "token_usage": {
            "tokens": 2181,
            "cost": 0.00038609999999999995
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture'"
    },
    {
        "sample_id": 2380,
        "pred_sql": "SELECT DISTINCT people.segment FROM west_superstore INNER JOIN people ON west_superstore.customer_id = people.customer_id WHERE west_superstore.order_id = 'CA-2011-108189' AND west_superstore.region = 'West';",
        "retrieved": [
            2384
        ],
        "token_usage": {
            "tokens": 2224,
            "cost": 0.00040065
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.Segment FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'West' AND T1.\"Order ID\" = 'CA-2011-108189'"
    },
    {
        "sample_id": 2358,
        "pred_sql": "SELECT SUM((sales / (1 - discount)) * quantity - profit) AS total_cost\nFROM central_superstore\nJOIN product ON central_superstore.product_id = product.product_id\nJOIN people ON central_superstore.customer_id = people.customer_id\nWHERE product.product_name = 'Xerox 1952' \nAND people.customer_name = 'Aimee Bixby' \nAND central_superstore.order_date = '2014-09-10';",
        "retrieved": [],
        "token_usage": {
            "tokens": 2137,
            "cost": 0.00042944999999999995
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT (T2.Sales / (1 - T2.discount)) * T2.Quantity - Profit FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952' AND T2.\"Order Date\" = '2014-09-10'"
    },
    {
        "sample_id": 2442,
        "pred_sql": "SELECT product.\"product name\" FROM central_superstore INNER JOIN product ON central_superstore.\"product id\" = product.\"product id\" WHERE central_superstore.\"order date\" BETWEEN '2013-03-01' AND '2013-03-31'",
        "retrieved": [
            2383
        ],
        "token_usage": {
            "tokens": 2199,
            "cost": 0.00040185
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE strftime('%Y-%m', T1.\"Ship Date\") = '2013-03'"
    },
    {
        "sample_id": 2382,
        "pred_sql": "SELECT \"order id\" FROM south_superstore INNER JOIN people ON south_superstore.\"customer id\" = people.\"customer id\" WHERE people.\"customer name\" = 'Frank Olsen' AND people.\"region\" = 'South'",
        "retrieved": [
            2424
        ],
        "token_usage": {
            "tokens": 2168,
            "cost": 0.00038774999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T1.\"Order ID\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Region = 'South' AND T2.\"Customer Name\" = 'Frank Olsen'"
    },
    {
        "sample_id": 2420,
        "pred_sql": "SELECT COUNT(central_superstore.order_id) FROM people INNER JOIN central_superstore ON people.\"customer id\" = central_superstore.\"customer id\" WHERE people.\"customer name\" = 'Corey Roper' AND strftime('%Y', central_superstore.\"order date\") = '2015'",
        "retrieved": [
            2371
        ],
        "token_usage": {
            "tokens": 2209,
            "cost": 0.0004118999999999999
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(T2.\"Customer ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Corey Roper' AND STRFTIME('%Y', T2.\"Ship Date\") = '2015'"
    },
    {
        "sample_id": 2360,
        "pred_sql": "SELECT people.\"customer name\" FROM (SELECT \"customer id\", SUM(sales / (1 - discount) * quantity - profit) AS total_cost FROM (SELECT * FROM central_superstore UNION ALL SELECT * FROM east_superstore UNION ALL SELECT * FROM south_superstore UNION ALL SELECT * FROM west_superstore) AS combined_orders GROUP BY \"customer id\") AS total_costs INNER JOIN people ON total_costs.\"customer id\" = people.\"customer id\" ORDER BY total_cost DESC LIMIT 1;",
        "retrieved": [
            2392
        ],
        "token_usage": {
            "tokens": 2325,
            "cost": 0.0004760999999999999
        },
        "db_id": "superstore",
        "gold_sql": "SELECT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" GROUP BY T1.\"Order ID\", T2.\"Customer Name\" ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1"
    },
    {
        "sample_id": 2377,
        "pred_sql": "SELECT product.category FROM south_superstore INNER JOIN product ON south_superstore.product_id = product.product_id WHERE south_superstore.order_date = '2018-11-04' AND south_superstore.customer_id = (SELECT customer_id FROM people WHERE customer_name = 'Katherine Murray')",
        "retrieved": [
            2383
        ],
        "token_usage": {
            "tokens": 2230,
            "cost": 0.00041909999999999994
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T3.Category FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Katherine Murray' AND T1.\"Order Date\" = '2018-11-04' AND T2.Region = 'South'"
    },
    {
        "sample_id": 2376,
        "pred_sql": "SELECT DISTINCT people.\"customer name\" FROM east_superstore INNER JOIN people ON east_superstore.\"customer id\" = people.\"customer id\" WHERE east_superstore.region = 'East' AND east_superstore.\"order date\" = '2013-10-13' AND east_superstore.\"product id\" = (SELECT \"product id\" FROM product WHERE \"product name\" = 'Global High-Back Leather Tilter, Burgundy')",
        "retrieved": [
            2392
        ],
        "token_usage": {
            "tokens": 2259,
            "cost": 0.000432
        },
        "db_id": "superstore",
        "gold_sql": "SELECT DISTINCT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Global High-Back Leather Tilter, Burgundy' AND T1.\"Order Date\" = '2013-10-13' AND T1.Region = 'East'"
    },
    {
        "sample_id": 2447,
        "pred_sql": "SELECT (SUM(CASE WHEN central_superstore.\"ship mode\" = 'First Class' THEN central_superstore.quantity ELSE 0 END) * 100.0 / SUM(central_superstore.quantity)) AS percentage_first_class_furniture_orders\nFROM central_superstore\nINNER JOIN product ON central_superstore.\"product id\" = product.\"product id\"\nWHERE product.\"category\" = 'Furniture' AND strftime('%Y', central_superstore.\"order date\") = '2013'",
        "retrieved": [
            2355
        ],
        "token_usage": {
            "tokens": 2295,
            "cost": 0.0004490999999999999
        },
        "db_id": "superstore",
        "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.\"Ship Mode\" = 'First Class' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture' AND STRFTIME('%Y', T1.\"Ship Date\") = '2013'"
    },
    {
        "sample_id": 2416,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM people WHERE state = 'TX') * 1.0 / (SELECT COUNT(*) FROM people WHERE state = 'IN') AS ratio;",
        "retrieved": [],
        "token_usage": {
            "tokens": 2036,
            "cost": 0.00037334999999999994
        },
        "db_id": "superstore",
        "gold_sql": "SELECT CAST(SUM(CASE  WHEN State = 'Texas' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN State = 'Indiana' THEN 1 ELSE 0 END) FROM people"
    },
    {
        "sample_id": 2426,
        "pred_sql": "SELECT COUNT(DISTINCT people.\"customer name\") FROM west_superstore INNER JOIN people ON west_superstore.\"customer id\" = people.\"customer id\" WHERE west_superstore.sales >= 5000 AND people.\"state\" = 'CA'",
        "retrieved": [
            2392
        ],
        "token_usage": {
            "tokens": 2220,
            "cost": 0.00040769999999999994
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(DISTINCT T1.\"Order ID\") FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" INNER JOIN people AS T3 ON T3.\"Customer ID\" = T1.\"Customer ID\" WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'"
    },
    {
        "sample_id": 2366,
        "pred_sql": "SELECT COUNT(DISTINCT cs.\"order id\") FROM people AS p INNER JOIN central_superstore AS cs ON p.\"customer id\" = cs.\"customer id\" INNER JOIN product AS pr ON cs.\"product id\" = pr.\"product id\" WHERE p.\"city\" = 'Chicago' AND pr.\"product name\" = 'Cardinal EasyOpen D-Ring Binders' AND cs.\"quantity\" >= 10;",
        "retrieved": [
            2347
        ],
        "token_usage": {
            "tokens": 2227,
            "cost": 0.00042899999999999997
        },
        "db_id": "superstore",
        "gold_sql": "SELECT COUNT(DISTINCT T1.\"Customer ID\") FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND T2.City = 'Chicago' AND T1.Quantity > 10"
    },
    {
        "sample_id": 2414,
        "pred_sql": "SELECT AVG(east_superstore.sales) AS average_sales FROM east_superstore INNER JOIN product ON east_superstore.product_id = product.product_id WHERE product.product_name = 'Sharp AL-1530CS Digital Copier' UNION SELECT AVG(west_superstore.sales) AS average_sales FROM west_superstore INNER JOIN product ON west_superstore.product_id = product.product_id WHERE product.product_name = 'Sharp AL-1530CS Digital Copier';",
        "retrieved": [
            2391
        ],
        "token_usage": {
            "tokens": 2212,
            "cost": 0.00040829999999999995
        },
        "db_id": "superstore",
        "gold_sql": "SELECT AVG(T1.Sales) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Sharp AL-1530CS Digital Copier'"
    },
    {
        "sample_id": 1393,
        "pred_sql": "SELECT T1.description, COUNT(DISTINCT T2.patient) AS patient_count FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON LOWER(T1.item) = LOWER(T2.description) INNER JOIN patients AS T3 ON T2.patient = T3.patient WHERE T3.gender = 'F' AND T3.ethnicity = 'American' GROUP BY T1.description ORDER BY patient_count DESC LIMIT 1;",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2196,
            "cost": 0.00042345
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.gender = 'F' AND T1.ethnicity = 'american' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1"
    },
    {
        "sample_id": 1531,
        "pred_sql": "SELECT careplans.description FROM careplans INNER JOIN patients ON careplans.patient = patients.patient WHERE patients.address = '179 Sydni Roads, Taunton, MA 02780 US';",
        "retrieved": [
            1513
        ],
        "token_usage": {
            "tokens": 2119,
            "cost": 0.00037365
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.address = '179 Sydni Roads Taunton MA 02780 US'"
    },
    {
        "sample_id": 1383,
        "pred_sql": "SELECT conditions.description FROM conditions INNER JOIN patients ON conditions.patient = patients.patient WHERE patients.first = 'Keven' AND patients.last = 'Kuhn' AND conditions.start >= '2016-09-24' AND conditions.stop <= '2016-10-10'",
        "retrieved": [
            1534
        ],
        "token_usage": {
            "tokens": 2185,
            "cost": 0.00040379999999999995
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.start = '2016-09-24' AND T2.stop = '2016-10-10'"
    },
    {
        "sample_id": 1400,
        "pred_sql": "SELECT conditions.description, COUNT(conditions.patient) AS patient_count\nFROM conditions\nINNER JOIN patients ON conditions.patient = patients.patient\nINNER JOIN immunizations ON patients.patient = immunizations.patient\nWHERE immunizations.description = 'influenza seasonal injectable preservative free'\nGROUP BY conditions.description\nORDER BY patient_count DESC\nLIMIT 1;",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2199,
            "cost": 0.00042029999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1"
    },
    {
        "sample_id": 1462,
        "pred_sql": "SELECT COUNT(careplans.id) FROM patients INNER JOIN careplans ON patients.patient = careplans.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND careplans.start >= '2009-01-11' AND careplans.stop <= '2010-10-23';",
        "retrieved": [
            1385
        ],
        "token_usage": {
            "tokens": 2184,
            "cost": 0.00040364999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START BETWEEN '2009-01-11' AND '2010-10-23'"
    },
    {
        "sample_id": 1419,
        "pred_sql": "SELECT COUNT(*) AS encounter_count FROM encounters WHERE patient = (SELECT patient FROM patients WHERE first = 'Major' AND last = 'D'Amore')",
        "retrieved": [],
        "token_usage": {
            "tokens": 1928,
            "cost": 0.00033105
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.ID) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'"
    },
    {
        "sample_id": 1487,
        "pred_sql": "SELECT conditions.description, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patients WHERE (CASE WHEN deathdate IS NULL THEN strftime('%Y', 'now') ELSE strftime('%Y', deathdate) END) - strftime('%Y', birthdate) >= 60) AS percentage FROM conditions INNER JOIN patients ON conditions.patient = patients.patient WHERE (CASE WHEN deathdate IS NULL THEN strftime('%Y', 'now') ELSE strftime('%Y', deathdate) END) - strftime('%Y', birthdate) >= 60 GROUP BY conditions.description ORDER BY COUNT(*) DESC LIMIT 1;",
        "retrieved": [
            1534
        ],
        "token_usage": {
            "tokens": 2284,
            "cost": 0.00046949999999999987
        },
        "db_id": "synthea",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T5.DESCRIPTION = T3.DESCRIPTION THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.patient) FROM ( SELECT T2.DESCRIPTION, T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE ROUND((strftime('%J', T2.START) - strftime('%J', T1.birthdate)) / 365) > 60 GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1 ) AS T3 INNER JOIN patients AS T4 ON T3.patient = T4.patient INNER JOIN conditions AS T5 ON T4.patient = T5.PATIENT WHERE ROUND((strftime('%J', T5.START) - strftime('%J', T4.birthdate)) / 365) > 60"
    },
    {
        "sample_id": 1375,
        "pred_sql": "SELECT careplans.reasondescription FROM patients INNER JOIN careplans ON patients.patient = careplans.patient WHERE careplans.description = 'leucovorin 100 mg injection' AND patients.first = 'Annabelle' AND patients.last = 'Pouros' AND careplans.start = '1970-12-19'",
        "retrieved": [
            1497
        ],
        "token_usage": {
            "tokens": 2177,
            "cost": 0.00041474999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.reasondescription FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Annabelle' AND T1.last = 'Pouros' AND T2.start = '1970-12-19' AND T2.description = 'Leucovorin 100 MG Injection'"
    },
    {
        "sample_id": 1535,
        "pred_sql": "SELECT patients.ssn FROM patients INNER JOIN observations ON patients.patient = observations.patient WHERE observations.value = (SELECT MAX(value) FROM observations WHERE description = 'Systolic Blood Pressure')",
        "retrieved": [
            1363
        ],
        "token_usage": {
            "tokens": 2145,
            "cost": 0.00039644999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1"
    },
    {
        "sample_id": 1431,
        "pred_sql": "WITH ImmunizationCounts AS (SELECT COUNT(DISTINCT patient) AS total_patients FROM immunizations WHERE date BETWEEN '2017-01-01' AND '2017-12-31' AND description = 'Influenza seasonal injectable preservative free'), EnglishPatients AS (SELECT COUNT(DISTINCT patient) AS english_patients FROM patients WHERE ethnicity = 'English' AND patient IN (SELECT DISTINCT patient FROM immunizations WHERE date BETWEEN '2017-01-01' AND '2017-12-31' AND description = 'Influenza seasonal injectable preservative free')) SELECT (SELECT english_patients FROM EnglishPatients) * 100.0 / (SELECT total_patients FROM ImmunizationCounts) AS percentage_of_english_patients;",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2279,
            "cost": 0.00046199999999999995
        },
        "db_id": "synthea",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'"
    },
    {
        "sample_id": 1512,
        "pred_sql": "SELECT careplans.stop FROM patients INNER JOIN careplans ON patients.patient = careplans.patient WHERE patients.deathdate IS NOT NULL;",
        "retrieved": [
            1385
        ],
        "token_usage": {
            "tokens": 2158,
            "cost": 0.00039525
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.STOP FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL AND T1.STOP IS NOT NULL"
    },
    {
        "sample_id": 1467,
        "pred_sql": "SELECT STRFTIME('%J', medications.stop) - STRFTIME('%J', medications.start) FROM patients INNER JOIN medications AS T2 ON patients.patient = T2.patient WHERE patients.first = 'Berry' AND patients.last = 'Keebler' AND medications.description LIKE '%Acetaminophen 160 MG%'",
        "retrieved": [
            1364
        ],
        "token_usage": {
            "tokens": 2175,
            "cost": 0.00040185
        },
        "db_id": "synthea",
        "gold_sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS takenDays FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Berry' AND T1.last = 'Keebler' AND T2.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'"
    },
    {
        "sample_id": 1439,
        "pred_sql": "SELECT patients.gender FROM patients INNER JOIN allergies ON patients.patient = allergies.patient WHERE allergies.description = 'house dust mites' AND patients.gender = 'male'",
        "retrieved": [
            1451
        ],
        "token_usage": {
            "tokens": 2116,
            "cost": 0.00037725
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'House dust mite allergy' AND T1.gender = 'M'"
    },
    {
        "sample_id": 1506,
        "pred_sql": "SELECT careplans.reasondescription FROM careplans INNER JOIN patients ON careplans.patient = patients.patient WHERE patients.first = 'Angelo' AND patients.last = 'Buckridge'",
        "retrieved": [
            1511
        ],
        "token_usage": {
            "tokens": 2112,
            "cost": 0.0003861
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.REASONDESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Angelo' AND T2.last = 'Buckridge'"
    },
    {
        "sample_id": 1541,
        "pred_sql": "SELECT DISTINCT patients.birthdate FROM patients INNER JOIN medications ON patients.patient = medications.patient WHERE medications.description = 'Penicillin V Potassium 250 MG' AND patients.gender = 'M' LIMIT 5;",
        "retrieved": [
            1396
        ],
        "token_usage": {
            "tokens": 2148,
            "cost": 0.00039779999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T2.birthdate FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND T2.gender = 'M' LIMIT 5"
    },
    {
        "sample_id": 1391,
        "pred_sql": "SELECT description, COUNT(DISTINCT patient) AS patient_count FROM allergies GROUP BY description ORDER BY patient_count DESC LIMIT 1;",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2136,
            "cost": 0.00038745
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DESCRIPTION FROM allergies GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1"
    },
    {
        "sample_id": 1414,
        "pred_sql": "SELECT c.description FROM patients p INNER JOIN conditions c ON p.patient = c.patient WHERE p.deathdate IS NOT NULL ORDER BY (strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate)) DESC LIMIT 1;",
        "retrieved": [
            1408
        ],
        "token_usage": {
            "tokens": 2116,
            "cost": 0.00038399999999999996
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.DESCRIPTION FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL ORDER BY strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) DESC LIMIT 1"
    },
    {
        "sample_id": 1427,
        "pred_sql": "SELECT medications.description FROM medications INNER JOIN patients ON medications.patient = patients.patient INNER JOIN allergies ON patients.patient = allergies.patient WHERE allergies.description = 'mould' AND allergies.start <= '2016-06-06' AND allergies.stop >= '2016-06-06';",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2179,
            "cost": 0.00040875
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.DESCRIPTION FROM allergies AS T1 INNER JOIN medications AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.START = '6/6/16' AND T1.DESCRIPTION = 'Allergy to mould'"
    },
    {
        "sample_id": 1508,
        "pred_sql": "SELECT DISTINCT encounters.id FROM patients INNER JOIN encounters ON patients.patient = encounters.patient WHERE patients.birthplace = 'Pembroke MA US'",
        "retrieved": [
            1443
        ],
        "token_usage": {
            "tokens": 2086,
            "cost": 0.00038219999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.ENCOUNTER FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.birthplace = 'Pembroke MA US'"
    },
    {
        "sample_id": 1510,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans INNER JOIN patients AS T2 ON careplans.patient = T2.patient WHERE T2.ethnicity = 'white' AND careplans.code = '10509002'",
        "retrieved": [
            1513
        ],
        "token_usage": {
            "tokens": 2145,
            "cost": 0.00039509999999999995
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.REASONCODE = '10509002'"
    },
    {
        "sample_id": 1469,
        "pred_sql": "SELECT encounters.reasondescription FROM patients INNER JOIN encounters ON patients.patient = encounters.patient WHERE patients.first = 'Lavelle' AND patients.last = 'Vandervort' AND encounters.date = '2013-11-20'",
        "retrieved": [
            1443
        ],
        "token_usage": {
            "tokens": 2077,
            "cost": 0.00037499999999999995
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2013-11-20' AND T1.first = 'Lavelle' AND T1.last = 'Vandervort'"
    },
    {
        "sample_id": 1413,
        "pred_sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient WHERE T1.code = '311791003'",
        "retrieved": [
            1513
        ],
        "token_usage": {
            "tokens": 2130,
            "cost": 0.00038519999999999993
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002"
    },
    {
        "sample_id": 1456,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.patient = T2.patient INNER JOIN immunizations AS T3 ON T2.patient = T3.patient WHERE T1.stop = '2013-11-23' AND T3.description = 'monovalent rotavirus'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2202,
            "cost": 0.0004194
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM careplans AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'rotavirus  monovalent' AND T1.STOP = '2013-11-23'"
    },
    {
        "sample_id": 1412,
        "pred_sql": "SELECT patients.ssn FROM patients INNER JOIN allergies ON patients.patient = allergies.patient WHERE patients.gender = 'female' AND patients.ethnicity = 'Irish' AND allergies.description = 'grass pollen';",
        "retrieved": [
            1451
        ],
        "token_usage": {
            "tokens": 2125,
            "cost": 0.00038175
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.ssn FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.ethnicity = 'irish' AND T2.gender = 'F'"
    },
    {
        "sample_id": 1397,
        "pred_sql": "SELECT COUNT(DISTINCT T2.patient) FROM patients AS T2 INNER JOIN immunizations AS T3 ON T2.patient = T3.patient WHERE T2.race = 'Black' AND T3.description = 'DTaP' AND strftime('%Y', T3.date) = '2013'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2155,
            "cost": 0.0003956999999999999
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'black' AND T2.DESCRIPTION = 'DTaP' AND strftime('%Y', T2.DATE) = '2013'"
    },
    {
        "sample_id": 1471,
        "pred_sql": "SELECT patients.ssn, patients.address FROM patients INNER JOIN encounters ON patients.patient = encounters.patient WHERE encounters.reasondescription = 'viral sinusitis' AND encounters.date = '2008-06-13'",
        "retrieved": [
            1411
        ],
        "token_usage": {
            "tokens": 2118,
            "cost": 0.00039464999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'"
    },
    {
        "sample_id": 1522,
        "pred_sql": "SELECT conditions.description FROM conditions INNER JOIN immunizations ON conditions.patient = immunizations.patient WHERE immunizations.description = 'IPV'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2086,
            "cost": 0.0003561
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN immunizations AS T3 ON T1.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'IPV'"
    },
    {
        "sample_id": 1536,
        "pred_sql": "SELECT cp.description FROM careplans AS cp INNER JOIN conditions AS c ON cp.encounter = c.encounter INNER JOIN all_prevalences AS ap ON c.description = ap.item ORDER BY ap.\"prevalence percentage\" DESC LIMIT 1;",
        "retrieved": [
            1399
        ],
        "token_usage": {
            "tokens": 2146,
            "cost": 0.00039119999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T4.DESCRIPTION FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T2.DESCRIPTION = T1.ITEM INNER JOIN encounters AS T3 ON T2.ENCOUNTER = T3.ID INNER JOIN careplans AS T4 ON T4.ENCOUNTER = T3.ID ORDER BY T1.\"PREVALENCE PERCENTAGE\" DESC LIMIT 1"
    },
    {
        "sample_id": 1398,
        "pred_sql": "SELECT COUNT(*) FROM immunizations WHERE patient IN (SELECT patient FROM conditions WHERE code = (SELECT code FROM all_prevalences ORDER BY start DESC LIMIT 1))",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2098,
            "cost": 0.00036104999999999997
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) INNER JOIN immunizations AS T3 ON T2.PATIENT = T3.PATIENT GROUP BY T2.PATIENT ORDER BY T2.START DESC, T1.\"PREVALENCE RATE\" DESC LIMIT 1"
    },
    {
        "sample_id": 1369,
        "pred_sql": "SELECT conditions.description FROM conditions JOIN patients ON conditions.patient = patients.patient WHERE patients.first = 'Elly' AND patients.last = 'Koss' AND conditions.start <= '2009-01-08' AND conditions.stop >= '2009-01-08';",
        "retrieved": [],
        "token_usage": {
            "tokens": 1979,
            "cost": 0.0003585
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START = '2009-01-08'"
    },
    {
        "sample_id": 1507,
        "pred_sql": "SELECT DISTINCT patients.first, patients.last FROM careplans INNER JOIN patients ON careplans.patient = patients.patient WHERE patients.birthplace = 'America'",
        "retrieved": [
            1511
        ],
        "token_usage": {
            "tokens": 2075,
            "cost": 0.00036569999999999994
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'american'"
    },
    {
        "sample_id": 1387,
        "pred_sql": "SELECT allergies.patient FROM allergies INNER JOIN patients ON allergies.patient = patients.patient ORDER BY (allergies.stop - allergies.start) DESC LIMIT 1;",
        "retrieved": [
            1451
        ],
        "token_usage": {
            "tokens": 2096,
            "cost": 0.0003648
        },
        "db_id": "synthea",
        "gold_sql": "SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY CASE WHEN SUBSTR(STOP, -2, 1) != '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000 END - CASE WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900 ELSE SUBSTR(START, LENGTH(START) - 1) + 2000 END LIMIT 1"
    },
    {
        "sample_id": 1384,
        "pred_sql": "SELECT immunizations.date FROM patients INNER JOIN immunizations AS T2 ON patients.patient = T2.patient WHERE immunizations.description = 'standard pregnancy test' AND patients.first = 'Ira' AND patients.last = 'Deckow' ORDER BY immunizations.date",
        "retrieved": [
            1497
        ],
        "token_usage": {
            "tokens": 2147,
            "cost": 0.00040395
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T2.date FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Ira' AND T1.last = 'Deckow' AND T2.description = 'Standard pregnancy test'"
    },
    {
        "sample_id": 1473,
        "pred_sql": "SELECT patients.first || ' ' || patients.last AS full_name \nFROM patients \nINNER JOIN allergies ON patients.patient = allergies.patient \nWHERE allergies.description = 'shellfish' \nAND (CASE WHEN patients.deathdate IS NOT NULL THEN strftime('%Y', patients.deathdate) - strftime('%Y', patients.birthdate) < 12 ELSE 0 END) = 1;",
        "retrieved": [
            1451
        ],
        "token_usage": {
            "tokens": 2216,
            "cost": 0.00043275
        },
        "db_id": "synthea",
        "gold_sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND CAST((strftime('%J', T1.deathdate) - strftime('%J', T1.birthdate)) AS REAL) / 365 < 12"
    },
    {
        "sample_id": 1394,
        "pred_sql": "SELECT COUNT(*) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.patient WHERE T2.description = 'Ibuprofen 200mg Oral Tablet' AND T2.start >= '2016-01-01' AND T2.start < '2017-01-01' AND (STRFTIME('%Y', T2.stop) - STRFTIME('%Y', T2.start)) * 12 + (STRFTIME('%m', T2.stop) - STRFTIME('%m', T2.start)) = 1 AND T1.ethnicity = 'Dominican';",
        "retrieved": [
            1364
        ],
        "token_usage": {
            "tokens": 2307,
            "cost": 0.00047879999999999993
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND strftime('%Y', T2.START) = '2016' AND strftime('%m', T2.STOP) - strftime('%m', T2.START) = 1"
    },
    {
        "sample_id": 1539,
        "pred_sql": "SELECT DISTINCT patients.first, patients.last, patients.suffix FROM patients INNER JOIN medications ON patients.patient = medications.patient WHERE medications.reasondescription = 'streptococcal sore throat' LIMIT 5",
        "retrieved": [
            1396
        ],
        "token_usage": {
            "tokens": 2138,
            "cost": 0.0003945
        },
        "db_id": "synthea",
        "gold_sql": "SELECT DISTINCT T2.first, T2.last FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5"
    },
    {
        "sample_id": 1409,
        "pred_sql": "SELECT COUNT(DISTINCT patients.patient) FROM allergies INNER JOIN patients ON allergies.patient = patients.patient WHERE allergies.description = 'peanuts' AND patients.ethnicity = 'Asian'",
        "retrieved": [
            1449
        ],
        "token_usage": {
            "tokens": 2151,
            "cost": 0.0003942
        },
        "db_id": "synthea",
        "gold_sql": "SELECT COUNT(T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to peanuts' AND T2.race = 'asian'"
    },
    {
        "sample_id": 10692,
        "pred_sql": "SELECT COUNT(DISTINCT p.id) FROM patient p INNER JOIN examination e ON p.id = e.id WHERE e.sc170 = '-' AND p.sex = 'F' AND e.symptoms IS NULL;",
        "retrieved": [
            10669
        ],
        "token_usage": {
            "tokens": 2167,
            "cost": 0.00042899999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL"
    },
    {
        "sample_id": 10698,
        "pred_sql": "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.dna >= 8",
        "retrieved": [
            10675
        ],
        "token_usage": {
            "tokens": 2041,
            "cost": 0.00035519999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8"
    },
    {
        "sample_id": 10730,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.plt < 100 OR laboratory.plt > 400 AND examination.symptoms IS NOT NULL",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2144,
            "cost": 0.00041295
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL"
    },
    {
        "sample_id": 10727,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc < 3.5 OR laboratory.wbc > 9.0 AND patient.admission = '+'",
        "retrieved": [
            10625
        ],
        "token_usage": {
            "tokens": 2079,
            "cost": 0.000396
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'"
    },
    {
        "sample_id": 10607,
        "pred_sql": "SELECT (DECIMAL(lab_dec.t-cho) - DECIMAL(lab_nov.t-cho)) / DECIMAL(lab_nov.t-cho) * 100 AS decrease_rate\nFROM laboratory AS lab_nov\nJOIN laboratory AS lab_dec ON lab_nov.id = lab_dec.id\nJOIN patient ON lab_nov.id = patient.id\nWHERE lab_nov.date = '1981-11-01' AND lab_dec.date = '1981-12-01' AND patient.birthday = '1959-02-18';",
        "retrieved": [
            10655
        ],
        "token_usage": {
            "tokens": 2148,
            "cost": 0.00042659999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'"
    },
    {
        "sample_id": 10601,
        "pred_sql": "SELECT \"acl igg\" FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.diagnosis = 'SLE' AND patient.first date = '1994-02-19' AND examination.\"examination date\" = '1993-11-12';",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2238,
            "cost": 0.00044684999999999994
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT \"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND \"Examination Date\" = '1993-11-12'"
    },
    {
        "sample_id": 10715,
        "pred_sql": "SELECT MAX(examination.ana) AS highest_ana_concentration FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.cre < 1.5",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2113,
            "cost": 0.00038084999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1"
    },
    {
        "sample_id": 10688,
        "pred_sql": "SELECT birthday FROM patient WHERE id = (SELECT id FROM laboratory WHERE rnp = '+' ORDER BY birthday ASC LIMIT 1)",
        "retrieved": [
            10672
        ],
        "token_usage": {
            "tokens": 2084,
            "cost": 0.00039179999999999993
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1"
    },
    {
        "sample_id": 10699,
        "pred_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient LEFT JOIN examination ON patient.id = examination.id LEFT JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.\"dna\" < 8 AND (patient.description IS NULL OR patient.description = '')",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2161,
            "cost": 0.00041055
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL"
    },
    {
        "sample_id": 10640,
        "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patient WHERE sex = 'F')) AS percentage_female_with_high_ua FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ua > 8.0;",
        "retrieved": [
            10672
        ],
        "token_usage": {
            "tokens": 2148,
            "cost": 0.00043199999999999993
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'"
    },
    {
        "sample_id": 10719,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.t-cho > 250 AND (examination.kct = '-' OR examination.rvvt = '-' OR examination.lac = '-')",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2124,
            "cost": 0.00039824999999999995
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.\"T-CHO\" >= 250 AND T3.KCT = '-'"
    },
    {
        "sample_id": 10579,
        "pred_sql": "SELECT patient.id, patient.sex, examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2",
        "retrieved": [
            10659
        ],
        "token_usage": {
            "tokens": 2052,
            "cost": 0.00036495
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2"
    },
    {
        "sample_id": 10711,
        "pred_sql": "SELECT COUNT(*) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' AND laboratory.tp BETWEEN 6.0 AND 8.5;",
        "retrieved": [
            10637
        ],
        "token_usage": {
            "tokens": 2105,
            "cost": 0.00040395
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5"
    },
    {
        "sample_id": 10591,
        "pred_sql": "SELECT SUM(CASE WHEN p.sex = 'M' THEN 1 ELSE 0 END) AS male_count, SUM(CASE WHEN p.sex = 'F' THEN 1 ELSE 0 END) AS female_count FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.ua NOT BETWEEN 6.5 AND 8.0;",
        "retrieved": [
            10623
        ],
        "token_usage": {
            "tokens": 2167,
            "cost": 0.00042989999999999993
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID"
    },
    {
        "sample_id": 10681,
        "pred_sql": "SELECT DISTINCT examination.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1985-01-01' AND laboratory.rf < 20;",
        "retrieved": [
            10682
        ],
        "token_usage": {
            "tokens": 2144,
            "cost": 0.00041789999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'"
    },
    {
        "sample_id": 10626,
        "pred_sql": "SELECT (examination.\"examination date\" - patient.\"first date\") AS duration FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '821298'",
        "retrieved": [
            10666
        ],
        "token_usage": {
            "tokens": 2040,
            "cost": 0.00036629999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT STRFTIME('%d', T3.\"Examination Date\") - STRFTIME('%d', T1.\"First Date\") FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298"
    },
    {
        "sample_id": 10651,
        "pred_sql": "SELECT COUNT(DISTINCT patient.id) AS patient_count FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 200 AND (strftime('%Y', 'now') - (patient.birthday / 10000)) > 50;",
        "retrieved": [
            10655
        ],
        "token_usage": {
            "tokens": 2136,
            "cost": 0.00042345
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50"
    },
    {
        "sample_id": 10632,
        "pred_sql": "SELECT AVG(laboratory.ldh) AS average_ldh FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ldh < 500",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2125,
            "cost": 0.0003939
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500"
    },
    {
        "sample_id": 10644,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre > 1.5",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2081,
            "cost": 0.00037649999999999994
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'"
    },
    {
        "sample_id": 10709,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 AND patient.admission = '-'",
        "retrieved": [
            10700
        ],
        "token_usage": {
            "tokens": 2062,
            "cost": 0.0003714
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'"
    },
    {
        "sample_id": 10680,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.rf < 20 AND (examination.kct = '+' OR examination.rvvt = '+' OR examination.lac = '+')",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2114,
            "cost": 0.00039359999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'"
    },
    {
        "sample_id": 10620,
        "pred_sql": "SELECT COUNT(*) FROM patient WHERE sex = 'F' AND diagnosis = 'APS'",
        "retrieved": [
            10623
        ],
        "token_usage": {
            "tokens": 2040,
            "cost": 0.00035775
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'"
    },
    {
        "sample_id": 10571,
        "pred_sql": "WITH inpatient_count AS (SELECT COUNT(*) AS count FROM patient WHERE sex = 'M' AND admission = '+'), outpatient_count AS (SELECT COUNT(*) AS count FROM patient WHERE sex = 'M' AND admission = '-') SELECT inpatient_count.count AS inpatient_count, outpatient_count.count AS outpatient_count, (inpatient_count.count - outpatient_count.count) * 100.0 / NULLIF(outpatient_count.count, 0) AS percentage_deviation FROM inpatient_count, outpatient_count;",
        "retrieved": [
            10700
        ],
        "token_usage": {
            "tokens": 2162,
            "cost": 0.00043364999999999994
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'"
    },
    {
        "sample_id": 10574,
        "pred_sql": "SELECT COUNT(CASE WHEN patient.admission = '+' THEN 1 END) AS inpatient_count, COUNT(CASE WHEN patient.admission = '-' THEN 1 END) AS outpatient_count FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SLE'",
        "retrieved": [
            10700
        ],
        "token_usage": {
            "tokens": 2127,
            "cost": 0.00041175
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'"
    },
    {
        "sample_id": 10690,
        "pred_sql": "SELECT id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.\"sm\" = '+' ORDER BY patient.birthday DESC LIMIT 3;",
        "retrieved": [
            10672
        ],
        "token_usage": {
            "tokens": 2066,
            "cost": 0.0003827999999999999
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3"
    },
    {
        "sample_id": 10635,
        "pred_sql": "SELECT patient.id, laboratory.alp FROM patient JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday = 19820401 AND laboratory.alp < 300;",
        "retrieved": [
            10609
        ],
        "token_usage": {
            "tokens": 2067,
            "cost": 0.00037754999999999993
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'"
    },
    {
        "sample_id": 10596,
        "pred_sql": "SELECT AVG(STRFTIME('%Y', '1999-01-01') - STRFTIME('%Y', patient.birthday)) AS average_age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-10-01' AND '1991-10-31'",
        "retrieved": [
            10682
        ],
        "token_usage": {
            "tokens": 2147,
            "cost": 0.00041969999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'"
    },
    {
        "sample_id": 10661,
        "pred_sql": "SELECT patient.id, (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hct > 52 GROUP BY patient.id HAVING COUNT(laboratory.id) >= 2;",
        "retrieved": [
            10685
        ],
        "token_usage": {
            "tokens": 2195,
            "cost": 0.0004278
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )"
    },
    {
        "sample_id": 10725,
        "pred_sql": "SELECT birthday FROM patient WHERE id = (SELECT id FROM laboratory WHERE glu >= 180) ORDER BY birthday ASC LIMIT 1;",
        "retrieved": [
            10655
        ],
        "token_usage": {
            "tokens": 2031,
            "cost": 0.0003654
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1"
    },
    {
        "sample_id": 10733,
        "pred_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 2 AND laboratory.pt < 14;",
        "retrieved": [
            10666
        ],
        "token_usage": {
            "tokens": 2098,
            "cost": 0.00040469999999999997
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0"
    },
    {
        "sample_id": 10684,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.c3 > 35 AND examination.ana_pattern = 'P'",
        "retrieved": [
            10724
        ],
        "token_usage": {
            "tokens": 2091,
            "cost": 0.00037935
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.\"ANA Pattern\" = 'P'"
    },
    {
        "sample_id": 10670,
        "pred_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.birthday > '1980-01-01' AND (laboratory.fg <= 150 OR laboratory.fg >= 450)",
        "retrieved": [
            10669
        ],
        "token_usage": {
            "tokens": 2145,
            "cost": 0.00041804999999999994
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'"
    },
    {
        "sample_id": 10634,
        "pred_sql": "SELECT patient.admission, COUNT(patient.id) AS patient_count FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alp < 300 GROUP BY patient.admission;",
        "retrieved": [
            10700
        ],
        "token_usage": {
            "tokens": 2065,
            "cost": 0.00037319999999999996
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300"
    },
    {
        "sample_id": 10594,
        "pred_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.t_bil > 2.0 AND patient.sex = 'M'",
        "retrieved": [
            10700
        ],
        "token_usage": {
            "tokens": 2074,
            "cost": 0.00038445
        },
        "db_id": "thrombosis_prediction",
        "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 AND T1.SEX = 'M'"
    },
    {
        "sample_id": 9686,
        "pred_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
        "retrieved": [
            9666
        ],
        "token_usage": {
            "tokens": 950,
            "cost": 0.00020505
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')"
    },
    {
        "sample_id": 9718,
        "pred_sql": "SELECT DISTINCT atom.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR000_1_2' AND atom.atom_id = 'TR000_1'",
        "retrieved": [
            9645
        ],
        "token_usage": {
            "tokens": 908,
            "cost": 0.00020774999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'"
    },
    {
        "sample_id": 9664,
        "pred_sql": "SELECT DISTINCT m.molecule_id FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.atom_id IN ('21', '22', '23', '24', '25') AND m.label = '+'",
        "retrieved": [
            9633
        ],
        "token_usage": {
            "tokens": 1008,
            "cost": 0.000234
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'"
    },
    {
        "sample_id": 9743,
        "pred_sql": "SELECT molecule.molecule_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_2' OR atom.atom_id = 'TR000_4';",
        "retrieved": [
            9714
        ],
        "token_usage": {
            "tokens": 971,
            "cost": 0.0002343
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'"
    },
    {
        "sample_id": 9667,
        "pred_sql": "SELECT AVG(bond_count) FROM (SELECT atom.atom_id, COUNT(connected.bond_id) AS bond_count FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'i' GROUP BY atom.atom_id) AS bond_counts;",
        "retrieved": [
            9637
        ],
        "token_usage": {
            "tokens": 1042,
            "cost": 0.0002517
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'"
    },
    {
        "sample_id": 9688,
        "pred_sql": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';",
        "retrieved": [
            9677
        ],
        "token_usage": {
            "tokens": 978,
            "cost": 0.00020474999999999996
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'"
    },
    {
        "sample_id": 9706,
        "pred_sql": "SELECT bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'c'",
        "retrieved": [
            9623
        ],
        "token_usage": {
            "tokens": 986,
            "cost": 0.00021495
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'"
    },
    {
        "sample_id": 9695,
        "pred_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN molecule.label = '+' THEN atom.element ELSE NULL END) AS FLOAT) * 100 / COUNT(atom.element), 2) AS chlorine_percentage FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'",
        "retrieved": [
            9677
        ],
        "token_usage": {
            "tokens": 1082,
            "cost": 0.00026895
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"
    },
    {
        "sample_id": 9741,
        "pred_sql": "SELECT COUNT(DISTINCT atom.element) AS element_count FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR001_3_4'",
        "retrieved": [
            9693
        ],
        "token_usage": {
            "tokens": 945,
            "cost": 0.00020609999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'"
    },
    {
        "sample_id": 9641,
        "pred_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN molecule.label = '+' THEN bond.bond_id ELSE NULL END) AS FLOAT) * 100 / COUNT(bond.bond_id), 2) AS percentage_carcinogenic FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';",
        "retrieved": [
            9677
        ],
        "token_usage": {
            "tokens": 1051,
            "cost": 0.00024989999999999995
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'"
    },
    {
        "sample_id": 9704,
        "pred_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN molecule.label = '+' THEN atom.element ELSE NULL END) AS FLOAT) * 100 / COUNT(atom.element), 2) AS hydrogen_ratio FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.molecule_id = 'TR006'",
        "retrieved": [
            9677
        ],
        "token_usage": {
            "tokens": 1101,
            "cost": 0.00027675
        },
        "db_id": "toxicology",
        "gold_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label"
    },
    {
        "sample_id": 9721,
        "pred_sql": "SELECT COUNT(molecule.molecule_id) FROM molecule WHERE molecule.molecule_id = 'TR124' AND molecule.label = '+'",
        "retrieved": [
            9713
        ],
        "token_usage": {
            "tokens": 875,
            "cost": 0.00018974999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'"
    },
    {
        "sample_id": 9638,
        "pred_sql": "SELECT a1.element AS element1, a2.element AS element2 \nFROM atom AS a1 \nINNER JOIN connected AS c ON a1.atom_id = c.atom_id \nINNER JOIN atom AS a2 ON c.atom_id2 = a2.atom_id \nINNER JOIN bond AS b ON c.bond_id = b.bond_id \nWHERE b.bond_type = '#'",
        "retrieved": [
            9699
        ],
        "token_usage": {
            "tokens": 980,
            "cost": 0.00024329999999999995
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"
    },
    {
        "sample_id": 9681,
        "pred_sql": "SELECT COUNT(DISTINCT atom.atom_id) AS element_count FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'",
        "retrieved": [
            9685
        ],
        "token_usage": {
            "tokens": 1218,
            "cost": 0.00026954999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T"
    },
    {
        "sample_id": 9653,
        "pred_sql": "SELECT bond.bond_type, COUNT(bond.bond_id) AS bond_count, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR010' GROUP BY bond.bond_type ORDER BY bond_count DESC LIMIT 1;",
        "retrieved": [
            9677
        ],
        "token_usage": {
            "tokens": 1120,
            "cost": 0.00028544999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T"
    },
    {
        "sample_id": 9639,
        "pred_sql": "SELECT DISTINCT a2.element FROM atom AS a1 INNER JOIN connected AS c ON a1.atom_id = c.atom_id INNER JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE a1.molecule_id = 'TR181'",
        "retrieved": [
            9699
        ],
        "token_usage": {
            "tokens": 940,
            "cost": 0.00021615
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'"
    },
    {
        "sample_id": 9735,
        "pred_sql": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001'",
        "retrieved": [
            9694
        ],
        "token_usage": {
            "tokens": 919,
            "cost": 0.00018779999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'"
    },
    {
        "sample_id": 9659,
        "pred_sql": "SELECT molecule.molecule_id, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10'",
        "retrieved": [
            9719
        ],
        "token_usage": {
            "tokens": 901,
            "cost": 0.0001941
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'"
    },
    {
        "sample_id": 9716,
        "pred_sql": "SELECT DISTINCT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+'",
        "retrieved": [
            9694
        ],
        "token_usage": {
            "tokens": 989,
            "cost": 0.00022889999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='"
    },
    {
        "sample_id": 9740,
        "pred_sql": "SELECT bond.molecule_id FROM bond WHERE bond.bond_id = 'TR001_1_7'",
        "retrieved": [
            9702
        ],
        "token_usage": {
            "tokens": 873,
            "cost": 0.00017595
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'"
    },
    {
        "sample_id": 9723,
        "pred_sql": "SELECT bond.bond_type FROM bond INNER JOIN connected AS T2 ON bond.bond_id = T2.bond_id WHERE connected.atom_id = 'TR007_4' AND connected.atom_id2 = 'TR007_19' OR connected.atom_id2 = 'TR007_4' AND connected.atom_id = 'TR007_19'",
        "retrieved": [
            9635
        ],
        "token_usage": {
            "tokens": 990,
            "cost": 0.00022769999999999995
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'"
    },
    {
        "sample_id": 9690,
        "pred_sql": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR001_10_11'",
        "retrieved": [
            9665
        ],
        "token_usage": {
            "tokens": 963,
            "cost": 0.00020969999999999995
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'"
    },
    {
        "sample_id": 9737,
        "pred_sql": "SELECT DISTINCT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+'",
        "retrieved": [
            9719
        ],
        "token_usage": {
            "tokens": 916,
            "cost": 0.0002058
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'"
    },
    {
        "sample_id": 9700,
        "pred_sql": "SELECT COUNT(*) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-'",
        "retrieved": [
            9677
        ],
        "token_usage": {
            "tokens": 978,
            "cost": 0.00020519999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"
    },
    {
        "sample_id": 9703,
        "pred_sql": "SELECT atom.element, COUNT(*) as count FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = (SELECT atom_id FROM atom WHERE molecule_id = atom.molecule_id LIMIT 1 OFFSET 3) AND molecule.label = '+' GROUP BY atom.element;",
        "retrieved": [
            9719
        ],
        "token_usage": {
            "tokens": 1015,
            "cost": 0.00026385
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7"
    },
    {
        "sample_id": 9673,
        "pred_sql": "SELECT element, COUNT(*) as element_count FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY element_count ASC LIMIT 1;",
        "retrieved": [
            9719
        ],
        "token_usage": {
            "tokens": 925,
            "cost": 0.00021344999999999998
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t"
    },
    {
        "sample_id": 9701,
        "pred_sql": "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11'",
        "retrieved": [
            9702
        ],
        "token_usage": {
            "tokens": 906,
            "cost": 0.0001962
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'"
    },
    {
        "sample_id": 9656,
        "pred_sql": "SELECT COUNT(bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = '12' AND bond.molecule_id = 'TR009';",
        "retrieved": [
            9666
        ],
        "token_usage": {
            "tokens": 978,
            "cost": 0.00022185
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'"
    },
    {
        "sample_id": 9628,
        "pred_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR004_8_9'",
        "retrieved": [
            9637
        ],
        "token_usage": {
            "tokens": 1023,
            "cost": 0.00024074999999999997
        },
        "db_id": "toxicology",
        "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'"
    },
    {
        "sample_id": 717,
        "pred_sql": "SELECT trains.direction, COUNT(DISTINCT trains.id) AS train_count FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.position = '2' AND cars.shape = 'rectangle' GROUP BY trains.direction ORDER BY train_count DESC LIMIT 1;",
        "retrieved": [
            719
        ],
        "token_usage": {
            "tokens": 1026,
            "cost": 0.00026775
        },
        "db_id": "trains",
        "gold_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1"
    },
    {
        "sample_id": 702,
        "pred_sql": "SELECT COUNT(*) FROM cars AS C INNER JOIN trains AS T ON C.train_id = T.id WHERE C.len = 'short' AND T.direction = 'east';",
        "retrieved": [
            719
        ],
        "token_usage": {
            "tokens": 916,
            "cost": 0.00019949999999999997
        },
        "db_id": "trains",
        "gold_sql": "SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'"
    },
    {
        "sample_id": 709,
        "pred_sql": "SELECT (CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T2.id ELSE NULL END) AS FLOAT) * 100 / COUNT(DISTINCT T2.id)) AS percentage_east_trains\nFROM trains AS T2\nWHERE T2.id IN (\n    SELECT DISTINCT T1.train_id\n    FROM cars AS T1\n    WHERE T1.shape NOT IN ('rectangle', 'u_shaped', 'hexagon')\n)",
        "retrieved": [
            729
        ],
        "token_usage": {
            "tokens": 1051,
            "cost": 0.00025844999999999997
        },
        "db_id": "trains",
        "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T1.train_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape IN ('bucket', 'ellipse')"
    },
    {
        "sample_id": 722,
        "pred_sql": "SELECT COUNT(DISTINCT trains.id) AS east_trains_with_fully_loaded_head_cars FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.position = '1' AND cars.load_num = '3' AND trains.direction = 'east';",
        "retrieved": [
            729
        ],
        "token_usage": {
            "tokens": 1010,
            "cost": 0.00024014999999999998
        },
        "db_id": "trains",
        "gold_sql": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3"
    },
    {
        "sample_id": 698,
        "pred_sql": "SELECT cars.id FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.sides = 'double' AND trains.direction = 'west';",
        "retrieved": [
            719
        ],
        "token_usage": {
            "tokens": 912,
            "cost": 0.00019664999999999998
        },
        "db_id": "trains",
        "gold_sql": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'"
    },
    {
        "sample_id": 706,
        "pred_sql": "SELECT T2.direction, COUNT(T1.train_id) AS rectangle_car_count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape = 'rectangle' GROUP BY T2.direction",
        "retrieved": [
            719
        ],
        "token_usage": {
            "tokens": 940,
            "cost": 0.00021569999999999998
        },
        "db_id": "trains",
        "gold_sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS rectCarsNum FROM cars WHERE shape = 'rectangle' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id ORDER BY T2.rectCarsNum DESC"
    },
    {
        "sample_id": 716,
        "pred_sql": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' GROUP BY T1.train_id HAVING COUNT(T1.id) >= 4;",
        "retrieved": [
            719
        ],
        "token_usage": {
            "tokens": 944,
            "cost": 0.00021765
        },
        "db_id": "trains",
        "gold_sql": "SELECT SUM(CASE WHEN T1.direction = 'east' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.carsNum >= 4"
    },
    {
        "sample_id": 725,
        "pred_sql": "SELECT trains.direction FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.load_shape = 'diamond' AND cars.position = '2';",
        "retrieved": [
            729
        ],
        "token_usage": {
            "tokens": 946,
            "cost": 0.00019859999999999998
        },
        "db_id": "trains",
        "gold_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'"
    },
    {
        "sample_id": 7992,
        "pred_sql": "SELECT university.id FROM university INNER JOIN university_year ON university.id = university_year.university_id WHERE university_year.pct_international_students = 1 AND university_year.year BETWEEN 2011 AND 2015;",
        "retrieved": [
            8036
        ],
        "token_usage": {
            "tokens": 982,
            "cost": 0.00022559999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015"
    },
    {
        "sample_id": 8038,
        "pred_sql": "SELECT country.country_name FROM university INNER JOIN country ON university.country_id = country.id WHERE university.university_name = 'Harvard University'",
        "retrieved": [
            8094
        ],
        "token_usage": {
            "tokens": 911,
            "cost": 0.00019334999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'"
    },
    {
        "sample_id": 8003,
        "pred_sql": "SELECT university.university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.num_students >= 50000 AND university_year.year = 2012;",
        "retrieved": [
            7987
        ],
        "token_usage": {
            "tokens": 936,
            "cost": 0.0002007
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students > 50000 AND T1.year = 2012"
    },
    {
        "sample_id": 8074,
        "pred_sql": "SELECT university.university_name FROM university_year INNER JOIN university AS T2 ON university_year.university_id = T2.id WHERE university_year.year = 2011 ORDER BY university_year.pct_international_students DESC LIMIT 1",
        "retrieved": [
            7994
        ],
        "token_usage": {
            "tokens": 989,
            "cost": 0.00022484999999999996
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.pct_international_students DESC LIMIT 1"
    },
    {
        "sample_id": 8089,
        "pred_sql": "SELECT ranking_criteria.id FROM ranking_criteria WHERE ranking_criteria.criteria_name = 'Citations Rank'",
        "retrieved": [
            8050
        ],
        "token_usage": {
            "tokens": 868,
            "cost": 0.00017339999999999999
        },
        "db_id": "university",
        "gold_sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'"
    },
    {
        "sample_id": 7996,
        "pred_sql": "SELECT university.university_name FROM university INNER JOIN university_year ON university.id = university_year.university_id GROUP BY university.id ORDER BY SUM(university_year.num_students) ASC LIMIT 1;",
        "retrieved": [
            8135
        ],
        "token_usage": {
            "tokens": 1030,
            "cost": 0.0002292
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1"
    },
    {
        "sample_id": 7990,
        "pred_sql": "SELECT MAX(student_staff_ratio) FROM university_year WHERE university_id IN (SELECT university_id FROM university_year GROUP BY university_id ORDER BY MAX(student_staff_ratio) DESC LIMIT 1)",
        "retrieved": [
            8084
        ],
        "token_usage": {
            "tokens": 982,
            "cost": 0.0002049
        },
        "db_id": "university",
        "gold_sql": "SELECT MAX(student_staff_ratio) FROM university_year WHERE student_staff_ratio = ( SELECT MAX(student_staff_ratio) FROM university_year )"
    },
    {
        "sample_id": 8052,
        "pred_sql": "SELECT COUNT(*) FROM university INNER JOIN university_ranking_year ON university.id = university_ranking_year.university_id WHERE university_ranking_year.ranking_criteria_id = '6' AND university_ranking_year.year = '2011' AND university_ranking_year.score < '50';",
        "retrieved": [
            8059
        ],
        "token_usage": {
            "tokens": 1008,
            "cost": 0.00022994999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50"
    },
    {
        "sample_id": 8106,
        "pred_sql": "SELECT AVG(criteria_count) AS average_criteria_count FROM (SELECT COUNT(ranking_criteria.id) AS criteria_count FROM ranking_criteria INNER JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id WHERE ranking_system.system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings') GROUP BY ranking_system.id) AS criteria_counts;",
        "retrieved": [
            8135
        ],
        "token_usage": {
            "tokens": 1053,
            "cost": 0.00023894999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT (SUM(CASE WHEN T1.system_name = 'Center for World University Rankings' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Shanghai Ranking' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Times Higher Education World University Ranking' THEN 1 ELSE 0 END)) / 3 FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id"
    },
    {
        "sample_id": 7999,
        "pred_sql": "SELECT COUNT(*) AS num_universities FROM university AS U INNER JOIN university_ranking_year AS URY ON U.id = URY.university_id INNER JOIN ranking_criteria AS RC ON URY.ranking_criteria_id = RC.id WHERE RC.criteria_name = 'Awards' AND URY.score = '0' AND URY.year BETWEEN '2005' AND '2015';",
        "retrieved": [
            8059
        ],
        "token_usage": {
            "tokens": 1019,
            "cost": 0.00023789999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0"
    },
    {
        "sample_id": 7993,
        "pred_sql": "SELECT country.country_name FROM country INNER JOIN university ON country.id = university.country_id GROUP BY country.country_name ORDER BY COUNT(university.id) DESC LIMIT 1;",
        "retrieved": [
            8094
        ],
        "token_usage": {
            "tokens": 925,
            "cost": 0.00019995
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1"
    },
    {
        "sample_id": 8079,
        "pred_sql": "SELECT university.university_name FROM university INNER JOIN university_ranking_year ON university.id = university_ranking_year.university_id INNER JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE ranking_criteria.criteria_name = 'teaching' AND university_ranking_year.score > 90 AND university_ranking_year.year = '2011'",
        "retrieved": [
            8059
        ],
        "token_usage": {
            "tokens": 1024,
            "cost": 0.00023909999999999996
        },
        "db_id": "university",
        "gold_sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90"
    },
    {
        "sample_id": 8062,
        "pred_sql": "SELECT ranking_system.system_name FROM ranking_criteria INNER JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id WHERE ranking_criteria.criteria_name = 'Quality of Education Rank'",
        "retrieved": [
            8099
        ],
        "token_usage": {
            "tokens": 1032,
            "cost": 0.00022365
        },
        "db_id": "university",
        "gold_sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'"
    },
    {
        "sample_id": 8053,
        "pred_sql": "SELECT university_year.num_students FROM university_year INNER JOIN university ON university_year.university_id = university.id WHERE university.university_name = 'Yale University' AND university_year.year = 2016;",
        "retrieved": [
            8135
        ],
        "token_usage": {
            "tokens": 997,
            "cost": 0.00021164999999999997
        },
        "db_id": "university",
        "gold_sql": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Yale University' AND T1.year = 2016"
    },
    {
        "sample_id": 8037,
        "pred_sql": "SELECT CAST(university_year.num_students * university_year.pct_female_students AS FLOAT) / 100 FROM university INNER JOIN university_year ON university.id = university_year.university_id WHERE university.university_name = 'Stanford University' AND university_year.year = 2011",
        "retrieved": [
            8058
        ],
        "token_usage": {
            "tokens": 1010,
            "cost": 0.0002253
        },
        "db_id": "university",
        "gold_sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'"
    },
    {
        "sample_id": 8060,
        "pred_sql": "SELECT criteria_name FROM ranking_criteria WHERE ranking_system_id = (SELECT id FROM ranking_system WHERE system_name = 'Shanghai Ranking')",
        "retrieved": [
            8099
        ],
        "token_usage": {
            "tokens": 969,
            "cost": 0.0001881
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'"
    },
    {
        "sample_id": 8072,
        "pred_sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1;",
        "retrieved": [
            8068
        ],
        "token_usage": {
            "tokens": 900,
            "cost": 0.00018405
        },
        "db_id": "university",
        "gold_sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1"
    },
    {
        "sample_id": 7989,
        "pred_sql": "SELECT COUNT(*) FROM university INNER JOIN country AS T2 ON university.country_id = T2.id WHERE T2.country_name = 'state'",
        "retrieved": [
            8094
        ],
        "token_usage": {
            "tokens": 909,
            "cost": 0.0001926
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%'"
    },
    {
        "sample_id": 8087,
        "pred_sql": "SELECT ranking_system.id FROM ranking_system WHERE ranking_system.system_name = 'Center for World University Rankings'",
        "retrieved": [
            8019
        ],
        "token_usage": {
            "tokens": 943,
            "cost": 0.00018914999999999996
        },
        "db_id": "university",
        "gold_sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'"
    },
    {
        "sample_id": 8056,
        "pred_sql": "SELECT country.country_name FROM university INNER JOIN country ON university.country_id = country.id WHERE university.university_name = 'University of S\u00e3o Paulo'",
        "retrieved": [
            8094
        ],
        "token_usage": {
            "tokens": 902,
            "cost": 0.00018615
        },
        "db_id": "university",
        "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of S\u00e3o Paulo'"
    },
    {
        "sample_id": 8064,
        "pred_sql": "SELECT ranking_criteria.criteria_name, university_ranking_year.score FROM ranking_criteria INNER JOIN university_ranking_year ON ranking_criteria.id = university_ranking_year.ranking_criteria_id INNER JOIN university ON university.id = university_ranking_year.university_id WHERE university.university_name = 'Harvard University' AND university_ranking_year.year = '2005' ORDER BY university_ranking_year.score",
        "retrieved": [
            8099
        ],
        "token_usage": {
            "tokens": 1094,
            "cost": 0.00025995
        },
        "db_id": "university",
        "gold_sql": "SELECT T1.criteria_name, T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2005"
    },
    {
        "sample_id": 8001,
        "pred_sql": "SELECT COUNT(*) FROM university_ranking_year AS ur INNER JOIN university AS u ON ur.university_id = u.id INNER JOIN ranking_criteria AS rc ON ur.ranking_criteria_id = rc.id WHERE u.university_name = 'Yale University' AND ur.score >= '10' AND rc.criteria_name = 'Quality of Education Rank';",
        "retrieved": [
            8059
        ],
        "token_usage": {
            "tokens": 1026,
            "cost": 0.00023939999999999996
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'"
    },
    {
        "sample_id": 8030,
        "pred_sql": "SELECT university_year.university_id FROM university_year WHERE university_year.year = 2011 ORDER BY university_year.num_students DESC LIMIT 1",
        "retrieved": [
            8068
        ],
        "token_usage": {
            "tokens": 948,
            "cost": 0.0002124
        },
        "db_id": "university",
        "gold_sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1"
    },
    {
        "sample_id": 8112,
        "pred_sql": "SELECT AVG(score) FROM university_ranking_year WHERE year = '2012'",
        "retrieved": [
            8070
        ],
        "token_usage": {
            "tokens": 905,
            "cost": 0.0001794
        },
        "db_id": "university",
        "gold_sql": "SELECT AVG(score) FROM university_ranking_year WHERE year = 2012"
    },
    {
        "sample_id": 8044,
        "pred_sql": "SELECT SUM(university_year.num_students) - SUM(CAST(university_year.num_students * university_year.pct_international_students AS FLOAT) / 100) AS total_domestic_students FROM university_year INNER JOIN university ON university_year.university_id = university.id INNER JOIN university_ranking_year ON university.id = university_ranking_year.university_id INNER JOIN ranking_criteria ON university_ranking_year.ranking_criteria_id = ranking_criteria.id WHERE university_year.year = 2011 AND university_ranking_year.score = '90'",
        "retrieved": [
            8135
        ],
        "token_usage": {
            "tokens": 1098,
            "cost": 0.00027045
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 90 AND T1.year = 2011"
    },
    {
        "sample_id": 8031,
        "pred_sql": "SELECT COUNT(*) FROM university_year INNER JOIN university ON university_year.university_id = university.id WHERE university_year.year = 2011 AND university_year.num_students > 50000 AND university_year.pct_international_students > 10;",
        "retrieved": [
            8135
        ],
        "token_usage": {
            "tokens": 1080,
            "cost": 0.00025469999999999996
        },
        "db_id": "university",
        "gold_sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10"
    },
    {
        "sample_id": 8105,
        "pred_sql": "SELECT (SELECT num_students FROM university_year WHERE university_id = (SELECT id FROM university WHERE university_name = 'University of Ottawa') AND year = 2013) / (SELECT num_students FROM university_year WHERE university_id = (SELECT id FROM university WHERE university_name = 'Joseph Fourier University') AND year = 2013) AS ratio;",
        "retrieved": [
            7987
        ],
        "token_usage": {
            "tokens": 951,
            "cost": 0.00021059999999999997
        },
        "db_id": "university",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.university_name = 'University of Ottawa' THEN T1.num_students ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.university_name = 'Joseph Fourier University' THEN T1.num_students ELSE 0 END) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013"
    },
    {
        "sample_id": 8027,
        "pred_sql": "SELECT SUM(university_year.num_students) FROM university INNER JOIN university_year ON university.id = university_year.university_id WHERE university_year.year = '2011'",
        "retrieved": [
            8016
        ],
        "token_usage": {
            "tokens": 944,
            "cost": 0.00020459999999999999
        },
        "db_id": "university",
        "gold_sql": "SELECT SUM(num_students) FROM university_year WHERE year = 2011"
    },
    {
        "sample_id": 8048,
        "pred_sql": "SELECT university.country_id FROM university WHERE university.university_name = 'University of Tokyo'",
        "retrieved": [
            8093
        ],
        "token_usage": {
            "tokens": 910,
            "cost": 0.00018554999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo'"
    },
    {
        "sample_id": 8057,
        "pred_sql": "SELECT university_year.num_students * (university_year.pct_international_students / 100) AS international_students FROM university_year INNER JOIN university ON university_year.university_id = university.id WHERE university_year.year = 2012 AND university.university_name = 'Harvard University'",
        "retrieved": [
            8036
        ],
        "token_usage": {
            "tokens": 983,
            "cost": 0.00023204999999999998
        },
        "db_id": "university",
        "gold_sql": "SELECT CAST(T2.num_students * T2.pct_international_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Harvard University' AND T2.year = 2012"
    },
    {
        "sample_id": 3503,
        "pred_sql": "SELECT genre.genre_name FROM game INNER JOIN genre AS T2 ON game.genre_id = T2.id WHERE game.id = (SELECT id FROM game WHERE game_name = '999: Nine Hours, Nine Persons, Nine Doors')",
        "retrieved": [
            3493
        ],
        "token_usage": {
            "tokens": 1281,
            "cost": 0.00027225
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '999: Nine Hours, Nine Persons, Nine Doors'"
    },
    {
        "sample_id": 3423,
        "pred_sql": "SELECT game.game_name FROM game INNER JOIN game_publisher ON game.id = game_publisher.game_id INNER JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'American Softworks';",
        "retrieved": [
            3349
        ],
        "token_usage": {
            "tokens": 1295,
            "cost": 0.00026805
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'American Softworks'"
    },
    {
        "sample_id": 3461,
        "pred_sql": "SELECT (COUNT(CASE WHEN gp.platform_id = 'PS4' AND gp.release_year = '2014' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_ps4_games_2014 FROM game_platform gp;",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1262,
            "cost": 0.00027974999999999994
        },
        "db_id": "video_games",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id WHERE T1.release_year = 2014"
    },
    {
        "sample_id": 3490,
        "pred_sql": "SELECT publisher.publisher_name FROM publisher INNER JOIN game_publisher AS T2 ON publisher.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Adventure Time: Explore the Dungeon Because I Don\\'t Know!'",
        "retrieved": [
            3442
        ],
        "token_usage": {
            "tokens": 1364,
            "cost": 0.00030044999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'"
    },
    {
        "sample_id": 3309,
        "pred_sql": "SELECT COUNT(*) AS total_action_games FROM game INNER JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'action';",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1283,
            "cost": 0.00024014999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Action'"
    },
    {
        "sample_id": 3334,
        "pred_sql": "SELECT publisher.publisher_name FROM game_publisher INNER JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE game_publisher.game_id = 10031;",
        "retrieved": [
            3353
        ],
        "token_usage": {
            "tokens": 1267,
            "cost": 0.00024179999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 10031"
    },
    {
        "sample_id": 3345,
        "pred_sql": "SELECT COUNT(T.publisher_name) FROM (SELECT publisher.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Microsoft Game Studios' AND T4.genre_name = 'role-playing' GROUP BY T3.publisher_name HAVING COUNT(DISTINCT T1.id) > 0) AS t",
        "retrieved": [
            3320
        ],
        "token_usage": {
            "tokens": 1407,
            "cost": 0.00030375
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Role-Playing' AND T1.publisher_name = 'Microsoft Game Studios'"
    },
    {
        "sample_id": 3427,
        "pred_sql": "SELECT region_sales.num_sales * 100000 AS total_sales FROM region_sales WHERE region_sales.region_id = (SELECT id FROM region WHERE region_name = 'Europe') AND region_sales.game_platform_id = '26'",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1311,
            "cost": 0.00028169999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.num_sales * 100000 AS nums_eur FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.game_platform_id = 26 AND T1.region_name = 'Europe'"
    },
    {
        "sample_id": 3424,
        "pred_sql": "SELECT COUNT(T.id) FROM game AS T INNER JOIN genre AS T2 ON T.genre_id = T2.id WHERE T2.genre_name = 'strategy'",
        "retrieved": [
            3320
        ],
        "token_usage": {
            "tokens": 1314,
            "cost": 0.00024974999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Strategy' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id"
    },
    {
        "sample_id": 3507,
        "pred_sql": "SELECT game_platform.id FROM game_platform JOIN region_sales ON game_platform.id = region_sales.game_platform_id WHERE region_sales.region_id = (SELECT id FROM region WHERE region_name = 'Europe') AND (region_sales.num_sales * 100000) < (SELECT AVG(region_sales.num_sales * 100000) FROM region_sales WHERE region_sales.region_id = (SELECT id FROM region WHERE region_name = 'Europe')) * 0.3;",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1342,
            "cost": 0.0002957999999999999
        },
        "db_id": "video_games",
        "gold_sql": "SELECT DISTINCT T3.platform_id FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T1.region_name = 'Europe' AND T2.num_sales * 100 * 100000 < ( SELECT AVG(T2.num_sales * 100000) * 30 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' )"
    },
    {
        "sample_id": 3448,
        "pred_sql": "SELECT COUNT(*) FROM game WHERE game_name LIKE '%FIFA%';",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1145,
            "cost": 0.00021404999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%FIFA%' )"
    },
    {
        "sample_id": 3316,
        "pred_sql": "SELECT gp.platform_id FROM game_platform gp JOIN game g ON gp.game_publisher_id = g.id WHERE g.game_name = 'Panzer Tactics' AND gp.release_year = '2007';",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1247,
            "cost": 0.00027344999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007"
    },
    {
        "sample_id": 3381,
        "pred_sql": "SELECT MIN(gp.release_year) FROM game g JOIN game_platform gp ON g.id = gp.game_publisher_id WHERE g.game_name = 'Adventure Island'",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1168,
            "cost": 0.00022784999999999998
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.release_year FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'"
    },
    {
        "sample_id": 3357,
        "pred_sql": "SELECT release_year FROM game_platform WHERE id BETWEEN '1' AND '10'",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1147,
            "cost": 0.0002139
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.release_year FROM game_platform AS T WHERE T.id BETWEEN 1 AND 10"
    },
    {
        "sample_id": 3411,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN genre.genre_name = 'sports' THEN game.id ELSE NULL END) AS FLOAT) * 100 / COUNT(game.id) AS percentage_of_sports_games FROM game INNER JOIN genre ON game.genre_id = genre.id;",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1305,
            "cost": 0.00025425000000000003
        },
        "db_id": "video_games",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id"
    },
    {
        "sample_id": 3335,
        "pred_sql": "SELECT publisher.publisher_name FROM (SELECT publisher.publisher_name, COUNT(DISTINCT game.id) AS game_count FROM game INNER JOIN game_publisher ON game.id = game_publisher.game_id INNER JOIN publisher ON game_publisher.publisher_id = publisher.id GROUP BY publisher.publisher_name ORDER BY game_count DESC LIMIT 1) AS t",
        "retrieved": [
            3319
        ],
        "token_usage": {
            "tokens": 1379,
            "cost": 0.0002847
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3308,
        "pred_sql": "SELECT g.game_name FROM game g INNER JOIN genre gen ON g.genre_id = gen.id WHERE gen.id = (SELECT genre_id FROM game WHERE game_name = '3D Lemmings')",
        "retrieved": [
            3426
        ],
        "token_usage": {
            "tokens": 1259,
            "cost": 0.00024735
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.game_name FROM game AS T1 WHERE T1.genre_id = ( SELECT T.genre_id FROM game AS T WHERE T.game_name = '3D Lemmings' )"
    },
    {
        "sample_id": 3473,
        "pred_sql": "SELECT DISTINCT game_publisher.game_id FROM game_publisher WHERE game_publisher.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Bethesda Softworks')",
        "retrieved": [
            3323
        ],
        "token_usage": {
            "tokens": 1216,
            "cost": 0.00024765
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Bethesda Softworks'"
    },
    {
        "sample_id": 3347,
        "pred_sql": "SELECT DISTINCT platform.platform_name FROM game_platform INNER JOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id INNER JOIN publisher ON game_publisher.publisher_id = publisher.id INNER JOIN game ON game_publisher.game_id = game.id WHERE publisher.publisher_name = 'Codemasters' AND game_platform.release_year = '2004';",
        "retrieved": [
            3349
        ],
        "token_usage": {
            "tokens": 1341,
            "cost": 0.00029249999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T4.platform_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T3.release_year = 2004 AND T1.publisher_name = 'Codemasters'"
    },
    {
        "sample_id": 3449,
        "pred_sql": "SELECT platform.platform_name FROM region INNER JOIN region_sales ON region.id = region_sales.region_id INNER JOIN game_platform ON region_sales.game_platform_id = game_platform.id GROUP BY platform.platform_name ORDER BY SUM(region_sales.num_sales) DESC LIMIT 1;",
        "retrieved": [
            3373
        ],
        "token_usage": {
            "tokens": 1463,
            "cost": 0.00032609999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3428,
        "pred_sql": "SELECT COUNT(DISTINCT T2.game_id) FROM publisher INNER JOIN game_publisher AS T2 ON publisher.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T3.release_year = 2001",
        "retrieved": [
            3416
        ],
        "token_usage": {
            "tokens": 1317,
            "cost": 0.00028034999999999996
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(id) FROM game_platform AS T WHERE T.release_year = 2001"
    },
    {
        "sample_id": 3382,
        "pred_sql": "SELECT COUNT(T.publisher_name) FROM (SELECT publisher.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Puzzle' GROUP BY T3.publisher_name HAVING COUNT(DISTINCT T1.id) > 3) AS t",
        "retrieved": [
            3320
        ],
        "token_usage": {
            "tokens": 1402,
            "cost": 0.00030254999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Puzzle'"
    },
    {
        "sample_id": 3419,
        "pred_sql": "SELECT T.publisher_name FROM (SELECT publisher.publisher_name, COUNT(DISTINCT T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T4.genre_name = 'Action' GROUP BY T3.publisher_name ORDER BY COUNT(DISTINCT T1.id) DESC LIMIT 1) AS t",
        "retrieved": [
            3319
        ],
        "token_usage": {
            "tokens": 1438,
            "cost": 0.0003201
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.publisher_name FROM ( SELECT T4.publisher_name, COUNT(DISTINCT T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id INNER JOIN game_publisher AS T3 ON T2.id = T3.game_id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T1.genre_name = 'Action' GROUP BY T4.publisher_name ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3501,
        "pred_sql": "SELECT game_platform.id FROM game_platform JOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id JOIN game ON game_publisher.game_id = game.id WHERE game.game_name = 'Airborne Troops: Countdown to D-Day';",
        "retrieved": [
            3323
        ],
        "token_usage": {
            "tokens": 1257,
            "cost": 0.00027045
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.platform_id FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Airborne Troops: Countdown to D-Day'"
    },
    {
        "sample_id": 3474,
        "pred_sql": "SELECT COUNT(game.id) FROM game INNER JOIN game_publisher ON game.id = game_publisher.game_id INNER JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name IN ('Capcom', 'Sony Computer Entertainment')",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1351,
            "cost": 0.00027689999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')"
    },
    {
        "sample_id": 3462,
        "pred_sql": "SELECT SUM(region_sales.num_sales * 100000) AS total_sales FROM region_sales WHERE region_sales.region_id = 4",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1235,
            "cost": 0.000237
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.region_id = 4"
    },
    {
        "sample_id": 3453,
        "pred_sql": "SELECT region.region_name, SUM(region_sales.num_sales) AS total_sales FROM region INNER JOIN region_sales ON region.id = region_sales.region_id GROUP BY region.id ORDER BY total_sales DESC LIMIT 1;",
        "retrieved": [
            3408
        ],
        "token_usage": {
            "tokens": 1336,
            "cost": 0.00027554999999999995
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.region_name FROM ( SELECT T2.region_name, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id GROUP BY T4.platform_name ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t"
    },
    {
        "sample_id": 3500,
        "pred_sql": "SELECT DISTINCT publisher.publisher_name FROM region INNER JOIN region_sales AS T2 ON region.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE region_sales.num_sales < 100",
        "retrieved": [
            3373
        ],
        "token_usage": {
            "tokens": 1442,
            "cost": 0.000309
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T.publisher_name FROM ( SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' AND T2.num_sales * 100000 < 10000 LIMIT 5 ) t"
    },
    {
        "sample_id": 3470,
        "pred_sql": "SELECT COUNT(DISTINCT gp.publisher_id) FROM game_platform AS gp INNER JOIN game_publisher AS gpub ON gp.game_publisher_id = gpub.id INNER JOIN platform AS p ON gp.platform_id = p.id WHERE p.platform_name = 'X360';",
        "retrieved": [
            3353
        ],
        "token_usage": {
            "tokens": 1306,
            "cost": 0.0002643
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'"
    },
    {
        "sample_id": 3433,
        "pred_sql": "SELECT game.game_name FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'adventure'",
        "retrieved": [
            3394
        ],
        "token_usage": {
            "tokens": 1185,
            "cost": 0.00023129999999999998
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Adventure'"
    },
    {
        "sample_id": 3467,
        "pred_sql": "SELECT COUNT(DISTINCT game_publisher.publisher_id) FROM game INNER JOIN game_publisher ON game.id = game_publisher.game_id INNER JOIN game_platform ON game_publisher.id = game_platform.game_publisher_id WHERE game_platform.release_year = '1984';",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1369,
            "cost": 0.00028905
        },
        "db_id": "video_games",
        "gold_sql": "SELECT COUNT(T.game_publisher_id) FROM game_platform AS T WHERE T.release_year = 1984"
    },
    {
        "sample_id": 3374,
        "pred_sql": "SELECT CAST(COUNT(CASE WHEN game_platform.release_year = '2004' AND platform.platform_name = 'PSP' THEN game.id ELSE NULL END) AS FLOAT) * 100 / COUNT(CASE WHEN game_platform.release_year = '2004' THEN game.id ELSE NULL END) AS percentage_of_psp_games FROM game INNER JOIN game_platform ON game.id = game_platform.game_publisher_id INNER JOIN platform ON game_platform.platform_id = platform.id WHERE game_platform.release_year = '2004'",
        "retrieved": [
            3341
        ],
        "token_usage": {
            "tokens": 1405,
            "cost": 0.0003093
        },
        "db_id": "video_games",
        "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.platform_name = 'PSP' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T2.release_year = 2004"
    },
    {
        "sample_id": 3452,
        "pred_sql": "SELECT genre.genre_name FROM game INNER JOIN genre AS T2 ON game.genre_id = T2.id WHERE game.id = 1",
        "retrieved": [
            3493
        ],
        "token_usage": {
            "tokens": 1215,
            "cost": 0.00023579999999999999
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'"
    },
    {
        "sample_id": 3388,
        "pred_sql": "SELECT game.game_name FROM game INNER JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE game_platform.release_year = '2011'",
        "retrieved": [
            3349
        ],
        "token_usage": {
            "tokens": 1253,
            "cost": 0.00024465
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2011"
    },
    {
        "sample_id": 3390,
        "pred_sql": "SELECT g.game_name, gp.release_year FROM game g JOIN genre ge ON g.genre_id = ge.id JOIN game_platform gp ON g.id = gp.game_publisher_id WHERE ge.genre_name = 'sports' LIMIT 5;",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1211,
            "cost": 0.00025274999999999994
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T3.game_name, T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' LIMIT 5"
    },
    {
        "sample_id": 3504,
        "pred_sql": "SELECT MIN(release_year) FROM game_platform WHERE game_publisher_id = 156",
        "retrieved": [
            3398
        ],
        "token_usage": {
            "tokens": 1118,
            "cost": 0.0001983
        },
        "db_id": "video_games",
        "gold_sql": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id WHERE T2.game_id = 156"
    },
    {
        "sample_id": 3483,
        "pred_sql": "SELECT AVG(num_sales * 100000) AS average_sales FROM region_sales INNER JOIN region ON region_sales.region_id = region.id WHERE region.id = 3",
        "retrieved": [
            3469
        ],
        "token_usage": {
            "tokens": 1291,
            "cost": 0.00026519999999999994
        },
        "db_id": "video_games",
        "gold_sql": "SELECT AVG(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 3"
    },
    {
        "sample_id": 3481,
        "pred_sql": "SELECT (SELECT SUM(region_sales.num_sales * 100000) FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id WHERE game_platform.release_year = '1990') - (SELECT SUM(region_sales.num_sales * 100000) FROM region_sales JOIN game_platform ON region_sales.game_platform_id = game_platform.id WHERE game_platform.release_year = '2000') AS sales_difference;",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1347,
            "cost": 0.0003024
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(CASE WHEN T2.release_year = 2000 THEN T1.num_sales ELSE 0 END) - SUM(CASE WHEN T2.release_year = 1990 THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id"
    },
    {
        "sample_id": 3464,
        "pred_sql": "SELECT (SELECT SUM(num_sales) * 100000 FROM region_sales WHERE region_id = 2) - (SELECT SUM(num_sales) * 100000 FROM region_sales WHERE region_id = 3) AS sales_difference;",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1309,
            "cost": 0.00027959999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(CASE WHEN T.region_id = 2 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.region_id = 3 THEN T.num_sales ELSE 0 END) FROM region_sales t"
    },
    {
        "sample_id": 3393,
        "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM region_sales WHERE game_platform_id IN (SELECT id FROM game_platform WHERE platform_id = '9577')) AS percent_higher_sales\nFROM region_sales\nWHERE game_platform_id IN (SELECT id FROM game_platform WHERE platform_id = '9577')\nAND num_sales > (SELECT AVG(num_sales) FROM region_sales)",
        "retrieved": [
            3445
        ],
        "token_usage": {
            "tokens": 1305,
            "cost": 0.00027315
        },
        "db_id": "video_games",
        "gold_sql": "SELECT (SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) - AVG(T1.num_sales)) * 100.0 / AVG(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T1.game_platform_id = 9577"
    },
    {
        "sample_id": 3480,
        "pred_sql": "SELECT SUM(region_sales.num_sales * 100000) AS total_sales FROM game_platform JOIN region_sales ON game_platform.id = region_sales.game_platform_id WHERE game_platform.release_year = '2000';",
        "retrieved": [
            3360
        ],
        "token_usage": {
            "tokens": 1295,
            "cost": 0.00027299999999999997
        },
        "db_id": "video_games",
        "gold_sql": "SELECT SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T2.release_year = 2000"
    },
    {
        "sample_id": 7055,
        "pred_sql": "SELECT employeepayhistory.rate FROM employeepayhistory INNER JOIN employee ON employeepayhistory.businessentityid = employee.businessentityid INNER JOIN person ON employee.businessentityid = person.businessentityid ORDER BY employee.hiredate DESC LIMIT 1",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10657,
            "cost": 0.0016642499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.HireDate DESC LIMIT 1"
    },
    {
        "sample_id": 7455,
        "pred_sql": "SELECT (julianday(enddate) - julianday(startdate)) AS days_to_end FROM workorder WHERE workorderid = '425';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10505,
            "cost": 0.0016468499999999996
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425"
    },
    {
        "sample_id": 7279,
        "pred_sql": "SELECT COUNT(*) AS out_of_stock_count FROM product WHERE productid NOT IN (SELECT productid FROM productinventory WHERE quantity > 0)",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10563,
            "cost": 0.0016501499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(ProductID) FROM ProductVendor WHERE OnOrderQty = 0"
    },
    {
        "sample_id": 7108,
        "pred_sql": "SELECT COUNT(v.name) AS vendor_count FROM vendor v JOIN productvendor pv ON v.businessentityid = pv.businessentityid WHERE pv.standardprice BETWEEN 500 AND 15000;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10561,
            "cost": 0.0016417499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(*) FROM ProductVendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000"
    },
    {
        "sample_id": 7206,
        "pred_sql": "SELECT SUM(salesperson.bonus) AS total_bonus, SUM(salesperson.bonus) / SUM(salesperson.salesquota) * 100 AS bonus_percentage FROM salesperson WHERE salesperson.salesquota IS NOT NULL AND salesperson.salesquota > 0 AND salesperson.salesquota IN (SELECT salesquota FROM salespersonquotahistory WHERE quotadate BETWEEN '2013-01-01' AND '2013-12-31')",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10694,
            "cost": 0.0017080499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS REAL) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013'"
    },
    {
        "sample_id": 7295,
        "pred_sql": "SELECT vendor.purchasingwebserviceurl FROM vendor INNER JOIN productvendor ON vendor.businessentityid = productvendor.businessentityid INNER JOIN product ON productvendor.productid = product.productid WHERE product.name = 'Hex Nut 5';",
        "retrieved": [
            7307
        ],
        "token_usage": {
            "tokens": 10639,
            "cost": 0.0016588500000000001
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T3.PurchasingWebServiceURL FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5'"
    },
    {
        "sample_id": 7274,
        "pred_sql": "SELECT AVG(productvendor.averageleadtime) AS average_lead_time, (product.listprice - product.standardcost) AS profit_on_net, location.name AS vendor_location\nFROM productvendor\nINNER JOIN product ON productvendor.productid = product.productid\nINNER JOIN vendor ON productvendor.businessentityid = vendor.businessentityid\nINNER JOIN location ON vendor.businessentityid = location.locationid\nWHERE product.productid = 843;",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10684,
            "cost": 0.0016880999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.AverageLeadTime, T1.LastReceiptCost - T1.StandardPrice, T4.AddressLine1, T4.AddressLine2 , T4.City, T4.PostalCode FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN BusinessEntityAddress AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN Address AS T4 ON T3.AddressID = T4.AddressID WHERE T1.ProductID = 843"
    },
    {
        "sample_id": 7120,
        "pred_sql": "SELECT firstname, birthdate FROM person WHERE businessentityid = '18';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10448,
            "cost": 0.0016131
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.FirstName, T2.BirthDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 18"
    },
    {
        "sample_id": 7248,
        "pred_sql": "SELECT product.name, product.productline, product.listprice FROM product ORDER BY product.listprice DESC LIMIT 5",
        "retrieved": [
            7012
        ],
        "token_usage": {
            "tokens": 10596,
            "cost": 0.0016478999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT Name FROM Product ORDER BY ListPrice DESC LIMIT 5"
    },
    {
        "sample_id": 7110,
        "pred_sql": "SELECT person.lastname FROM person INNER JOIN employee ON person.businessentityid = employee.businessentityid WHERE person.middlename LIKE 'C%';",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10596,
            "cost": 0.0016370999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT LastName FROM Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%'"
    },
    {
        "sample_id": 7156,
        "pred_sql": "SELECT billofmaterials.unitmeasurecode FROM billofmaterials WHERE billofmaterials.componentid = '494' AND billofmaterials.enddate IS NULL",
        "retrieved": [
            7403
        ],
        "token_usage": {
            "tokens": 10565,
            "cost": 0.0016454999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.ComponentID = 494 AND T1.EndDate IS NULL GROUP BY T2.name"
    },
    {
        "sample_id": 7029,
        "pred_sql": "SELECT customer.customerid, SUM(salesorderheader.subtotal) AS total_subtotal\nFROM customer\nJOIN salesorderheader ON customer.customerid = salesorderheader.customerid\nJOIN salesperson ON salesorderheader.salespersonid = salesperson.businessentityid\nWHERE salesperson.bonus = (SELECT MAX(bonus) FROM salesperson)\nGROUP BY customer.customerid\nORDER BY total_subtotal DESC\nLIMIT 1;",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10670,
            "cost": 0.0016972499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.CustomerID FROM SalesOrderHeader AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID ORDER BY T1.SubTotal DESC LIMIT 1"
    },
    {
        "sample_id": 7096,
        "pred_sql": "SELECT SUM(CASE WHEN product.safetystocklevel > 0 THEN 1 ELSE 0 END) AS total_rejected_products FROM product INNER JOIN productreview ON product.productid = productreview.productid WHERE product.safetystocklevel > 0",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10689,
            "cost": 0.0016816499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(T2.ScrappedQty) FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Trim length too long'"
    },
    {
        "sample_id": 7040,
        "pred_sql": "SELECT employeepayhistory.payfrequency FROM employeepayhistory INNER JOIN employee ON employeepayhistory.businessentityid = employee.businessentityid WHERE employee.sickleavehours = (SELECT MIN(sickleavehours) FROM employee)",
        "retrieved": [
            7260
        ],
        "token_usage": {
            "tokens": 10661,
            "cost": 0.00166755
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SickLeaveHours ASC LIMIT 1"
    },
    {
        "sample_id": 7124,
        "pred_sql": "SELECT COUNT(employeedepartmenthistory.businessentityid) FROM employeedepartmenthistory INNER JOIN Department AS T2 ON employeedepartmenthistory.departmentid = T2.departmentid WHERE T2.name = 'Finance'",
        "retrieved": [
            7422
        ],
        "token_usage": {
            "tokens": 10648,
            "cost": 0.0016529999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T1.Name = 'Finance'"
    },
    {
        "sample_id": 7211,
        "pred_sql": "SELECT SUM(quantity) AS total_sold\nFROM transactionhistory\nWHERE productid = '989' AND transactiondate >= '2013-08-01' AND transactiondate < '2013-09-01';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10519,
            "cost": 0.00165435
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(Quantity) FROM TransactionHistory WHERE TransactionDate LIKE '2013-08%' AND TransactionType = 'S' AND ProductID = 989"
    },
    {
        "sample_id": 7020,
        "pred_sql": "SELECT p.name, SUM(sd.linetotal) AS total_line_total \nFROM product p \nJOIN salesorderdetail sd ON p.productid = sd.productid \nWHERE p.quality = 'Low' \nGROUP BY p.productid \nORDER BY total_line_total DESC \nLIMIT 1;",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10705,
            "cost": 0.00168855
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name, T2.LineTotal FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE Class = 'L' ORDER BY OrderQty * UnitPrice DESC LIMIT 1"
    },
    {
        "sample_id": 7439,
        "pred_sql": "SELECT product.listprice FROM product WHERE product.productid = '912'",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10533,
            "cost": 0.00162945
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = 912"
    },
    {
        "sample_id": 7060,
        "pred_sql": "SELECT COUNT(*) FROM employee WHERE businessentityid IN (SELECT businessentityid FROM employeepayhistory WHERE rate > 35) AND sickleavehours > 10;",
        "retrieved": [
            7321
        ],
        "token_usage": {
            "tokens": 10726,
            "cost": 0.00169215
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SickLeaveHours > 10 AND T1.Rate > 35"
    },
    {
        "sample_id": 7097,
        "pred_sql": "SELECT SUM(salesorderdetail.orderqty) AS total_quantity\nFROM salesorderdetail\nINNER JOIN salesorderheader ON salesorderdetail.salesorderid = salesorderheader.salesorderid\nWHERE salesorderheader.status = 1 AND salesorderheader.employeeid = 257;",
        "retrieved": [
            7202
        ],
        "token_usage": {
            "tokens": 10637,
            "cost": 0.001668
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(T2.OrderQty) FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID WHERE T1.Status = 1"
    },
    {
        "sample_id": 7317,
        "pred_sql": "SELECT e.businessentityid, ep.rate FROM employee e INNER JOIN employeepayhistory ep ON e.businessentityid = ep.businessentityid WHERE e.businessentityid != (SELECT businessentityid FROM employee WHERE jobtitle = 'Chief Executive Officer') ORDER BY ep.rate DESC LIMIT 1;",
        "retrieved": [
            7321
        ],
        "token_usage": {
            "tokens": 10716,
            "cost": 0.0016852499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.LastName FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle NOT LIKE 'Chief Executive Officer' ORDER BY T1.Rate DESC LIMIT 1"
    },
    {
        "sample_id": 7184,
        "pred_sql": "SELECT product.name FROM transactionhistoryarchive INNER JOIN product ON transactionhistoryarchive.productid = product.productid WHERE transactionhistoryarchive.transactiontype = 'P'",
        "retrieved": [
            7168
        ],
        "token_usage": {
            "tokens": 10591,
            "cost": 0.0016466999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ProductID FROM Product WHERE ProductID IN ( SELECT ProductID FROM TransactionHistory WHERE TransactionType = 'P' )"
    },
    {
        "sample_id": 7320,
        "pred_sql": "SELECT vendor.businessentityid, vendor.name, (productvendor.lastreceiptcost - productvendor.standardprice) AS profit_on_net FROM productvendor INNER JOIN vendor ON productvendor.businessentityid = vendor.businessentityid WHERE productvendor.productid = '342' ORDER BY profit_on_net DESC LIMIT 1;",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10635,
            "cost": 0.0016658999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 342 ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1"
    },
    {
        "sample_id": 7081,
        "pred_sql": "SELECT AVG(purchaseorderdetail.unitprice * purchaseorderdetail.orderqty) AS average_cost\nFROM purchaseorderheader\nJOIN purchaseorderdetail ON purchaseorderheader.purchaseorderid = purchaseorderdetail.purchaseorderid\nWHERE purchaseorderheader.orderdate >= '2012-01-01' AND purchaseorderheader.orderdate < '2012-07-01';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10565,
            "cost": 0.0016824
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(ActualCost) AS REAL) / COUNT(TransactionID) FROM TransactionHistoryArchive WHERE TransactionType = 'P' AND TransactionDate >= '2012-01-01' AND TransactionDate < '2012-07-01'"
    },
    {
        "sample_id": 7386,
        "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name \nFROM person p \nJOIN employee e ON p.businessentityid = e.businessentityid \nWHERE e.jobtitle = 'Production Technician' \nAND e.maritalstatus = 'M' \nAND e.gender = 'M' \nORDER BY e.birthdate DESC \nLIMIT 10;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10503,
            "cost": 0.0016456499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate DESC LIMIT 10"
    },
    {
        "sample_id": 7022,
        "pred_sql": "SELECT product.name FROM product WHERE product.minorderqty = 100 ORDER BY product.name DESC",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10592,
            "cost": 0.0016621499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MinOrderQty = 100 ORDER BY T1.Name DESC"
    },
    {
        "sample_id": 7371,
        "pred_sql": "SELECT starttime FROM shift WHERE name = 'Night Shift';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10444,
            "cost": 0.0016093499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT StartTime FROM Shift WHERE Name = 'Night'"
    },
    {
        "sample_id": 7242,
        "pred_sql": "SELECT person.firstname, person.lastname, MAX(employeepayhistory.rate) AS highest_pay_rate\nFROM person\nINNER JOIN employeepayhistory ON person.businessentityid = employeepayhistory.businessentityid\nINNER JOIN employee ON person.businessentityid = employee.businessentityid\nWHERE employee.jobtitle = 'Production Technician'\nGROUP BY person.firstname, person.lastname\nORDER BY highest_pay_rate DESC\nLIMIT 1;",
        "retrieved": [
            7321
        ],
        "token_usage": {
            "tokens": 10748,
            "cost": 0.0017102999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' ORDER BY T2.Rate DESC LIMIT 1"
    },
    {
        "sample_id": 7440,
        "pred_sql": "SELECT * FROM workorder WHERE plannedcost != actualcost;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10447,
            "cost": 0.0016116
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CASE WHEN ActualCost = PlannedCost THEN 'No' ELSE 'Yes' END FROM WorkOrderRouting"
    },
    {
        "sample_id": 7063,
        "pred_sql": "SELECT jobtitle FROM employee ORDER BY birthdate ASC LIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10447,
            "cost": 0.0016143
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1"
    },
    {
        "sample_id": 7330,
        "pred_sql": "SELECT person.firstname, person.lastname FROM salesperson JOIN person ON salesperson.businessentityid = person.businessentityid ORDER BY salesperson.salesytd DESC LIMIT 1;",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10562,
            "cost": 0.0016360499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SalesYTD DESC LIMIT 1"
    },
    {
        "sample_id": 7018,
        "pred_sql": "SELECT p.name, p.productline \nFROM product p \nJOIN purchaseorderdetail pod ON p.productid = pod.productid \nWHERE pod.orderqty >= 5000;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10564,
            "cost": 0.0016444499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999"
    },
    {
        "sample_id": 7126,
        "pred_sql": "SELECT COUNT(CASE WHEN a.city = 'Bothell' THEN 1 END) AS Bothell_Accounts, COUNT(CASE WHEN a.city = 'Kenmore' THEN 1 END) AS Kenmore_Accounts, sp.name AS State_Name\nFROM address a\nJOIN stateprovince sp ON a.stateprovinceid = sp.stateprovinceid\nWHERE a.city IN ('Bothell', 'Kenmore')\nGROUP BY sp.name;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10586,
            "cost": 0.0016905
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(IIF(T1.city = 'Bothell', 1, 0)) - SUM(IIF(T1.city = 'Kenmore', 1, 0)) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode"
    },
    {
        "sample_id": 7197,
        "pred_sql": "SELECT COUNT(e.businessentityid) AS employee_count, e.organizationlevel FROM employee e WHERE e.suffix IS NULL GROUP BY e.organizationlevel;",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10641,
            "cost": 0.0016762499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3"
    },
    {
        "sample_id": 7178,
        "pred_sql": "SELECT (COUNT(CASE WHEN T2.name = 'Cell' THEN 1 END) * 100.0 / COUNT(*)) AS cell_phone_percentage FROM personphone AS T1 INNER JOIN phonenumbertype AS T2 ON T1.phonenumbertypeid = T2.phonenumbertypeid;",
        "retrieved": [
            7129
        ],
        "token_usage": {
            "tokens": 10580,
            "cost": 0.00165045
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Name = 'Cell' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Name) FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID"
    },
    {
        "sample_id": 7183,
        "pred_sql": "SELECT productid FROM product WHERE productid NOT IN (SELECT productid FROM workorder)",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10549,
            "cost": 0.0016278
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ProductID FROM Product WHERE ProductID NOT IN ( SELECT T1.ProductID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID )"
    },
    {
        "sample_id": 7299,
        "pred_sql": "SELECT COUNT(DISTINCT pv.productid) AS product_count\nFROM productvendor pv\nJOIN product p ON pv.productid = p.productid\nWHERE p.productline = 'M'\nGROUP BY pv.productid\nHAVING COUNT(DISTINCT pv.businessentityid) > 2;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10598,
            "cost": 0.0016653
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID GROUP BY T1.ProductID HAVING COUNT(T1.Name) > 2"
    },
    {
        "sample_id": 7334,
        "pred_sql": "SELECT vendor.name, productvendor.averageleadtime FROM vendor INNER JOIN productvendor ON vendor.businessentityid = productvendor.businessentityid WHERE productvendor.productid = '348' ORDER BY productvendor.averageleadtime ASC LIMIT 1;",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10678,
            "cost": 0.00167235
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ProductID = 348 ORDER BY T1.AverageLeadTime ASC LIMIT 1"
    },
    {
        "sample_id": 7252,
        "pred_sql": "SELECT COUNT(DISTINCT employeedepartmenthistory.departmentid) FROM employeedepartmenthistory INNER JOIN employee ON employeedepartmenthistory.businessentityid = employee.businessentityid INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE person.firstname = 'Sheela' AND person.lastname = 'Ward' AND employeedepartmenthistory.startdate >= '2011-01-01' AND employeedepartmenthistory.enddate <= '2012-12-31'",
        "retrieved": [
            7422
        ],
        "token_usage": {
            "tokens": 10765,
            "cost": 0.00171555
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T3.Name) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'Sheela' AND T1.LastName = 'Word' AND STRFTIME('%Y', T3.ModifiedDate) BETWEEN '2011' AND '2012'"
    },
    {
        "sample_id": 7007,
        "pred_sql": "SELECT COUNT(*) AS transaction_count \nFROM transactionhistory \nWHERE productid IN (SELECT productid FROM product WHERE productline = 'M')",
        "retrieved": [],
        "token_usage": {
            "tokens": 10507,
            "cost": 0.0016493999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'"
    },
    {
        "sample_id": 7336,
        "pred_sql": "SELECT d.name AS DepartmentName, AVG(julianday('now') - julianday(e.birthdate)) / 365.25 AS AverageAge FROM employee e INNER JOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid INNER JOIN department d ON edh.departmentid = d.departmentid GROUP BY d.name ORDER BY AverageAge ASC LIMIT 1;",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10673,
            "cost": 0.0016940999999999996
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.BirthDate) + 1 , T3.Name FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (BusinessEntityID) INNER JOIN Department AS T3 USING (DepartmentID) ORDER BY T1.BirthDate DESC LIMIT 1"
    },
    {
        "sample_id": 7407,
        "pred_sql": "SELECT * FROM store WHERE name = 'Valley Bicycle Specialists';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10424,
            "cost": 0.0016005
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.AddressLine1, T2.AddressLine2 FROM BusinessEntityAddress AS T1 INNER JOIN Address AS T2 ON T1.AddressID = T2.AddressID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Valley Bicycle Specialists'"
    },
    {
        "sample_id": 7286,
        "pred_sql": "SELECT product.name FROM product INNER JOIN productreview ON product.productid = productreview.productid WHERE product.finishedgoodsflag = 1 GROUP BY product.productid HAVING COUNT(productreview.productreviewid) > 10;",
        "retrieved": [
            7015
        ],
        "token_usage": {
            "tokens": 10621,
            "cost": 0.0016660499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.NAME FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T2.NAME ORDER BY COUNT(T1.comments) > 10"
    },
    {
        "sample_id": 7365,
        "pred_sql": "SELECT (SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Arabic%') AS ArabicCount, (SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Thai%') AS ThaiCount, ((SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Arabic%') - (SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Thai%')) * 100.0 / NULLIF((SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Arabic%'), 0) AS PercentageDifference;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10515,
            "cost": 0.0016523999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID"
    },
    {
        "sample_id": 7457,
        "pred_sql": "SELECT SUM(productvendor.standardprice) / COUNT(productvendor.businessentityid) AS average_cost FROM productvendor INNER JOIN product ON productvendor.productid = product.productid WHERE product.productid = '847'",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10643,
            "cost": 0.0016720499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT StandardCost FROM ProductCostHistory WHERE ProductID = 847"
    },
    {
        "sample_id": 7050,
        "pred_sql": "SELECT COUNT(*) FROM document WHERE documentsummary IS NULL",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10512,
            "cost": 0.0016195499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL"
    },
    {
        "sample_id": 7306,
        "pred_sql": "SELECT product.name, AVG(productreview.rating) AS average_rating \nFROM product \nINNER JOIN productreview ON product.productid = productreview.productid \nWHERE product.productline = 'M' \nGROUP BY product.name \nORDER BY average_rating DESC \nLIMIT 1;",
        "retrieved": [
            7015
        ],
        "token_usage": {
            "tokens": 10648,
            "cost": 0.00168315
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'M' GROUP BY T2.Name ORDER BY CAST(SUM(T1.Rating) AS REAL) / COUNT(T1.ProductID) DESC LIMIT 1"
    },
    {
        "sample_id": 7066,
        "pred_sql": "SELECT COUNT(DISTINCT employee.businessentityid) FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.sickleavehours > 10 AND person.emailpromotion = 1",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10640,
            "cost": 0.00167115
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10"
    },
    {
        "sample_id": 7192,
        "pred_sql": "SELECT p.businessentityid, p.firstname, p.lastname \nFROM person p \nJOIN employee e ON p.businessentityid = e.businessentityid \nJOIN salesperson s ON e.businessentityid = s.businessentityid \nWHERE e.hiredate < '2010-01-01';",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10586,
            "cost": 0.0016495499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010"
    },
    {
        "sample_id": 7461,
        "pred_sql": "SELECT COUNT(product.productid) FROM product INNER JOIN productphoto ON product.productid = productphoto.productphotoid WHERE productphoto.thumbnailphotofilename = 'roadster_black_small.gif'",
        "retrieved": [
            7015
        ],
        "token_usage": {
            "tokens": 10601,
            "cost": 0.0016549499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(DISTINCT T2.ProductID) FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName = 'roadster_black_large.gif'"
    },
    {
        "sample_id": 7297,
        "pred_sql": "SELECT COUNT(DISTINCT p.productid) AS high_class_product_count \nFROM product p \nJOIN productvendor pv ON p.productid = pv.productid \nJOIN vendor v ON pv.businessentityid = v.businessentityid \nWHERE p.class = 'H' AND v.preferredvendorstatus = 1;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10648,
            "cost": 0.0016998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 USING (ProductID) INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.PreferredVendorStatus = 1 AND T2.Class = 'M'"
    },
    {
        "sample_id": 7264,
        "pred_sql": "SELECT person.firstname, person.lastname, employee.jobtitle FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid ORDER BY employee.hiredate LIMIT 1;",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10616,
            "cost": 0.0016454999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.JobTitle, T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.HireDate LIMIT 1"
    },
    {
        "sample_id": 7466,
        "pred_sql": "SELECT p.firstname, p.lastname, e.emailaddress \nFROM person p \nJOIN emailaddress e ON p.businessentityid = e.businessentityid \nWHERE e.emailaddress = 'regina7@adventure-works.com';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10490,
            "cost": 0.0016369499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName, T2.LastName FROM EmailAddress AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailAddress = 'regina7@adventure-works.com'"
    },
    {
        "sample_id": 7442,
        "pred_sql": "SELECT product.name FROM product WHERE product.listprice > 1000",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10532,
            "cost": 0.0016270499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT DISTINCT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice > 1000"
    },
    {
        "sample_id": 7249,
        "pred_sql": "SELECT MIN(hiredate) FROM employee INNER JOIN employeedepartmenthistory ON employee.businessentityid = employeedepartmenthistory.businessentityid INNER JOIN department ON employeedepartmenthistory.departmentid = department.departmentid WHERE department.name = 'Accountant'",
        "retrieved": [
            7422
        ],
        "token_usage": {
            "tokens": 10671,
            "cost": 0.0016667999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT MIN(HireDate) FROM Employee WHERE JobTitle = 'Accountant'"
    },
    {
        "sample_id": 7069,
        "pred_sql": "SELECT person.firstname FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.gender = 'M' AND person.namestyle = '0'",
        "retrieved": [
            7332
        ],
        "token_usage": {
            "tokens": 10667,
            "cost": 0.0016792499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.Gender = 'M'"
    },
    {
        "sample_id": 7324,
        "pred_sql": "SELECT (COUNT(CASE WHEN e.businessentityid IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS sales_rep_percentage\nFROM employee e\nLEFT JOIN salesperson s ON e.businessentityid = s.businessentityid;",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10578,
            "cost": 0.0016433999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee"
    },
    {
        "sample_id": 7195,
        "pred_sql": "SELECT AVG(employee.vacationhours) AS average_vacation_hours FROM employee JOIN salesperson ON employee.businessentityid = salesperson.businessentityid;",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10564,
            "cost": 0.0016376999999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'"
    },
    {
        "sample_id": 7315,
        "pred_sql": "SELECT employee.jobtitle, department.name FROM employee INNER JOIN employeedepartmenthistory ON employee.businessentityid = employeedepartmenthistory.businessentityid INNER JOIN department ON employeedepartmenthistory.departmentid = department.departmentid WHERE employee.birthdate = (SELECT MIN(birthdate) FROM employee)",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10613,
            "cost": 0.0016572
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.JobTitle, T4.Name FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID ORDER BY T2.HireDate LIMIT 1"
    },
    {
        "sample_id": 7356,
        "pred_sql": "SELECT product.name, salesorderdetail.orderqty, salesorderheader.salesordernumber \nFROM salesorderdetail \nINNER JOIN salesorderheader ON salesorderdetail.salesorderid = salesorderheader.salesorderid \nINNER JOIN product ON salesorderdetail.productid = product.productid \nWHERE salesorderheader.salesordernumber = 43660;",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10648,
            "cost": 0.0016849499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesOrderID = 43660"
    },
    {
        "sample_id": 7251,
        "pred_sql": "SELECT vendor.businessentityid, vendor.name, (productvendor.lastreceiptcost - productvendor.standardprice) AS profit_on_net\nFROM productvendor\nINNER JOIN vendor ON productvendor.businessentityid = vendor.businessentityid\nWHERE productvendor.standardprice = (\n    SELECT MAX(standardprice)\n    FROM productvendor\n)\nLIMIT 1;",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10663,
            "cost": 0.0016750499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1"
    },
    {
        "sample_id": 7287,
        "pred_sql": "SELECT reviewername FROM product INNER JOIN productreview ON product.productid = productreview.productid WHERE product.class = 'M' AND product.style = 'W' AND productreview.rating = (SELECT MAX(rating) FROM productreview INNER JOIN product ON product.productid = productreview.productid WHERE product.class = 'M' AND product.style = 'W')",
        "retrieved": [
            7015
        ],
        "token_usage": {
            "tokens": 10641,
            "cost": 0.00167805
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.ReviewerName FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'M' AND T2.Style = 'W' AND T1.Rating = 5"
    },
    {
        "sample_id": 7450,
        "pred_sql": "SELECT SUM(pc.standardcost) AS total_cost\nFROM product p\nJOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid\nJOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid\nWHERE pc.name = 'Sports'",
        "retrieved": [],
        "token_usage": {
            "tokens": 10488,
            "cost": 0.0016397999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.StandardCost FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Sport%'"
    },
    {
        "sample_id": 7410,
        "pred_sql": "SELECT p.firstname, p.lastname, pwd.passwordhash \nFROM person p \nJOIN password pwd ON p.businessentityid = pwd.businessentityid \nWHERE p.firstname = 'David' AND p.lastname = 'Bradley';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10485,
            "cost": 0.0016375499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.PasswordHash FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'"
    },
    {
        "sample_id": 7144,
        "pred_sql": "SELECT departmentid FROM department WHERE groupname = 'Sales and Marketing'",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10551,
            "cost": 0.0016285499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing'"
    },
    {
        "sample_id": 7077,
        "pred_sql": "SELECT MAX(ep.rate) - AVG(ep.rate) AS pay_difference\nFROM person p\nJOIN employee e ON p.businessentityid = e.businessentityid\nJOIN employeepayhistory ep ON e.businessentityid = ep.businessentityid\nWHERE e.maritalstatus = 'M' AND p.emailpromotion = 1;",
        "retrieved": [
            7321
        ],
        "token_usage": {
            "tokens": 10738,
            "cost": 0.0016957499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT MAX(T1.Rate) - SUM(T1.Rate) / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T2.EmailPromotion = 2 AND T3.MaritalStatus = 'M'"
    },
    {
        "sample_id": 7429,
        "pred_sql": "SELECT COUNT(p.productid) AS product_count\nFROM product p\nJOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid\nJOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid\nJOIN salesorderdetail sod ON p.productid = sod.productid\nJOIN salesorderheader so ON sod.salesorderid = so.salesorderid\nWHERE pc.name = 'Clothing' AND so.comment LIKE '%LL Road Frame Sale%';",
        "retrieved": [],
        "token_usage": {
            "tokens": 10550,
            "cost": 0.0016738499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T2.ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID INNER JOIN ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID INNER JOIN ProductCategory AS T5 ON T4.ProductCategoryID = T5.ProductCategoryID WHERE T1.Description = 'LL Road Frame Sale' AND T4.Name = 'Clothing'"
    },
    {
        "sample_id": 7188,
        "pred_sql": "SELECT p.firstname, p.lastname, (SUM(s.salesytd) / SUM(sp.salesquota)) * 100 AS percentage_quota FROM salesperson s INNER JOIN salespersonquotahistory sp ON s.businessentityid = sp.businessentityid INNER JOIN person p ON s.businessentityid = p.businessentityid WHERE STRFTIME('%Y', sp.quotadate) = '2013' GROUP BY s.businessentityid ORDER BY percentage_quota DESC LIMIT 1;",
        "retrieved": [
            7202
        ],
        "token_usage": {
            "tokens": 10719,
            "cost": 0.00171855
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT BusinessEntityID FROM SalesPerson WHERE BusinessEntityID IN ( SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE STRFTIME('%Y', QuotaDate) = '2013' ) ORDER BY CAST(SalesLastYear AS REAL) / SalesQuota DESC LIMIT 1"
    },
    {
        "sample_id": 7296,
        "pred_sql": "SELECT vendor.name FROM vendor INNER JOIN productvendor ON vendor.businessentityid = productvendor.businessentityid INNER JOIN product ON productvendor.productid = product.productid WHERE product.name = 'Hex Nut 5' ORDER BY productvendor.standardprice ASC LIMIT 1;",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10651,
            "cost": 0.0016723499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T3.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice LIMIT 1"
    },
    {
        "sample_id": 7471,
        "pred_sql": "SELECT AVG(listprice - standardcost) AS average_profit_percentage FROM product;",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10581,
            "cost": 0.0016335
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT AVG((T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost) FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "sample_id": 7230,
        "pred_sql": "SELECT territoryid, COUNT(customerid) AS customer_count \nFROM customer \nGROUP BY territoryid \nORDER BY customer_count DESC \nLIMIT 1;",
        "retrieved": [],
        "token_usage": {
            "tokens": 10508,
            "cost": 0.0016481999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT TerritoryID FROM Customer WHERE ModifiedDate < '2014-12-09' GROUP BY TerritoryID ORDER BY COUNT(TerritoryID) DESC LIMIT 1"
    },
    {
        "sample_id": 7454,
        "pred_sql": "SELECT COUNT(product.productid) FROM product WHERE product.productid IN (SELECT productid FROM productphoto WHERE thumbnailphoto IS NOT NULL)",
        "retrieved": [
            7015
        ],
        "token_usage": {
            "tokens": 10604,
            "cost": 0.0016589999999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(ProductID) FROM ProductProductPhoto WHERE ProductPhotoID != 1"
    },
    {
        "sample_id": 7181,
        "pred_sql": "SELECT SUM(workorder.stockedqty) AS total_stocked_quantity FROM workorder WHERE workorder.locationid = 40;",
        "retrieved": [
            7403
        ],
        "token_usage": {
            "tokens": 10527,
            "cost": 0.0016254
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(*) FROM WorkOrderRouting AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.LocationID = T2.ProductAssemblyID INNER JOIN WorkOrder AS T3 ON T3.WorkOrderID = T1.WorkOrderID WHERE T1.LocationID = 40"
    },
    {
        "sample_id": 7016,
        "pred_sql": "SELECT p.name FROM product p JOIN purchaseorderdetail pod ON p.productid = pod.productid WHERE pod.receivedqty = 0",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10535,
            "cost": 0.0016301999999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = T2.ReceivedQty AND T2.RejectedQty <> 0"
    },
    {
        "sample_id": 7444,
        "pred_sql": "SELECT product.name FROM product INNER JOIN productinventory ON product.productid = productinventory.productid WHERE productinventory.locationid = 1 AND productinventory.shelf = 'L' AND productinventory.bin = '6'",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10561,
            "cost": 0.0016444499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.LocationID = 1 AND T1.Shelf = 'L' AND T1.Bin = 6"
    },
    {
        "sample_id": 7011,
        "pred_sql": "SELECT productreview.productid, productreview.rating, productreview.comments FROM productreview WHERE productreview.reviewername LIKE 'J%';",
        "retrieved": [
            7015
        ],
        "token_usage": {
            "tokens": 10600,
            "cost": 0.0016512
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%'"
    },
    {
        "sample_id": 7111,
        "pred_sql": "SELECT COUNT(DISTINCT vendor.businessentityid) AS vendor_count \nFROM vendor \nINNER JOIN productvendor ON vendor.businessentityid = productvendor.businessentityid \nINNER JOIN purchaseorderdetail ON productvendor.productid = purchaseorderdetail.productid \nINNER JOIN purchaseorderheader ON purchaseorderdetail.purchaseorderid = purchaseorderheader.purchaseorderid \nWHERE productvendor.averageleadtime = 25;",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10753,
            "cost": 0.0017159999999999996
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(DISTINCT BusinessEntityID) FROM ProductVendor WHERE AverageLeadTime = 25"
    },
    {
        "sample_id": 7054,
        "pred_sql": "SELECT COUNT(employee.businessentityid) FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.payfrequency = (SELECT MAX(payfrequency) FROM employee) AND employee.maritalstatus = 'M'",
        "retrieved": [
            7189
        ],
        "token_usage": {
            "tokens": 10631,
            "cost": 0.0016675499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )"
    },
    {
        "sample_id": 7364,
        "pred_sql": "SELECT sp.name FROM stateprovince sp INNER JOIN address a ON sp.stateprovinceid = a.stateprovinceid WHERE a.city = 'Racine'",
        "retrieved": [
            7139
        ],
        "token_usage": {
            "tokens": 10569,
            "cost": 0.0016294499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T1.City = 'Racine'"
    },
    {
        "sample_id": 7372,
        "pred_sql": "SELECT p.style, p.weight FROM product p WHERE p.productid IN (SELECT productid FROM product WHERE makeflag = 1 GROUP BY style ORDER BY COUNT(*) DESC LIMIT 1)",
        "retrieved": [
            7137
        ],
        "token_usage": {
            "tokens": 10709,
            "cost": 0.0016801499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT Weight FROM Product WHERE WeightUnitMeasureCode = 'LB' GROUP BY Weight ORDER BY COUNT(Style) DESC LIMIT 1"
    },
    {
        "sample_id": 7085,
        "pred_sql": "SELECT AVG(totaldue) FROM purchaseorderheader WHERE status = 2",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10579,
            "cost": 0.0016327499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT SUM(TotalDue) / COUNT(TotalDue) FROM PurchaseOrderHeader WHERE Status = 2"
    },
    {
        "sample_id": 7291,
        "pred_sql": "SELECT productdescription.description FROM productdescription JOIN product ON product.productid = productdescription.productid WHERE product.name = 'Headset Ball Bearings'",
        "retrieved": [
            7403
        ],
        "token_usage": {
            "tokens": 10541,
            "cost": 0.0016351499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Description FROM ProductDescription AS T1 INNER JOIN Product AS T2 WHERE T2.Name = 'Headset Ball Bearings' AND T1.productDescriptionID = T2.ProductID"
    },
    {
        "sample_id": 7319,
        "pred_sql": "SELECT product.name FROM product JOIN store ON product.productid = store.businessentityid JOIN salesorderheader ON store.businessentityid = salesorderheader.storeid JOIN salesterritory ON salesorderheader.territoryid = salesterritory.territoryid JOIN countryregion ON salesterritory.countryregioncode = countryregion.countryregioncode WHERE countryregion.name = 'Australia' AND store.name = 'Bike Retailer' ORDER BY product.productid;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10630,
            "cost": 0.0016876499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T3.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Name = 'Australia Bike Retailer'"
    },
    {
        "sample_id": 7068,
        "pred_sql": "SELECT p.additionalcontactinfo FROM person p JOIN employee e ON p.businessentityid = e.businessentityid JOIN salesperson s ON e.businessentityid = s.businessentityid ORDER BY e.birthdate ASC LIMIT 1;",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10585,
            "cost": 0.0016467
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.AdditionalContactInfo FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE PersonType = 'SP' ORDER BY T1.BirthDate ASC LIMIT 1"
    },
    {
        "sample_id": 7187,
        "pred_sql": "SELECT COUNT(employee.businessentityid) FROM employee INNER JOIN person ON employee.businessentityid = person.businessentityid WHERE employee.gender = 'M' AND person.emailpromotion = 0",
        "retrieved": [
            7157
        ],
        "token_usage": {
            "tokens": 10613,
            "cost": 0.0016603499999999999
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0 AND T1.Gender = 'M'"
    },
    {
        "sample_id": 7229,
        "pred_sql": "SELECT name FROM vendor WHERE activeflag = 1 AND purchasingwebserviceurl IS NOT NULL;",
        "retrieved": [
            7404
        ],
        "token_usage": {
            "tokens": 10523,
            "cost": 0.0016248
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT Name FROM Vendor WHERE ActiveFlag = 1"
    },
    {
        "sample_id": 7443,
        "pred_sql": "SELECT product.name, (product.listprice - product.standardcost) AS profit FROM product ORDER BY profit DESC LIMIT 1;",
        "retrieved": [
            7380
        ],
        "token_usage": {
            "tokens": 10651,
            "cost": 0.00165885
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.ProductID FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.ListPrice - T2.StandardCost DESC LIMIT 1"
    },
    {
        "sample_id": 7103,
        "pred_sql": "SELECT AVG(salesorderdetail.orderqty) AS average_ordered_quantity \nFROM salesorderdetail \nINNER JOIN salesorderheader ON salesorderdetail.salesorderid = salesorderheader.salesorderid \nINNER JOIN shipmethod ON salesorderheader.shipmethodid = shipmethod.shipmethodid \nWHERE shipmethod.name = 'Cargo Transport 5';",
        "retrieved": [
            7305
        ],
        "token_usage": {
            "tokens": 10689,
            "cost": 0.0016956
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT CAST(SUM(IIF(T1.ShipMethodID = 5, T3.OrderQty, 0)) AS REAL) / COUNT(T3.ProductID) FROM ShipMethod AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.ShipMethodID = T2.ShipMethodID INNER JOIN PurchaseOrderDetail AS T3 ON T2.PurchaseOrderID = T3.PurchaseOrderID"
    },
    {
        "sample_id": 7104,
        "pred_sql": "SELECT salestaxrate.name FROM salestaxrate JOIN stateprovince ON salestaxrate.stateprovinceid = stateprovince.stateprovinceid JOIN salesterritory ON stateprovince.territoryid = salesterritory.territoryid JOIN (SELECT salesperson.territoryid FROM salesperson JOIN salesterritory ON salesperson.territoryid = salesterritory.territoryid WHERE salesperson.salesytd > salesperson.saleslastyear) AS top_territory ON salesterritory.territoryid = top_territory.territoryid;",
        "retrieved": [
            7087
        ],
        "token_usage": {
            "tokens": 10691,
            "cost": 0.0017053499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM SalesTerritory AS T1 INNER JOIN StateProvince AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode INNER JOIN SalesTaxRate AS T3 ON T2.StateProvinceID = T3.StateProvinceID ORDER BY (T1.SalesYTD - T1.SalesLastYear) / T1.SalesLastYear DESC LIMIT 1"
    },
    {
        "sample_id": 7285,
        "pred_sql": "SELECT COUNT(*) AS product_count FROM (SELECT p.productid FROM product p INNER JOIN productreview pr ON p.productid = pr.productid WHERE p.makeflag = 1 AND p.finishedgoodsflag = 1 GROUP BY p.productid HAVING COUNT(pr.productreviewid) > 10) AS manufactured_products;",
        "retrieved": [
            7307
        ],
        "token_usage": {
            "tokens": 10697,
            "cost": 0.0016927499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 USING (ProductID) WHERE T2.FinishedGoodsFlag = 1 AND T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY COUNT(T1.COMMENTS) > 10"
    },
    {
        "sample_id": 7159,
        "pred_sql": "SELECT productphoto.thumbnailphoto, productphoto.largephoto FROM product INNER JOIN productphoto ON product.productid = productphoto.productid WHERE product.productid = 1",
        "retrieved": [
            7015
        ],
        "token_usage": {
            "tokens": 10584,
            "cost": 0.0016456499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.ThumbNailPhoto FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T2.ProductID = 1"
    },
    {
        "sample_id": 7030,
        "pred_sql": "SELECT SUM(sod.unitprice * sod.orderqty) AS total_price \nFROM salesorderdetail AS sod \nINNER JOIN salesorderheader AS soh ON sod.salesorderid = soh.salesorderid \nWHERE soh.salesorderid = 46625 \nAND sod.specialofferid IN (SELECT specialofferid FROM specialoffer WHERE minqty <= 14 AND maxqty >= 11) \nAND sod.productid = 716;",
        "retrieved": [
            7089
        ],
        "token_usage": {
            "tokens": 10664,
            "cost": 0.0016900499999999998
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T2.UnitPrice * T2.OrderQty FROM SpecialOffer AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'Volume Discount 11 to 14' AND T1.SpecialOfferID = 2 AND T2.ProductID = 716 AND T2.SalesOrderID = 46625"
    },
    {
        "sample_id": 7057,
        "pred_sql": "SELECT MAX(employeepayhistory.rate) AS highest_pay_rate FROM employee INNER JOIN employeepayhistory ON employee.businessentityid = employeepayhistory.businessentityid WHERE employee.salariedflag = 1;",
        "retrieved": [
            7321
        ],
        "token_usage": {
            "tokens": 10702,
            "cost": 0.00167955
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SalariedFlag = 1 ORDER BY T1.Rate DESC LIMIT 1"
    },
    {
        "sample_id": 7169,
        "pred_sql": "SELECT vendor.creditrating FROM vendor WHERE vendor.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'",
        "retrieved": [
            7422
        ],
        "token_usage": {
            "tokens": 10670,
            "cost": 0.0016531500000000001
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'"
    },
    {
        "sample_id": 7284,
        "pred_sql": "SELECT product.productid, COUNT(productreview.productreviewid) AS review_count\nFROM product\nINNER JOIN productreview ON product.productid = productreview.productid\nWHERE product.finishedgoodsflag = 1\nGROUP BY product.productid\nORDER BY review_count DESC\nLIMIT 1;",
        "retrieved": [
            7300
        ],
        "token_usage": {
            "tokens": 10731,
            "cost": 0.0017086499999999997
        },
        "db_id": "works_cycles",
        "gold_sql": "SELECT T1.Comments FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.Comments ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1"
    },
    {
        "sample_id": 7906,
        "pred_sql": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.gnp < 1000 AND countrylanguage.language = 'Dutch'",
        "retrieved": [
            7855
        ],
        "token_usage": {
            "tokens": 1027,
            "cost": 0.00022784999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GNP < 1000 AND T1.IsOfficial = 'T' AND T1.Language = 'Dutch'"
    },
    {
        "sample_id": 7860,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN countrylanguage.language = 'Chinese' THEN countrylanguage.percentage ELSE 0 END) AS FLOAT) * (SELECT population FROM country WHERE name = 'China') / (SELECT population FROM country WHERE name = 'China') AS percentage_of_population_using_chinese FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.name = 'China'",
        "retrieved": [
            7851
        ],
        "token_usage": {
            "tokens": 1059,
            "cost": 0.00022859999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese'"
    },
    {
        "sample_id": 7821,
        "pred_sql": "SELECT AVG(population) AS average_population FROM city WHERE district = 'Karnataka';",
        "retrieved": [
            7847
        ],
        "token_usage": {
            "tokens": 952,
            "cost": 0.00018599999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT AVG(Population) FROM City WHERE District = 'Karnataka' GROUP BY ID"
    },
    {
        "sample_id": 7883,
        "pred_sql": "SELECT c.name, COUNT(cl.language) AS language_count FROM city AS c INNER JOIN country AS co ON c.countrycode = co.code INNER JOIN countrylanguage AS cl ON co.code = cl.countrycode WHERE c.id IN (SELECT id FROM city ORDER BY population DESC LIMIT 5) GROUP BY c.countrycode ORDER BY language_count DESC LIMIT 1;",
        "retrieved": [
            7828
        ],
        "token_usage": {
            "tokens": 1086,
            "cost": 0.00024209999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT Name FROM ( SELECT T1.Name, T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode GROUP BY T1.Name, T1.Population, T2.Language ORDER BY T1.Population DESC ) AS T3 GROUP BY t3.Name ORDER BY COUNT(Language) DESC LIMIT 1"
    },
    {
        "sample_id": 7837,
        "pred_sql": "SELECT district FROM city WHERE population = (SELECT MIN(population) FROM city)",
        "retrieved": [
            7824
        ],
        "token_usage": {
            "tokens": 949,
            "cost": 0.00019994999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT District FROM City ORDER BY Population LIMIT 1"
    },
    {
        "sample_id": 7875,
        "pred_sql": "SELECT cl.language FROM countrylanguage cl INNER JOIN country c ON cl.countrycode = c.code WHERE c.population = (SELECT MIN(population) FROM country) AND cl.isofficial = 'T';",
        "retrieved": [
            7847
        ],
        "token_usage": {
            "tokens": 979,
            "cost": 0.00020219999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 1"
    },
    {
        "sample_id": 7888,
        "pred_sql": "SELECT country.gnp FROM city INNER JOIN country AS T2 ON city.countrycode = T2.code WHERE city.district = 'Shanghai' LIMIT 1",
        "retrieved": [
            7907
        ],
        "token_usage": {
            "tokens": 981,
            "cost": 0.00019574999999999996
        },
        "db_id": "world",
        "gold_sql": "SELECT CAST((T1.GNP - T1.GNPOld) AS REAL) / T1.GNPOld FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Shanghai'"
    },
    {
        "sample_id": 7865,
        "pred_sql": "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Italy') AND isofficial = 'F';",
        "retrieved": [
            7829
        ],
        "token_usage": {
            "tokens": 947,
            "cost": 0.00018119999999999999
        },
        "db_id": "world",
        "gold_sql": "SELECT SUM(CASE WHEN T2.IsOfficial = 'F' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Italy'"
    },
    {
        "sample_id": 7836,
        "pred_sql": "SELECT COUNT(DISTINCT country.code) * 100.0 / (SELECT COUNT(*) FROM country WHERE region = 'North America') AS percentage FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.region = 'North America' AND countrylanguage.language = 'English';",
        "retrieved": [
            7832
        ],
        "token_usage": {
            "tokens": 1014,
            "cost": 0.00021915
        },
        "db_id": "world",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode"
    },
    {
        "sample_id": 7916,
        "pred_sql": "SELECT DISTINCT country.name FROM country INNER JOIN city ON country.code = city.countrycode WHERE city.population BETWEEN 140000 AND 150000 AND country.lifeexpectancy > (SELECT AVG(lifeexpectancy) FROM country) * 0.8;",
        "retrieved": [
            7867
        ],
        "token_usage": {
            "tokens": 1045,
            "cost": 0.0002328
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population BETWEEN 140000 AND 150000 GROUP BY T2.Name, LifeExpectancy HAVING LifeExpectancy < ( SELECT AVG(LifeExpectancy) FROM Country ) * 0.8"
    },
    {
        "sample_id": 7823,
        "pred_sql": "SELECT COUNT(DISTINCT country.code) AS number_of_countries FROM countrylanguage WHERE countrylanguage.language = 'Portuguese' AND countrylanguage.isofficial = 'T'",
        "retrieved": [
            7832
        ],
        "token_usage": {
            "tokens": 1007,
            "cost": 0.00021719999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT SUM(CASE WHEN Language = 'Portuguese' THEN 1 ELSE 0 END) FROM CountryLanguage"
    },
    {
        "sample_id": 7846,
        "pred_sql": "SELECT city.name, city.district FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.localname = 'Hajastan'",
        "retrieved": [
            7850
        ],
        "token_usage": {
            "tokens": 1031,
            "cost": 0.00022979999999999997
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name, T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = 'Hajastan'"
    },
    {
        "sample_id": 7843,
        "pred_sql": "SELECT country.surfacearea FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Sutton Coldfield';",
        "retrieved": [
            7892
        ],
        "token_usage": {
            "tokens": 973,
            "cost": 0.00020984999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.SurfaceArea FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Sutton Coldfield'"
    },
    {
        "sample_id": 7872,
        "pred_sql": "SELECT CAST(SUM(CASE WHEN countrylanguage.language = 'Chinese' THEN country.surfacearea ELSE 0 END) AS FLOAT) * 100 / SUM(country.surfacearea) AS percentage_surface_area FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'",
        "retrieved": [
            7851
        ],
        "token_usage": {
            "tokens": 1104,
            "cost": 0.00025334999999999995
        },
        "db_id": "world",
        "gold_sql": "SELECT CAST(SUM(IIF(T2.Language = 'Chinese', T1.SurfaceArea, 0)) AS REAL) * 100 / SUM(T1.SurfaceArea) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode"
    },
    {
        "sample_id": 7838,
        "pred_sql": "SELECT continent FROM country WHERE surfacearea = (SELECT MIN(surfacearea) FROM country)",
        "retrieved": [
            7892
        ],
        "token_usage": {
            "tokens": 920,
            "cost": 0.00017894999999999999
        },
        "db_id": "world",
        "gold_sql": "SELECT Continent FROM Country ORDER BY SurfaceArea LIMIT 1"
    },
    {
        "sample_id": 7905,
        "pred_sql": "SELECT DISTINCT city.district FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.surfacearea = (SELECT MIN(surfacearea) FROM country)",
        "retrieved": [
            7850
        ],
        "token_usage": {
            "tokens": 970,
            "cost": 0.00019544999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.SurfaceArea ASC LIMIT 1"
    },
    {
        "sample_id": 7874,
        "pred_sql": "SELECT name FROM country ORDER BY population DESC LIMIT 1;",
        "retrieved": [
            7847
        ],
        "token_usage": {
            "tokens": 983,
            "cost": 0.00020459999999999999
        },
        "db_id": "world",
        "gold_sql": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1"
    },
    {
        "sample_id": 7898,
        "pred_sql": "SELECT DISTINCT city.district FROM city INNER JOIN country ON city.countrycode = country.code WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country)",
        "retrieved": [
            7850
        ],
        "token_usage": {
            "tokens": 970,
            "cost": 0.00019544999999999998
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = ( SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1 )"
    },
    {
        "sample_id": 7910,
        "pred_sql": "SELECT country.lifeexpectancy FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Japanese' AND countrylanguage.isofficial = 'T'",
        "retrieved": [
            7828
        ],
        "token_usage": {
            "tokens": 1054,
            "cost": 0.0002247
        },
        "db_id": "world",
        "gold_sql": "SELECT AVG(T2.LifeExpectancy) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Japanese'"
    },
    {
        "sample_id": 7839,
        "pred_sql": "SELECT country.headofstate FROM country INNER JOIN city ON country.code = city.countrycode WHERE city.population = (SELECT MAX(population) FROM city)",
        "retrieved": [
            7850
        ],
        "token_usage": {
            "tokens": 953,
            "cost": 0.0001857
        },
        "db_id": "world",
        "gold_sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1"
    },
    {
        "sample_id": 7909,
        "pred_sql": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.surfacearea > 7000000;",
        "retrieved": [
            7892
        ],
        "token_usage": {
            "tokens": 951,
            "cost": 0.00019485
        },
        "db_id": "world",
        "gold_sql": "SELECT T2.Name, T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea > 7000000"
    },
    {
        "sample_id": 2098,
        "pred_sql": "SELECT country.longname FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE countrynotes.seriescode = 'SM.POP.TOTL' AND countrynotes.description = 'Estimates are derived from data on foreign-born population.'",
        "retrieved": [
            2150
        ],
        "token_usage": {
            "tokens": 1798,
            "cost": 0.0003498
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'"
    },
    {
        "sample_id": 2135,
        "pred_sql": "SELECT series.seriescode FROM series INNER JOIN indicators ON series.seriescode = indicators.indicatorcode WHERE indicators.year = '2005' AND series.source = 'International Monetary Fund, Balance of Payments Statistics Yearbook and data files'",
        "retrieved": [
            2158
        ],
        "token_usage": {
            "tokens": 1770,
            "cost": 0.00033705
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.Seriescode, T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year LIKE '%2005%' AND T2.Source LIKE 'International Monetary Fund%'"
    },
    {
        "sample_id": 2155,
        "pred_sql": "SELECT DISTINCT country.countrycode FROM country WHERE country.currencyunit = 'Australian dollar' AND country.incomegroup = 'Middle income'",
        "retrieved": [
            2160
        ],
        "token_usage": {
            "tokens": 1731,
            "cost": 0.00030825
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.CountryCode, T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Australian dollar' AND T1.IncomeGroup = 'Lower middle income'"
    },
    {
        "sample_id": 2163,
        "pred_sql": "SELECT country.tablename FROM country WHERE country.currencyunit = 'Euro'",
        "retrieved": [
            2196
        ],
        "token_usage": {
            "tokens": 1659,
            "cost": 0.00028664999999999995
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'"
    },
    {
        "sample_id": 2199,
        "pred_sql": "SELECT country.shortname, (SELECT MAX(value) FROM indicators WHERE indicatorname = 'CO2 emissions from transport') / (SELECT MIN(value) FROM indicators WHERE indicatorname = 'CO2 emissions from transport') AS proportion FROM country JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.indicatorname = 'CO2 emissions from transport' ORDER BY proportion DESC LIMIT 1;",
        "retrieved": [
            2185
        ],
        "token_usage": {
            "tokens": 1807,
            "cost": 0.00034395
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'CO2 emissions FROM transport%' ORDER BY Value DESC LIMIT 1"
    },
    {
        "sample_id": 2188,
        "pred_sql": "SELECT country.shortname FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.value = 'Estimate'",
        "retrieved": [
            2146
        ],
        "token_usage": {
            "tokens": 1787,
            "cost": 0.00032969999999999994
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are based on regression.'"
    },
    {
        "sample_id": 2100,
        "pred_sql": "SELECT year FROM footnotes WHERE countrycode = (SELECT countrycode FROM country WHERE shortname = 'Aruba') AND seriescode = 'AG.LND.FRST.K2';",
        "retrieved": [
            2134
        ],
        "token_usage": {
            "tokens": 1775,
            "cost": 0.00033285
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'"
    },
    {
        "sample_id": 2240,
        "pred_sql": "SELECT country.shortname, countrynotes.description FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE countrynotes.seriescode = 'BX.KLT.DINV.CD.WD'",
        "retrieved": [
            2093
        ],
        "token_usage": {
            "tokens": 1774,
            "cost": 0.00033495
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Seriescode = 'BX.KLT.DINV.CD.WD'"
    },
    {
        "sample_id": 2124,
        "pred_sql": "SELECT DISTINCT series.source FROM footnotes AS T1 INNER JOIN series AS T2 ON T1.seriescode = T2.seriescode INNER JOIN country AS T3 ON T1.countrycode = T3.countrycode WHERE T3.region = 'North America' AND T2.indicatorname = 'children who finished primary school education'",
        "retrieved": [
            2122
        ],
        "token_usage": {
            "tokens": 1809,
            "cost": 0.00035099999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T1.Region = 'North America' AND T2.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'"
    },
    {
        "sample_id": 2138,
        "pred_sql": "SELECT DISTINCT indicators.indicatorname FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE country.region = 'Arab World' AND indicators.value > 50 AND indicators.year = '1960';",
        "retrieved": [
            2237
        ],
        "token_usage": {
            "tokens": 1914,
            "cost": 0.0003644999999999999
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50"
    },
    {
        "sample_id": 2182,
        "pred_sql": "SELECT shortname, longname FROM country WHERE vitalregistrationcomplete = 'Yes'",
        "retrieved": [
            2213
        ],
        "token_usage": {
            "tokens": 1814,
            "cost": 0.00034185
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes'"
    },
    {
        "sample_id": 2149,
        "pred_sql": "SELECT country.seriescode FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE country.currencyunit = 'Euro'",
        "retrieved": [
            2158
        ],
        "token_usage": {
            "tokens": 1757,
            "cost": 0.0003342
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Euro'"
    },
    {
        "sample_id": 2165,
        "pred_sql": "SELECT shortname FROM country WHERE region = 'Asia' AND incomegroup = 'High income'",
        "retrieved": [
            2127
        ],
        "token_usage": {
            "tokens": 1671,
            "cost": 0.00029475
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT CountryCode, Region FROM Country WHERE (IncomeGroup = 'High income: OECD' OR IncomeGroup = 'High income: nonOECD') AND Region LIKE '%Asia%'"
    },
    {
        "sample_id": 2154,
        "pred_sql": "SELECT country.countrycode, countrynotes.seriescode FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode WHERE country.incomegroup = 'Low income' AND country.region = 'Latin America & Caribbean'",
        "retrieved": [
            2150
        ],
        "token_usage": {
            "tokens": 1788,
            "cost": 0.00034964999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.SeriesCode, T2.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND t1.incomegroup = 'Low income'"
    },
    {
        "sample_id": 2178,
        "pred_sql": "SELECT country.shortname, indicators.value FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE country.incomegroup = 'Low income' AND indicators.indicatorname = 'Fertility rate' ORDER BY indicators.value ASC LIMIT 1;",
        "retrieved": [
            2105
        ],
        "token_usage": {
            "tokens": 1816,
            "cost": 0.00034935
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY T2.Value LIMIT 1"
    },
    {
        "sample_id": 2143,
        "pred_sql": "SELECT indicators.indicatorname, MIN(indicators.value) AS lowest_value \nFROM indicators \nWHERE indicators.indicatorname LIKE '%Weighted average%' \nGROUP BY indicators.indicatorname \nORDER BY lowest_value ASC \nLIMIT 1;",
        "retrieved": [
            2146
        ],
        "token_usage": {
            "tokens": 1852,
            "cost": 0.0003669
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'"
    },
    {
        "sample_id": 2177,
        "pred_sql": "SELECT series.seriescode, country.wb2code FROM country INNER JOIN countrynotes ON country.countrycode = countrynotes.countrycode INNER JOIN series ON countrynotes.seriescode = series.seriescode WHERE countrynotes.description = 'Data sources : Eurostat'",
        "retrieved": [
            2093
        ],
        "token_usage": {
            "tokens": 1816,
            "cost": 0.0003547499999999999
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.seriescode, T1.Wb2Code FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data sources : Eurostat'"
    },
    {
        "sample_id": 2218,
        "pred_sql": "SELECT country.longname FROM country WHERE country.currencyunit = 'Danish krone' AND country.region = 'Europe & Central Asia';",
        "retrieved": [
            2196
        ],
        "token_usage": {
            "tokens": 1726,
            "cost": 0.00032145
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(longname) FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone' UNION SELECT longname FROM country WHERE currencyunit = 'Danish krone' AND region = 'Europe & Central Asia'"
    },
    {
        "sample_id": 2164,
        "pred_sql": "SELECT LongName FROM country WHERE specialnotes IS NULL;",
        "retrieved": [
            2213
        ],
        "token_usage": {
            "tokens": 1795,
            "cost": 0.00032865
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes = '' UNION SELECT longname FROM country WHERE specialnotes = ''"
    },
    {
        "sample_id": 2198,
        "pred_sql": "SELECT country.longname FROM country WHERE country.systemoftrade = 'special' LIMIT 2;",
        "retrieved": [
            2196
        ],
        "token_usage": {
            "tokens": 1697,
            "cost": 0.0003099
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2"
    },
    {
        "sample_id": 2172,
        "pred_sql": "SELECT country.longname FROM country JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.year = '1980'",
        "retrieved": [
            2197
        ],
        "token_usage": {
            "tokens": 1720,
            "cost": 0.00031965
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1980 AND T2.IndicatorName IS NOT NULL"
    },
    {
        "sample_id": 2112,
        "pred_sql": "SELECT c.shortname, MAX(i.value) AS highest_value, i.year FROM indicators i JOIN country c ON i.countrycode = c.countrycode WHERE i.indicatorname = 'CO2 emissions (kt)' AND c.region = 'Latin America & Caribbean' GROUP BY c.shortname ORDER BY AVG(i.value) DESC LIMIT 3;",
        "retrieved": [
            2120
        ],
        "token_usage": {
            "tokens": 1815,
            "cost": 0.00036044999999999995
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.CountryCode, T1.Year, T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Latin America & Caribbean' AND T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year > 1965 AND T1.Year < 1980 ORDER BY T1.Value DESC LIMIT 3"
    },
    {
        "sample_id": 2230,
        "pred_sql": "SELECT AVG(value) AS average_passengers, c.systemoftrade FROM indicators i JOIN country c ON i.countrycode = c.countrycode WHERE i.indicatorname = 'Passengers carried via air transport' AND i.year BETWEEN '1970' AND '1980' AND c.shortname = 'Bulgaria' GROUP BY c.systemoftrade;",
        "retrieved": [
            2185
        ],
        "token_usage": {
            "tokens": 1852,
            "cost": 0.00036284999999999996
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT AVG(T1.Value), T2.SystemOfTrade FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Air transport, passengers carried' AND T1.Year >= 1970 AND T1.Year < 1981 AND T1.CountryName = 'Bulgaria'"
    },
    {
        "sample_id": 2171,
        "pred_sql": "SELECT country.tablename, indicators.year FROM indicators JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'Air transport, passengers carried';",
        "retrieved": [
            2120
        ],
        "token_usage": {
            "tokens": 1739,
            "cost": 0.00032114999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T2.Year, T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Air transport, passengers carried'"
    },
    {
        "sample_id": 2108,
        "pred_sql": "SELECT AVG(value) AS average_value FROM indicators INNER JOIN country ON indicators.countrycode = country.countrycode WHERE country.shortname = 'Algeria' AND indicators.indicatorname = 'Adjusted net enrolment rate, primary, both sexes (%)' AND indicators.year BETWEEN 1975 AND 1980;",
        "retrieved": [
            2237
        ],
        "token_usage": {
            "tokens": 1933,
            "cost": 0.0003714
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'"
    },
    {
        "sample_id": 2242,
        "pred_sql": "SELECT COUNT(DISTINCT country.countrycode) FROM indicators INNER JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'Stocks traded, turnover ratio of domestic shares'",
        "retrieved": [
            2228
        ],
        "token_usage": {
            "tokens": 1846,
            "cost": 0.00036554999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(T1.Countrycode)  FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T2.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'"
    },
    {
        "sample_id": 2221,
        "pred_sql": "SELECT indicators.value FROM country AS c INNER JOIN indicators AS i ON c.countrycode = i.countrycode WHERE c.shortname = 'Italy' AND i.indicatorname = 'Agricultural land area (sq. km)' AND i.year = 1968;",
        "retrieved": [
            2237
        ],
        "token_usage": {
            "tokens": 1919,
            "cost": 0.00036884999999999994
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT Value FROM Indicators WHERE IndicatorName = 'Agricultural land (sq. km)' AND Year = 1968 AND CountryName = 'Italy'"
    },
    {
        "sample_id": 2191,
        "pred_sql": "SELECT COUNT(country.countrycode) FROM country WHERE country.systemofnationalaccounts = '1968'",
        "retrieved": [
            2119
        ],
        "token_usage": {
            "tokens": 1740,
            "cost": 0.0003086999999999999
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT COUNT(CountryCode)  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.'"
    },
    {
        "sample_id": 2214,
        "pred_sql": "SELECT country.shortname FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE country.externaldebtreportingstatus = 'Actual' AND indicators.year = '1980' AND indicators.indicatorname = 'Land under cereal production' AND indicators.value = '3018500';",
        "retrieved": [
            2119
        ],
        "token_usage": {
            "tokens": 1841,
            "cost": 0.00036435
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT T2.CountryCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName LIKE 'Land under cereal production%' AND T1.Value = 3018500 AND T1.Year = 1980 AND T2.ExternalDebtReportingStatus = 'Actual'"
    },
    {
        "sample_id": 2187,
        "pred_sql": "SELECT shortname FROM country WHERE lendingcategory = 'Official Aid'",
        "retrieved": [
            2090
        ],
        "token_usage": {
            "tokens": 1676,
            "cost": 0.00029414999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.'"
    },
    {
        "sample_id": 2157,
        "pred_sql": "SELECT country.countrycode, country.shortname FROM country WHERE country.currencyunit = 'Euro' AND country.incomegroup = 'High income';",
        "retrieved": [
            2180
        ],
        "token_usage": {
            "tokens": 1791,
            "cost": 0.00032985
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')"
    },
    {
        "sample_id": 2166,
        "pred_sql": "SELECT longname FROM country WHERE nationalaccountsbaseyear < '1980'",
        "retrieved": [
            2150
        ],
        "token_usage": {
            "tokens": 1715,
            "cost": 0.00030764999999999997
        },
        "db_id": "world_development_indicators",
        "gold_sql": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''"
    }
]