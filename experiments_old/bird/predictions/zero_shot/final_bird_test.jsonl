{"sample_id": 8773, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(owner_state) FROM businesses WHERE owner_state = 'CA'", "pred_sql": "SELECT COUNT(DISTINCT owner_name) AS owner_count FROM businesses WHERE owner_state = 'California';"}
{"sample_id": 8813, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.business_id FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.tax_code = 'H24' AND T1.type = 'Complaint' GROUP BY T1.business_id HAVING COUNT(T1.business_id) > 5 ) T3", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS establishment_count\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nWHERE b.tax_code = 'H24' AND i.type = 'complaint' AND i.score < 5;"}
{"sample_id": 8798, "db_id": "food_inspection", "gold_sql": "SELECT T2.address FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk' GROUP BY T2.address ORDER BY COUNT(T1.business_id) DESC LIMIT 1", "pred_sql": "SELECT b.address FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low' GROUP BY b.business_id ORDER BY COUNT(v.violation_type_id) DESC LIMIT 1;"}
{"sample_id": 8804, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(business_id) FROM businesses WHERE city = 'HAYWARD'", "pred_sql": "SELECT COUNT(*) AS number_of_eateries FROM businesses WHERE city = 'Hayward';"}
{"sample_id": 8853, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.type = 'Routine - Unscheduled'", "pred_sql": "SELECT COUNT(v.business_id) AS unscheduled_violations_count\nFROM violations v\nJOIN inspections i ON v.business_id = i.business_id\nWHERE v.date LIKE '2016%' AND i.type = 'unscheduled';"}
{"sample_id": 8797, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(T1.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Soma Restaurant And Bar' AND T1.type = 'Routine - Unscheduled'", "pred_sql": "SELECT COUNT(*) AS unscheduled_inspections_count FROM inspections WHERE business_id = (SELECT business_id FROM businesses WHERE name = 'Soma Restaurant And Bar') AND type = 'unscheduled';"}
{"sample_id": 8847, "db_id": "food_inspection", "gold_sql": "SELECT DISTINCT T3.name FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T1.\"date\" = '2016-05-27' AND T1.violation_type_id = 103157 AND T2.type = 'Routine - Unscheduled'", "pred_sql": "SELECT b.name \nFROM businesses b \nJOIN violations v ON b.business_id = v.business_id \nJOIN inspections i ON b.business_id = i.business_id \nWHERE v.violation_type_id = '103157' \nAND v.date = '2016-05-27' \nAND i.type = 'unscheduled';"}
{"sample_id": 8810, "db_id": "food_inspection", "gold_sql": "SELECT T2.city FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T1.risk_category = 'High Risk' GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "pred_sql": "SELECT b.city, COUNT(*) AS establishment_count\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.date LIKE '2016%'\nGROUP BY b.city\nORDER BY establishment_count DESC\nLIMIT 1;"}
{"sample_id": 8833, "db_id": "food_inspection", "gold_sql": "SELECT DISTINCT T2.name, T2.city, T2.tax_code FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.\"date\" = '2014-06-03' LIMIT 5", "pred_sql": "SELECT b.name, b.city, b.tax_code \nFROM businesses b \nJOIN violations v ON b.business_id = v.business_id \nWHERE v.date = '2014-06-03' AND v.risk_category = 'High' \nLIMIT 5;"}
{"sample_id": 8792, "db_id": "food_inspection", "gold_sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1", "pred_sql": "SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'High' GROUP BY b.business_id ORDER BY COUNT(v.violation_type_id) DESC LIMIT 1;"}
{"sample_id": 8817, "db_id": "food_inspection", "gold_sql": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") BETWEEN '2014' AND '2016' AND T2.owner_name = 'Yiu Tim Chan' AND T2.address = '808 Pacific Ave' AND T2.city = 'San Francisco'", "pred_sql": "SELECT AVG(inspections.score) AS average_score \nFROM businesses \nJOIN inspections ON businesses.business_id = inspections.business_id \nWHERE businesses.owner_name = 'Yiu Tim Chan' \nAND businesses.address = '808 Pacific Ave' \nAND businesses.city = 'San Francisco' \nAND inspections.date BETWEEN '2014-01-01' AND '2016-12-31';"}
{"sample_id": 8824, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(DISTINCT business_id) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Unpermitted food facility'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS low_risk_eateries_count\nFROM businesses b\nJOIN violations v ON b.business_id = v.business_id\nWHERE v.risk_category = 'Low' AND v.description LIKE '%unpermitted food facility%';"}
{"sample_id": 8777, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.\"date\") = '2016' AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS restaurant_count \nFROM businesses b \nJOIN inspections i ON b.business_id = i.business_id \nWHERE b.city = 'San Francisco' AND strftime('%Y', i.date) = '2016';"}
{"sample_id": 8830, "db_id": "food_inspection", "gold_sql": "SELECT DISTINCT T2.business_id, T2.name, T2.address FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.date = '2016-07-30'", "pred_sql": "SELECT b.business_id, b.name, b.address FROM businesses b JOIN inspections i ON b.business_id = i.business_id WHERE i.date = '2016-07-30';"}
{"sample_id": 8793, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(DISTINCT T1.violation_type_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.name = 'Stacks Restaurant' AND T1.\"date\" = '2016-10-04'", "pred_sql": "SELECT COUNT(DISTINCT violation_type_id) AS violation_count FROM violations JOIN businesses ON violations.business_id = businesses.business_id WHERE businesses.name = 'Stacks Restaurant' AND violations.date = '2016-10-04';"}
{"sample_id": 8855, "db_id": "food_inspection", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.risk_category = 'Low Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.risk_category) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T2.score < 95 AND T3.postal_code = 94110", "pred_sql": "SELECT (COUNT(CASE WHEN v.risk_category = 'Low' THEN 1 END) * 100.0 / COUNT(*)) AS low_risk_percentage\nFROM businesses b\nJOIN inspections i ON b.business_id = i.business_id\nLEFT JOIN violations v ON b.business_id = v.business_id\nWHERE i.score < 95 AND b.postal_code = '94110';"}
{"sample_id": 8799, "db_id": "food_inspection", "gold_sql": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.\"date\" = ( SELECT MIN(\"date\") FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'", "pred_sql": "SELECT b.name \nFROM businesses b \nJOIN violations v ON b.business_id = v.business_id \nWHERE v.description = 'Permit license or inspection report not posted' \nAND v.risk_category = 'Low' \nORDER BY v.date ASC \nLIMIT 1;"}
{"sample_id": 8774, "db_id": "food_inspection", "gold_sql": "SELECT COUNT(score) FROM inspections WHERE score = 100", "pred_sql": "SELECT COUNT(*) AS total_restaurants FROM inspections WHERE score = 100;"}
{"sample_id": 1889, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(T1.Venue_Name) FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Pune'", "pred_sql": "SELECT COUNT(*) AS total_venues FROM venue WHERE city_id = (SELECT city_id FROM city WHERE city_name = 'Pune');"}
{"sample_id": 1936, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Venue_Name, T3.City_Name FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id INNER JOIN City AS T3 ON T2.City_Id = T3.City_Id WHERE T1.Match_Id = '336005'", "pred_sql": "SELECT venue.venue_name, city.city_name \nFROM match \nJOIN venue ON match.venue_id = venue.venue_id \nJOIN city ON venue.city_id = city.city_id \nWHERE match.match_id = 336005;"}
{"sample_id": 1940, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Match_Date, T4.Role_Desc FROM \"Match\" AS T1 INNER JOIN Player_Match AS T2 ON T1.Match_Id = T2.Match_Id INNER JOIN Player AS T3 ON T2.Player_Id = T3.Player_Id INNER JOIN Rolee AS T4 ON T2.Role_Id = T4.Role_Id ORDER BY T3.DOB DESC LIMIT 1", "pred_sql": "SELECT p.player_name, pm.role_id, m.match_date \nFROM player p \nJOIN player_match pm ON p.player_id = pm.player_id \nJOIN match m ON pm.match_id = m.match_id \nWHERE p.dob = (SELECT MAX(dob) FROM player) \nORDER BY m.match_date ASC \nLIMIT 1;"}
{"sample_id": 1902, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T1.Team_2 = T1.Match_Winner THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Team_1 = T1.Toss_Winner", "pred_sql": "SELECT COUNT(DISTINCT m.venue_id) AS venue_count\nFROM match m\nWHERE m.toss_winner = m.team_2 AND m.match_winner != m.team_2;"}
{"sample_id": 1863, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T2.Player_Name = 'Yuvraj Singh' THEN 1 ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match", "pred_sql": "SELECT COUNT(*) AS man_of_the_match_count FROM match WHERE man_of_the_match = (SELECT player_id FROM player WHERE player_name = 'Yuvraj Singh')"}
{"sample_id": 2006, "db_id": "soccer_2016", "gold_sql": "SELECT Country_id FROM City WHERE City_Name = 'East London'", "pred_sql": "SELECT country_id FROM city WHERE city_name = 'East London';"}
{"sample_id": 1944, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T1.Match_Winner = T2.Team_Id WHERE T2.Team_Name = 'Sunrisers Hyderabad'", "pred_sql": "SELECT match_date FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Sunrisers Hyderabad') ORDER BY match_date ASC LIMIT 1;"}
{"sample_id": 2042, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Player_Name FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T3.Role_Desc = 'Captain' GROUP BY T2.Player_Name", "pred_sql": "SELECT player.player_name FROM player JOIN player_match ON player.player_id = player_match.player_id WHERE player_match.role_id = (SELECT role_id FROM rolee WHERE role_desc = 'captain')"}
{"sample_id": 2026, "db_id": "soccer_2016", "gold_sql": "SELECT T1.DOB, T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T2.Role_Id = T3.Role_Id WHERE T1.Player_Name = 'R Dravid' GROUP BY T1.DOB, T3.Role_Desc", "pred_sql": "SELECT dob, role_desc FROM player JOIN player_match ON player.player_id = player_match.player_id JOIN rolee ON player_match.role_id = rolee.role_id WHERE player_name = 'R Dravid';"}
{"sample_id": 1788, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE SUBSTR(Match_Date, 1, 4) = '2008' AND SUBSTR(Match_Date, 7, 1) = '5'", "pred_sql": "SELECT COUNT(*) AS total_matches FROM match WHERE match_date BETWEEN '2008-05-01' AND '2008-05-31';"}
{"sample_id": 1883, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Venue_Name FROM Match AS T1 INNER JOIN Venue AS T2 ON T2.Venue_Id = T1.Venue_Id WHERE T1.Season_Id = 2 GROUP BY T2.Venue_Name", "pred_sql": "SELECT venue_name FROM venue INNER JOIN match ON venue.venue_id = match.venue_id WHERE match.season_id = 2;"}
{"sample_id": 2013, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Batsman_Scored AS T3 ON T2.Match_ID = T3.Match_ID WHERE T3.Runs_Scored < 3 GROUP BY T1.Player_Name", "pred_sql": "SELECT player.player_name FROM player JOIN batsman_scored ON player.player_id = batsman_scored.striker WHERE batsman_scored.runs_scored < 3;"}
{"sample_id": 1954, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Team_Name FROM team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T2.Season_Id = 1 ORDER BY T2.Match_Date LIMIT 1", "pred_sql": "SELECT team.team_name FROM match JOIN team ON match.match_winner = team.team_id ORDER BY match.match_date ASC LIMIT 1;"}
{"sample_id": 1988, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'", "pred_sql": "SELECT team_1, team_2 FROM match WHERE win_margin = 38 AND match_date = '2009-04-30';"}
{"sample_id": 1947, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 16", "pred_sql": "SELECT SUM(batsman_scored.runs_scored) * 6.0 / 16 AS run_rate, player.player_name AS man_of_the_match\nFROM batsman_scored\nJOIN match ON batsman_scored.match_id = match.match_id\nJOIN player ON match.man_of_the_match = player.player_id\nWHERE batsman_scored.match_id = 335999 AND batsman_scored.innings_no = 1\nGROUP BY match.match_id;"}
{"sample_id": 1934, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Match_Id, T1.Match_Date FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T2.Venue_Name = 'Kingsmead'", "pred_sql": "SELECT m.match_id, m.match_date \nFROM match m \nJOIN venue v ON m.venue_id = v.venue_id \nWHERE v.venue_name = 'Kingsmead' \nAND m.match_date IN (\n    SELECT match_date \n    FROM match \n    WHERE venue_id = v.venue_id \n    ORDER BY match_date \n    LIMIT 3\n) \nGROUP BY m.match_date \nHAVING COUNT(m.match_id) = 3;"}
{"sample_id": 1878, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Toss_Winner WHERE T1.Match_Id BETWEEN 336010 AND 336020", "pred_sql": "SELECT team.team_name \nFROM match \nJOIN team ON match.toss_winner = team.team_id \nWHERE match.match_id BETWEEN 336010 AND 336020;"}
{"sample_id": 1872, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Venue_Name = 'Wankhede Stadium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Match_Id) FROM City AS T1 INNER JOIN Venue AS T2 ON T2.City_Id = T1.City_Id INNER JOIN Match AS T3 ON T3.Venue_Id = T2.Venue_Id WHERE T1.City_Name = 'Mumbai'", "pred_sql": "SELECT (COUNT(CASE WHEN venue.venue_name = 'Wankhede Stadium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM match JOIN venue ON match.venue_id = venue.venue_id JOIN city ON venue.city_id = city.city_id WHERE city.city_name = 'Mumbai';"}
{"sample_id": 1840, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN Player_Id = 2 THEN 1 ELSE 0 END) FROM Player_Match", "pred_sql": "SELECT COUNT(*) AS matches_played FROM player_match WHERE player_id = '2';"}
{"sample_id": 1866, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Match_Winner = 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Match_Id) FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 INNER JOIN Team AS T3 ON T3.Team_Id = T1.Team_2 WHERE T2.Team_Name = 'Chennai Super Kings' OR T3.Team_Name = 'Chennai Super Kings'", "pred_sql": "SELECT team.team_name, COUNT(CASE WHEN match.match_winner = team.team_id THEN 1 END) * 100.0 / COUNT(*) AS win_rate\nFROM match\nJOIN team ON match.team_1 = team.team_id OR match.team_2 = team.team_id\nWHERE team.team_name = 'Chennai Super Kings'\nGROUP BY team.team_name;"}
{"sample_id": 1993, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(T1.Match_Id) FROM Player_Match AS T1 INNER JOIN Player AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Rolee AS T3 ON T1.Role_Id = T3.Role_Id WHERE T2.Player_Name = 'K Goel' AND T3.Role_Id = 3", "pred_sql": "SELECT COUNT(*) AS times_played FROM player_match WHERE player_id = (SELECT player_id FROM player WHERE player_name = 'K Goel') AND role_id NOT IN (SELECT role_id FROM rolee WHERE role_desc != 'player');"}
{"sample_id": 1946, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.Toss_Name = 'bat' THEN T3.Runs_Scored ELSE NULL END) AS REAL) / SUM(CASE WHEN T1.Toss_Name = 'field' THEN 1 ELSE 0 END) FROM Toss_Decision AS T1 INNER JOIN Match AS T2 ON T1.Toss_Id = T2.Toss_Decide INNER JOIN Batsman_Scored AS T3 ON T2.Match_Id = T3.Match_Id WHERE T2.Match_Id = 335987 AND T2.Match_Date = '2008-04-18' GROUP BY T3.Over_Id HAVING COUNT(T1.Toss_Name = 'field') = 17", "pred_sql": "SELECT SUM(batsman_scored.runs_scored) * 6.0 / 17 AS run_rate\nFROM batsman_scored\nWHERE batsman_scored.match_id = 335987 AND batsman_scored.innings_no = 1;"}
{"sample_id": 1832, "db_id": "soccer_2016", "gold_sql": "SELECT T3.Venue_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 INNER JOIN Venue AS T3 ON T2.Venue_Id = T3.Venue_Id WHERE T1.Team_Name = 'Kolkata Knight Riders' GROUP BY T3.Venue_Id ORDER BY COUNT(T3.Venue_Id) DESC LIMIT 1", "pred_sql": "SELECT v.venue_name, COUNT(m.match_id) AS match_count\nFROM match m\nJOIN team t ON m.team_1 = t.team_id\nJOIN venue v ON m.venue_id = v.venue_id\nWHERE t.team_name = 'Kolkata Knight Riders'\nGROUP BY v.venue_name\nORDER BY match_count DESC\nLIMIT 1;"}
{"sample_id": 1907, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Player_Name, T4.Country_Name FROM Player AS T1 INNER JOIN Wicket_Taken AS T2 ON T1.Player_Id = T2.Fielders INNER JOIN Out_Type AS T3 ON T2.Kind_Out = T3.Out_Id INNER JOIN Country AS T4 ON T1.Country_Name = T4.Country_Id GROUP BY T1.Player_Name ORDER BY COUNT(T3.Out_Name) ASC", "pred_sql": "SELECT p.player_name, c.country_name\nFROM player p\nJOIN player_match pm ON p.player_id = pm.player_id\nJOIN wicket_taken w ON pm.match_id = w.match_id AND pm.player_id = w.player_out\nJOIN country c ON p.country_name = c.country_id\nGROUP BY p.player_id\nHAVING COUNT(w.player_out) > (SELECT AVG(catch_count) FROM (SELECT COUNT(w2.player_out) AS catch_count\nFROM player_match pm2\nJOIN wicket_taken w2 ON pm2.match_id = w2.match_id AND pm2.player_id = w2.player_out\nGROUP BY pm2.player_id))\nORDER BY COUNT(w.player_out) ASC;"}
{"sample_id": 1862, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T1.Innings_No = 2 THEN 1 ELSE 0 END) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T2.Out_Name = 'stumped'", "pred_sql": "SELECT COUNT(*) AS stumped_players_count \nFROM wicket_taken \nWHERE kind_out = (SELECT out_id FROM out_type WHERE out_name = 'Stumped') \nAND innings_no = 2;"}
{"sample_id": 1931, "db_id": "soccer_2016", "gold_sql": "SELECT Man_of_the_Series FROM Season WHERE 2011 < Season_Year < 2015", "pred_sql": "SELECT man_of_the_series FROM season WHERE season_year BETWEEN 2011 AND 2015;"}
{"sample_id": 1827, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match GROUP BY T2.Man_of_the_Match ORDER BY COUNT(T2.Man_of_the_Match) DESC LIMIT 1", "pred_sql": "SELECT player.player_name, COUNT(match.man_of_the_match) AS outstanding_awards\nFROM match\nJOIN player ON match.man_of_the_match = player.player_id\nGROUP BY player.player_id\nORDER BY outstanding_awards DESC\nLIMIT 1;"}
{"sample_id": 1874, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'", "pred_sql": "SELECT (COUNT(CASE WHEN toss_decide = 'bowl' THEN 1 END) * 100.0 / COUNT(*)) AS percent_bowl_first\nFROM match\nWHERE match.match_date BETWEEN '2010-01-01' AND '2016-12-31';"}
{"sample_id": 1965, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN Innings_No = 1 THEN 1 ELSE 0 END) AS IN1 , SUM(CASE WHEN Innings_No = 2 THEN 1 ELSE 0 END) AS IN2 FROM Ball_by_Ball WHERE Match_Id = 336011", "pred_sql": "SELECT innings_no, COUNT(*) AS total_overs FROM ball_by_ball WHERE match_id = 336011 GROUP BY innings_no;"}
{"sample_id": 2000, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Player_Name) FROM Player WHERE Bowling_skill > 2", "pred_sql": "SELECT COUNT(*) AS player_count FROM player WHERE bowling_skill > 2;"}
{"sample_id": 2029, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Win_By AS T4 ON T2.Win_Type = T4.Win_Id WHERE T2.Match_Id = '335993' GROUP BY T1.Team_Name", "pred_sql": "SELECT team.team_name FROM match JOIN win_by ON match.win_type = win_by.win_id WHERE match.match_id = 335993 AND win_by.win_type = 'wickets';"}
{"sample_id": 1922, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Umpire_Name FROM Umpire AS T1 INNER JOIN Country AS T2 ON T1.Umpire_Country = T2.Country_Id WHERE T2.Country_Name = 'New Zealand'", "pred_sql": "SELECT umpire_name FROM umpire WHERE umpire_country = (SELECT country_id FROM country WHERE country_name = 'New Zealand')"}
{"sample_id": 1955, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'U.A.E' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN country AS T2 ON T1.Country_id = T2.Country_id", "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'U.A.E')"}
{"sample_id": 1888, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(T2.Match_Winner) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner WHERE T1.Team_Name = 'Deccan Chargers'", "pred_sql": "SELECT COUNT(*) AS total_wins FROM match WHERE match_winner = (SELECT team_id FROM team WHERE team_name = 'Deccan Chargers')"}
{"sample_id": 1819, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T2.Venue_Name = 'M Chinnaswamy Stadium' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Venue_Name = 'Maharashtra Cricket Association Stadium' THEN 1 ELSE 0 END) FROM \"Match\" AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id", "pred_sql": "SELECT COUNT(CASE WHEN venue.venue_name = 'M Chinnaswamy Stadium' THEN 1 END) AS chinnaswamy_count, COUNT(CASE WHEN venue.venue_name = 'Maharashtra Cricket Association Stadium' THEN 1 END) AS maharashtra_count FROM match JOIN venue ON match.venue_id = venue.venue_id;"}
{"sample_id": 2003, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Match_Id) FROM Match WHERE Match_date LIKE '2008-04%'", "pred_sql": "SELECT COUNT(*) AS total_matches FROM match WHERE match_date BETWEEN '2008-04-01' AND '2008-04-30';"}
{"sample_id": 1831, "db_id": "soccer_2016", "gold_sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT Match_Winner FROM \"Match\" WHERE season_Id = 1 GROUP BY Match_Winner ORDER BY COUNT(Match_Winner) DESC LIMIT 1 )", "pred_sql": "SELECT team.team_name, COUNT(match.match_id) AS match_wins\nFROM match\nJOIN team ON match.match_winner = team.team_id\nWHERE match.season_id = 1\nGROUP BY team.team_name\nORDER BY match_wins DESC\nLIMIT 1;"}
{"sample_id": 1797, "db_id": "soccer_2016", "gold_sql": "SELECT MIN(T1.DOB) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id WHERE T2.Bowling_Skill = 'Legbreak'", "pred_sql": "SELECT MAX(p.dob) AS oldest_bowler_birthdate\nFROM player p\nJOIN bowling_style b ON p.bowling_skill = b.bowling_id\nWHERE b.bowling_skill = 'Legbreak';"}
{"sample_id": 1818, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T1.Country_Id = T2.Country_Id", "pred_sql": "SELECT COUNT(*) AS indian_cities_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'India');\n\nSELECT COUNT(*) AS south_african_cities_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa');\n\nSELECT (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'India')) / (SELECT COUNT(*) FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa')) AS ratio;"}
{"sample_id": 1952, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(Match_Id) FROM \"Match\" GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5", "pred_sql": "SELECT player_id, COUNT(*) AS man_of_the_match_count\nFROM match\nWHERE man_of_the_match IS NOT NULL\nGROUP BY player_id\nHAVING man_of_the_match_count >= 5;"}
{"sample_id": 1881, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Team_Name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Match_Winner WHERE T1.Match_Id = 336000", "pred_sql": "SELECT team.team_name FROM match JOIN team ON match.match_winner = team.team_id WHERE match.match_id = 336000;"}
{"sample_id": 2025, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(T.Season_Year) FROM ( SELECT T4.Season_Year FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Pune Warriors' GROUP BY T4.Season_Year ) T", "pred_sql": "SELECT COUNT(DISTINCT season_id) AS seasons_participated FROM match WHERE team_1 = (SELECT team_id FROM team WHERE team_name = 'Pune Warriors') OR team_2 = (SELECT team_id FROM team WHERE team_name = 'Pune Warriors');"}
{"sample_id": 1896, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Country_Id, COUNT(T1.Umpire_Id) FROM Umpire AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Umpire_Country GROUP BY T2.Country_Id ORDER BY COUNT(T1.Umpire_Id) DESC LIMIT 1", "pred_sql": "SELECT country.country_name, COUNT(umpire.umpire_id) AS umpire_count\nFROM umpire\nJOIN country ON umpire.umpire_country = country.country_id\nGROUP BY country.country_name\nORDER BY umpire_count DESC\nLIMIT 1;"}
{"sample_id": 1868, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Player_Name, T1.DOB FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T2.Bowling_Id = T1.Bowling_skill WHERE T2.Bowling_skill = 'Left-arm fast'", "pred_sql": "SELECT player.player_name, player.dob \nFROM player \nJOIN bowling_style ON player.bowling_skill = bowling_style.bowling_id \nWHERE bowling_style.bowling_skill = 'left-arm fast';"}
{"sample_id": 2043, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Venue_Name, T3.Team_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id INNER JOIN Team AS T3 ON T2.match_winner = T3.Team_Id WHERE T2.Match_Id = 392194", "pred_sql": "SELECT venue.venue_name, team.team_name \nFROM match \nJOIN venue ON match.venue_id = venue.venue_id \nJOIN team ON match.match_winner = team.team_id \nWHERE match.match_id = 392194;"}
{"sample_id": 2008, "db_id": "soccer_2016", "gold_sql": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_hand = 'Left-hand bat'", "pred_sql": "SELECT player_name FROM player JOIN batting_style ON player.batting_hand = batting_style.batting_id WHERE batting_hand = 'left';"}
{"sample_id": 1804, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Batting_Hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE SUBSTR(T1.DOB, 1, 4) > 1985", "pred_sql": "SELECT (COUNT(CASE WHEN b.batting_hand = 'right' THEN 1 END) * 100.0 / COUNT(*)) AS right_hand_percentage\nFROM player p\nJOIN batting_style b ON p.batting_hand = b.batting_id\nWHERE p.dob > '1985-01-01';"}
{"sample_id": 1807, "db_id": "soccer_2016", "gold_sql": "SELECT T2.Player_Name FROM Ball_by_Ball AS T1 INNER JOIN Player AS T2 ON T1.Striker = T2.Player_Id WHERE T1.Match_Id = 419169 AND T1.Over_Id = 3 AND T1.Ball_Id = 2 AND T1.Innings_No = 2", "pred_sql": "SELECT player.player_name \nFROM ball_by_ball \nJOIN player ON ball_by_ball.striker = player.player_id \nWHERE ball_by_ball.match_id = 419169 \nAND ball_by_ball.over_id = 3 \nAND ball_by_ball.ball_id = 2 \nAND ball_by_ball.innings_no = 2;"}
{"sample_id": 2044, "db_id": "soccer_2016", "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'", "pred_sql": "SELECT (COUNT(CASE WHEN m.match_winner = pd.team_id THEN 1 END) * 100.0 / COUNT(*)) AS win_percentage\nFROM match m\nJOIN player_match pm ON m.match_id = pm.match_id\nJOIN team t ON pm.team_id = t.team_id\nJOIN season s ON m.season_id = s.season_id\nJOIN player pd ON pm.player_id = pd.player_id\nWHERE t.team_name = 'Delhi Daredevils' AND s.season_year = 2009 AND m.win_type = (SELECT win_id FROM win_by WHERE win_type = 'wickets');"}
{"sample_id": 1995, "db_id": "soccer_2016", "gold_sql": "SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT CASE WHEN Team_1 = Match_Winner THEN Team_2 ELSE Team_1 END FROM Match WHERE match_id = 336039 )", "pred_sql": "SELECT team.team_name FROM match JOIN team ON match.match_winner != team.team_id WHERE match.match_id = 336039;"}
{"sample_id": 1991, "db_id": "soccer_2016", "gold_sql": "SELECT COUNT(T1.Match_Winner) FROM \"Match\" AS T1 INNER JOIN Team AS T2 ON T2.Team_Id = T1.Team_1 OR T2.Team_Id = T1.Team_2 WHERE T2.team_name = 'Delhi Daredevils' AND T1.Match_Date LIKE '2014%'", "pred_sql": "SELECT COUNT(*) AS won_matches_count FROM match WHERE (team_1 = (SELECT team_id FROM team WHERE team_name = 'Delhi Daredevils') OR team_2 = (SELECT team_id FROM team WHERE team_name = 'Delhi Daredevils')) AND match_winner = (SELECT team_id FROM team WHERE team_name = 'Delhi Daredevils') AND season_id = (SELECT season_id FROM season WHERE season_year = 2014);"}
{"sample_id": 1850, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN T2.Country_Name = 'South Africa' THEN 1 ELSE 0 END) FROM City AS T1 INNER JOIN Country AS T2 ON T2.Country_Id = T1.Country_id", "pred_sql": "SELECT COUNT(*) AS city_count FROM city WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'South Africa')"}
{"sample_id": 1858, "db_id": "soccer_2016", "gold_sql": "SELECT SUM(CASE WHEN Match_Id = 548335 THEN 1 ELSE 0 END) FROM Wicket_Taken WHERE Innings_No = 1", "pred_sql": "SELECT COUNT(*) AS players_out FROM wicket_taken WHERE match_id = 548335 AND innings_no = 1;"}
{"sample_id": 4154, "db_id": "citeseer", "gold_sql": "SELECT COUNT(T2.paper_id) FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'schmidt99advanced' AND T2.word_cited_id = 'word3555'", "pred_sql": "SELECT COUNT(DISTINCT cited_paper_id) AS cited_paper_count FROM cites WHERE citing_paper_id = 'schmidt99advanced' AND cited_paper_id IN (SELECT paper_id FROM content WHERE word_cited_id = 'word3555' AND paper_id = citing_paper_id);"}
{"sample_id": 4150, "db_id": "citeseer", "gold_sql": "SELECT DISTINCT T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.class_label = 'AI' OR T1.class_label = 'IR'", "pred_sql": "SELECT c.word_cited_id \nFROM content c \nJOIN paper p1 ON c.paper_id = p1.paper_id \nJOIN cites ci ON c.paper_id = ci.citing_paper_id \nJOIN paper p2 ON ci.cited_paper_id = p2.paper_id \nWHERE p1.class_label = 'AI' AND p2.class_label = 'IR' \nGROUP BY c.word_cited_id;"}
{"sample_id": 4142, "db_id": "citeseer", "gold_sql": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017", "pred_sql": "SELECT DISTINCT c2.citing_paper_id, p2.class_label\nFROM cites c1\nJOIN content co1 ON c1.cited_paper_id = co1.paper_id\nJOIN cites c2 ON co1.word_cited_id = c2.cited_paper_id\nJOIN content co2 ON c2.citing_paper_id = co2.paper_id\nJOIN paper p2 ON c2.citing_paper_id = p2.paper_id\nWHERE c1.citing_paper_id = '315017'"}
{"sample_id": 4153, "db_id": "citeseer", "gold_sql": "SELECT DISTINCT T2.word_cited_id FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'sima01computational'", "pred_sql": "SELECT c.word_cited_id \nFROM cites AS ci \nJOIN paper AS p ON ci.cited_paper_id = p.paper_id \nJOIN content AS c ON p.paper_id = c.paper_id \nWHERE ci.citing_paper_id = 'sima01computational';"}
{"sample_id": 4157, "db_id": "citeseer", "gold_sql": "SELECT COUNT(T1.paper_id) FROM paper AS T1 INNER JOIN cites AS T2 ON T1.paper_id = T2.citing_paper_id WHERE T1.class_label = 'ML' AND T2.cited_paper_id = 'butz01algorithmic'", "pred_sql": "SELECT COUNT(*) AS citation_count \nFROM cites \nJOIN paper ON cites.cited_paper_id = paper.paper_id \nWHERE paper.class_label = 'ML' AND cites.cited_paper_id = 'butz01algorithmic';"}
{"sample_id": 6274, "db_id": "coinmarketcap", "gold_sql": "SELECT T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-28' AND T1.name = 'Bitcoin'", "pred_sql": "SELECT price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = 20130428;"}
{"sample_id": 6287, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE STRFTIME('%Y-%m', T2.date) = '2013-05' AND T2.open IS NULL", "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = 20130501 AND h.open IS NULL;"}
{"sample_id": 6283, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )", "pred_sql": "SELECT name FROM coins INNER JOIN historical ON coins.id = historical.coin_id ORDER BY historical.price DESC LIMIT 1;"}
{"sample_id": 6267, "db_id": "coinmarketcap", "gold_sql": "SELECT T2.time_high FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'", "pred_sql": "SELECT time_high FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND date = 20130429;"}
{"sample_id": 6259, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.status FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id GROUP BY T1.name HAVING AVG(T2.price) > 1000", "pred_sql": "SELECT c.name, c.status FROM coins c JOIN historical h ON c.id = h.coin_id GROUP BY c.id HAVING AVG(h.price) > 1000;"}
{"sample_id": 6261, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.category = 'token' ORDER BY T2.high - T2.low DESC LIMIT 1", "pred_sql": "SELECT c.name, (h.high - h.low) AS max_profit FROM coins c JOIN historical h ON c.id = h.coin_id WHERE c.category = 'token' ORDER BY max_profit DESC LIMIT 1;"}
{"sample_id": 6260, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name, T2.date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.percent_change_1h = ( SELECT MIN(percent_change_1h) FROM historical )", "pred_sql": "SELECT c.name, h.date FROM historical h JOIN coins c ON h.coin_id = c.id ORDER BY h.percent_change_1h ASC LIMIT 1;"}
{"sample_id": 6258, "db_id": "coinmarketcap", "gold_sql": "SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1", "pred_sql": "SELECT date, price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin') AND price = (SELECT MIN(price) FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin'));"}
{"sample_id": 6250, "db_id": "coinmarketcap", "gold_sql": "SELECT T2.volume_24h FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Argentum' AND T2.date = '2016-10-11'", "pred_sql": "SELECT SUM(volume_24h) AS total_value FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.name = 'Argentum' AND h.date = 20161011;"}
{"sample_id": 6266, "db_id": "coinmarketcap", "gold_sql": "SELECT T2.close FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2013-04-29' AND T1.name = 'Bitcoin'", "pred_sql": "SELECT close FROM historical h JOIN coins c ON h.coin_id = c.id WHERE c.name = 'Bitcoin' AND h.date = 20130429;"}
{"sample_id": 6295, "db_id": "coinmarketcap", "gold_sql": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.date = '2018-04-28' AND T2.price > ( SELECT AVG(price) FROM historical WHERE date = '2018-04-28' )", "pred_sql": "SELECT c.name FROM coins c JOIN historical h ON c.id = h.coin_id WHERE h.date = 20130428 AND h.price > (SELECT AVG(price) FROM historical WHERE date = 20130428)"}
{"sample_id": 8875, "db_id": "cookbook", "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T3.name = 'frozen raspberries in light syrup' AND T2.max_qty = T2.min_qty", "pred_sql": "SELECT r.title FROM recipe r JOIN quantity q ON r.recipe_id = q.recipe_id JOIN ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'frozen raspberries in light syrup' ORDER BY q.max_qty DESC LIMIT 1;"}
{"sample_id": 8924, "db_id": "cookbook", "gold_sql": "SELECT CAST(SUM(CASE WHEN T4.calories > 200 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T4 ON T4.recipe_id = T1.recipe_id WHERE T3.category = 'cheese'", "pred_sql": "SELECT (COUNT(CASE WHEN n.calories > 200 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM recipe r JOIN quantity q ON r.recipe_id = q.recipe_id JOIN ingredient i ON q.ingredient_id = i.ingredient_id JOIN nutrition n ON r.recipe_id = n.recipe_id WHERE i.name LIKE '%cheese%';"}
{"sample_id": 8922, "db_id": "cookbook", "gold_sql": "SELECT T3.name FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id ORDER BY T1.cook_min DESC LIMIT 1", "pred_sql": "SELECT i.name, q.max_qty, q.unit \nFROM recipe r \nJOIN quantity q ON r.recipe_id = q.recipe_id \nJOIN ingredient i ON q.ingredient_id = i.ingredient_id \nWHERE r.cook_min = (SELECT MAX(cook_min) FROM recipe)"}
{"sample_id": 8917, "db_id": "cookbook", "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "pred_sql": "SELECT r.title FROM recipe r JOIN nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;"}
{"sample_id": 8898, "db_id": "cookbook", "gold_sql": "SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "pred_sql": "SELECT r.title, (r.prep_min + r.cook_min + r.stnd_min) AS total_time \nFROM recipe r \nJOIN nutrition n ON r.recipe_id = n.recipe_id \nWHERE n.total_fat > 0 \nORDER BY n.total_fat DESC \nLIMIT 1;"}
{"sample_id": 8912, "db_id": "cookbook", "gold_sql": "SELECT pcnt_cal_prot FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Raspberry Chiffon Pie'", "pred_sql": "SELECT pcnt_cal_prot FROM nutrition JOIN recipe ON nutrition.recipe_id = recipe.recipe_id WHERE recipe.title = 'Raspberry Chiffon Pie';"}
{"sample_id": 8923, "db_id": "cookbook", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.cook_min < 20 AND T2.cholestrl = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM recipe)) AS percentage_no_cholesterol FROM recipe r JOIN nutrition n ON r.recipe_id = n.recipe_id WHERE n.cholestrl = '0' AND (r.cook_min < 20);"}
{"sample_id": 8872, "db_id": "cookbook", "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1", "pred_sql": "SELECT title FROM recipe JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY total_fat DESC LIMIT 1;"}
{"sample_id": 8876, "db_id": "cookbook", "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1", "pred_sql": "SELECT name FROM ingredient WHERE ingredient_id = (SELECT ingredient_id FROM quantity GROUP BY ingredient_id ORDER BY COUNT(*) DESC LIMIT 1)"}
{"sample_id": 8880, "db_id": "cookbook", "gold_sql": "SELECT T2.vitamin_a FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.title = 'Sherried Beef'", "pred_sql": "SELECT n.vitamin_a FROM recipe r JOIN nutrition n ON r.recipe_id = n.recipe_id WHERE r.title = 'Sherry beef';"}
{"sample_id": 8888, "db_id": "cookbook", "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.vitamin_c DESC LIMIT 5", "pred_sql": "SELECT r.title FROM recipe r JOIN nutrition n ON r.recipe_id = n.recipe_id WHERE n.vitamin_c IS NOT NULL ORDER BY n.vitamin_c DESC LIMIT 5;"}
{"sample_id": 8904, "db_id": "cookbook", "gold_sql": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id INNER JOIN Nutrition AS T3 ON T3.recipe_id = T2.recipe_id ORDER BY T3.vitamin_a DESC LIMIT 1", "pred_sql": "SELECT i.ingredient_id, i.category, i.name, i.plural \nFROM ingredient i \nJOIN quantity q ON i.ingredient_id = q.ingredient_id \nJOIN nutrition n ON q.recipe_id = n.recipe_id \nJOIN recipe r ON q.recipe_id = r.recipe_id \nWHERE r.recipe_id = (SELECT recipe_id FROM nutrition ORDER BY vitamin_a DESC LIMIT 1)"}
{"sample_id": 8869, "db_id": "cookbook", "gold_sql": "SELECT AVG(T2.calories) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'Produce for Better Health Foundation and 5 a Day'", "pred_sql": "SELECT AVG(n.calories) AS average_calories FROM recipe r JOIN nutrition n ON r.recipe_id = n.recipe_id WHERE r.source = 'Produce for Better Health Foundation and 5 a Day';"}
{"sample_id": 8878, "db_id": "cookbook", "gold_sql": "SELECT COUNT(*) FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id INNER JOIN Ingredient AS T3 ON T3.ingredient_id = T2.ingredient_id WHERE T1.title = 'Chicken Pocket Sandwich' AND T3.name = 'almonds' AND T2.unit = 'cup(s)'", "pred_sql": "SELECT q.max_qty, q.unit FROM quantity q JOIN ingredient i ON q.ingredient_id = i.ingredient_id WHERE i.name = 'almonds' AND q.recipe_id IN (SELECT r.recipe_id FROM recipe r WHERE r.title LIKE '%chicken pocket sandwich%');"}
{"sample_id": 8884, "db_id": "cookbook", "gold_sql": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T2.iron > 20", "pred_sql": "SELECT r.title FROM recipe r JOIN nutrition n ON r.recipe_id = n.recipe_id WHERE n.iron > 20;"}
{"sample_id": 2098, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.LongName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are derived FROM data on foreign-born population.' AND T2.Seriescode = 'SM.POP.TOTL'", "pred_sql": "SELECT c.longname FROM country c JOIN countrynotes cn ON c.countrycode = cn.countrycode WHERE cn.seriescode = 'SM.POP.TOTL' AND cn.description = 'Estimates are derived from data on foreign-born population.';"}
{"sample_id": 2135, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.Seriescode, T2.Source FROM Footnotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T1.Year LIKE '%2005%' AND T2.Source LIKE 'International Monetary Fund%'", "pred_sql": "SELECT series.seriescode FROM series WHERE source = 'International Monetary Fund, Balance of Payments Statistics Yearbook and data files' AND seriescode IN (SELECT seriescode FROM indicators WHERE year = '2005')"}
{"sample_id": 2155, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.CountryCode, T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Australian dollar' AND T1.IncomeGroup = 'Lower middle income'", "pred_sql": "SELECT c.countrycode, c.shortname, c.currencyunit, c.incomegroup \nFROM country c \nWHERE c.currencyunit = 'Australian dollar' AND c.incomegroup = 'Middle income'"}
{"sample_id": 2163, "db_id": "world_development_indicators", "gold_sql": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'", "pred_sql": "SELECT shortname, tablename FROM country WHERE currencyunit = 'Euro';"}
{"sample_id": 2199, "db_id": "world_development_indicators", "gold_sql": "SELECT CountryName FROM Indicators WHERE IndicatorName LIKE 'CO2 emissions FROM transport%' ORDER BY Value DESC LIMIT 1", "pred_sql": "SELECT country.shortname, MAX(indicators.value) AS max_co2_emissions FROM indicators JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'CO2 emissions from transport' GROUP BY country.shortname ORDER BY max_co2_emissions DESC LIMIT 1;"}
{"sample_id": 2188, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Estimates are based on regression.'", "pred_sql": "SELECT shortname FROM country WHERE externaldebtreportingstatus = 'Estimate';"}
{"sample_id": 2100, "db_id": "world_development_indicators", "gold_sql": "SELECT T2.Year FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Seriescode = 'AG.LND.FRST.K2'", "pred_sql": "SELECT year FROM footnotes WHERE seriescode = 'AG.LND.FRST.K2' AND countrycode = (SELECT countrycode FROM country WHERE shortname = 'Aruba');"}
{"sample_id": 2240, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.ShortName FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.Seriescode = 'BX.KLT.DINV.CD.WD'", "pred_sql": "SELECT country.shortname, country.longname, countrynotes.description \nFROM country \nJOIN countrynotes ON country.countrycode = countrynotes.countrycode \nJOIN indicators ON country.countrycode = indicators.countrycode \nWHERE indicators.indicatorcode = 'BX.KLT.DINV.CD.WD';"}
{"sample_id": 2124, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T3.Description FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN CountryNotes AS T3 ON T2.CountryCode = T3.Countrycode WHERE T1.Region = 'North America' AND T2.IndicatorName = 'Out-of-school children of primary school age, both sexes (number)'", "pred_sql": "SELECT s.source FROM series s JOIN indicators i ON s.seriescode = i.indicatorcode JOIN country c ON i.countrycode = c.countrycode WHERE s.topic = 'education' AND s.indicatorname = 'children who finished primary school education' AND c.region = 'North America';"}
{"sample_id": 2138, "db_id": "world_development_indicators", "gold_sql": "SELECT IndicatorName FROM Indicators WHERE CountryName = 'Arab World' AND Year = 1960 AND Value > 50", "pred_sql": "SELECT DISTINCT indicators.indicatorname FROM indicators JOIN country ON indicators.countrycode = country.countrycode WHERE country.region = 'Arab World' AND indicators.year = '1960' AND indicators.value > '50';"}
{"sample_id": 2182, "db_id": "world_development_indicators", "gold_sql": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes'", "pred_sql": "SELECT shortname FROM country WHERE vitalregistrationcomplete = 'Yes';"}
{"sample_id": 2149, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T2.SeriesCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.CurrencyUnit = 'Euro'", "pred_sql": "SELECT seriescode FROM country WHERE currencyunit = 'Euro';"}
{"sample_id": 2165, "db_id": "world_development_indicators", "gold_sql": "SELECT CountryCode, Region FROM Country WHERE (IncomeGroup = 'High income: OECD' OR IncomeGroup = 'High income: nonOECD') AND Region LIKE '%Asia%'", "pred_sql": "SELECT shortname FROM country WHERE region = 'Asia' AND incomegroup = 'High income';"}
{"sample_id": 2154, "db_id": "world_development_indicators", "gold_sql": "SELECT T2.SeriesCode, T2.CountryCode FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.Region = 'Latin America & Caribbean' AND t1.incomegroup = 'Low income'", "pred_sql": "SELECT series.seriescode, country.countrycode \nFROM country \nJOIN countrynotes ON country.countrycode = countrynotes.countrycode \nJOIN series ON countrynotes.seriescode = series.seriescode \nWHERE country.region = 'Latin America & Caribbean' \nAND country.incomegroup = 'Poor';"}
{"sample_id": 2178, "db_id": "world_development_indicators", "gold_sql": "SELECT T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Low income' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' ORDER BY T2.Value LIMIT 1", "pred_sql": "SELECT c.shortname, i.value FROM country c JOIN indicators i ON c.countrycode = i.countrycode WHERE c.incomegroup = 'Low income' AND i.indicatorname = 'Fertility rate' ORDER BY i.value ASC LIMIT 1;"}
{"sample_id": 2143, "db_id": "world_development_indicators", "gold_sql": "SELECT T1.IndicatorName, MIN(T1.Value) FROM Indicators AS T1 INNER JOIN Series AS T2 ON T1.IndicatorName = T2.IndicatorName WHERE T2.AggregationMethod = 'Weighted average'", "pred_sql": "SELECT indicatorname, MIN(value) AS lowest_value FROM indicators WHERE indicatorname LIKE '%Weighted average%' GROUP BY indicatorname ORDER BY lowest_value ASC LIMIT 1;"}
{"sample_id": 2177, "db_id": "world_development_indicators", "gold_sql": "SELECT T2.seriescode, T1.Wb2Code FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data sources : Eurostat'", "pred_sql": "SELECT country.wb2code, countrynotes.seriescode \nFROM country \nJOIN countrynotes ON country.countrycode = countrynotes.countrycode \nWHERE countrynotes.description = 'Data sources : Eurostat';"}
{"sample_id": 2218, "db_id": "world_development_indicators", "gold_sql": "SELECT COUNT(longname) FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone' UNION SELECT longname FROM country WHERE currencyunit = 'Danish krone' AND region = 'Europe & Central Asia'", "pred_sql": "SELECT longname FROM country WHERE region = 'Europe & Central Asia' AND currencyunit = 'Danish krone';"}
{"sample_id": 2164, "db_id": "world_development_indicators", "gold_sql": "SELECT COUNT(LongName) FROM Country WHERE SpecialNotes = '' UNION SELECT longname FROM country WHERE specialnotes = ''", "pred_sql": "SELECT longname FROM country WHERE specialnotes IS NULL OR specialnotes = '';"}
{"sample_id": 2198, "db_id": "world_development_indicators", "gold_sql": "SELECT LongName FROM Country WHERE SystemOfTrade = 'Special trade system' LIMIT 2", "pred_sql": "SELECT longname FROM country WHERE systemoftrade IS NOT NULL LIMIT 2;"}
{"sample_id": 2172, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1980 AND T2.IndicatorName IS NOT NULL", "pred_sql": "SELECT country.longname, indicators.indicatorname \nFROM country \nJOIN indicators ON country.countrycode = indicators.countrycode \nWHERE indicators.year = '1980';"}
{"sample_id": 2112, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode, T1.Year, T1.Value FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Region = 'Latin America & Caribbean' AND T1.IndicatorName = 'CO2 emissions (kt)' AND T1.Year > 1965 AND T1.Year < 1980 ORDER BY T1.Value DESC LIMIT 3", "pred_sql": "SELECT c.shortname, MAX(i.value) AS highest_value, i.year \nFROM indicators i \nJOIN country c ON i.countrycode = c.countrycode \nWHERE c.region = 'Latin America & Caribbean' \nAND i.indicatorname = 'CO2 emissions (kt)' \nGROUP BY c.shortname \nORDER BY AVG(i.value) DESC \nLIMIT 3;"}
{"sample_id": 2230, "db_id": "world_development_indicators", "gold_sql": "SELECT AVG(T1.Value), T2.SystemOfTrade FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Air transport, passengers carried' AND T1.Year >= 1970 AND T1.Year < 1981 AND T1.CountryName = 'Bulgaria'", "pred_sql": "SELECT AVG(value) AS average_passengers, c.systemoftrade \nFROM indicators i \nJOIN country c ON i.countrycode = c.countrycode \nWHERE c.shortname = 'Bulgaria' \nAND i.indicatorname = 'Passengers carried via air transport' \nAND i.year BETWEEN '1970' AND '1980';"}
{"sample_id": 2171, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T2.Year, T1.TableName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Air transport, passengers carried'", "pred_sql": "SELECT DISTINCT c.tablename, i.year \nFROM indicators i \nJOIN country c ON i.countrycode = c.countrycode \nWHERE i.indicatorname = 'Air transport, passengers carried'"}
{"sample_id": 2108, "db_id": "world_development_indicators", "gold_sql": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'", "pred_sql": "SELECT AVG(value) AS average_value FROM indicators WHERE indicatorname = 'Adjusted net enrolment rate, primary, both sexes (%)' AND countryname = 'Algeria' AND year BETWEEN '1975' AND '1980';"}
{"sample_id": 2242, "db_id": "world_development_indicators", "gold_sql": "SELECT COUNT(T1.Countrycode)  FROM CountryNotes AS T1 INNER JOIN Series AS T2 ON T1.Seriescode = T2.SeriesCode WHERE T2.IndicatorName = 'Stocks traded, turnover ratio of domestic shares (%)'", "pred_sql": "SELECT COUNT(DISTINCT c.countrycode) AS country_count\nFROM country c\nJOIN indicators i ON c.countrycode = i.countrycode\nJOIN countrynotes cn ON c.countrycode = cn.countrycode AND i.indicatorcode = cn.seriescode\nWHERE i.indicatorname = 'Stocks traded, turnover ratio of domestic shares';"}
{"sample_id": 2221, "db_id": "world_development_indicators", "gold_sql": "SELECT Value FROM Indicators WHERE IndicatorName = 'Agricultural land (sq. km)' AND Year = 1968 AND CountryName = 'Italy'", "pred_sql": "SELECT value FROM indicators WHERE countryname = 'Italy' AND year = '1968' AND indicatorname = 'Agricultural land area (sq. km)';"}
{"sample_id": 2191, "db_id": "world_development_indicators", "gold_sql": "SELECT COUNT(CountryCode)  FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1968 System of National Accounts methodology.'", "pred_sql": "SELECT COUNT(*) AS country_count FROM country WHERE systemofnationalaccounts = '1968';"}
{"sample_id": 2214, "db_id": "world_development_indicators", "gold_sql": "SELECT T2.CountryCode FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName LIKE 'Land under cereal production%' AND T1.Value = 3018500 AND T1.Year = 1980 AND T2.ExternalDebtReportingStatus = 'Actual'", "pred_sql": "SELECT c.shortname FROM country c JOIN indicators i ON c.countrycode = i.countrycode WHERE c.externaldebtreportingstatus = 'Actual' AND i.year = '1980' AND i.indicatorname = 'Land under cereal production' AND i.value = '3018500';"}
{"sample_id": 2187, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.'", "pred_sql": "SELECT DISTINCT country.shortname FROM country JOIN indicators ON country.countrycode = indicators.countrycode WHERE indicators.indicatorname LIKE '%official aid%';"}
{"sample_id": 2157, "db_id": "world_development_indicators", "gold_sql": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')", "pred_sql": "SELECT countrycode, shortname FROM country WHERE currencyunit = 'Euro' AND incomegroup = 'High income';"}
{"sample_id": 2166, "db_id": "world_development_indicators", "gold_sql": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''", "pred_sql": "SELECT longname FROM country WHERE nationalaccountsbaseyear < '1980';"}
{"sample_id": 4399, "db_id": "student_loan", "gold_sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN unemployed AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'", "pred_sql": "SELECT COUNT(*) FROM unemployed u JOIN enrolled e ON u.name = e.name WHERE e.school = 'SMC';"}
{"sample_id": 4527, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.organ = 'navy'", "pred_sql": "SELECT COUNT(DISTINCT filed_for_bankrupcy.name) AS number_of_students\nFROM filed_for_bankrupcy\nJOIN enlist ON filed_for_bankrupcy.name = enlist.name\nWHERE enlist.organ = 'navy';"}
{"sample_id": 4473, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name WHERE T1.organ = 'army'", "pred_sql": "SELECT COUNT(*) FROM enlist WHERE organ = 'Army' AND name IN (SELECT name FROM unemployed);"}
{"sample_id": 4413, "db_id": "student_loan", "gold_sql": "SELECT ( SELECT COUNT(name) FROM disabled WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM unemployed WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM male WHERE name IN ('student180', 'student117') ), ( SELECT COUNT(name) FROM no_payment_due WHERE name IN ('student180', 'student117'))", "pred_sql": "SELECT person.name, \n       CASE \n           WHEN male.name IS NOT NULL THEN 'Male' \n           ELSE 'Female' \n       END AS gender, \n       CASE \n           WHEN disabled.name IS NOT NULL THEN 'Disabled' \n           ELSE 'Not Disabled' \n       END AS disability_status, \n       CASE \n           WHEN unemployed.name IS NOT NULL THEN 'Unemployed' \n           ELSE 'Employed' \n       END AS employment_status, \n       CASE \n           WHEN no_payment_due.bool = 'neg' THEN 'No Payment Due' \n           ELSE 'Payment Due' \n       END AS school_debt_status \nFROM person \nLEFT JOIN male ON person.name = male.name \nLEFT JOIN disabled ON person.name = disabled.name \nLEFT JOIN unemployed ON person.name = unemployed.name \nLEFT JOIN no_payment_due ON person.name = no_payment_due.name \nWHERE person.name IN ('student180', 'student117');"}
{"sample_id": 4440, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name WHERE T1.month = 0", "pred_sql": "SELECT filed_for_bankrupcy.name \nFROM filed_for_bankrupcy \nJOIN longest_absense_from_school ON filed_for_bankrupcy.name = longest_absense_from_school.name \nWHERE longest_absense_from_school.month = '0';"}
{"sample_id": 4538, "db_id": "student_loan", "gold_sql": "SELECT name FROM enlist WHERE organ = 'fire_department'", "pred_sql": "SELECT name FROM enlist WHERE organ = 'fire department';"}
{"sample_id": 4505, "db_id": "student_loan", "gold_sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') AS gender FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name GROUP BY T1.organ", "pred_sql": "SELECT enlist.organ, COUNT(male.name) AS male_count, COUNT(person.name) - COUNT(male.name) AS female_count\nFROM enlist\nLEFT JOIN person ON enlist.name = person.name\nLEFT JOIN male ON person.name = male.name\nGROUP BY enlist.organ;"}
{"sample_id": 4496, "db_id": "student_loan", "gold_sql": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'", "pred_sql": "SELECT enlist.organ, no_payment_due.bool FROM enlist JOIN no_payment_due ON enlist.name = no_payment_due.name WHERE enlist.name = 'student160';"}
{"sample_id": 4561, "db_id": "student_loan", "gold_sql": "SELECT T.organ FROM ( SELECT T2.organ, COUNT(T1.name) AS num FROM male AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name GROUP BY T2.organ ) T ORDER BY T.num LIMIT 1", "pred_sql": "SELECT organ, COUNT(*) as male_count FROM enlist WHERE name IN (SELECT name FROM male) GROUP BY organ ORDER BY male_count ASC LIMIT 1;"}
{"sample_id": 4531, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month < 4", "pred_sql": "SELECT COUNT(*) AS student_count FROM longest_absense_from_school WHERE month < '4';"}
{"sample_id": 4504, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name GROUP BY T1.school", "pred_sql": "SELECT enrolled.school, COUNT(disabled.name) AS disabled_count \nFROM enrolled \nLEFT JOIN disabled ON enrolled.name = disabled.name \nGROUP BY enrolled.school;"}
{"sample_id": 4416, "db_id": "student_loan", "gold_sql": "SELECT CAST(SUM(IIF(T2.name IS NULL, 1, 0)) AS REAL) * 100 / COUNT(T2.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T1.\"name\" = T2.\"name\"", "pred_sql": "SELECT (SELECT COUNT(*) FROM disabled WHERE name NOT IN (SELECT name FROM male)) * 1.0 / (SELECT COUNT(*) FROM disabled WHERE name IN (SELECT name FROM male)) AS ratio_of_disabled_female_to_male;"}
{"sample_id": 4374, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.organ = 'navy' AND T2.bool = 'pos'", "pred_sql": "SELECT COUNT(*) FROM enlist WHERE organ = 'navy' AND name IN (SELECT name FROM no_payment_due WHERE bool = 'pos');"}
{"sample_id": 4435, "db_id": "student_loan", "gold_sql": "SELECT CAST(SUM(IIF(T1.month > 5, 1, 0)) AS REAL) * 100 / COUNT(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name", "pred_sql": "SELECT (COUNT(u.name) * 100.0 / (SELECT COUNT(*) FROM person)) AS unemployment_percentage\nFROM unemployed u\nJOIN longest_absense_from_school l ON u.name = l.name\nWHERE l.month = '5';"}
{"sample_id": 4412, "db_id": "student_loan", "gold_sql": "SELECT IIF(T2.name IS NULL, 'female', 'male') FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124'", "pred_sql": "SELECT COUNT(*) > 0 AS is_disabled_male FROM disabled d JOIN male m ON d.name = m.name WHERE m.name = '124';"}
{"sample_id": 4480, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "pred_sql": "SELECT COUNT(*) AS student_count FROM enlist WHERE organ = 'navy';"}
{"sample_id": 4395, "db_id": "student_loan", "gold_sql": "SELECT T2.name FROM enrolled AS T1 INNER JOIN disabled AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.school = 'smc'", "pred_sql": "SELECT disabled.name FROM disabled JOIN enrolled ON disabled.name = enrolled.name WHERE enrolled.school = 'SMC';"}
{"sample_id": 4392, "db_id": "student_loan", "gold_sql": "SELECT T1.name, T1.school FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T2.organ = 'air_force'", "pred_sql": "SELECT enlist.name, enrolled.school FROM enlist JOIN enrolled ON enlist.name = enrolled.name WHERE enlist.organ = 'air force';"}
{"sample_id": 4525, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'marines'", "pred_sql": "SELECT COUNT(*) AS disabled_students_count FROM disabled d JOIN enlist e ON d.name = e.name WHERE e.organ = 'marines';"}
{"sample_id": 4465, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'navy'", "pred_sql": "SELECT COUNT(*) AS student_count FROM enlist WHERE organ = 'Navy';"}
{"sample_id": 4567, "db_id": "student_loan", "gold_sql": "SELECT T1.month FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "pred_sql": "SELECT MAX(month) AS max_absence_months FROM longest_absense_from_school WHERE name IN (SELECT name FROM enlist WHERE organ = 'Air Force')"}
{"sample_id": 4389, "db_id": "student_loan", "gold_sql": "SELECT name FROM longest_absense_from_school WHERE \"month\" = 6", "pred_sql": "SELECT name FROM longest_absense_from_school WHERE month = '6';"}
{"sample_id": 4490, "db_id": "student_loan", "gold_sql": "SELECT COUNT(CASE  WHEN T2.name IS NULL THEN T1.name END) AS \"number\" FROM person AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "pred_sql": "SELECT COUNT(*) AS number_of_students_not_disabled FROM person WHERE name NOT IN (SELECT name FROM disabled);"}
{"sample_id": 4516, "db_id": "student_loan", "gold_sql": "SELECT CAST((SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0))) AS REAL) * 100 / COUNT(T1.name), IIF(SUM(IIF(T2.name IS NOT NULL AND T1.month = 0, 1, 0)) - SUM(IIF(T2.name IS NULL AND T1.month = 0, 1, 0)) > 0, 'YES', 'NO') AS isHigh FROM longest_absense_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "pred_sql": "SELECT (SUM(CASE WHEN d.name IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS disabled_attendance_percentage, (SUM(CASE WHEN d.name IS NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS non_disabled_attendance_percentage FROM person p LEFT JOIN disabled d ON p.name = d.name;"}
{"sample_id": 4570, "db_id": "student_loan", "gold_sql": "SELECT T.organ, T.per FROM ( SELECT T1.organ, CAST(COUNT(T3.name) AS REAL) / COUNT(T2.name) AS per , COUNT(T3.name) AS num FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name GROUP BY T1.organ ) T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT organ, COUNT(male.name) * 100.0 / (SELECT COUNT(*) FROM enlist) AS male_percentage\nFROM enlist\nJOIN male ON enlist.name = male.name\nGROUP BY organ\nORDER BY male_percentage DESC\nLIMIT 1;"}
{"sample_id": 4546, "db_id": "student_loan", "gold_sql": "SELECT T1.school , IIF(T3.name IS NULL, 'female', 'male') AS gender FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.name = 'student34'", "pred_sql": "SELECT enrolled.school, CASE WHEN male.name IS NOT NULL THEN 'male' ELSE 'female' END AS gender FROM enrolled LEFT JOIN male ON enrolled.name = male.name WHERE enrolled.name = 'student34';"}
{"sample_id": 4517, "db_id": "student_loan", "gold_sql": "SELECT AVG(T1.month) FROM longest_absense_from_school AS T1 INNER JOIN disabled AS T2 ON T2.name = T1.name INNER JOIN male AS T3 ON T3.name = T2.name", "pred_sql": "SELECT AVG(CAST(month AS INTEGER)) AS average_absence_duration FROM longest_absense_from_school WHERE name IN (SELECT name FROM disabled) AND name IN (SELECT name FROM male);"}
{"sample_id": 4566, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM disabled AS T1 INNER JOIN filed_for_bankrupcy AS T2 ON T1.name = T2.name", "pred_sql": "SELECT COUNT(*) AS disabled_students_count \nFROM filed_for_bankrupcy f \nJOIN disabled d ON f.name = d.name;"}
{"sample_id": 4446, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM enlist WHERE organ = 'army'", "pred_sql": "SELECT COUNT(*) AS enlisted_count FROM enlist WHERE organ = 'army';"}
{"sample_id": 4420, "db_id": "student_loan", "gold_sql": "SELECT AVG(month) FROM longest_absense_from_school WHERE name NOT IN ( SELECT name FROM unemployed )", "pred_sql": "SELECT AVG(CAST(month AS INTEGER)) AS average_absence FROM longest_absense_from_school WHERE name IN (SELECT name FROM enrolled WHERE name NOT IN (SELECT name FROM unemployed));"}
{"sample_id": 4377, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.\"name\" = T2.\"name\"", "pred_sql": "SELECT COUNT(*) AS unemployed_with_payment_due_count FROM unemployed u JOIN no_payment_due n ON u.name = n.name WHERE n.bool = 'pos';"}
{"sample_id": 4521, "db_id": "student_loan", "gold_sql": "SELECT \"bool\" FROM no_payment_due WHERE name = 'student124'", "pred_sql": "SELECT bool FROM no_payment_due WHERE name = '124';"}
{"sample_id": 4450, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T2.bool = 'pos'", "pred_sql": "SELECT COUNT(*) FROM unemployed u JOIN no_payment_due n ON u.name = n.name WHERE n.bool = 'pos';"}
{"sample_id": 4432, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name ORDER BY T2.month DESC LIMIT 1", "pred_sql": "SELECT disabled.name FROM disabled JOIN longest_absense_from_school ON disabled.name = longest_absense_from_school.name WHERE longest_absense_from_school.month != '0' ORDER BY longest_absense_from_school.month DESC;"}
{"sample_id": 4563, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN disabled AS T2 ON T1.name = T2.name", "pred_sql": "SELECT COUNT(*) AS unemployed_disabled_count FROM unemployed u JOIN disabled d ON u.name = d.name;"}
{"sample_id": 4524, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN no_payment_due AS T2 ON T1.name = T2.name WHERE T1.month = 5 AND T2.bool = 'neg'", "pred_sql": "SELECT longest_absense_from_school.name \nFROM longest_absense_from_school \nJOIN no_payment_due ON longest_absense_from_school.name = no_payment_due.name \nWHERE longest_absense_from_school.month = '5' AND no_payment_due.bool = 'neg';"}
{"sample_id": 4369, "db_id": "student_loan", "gold_sql": "SELECT MAX(month) FROM longest_absense_from_school", "pred_sql": "SELECT name, month FROM longest_absense_from_school WHERE month != '0' ORDER BY month DESC;"}
{"sample_id": 4426, "db_id": "student_loan", "gold_sql": "SELECT COUNT(name) FROM no_payment_due WHERE bool = 'neg'", "pred_sql": "SELECT COUNT(*) AS number_of_students_without_payment_due FROM no_payment_due WHERE bool = 'neg';"}
{"sample_id": 4467, "db_id": "student_loan", "gold_sql": "SELECT COUNT(T1.name) FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name WHERE T1.organ = 'peace_corps' AND T2.school = 'ucsd'", "pred_sql": "SELECT COUNT(*) FROM enlist INNER JOIN enrolled ON enlist.name = enrolled.name WHERE enlist.organ = 'Peace Corps' AND enrolled.school = 'UCSD';"}
{"sample_id": 4554, "db_id": "student_loan", "gold_sql": "SELECT name FROM enlist WHERE organ = 'marines'", "pred_sql": "SELECT name FROM enlist WHERE organ = 'Marines';"}
{"sample_id": 4437, "db_id": "student_loan", "gold_sql": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name ORDER BY T1.month DESC LIMIT 1", "pred_sql": "SELECT u.name FROM unemployed u JOIN longest_absense_from_school l ON u.name = l.name ORDER BY l.month DESC;"}
{"sample_id": 4415, "db_id": "student_loan", "gold_sql": "SELECT T1.school, T2.organ FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.\"name\" = T2.\"name\" WHERE T1.\"name\" IN ('student27,student17,studetn101')", "pred_sql": "SELECT enlist.organ, enrolled.school FROM enlist JOIN enrolled ON enlist.name = enrolled.name WHERE enlist.name IN ('student27', 'student17', 'student101');"}
{"sample_id": 9470, "db_id": "california_schools", "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'", "pred_sql": "SELECT COUNT(*) AS merged_unified_schools, (SELECT COUNT(*) FROM schools WHERE district = 'Merged' AND doc = '54' AND county = 'Orange') AS merged_elementary_schools, (COUNT(*) * 1.0 / (SELECT COUNT(*) FROM schools WHERE district = 'Merged' AND doc = '54' AND county = 'Orange')) AS ratio FROM schools WHERE district = 'Merged' AND doc = '56' AND county = 'Orange';"}
{"sample_id": 9495, "db_id": "california_schools", "gold_sql": "SELECT T1.\"FRPM Count (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'", "pred_sql": "SELECT frpm.\"frpm count (ages 5-17)\" FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.\"mailstreet\" = 'PO Box 1040' AND schools.\"soctype\" = '11';"}
{"sample_id": 9483, "db_id": "california_schools", "gold_sql": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'", "pred_sql": "SELECT COUNT(*) AS chartered_school_count \nFROM schools \nWHERE city = 'Hickman' \nAND district = 'Elementary School District' \nAND charter = '1';"}
{"sample_id": 9499, "db_id": "california_schools", "gold_sql": "SELECT T2.School, T1.\"FRPM Count (Ages 5-17)\" * 100 / T1.\"Enrollment (Ages 5-17)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'", "pred_sql": "SELECT s.school AS school_name, f.\"percent (%) eligible frpm (ages 5-17)\" AS percent_eligible_frpm\nFROM schools s\nJOIN frpm f ON s.cdscode = f.cdscode\nWHERE f.low_grade = 'K' AND f.high_grade = '9' AND f.\"county name\" = 'Los Angeles';"}
{"sample_id": 9466, "db_id": "california_schools", "gold_sql": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1", "pred_sql": "SELECT s.city, AVG(sa.avgscrwrite) AS average_writing_score\nFROM satscores sa\nJOIN schools s ON sa.cds = s.cdscode\nWHERE sa.numge1500 = (\n    SELECT MAX(numge1500)\n    FROM satscores\n)\nGROUP BY s.city;"}
{"sample_id": 9439, "db_id": "california_schools", "gold_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null", "pred_sql": "SELECT s.charternum, AVG(sa.avgscrwrite) AS average_writing_score\nFROM schools s\nJOIN satscores sa ON s.cdscode = sa.cds\nWHERE sa.avgscrwrite > 499\nGROUP BY s.charternum\nORDER BY average_writing_score DESC;"}
{"sample_id": 9431, "db_id": "california_schools", "gold_sql": "SELECT COUNT(T2.\"School Code\") FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.\"Charter Funding Type\" = 'Directly funded'", "pred_sql": "SELECT COUNT(*) AS charter_funded_schools\nFROM schools s\nJOIN satscores sa ON s.cdscode = sa.cds\nWHERE sa.avgscrmath > 560 AND s.fundingtype = 'Directly funded';"}
{"sample_id": 9480, "db_id": "california_schools", "gold_sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'", "pred_sql": "SELECT school, phone, ext FROM schools WHERE zip = '95203-3704';"}
{"sample_id": 9438, "db_id": "california_schools", "gold_sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'", "pred_sql": "SELECT COUNT(*) AS school_count FROM schools s JOIN satscores sa ON s.cdscode = sa.cds WHERE s.statustype = 'Merged' AND s.county = 'Alameda' AND sa.numtsttakr < 100;"}
{"sample_id": 9451, "db_id": "california_schools", "gold_sql": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.\"Enrollment (K-12)\" DESC LIMIT 1", "pred_sql": "SELECT opendate FROM schools WHERE cdscode = (SELECT cdscode FROM frpm ORDER BY CAST(enrollment AS INTEGER) DESC LIMIT 1)"}
{"sample_id": 9465, "db_id": "california_schools", "gold_sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1", "pred_sql": "SELECT s.cname, AVG(ss.avgscrmath) AS average_math_score\nFROM satscores ss\nJOIN schools s ON ss.cds = s.cdscode\nWHERE ss.avgscrread = (SELECT MIN(avgscrread) FROM satscores)\n   OR ss.avgscrmath = (SELECT MIN(avgscrmath) FROM satscores)\n   OR ss.avgscrwrite = (SELECT MIN(avgscrwrite) FROM satscores)\nGROUP BY s.cname;"}
{"sample_id": 9455, "db_id": "california_schools", "gold_sql": "SELECT T2.Website, T1.\"School Name\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL", "pred_sql": "SELECT s.website, s.school \nFROM schools s \nJOIN frpm f ON s.cdscode = f.cdscode \nWHERE f.free_meal_count_ages_5_17 BETWEEN 1900 AND 2000;"}
{"sample_id": 9459, "db_id": "california_schools", "gold_sql": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1", "pred_sql": "SELECT s.street, s.city, s.zip, s.state FROM schools s JOIN satscores sa ON s.cdscode = sa.cds ORDER BY (CAST(sa.numge1500 AS FLOAT) / CAST(sa.numtsttakr AS FLOAT)) ASC LIMIT 1;"}
{"sample_id": 9424, "db_id": "california_schools", "gold_sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.\"District Name\" = 'Fresno County Office of Education' AND T1.\"Charter School (Y/N)\" = 1", "pred_sql": "SELECT DISTINCT s.zip FROM schools s JOIN frpm f ON s.cdscode = f.cdscode WHERE f.county name = 'Fresno County Office of Education' AND f.charter school (y/n) = '1';"}
{"sample_id": 9482, "db_id": "california_schools", "gold_sql": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1", "pred_sql": "SELECT s.website FROM schools s JOIN frpm f ON s.cdscode = f.cdscode WHERE f.charter = '1' AND f.virtual = 'P' AND f.county name = 'San Joaquin';"}
{"sample_id": 9428, "db_id": "california_schools", "gold_sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500", "pred_sql": "SELECT s.school, s.district, s.county, s.city, s.zip FROM schools s JOIN satscores sa ON s.cdscode = sa.cds WHERE sa.numtsttakr > 500 AND s.magnet = '1';"}
{"sample_id": 9477, "db_id": "california_schools", "gold_sql": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'", "pred_sql": "SELECT (SELECT COUNT(*) FROM schools WHERE mailstate = 'CA' AND county = 'Colusa') * 1.0 / (SELECT COUNT(*) FROM schools WHERE mailstate = 'CA' AND county = 'Humboldt') AS ratio;"}
{"sample_id": 9467, "db_id": "california_schools", "gold_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'", "pred_sql": "SELECT s.school AS school_name, AVG(sa.avgscrwrite) AS average_writing_score\nFROM schools s\nJOIN satscores sa ON s.cdscode = sa.cds\nWHERE s.admfname1 = 'Ricci' AND s.admlname1 = 'Ulrich'\nGROUP BY s.school;"}
{"sample_id": 9444, "db_id": "california_schools", "gold_sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1", "pred_sql": "SELECT s.school AS school_name, COUNT(ss.numtsttakr) AS test_takers\nFROM schools s\nJOIN satscores ss ON s.cdscode = ss.cds\nWHERE s.county = 'Contra Costa'\nGROUP BY s.school\nORDER BY test_takers DESC\nLIMIT 1;"}
{"sample_id": 7992, "db_id": "university", "gold_sql": "SELECT university_id FROM university_year WHERE pct_international_students = 1 AND year BETWEEN 2011 AND 2015", "pred_sql": "SELECT university.id FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.pct_international_students = 1 AND university_year.year BETWEEN 2011 AND 2015;"}
{"sample_id": 8038, "db_id": "university", "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'", "pred_sql": "SELECT country.country_name FROM university JOIN country ON university.country_id = country.id WHERE university.university_name = 'Harvard University';"}
{"sample_id": 8003, "db_id": "university", "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students > 50000 AND T1.year = 2012", "pred_sql": "SELECT university.university_name FROM university JOIN university_year ON university.id = university_year.university_id WHERE university_year.year = 2012 AND university_year.num_students >= 50000;"}
{"sample_id": 8074, "db_id": "university", "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.pct_international_students DESC LIMIT 1", "pred_sql": "SELECT u.university_name FROM university u JOIN university_year uy ON u.id = uy.university_id WHERE uy.year = 2011 ORDER BY uy.pct_international_students DESC LIMIT 1;"}
{"sample_id": 8089, "db_id": "university", "gold_sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank'", "pred_sql": "SELECT id FROM ranking_criteria WHERE criteria_name = 'Citations Rank';"}
{"sample_id": 7996, "db_id": "university", "gold_sql": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1", "pred_sql": "SELECT university.university_name FROM university JOIN university_year ON university.id = university_year.university_id ORDER BY university_year.num_students ASC LIMIT 1;"}
{"sample_id": 7990, "db_id": "university", "gold_sql": "SELECT MAX(student_staff_ratio) FROM university_year WHERE student_staff_ratio = ( SELECT MAX(student_staff_ratio) FROM university_year )", "pred_sql": "SELECT university.university_name, university_year.student_staff_ratio \nFROM university \nJOIN university_year ON university.id = university_year.university_id \nWHERE university_year.student_staff_ratio = (\n    SELECT MAX(student_staff_ratio) \n    FROM university_year\n)"}
{"sample_id": 8052, "db_id": "university", "gold_sql": "SELECT COUNT(*) FROM university_ranking_year WHERE ranking_criteria_id = 6 AND year = 2011 AND score < 50", "pred_sql": "SELECT COUNT(*) AS university_count FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id WHERE ur.ranking_criteria_id = '6' AND ur.year = '2011' AND ur.score < '50';"}
{"sample_id": 8106, "db_id": "university", "gold_sql": "SELECT (SUM(CASE WHEN T1.system_name = 'Center for World University Rankings' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Shanghai Ranking' THEN 1 ELSE 0 END) + SUM(CASE WHEN T1.system_name = 'Times Higher Education World University Ranking' THEN 1 ELSE 0 END)) / 3 FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id", "pred_sql": "SELECT AVG(criteria_count) AS average_criteria_count\nFROM (\n    SELECT COUNT(ranking_criteria.id) AS criteria_count\n    FROM ranking_criteria\n    JOIN ranking_system ON ranking_criteria.ranking_system_id = ranking_system.id\n    WHERE ranking_system.system_name IN ('Times Higher Education World University Ranking', 'Shanghai Ranking', 'Center for World University Rankings')\n    GROUP BY ranking_system.id\n) AS criteria_counts;"}
{"sample_id": 7999, "db_id": "university", "gold_sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Award' AND T2.year BETWEEN 2005 AND 2015 AND T2.score = 0", "pred_sql": "SELECT COUNT(DISTINCT u.id) AS university_count \nFROM university u \nJOIN university_ranking_year ur ON u.id = ur.university_id \nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id \nJOIN ranking_system rs ON rc.ranking_system_id = rs.id \nWHERE rs.system_name = 'Awards' \nAND ur.score = '0' \nAND ur.year BETWEEN '2005' AND '2015';"}
{"sample_id": 7993, "db_id": "university", "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1", "pred_sql": "SELECT country.country_name FROM country JOIN university ON country.id = university.country_id GROUP BY country.country_name ORDER BY COUNT(university.id) DESC LIMIT 1;"}
{"sample_id": 8079, "db_id": "university", "gold_sql": "SELECT T3.university_name FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T1.criteria_name = 'Teaching' AND T2.year = 2011 AND T2.score > 90", "pred_sql": "SELECT u.university_name \nFROM university u \nJOIN university_ranking_year ur ON u.id = ur.university_id \nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id \nWHERE rc.criteria_name = 'teaching' \nAND ur.score > '90' \nAND ur.year = '2011';"}
{"sample_id": 8062, "db_id": "university", "gold_sql": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Quality of Education Rank'", "pred_sql": "SELECT rs.system_name FROM ranking_criteria rc JOIN ranking_system rs ON rc.ranking_system_id = rs.id WHERE rc.criteria_name = 'Quality of Education Rank';"}
{"sample_id": 8053, "db_id": "university", "gold_sql": "SELECT T1.num_students FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Yale University' AND T1.year = 2016", "pred_sql": "SELECT num_students FROM university_year WHERE university_id = (SELECT id FROM university WHERE university_name = 'Yale University') AND year = 2016;"}
{"sample_id": 8037, "db_id": "university", "gold_sql": "SELECT CAST(T1.num_students * T1.pct_female_students AS REAL) / 100 FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T2.university_name = 'Stanford University'", "pred_sql": "SELECT num_students * pct_female_students / 100 AS female_students\nFROM university_year\nJOIN university ON university_year.university_id = university.id\nWHERE university.university_name = 'Stanford University' AND university_year.year = 2011;"}
{"sample_id": 8060, "db_id": "university", "gold_sql": "SELECT T2.criteria_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T1.system_name = 'Shanghai Ranking'", "pred_sql": "SELECT criteria_name FROM ranking_criteria WHERE ranking_system_id = (SELECT id FROM ranking_system WHERE system_name = 'Shanghai Ranking')"}
{"sample_id": 8072, "db_id": "university", "gold_sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1", "pred_sql": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1;"}
{"sample_id": 7989, "db_id": "university", "gold_sql": "SELECT COUNT(*) FROM university WHERE university_name LIKE '%State%'", "pred_sql": "SELECT COUNT(*) AS state_universities_count FROM university WHERE university_name LIKE '%State University%';"}
{"sample_id": 8087, "db_id": "university", "gold_sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings'", "pred_sql": "SELECT id FROM ranking_system WHERE system_name = 'Center for World University Rankings';"}
{"sample_id": 8056, "db_id": "university", "gold_sql": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of S\u00e3o Paulo'", "pred_sql": "SELECT country.country_name FROM university JOIN country ON university.country_id = country.id WHERE university.university_name = 'S\u00c3\u00a3o Paulo';"}
{"sample_id": 8064, "db_id": "university", "gold_sql": "SELECT T1.criteria_name, T2.score FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Harvard University' AND T2.year = 2005", "pred_sql": "SELECT rc.criteria_name, ur.score \nFROM university u \nJOIN university_ranking_year ur ON u.id = ur.university_id \nJOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id \nWHERE u.university_name = 'Harvard University' AND ur.year = '2005';"}
{"sample_id": 8001, "db_id": "university", "gold_sql": "SELECT COUNT(*) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id INNER JOIN university AS T3 ON T3.id = T2.university_id WHERE T3.university_name = 'Yale University' AND T2.score >= 10 AND T1.criteria_name = 'Quality of Education Rank'", "pred_sql": "SELECT COUNT(*) AS times_achieved FROM university u JOIN university_ranking_year ur ON u.id = ur.university_id JOIN ranking_criteria rc ON ur.ranking_criteria_id = rc.id WHERE u.university_name = 'Yale University' AND rc.criteria_name = 'Quality of Education Rank' AND ur.score >= '10';"}
{"sample_id": 8030, "db_id": "university", "gold_sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1", "pred_sql": "SELECT university_id FROM university_year WHERE year = 2011 ORDER BY num_students DESC LIMIT 1;"}
{"sample_id": 8112, "db_id": "university", "gold_sql": "SELECT AVG(score) FROM university_ranking_year WHERE year = 2012", "pred_sql": "SELECT AVG(score) AS average_score FROM university_ranking_year WHERE year = '2012';"}
{"sample_id": 8044, "db_id": "university", "gold_sql": "SELECT COUNT(*) FROM university_year AS T1 INNER JOIN university_ranking_year AS T2 ON T1.university_id = T2.university_id WHERE T2.score = 90 AND T1.year = 2011", "pred_sql": "SELECT SUM(num_students) AS total_students\nFROM university_year\nJOIN university ON university_year.university_id = university.id\nJOIN university_ranking_year ON university.id = university_ranking_year.university_id\nJOIN university_ranking_year AS ur ON ur.year = '2011' AND ur.score = '90'"}
{"sample_id": 8031, "db_id": "university", "gold_sql": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 50000 AND pct_international_students > 10", "pred_sql": "SELECT COUNT(*) AS institution_count \nFROM university_year \nWHERE year = 2011 \nAND num_students > 50000 \nAND pct_international_students > 10;"}
{"sample_id": 8105, "db_id": "university", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.university_name = 'University of Ottawa' THEN T1.num_students ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.university_name = 'Joseph Fourier University' THEN T1.num_students ELSE 0 END) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2013", "pred_sql": "SELECT (u1.num_students * 1.0 / u2.num_students) AS student_ratio\nFROM university_year u1\nJOIN university u ON u.id = u1.university_id\nWHERE u.university_name = 'University of Ottawa' AND u1.year = 2013,\n     university_year u2\nJOIN university u2 ON u2.id = u2.university_id\nWHERE u2.university_name = 'Joseph Fourier University' AND u2.year = 2013;"}
{"sample_id": 8027, "db_id": "university", "gold_sql": "SELECT SUM(num_students) FROM university_year WHERE year = 2011", "pred_sql": "SELECT SUM(num_students) AS total_students FROM university_year WHERE year = 2011;"}
{"sample_id": 8048, "db_id": "university", "gold_sql": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo'", "pred_sql": "SELECT country_id FROM university WHERE university_name = 'University of Tokyo';"}
{"sample_id": 8057, "db_id": "university", "gold_sql": "SELECT CAST(T2.num_students * T2.pct_international_students AS REAL) / 100 FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id WHERE T1.university_name = 'Harvard University' AND T2.year = 2012", "pred_sql": "SELECT num_students * (pct_international_students / 100) AS international_students\nFROM university_year\nJOIN university ON university_year.university_id = university.id\nWHERE university.university_name = 'Harvard University' AND university_year.year = 2012;"}
{"sample_id": 5950, "db_id": "books", "gold_sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) DESC LIMIT 1", "pred_sql": "SELECT shipping_method.method_name, COUNT(cust_order.order_id) AS order_count\nFROM cust_order\nJOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id\nGROUP BY shipping_method.method_name\nORDER BY order_count DESC\nLIMIT 1;"}
{"sample_id": 6095, "db_id": "books", "gold_sql": "SELECT T2.price FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.isbn13 = 9780763628321", "pred_sql": "SELECT ol.price FROM book b JOIN order_line ol ON b.book_id = ol.book_id WHERE b.isbn13 = '9780763628321';"}
{"sample_id": 6048, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'Akira Watanabe'", "pred_sql": "SELECT COUNT(b.book_id) AS available_books_count \nFROM book b \nJOIN book_author ba ON b.book_id = ba.book_id \nJOIN author a ON ba.author_id = a.author_id \nWHERE a.author_name = 'Akira Watanabe' AND b.publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Gravity');"}
{"sample_id": 6067, "db_id": "books", "gold_sql": "SELECT T2.country_name FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T1.street_number = 9 AND T1.street_name = 'Green Ridge Point' AND T1.city = 'Arendal'", "pred_sql": "SELECT country.country_name FROM address JOIN customer_address ON address.address_id = customer_address.address_id JOIN country ON address.country_id = country.country_id WHERE address.street_number = '9' AND address.street_name = 'Green Ridge Point' AND address.city = 'Arendal';"}
{"sample_id": 5988, "db_id": "books", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id WHERE STRFTIME('%Y', T1.order_date) = '2020'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cust_order WHERE strftime('%Y', order_date) = '2020')) AS international_shipping_percentage\nFROM cust_order\nJOIN shipping_method ON cust_order.shipping_method_id = shipping_method.method_id\nWHERE shipping_method.method_name = 'international' AND strftime('%Y', order_date) = '2020';"}
{"sample_id": 6080, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Free Press' AND STRFTIME('%Y', T1.publication_date) BETWEEN '1990' AND '2000' ORDER BY T1.num_pages DESC LIMIT 1", "pred_sql": "SELECT title FROM book WHERE num_pages = (SELECT MAX(num_pages) FROM book WHERE publication_date BETWEEN '1990-01-01' AND '2000-12-31' AND publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Free Press'))"}
{"sample_id": 6062, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Tom Clancy'", "pred_sql": "SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Tom Clancy';"}
{"sample_id": 5937, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T1.title = 'O Xar\u00e1'", "pred_sql": "SELECT COUNT(*) AS order_count FROM order_line ol JOIN book b ON ol.book_id = b.book_id WHERE b.title = 'O Xar\u00e1';"}
{"sample_id": 6026, "db_id": "books", "gold_sql": "SELECT street_number, street_name, city, country_id FROM address WHERE city = 'Lazaro Cardenas'", "pred_sql": "SELECT address.street_number || ' ' || address.street_name || ', ' || address.city || ', ' || country.country_name AS complete_address \nFROM address \nJOIN customer_address ON address.address_id = customer_address.address_id \nJOIN country ON address.country_id = country.country_id \nWHERE address.city = 'Lazaro Cardenas';"}
{"sample_id": 6001, "db_id": "books", "gold_sql": "SELECT T2.method_name FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id GROUP BY T2.method_name ORDER BY COUNT(T2.method_id) ASC LIMIT 1, 1", "pred_sql": "SELECT method_name FROM shipping_method WHERE method_id IN (SELECT method_id FROM cust_order GROUP BY shipping_method_id ORDER BY COUNT(*) ASC LIMIT 1 OFFSET 1)"}
{"sample_id": 5953, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'", "pred_sql": "SELECT COUNT(b.book_id) AS number_of_books\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'A.R. Braunmuller';"}
{"sample_id": 5954, "db_id": "books", "gold_sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Agatha Christie' ORDER BY T1.publication_date ASC LIMIT 1", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN book ON publisher.publisher_id = book.publisher_id JOIN book_author ON book.book_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Agatha Christie' ORDER BY book.publication_date ASC LIMIT 1;"}
{"sample_id": 6085, "db_id": "books", "gold_sql": "SELECT T4.country_name FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN country AS T4 ON T4.country_id = T3.country_id WHERE T1.email = 'rturbitT2@geocities.jp'", "pred_sql": "SELECT country.country_name FROM customer JOIN customer_address ON customer.customer_id = customer_address.customer_id JOIN address ON customer_address.address_id = address.address_id JOIN country ON address.country_id = country.country_id WHERE customer.email = 'rturbitt2@geocities.jp';"}
{"sample_id": 6096, "db_id": "books", "gold_sql": "SELECT T1.num_pages FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.order_id = 1167", "pred_sql": "SELECT b.num_pages FROM book b JOIN order_line ol ON b.book_id = ol.book_id JOIN cust_order co ON ol.order_id = co.order_id WHERE co.order_id = '1167';"}
{"sample_id": 6022, "db_id": "books", "gold_sql": "SELECT DISTINCT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Secret Garden'", "pred_sql": "SELECT publisher.publisher_name FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = 'The Secret Garden';"}
{"sample_id": 5963, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1", "pred_sql": "SELECT title FROM book ORDER BY price DESC LIMIT 1;"}
{"sample_id": 5997, "db_id": "books", "gold_sql": "SELECT COUNT(T2.country_id) FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Philippines'", "pred_sql": "SELECT COUNT(*) AS address_count FROM address WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Philippines')"}
{"sample_id": 6087, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'A.J. Ayer' ORDER BY T1.publication_date ASC LIMIT 1", "pred_sql": "SELECT b.title FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'A.J. Ayer' ORDER BY b.publication_date ASC LIMIT 1;"}
{"sample_id": 6052, "db_id": "books", "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date ASC LIMIT 1", "pred_sql": "SELECT publisher.publisher_name FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id ORDER BY book.publication_date ASC LIMIT 1;"}
{"sample_id": 6082, "db_id": "books", "gold_sql": "SELECT T3.street_number, T3.street_name, T3.city FROM customer AS T1 INNER JOIN customer_address AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T3.address_id = T2.address_id INNER JOIN address_status AS T4 ON T4.status_id = T2.status_id WHERE T1.first_name = 'Kandy'", "pred_sql": "SELECT a.street_number, a.street_name, a.city, c.country_name \nFROM customer c \nJOIN customer_address ca ON c.customer_id = ca.customer_id \nJOIN address a ON ca.address_id = a.address_id \nWHERE c.first_name = 'Kandy' AND ca.status_id = '1';"}
{"sample_id": 6084, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND STRFTIME('%Y', T2.status_date) = '2022'", "pred_sql": "SELECT COUNT(*) AS returned_orders_count \nFROM order_history oh \nJOIN cust_order co ON oh.order_id = co.order_id \nWHERE oh.status_id = (SELECT status_id FROM order_status WHERE status_value = 'returned') \nAND strftime('%Y', co.order_date) = '2022';"}
{"sample_id": 6013, "db_id": "books", "gold_sql": "SELECT DISTINCT T2.city FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'United States of America'", "pred_sql": "SELECT address.city FROM address JOIN customer_address ON address.address_id = customer_address.address_id JOIN country ON address.country_id = country.country_id WHERE country.country_name = 'United States of America';"}
{"sample_id": 5930, "db_id": "books", "gold_sql": "SELECT T1.title FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id WHERE T2.language_name = 'Japanese' ORDER BY T1.publication_date ASC LIMIT 1", "pred_sql": "SELECT title FROM book WHERE language_id = (SELECT language_id FROM book_language WHERE language_code = 'ja') ORDER BY publication_date ASC LIMIT 1;"}
{"sample_id": 5915, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Thomas Nelson'", "pred_sql": "SELECT COUNT(*) AS number_of_books FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Thomas Nelson');"}
{"sample_id": 6078, "db_id": "books", "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Season: A Candid Look at Broadway'", "pred_sql": "SELECT publisher.publisher_name FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id WHERE book.title = 'The Season: A Candid Look at Broadway';"}
{"sample_id": 5984, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND STRFTIME('%Y', T1.order_date) = '2021'", "pred_sql": "SELECT COUNT(cust_order.order_id) AS order_count \nFROM cust_order \nJOIN customer ON cust_order.customer_id = customer.customer_id \nWHERE customer.first_name = 'Daisey' AND customer.last_name = 'Lamball' \nAND strftime('%Y', cust_order.order_date) = '2021';"}
{"sample_id": 5931, "db_id": "books", "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id GROUP BY T2.publisher_name ORDER BY COUNT(T2.publisher_id) DESC LIMIT 1", "pred_sql": "SELECT publisher.publisher_name\nFROM publisher\nJOIN book ON publisher.publisher_id = book.publisher_id\nGROUP BY publisher.publisher_id\nORDER BY COUNT(book.book_id) DESC\nLIMIT 1;"}
{"sample_id": 6020, "db_id": "books", "gold_sql": "SELECT COUNT(T1.publication_date) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN order_line AS T4 ON T4.book_id = T1.book_id WHERE T3.author_name = 'Stephen King' ORDER BY T1.publication_date ASC LIMIT 1", "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS customer_count\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nJOIN customer c ON co.customer_id = c.customer_id\nWHERE a.author_name = 'Stephen King' AND b.title = (SELECT title FROM book WHERE author_id = (SELECT author_id FROM author WHERE author_name = 'Stephen King') LIMIT 1) LIMIT 1;"}
{"sample_id": 6019, "db_id": "books", "gold_sql": "SELECT T2.title FROM book_language AS T1 INNER JOIN book AS T2 ON T2.language_id = T1.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T1.language_name = 'Spanish' AND T3.publisher_name = 'Alfaguara' GROUP BY T2.title", "pred_sql": "SELECT book.title \nFROM book \nJOIN book_language ON book.language_id = book_language.language_id \nJOIN publisher ON book.publisher_id = publisher.publisher_id \nWHERE book_language.language_name = 'Spanish' AND publisher.publisher_name = 'Alfaguara';"}
{"sample_id": 6074, "db_id": "books", "gold_sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu'", "pred_sql": "SELECT first_name, last_name FROM customer WHERE email = 'ckupis4@tamu.edu';"}
{"sample_id": 6042, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id WHERE T1.language_name = 'Japanese'", "pred_sql": "SELECT COUNT(*) AS number_of_books FROM book WHERE language_id = (SELECT language_id FROM book_language WHERE language_code = 'ja');"}
{"sample_id": 6072, "db_id": "books", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'", "pred_sql": "SELECT (COUNT(b.book_id) * 100.0 / (SELECT COUNT(*) FROM book WHERE publisher_id = (SELECT publisher_id FROM publisher WHERE publisher_name = 'Viz Media'))) AS percentage FROM book b JOIN book_author ba ON b.book_id = ba.book_id JOIN author a ON ba.author_id = a.author_id WHERE a.author_name = 'Hirohiko';"}
{"sample_id": 6090, "db_id": "books", "gold_sql": "SELECT T3.first_name, T3.last_name FROM order_line AS T1 INNER JOIN cust_order AS T2 ON T2.order_id = T1.order_id INNER JOIN customer AS T3 ON T3.customer_id = T2.customer_id ORDER BY T1.price ASC LIMIT 1", "pred_sql": "SELECT c.first_name, c.last_name, o.order_id, ol.price \nFROM customer c \nJOIN cust_order o ON c.customer_id = o.customer_id \nJOIN order_line ol ON o.order_id = ol.order_id \nWHERE ol.price = (SELECT MIN(price) FROM order_line)"}
{"sample_id": 6023, "db_id": "books", "gold_sql": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN book_author AS T3 ON T3.book_id = T1.book_id INNER JOIN author AS T4 ON T4.author_id = T3.author_id WHERE T2.publisher_name = 'Scholastic' AND T4.author_name = 'J.K. Rowling'", "pred_sql": "SELECT COUNT(DISTINCT b.book_id) AS number_of_books\nFROM book b\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nJOIN publisher p ON b.publisher_id = p.publisher_id\nWHERE p.publisher_name = 'Scholastic' AND a.author_name = 'J.K Rowling';"}
{"sample_id": 5940, "db_id": "books", "gold_sql": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = '\u017dirovnica'", "pred_sql": "SELECT country.country_name FROM country JOIN address ON country.country_id = address.country_id WHERE address.city = '\u017dirovnica';"}
{"sample_id": 5919, "db_id": "books", "gold_sql": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.num_pages DESC LIMIT 1", "pred_sql": "SELECT publisher.publisher_name FROM book JOIN publisher ON book.publisher_id = publisher.publisher_id ORDER BY book.num_pages DESC LIMIT 1;"}
{"sample_id": 5981, "db_id": "books", "gold_sql": "SELECT T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T3.author_name = 'Barry Eisler'", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN book_author ON publisher.publisher_id = book_author.book_id JOIN author ON book_author.author_id = author.author_id WHERE author.author_name = 'Barry Eisler';"}
{"sample_id": 5995, "db_id": "books", "gold_sql": "SELECT T2.language_name FROM book AS T1 INNER JOIN book_language AS T2 ON T1.language_id = T2.language_id GROUP BY T2.language_name ORDER BY COUNT(T2.language_name) ASC LIMIT 1", "pred_sql": "SELECT language_name FROM book_language WHERE language_id NOT IN (SELECT language_id FROM book)"}
{"sample_id": 6068, "db_id": "books", "gold_sql": "SELECT T1.street_number, T1.street_name, T1.city FROM address AS T1 INNER JOIN country AS T2 ON T2.country_id = T1.country_id WHERE T2.country_name = 'Poland' LIMIT 10", "pred_sql": "SELECT * FROM address WHERE country_id = (SELECT country_id FROM country WHERE country_name = 'Poland') LIMIT 10;"}
{"sample_id": 6105, "db_id": "books", "gold_sql": "SELECT SUM(T1.num_pages) FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id INNER JOIN cust_order AS T3 ON T3.order_id = T2.order_id INNER JOIN customer AS T4 ON T4.customer_id = T3.customer_id WHERE T4.first_name = 'Mick' AND T4.last_name = 'Sever'", "pred_sql": "SELECT SUM(b.num_pages) AS total_pages\nFROM cust_order co\nJOIN order_line ol ON co.order_id = ol.order_id\nJOIN book b ON ol.book_id = b.book_id\nJOIN book_author ba ON b.book_id = ba.book_id\nJOIN author a ON ba.author_id = a.author_id\nWHERE a.author_name = 'Mick Sever';"}
{"sample_id": 5992, "db_id": "books", "gold_sql": "SELECT title FROM book WHERE STRFTIME('%Y', publication_date) = '1995'", "pred_sql": "SELECT * FROM book WHERE publication_date LIKE '1995%';"}
{"sample_id": 10259, "db_id": "superhero", "gold_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )", "pred_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)"}
{"sample_id": 10161, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'", "pred_sql": "SELECT superhero.superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'death touch';"}
{"sample_id": 10230, "db_id": "superhero", "gold_sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188", "pred_sql": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = '108' AND superhero.height_cm = '188';"}
{"sample_id": 10220, "db_id": "superhero", "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')", "pred_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');"}
{"sample_id": 10153, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'", "pred_sql": "SELECT COUNT(*) AS superhero_count FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics');"}
{"sample_id": 10214, "db_id": "superhero", "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'", "pred_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Abomination';"}
{"sample_id": 10257, "db_id": "superhero", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'", "pred_sql": "SELECT (COUNT(CASE WHEN a.alignment = 'Good' THEN 1 END) * 100.0 / COUNT(*)) AS good_superhero_percentage\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE p.publisher_name = 'Marvel Comics';"}
{"sample_id": 10168, "db_id": "superhero", "gold_sql": "SELECT AVG(attribute_value) FROM hero_attribute", "pred_sql": "SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute;"}
{"sample_id": 10171, "db_id": "superhero", "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'", "pred_sql": "SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Deathlok';"}
{"sample_id": 10189, "db_id": "superhero", "gold_sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id", "pred_sql": "SELECT AVG(weight_kg) AS average_weight FROM superhero WHERE skin_colour_id IS NULL OR skin_colour_id = '0';"}
{"sample_id": 10256, "db_id": "superhero", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'", "pred_sql": "SELECT (COUNT(CASE WHEN g.gender = 'female' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN gender g ON s.gender_id = g.id\nWHERE p.publisher_name = 'George Lucas';"}
{"sample_id": 10245, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'", "pred_sql": "SELECT COUNT(*) AS female_superhero_count FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'Marvel' AND gender.gender = 'female';"}
{"sample_id": 10200, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'", "pred_sql": "SELECT superhero.superhero_name \nFROM superhero \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE superpower.power_name = 'adaptation';"}
{"sample_id": 10201, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'", "pred_sql": "SELECT COUNT(hp.power_id) AS power_count FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id WHERE s.superhero_name = 'Amazo';"}
{"sample_id": 10187, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'", "pred_sql": "SELECT COUNT(DISTINCT superhero.id) AS hero_count FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth';"}
{"sample_id": 10255, "db_id": "superhero", "gold_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'", "pred_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';"}
{"sample_id": 10197, "db_id": "superhero", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'", "pred_sql": "SELECT (COUNT(CASE WHEN c.colour = 'blue' THEN 1 END) * 100.0 / COUNT(*)) AS blue_female_percentage\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE g.gender = 'female';"}
{"sample_id": 10218, "db_id": "superhero", "gold_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'", "pred_sql": "SELECT a.attribute_name, ha.attribute_value \nFROM superhero s \nJOIN hero_attribute ha ON s.id = ha.hero_id \nJOIN attribute a ON ha.attribute_id = a.id \nWHERE s.superhero_name = '3-D Man';"}
{"sample_id": 10216, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1", "pred_sql": "SELECT superhero.superhero_name, MAX(hero_attribute.attribute_value) AS max_speed\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'speed'\nGROUP BY superhero.superhero_name\nORDER BY max_speed DESC\nLIMIT 1;"}
{"sample_id": 10154, "db_id": "superhero", "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1", "pred_sql": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id ORDER BY superhero.weight_kg ASC LIMIT 1;"}
{"sample_id": 10222, "db_id": "superhero", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id", "pred_sql": "SELECT (COUNT(CASE WHEN c.colour = 'blue' THEN 1 END) * 100.0 / COUNT(*)) AS blue_eye_percentage FROM superhero s JOIN colour c ON s.eye_colour_id = c.id;"}
{"sample_id": 10150, "db_id": "superhero", "gold_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour", "pred_sql": "SELECT c.colour, COUNT(s.eye_colour_id) AS eye_color_count\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE p.publisher_name = 'Marvel Comics'\nGROUP BY c.colour\nORDER BY eye_color_count DESC;"}
{"sample_id": 10263, "db_id": "superhero", "gold_sql": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40", "pred_sql": "SELECT weight_kg, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.id = '40';"}
{"sample_id": 10141, "db_id": "superhero", "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200", "pred_sql": "SELECT COUNT(DISTINCT s.id) AS superhero_count\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;"}
{"sample_id": 10254, "db_id": "superhero", "gold_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "pred_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)"}
{"sample_id": 10146, "db_id": "superhero", "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'", "pred_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue') AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'blond');"}
{"sample_id": 10181, "db_id": "superhero", "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1", "pred_sql": "SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero)"}
{"sample_id": 5307, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.City = 'Folsom' AND T2.CreditCardType = 'Visa'", "pred_sql": "SELECT COUNT(DISTINCT c.customerid) AS preferred_visa_customers\nFROM customers c\nJOIN transaction t ON c.customerid = t.customerid\nWHERE c.city = 'Folsom' AND t.creditcardtype = 'Visa';"}
{"sample_id": 5294, "db_id": "beer_factory", "gold_sql": "SELECT * FROM ( SELECT T1.BrandName, T2.ContainerType FROM rootbeerbrand AS T1 INNER JOIN rootbeer AS T2 ON T1.BrandID = T2.BrandID ORDER BY T1.CurrentRetailPrice - T1.WholesaleCost DESC LIMIT 1 ) UNION ALL SELECT * FROM ( SELECT T3.BrandName, T4.ContainerType FROM rootbeerbrand AS T3 INNER JOIN rootbeer AS T4 ON T3.BrandID = T4.BrandID ORDER BY T3.CurrentRetailPrice - T3.WholesaleCost ASC LIMIT 1 )", "pred_sql": "SELECT r.containertype, rb.brandname, (rb.currentretailprice - rb.wholesalecost) AS unit_profit\nFROM rootbeer r\nJOIN rootbeerbrand rb ON r.brandid = rb.brandid\nORDER BY unit_profit DESC\nLIMIT 1;\n\nSELECT r.containertype, rb.brandname, (rb.currentretailprice - rb.wholesalecost) AS unit_profit\nFROM rootbeer r\nJOIN rootbeerbrand rb ON r.brandid = rb.brandid\nORDER BY unit_profit ASC\nLIMIT 1;"}
{"sample_id": 5328, "db_id": "beer_factory", "gold_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.CustomerID = 331115 AND T2.Review = 'Yuk, more like licorice soda.' AND T2.StarRating = 1", "pred_sql": "SELECT rb.brandname FROM rootbeerreview rbr JOIN rootbeerbrand rb ON rbr.brandid = rb.brandid WHERE rbr.customerid = '331115' AND rbr.starrating = 1 AND rbr.review = 'Yuk, more like licorice soda';"}
{"sample_id": 5271, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(TransactionID) FROM \"transaction\" WHERE CreditCardType = 'MasterCard' AND TransactionDate LIKE '2014%'", "pred_sql": "SELECT COUNT(*) AS transaction_count FROM transaction WHERE creditcardtype = 'MasterCard' AND transactiondate LIKE '2014%';"}
{"sample_id": 5279, "db_id": "beer_factory", "gold_sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T2.FacebookPage IS NULL AND T2.Twitter IS NULL GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "pred_sql": "SELECT rb.brandname, COUNT(t.transactionid) AS purchase_count\nFROM rootbeerbrand rb\nJOIN rootbeer r ON rb.brandid = r.brandid\nJOIN transaction t ON r.rootbeerid = t.rootbeerid\nWHERE rb.facebookpage IS NULL AND rb.twitter IS NULL\nGROUP BY rb.brandid\nORDER BY purchase_count DESC\nLIMIT 1;"}
{"sample_id": 5313, "db_id": "beer_factory", "gold_sql": "SELECT T3.Latitude FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN geolocation AS T3 ON T1.LocationID = T3.LocationID WHERE T2.BrandName = 'Thomas Kemper' GROUP BY T3.Latitude ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "pred_sql": "SELECT g.latitude, COUNT(t.transactionid) AS consumption_count\nFROM rootbeer r\nJOIN rootbeerbrand rb ON r.brandid = rb.brandid\nJOIN transaction t ON r.rootbeerid = t.rootbeerid\nJOIN location l ON r.locationid = l.locationid\nJOIN geolocation g ON l.locationid = g.locationid\nWHERE rb.brandname = 'Thomas Kemper'\nGROUP BY g.latitude\nORDER BY consumption_count DESC\nLIMIT 1;"}
{"sample_id": 5273, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID INNER JOIN location AS T3 ON T1.LocationID = T3.LocationID WHERE T3.LocationName = 'Sac State American River Courtyard' AND T1.PurchaseDate LIKE '2015%' AND T2.Honey = 'TRUE' AND T2.CaneSugar = 'FALSE' AND T1.ContainerType = 'Bottle'", "pred_sql": "SELECT COUNT(*) AS sweet_bottled_root_beers_purchased FROM rootbeer r JOIN rootbeerbrand rb ON r.brandid = rb.brandid JOIN location l ON r.locationid = l.locationid JOIN transaction t ON r.rootbeerid = t.rootbeerid WHERE rb.availableinbottles = 'true' AND rb.canesugar = 'false' AND t.transactiondate BETWEEN '2015-01-01' AND '2015-12-31' AND l.locationname = 'Sac State American River Courtyard';"}
{"sample_id": 5232, "db_id": "beer_factory", "gold_sql": "SELECT BrandName FROM rootbeerbrand WHERE FirstBrewedYear = ( SELECT MIN(FirstBrewedYear) FROM rootbeerbrand )", "pred_sql": "SELECT brandname FROM rootbeerbrand ORDER BY firstbrewedyear ASC LIMIT 1;"}
{"sample_id": 5259, "db_id": "beer_factory", "gold_sql": "SELECT T1.FirstPurchaseDate FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Review = 'Tastes like Australia.'", "pred_sql": "SELECT c.firstpurchasedate FROM customers c JOIN rootbeerreview r ON c.customerid = r.customerid WHERE r.review = 'Tastes like Australia.';"}
{"sample_id": 5287, "db_id": "beer_factory", "gold_sql": "SELECT CAST(COUNT(CASE WHEN ContainerType = 'Can' THEN RootBeerID ELSE NULL END) AS REAL) * 100 / COUNT(RootBeerID) FROM rootbeer WHERE PurchaseDate LIKE '2014%'", "pred_sql": "SELECT (COUNT(CASE WHEN containertype = 'cans' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_sold_in_cans\nFROM rootbeer r\nJOIN transaction t ON r.rootbeerid = t.rootbeerid\nWHERE strftime('%Y', t.transactiondate) = '2014';"}
{"sample_id": 5335, "db_id": "beer_factory", "gold_sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Kenneth' AND T1.Last = 'Walton'", "pred_sql": "SELECT creditcardtype FROM transaction JOIN customers ON transaction.customerid = customers.customerid WHERE first = 'Kenneth' AND last = 'Walton';"}
{"sample_id": 5351, "db_id": "beer_factory", "gold_sql": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Dick' AND T1.Last = 'Ruthven'", "pred_sql": "SELECT DISTINCT creditcardtype FROM transaction JOIN customers ON transaction.customerid = customers.customerid WHERE first = 'Dick' AND last = 'Ruthven';"}
{"sample_id": 5330, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(T1.TransactionID) FROM \"transaction\" AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.LocationName = 'Sac State Union' AND T1.CreditCardType = 'American Express' AND T1.TransactionDate BETWEEN '2014-01-01' AND '2014-12-31'", "pred_sql": "SELECT COUNT(*) AS transaction_count FROM transaction t JOIN location l ON t.locationid = l.locationid WHERE l.locationname = 'Sac State Union' AND t.creditcardtype = 'American Express' AND strftime('%Y', t.transactiondate) = '2014';"}
{"sample_id": 5358, "db_id": "beer_factory", "gold_sql": "SELECT T1.Email FROM customers AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.TransactionID = '100016'", "pred_sql": "SELECT email FROM customers WHERE customerid = (SELECT customerid FROM transaction WHERE transactionid = '100016');"}
{"sample_id": 5314, "db_id": "beer_factory", "gold_sql": "SELECT T2.StarRating FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.CornSyrup = 'TRUE' GROUP BY T2.StarRating ORDER BY COUNT(T2.StarRating) DESC LIMIT 1", "pred_sql": "SELECT starrating, COUNT(*) as count FROM rootbeerreview JOIN rootbeerbrand ON rootbeerreview.brandid = rootbeerbrand.brandid WHERE rootbeerbrand.cornsyrup = 'true' GROUP BY starrating ORDER BY count DESC LIMIT 1;"}
{"sample_id": 5341, "db_id": "beer_factory", "gold_sql": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE'", "pred_sql": "SELECT AVG(starrating) AS average_review FROM rootbeerreview INNER JOIN customers ON rootbeerreview.customerid = customers.customerid WHERE subscribedtoemaillist = 'true';"}
{"sample_id": 5291, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE' AND AvailableInCans = 'TRUE'", "pred_sql": "SELECT COUNT(DISTINCT brandid) AS brand_count FROM rootbeerbrand INNER JOIN rootbeer ON rootbeerbrand.brandid = rootbeer.brandid WHERE availableincans = 'true' AND cornsyrup = 'true' AND artificialsweetener = 'true';"}
{"sample_id": 5350, "db_id": "beer_factory", "gold_sql": "SELECT CAST(COUNT(CASE WHEN Gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(SubscribedToEmailList) FROM customers WHERE SubscribedToEmailList = 'TRUE'", "pred_sql": "SELECT (COUNT(CASE WHEN gender = 'female' AND subscribedtoemaillist = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS female_subscription_percentage FROM customers;"}
{"sample_id": 5331, "db_id": "beer_factory", "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM location AS T1 INNER JOIN geolocation AS T2 ON T1.LocationID = T2.LocationID WHERE T1.LocationName = 'Sac State Union'", "pred_sql": "SELECT latitude, longitude FROM geolocation INNER JOIN location ON geolocation.locationid = location.locationid WHERE locationname = 'Sac State Union';"}
{"sample_id": 5336, "db_id": "beer_factory", "gold_sql": "SELECT T4.ContainerType, T3.BrandName, T1.StarRating FROM rootbeerreview AS T1 INNER JOIN \"transaction\" AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID INNER JOIN rootbeer AS T4 ON T2.RootBeerID = T4.RootBeerID WHERE T2.RootBeerID = 100054", "pred_sql": "SELECT rootbeer.containertype, rootbeerbrand.brandname, rootbeerreview.starrating \nFROM rootbeer \nJOIN rootbeerbrand ON rootbeer.brandid = rootbeerbrand.brandid \nJOIN rootbeerreview ON rootbeer.brandid = rootbeerreview.brandid \nWHERE rootbeer.rootbeerid = '10054';"}
{"sample_id": 5312, "db_id": "beer_factory", "gold_sql": "SELECT T1.First, T1.Last FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.StarRating = 5", "pred_sql": "SELECT DISTINCT c.first, c.last FROM customers c JOIN rootbeerreview r ON c.customerid = r.customerid WHERE r.starrating = 5;"}
{"sample_id": 5263, "db_id": "beer_factory", "gold_sql": "SELECT T1.CurrentRetailPrice - T1.WholesaleCost AS price FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.Review = 'The quintessential dessert root beer. No ice cream required.'", "pred_sql": "SELECT rb.currentretailprice \nFROM rootbeerreview rbr \nJOIN rootbeer rb ON rbr.brandid = rb.brandid \nJOIN rootbeerbrand rbb ON rb.brandid = rbb.brandid \nWHERE rbr.review = 'The quintessential dessert root beer. No ice cream required.';"}
{"sample_id": 5361, "db_id": "beer_factory", "gold_sql": "SELECT DISTINCT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 LIMIT 3", "pred_sql": "SELECT rb.brandname FROM rootbeerbrand rb JOIN rootbeerreview rbr ON rb.brandid = rbr.brandid GROUP BY rb.brandid ORDER BY AVG(rbr.starrating) DESC LIMIT 3;"}
{"sample_id": 5283, "db_id": "beer_factory", "gold_sql": "SELECT T1.BrandName FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T2.StarRating = 5 GROUP BY T2.BrandID HAVING COUNT(T2.StarRating) >= 5", "pred_sql": "SELECT rb.brandname \nFROM rootbeerreview rbr \nJOIN rootbeerbrand rb ON rbr.brandid = rb.brandid \nWHERE rbr.starrating = 5 \nGROUP BY rb.brandid \nHAVING COUNT(rbr.customerid) >= 5;"}
{"sample_id": 5244, "db_id": "beer_factory", "gold_sql": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN \"transaction\" AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'Bulldog'", "pred_sql": "SELECT COUNT(*) AS total_purchases FROM transaction t JOIN rootbeer r ON t.rootbeerid = r.rootbeerid JOIN rootbeerbrand rb ON r.brandid = rb.brandid WHERE rb.brandname = 'Bulldog' AND strftime('%Y-%m', t.transactiondate) = '2014-08';"}
{"sample_id": 5289, "db_id": "beer_factory", "gold_sql": "SELECT BrandID FROM rootbeerreview WHERE StarRating = 1 GROUP BY BrandID ORDER BY COUNT(BrandID) DESC LIMIT 1", "pred_sql": "SELECT brandid FROM rootbeerreview WHERE starrating = 1 GROUP BY brandid ORDER BY COUNT(customerid) DESC LIMIT 1;"}
{"sample_id": 5274, "db_id": "beer_factory", "gold_sql": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1", "pred_sql": "SELECT rb.breweryname, COUNT(t.transactionid) AS purchase_count \nFROM transaction t \nJOIN rootbeer r ON t.rootbeerid = r.rootbeerid \nJOIN rootbeerbrand rb ON r.brandid = rb.brandid \nWHERE strftime('%Y', t.transactiondate) = '2016' \nGROUP BY rb.breweryname \nORDER BY purchase_count DESC \nLIMIT 1;"}
{"sample_id": 570, "db_id": "codebase_comments", "gold_sql": "SELECT RepoId FROM solution GROUP BY RepoId ORDER BY COUNT(Path) DESC LIMIT 1", "pred_sql": "SELECT repo.id FROM repo JOIN solution ON repo.id = solution.repid GROUP BY repo.id ORDER BY COUNT(solution.path) DESC LIMIT 1;"}
{"sample_id": 687, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111", "pred_sql": "SELECT COUNT(solution.path) AS solution_count FROM solution JOIN repo ON solution.repid = repo.id WHERE repo.stars = '111' AND repo.forks = '58' AND repo.watchers = '111';"}
{"sample_id": 579, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(DISTINCT T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Watchers = ( SELECT Watchers FROM Repo ORDER BY Watchers DESC LIMIT 1, 1 )", "pred_sql": "SELECT COUNT(path) AS solution_count FROM solution WHERE repoid = (SELECT id FROM repo ORDER BY stars DESC LIMIT 1 OFFSET 1);"}
{"sample_id": 671, "db_id": "codebase_comments", "gold_sql": "SELECT T2.ApiCalls, T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 10", "pred_sql": "SELECT apicalls FROM method WHERE id = '10';"}
{"sample_id": 624, "db_id": "codebase_comments", "gold_sql": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'sw'", "pred_sql": "SELECT s.path FROM solution s JOIN method m ON s.id = m.solutionid WHERE m.name LIKE '%sw%'"}
{"sample_id": 607, "db_id": "codebase_comments", "gold_sql": "SELECT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 45997", "pred_sql": "SELECT r.stars FROM repo r JOIN solution s ON r.id = s.repid WHERE s.id = '45997';"}
{"sample_id": 675, "db_id": "codebase_comments", "gold_sql": "SELECT NameTokenized FROM Method WHERE Name = 'Sky.Excel.ExcelBook.TypeConvert'", "pred_sql": "SELECT nametokenized FROM method WHERE name = 'Sky.Excel.ExcelBook.TypeConvert';"}
{"sample_id": 604, "db_id": "codebase_comments", "gold_sql": "SELECT FullComment FROM Method WHERE Name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows'", "pred_sql": "SELECT fullcomment FROM method WHERE name = 'DE2_UE_Fahrradkurier.de2_uebung_fahrradkurierDataSet1TableAdapters.TableAdapterManager.UpdateInsertedRows';"}
{"sample_id": 623, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 3060", "pred_sql": "SELECT COUNT(*) AS solution_count FROM solution WHERE repoid IN (SELECT id FROM repo WHERE stars = '3060');"}
{"sample_id": 683, "db_id": "codebase_comments", "gold_sql": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'graffen_NLog.Targets.SyslogsrcNLog.Targets.Syslog.sln'", "pred_sql": "SELECT m.name FROM method m JOIN solution s ON m.solutionid = s.id WHERE s.path = 'graffen_NLog.Targets.Syslog\\src\\NLog.Targets.Syslog.sln'"}
{"sample_id": 588, "db_id": "codebase_comments", "gold_sql": "SELECT CASE WHEN CommentIsXml = 0 THEN 'No' WHEN CommentIsXml = 1 THEN 'Yes' END isXMLFormat FROM Method WHERE Name = 'HtmlSharp.HtmlParser.Feed'", "pred_sql": "SELECT commentisxml FROM method WHERE name = 'HtmlSharp.HtmlParser.Feed';"}
{"sample_id": 618, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 189 AND T2.WasCompiled = 0", "pred_sql": "SELECT COUNT(*) AS solution_count FROM solution WHERE repoid = (SELECT id FROM repo WHERE stars = '189') AND wascompiled = '0';"}
{"sample_id": 666, "db_id": "codebase_comments", "gold_sql": "SELECT DISTINCT SUBSTR(SUBSTR(Name, INSTR(Name, '.') + 1), 1, INSTR(SUBSTR(Name, INSTR(Name, '.') + 1), '.') - 1) task FROM Method WHERE Lang = 'cs'", "pred_sql": "SELECT summary FROM method WHERE lang = 'cs';"}
{"sample_id": 651, "db_id": "codebase_comments", "gold_sql": "SELECT T1.Url FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 1", "pred_sql": "SELECT r.url FROM repo r JOIN solution s ON r.id = s.repid WHERE s.id = '1';"}
{"sample_id": 686, "db_id": "codebase_comments", "gold_sql": "SELECT DISTINCT T1.Stars FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'ninject_NinjectNinject.sln'", "pred_sql": "SELECT COUNT(*) AS likes FROM solution WHERE path = 'ninject_Ninject\\Ninject.sln'"}
{"sample_id": 590, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = ( SELECT MAX(Stars) FROM Repo )", "pred_sql": "SELECT COUNT(DISTINCT s.id) AS solution_count\nFROM solution s\nJOIN repo r ON s.repid = r.id\nWHERE r.stars = (SELECT MAX(stars) FROM repo);"}
{"sample_id": 577, "db_id": "codebase_comments", "gold_sql": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1", "pred_sql": "SELECT r.id, COUNT(s.path) AS solution_count\nFROM repo r\nJOIN solution s ON r.id = s.repid\nWHERE r.stars BETWEEN 6000 AND 9000 AND s.wascompiled = '0'\nGROUP BY r.id\nORDER BY solution_count DESC\nLIMIT 1;"}
{"sample_id": 665, "db_id": "codebase_comments", "gold_sql": "SELECT Url FROM Repo WHERE Watchers = ( SELECT MAX(Watchers) FROM Repo )", "pred_sql": "SELECT url FROM repo ORDER BY stars DESC LIMIT 1;"}
{"sample_id": 635, "db_id": "codebase_comments", "gold_sql": "SELECT DISTINCT T1.RepoId FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'ro'", "pred_sql": "SELECT DISTINCT r.id FROM repo r JOIN solution s ON r.id = s.repid JOIN method m ON s.id = m.solutionid WHERE m.name LIKE '%ro%';"}
{"sample_id": 581, "db_id": "codebase_comments", "gold_sql": "SELECT T2.FullComment FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'bmatzelle_niniSourceNini.sln' AND T2.NameTokenized = 'alias text add alias'", "pred_sql": "SELECT m.fullcomment FROM method m JOIN solution s ON m.solutionid = s.id WHERE s.path = 'bmatzelle_nini\\Source\\Nini.sln' AND m.nametokenized = 'alias text add alias';"}
{"sample_id": 677, "db_id": "codebase_comments", "gold_sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Path = 'maff_se3ue7US7.sln'", "pred_sql": "SELECT r.watchers FROM solution s JOIN repo r ON s.repid = r.id WHERE s.path = 'maff_se3ue7\\US7.sln';"}
{"sample_id": 649, "db_id": "codebase_comments", "gold_sql": "SELECT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'wallerdev_htmlsharpHtmlSharp.sln'", "pred_sql": "SELECT m.name FROM method m JOIN solution s ON m.solutionid = s.id WHERE s.path = 'wallerdev_htmlsharp\\HtmlSharp.sln';"}
{"sample_id": 617, "db_id": "codebase_comments", "gold_sql": "SELECT T1.Watchers FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 338082", "pred_sql": "SELECT r.watchers FROM repo r JOIN solution s ON r.id = s.repid WHERE s.id = '338082';"}
{"sample_id": 661, "db_id": "codebase_comments", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Id = 1 THEN T1.Stars ELSE 0 END) - SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Id = 2 THEN T1.Stars ELSE 0 END) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId", "pred_sql": "SELECT ((r1.stars - r2.stars) / r2.stars) * 100 AS percentage_difference\nFROM solution s1\nJOIN repo r1 ON s1.repid = r1.id\nJOIN solution s2 ON s2.id = '2'\nJOIN repo r2 ON s2.repid = r2.id\nWHERE s1.id = '1';"}
{"sample_id": 644, "db_id": "codebase_comments", "gold_sql": "SELECT T1.Forks FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T2.Id = 35", "pred_sql": "SELECT forks FROM repo WHERE id = (SELECT repoid FROM solution WHERE id = '35');"}
{"sample_id": 593, "db_id": "codebase_comments", "gold_sql": "SELECT COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Forks > 1000 AND T2.WasCompiled = 1", "pred_sql": "SELECT COUNT(*) AS implementable_solutions\nFROM solution s\nJOIN repo r ON s.repid = r.id\nWHERE r.watchers > 1000 AND s.wascompiled = '1';"}
{"sample_id": 4340, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2008' AND T2.stars > 5;", "pred_sql": "SELECT COUNT(*) AS episode_count FROM vote JOIN episode ON vote.episode_id = episode.episode_id WHERE vote.stars > 5 AND strftime('%Y', episode.air_date) = '2008';"}
{"sample_id": 4324, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.keyword FROM Award AS T1 INNER JOIN Keyword AS T2 ON T2.episode_id = T1.episode_id WHERE T1.award_category = 'WGA Award (TV)';", "pred_sql": "SELECT k.keyword \nFROM award a \nJOIN character_award ca ON a.award_id = ca.award_id \nJOIN keyword k ON a.episode_id = k.episode_id \nWHERE a.award = 'WGA Award (TV)' AND a.result = 'Winner';"}
{"sample_id": 4253, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Double, Double, Boy in Trouble';", "pred_sql": "SELECT keyword FROM keyword JOIN episode ON keyword.episode_id = episode.episode_id WHERE episode.title = 'Double, Double, Boy in Trouble';"}
{"sample_id": 4172, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 7 ORDER BY T2.votes DESC LIMIT 1;", "pred_sql": "SELECT e.title \nFROM episode e \nJOIN vote v ON e.episode_id = v.episode_id \nWHERE v.stars = '7' \nORDER BY v.votes DESC \nLIMIT 1;"}
{"sample_id": 4261, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T1.episode_id FROM Award AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.role = 'composer' AND T1.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' AND T2.votes > 200;", "pred_sql": "SELECT e.title, e.air_date \nFROM episode e \nJOIN award a ON e.episode_id = a.episode_id \nJOIN credit c ON e.episode_id = c.episode_id \nWHERE a.award = 'Outstanding Music Composition for a Series (Original Dramatic Score)' \nAND a.result = 'Winner' \nAND c.role = 'Composer' \nAND e.votes > 200;"}
{"sample_id": 4245, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT person FROM Credit WHERE role = 'producer';", "pred_sql": "SELECT DISTINCT person.name FROM credit JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'The simpson 20s' AND episode.season = '20' AND credit.role = 'producer';"}
{"sample_id": 4284, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 2 AND T2.votes > 20 AND T1.rating > 5.0 AND T1.rating <= 7.0;", "pred_sql": "SELECT e.episode_id, e.title, e.rating, v.votes \nFROM episode e \nJOIN vote v ON e.episode_id = v.episode_id \nWHERE e.rating > 5.0 AND e.rating <= 7.0 \nAND v.stars = '2' \nAND v.votes > 20;"}
{"sample_id": 4238, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Take My Life, Please';", "pred_sql": "SELECT keyword FROM keyword JOIN episode ON keyword.episode_id = episode.episode_id WHERE episode.title = 'Take My Life, Please';"}
{"sample_id": 4193, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 10 ORDER BY T1.votes DESC LIMIT 1;", "pred_sql": "SELECT episode_id, title, votes FROM episode JOIN vote ON episode.episode_id = vote.episode_id WHERE stars = '10' ORDER BY votes DESC LIMIT 1;"}
{"sample_id": 4208, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.birth_place FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Best Voice-Over Performance' AND T2.organization = 'Online Film & Television Association' AND T2.year = 2009;", "pred_sql": "SELECT p.birth_place FROM person p JOIN award a ON p.name = a.person WHERE a.award = 'Best Voice-Over Performance' AND a.organization = 'Online Film & Television Association' AND a.year = 2009 AND a.result = 'Winner';"}
{"sample_id": 4222, "db_id": "simpson_episodes", "gold_sql": "SELECT T3.person, T1.keyword, T1.episode_id FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id WHERE T2.title = 'The Good, the Sad and the Drugly' AND T3.result = 'Nominee';", "pred_sql": "SELECT p.name AS nominee, k.keyword, e.episode_id \nFROM award a \nJOIN person p ON a.person = p.name \nJOIN episode e ON a.episode_id = e.episode_id \nJOIN keyword k ON e.episode_id = k.episode_id \nWHERE e.title = 'The Good, the Sad and the Drugly' AND a.result = 'Nominee';"}
{"sample_id": 4259, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.year, 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;", "pred_sql": "SELECT DISTINCT c.person \nFROM credit c \nJOIN episode e ON c.episode_id = e.episode_id \nJOIN vote v ON e.episode_id = v.episode_id \nWHERE c.role = 'writer' \nAND v.stars > 5 \nAND e.air_date LIKE '2009%'"}
{"sample_id": 4258, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'director' AND T1.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' AND T2.title = 'No Loan Again, Naturally';", "pred_sql": "SELECT DISTINCT p.name \nFROM person p \nJOIN award a ON p.name = a.person \nJOIN episode e ON a.episode_id = e.episode_id \nWHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)' \nAND e.title = 'No Loan Again, Naturally';"}
{"sample_id": 4357, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.percent FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T1.votes BETWEEN 950 AND 960;", "pred_sql": "SELECT v.percent FROM vote v JOIN episode e ON v.episode_id = e.episode_id WHERE e.air_date LIKE '2008%' AND v.votes BETWEEN 920 AND 950;"}
{"sample_id": 4364, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;", "pred_sql": "SELECT DISTINCT a.award_category \nFROM award a \nJOIN episode e ON a.episode_id = e.episode_id \nWHERE e.episode_id = (SELECT episode_id \n                      FROM vote \n                      ORDER BY votes DESC \n                      LIMIT 1);"}
{"sample_id": 4310, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.category = 'Casting Department';", "pred_sql": "SELECT COUNT(DISTINCT person.name) AS crew_member_count FROM credit JOIN episode ON credit.episode_id = episode.episode_id WHERE credit.category = 'Casting Department';"}
{"sample_id": 4268, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Award WHERE role = 'executive producer' AND result = 'Nominee' AND award = 'Outstanding Animated Program (For Programming Less Than One Hour)';", "pred_sql": "SELECT COUNT(DISTINCT c.person) AS executive_producer_nominees\nFROM award a\nJOIN credit c ON a.episode_id = c.episode_id\nWHERE a.award = 'Outstanding Animated Program (For Programming Less Than One Hour)'\nAND a.role = 'Nominee'\nAND c.role = 'Executive Producer';"}
{"sample_id": 4337, "db_id": "simpson_episodes", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.height_meters > 1.75 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';", "pred_sql": "SELECT COUNT(DISTINCT a.person) * 1.0 / (SELECT COUNT(DISTINCT a2.person) FROM award a2 WHERE a2.result = 'Winner') AS percentage_winners_higher_than_1_75_meters\nFROM award a\nJOIN person p ON a.person = p.name\nWHERE p.height_meters > 1.75 AND a.result = 'Winner';"}
{"sample_id": 4205, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.year - CAST(SUBSTR(T1.birthdate, 1, 4) AS int) AS age FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award = 'Outstanding Voice-Over Performance' AND T2.organization = 'Primetime Emmy Awards' AND T2.result = 'Winner';", "pred_sql": "SELECT MIN(year) - birthdate AS age_at_award FROM award JOIN person ON award.person = person.name WHERE award.award = 'Outstanding Voice-Over Performance' AND award.organization = 'Primetime Emmy Awards';"}
{"sample_id": 4225, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T3.episode_id, T2.title, T1.keyword FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 ORDER BY T3.votes DESC LIMIT 3;", "pred_sql": "SELECT e.episode_id, e.title, k.keyword \nFROM episode e \nJOIN vote v ON e.episode_id = v.episode_id \nJOIN keyword k ON e.episode_id = k.episode_id \nWHERE v.stars = 1 \nORDER BY v.votes DESC \nLIMIT 1;"}
{"sample_id": 4174, "db_id": "simpson_episodes", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.award_category = 'Primetime Emmy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.rating > 7 AND T1.result = 'Nominee';", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM episode WHERE rating > 7)) AS percentage\nFROM award\nJOIN episode ON award.episode_id = episode.episode_id\nWHERE award.award = 'Primetime Emmy' AND episode.rating > 7;"}
{"sample_id": 4167, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';", "pred_sql": "SELECT e.rating FROM episode e JOIN award a ON e.episode_id = a.episode_id WHERE a.person = 'Dan Castellaneta' AND a.award = 'Outstanding Voice-Over Performance' AND a.year = 2009;"}
{"sample_id": 4296, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.person FROM Credit AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.role = 'Writer' AND T2.stars = 10 GROUP BY T1.person ORDER BY COUNT(*) DESC LIMIT 1;", "pred_sql": "SELECT person.name FROM credit JOIN vote ON credit.episode_id = vote.episode_id WHERE credit.role = 'writer' AND vote.stars = '10' ORDER BY vote.votes DESC LIMIT 1;"}
{"sample_id": 4166, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';", "pred_sql": "SELECT COUNT(keyword) AS keyword_count FROM keyword WHERE episode_id IN (SELECT episode_id FROM episode WHERE air_date = '2008-10-19')"}
{"sample_id": 4319, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.keyword, T2.person FROM Keyword AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode_id = 'S20-E1';", "pred_sql": "SELECT k.keyword, p.name \nFROM keyword k \nJOIN credit c ON k.episode_id = c.episode_id \nJOIN person p ON c.person = p.name \nWHERE k.episode_id = 'S20-E1';"}
{"sample_id": 4344, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T1.person FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Smithers';", "pred_sql": "SELECT person.name FROM credit JOIN person ON credit.person = person.name WHERE credit.role = 'Smithers';"}
{"sample_id": 4189, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.year = 2009 AND T2.award = 'Comedy Series' AND T1.birth_region = 'California';", "pred_sql": "SELECT COUNT(DISTINCT p.name) AS num_nominated_in_california\nFROM award a\nJOIN person p ON a.person = p.name\nWHERE a.award_category = 'Comedy Series' AND a.year = 2009 AND p.birth_place = 'California';"}
{"sample_id": 4327, "db_id": "simpson_episodes", "gold_sql": "SELECT SUM(T2.rating) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award_category IN ('Jupiter Award ', 'WGA Award (TV)');", "pred_sql": "SELECT SUM(e.rating) AS total_rating\nFROM award a\nJOIN episode e ON a.episode_id = e.episode_id\nWHERE a.award IN ('OFTA Television Award', 'WGA Award') AND a.result = 'Winner';"}
{"sample_id": 4188, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.year = 2009 AND T1.award = 'Outstanding Voice-Over Performance';", "pred_sql": "SELECT character FROM character_award INNER JOIN award ON character_award.award_id = award.award_id WHERE award.award = 'Outstanding Voice-Over Performance' AND award.year = 2009;"}
{"sample_id": 4216, "db_id": "simpson_episodes", "gold_sql": "SELECT name, birthdate FROM Person WHERE birth_place = 'Los Angeles' AND height_meters >= 1.8;", "pred_sql": "SELECT name, birthdate FROM person WHERE birth_place = 'Los Angeles' AND height_meters >= '1.8'"}
{"sample_id": 4360, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 1000 AND T1.award_category = 'WGA Award (TV)' AND T1.result = 'Nominee';", "pred_sql": "SELECT e.title FROM episode e JOIN award a ON e.episode_id = a.episode_id WHERE a.award = 'WGA Award (TV)' AND e.votes > 1000;"}
{"sample_id": 4306, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(name) FROM Person WHERE birth_region != 'Connecticut' AND birth_country != 'USA';", "pred_sql": "SELECT COUNT(*) AS not_born_in_connecticut FROM person WHERE birth_country != 'USA' OR (birth_country = 'USA' AND birth_region != 'Connecticut');"}
{"sample_id": 4211, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T1.birth_country = 'USA' AND T2.result = 'Winner';", "pred_sql": "SELECT COUNT(DISTINCT a.person) AS award_winner_count \nFROM award a \nJOIN person p ON a.person = p.name \nWHERE p.birth_country = 'USA' AND a.result = 'Winner';"}
{"sample_id": 4179, "db_id": "simpson_episodes", "gold_sql": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';", "pred_sql": "SELECT episode.title, keyword.keyword FROM episode JOIN keyword ON episode.episode_id = keyword.episode_id WHERE episode.air_date = '2009-03-22';"}
{"sample_id": 4173, "db_id": "simpson_episodes", "gold_sql": "SELECT CAST(SUM(T2.votes * T2.stars) AS REAL) / SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon';", "pred_sql": "SELECT AVG(stars) AS average_stars FROM vote WHERE episode_id IN (SELECT episode_id FROM episode WHERE title = 'Lost Verizon');"}
{"sample_id": 4196, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(DISTINCT T2.role) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.episode = 5;", "pred_sql": "SELECT COUNT(role) AS role_count FROM credit WHERE episode_id = 'S20E5';"}
{"sample_id": 4275, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T2.character FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T1.award LIKE '%Voice-Over%' AND T1.person = 'Dan Castellaneta';", "pred_sql": "SELECT character_award.character \nFROM character_award \nJOIN award ON character_award.award_id = award.award_id \nJOIN credit ON award.episode_id = credit.episode_id \nJOIN person ON credit.person = person.name \nWHERE person.name = 'Dan Castellaneta';"}
{"sample_id": 4204, "db_id": "simpson_episodes", "gold_sql": "SELECT COUNT(*) FROM Credit WHERE person = 'Dell Hake' AND credited = 'false';", "pred_sql": "SELECT COUNT(*) AS episode_count FROM episode WHERE episode_id NOT IN (SELECT episode_id FROM credit WHERE person = 'Dell Hake');"}
{"sample_id": 4280, "db_id": "simpson_episodes", "gold_sql": "SELECT SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lisa the Drama Queen' AND T2.stars = 5;", "pred_sql": "SELECT votes FROM vote WHERE episode_id = (SELECT episode_id FROM episode WHERE title = 'Lisa the Drama Queen') AND stars = '5';"}
{"sample_id": 4283, "db_id": "simpson_episodes", "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id ORDER BY T1.votes LIMIT 1;", "pred_sql": "SELECT keyword.keyword FROM keyword JOIN episode ON keyword.episode_id = episode.episode_id ORDER BY episode.votes ASC LIMIT 1;"}
{"sample_id": 4342, "db_id": "simpson_episodes", "gold_sql": "SELECT DISTINCT T1.year FROM Award AS T1 INNER JOIN Character_Award AS T2 ON T1.award_id = T2.award_id WHERE T2.character = 'Mr. Burns';", "pred_sql": "SELECT DISTINCT year FROM award INNER JOIN character_award ON award.award_id = character_award.award_id WHERE character = 'Mr. Burns' AND result = 'Winner';"}
{"sample_id": 4363, "db_id": "simpson_episodes", "gold_sql": "SELECT T3.title FROM Award AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Episode AS T3 ON T1.episode_id = T3.episode_id WHERE T3.air_date = '2009-04-19' AND T1.award_category = 'Prism Award' AND T2.stars = 5 AND T1.result = 'Nominee';", "pred_sql": "SELECT e.title FROM episode e JOIN award a ON e.episode_id = a.episode_id WHERE e.episode_id IN (SELECT v.episode_id FROM vote v WHERE v.stars = 5) AND a.award = 'Prism Award' AND e.air_date = '2009-04-19';"}
{"sample_id": 9600, "db_id": "financial", "gold_sql": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9", "pred_sql": "SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 9;"}
{"sample_id": 9593, "db_id": "financial", "gold_sql": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district", "pred_sql": "SELECT (SELECT a16 FROM district WHERE a3 = 'East Bohemia') - (SELECT a16 FROM district WHERE a3 = 'North Bohemia') AS crime_difference;"}
{"sample_id": 9607, "db_id": "financial", "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'", "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE a2 = 'Prague')) AS female_proportion FROM client WHERE gender = 'F' AND district_id = (SELECT district_id FROM district WHERE a2 = 'Prague');"}
{"sample_id": 9536, "db_id": "financial", "gold_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1", "pred_sql": "SELECT account.account_id FROM account JOIN client ON account.account_id = disp.account_id JOIN disp ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Prague' ORDER BY account.date ASC LIMIT 1;"}
{"sample_id": 9571, "db_id": "financial", "gold_sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000", "pred_sql": "SELECT DISTINCT a.frequency, d.a11 AS average_income\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.account_id NOT IN (SELECT account_id FROM loan)\nAND d.a11 > 8000 AND d.a11 <= 9000;"}
{"sample_id": 9580, "db_id": "financial", "gold_sql": "SELECT T3.district_id FROM \"order\" AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333", "pred_sql": "SELECT a.district_id FROM account a JOIN `order` o ON a.account_id = o.account_id WHERE o.order_id = 33333;"}
{"sample_id": 9598, "db_id": "financial", "gold_sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992", "pred_sql": "SELECT SUM(loan.amount) AS total_debt, loan.status FROM loan JOIN disp ON loan.account_id = disp.account_id WHERE disp.client_id = 992 GROUP BY loan.status;"}
{"sample_id": 9585, "db_id": "financial", "gold_sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1", "pred_sql": "SELECT district.district_id, COUNT(account.account_id) AS account_count\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE loan.status = 'A'\nGROUP BY district.district_id\nORDER BY account_count DESC\nLIMIT 1;"}
{"sample_id": 9551, "db_id": "financial", "gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10", "pred_sql": "SELECT d.a2 AS district_name, SUM(t.amount) AS total_withdrawals \nFROM trans t \nJOIN account a ON t.account_id = a.account_id \nJOIN district d ON a.district_id = d.district_id \nWHERE t.type = 'VYDAJ' \nAND t.date BETWEEN '960101' AND '960131' \nGROUP BY d.a2 \nORDER BY total_withdrawals DESC \nLIMIT 10;"}
{"sample_id": 9616, "db_id": "financial", "gold_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'", "pred_sql": "SELECT c.client_id, (strftime('%Y', 'now') - (c.birth_date / 10000)) AS age\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN card ca ON d.disp_id = ca.disp_id\nJOIN loan l ON d.account_id = l.account_id\nWHERE ca.type = 'gold' AND l.status IN ('C', 'A');"}
{"sample_id": 9613, "db_id": "financial", "gold_sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'", "pred_sql": "SELECT COUNT(DISTINCT loan.account_id) AS loan_count \nFROM loan \nJOIN account ON loan.account_id = account.account_id \nWHERE loan.duration = 24 \nAND account.frequency = 'weekly' \nAND loan.status IN ('C', 'D');"}
{"sample_id": 9518, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'", "pred_sql": "SELECT COUNT(DISTINCT c.client_id) AS owner_count\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nWHERE a.frequency = 'weekly' AND d.type = 'OWNER';"}
{"sample_id": 9581, "db_id": "financial", "gold_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'", "pred_sql": "SELECT * FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 3356) AND type = 'VYDAJ' AND operation = 'VYBER';"}
{"sample_id": 9529, "db_id": "financial", "gold_sql": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1", "pred_sql": "SELECT c.gender FROM client c JOIN account a ON c.client_id = (SELECT d.client_id FROM disp d JOIN account a2 ON d.account_id = a2.account_id WHERE a2.date = (SELECT MIN(date) FROM account) ORDER BY a2.date ASC LIMIT 1) JOIN district d ON c.district_id = d.district_id WHERE d.a11 = (SELECT MAX(a11) FROM district);"}
{"sample_id": 9554, "db_id": "financial", "gold_sql": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'", "pred_sql": "SELECT AVG(loan.amount) AS average_loan_amount\nFROM loan\nJOIN disp ON loan.account_id = disp.account_id\nJOIN client ON disp.client_id = client.client_id\nWHERE client.gender = 'M';"}
{"sample_id": 9531, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'", "pred_sql": "SELECT COUNT(DISTINCT c.client_id) AS female_clients_count\nFROM client c\nJOIN account a ON c.client_id = (SELECT d.client_id FROM disp d WHERE d.account_id = a.account_id)\nJOIN district d ON c.district_id = d.district_id\nWHERE c.gender = 'F' AND d.a2 = 'Jesenik';"}
{"sample_id": 9591, "db_id": "financial", "gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'", "pred_sql": "SELECT (SUM(CASE WHEN date BETWEEN 960101 AND 961231 THEN amount ELSE 0 END) - SUM(CASE WHEN date BETWEEN 970101 AND 971231 THEN amount ELSE 0 END)) / SUM(CASE WHEN date BETWEEN 970101 AND 971231 THEN amount ELSE 0 END) * 100 AS growth_rate\nFROM loan\nJOIN disp ON loan.account_id = disp.account_id\nJOIN client ON disp.client_id = client.client_id\nWHERE client.gender = 'M';"}
{"sample_id": 9547, "db_id": "financial", "gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'", "pred_sql": "SELECT d.district_id, (d.a13 - d.a12) AS unemployment_rate_increment\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN disp di ON a.account_id = di.account_id\nJOIN client c ON di.client_id = c.client_id\nJOIN district d ON c.district_id = d.district_id\nWHERE l.status = 'D'"}
{"sample_id": 9587, "db_id": "financial", "gold_sql": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5", "pred_sql": "SELECT trans.* FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.district_id = '5';"}
{"sample_id": 9549, "db_id": "financial", "gold_sql": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'", "pred_sql": "SELECT account_id FROM account WHERE frequency = 'monthly';"}
{"sample_id": 9526, "db_id": "financial", "gold_sql": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'", "pred_sql": "SELECT a.date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.amount = 840 AND t.date = '981014';"}
{"sample_id": 9576, "db_id": "financial", "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'", "pred_sql": "SELECT COUNT(*) AS male_client_count FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE a2 = 'Hl.m. Praha');"}
{"sample_id": 717, "db_id": "trains", "gold_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1", "pred_sql": "SELECT trains.direction, COUNT(*) as train_count\nFROM cars\nJOIN trains ON cars.train_id = trains.id\nWHERE cars.shape = 'rectangle' AND cars.position = '2'\nGROUP BY trains.direction\nORDER BY train_count DESC\nLIMIT 1;"}
{"sample_id": 702, "db_id": "trains", "gold_sql": "SELECT SUM(CASE WHEN T1.len = 'short' then 1 ELSE 0 END)as count FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east'", "pred_sql": "SELECT COUNT(*) AS total_short_cars FROM cars JOIN trains ON cars.train_id = trains.id WHERE cars.len = 'short' AND trains.direction = 'east';"}
{"sample_id": 709, "db_id": "trains", "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.direction = 'east' THEN T1.train_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.shape IN ('bucket', 'ellipse')", "pred_sql": "SELECT (COUNT(DISTINCT trains.id) * 100.0 / (SELECT COUNT(DISTINCT id) FROM trains)) AS east_percentage\nFROM trains\nJOIN cars ON trains.id = cars.train_id\nWHERE trains.direction = 'east' AND cars.shape NOT IN ('rectangle', 'u_shaped', 'hexagon')\nGROUP BY trains.id;"}
{"sample_id": 722, "db_id": "trains", "gold_sql": "SELECT COUNT(DISTINCT T1.train_id) FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 1 AND T1.load_num = 3", "pred_sql": "SELECT COUNT(DISTINCT trains.id) AS train_count FROM trains JOIN cars ON trains.id = cars.train_id WHERE cars.position = '1' AND cars.load_num = '3' AND trains.direction = '1';"}
{"sample_id": 698, "db_id": "trains", "gold_sql": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'", "pred_sql": "SELECT cars.id FROM cars JOIN trains ON cars.train_id = trains.id WHERE cars.sides = 'double' AND trains.direction = 'west';"}
{"sample_id": 706, "db_id": "trains", "gold_sql": "SELECT T1.direction FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS rectCarsNum FROM cars WHERE shape = 'rectangle' GROUP BY train_id ) AS T2 ON T1.id = T2.train_id ORDER BY T2.rectCarsNum DESC", "pred_sql": "SELECT trains.direction, COUNT(cars.id) AS rectangle_car_count\nFROM trains\nJOIN cars ON trains.id = cars.train_id\nWHERE cars.shape = 'rectangle'\nGROUP BY trains.direction;"}
{"sample_id": 716, "db_id": "trains", "gold_sql": "SELECT SUM(CASE WHEN T1.direction = 'east' THEN 1 ELSE 0 END)as count FROM trains AS T1 INNER JOIN ( SELECT train_id, COUNT(id) AS carsNum FROM cars GROUP BY train_id ) AS T2 ON T1.id = T2.train_id WHERE T2.carsNum >= 4", "pred_sql": "SELECT COUNT(DISTINCT trains.id) AS train_count\nFROM trains\nJOIN cars ON trains.id = cars.train_id\nWHERE trains.direction = 'east'\nGROUP BY trains.id\nHAVING COUNT(cars.id) >= 4;"}
{"sample_id": 725, "db_id": "trains", "gold_sql": "SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'diamond'", "pred_sql": "SELECT trains.direction FROM trains JOIN cars ON trains.id = cars.train_id WHERE cars.load_shape = 'diamond' AND cars.position = '2';"}
{"sample_id": 8156, "db_id": "sales_in_weather", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.\"date\" LIKE '%2012%' )", "pred_sql": "SELECT (SUM(CASE WHEN item_nbr = '5' THEN units ELSE 0 END) * 100.0 / SUM(units)) AS percentage_units_sold\nFROM sales_in_weather\nWHERE store_nbr = '3' AND date = (\n    SELECT date\n    FROM weather\n    WHERE strftime('%Y', date) = '2012'\n    ORDER BY tmax DESC\n    LIMIT 1\n)"}
{"sample_id": 8181, "db_id": "sales_in_weather", "gold_sql": "SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1", "pred_sql": "SELECT station_nbr, COUNT(store_nbr) AS store_count FROM relation GROUP BY station_nbr ORDER BY store_count DESC LIMIT 1;"}
{"sample_id": 8189, "db_id": "sales_in_weather", "gold_sql": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T1.item_nbr = 45 AND T2.station_nbr = 17 AND T1.\"date\" LIKE '%2012-10%' GROUP BY T1.store_nbr ORDER BY SUM(T1.units) DESC LIMIT 1", "pred_sql": "SELECT sales_in_weather.store_nbr, SUM(sales_in_weather.units) AS total_units\nFROM sales_in_weather\nJOIN relation ON sales_in_weather.store_nbr = relation.store_nbr\nJOIN weather ON relation.station_nbr = weather.station_nbr\nWHERE weather.station_nbr = 17 \nAND sales_in_weather.item_nbr = '45' \nAND sales_in_weather.date BETWEEN '2012-10-01' AND '2012-10-31'\nGROUP BY sales_in_weather.store_nbr\nORDER BY total_units DESC\nLIMIT 1;"}
{"sample_id": 8195, "db_id": "sales_in_weather", "gold_sql": "SELECT CAST(SUM(T2.tmax) AS REAL) / 29 FROM ( SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1 ) AS T1 INNER JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE SUBSTR(T2.\"date\", 1, 7) = '2012-02'", "pred_sql": "SELECT r.station_nbr, AVG(w.tmax) AS avg_max_temp\nFROM relation r\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE w.date BETWEEN '2012-02-01' AND '2012-02-29'\nGROUP BY r.station_nbr\nORDER BY COUNT(DISTINCT r.store_nbr) DESC\nLIMIT 1;"}
{"sample_id": 8177, "db_id": "sales_in_weather", "gold_sql": "SELECT item_nbr FROM sales_in_weather WHERE \"date\" = '2012-01-01' AND store_nbr = 1 ORDER BY units DESC LIMIT 1", "pred_sql": "SELECT item_nbr FROM sales_in_weather WHERE store_nbr = '1' AND date = '2012-01-01' ORDER BY units DESC LIMIT 1;"}
{"sample_id": 8149, "db_id": "sales_in_weather", "gold_sql": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5", "pred_sql": "SELECT SUM(s.units) AS total_units_sold \nFROM sales_in_weather s \nJOIN relation r ON s.store_nbr = r.store_nbr \nJOIN weather w ON r.station_nbr = w.station_nbr \nWHERE s.item_nbr = '5' \nAND s.store_nbr = '3' \nAND w.preciptotal > 0.05;"}
{"sample_id": 8138, "db_id": "sales_in_weather", "gold_sql": "SELECT SUM(units) FROM sales_in_weather WHERE SUBSTR(\"date\", 6, 2) = '01' AND SUBSTR(\"date\", 1, 4) = '2012' AND item_nbr = 9 AND store_nbr = 1", "pred_sql": "SELECT SUM(units) AS total_units_sold FROM sales_in_weather WHERE item_nbr = '9' AND store_nbr = '1' AND date BETWEEN '2012-01-01' AND '2012-01-31';"}
{"sample_id": 8164, "db_id": "sales_in_weather", "gold_sql": "SELECT store_nbr FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY depart DESC LIMIT 1 )", "pred_sql": "SELECT COUNT(DISTINCT r.store_nbr) AS store_count\nFROM weather w\nJOIN relation r ON w.station_nbr = r.station_nbr\nWHERE w.depart > 0\nAND w.tmax = (SELECT MAX(tmax) FROM weather WHERE depart > 0);"}
{"sample_id": 8171, "db_id": "sales_in_weather", "gold_sql": "SELECT T1.codesum FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.\"date\" = '2013-02-12' AND T2.store_nbr = 2", "pred_sql": "SELECT w.codesum \nFROM weather w \nJOIN relation r ON w.station_nbr = r.station_nbr \nJOIN sales_in_weather s ON r.store_nbr = s.store_nbr \nWHERE s.store_nbr = '2' AND s.date = '2013/2/12';"}
{"sample_id": 8190, "db_id": "sales_in_weather", "gold_sql": "SELECT T1.item_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN ( SELECT station_nbr, \"date\" FROM weather ORDER BY snowfall DESC LIMIT 1 ) AS T3 ON T2.station_nbr = T3.station_nbr", "pred_sql": "SELECT DISTINCT si.item_nbr \nFROM sales_in_weather si \nJOIN relation r ON si.store_nbr = r.store_nbr \nJOIN weather w ON r.station_nbr = w.station_nbr \nWHERE w.snowfall = (SELECT MAX(snowfall) FROM weather) \nAND si.date = w.date;"}
{"sample_id": 8152, "db_id": "sales_in_weather", "gold_sql": "SELECT ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 5 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 ) - ( SELECT SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.item_nbr = 16 AND T1.\"date\" LIKE '%2012%' AND T1.store_nbr = 6 GROUP BY tmax ORDER BY T3.tmax DESC LIMIT 1 )", "pred_sql": "SELECT (units_store5 - units_store10) AS unit_difference\nFROM (\n    SELECT \n        SUM(CASE WHEN store_nbr = '5' THEN units ELSE 0 END) AS units_store5,\n        SUM(CASE WHEN store_nbr = '10' THEN units ELSE 0 END) AS units_store10\n    FROM sales_in_weather\n    WHERE item_nbr = '16' AND date = (\n        SELECT date\n        FROM weather\n        WHERE strftime('%Y', date) = '2012'\n        ORDER BY tmax DESC\n        LIMIT 1\n    )\n) AS unit_sales;"}
{"sample_id": 8180, "db_id": "sales_in_weather", "gold_sql": "SELECT \"date\" FROM weather WHERE station_nbr = 1 AND CAST(SUBSTR(\"date\", 1, 4) AS int) BETWEEN 2012 AND 2014 ORDER BY tmax DESC LIMIT 1", "pred_sql": "SELECT date, tmax FROM weather WHERE station_nbr = 1 AND date BETWEEN '2012-01-01' AND '2014-12-31' ORDER BY tmax DESC LIMIT 1;"}
{"sample_id": 8184, "db_id": "sales_in_weather", "gold_sql": "SELECT COUNT(store_nbr) FROM relation WHERE station_nbr = ( SELECT station_nbr FROM weather ORDER BY avgspeed DESC LIMIT 1 )", "pred_sql": "SELECT COUNT(DISTINCT r.store_nbr) AS store_count\nFROM relation r\nJOIN weather w ON r.station_nbr = w.station_nbr\nWHERE w.avgspeed = (SELECT MAX(avgspeed) FROM weather);"}
{"sample_id": 8178, "db_id": "sales_in_weather", "gold_sql": "SELECT SUM(store_nbr) FROM relation WHERE station_nbr = 12", "pred_sql": "SELECT COUNT(DISTINCT store_nbr) AS store_count FROM relation WHERE station_nbr = 12;"}
{"sample_id": 8146, "db_id": "sales_in_weather", "gold_sql": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.\"date\", 1, 4) = '2012' AND T1.item_nbr = 5 AND tmax > 90", "pred_sql": "SELECT COUNT(DISTINCT si.date) AS days_count \nFROM sales_in_weather si \nJOIN relation r ON si.store_nbr = r.store_nbr \nJOIN weather w ON r.station_nbr = w.station_nbr \nWHERE si.item_nbr = '5' \nAND si.units > '100' \nAND w.tmax > '90';"}
{"sample_id": 8200, "db_id": "sales_in_weather", "gold_sql": "SELECT MIN(dewpoint) FROM weather", "pred_sql": "SELECT MIN(dewpoint) AS min_dew_point FROM weather;"}
{"sample_id": 1299, "db_id": "law_episode", "gold_sql": "SELECT DISTINCT role FROM Credit WHERE credited = 'false'", "pred_sql": "SELECT DISTINCT role FROM credit WHERE credited = 0;"}
{"sample_id": 1258, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Disciple'", "pred_sql": "SELECT COUNT(keyword) AS keyword_count FROM keyword JOIN episode ON keyword.episode_id = episode.episode_id WHERE episode.title = 'Disciple';"}
{"sample_id": 1329, "db_id": "law_episode", "gold_sql": "SELECT T2.title FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars BETWEEN 1 AND 10 GROUP BY T2.title ORDER BY CAST(SUM(T1.stars * T1.percent) AS REAL) / 100 DESC LIMIT 3", "pred_sql": "SELECT title FROM episode ORDER BY rating DESC LIMIT 3;"}
{"sample_id": 1355, "db_id": "law_episode", "gold_sql": "SELECT T2.name FROM Award AS T1 INNER JOIN Person AS T2 ON T1.person_id = T2.person_id WHERE T1.result = 'Winner' AND T2.height_meters > 1.80", "pred_sql": "SELECT DISTINCT p.name \nFROM person p \nJOIN credit c ON p.person_id = c.person_id \nJOIN award a ON c.episode_id = a.episode_id \nWHERE p.height_meters > 1.80 AND a.result = 'Winner';"}
{"sample_id": 1281, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'", "pred_sql": "SELECT COUNT(DISTINCT award.episode_id) AS number_of_winners\nFROM award\nJOIN episode ON award.episode_id = episode.episode_id\nWHERE award.organization = 'International Monitor Awards' AND award.result = 'Winner' AND episode.air_date LIKE '1998%'"}
{"sample_id": 1312, "db_id": "law_episode", "gold_sql": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' GROUP BY T2.episode_id ORDER BY COUNT(T1.result) DESC LIMIT 1", "pred_sql": "SELECT e.title FROM episode e JOIN award a ON e.episode_id = a.episode_id GROUP BY e.episode_id ORDER BY COUNT(a.award_id) DESC LIMIT 1;"}
{"sample_id": 1260, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T2.award_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.series = 'Law and Order' AND T1.season = 9 AND T1.episode = 20", "pred_sql": "SELECT COUNT(*) AS nomination_count FROM award WHERE episode_id IN (SELECT episode_id FROM episode WHERE series = 'Law and Order' AND season = '9' AND episode = '20')"}
{"sample_id": 1290, "db_id": "law_episode", "gold_sql": "SELECT T2.title FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Art Department' GROUP BY T2.episode_id ORDER BY COUNT(T1.category) DESC LIMIT 1", "pred_sql": "SELECT e.title \nFROM episode e \nJOIN credit c ON e.episode_id = c.episode_id \nWHERE c.category = 'Art Department' \nGROUP BY e.episode_id \nORDER BY COUNT(c.person_id) DESC \nLIMIT 1;"}
{"sample_id": 1276, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.year = 1999 AND T1.birth_country = 'Canada'", "pred_sql": "SELECT COUNT(DISTINCT a.person_id) AS number_of_winners\nFROM award a\nJOIN person p ON a.person_id = p.person_id\nWHERE p.birth_country = 'Canada' AND a.year = 1999 AND a.result = 'Winner';"}
{"sample_id": 1322, "db_id": "law_episode", "gold_sql": "SELECT t3.name FROM ( SELECT DISTINCT T2.year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2.year) AS rm FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T2.series = 'Law and Order' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' ) AS T3 GROUP BY t3.name HAVING COUNT(t3.years - t3.rm) >= 2", "pred_sql": "SELECT p.name \nFROM person p \nJOIN award a ON p.person_id = a.person_id \nJOIN episode e ON a.episode_id = e.episode_id \nWHERE a.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' \nAND a.award = 'Television Silver Gavel Award' \nAND a.result = 'Winner' \nAND a.year IN (SELECT year FROM award WHERE person_id = p.person_id AND award = 'Television Silver Gavel Award' AND result = 'Winner' GROUP BY year HAVING COUNT(DISTINCT year) = 2) \nAND e.series LIKE 'Law and Order%';"}
{"sample_id": 1332, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T2.person_id) FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T2.name = 'Jerry Orbach'", "pred_sql": "SELECT COUNT(DISTINCT episode.episode_id) AS episode_count \nFROM credit \nJOIN person ON credit.person_id = person.person_id \nWHERE person.name = 'Jerry Orbach';"}
{"sample_id": 1340, "db_id": "law_episode", "gold_sql": "SELECT T1.rating FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.result = 'Winner' GROUP BY T1.episode_id ORDER BY COUNT(T2.award_id) DESC LIMIT 1", "pred_sql": "SELECT e.rating, COUNT(a.award_id) AS award_count\nFROM episode e\nJOIN award a ON e.episode_id = a.episode_id\nWHERE a.result = 'Winner'\nGROUP BY e.episode_id\nORDER BY award_count DESC\nLIMIT 1;"}
{"sample_id": 1279, "db_id": "law_episode", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.stars = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North' AND T1.episode_id = 'tt0629477'", "pred_sql": "SELECT SUM(votes) AS total_votes, SUM(CASE WHEN stars = 1 THEN votes ELSE 0 END) AS one_star_votes, (SUM(CASE WHEN stars = 1 THEN votes ELSE 0 END) * 100.0 / SUM(votes)) AS one_star_percentage FROM vote JOIN episode ON vote.episode_id = episode.episode_id WHERE episode.title = 'True North';"}
{"sample_id": 1278, "db_id": "law_episode", "gold_sql": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Shield'", "pred_sql": "SELECT keyword.keyword FROM keyword JOIN episode ON keyword.episode_id = episode.episode_id WHERE episode.series = 'Shield';"}
{"sample_id": 1252, "db_id": "law_episode", "gold_sql": "SELECT T2.role FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T3.person_id = T2.person_id WHERE T1.title = 'Cherished' AND T3.name = 'Park Dietz' AND T2.credited = 'true'", "pred_sql": "SELECT credit.role FROM credit JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'Cherished' AND credit.person_id = (SELECT person_id FROM person WHERE name = 'Park Dietz');"}
{"sample_id": 1336, "db_id": "law_episode", "gold_sql": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'", "pred_sql": "SELECT DISTINCT p.name AS director_name, e.number_in_series AS episode_number\nFROM person p\nJOIN award a ON p.person_id = a.person_id\nJOIN episode e ON a.episode_id = e.episode_id\nWHERE a.role = 'director' AND a.result = 'Winner';"}
{"sample_id": 1341, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.person_id) FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.credited = 'true' AND T2.episode BETWEEN 1 AND 10", "pred_sql": "SELECT COUNT(*) AS total_credits FROM credit WHERE episode_id IN (SELECT episode_id FROM episode WHERE number_in_series BETWEEN 1 AND 10) AND credited = 1;"}
{"sample_id": 1295, "db_id": "law_episode", "gold_sql": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.category = 'Cast'", "pred_sql": "SELECT DISTINCT person.name FROM person JOIN credit ON person.person_id = credit.person_id JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.series = 'Law & Order';"}
{"sample_id": 1311, "db_id": "law_episode", "gold_sql": "SELECT T2.role FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.person_id = T2.person_id INNER JOIN Award AS T3 ON T2.episode_id = T3.episode_id ORDER BY T1.height_meters DESC LIMIT 1", "pred_sql": "SELECT c.role FROM person p JOIN credit c ON p.person_id = c.person_id WHERE p.height_meters = (SELECT MAX(height_meters) FROM person);"}
{"sample_id": 1345, "db_id": "law_episode", "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE result = 'Winner' AND award = 'Television' AND organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'", "pred_sql": "SELECT COUNT(DISTINCT person_id) AS winner_count \nFROM award \nWHERE organization = 'American Bar Association Silver Gavel Awards for Media and the Arts' \nAND result = 'Winner' \nAND award_category = 'Television';"}
{"sample_id": 1298, "db_id": "law_episode", "gold_sql": "SELECT COUNT(award_id) FROM Award WHERE Result = 'Nominee'", "pred_sql": "SELECT COUNT(DISTINCT e.episode_id) AS episodes_without_awards\nFROM episode e\nLEFT JOIN award a ON e.episode_id = a.episode_id AND a.result = 'Winner'\nWHERE a.episode_id IS NULL;"}
{"sample_id": 1316, "db_id": "law_episode", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.role = 'Additional Crew' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'True North'", "pred_sql": "SELECT SUM(CASE WHEN credited = 1 THEN votes ELSE 0 END) * 100.0 / SUM(votes) AS percentage FROM credit JOIN episode ON credit.episode_id = episode.episode_id WHERE episode.title = 'True North' AND credit.category = 'additional crew';"}
{"sample_id": 1303, "db_id": "law_episode", "gold_sql": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 1", "pred_sql": "SELECT e.title FROM episode e JOIN vote v ON e.episode_id = v.episode_id WHERE v.stars = (SELECT MIN(stars) FROM vote)"}
{"sample_id": 1331, "db_id": "law_episode", "gold_sql": "SELECT COUNT(T1.person_id) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.person_id = T2.person_id WHERE T1.birth_country = 'Canada'", "pred_sql": "SELECT COUNT(DISTINCT a.person_id) AS number_of_nominees \nFROM award a \nJOIN person p ON a.person_id = p.person_id \nWHERE p.birth_country = 'Canada';"}
{"sample_id": 8570, "db_id": "software_company", "gold_sql": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'", "pred_sql": "SELECT SUM(d.inhabitants_k * d.income_k * 12) AS total_income\nFROM customers c\nJOIN demog d ON c.geoid = d.geoid\nWHERE c.sex = 'female' \nAND c.age BETWEEN 30 AND 55 \nAND c.occupation = 'machine-op-inspct';"}
{"sample_id": 8566, "db_id": "software_company", "gold_sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 3 AND SEX = 'Female' )", "pred_sql": "SELECT c.id, c.sex, d.income_k \nFROM customers c \nJOIN demog d ON c.geoid = d.geoid \nWHERE c.sex = 'female' \nAND c.educationnum <= 3;"}
{"sample_id": 8535, "db_id": "software_company", "gold_sql": "SELECT INHABITANTS_K FROM Demog WHERE GEOID = 239", "pred_sql": "SELECT inhabitants_k, income_k FROM demog WHERE geoid = '239';"}
{"sample_id": 8512, "db_id": "software_company", "gold_sql": "SELECT DISTINCT OCCUPATION FROM Customers WHERE EDUCATIONNUM = 11", "pred_sql": "SELECT occupation FROM customers WHERE educationnum = 11;"}
{"sample_id": 8538, "db_id": "software_company", "gold_sql": "SELECT T1.GEOID, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T1.age DESC LIMIT 1", "pred_sql": "SELECT c.geoid, d.income_k \nFROM customers c \nJOIN demog d ON c.geoid = d.geoid \nWHERE c.age = (SELECT MAX(age) FROM customers);"}
{"sample_id": 8539, "db_id": "software_company", "gold_sql": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )", "pred_sql": "SELECT d.income_k FROM customers c JOIN demog d ON c.geoid = d.geoid WHERE c.sex = 'male' AND c.educationnum <= 4;"}
{"sample_id": 8576, "db_id": "software_company", "gold_sql": "SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )", "pred_sql": "SELECT d.income_k, d.inhabitants_k \nFROM demog d \nJOIN customers c ON d.geoid = c.geoid \nWHERE c.id > (SELECT AVG(refid) \n               FROM mailings1_2 \n               WHERE response = 'False') * 0.5;"}
{"sample_id": 8542, "db_id": "software_company", "gold_sql": "SELECT DISTINCT T1.OCCUPATION FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INHABITANTS_K >= 30 AND T2.INHABITANTS_K <= 40", "pred_sql": "SELECT DISTINCT c.occupation \nFROM customers c \nJOIN demog d ON c.geoid = d.geoid \nWHERE d.inhabitants_k BETWEEN 30 AND 40;"}
{"sample_id": 8541, "db_id": "software_company", "gold_sql": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 AND T1.MARITAL_STATUS = 'Widowed' AND T1.SEX = 'Male' AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 3000", "pred_sql": "SELECT COUNT(*) AS count_widowed_male_customers FROM customers WHERE marital_status = 'Widowed' AND sex = 'Male' AND age BETWEEN 40 AND 60 AND geoid IN (SELECT geoid FROM demog WHERE income_k >= 3000)"}
{"sample_id": 8518, "db_id": "software_company", "gold_sql": "SELECT COUNT(T1.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T2.INHABITANTS_K > 30", "pred_sql": "SELECT COUNT(*) AS male_customers_count \nFROM customers \nWHERE sex = 'male' \nAND geoid IN (SELECT geoid FROM demog WHERE inhabitants_k > 30)"}
{"sample_id": 8554, "db_id": "software_company", "gold_sql": "SELECT COUNT(T2.GEOID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.OCCUPATION = 'Other-service' AND T2.INHABITANTS_K > 20", "pred_sql": "SELECT COUNT(*) AS customer_count \nFROM customers c \nJOIN demog d ON c.geoid = d.geoid \nWHERE c.occupation = 'other services' AND d.inhabitants_k > 20;"}
{"sample_id": 8540, "db_id": "software_company", "gold_sql": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'", "pred_sql": "SELECT c.occupation, d.income_k \nFROM customers c \nJOIN demog d ON c.geoid = d.geoid \nWHERE c.sex = 'male' \nAND c.educationnum BETWEEN 4 AND 6;"}
{"sample_id": 8578, "db_id": "software_company", "gold_sql": "SELECT GEOID, INHABITANTS_K * INCOME_K * 12 FROM Demog WHERE INCOME_K > 3300", "pred_sql": "SELECT geoid, (inhabitants_k * income_k * 12) AS total_income_per_year FROM demog WHERE income_k > 3300;"}
{"sample_id": 8514, "db_id": "software_company", "gold_sql": "SELECT COUNT(ID) FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age > 30", "pred_sql": "SELECT COUNT(*) AS machine_op_inspcts_count \nFROM customers \nWHERE age > 30 AND occupation = 'Machine-op-inspcts';"}
{"sample_id": 8553, "db_id": "software_company", "gold_sql": "SELECT COUNT(ID) teenager_number FROM Customers WHERE OCCUPATION = 'Machine-op-inspct' AND age >= 13 AND age <= 19", "pred_sql": "SELECT COUNT(*) AS teenager_count FROM customers WHERE age BETWEEN 13 AND 19 AND occupation = 'Machine-op-inspct';"}
{"sample_id": 5184, "db_id": "address", "gold_sql": "SELECT T1.zip_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.asian_population ORDER BY T2.asian_population DESC LIMIT 1", "pred_sql": "SELECT zip_code FROM zip_data ORDER BY asian_population DESC LIMIT 1;"}
{"sample_id": 5165, "db_id": "address", "gold_sql": "SELECT COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'DISTRICT OF COLUMBIA' AND T2.black_population > 20000", "pred_sql": "SELECT COUNT(*) AS count_of_postal_points FROM zip_data WHERE state = 'DC' AND black_population > 20000;"}
{"sample_id": 5203, "db_id": "address", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.type = 'Post Office' THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'SAINT CROIX'", "pred_sql": "SELECT (COUNT(CASE WHEN type = 'post office' THEN 1 END) * 100.0 / COUNT(*)) AS post_office_percentage FROM zip_data WHERE city = 'Saint Croix';"}
{"sample_id": 5166, "db_id": "address", "gold_sql": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019", "pred_sql": "SELECT z.city, a.alias FROM zip_data z JOIN alias a ON z.zip_code = a.zip_code WHERE z.zip_code = '19019';"}
{"sample_id": 5230, "db_id": "address", "gold_sql": "SELECT CAST(SUM(T2.total_beneficiaries) AS REAL) / COUNT(T2.zip_code) FROM state AS T1 INNER JOIN zip_data AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Guam'", "pred_sql": "SELECT AVG(total_beneficiaries) AS average_beneficiaries_per_postal_point FROM zip_data WHERE state = 'GU'"}
{"sample_id": 5122, "db_id": "address", "gold_sql": "SELECT SUM(T4.female_median_age) / COUNT(T1.county) FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id INNER JOIN zip_data AS T4 ON T1.zip_code = T4.zip_code WHERE T3.first_name = 'DeSantis' AND T3.last_name = 'Ron'", "pred_sql": "SELECT AVG(female_median_age) AS average_female_median_age\nFROM zip_data\nJOIN congress ON zip_data.zip_code = zip_congress.zip_code\nJOIN state ON congress.abbreviation = state.abbreviation\nWHERE congress.first_name = 'Ron' AND congress.last_name = 'DeSantis';"}
{"sample_id": 5208, "db_id": "address", "gold_sql": "SELECT DISTINCT T2.type FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'St Thomas'", "pred_sql": "SELECT zd.type FROM zip_data zd JOIN alias a ON zd.zip_code = a.zip_code WHERE a.alias = 'St Thomas';"}
{"sample_id": 5170, "db_id": "address", "gold_sql": "SELECT T2.county, T2.zip_code FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virgin Islands'", "pred_sql": "SELECT country.county, zip_data.zip_code FROM country JOIN zip_data ON country.zip_code = zip_data.zip_code WHERE country.state = 'VI';"}
{"sample_id": 5133, "db_id": "address", "gold_sql": "SELECT SUM(CASE WHEN T1.time_zone = 'Central' THEN 1 ELSE 0 END) AS count FROM zip_data AS T1 INNER JOIN state AS T2 ON T2.abbreviation = T1.state WHERE T1.time_zone = 'Central'", "pred_sql": "SELECT DISTINCT s.name FROM state s JOIN zip_data z ON s.abbreviation = z.state WHERE z.time_zone = 'Central Time Zone';"}
{"sample_id": 5150, "db_id": "address", "gold_sql": "SELECT T2.city FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 939 ORDER BY T2.asian_population DESC LIMIT 1", "pred_sql": "SELECT city FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code = '939' ORDER BY asian_population DESC LIMIT 1;"}
{"sample_id": 5174, "db_id": "address", "gold_sql": "SELECT T2.zip_code, T2.organization FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Kingsport-Bristol, TN-VA'", "pred_sql": "SELECT zip_data.zip_code, zip_data.organization FROM zip_data JOIN cbsa ON zip_data.cbsa = cbsa.cbsa WHERE cbsa.cbsa_name = 'Kingsport-Bristol, TN-VA';"}
{"sample_id": 5112, "db_id": "address", "gold_sql": "SELECT T2.alias FROM zip_data AS T1 INNER JOIN alias AS T2 ON T1.zip_code = T2.zip_code WHERE T1.latitude = 18.090875 AND T1.longitude = -66.867756", "pred_sql": "SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.latitude = '18.090875' AND z.longitude = '-66.867756';"}
{"sample_id": 5140, "db_id": "address", "gold_sql": "SELECT T1.bad_alias FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.state = 'PR'", "pred_sql": "SELECT bad_alias FROM avoid JOIN zip_data ON avoid.zip_code = zip_data.zip_code WHERE zip_data.state = 'PR';"}
{"sample_id": 5157, "db_id": "address", "gold_sql": "SELECT DISTINCT T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 = 0", "pred_sql": "SELECT a.alias FROM alias a JOIN zip_data z ON a.zip_code = z.zip_code WHERE z.population_2010 = '0';"}
{"sample_id": 5223, "db_id": "address", "gold_sql": "SELECT COUNT(T2.zip_code) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.state = 'Puerto Rico'", "pred_sql": "SELECT COUNT(*) AS postal_point_count FROM zip_data WHERE state = 'PR' AND zip_code IN (SELECT zip_code FROM zip_congress WHERE district IN (SELECT district FROM congress WHERE state = 'PR'));"}
{"sample_id": 5180, "db_id": "address", "gold_sql": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 410", "pred_sql": "SELECT zip_data.city, zip_data.state, zip_data.zip_code FROM zip_data JOIN area_code ON zip_data.zip_code = area_code.zip_code WHERE area_code.area_code = '410';"}
{"sample_id": 5113, "db_id": "address", "gold_sql": "SELECT T2.area_code FROM zip_data AS T1 INNER JOIN area_code AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.area_code ORDER BY T1.over_65 DESC LIMIT 1", "pred_sql": "SELECT area_code.area_code \nFROM zip_data \nJOIN area_code ON zip_data.zip_code = area_code.zip_code \nWHERE zip_data.zip_code IN (\n    SELECT zip_data.zip_code \n    FROM zip_data \n    JOIN zip_congress ON zip_data.zip_code = zip_congress.zip_code \n    JOIN congress ON zip_congress.district = congress.district \n    WHERE zip_data.state = congress.state \n    ORDER BY CAST(zip_data.over_65 AS INTEGER) DESC \n    LIMIT 1\n)"}
{"sample_id": 5087, "db_id": "address", "gold_sql": "SELECT T2.county FROM zip_data AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T2.county = 'ARECIBO' GROUP BY T2.county ORDER BY T1.avg_income_per_household DESC LIMIT 1", "pred_sql": "SELECT county FROM country WHERE zip_code = (SELECT zip_code FROM zip_data ORDER BY avg_income_per_household DESC LIMIT 1)"}
{"sample_id": 5143, "db_id": "address", "gold_sql": "SELECT T3.first_name, T3.last_name FROM zip_data AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T1.population_2020 > 30000 GROUP BY T3.first_name, T3.last_name", "pred_sql": "SELECT c.first_name, c.last_name, c.district, c.state \nFROM congress c \nJOIN zip_data z ON c.district = z.zip_code \nWHERE z.population_2020 > 30000;"}
{"sample_id": 5228, "db_id": "address", "gold_sql": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T2.employees = ( SELECT MAX(employees) FROM zip_data )", "pred_sql": "SELECT cbsa.cbsa_name FROM cbsa JOIN zip_data ON cbsa.cbsa = zip_data.cbsa JOIN (SELECT zip_code, MAX(employees) AS max_employees FROM zip_data) AS max_zip ON zip_data.zip_code = max_zip.zip_code;"}
{"sample_id": 5177, "db_id": "address", "gold_sql": "SELECT T2.zip_code FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district WHERE T1.House = 'House of Repsentatives' GROUP BY T2.zip_code", "pred_sql": "SELECT zip_code FROM zip_data WHERE zip_code IN (SELECT zip_code FROM zip_congress WHERE district IN (SELECT district FROM congress WHERE house = 'Senate'));"}
{"sample_id": 5212, "db_id": "address", "gold_sql": "SELECT T3.elevation FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state INNER JOIN zip_data AS T3 ON T2.zip_code = T3.zip_code WHERE T1.name = 'Massachusetts' AND T2.county = 'HAMPDEN' GROUP BY T3.elevation", "pred_sql": "SELECT zip_data.elevation FROM zip_data JOIN state ON zip_data.state = state.abbreviation WHERE zip_data.city = 'Hampden' AND state.name = 'Massachusetts';"}
{"sample_id": 5134, "db_id": "address", "gold_sql": "SELECT DISTINCT T2.city, T2.state FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Lexington-Fayette, KY' LIMIT 10", "pred_sql": "SELECT zip_data.city, zip_data.state FROM zip_data JOIN cbsa ON zip_data.cbsa = cbsa.cbsa WHERE cbsa.cbsa_name = 'Lexington-Fayette, KY' LIMIT 10;"}
{"sample_id": 5201, "db_id": "address", "gold_sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code GROUP BY T1.county ORDER BY T2.households DESC LIMIT 1", "pred_sql": "SELECT country.county FROM zip_data JOIN country ON zip_data.zip_code = country.zip_code JOIN (SELECT zip_code, households FROM zip_data ORDER BY households DESC LIMIT 1) AS max_households ON zip_data.zip_code = max_households.zip_code;"}
{"sample_id": 5158, "db_id": "address", "gold_sql": "SELECT COUNT(T2.city) FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 608 AND T2.daylight_savings = 'Yes'", "pred_sql": "SELECT COUNT(DISTINCT z.city) AS city_count \nFROM zip_data z \nJOIN area_code a ON z.zip_code = a.zip_code \nWHERE a.area_code = '608' AND z.daylight_savings = 'yes';"}
{"sample_id": 5106, "db_id": "address", "gold_sql": "SELECT COUNT(T3.cognress_rep_id) FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation INNER JOIN congress AS T3 ON T2.abbreviation = T3.abbreviation ORDER BY T1.monthly_benefits_retired_workers DESC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS representative_count \nFROM congress \nWHERE state = (SELECT state \n                FROM zip_data \n                ORDER BY CAST(monthly_benefits_retired_workers AS INTEGER) DESC \n                LIMIT 1)"}
{"sample_id": 5153, "db_id": "address", "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = ( SELECT MAX(land_area) FROM zip_data )", "pred_sql": "SELECT area_code.zip_code, area_code.area_code FROM area_code JOIN zip_data ON area_code.zip_code = zip_data.zip_code WHERE zip_data.land_area = (SELECT MAX(land_area) FROM zip_data)"}
{"sample_id": 5120, "db_id": "address", "gold_sql": "SELECT T1.county FROM country AS T1 INNER JOIN zip_congress AS T2 ON T1.zip_code = T2.zip_code INNER JOIN congress AS T3 ON T2.district = T3.cognress_rep_id WHERE T3.first_name = 'Hartzler' AND T3.last_name = 'Vicky' GROUP BY T1.county", "pred_sql": "SELECT country.county FROM congress JOIN country ON congress.abbreviation = country.state WHERE congress.first_name = 'Vicky' AND congress.last_name = 'Hartzler';"}
{"sample_id": 5213, "db_id": "address", "gold_sql": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )", "pred_sql": "SELECT area_code.zip_code, area_code.area_code \nFROM area_code \nJOIN zip_data ON area_code.zip_code = zip_data.zip_code \nWHERE zip_data.hispanic_population = (\n    SELECT MAX(hispanic_population) \n    FROM zip_data\n)"}
{"sample_id": 5135, "db_id": "address", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.party = 'Democrat' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.party = 'Republican' THEN 1 ELSE NULL END)FROM zip_congress AS T1 INNER JOIN congress AS T2 ON T2.cognress_rep_id = T1.district", "pred_sql": "SELECT COUNT(CASE WHEN party = 'Democrat' THEN 1 END) * 100.0 / COUNT(*) AS democrat_percentage, COUNT(CASE WHEN party = 'Republican' THEN 1 END) * 100.0 / COUNT(*) AS republican_percentage, zip_data.zip_code FROM congress JOIN zip_data ON congress.abbreviation = zip_data.state WHERE congress.state = 'IN' GROUP BY zip_data.zip_code HAVING COUNT(CASE WHEN party = 'Democrat' THEN 1 END) > 0;"}
{"sample_id": 5878, "db_id": "airline", "gold_sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T1.ORIGIN = T2.Code WHERE T1.ORIGIN = 'CLT' AND T1.DEST = 'AUS' AND T2.Description = 'Charlotte, NC: Charlotte Douglas International' AND T1.CANCELLATION_CODE = 'A'", "pred_sql": "SELECT COUNT(*) AS flight_count \nFROM airlines \nJOIN airports AS origin_airport ON airlines.origin = origin_airport.code \nJOIN airports AS dest_airport ON airlines.dest = dest_airport.code \nWHERE origin_airport.description = 'Charlotte Douglas International Airport' \nAND dest_airport.description = 'Austin - Bergstrom International Airport' \nAND airlines.cancelled = 'Y' \nAND airlines.cancellation_code = 'C';"}
{"sample_id": 5835, "db_id": "airline", "gold_sql": "SELECT CASE WHEN COUNT(CASE WHEN T3.Description = 'American Airlines Inc.: AA' THEN 1 ELSE NULL END) > COUNT(CASE WHEN T3.Description = 'Endeavor Air Inc.: 9E' THEN 1 ELSE NULL END) THEN 'American Airlines Inc.: AA' ELSE 'Endeavor Air Inc.: 9E' END AS RESULT FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T2.FL_DATE = '2018/8/1'", "pred_sql": "SELECT op_carrier_airline_id, COUNT(*) AS flight_count\nFROM airlines\nWHERE fl_date = '2018-08-01' AND op_carrier_airline_id IN (\n    SELECT code FROM air_carriers WHERE description IN ('American Airlines Inc.', 'Endeavor Air Inc.')\n)\nGROUP BY op_carrier_airline_id\nORDER BY flight_count DESC;"}
{"sample_id": 5842, "db_id": "airline", "gold_sql": "SELECT COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/12' AND T2.DEST = 'MIA' AND T2.ARR_DELAY < 0", "pred_sql": "SELECT COUNT(*) AS early_landings FROM airlines WHERE dest = (SELECT code FROM airports WHERE description = 'Miami Airport') AND fl_date = '2018-08-12' AND arr_delay < 0;"}
{"sample_id": 5886, "db_id": "airline", "gold_sql": "SELECT Description FROM Airports WHERE Code LIKE '%3'", "pred_sql": "SELECT description FROM airports WHERE code LIKE '%3';"}
{"sample_id": 5857, "db_id": "airline", "gold_sql": "SELECT Code FROM Airports WHERE Description = 'Anita Bay, AK: Anita Bay Airport'", "pred_sql": "SELECT code FROM airports WHERE description = 'Anita Bay Airport' AND code = 'ANI';"}
{"sample_id": 5837, "db_id": "airline", "gold_sql": "SELECT CAST( SUM(CASE WHEN T2.FL_DATE LIKE '2018/8%' THEN 1 ELSE 0 END) AS REAL) / 31 FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN INNER JOIN \"Air Carriers\" AS T3 ON T2.OP_CARRIER_AIRLINE_ID = T3.Code WHERE T3.Description = 'American Airlines Inc.: AA'", "pred_sql": "SELECT AVG(daily_flights) AS average_daily_flights FROM (SELECT COUNT(*) AS daily_flights FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air carriers WHERE description = 'American Airlines Inc.') AND fl_date BETWEEN '2018-08-01' AND '2018-08-31' GROUP BY fl_date) AS daily_counts;"}
{"sample_id": 5839, "db_id": "airline", "gold_sql": "SELECT SUM(CASE WHEN T2.FL_DATE = '2018/8/27' THEN 1 ELSE 0 END) AS count FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T1.Description = 'Los Angeles, CA: Los Angeles International'", "pred_sql": "SELECT COUNT(tail_num) AS number_of_planes FROM airlines WHERE origin = 'LAX' AND fl_date = '2018-08-27';"}
{"sample_id": 5908, "db_id": "airline", "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.ARR_DELAY < 0 AND T2.DEP_DELAY < 0 GROUP BY T1.Description", "pred_sql": "SELECT ac.description \nFROM airlines a \nJOIN air_carriers ac ON a.op_carrier_airline_id = ac.code \nWHERE a.arr_delay < 0 AND a.dep_delay < 0;"}
{"sample_id": 5909, "db_id": "airline", "gold_sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Southwest Airlines Co.: WN' AND T2.ACTUAL_ELAPSED_TIME < ( SELECT AVG(ACTUAL_ELAPSED_TIME) * 0.8 FROM Airlines )", "pred_sql": "SELECT tail_num FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'Southwest Airlines Co.: WN') AND actual_elapsed_time < (SELECT AVG(actual_elapsed_time) * 0.8 FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'Southwest Airlines Co.: WN'))"}
{"sample_id": 5852, "db_id": "airline", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.DEST WHERE T2.Description LIKE '%Pittsburgh%' AND T1.CRS_ELAPSED_TIME IS NOT NULL AND T1.ACTUAL_ELAPSED_TIME IS NOT NULL", "pred_sql": "SELECT (COUNT(CASE WHEN actual_elapsed_time < crs_elapsed_time THEN 1 END) * 100.0 / COUNT(*)) AS percentage_faster_flights\nFROM airlines\nWHERE dest = (SELECT code FROM airports WHERE description = 'Pittsburgh')"}
{"sample_id": 5875, "db_id": "airline", "gold_sql": "SELECT COUNT(*) FROM Airlines WHERE FL_DATE = '2018/8/1' AND ORIGIN = 'ABE'", "pred_sql": "SELECT COUNT(*) AS flight_count FROM airlines WHERE fl_date = '2018-08-01' AND origin = (SELECT code FROM airports WHERE description = 'Allentown, Pennsylvania');"}
{"sample_id": 5880, "db_id": "airline", "gold_sql": "SELECT T1.DEP_TIME FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code INNER JOIN Airports AS T3 ON T1.DEST = T3.Code WHERE T1.FL_DATE = '2018/8/20' AND T1.TAIL_NUM = 'N903JB' AND T2.Description LIKE '%JetBlue Airways%' AND T3.Description LIKE '%Fort Lauderdale-Hollywood%'", "pred_sql": "SELECT dep_time FROM airlines JOIN air_carriers ON airlines.op_carrier_airline_id = air_carriers.code JOIN airports ON airlines.dest = airports.code WHERE air_carriers.description = 'JetBlue Airways' AND airlines.tail_num = 'N903JB' AND airports.description = 'Fort Lauderdale-Hollywood International Airport' AND fl_date = '2018-08-20';"}
{"sample_id": 5899, "db_id": "airline", "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID ORDER BY T2.ACTUAL_ELAPSED_TIME DESC LIMIT 1", "pred_sql": "SELECT ac.description \nFROM airlines a \nJOIN air_carriers ac ON a.op_carrier_airline_id = ac.code \nORDER BY a.actual_elapsed_time DESC \nLIMIT 1;"}
{"sample_id": 5897, "db_id": "airline", "gold_sql": "SELECT T2.TAIL_NUM FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T1.Description = 'Asap Air Inc.: ASP' ORDER BY T2.DEP_DELAY DESC LIMIT 1", "pred_sql": "SELECT tail_num FROM airlines WHERE op_carrier_airline_id = (SELECT code FROM air_carriers WHERE description = 'Asap Air Inc.: ASP') ORDER BY dep_delay DESC LIMIT 1;"}
{"sample_id": 5841, "db_id": "airline", "gold_sql": "SELECT COUNT(*) FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code WHERE T1.FL_DATE = '2018/8/2' AND T2.Description = 'Alaska Airlines Inc.: AS' AND T1.DEP_DELAY > 0", "pred_sql": "SELECT COUNT(*) AS delayed_flights FROM airlines WHERE op_carrier_airline_id = 'AS' AND fl_date = '2018-08-02' AND dep_delay > 0;"}
{"sample_id": 5910, "db_id": "airline", "gold_sql": "SELECT T1.Description FROM \"Air Carriers\" AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.OP_CARRIER_AIRLINE_ID WHERE T2.DEST = 'PHX' AND T2.ARR_TIME < ( SELECT AVG(ARR_TIME) * 0.4 FROM Airlines ) GROUP BY T1.Description", "pred_sql": "SELECT ac.description \nFROM air_carriers ac \nJOIN airlines a ON ac.code = a.op_carrier_airline_id \nWHERE a.arr_time < (SELECT AVG(arr_time) * 0.4 \n                     FROM airlines \n                     WHERE dest = (SELECT code FROM airports WHERE description = 'Phoenix'))"}
{"sample_id": 5864, "db_id": "airline", "gold_sql": "SELECT T2.Description FROM Airlines AS T1 INNER JOIN \"Air Carriers\" AS T2 ON T1.OP_CARRIER_AIRLINE_ID = T2.Code GROUP BY T2.Description ORDER BY T1.TAIL_NUM DESC LIMIT 5", "pred_sql": "SELECT op_carrier_airline_id, COUNT(tail_num) AS aircraft_count FROM airlines GROUP BY op_carrier_airline_id ORDER BY aircraft_count DESC LIMIT 5;"}
{"sample_id": 5855, "db_id": "airline", "gold_sql": "SELECT Code FROM Airports WHERE Description LIKE '%Ankara, Turkey%'", "pred_sql": "SELECT code FROM airports WHERE description LIKE '%Ankara%' AND description LIKE '%Turkey%';"}
{"sample_id": 5889, "db_id": "airline", "gold_sql": "SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018/8/17' GROUP BY TAIL_NUM", "pred_sql": "SELECT tail_num FROM airlines WHERE fl_date = '2018-08-17';"}
{"sample_id": 1719, "db_id": "restaurant", "gold_sql": "SELECT CAST(SUM(IIF(T2.review > 4, 1, 0)) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'", "pred_sql": "SELECT (COUNT(CASE WHEN g.review > 4 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_over_4\nFROM generalinfo g\nJOIN geographic geo ON g.city = geo.city\nWHERE geo.region = 'Bay Area';"}
{"sample_id": 1751, "db_id": "restaurant", "gold_sql": "SELECT city FROM geographic WHERE county = 'unknown'", "pred_sql": "SELECT city FROM geographic WHERE county IS NULL OR county = '';"}
{"sample_id": 1759, "db_id": "restaurant", "gold_sql": "SELECT T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'Tulocay winery' AND T2.food_type = 'winery'", "pred_sql": "SELECT location.street_num FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE generalinfo.label = 'Tulocay Winery';"}
{"sample_id": 1770, "db_id": "restaurant", "gold_sql": "SELECT label FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE food_type = 'asian' AND city = 'san francisco' )", "pred_sql": "SELECT label FROM generalinfo WHERE food_type = 'Asian' AND city = 'San Francisco' ORDER BY review DESC LIMIT 1;"}
{"sample_id": 1734, "db_id": "restaurant", "gold_sql": "SELECT T2.region FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_num = 1149 AND T1.street_name = 'el camino real'", "pred_sql": "SELECT g.region FROM geographic g JOIN location l ON g.city = l.city WHERE l.street_num = '1149' AND l.street_name = 'El Camino Real';"}
{"sample_id": 1679, "db_id": "restaurant", "gold_sql": "SELECT T1.food_type FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.street_name = 'adeline st' AND T2.city = 'berkeley'", "pred_sql": "SELECT DISTINCT gi.food_type FROM generalinfo gi JOIN location l ON gi.id_restaurant = l.id_restaurant WHERE l.street_name = 'Adeline' AND l.city = 'Berkeley';"}
{"sample_id": 1772, "db_id": "restaurant", "gold_sql": "SELECT COUNT(id_restaurant) FROM generalinfo WHERE city = 'belmont' AND review > 2 AND food_type = 'deli'", "pred_sql": "SELECT COUNT(*) FROM generalinfo WHERE food_type = 'deli' AND city = 'Belmont' AND review >= 2.0;"}
{"sample_id": 1780, "db_id": "restaurant", "gold_sql": "SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1", "pred_sql": "SELECT g.region, COUNT(g.id_restaurant) AS restaurant_count \nFROM generalinfo gi \nJOIN location l ON gi.id_restaurant = l.id_restaurant \nJOIN geographic g ON l.city = g.city \nWHERE gi.label = 'Baskin Robbins' \nGROUP BY g.region \nORDER BY restaurant_count DESC \nLIMIT 1;"}
{"sample_id": 1681, "db_id": "restaurant", "gold_sql": "SELECT DISTINCT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'a & w root beer'", "pred_sql": "SELECT DISTINCT g.county FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE gi.label = 'A&W Root Beer';"}
{"sample_id": 1686, "db_id": "restaurant", "gold_sql": "SELECT COUNT(DISTINCT T2.county) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.street_name = 'appian way'", "pred_sql": "SELECT COUNT(DISTINCT county) AS county_count FROM geographic WHERE city IN (SELECT city FROM location WHERE street_name = 'Appian Way')"}
{"sample_id": 1733, "db_id": "restaurant", "gold_sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1", "pred_sql": "SELECT location.street_name, COUNT(*) AS burger_count \nFROM generalinfo \nJOIN location ON generalinfo.id_restaurant = location.id_restaurant \nWHERE generalinfo.food_type = 'burger' AND location.city = 'San Francisco' \nGROUP BY location.street_name \nORDER BY burger_count DESC \nLIMIT 1;"}
{"sample_id": 1760, "db_id": "restaurant", "gold_sql": "SELECT T2.review, T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'hayward' AND T1.street_name = 'mission blvd'", "pred_sql": "SELECT g.label, g.review FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE l.street_name = 'Mission Blvd.' AND l.city = 'Hayward';"}
{"sample_id": 1779, "db_id": "restaurant", "gold_sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.street_name = 'broadway' AND T2.review < 3 AND T1.city = 'oakland'", "pred_sql": "SELECT COUNT(*) AS restaurant_count FROM generalinfo WHERE city = 'Oakland' AND review <= 3 AND id_restaurant IN (SELECT id_restaurant FROM location WHERE city = 'Oakland' AND street_name = 'Broadway');"}
{"sample_id": 1769, "db_id": "restaurant", "gold_sql": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM generalinfo WHERE food_type = 'Afghani' AND id_restaurant IN (SELECT id_restaurant FROM location WHERE street_num BETWEEN '1000' AND '2000'))) AS percentage_afghani_restaurants FROM generalinfo WHERE food_type = 'Afghani' AND id_restaurant IN (SELECT id_restaurant FROM location WHERE street_num BETWEEN '1000' AND '2000');"}
{"sample_id": 1765, "db_id": "restaurant", "gold_sql": "SELECT T2.city, T1.street_num, T1.street_name FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'sanuki restaurant'", "pred_sql": "SELECT location.street_num, location.street_name, geographic.city, geographic.county, geographic.region FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.label = 'Sanuki Restaurant';"}
{"sample_id": 1689, "db_id": "restaurant", "gold_sql": "SELECT T1.id_restaurant, T1.label FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'yolo county'", "pred_sql": "SELECT g.label FROM generalinfo g JOIN geographic geo ON g.city = geo.city WHERE geo.county = 'Yolo County';"}
{"sample_id": 1737, "db_id": "restaurant", "gold_sql": "SELECT T2.label FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.street_name = 'park st'", "pred_sql": "SELECT generalinfo.label, location.street_num, location.street_name \nFROM generalinfo \nJOIN location ON generalinfo.id_restaurant = location.id_restaurant \nWHERE location.street_name = 'Park St.';"}
{"sample_id": 1691, "db_id": "restaurant", "gold_sql": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.review = 1.7", "pred_sql": "SELECT location.street_name FROM location JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE generalinfo.city = 'San Francisco' AND generalinfo.review = '1.7';"}
{"sample_id": 1762, "db_id": "restaurant", "gold_sql": "SELECT COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.review = 2 AND T1.street_num < 500", "pred_sql": "SELECT COUNT(*) AS restaurant_count FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.review = 2 AND l.street_num < '500';"}
{"sample_id": 1706, "db_id": "restaurant", "gold_sql": "SELECT id_restaurant, label FROM generalinfo WHERE city = 'San Francisco' AND review = ( SELECT MAX(review) FROM generalinfo WHERE city = 'San Francisco' )", "pred_sql": "SELECT g.city, g.county, g.region, gi.label, gi.food_type, gi.review \nFROM generalinfo gi \nJOIN geographic g ON gi.city = g.city \nWHERE g.city = 'San Francisco' \nORDER BY gi.review DESC;"}
{"sample_id": 1763, "db_id": "restaurant", "gold_sql": "SELECT COUNT(T1.id_restaurant) AS num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.city = 'milpitas' AND T2.food_type = 'asian' AND T1.street_name = 'n milpitas blvd' AND T1.id_restaurant > 385", "pred_sql": "SELECT COUNT(*) FROM generalinfo g JOIN location l ON g.id_restaurant = l.id_restaurant WHERE g.food_type = 'Asian' AND l.street_name = 'N. Milpitas Blvd.' AND l.city = 'Milpitas' AND g.id_restaurant > '385';"}
{"sample_id": 1748, "db_id": "restaurant", "gold_sql": "SELECT T2.county FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.food_type = 'Italian' GROUP BY T2.county ORDER BY COUNT(T1.id_restaurant) DESC LIMIT 1", "pred_sql": "SELECT g.county, COUNT(gi.id_restaurant) AS restaurant_count \nFROM generalinfo gi \nJOIN geographic g ON gi.city = g.city \nWHERE gi.food_type = 'Italian' \nGROUP BY g.county \nORDER BY restaurant_count DESC \nLIMIT 1;"}
{"sample_id": 1729, "db_id": "restaurant", "gold_sql": "SELECT DISTINCT T1.region FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T2.food_type = 'greek'", "pred_sql": "SELECT DISTINCT g.region FROM generalinfo gi JOIN geographic g ON gi.city = g.city WHERE gi.food_type = 'Greek';"}
{"sample_id": 1697, "db_id": "restaurant", "gold_sql": "SELECT AVG(T2.review) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'santa cruz county'", "pred_sql": "SELECT AVG(generalinfo.review) AS average_rating FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE geographic.county = 'Santa Cruz County';"}
{"sample_id": 10357, "db_id": "formula_1", "gold_sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT driverid) AS number_of_drivers FROM results WHERE raceid IN (SELECT raceid FROM races WHERE year = '2008' AND name = 'Australian Grand Prix') AND positiontext NOT IN ('Retired', 'Disqualified');"}
{"sample_id": 10421, "db_id": "formula_1", "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1", "pred_sql": "SELECT r.name \nFROM results res \nJOIN races r ON res.raceid = r.raceid \nWHERE res.fastestlapspeed = (SELECT MAX(fastestlapspeed) FROM results)"}
{"sample_id": 10422, "db_id": "formula_1", "gold_sql": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1", "pred_sql": "SELECT circuits.name, circuits.location, circuits.country \nFROM races \nJOIN circuits ON races.circuitid = circuits.circuitid \nORDER BY races.date DESC \nLIMIT 1;"}
{"sample_id": 10397, "db_id": "formula_1", "gold_sql": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1", "pred_sql": "SELECT year, AVG(milliseconds) AS avg_lap_time FROM laptimes JOIN races ON laptimes.raceid = races.raceid GROUP BY year ORDER BY avg_lap_time ASC LIMIT 1;"}
{"sample_id": 10300, "db_id": "formula_1", "gold_sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1", "pred_sql": "SELECT d.forename || ' ' || d.surname AS full_name \nFROM results r \nJOIN drivers d ON r.driverid = d.driverid \nWHERE r.raceid = '348' \nORDER BY r.fastestlap ASC \nLIMIT 1;"}
{"sample_id": 10437, "db_id": "formula_1", "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'", "pred_sql": "SELECT r.name, r.date, r.time, d.forename, d.surname, l.milliseconds FROM races r JOIN circuits c ON r.circuitid = c.circuitid JOIN laptimes l ON r.raceid = l.raceid JOIN drivers d ON l.driverid = d.driverid WHERE c.circuitref = 'Austrian Grand Prix' AND l.time = (SELECT MIN(time) FROM laptimes WHERE raceid = r.raceid) LIMIT 1;"}
{"sample_id": 10385, "db_id": "formula_1", "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120", "pred_sql": "SELECT COUNT(DISTINCT d.driverid) AS french_driver_count\nFROM drivers d\nJOIN laptimes l ON d.driverid = l.driverid\nWHERE d.nationality = 'French' AND l.time < 120000;"}
{"sample_id": 10276, "db_id": "formula_1", "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'", "pred_sql": "SELECT lat, lng FROM circuits WHERE circuitid IN (SELECT circuitid FROM races WHERE name = 'Australian Grand Prix')"}
{"sample_id": 10290, "db_id": "formula_1", "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'", "pred_sql": "SELECT location, lat, lng FROM circuits WHERE circuitref = 'malaysiangp';"}
{"sample_id": 10414, "db_id": "formula_1", "gold_sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC", "pred_sql": "SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC;"}
{"sample_id": 10372, "db_id": "formula_1", "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291", "pred_sql": "SELECT constructors.name FROM constructors JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = '291' AND constructorresults.points = '0';"}
{"sample_id": 10400, "db_id": "formula_1", "gold_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'", "pred_sql": "SELECT location, lat, lng, COUNT(*) AS circuit_count FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng;"}
{"sample_id": 10336, "db_id": "formula_1", "gold_sql": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers", "pred_sql": "SELECT COUNT(*) AS drivers_without_code FROM drivers WHERE code IS NULL OR code = '';"}
{"sample_id": 10339, "db_id": "formula_1", "gold_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'", "pred_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';"}
{"sample_id": 10431, "db_id": "formula_1", "gold_sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'", "pred_sql": "SELECT p.driverid, p.lap, p.duration FROM pitstops p JOIN races r ON p.raceid = r.raceid WHERE r.year = '2011' AND r.name = 'Australian Grand Prix';"}
{"sample_id": 10268, "db_id": "formula_1", "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5", "pred_sql": "SELECT d.driverref FROM qualifying q JOIN races r ON q.raceid = r.raceid JOIN drivers d ON q.driverid = d.driverid WHERE r.round = '20' AND (q.q1 IS NULL OR q.q1 = '')"}
{"sample_id": 10281, "db_id": "formula_1", "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'", "pred_sql": "SELECT q1 FROM qualifying WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceid = 354;"}
{"sample_id": 10363, "db_id": "formula_1", "gold_sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'", "pred_sql": "SELECT SUM(driverstandings.points) AS total_points\nFROM driverstandings\nJOIN drivers ON driverstandings.driverid = drivers.driverid\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}
{"sample_id": 10383, "db_id": "formula_1", "gold_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1", "pred_sql": "SELECT r.name, r.year FROM results res JOIN races r ON res.raceid = r.raceid ORDER BY res.time ASC LIMIT 1;"}
{"sample_id": 10366, "db_id": "formula_1", "gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)", "pred_sql": "SELECT (100.0 * (last_driver.fastestlap - champion.fastestlap) / last_driver.fastestlap) AS percentage_difference\nFROM (\n    SELECT d.driverid, r.raceid, r.name, r.date, r.time, r.year, r.round, r.position, r.fastestlap\n    FROM results r\n    JOIN drivers d ON r.driverid = d.driverid\n    WHERE r.raceid = (SELECT raceid FROM races WHERE year = '2008' AND name = 'Australian Grand Prix')\n    AND r.position = (SELECT MAX(position) FROM results WHERE raceid = r.raceid)\n) AS last_driver,\n(\n    SELECT d.driverid, r.raceid, r.name, r.date, r.time, r.year, r.round, r.position, r.fastestlap\n    FROM results r\n    JOIN drivers d ON r.driverid = d.driverid\n    WHERE r.raceid = (SELECT raceid FROM races WHERE year = '2008' AND name = 'Australian Grand Prix')\n    AND r.position = (SELECT MIN(position) FROM results WHERE raceid = r.raceid)\n) AS champion;"}
{"sample_id": 10356, "db_id": "formula_1", "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989", "pred_sql": "SELECT d.forename, d.surname \nFROM results r \nJOIN drivers d ON r.driverid = d.driverid \nJOIN races ra ON r.raceid = ra.raceid \nWHERE ra.year = '1989' AND ra.name = 'Australian Grand Prix' AND r.grid = '4';"}
{"sample_id": 10317, "db_id": "formula_1", "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'", "pred_sql": "SELECT AVG(laptimes.time) AS average_lap_time\nFROM laptimes\nJOIN results ON laptimes.raceid = results.raceid AND laptimes.driverid = results.driverid\nJOIN races ON results.raceid = races.raceid\nJOIN drivers ON results.driverid = drivers.driverid\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = '2009' AND races.name = 'Malaysian Grand Prix';"}
{"sample_id": 10393, "db_id": "formula_1", "gold_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1", "pred_sql": "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;"}
{"sample_id": 10331, "db_id": "formula_1", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'", "pred_sql": "SELECT (COUNT(CASE WHEN country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE name LIKE '%European Grand Prix%';"}
{"sample_id": 10278, "db_id": "formula_1", "gold_sql": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'", "pred_sql": "SELECT races.time FROM races JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Sepang International Circuit';"}
{"sample_id": 10434, "db_id": "formula_1", "gold_sql": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1", "pred_sql": "SELECT circuits.name, results.position, results.fastestlaptime \nFROM results \nJOIN races ON results.raceid = races.raceid \nJOIN circuits ON races.circuitid = circuits.circuitid \nJOIN drivers ON results.driverid = drivers.driverid \nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.fastestlap = '1'"}
{"sample_id": 10416, "db_id": "formula_1", "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1", "pred_sql": "SELECT c.name, c.nationality, SUM(cr.points) AS total_points\nFROM constructors c\nJOIN constructorresults cr ON c.constructorid = cr.constructorid\nJOIN races r ON cr.raceid = r.raceid\nWHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN '1980' AND '2010'\nGROUP BY c.constructorid\nORDER BY total_points DESC\nLIMIT 1;"}
{"sample_id": 10279, "db_id": "formula_1", "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'", "pred_sql": "SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';"}
{"sample_id": 10292, "db_id": "formula_1", "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'", "pred_sql": "SELECT q1 FROM qualifying WHERE driverid = (SELECT driverid FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND raceid = '345';"}
{"sample_id": 10351, "db_id": "formula_1", "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'", "pred_sql": "SELECT races.name, races.date, races.time, circuits.name AS circuit_name, circuits.location, circuits.country \nFROM results \nJOIN races ON results.raceid = races.raceid \nJOIN circuits ON races.circuitid = circuits.circuitid \nJOIN drivers ON results.driverid = drivers.driverid \nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';"}
{"sample_id": 10330, "db_id": "formula_1", "gold_sql": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1", "pred_sql": "SELECT r.name, r.year, c.location \nFROM races r \nJOIN circuits c ON r.circuitid = c.circuitid \nORDER BY r.laps DESC \nLIMIT 1;"}
{"sample_id": 10361, "db_id": "formula_1", "gold_sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008", "pred_sql": "SELECT COUNT(DISTINCT d.driverid) AS driver_count \nFROM drivers d \nJOIN results r ON d.driverid = r.driverid \nJOIN races ra ON r.raceid = ra.raceid \nWHERE d.nationality = 'UN' AND ra.year = '2008' AND ra.name = 'Australian Grand Prix';"}
{"sample_id": 10413, "db_id": "formula_1", "gold_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'", "pred_sql": "SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31';"}
{"sample_id": 10407, "db_id": "formula_1", "gold_sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1", "pred_sql": "SELECT d.forename, d.surname, l.time \nFROM drivers d \nJOIN laptimes l ON d.driverid = l.driverid \nJOIN races r ON l.raceid = r.raceid \nWHERE r.name = 'French Grand Prix' AND l.lap = 3 \nORDER BY l.time ASC \nLIMIT 1;"}
{"sample_id": 10375, "db_id": "formula_1", "gold_sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'", "pred_sql": "SELECT COUNT(DISTINCT c.constructorid) AS french_constructor_count\nFROM constructors c\nJOIN constructorresults cr ON c.constructorid = cr.constructorid\nJOIN races r ON cr.raceid = r.raceid\nJOIN laptimes l ON r.raceid = l.raceid\nWHERE c.nationality = 'French' AND l.lap > 50;"}
{"sample_id": 10376, "db_id": "formula_1", "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009", "pred_sql": "SELECT COUNT(DISTINCT r.raceid) AS total_races, COUNT(DISTINCT CASE WHEN r.position = '1' THEN r.resultid END) AS completed_races, (COUNT(DISTINCT CASE WHEN r.position = '1' THEN r.resultid END) * 100.0 / COUNT(DISTINCT r.raceid)) AS completion_percentage\nFROM results r\nJOIN drivers d ON r.driverid = d.driverid\nJOIN races ra ON r.raceid = ra.raceid\nWHERE d.nationality = 'Japanese' AND ra.year BETWEEN '2007' AND '2009';"}
{"sample_id": 8971, "db_id": "human_resources", "gold_sql": "SELECT locationcity, address FROM location WHERE zipcode > 90000", "pred_sql": "SELECT locationcity, address FROM location WHERE zipcode > '90000';"}
{"sample_id": 8958, "db_id": "human_resources", "gold_sql": "SELECT COUNT(*) FROM position WHERE CAST(REPLACE(SUBSTR(maxsalary, 4), ',', '') AS REAL) < 100000", "pred_sql": "SELECT COUNT(*) AS position_count FROM position WHERE maxsalary <= 1000000;"}
{"sample_id": 8969, "db_id": "human_resources", "gold_sql": "SELECT firstname, lastname, performance FROM employee ORDER BY salary ASC LIMIT 1", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name, performance FROM employee WHERE salary = (SELECT MIN(salary) FROM employee)"}
{"sample_id": 8979, "db_id": "human_resources", "gold_sql": "SELECT T1.firstname, T1.lastname, T2.locationcity, T2.address, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T3.positiontitle = 'Manager' AND T1.performance = 'Poor'", "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS full_name, l.locationcity, l.address, l.zipcode \nFROM employee e \nJOIN location l ON e.locationid = l.locationid \nWHERE e.performance = 'Poor'"}
{"sample_id": 8961, "db_id": "human_resources", "gold_sql": "SELECT T2.address, T2.locationcity, T2.state, T2.zipcode FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID GROUP BY T2.address, T2.locationcity, T2.state, T2.zipcode ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT location.address FROM location JOIN employee ON location.locationid = employee.locationid GROUP BY location.address ORDER BY COUNT(employee.ssn) DESC LIMIT 1;"}
{"sample_id": 8925, "db_id": "human_resources", "gold_sql": "SELECT firstname, lastname FROM employee ORDER BY salary DESC LIMIT 1", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employee ORDER BY salary DESC LIMIT 1;"}
{"sample_id": 8957, "db_id": "human_resources", "gold_sql": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL)) FROM employee )", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employee ORDER BY salary DESC LIMIT 1;"}
{"sample_id": 8963, "db_id": "human_resources", "gold_sql": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'", "pred_sql": "SELECT COUNT(*) AS male_regional_managers_count FROM employee e JOIN position p ON e.positionid = p.positionid WHERE e.gender = 'Male' AND p.positiontitle = 'Regional Manager';"}
{"sample_id": 8930, "db_id": "human_resources", "gold_sql": "SELECT T2.locationcity FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T1.lastname = 'Adams' AND T1.firstname = 'Sandy'", "pred_sql": "SELECT location.locationcity FROM employee JOIN location ON employee.locationid = location.locationid WHERE employee.firstname = 'Sandy' AND employee.lastname = 'Adams';"}
{"sample_id": 8944, "db_id": "human_resources", "gold_sql": "SELECT COUNT(*) FROM employee WHERE gender = 'F'", "pred_sql": "SELECT COUNT(*) AS female_employee_count FROM employee WHERE gender = 'Female';"}
{"sample_id": 8927, "db_id": "human_resources", "gold_sql": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTR(salary, 4), ',', '') AS REAL) > 70000", "pred_sql": "SELECT ssn FROM employee WHERE gender = 'male' AND salary > 70000;"}
{"sample_id": 8962, "db_id": "human_resources", "gold_sql": "SELECT AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree'", "pred_sql": "SELECT AVG(e.salary) AS average_salary FROM employee e JOIN position p ON e.positionid = p.positionid WHERE p.educationrequired = 2;"}
{"sample_id": 8977, "db_id": "human_resources", "gold_sql": "SELECT T1.firstname, T1.lastname, T1.gender, T3.positiontitle FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID INNER JOIN position AS T3  ON T3.positionID = T1.positionID WHERE T2.locationcity = 'New York City'", "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS full_name, e.gender, p.positiontitle \nFROM employee e \nJOIN location l ON e.locationid = l.locationid \nJOIN position p ON e.positionid = p.positionid \nWHERE l.locationcity = 'New York'"}
{"sample_id": 853, "db_id": "social_media", "gold_sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN Likes ELSE NULL END) / COUNT(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN City = 'Chiang Mai' THEN Likes ELSE NULL END) / COUNT(CASE WHEN City = 'Chiang Mai' THEN TweetID ELSE NULL END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')", "pred_sql": "SELECT city, AVG(likes) AS average_likes \nFROM twitter \nJOIN location ON twitter.locationid = location.locationid \nWHERE city IN ('Bangkok', 'Chiang Mai') \nGROUP BY city \nORDER BY average_likes DESC;"}
{"sample_id": 827, "db_id": "social_media", "gold_sql": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'", "pred_sql": "SELECT country FROM location JOIN twitter ON location.locationid = twitter.locationid WHERE tweetid = 'tw-682723090279841798';"}
{"sample_id": 809, "db_id": "social_media", "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1", "pred_sql": "SELECT user.gender \nFROM twitter \nJOIN user ON twitter.userid = user.userid \nWHERE twitter.likes = (SELECT MAX(likes) FROM twitter)"}
{"sample_id": 838, "db_id": "social_media", "gold_sql": "SELECT text FROM twitter ORDER BY Reach DESC LIMIT 3", "pred_sql": "SELECT text FROM twitter ORDER BY reach DESC LIMIT 3;"}
{"sample_id": 847, "db_id": "social_media", "gold_sql": "SELECT SUM(CASE WHEN T2.City = 'Bangkok' THEN 1 ELSE 0 END) AS bNum , SUM(CASE WHEN T2.City = 'Chiang Mai' THEN 1 ELSE 0 END) AS cNum FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T2.City IN ('Bangkok', 'Chiang Mai')", "pred_sql": "SELECT city, COUNT(*) as tweet_count FROM location JOIN twitter ON location.locationid = twitter.locationid WHERE city IN ('Bangkok', 'Chiang Mai') GROUP BY city ORDER BY tweet_count DESC LIMIT 1;"}
{"sample_id": 805, "db_id": "social_media", "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.TweetID = 'tw-715909161071091712'", "pred_sql": "SELECT user.gender FROM user JOIN twitter ON user.userid = twitter.userid WHERE twitter.tweetid = 'tw-715909161071091712';"}
{"sample_id": 825, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.UserID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Female' AND T1.IsReshare = 'TRUE'", "pred_sql": "SELECT COUNT(DISTINCT u.userid) AS female_resharers FROM user u JOIN twitter t ON u.userid = t.userid WHERE u.gender = 1 AND t.isreshare = 'true';"}
{"sample_id": 846, "db_id": "social_media", "gold_sql": "SELECT T2.City FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID ORDER BY T1.RetweetCount DESC LIMIT 1", "pred_sql": "SELECT city FROM twitter JOIN location ON twitter.locationid = location.locationid ORDER BY retweetcount DESC LIMIT 1;"}
{"sample_id": 839, "db_id": "social_media", "gold_sql": "SELECT COUNT(DISTINCT TweetID) FROM twitter WHERE IsReshare = 'TRUE' AND Likes > 100", "pred_sql": "SELECT COUNT(*) AS reshared_tweet_count FROM twitter WHERE isreshare = 'true' AND likes > 100;"}
{"sample_id": 813, "db_id": "social_media", "gold_sql": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'", "pred_sql": "SELECT (COUNT(CASE WHEN sentiment > 0 THEN 1 END) * 100.0 / COUNT(*)) AS positive_percentage FROM twitter JOIN location ON twitter.locationid = location.locationid WHERE location.state = 'California';"}
{"sample_id": 826, "db_id": "social_media", "gold_sql": "SELECT T.Country FROM ( SELECT T2.Country, SUM(T1.Likes) AS num FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID GROUP BY T2.Country ) T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT l.country, SUM(t.likes) AS total_likes\nFROM twitter t\nJOIN location l ON t.locationid = l.locationid\nGROUP BY l.country\nORDER BY total_likes DESC\nLIMIT 1;"}
{"sample_id": 841, "db_id": "social_media", "gold_sql": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1", "pred_sql": "SELECT user.gender FROM user JOIN twitter ON user.userid = twitter.userid WHERE twitter.likes = (SELECT MAX(likes) FROM twitter)"}
{"sample_id": 789, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Likes > 10 AND T2.Gender = 'Male'", "pred_sql": "SELECT COUNT(DISTINCT u.userid) AS male_user_count \nFROM user u \nJOIN twitter t ON u.userid = t.userid \nWHERE t.likes > 1000 AND u.gender = 1;"}
{"sample_id": 798, "db_id": "social_media", "gold_sql": "SELECT DISTINCT StateCode FROM location WHERE State = 'Gwynedd'", "pred_sql": "SELECT statecode FROM location WHERE state = 'Gwynedd';"}
{"sample_id": 822, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'", "pred_sql": "SELECT COUNT(twitter.tweetid) AS total_male_tweets FROM twitter JOIN user ON twitter.userid = user.userid WHERE user.gender = 'Male';"}
{"sample_id": 792, "db_id": "social_media", "gold_sql": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T3.Gender = 'Male' AND T2.Country = 'Argentina'", "pred_sql": "SELECT COUNT(*) AS tweet_count FROM twitter INNER JOIN user ON twitter.userid = user.userid INNER JOIN location ON twitter.locationid = location.locationid WHERE user.gender = 'Male' AND location.country = 'Argentina';"}
{"sample_id": 832, "db_id": "social_media", "gold_sql": "SELECT SUM(T1.Likes) FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T1.Lang = 'ru' AND T2.Gender = 'Male'", "pred_sql": "SELECT SUM(t.likes) AS total_likes\nFROM twitter t\nJOIN user u ON t.userid = u.userid\nJOIN location l ON t.locationid = l.locationid\nWHERE l.country = 'ru' AND u.gender = 'Male';"}
{"sample_id": 2466, "db_id": "shooting", "gold_sql": "SELECT CAST(SUM(subject_statuses = 'Shoot and Miss') AS REAL) * 100 / COUNT(case_number) FROM incidents WHERE subject_weapon = 'Handgun'", "pred_sql": "SELECT (COUNT(CASE WHEN subject_statuses = 'Shoot and Miss' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM incidents\nWHERE subject_weapon = 'Handgun';"}
{"sample_id": 2461, "db_id": "shooting", "gold_sql": "SELECT CAST(SUM(IIF(race = 'W', 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'", "pred_sql": "SELECT (COUNT(CASE WHEN race = 'White' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_white_officers FROM officers WHERE gender = 'M';"}
{"sample_id": 2486, "db_id": "shooting", "gold_sql": "SELECT T1.subject_weapon, T2.race, T2.gender FROM incidents AS T1 INNER JOIN subjects AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '031347-2015'", "pred_sql": "SELECT incidents.subject_weapon, subjects.race, subjects.gender FROM incidents JOIN subjects ON incidents.case_number = subjects.case_number WHERE incidents.case_number = '031347-2015';"}
{"sample_id": 2480, "db_id": "shooting", "gold_sql": "SELECT COUNT(case_number) FROM incidents WHERE date BETWEEN '2015-06-01' AND '2015-06-30'", "pred_sql": "SELECT COUNT(*) AS instance_count FROM incidents WHERE date LIKE '2015-06%';"}
{"sample_id": 2471, "db_id": "shooting", "gold_sql": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'", "pred_sql": "SELECT officers.last_name, incidents.subject_statuses FROM officers JOIN incidents ON officers.case_number = incidents.case_number WHERE officers.case_number = '134472-2015';"}
{"sample_id": 2483, "db_id": "shooting", "gold_sql": "SELECT CAST(SUM(gender = 'M') AS REAL) / SUM(gender = 'F') FROM officers WHERE race = 'W'", "pred_sql": "SELECT race, gender, COUNT(*) AS count FROM officers WHERE race = 'White' GROUP BY gender;"}
{"sample_id": 1393, "db_id": "synthea", "gold_sql": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.gender = 'F' AND T1.ethnicity = 'american' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "pred_sql": "SELECT conditions.description, COUNT(*) as condition_count\nFROM conditions\nJOIN patients ON conditions.patient = patients.patient\nWHERE patients.gender = 'F' AND patients.ethnicity = 'American'\nGROUP BY conditions.description\nORDER BY condition_count DESC\nLIMIT 1;"}
{"sample_id": 1531, "db_id": "synthea", "gold_sql": "SELECT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.address = '179 Sydni Roads Taunton MA 02780 US'", "pred_sql": "SELECT careplans.description FROM careplans JOIN patients ON careplans.patient = patients.patient WHERE patients.address = '179 Sydni Roads, Taunton, MA 02780 US';"}
{"sample_id": 1383, "db_id": "synthea", "gold_sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Keven' AND T1.last = 'Kuhn' AND T2.start = '2016-09-24' AND T2.stop = '2016-10-10'", "pred_sql": "SELECT c.description FROM conditions c\nJOIN patients p ON c.patient = p.patient\nWHERE p.first = 'Keven' AND p.last = 'Kuhn' AND c.start >= '2016-09-24' AND c.stop <= '2016-10-10';"}
{"sample_id": 1400, "db_id": "synthea", "gold_sql": "SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1", "pred_sql": "SELECT conditions.description, COUNT(*) as condition_count\nFROM immunizations\nJOIN conditions ON immunizations.patient = conditions.patient\nWHERE immunizations.description = 'influenza seasonal injectable preservative free'\nGROUP BY conditions.description\nORDER BY condition_count DESC\nLIMIT 1;"}
{"sample_id": 1462, "db_id": "synthea", "gold_sql": "SELECT COUNT(T2.PATIENT) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START BETWEEN '2009-01-11' AND '2010-10-23'", "pred_sql": "SELECT COUNT(*) AS care_plan_count \nFROM careplans cp \nJOIN patients p ON cp.patient = p.patient \nWHERE p.first = 'Elly' AND p.last = 'Koss' \nAND cp.start >= '2009-01-11' AND cp.stop <= '2010-10-23';"}
{"sample_id": 1419, "db_id": "synthea", "gold_sql": "SELECT COUNT(T2.ID) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'", "pred_sql": "SELECT COUNT(*) AS encounter_count FROM encounters WHERE patient = (SELECT patient FROM patients WHERE first = 'Major' AND last = 'D'Amore')"}
{"sample_id": 1487, "db_id": "synthea", "gold_sql": "SELECT CAST(SUM(CASE WHEN T5.DESCRIPTION = T3.DESCRIPTION THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.patient) FROM ( SELECT T2.DESCRIPTION, T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE ROUND((strftime('%J', T2.START) - strftime('%J', T1.birthdate)) / 365) > 60 GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1 ) AS T3 INNER JOIN patients AS T4 ON T3.patient = T4.patient INNER JOIN conditions AS T5 ON T4.patient = T5.PATIENT WHERE ROUND((strftime('%J', T5.START) - strftime('%J', T4.birthdate)) / 365) > 60", "pred_sql": "SELECT item, (SUM(1.0 * occurrences / population_count) * 100) AS prevalence_percentage\nFROM all_prevalences\nWHERE item IN (\n    SELECT description\n    FROM conditions\n    WHERE patient IN (\n        SELECT patient\n        FROM patients\n        WHERE (CASE WHEN deathdate IS NULL THEN strftime('%Y', 'now') ELSE strftime('%Y', deathdate) END) - strftime('%Y', birthdate) >= 60\n    )\n)\nGROUP BY item\nORDER BY prevalence_percentage DESC\nLIMIT 1;"}
{"sample_id": 1375, "db_id": "synthea", "gold_sql": "SELECT T2.reasondescription FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Annabelle' AND T1.last = 'Pouros' AND T2.start = '1970-12-19' AND T2.description = 'Leucovorin 100 MG Injection'", "pred_sql": "SELECT procedures.reasondescription FROM patients JOIN procedures ON patients.patient = procedures.patient WHERE patients.first = 'Annabelle' AND patients.last = 'Pouros' AND procedures.description = 'leucovorin 100 mg injection' AND procedures.date = '1970-12-19';"}
{"sample_id": 1535, "db_id": "synthea", "gold_sql": "SELECT T2.ssn FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' ORDER BY T1.VALUE DESC LIMIT 1", "pred_sql": "SELECT p.ssn FROM patients p JOIN observations o ON p.patient = o.patient WHERE o.description = 'systolic blood pressure' ORDER BY o.value DESC LIMIT 1;"}
{"sample_id": 1431, "db_id": "synthea", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'", "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS english_patients_count, \n       (COUNT(DISTINCT p.patient) * 100.0 / (SELECT COUNT(DISTINCT p2.patient) \n                                               FROM immunizations i2 \n                                               JOIN patients p2 ON i2.patient = p2.patient \n                                               WHERE i2.date BETWEEN '2017-01-01' AND '2017-12-31' \n                                                 AND i2.description = 'Influenza seasonal injectable preservative free')) AS percentage \nFROM immunizations i \nJOIN patients p ON i.patient = p.patient \nWHERE i.date BETWEEN '2017-01-01' AND '2017-12-31' \n  AND i.description = 'Influenza seasonal injectable preservative free' \n  AND p.ethnicity = 'English';"}
{"sample_id": 1512, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.STOP FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL AND T1.STOP IS NOT NULL", "pred_sql": "SELECT careplans.stop FROM careplans JOIN patients ON careplans.patient = patients.patient WHERE patients.deathdate IS NOT NULL;"}
{"sample_id": 1467, "db_id": "synthea", "gold_sql": "SELECT strftime('%J', T2.STOP) - strftime('%J', T2.START) AS takenDays FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Berry' AND T1.last = 'Keebler' AND T2.REASONDESCRIPTION = 'Acute bronchitis (disorder)' AND T2.DESCRIPTION = 'Acetaminophen 160 MG'", "pred_sql": "SELECT m.start, m.stop, (julianday(m.stop) - julianday(m.start)) AS duration_days \nFROM medications m \nJOIN patients p ON m.patient = p.patient \nJOIN encounters e ON m.encounter = e.id \nWHERE p.first = 'Berry' AND p.last = 'Keebler' \nAND m.description = 'Acetaminophen 160 MG' \nAND e.reasoncode = 'acute bronchitis';"}
{"sample_id": 1439, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'House dust mite allergy' AND T1.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS male_allergic_count\nFROM patients p\nJOIN allergies a ON p.patient = a.patient\nWHERE p.gender = 'M' AND a.description = 'house dust mites';"}
{"sample_id": 1506, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.REASONDESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.first = 'Angelo' AND T2.last = 'Buckridge'", "pred_sql": "SELECT careplans.reasondescription FROM careplans JOIN patients ON careplans.patient = patients.patient WHERE patients.first = 'Angelo' AND patients.last = 'Buckridge';"}
{"sample_id": 1541, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T2.birthdate FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Penicillin V Potassium 250 MG' AND T2.gender = 'M' LIMIT 5", "pred_sql": "SELECT p.birthdate FROM patients p JOIN medications m ON p.patient = m.patient WHERE p.gender = 'M' AND m.description = 'Penicillin V Potassium 250 MG' LIMIT 5;"}
{"sample_id": 1391, "db_id": "synthea", "gold_sql": "SELECT DESCRIPTION FROM allergies GROUP BY DESCRIPTION ORDER BY COUNT(DESCRIPTION) DESC LIMIT 1", "pred_sql": "SELECT description, COUNT(*) as allergy_count FROM allergies GROUP BY description ORDER BY allergy_count DESC LIMIT 1;"}
{"sample_id": 1414, "db_id": "synthea", "gold_sql": "SELECT T1.DESCRIPTION FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL ORDER BY strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) DESC LIMIT 1", "pred_sql": "SELECT conditions.description FROM patients JOIN conditions ON patients.patient = conditions.patient WHERE patients.deathdate IS NOT NULL ORDER BY (CASE WHEN patients.deathdate IS NOT NULL THEN strftime('%Y', patients.deathdate) - strftime('%Y', patients.birthdate) ELSE 0 END) DESC LIMIT 1;"}
{"sample_id": 1427, "db_id": "synthea", "gold_sql": "SELECT T2.DESCRIPTION FROM allergies AS T1 INNER JOIN medications AS T2 ON T1.PATIENT = T2.PATIENT WHERE T1.START = '6/6/16' AND T1.DESCRIPTION = 'Allergy to mould'", "pred_sql": "SELECT medications.* FROM medications JOIN allergies ON medications.patient = allergies.patient WHERE allergies.description = 'mould' AND allergies.start <= '2016-06-06' AND allergies.stop >= '2016-06-06';"}
{"sample_id": 1508, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.ENCOUNTER FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.birthplace = 'Pembroke MA US'", "pred_sql": "SELECT encounters.id FROM encounters JOIN patients ON encounters.patient = patients.patient WHERE patients.birthplace = 'Pembroke MA US';"}
{"sample_id": 1510, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'white' AND T1.REASONCODE = '10509002'", "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS white_patient_count \nFROM patients p \nJOIN encounters e ON p.patient = e.patient \nWHERE p.race = 'white' AND e.reasoncode = '10509002';"}
{"sample_id": 1469, "db_id": "synthea", "gold_sql": "SELECT T2.REASONDESCRIPTION FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2013-11-20' AND T1.first = 'Lavelle' AND T1.last = 'Vandervort'", "pred_sql": "SELECT e.reasondescription FROM encounters e JOIN patients p ON e.patient = p.patient WHERE p.first = 'Lavelle' AND p.last = 'Vandervort' AND e.date = '2013-11-20';"}
{"sample_id": 1413, "db_id": "synthea", "gold_sql": "SELECT T2.first, T2.last FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.CODE = 315043002", "pred_sql": "SELECT p.first || ' ' || p.last AS full_name \nFROM patients p \nJOIN careplans cp ON p.patient = cp.patient \nWHERE cp.code = '311791003';"}
{"sample_id": 1456, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM careplans AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'rotavirus  monovalent' AND T1.STOP = '2013-11-23'", "pred_sql": "SELECT COUNT(DISTINCT c.patient) AS patient_count \nFROM careplans c \nJOIN immunizations i ON c.patient = i.patient \nWHERE i.description = 'monovalent rotavirus' \nAND c.stop = '2013-11-23';"}
{"sample_id": 1412, "db_id": "synthea", "gold_sql": "SELECT T2.ssn FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to grass pollen' AND T2.ethnicity = 'irish' AND T2.gender = 'F'", "pred_sql": "SELECT p.ssn \nFROM patients p \nJOIN allergies a ON p.patient = a.patient \nJOIN conditions c ON a.encounter = c.encounter \nWHERE p.gender = 'F' \nAND p.ethnicity = 'Irish' \nAND c.description = 'grass pollen';"}
{"sample_id": 1397, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'black' AND T2.DESCRIPTION = 'DTaP' AND strftime('%Y', T2.DATE) = '2013'", "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS black_patient_count \nFROM patients p \nJOIN immunizations i ON p.patient = i.patient \nWHERE p.race = 'Black' \nAND i.code = 'DTaP' \nAND strftime('%Y', i.date) = '2013';"}
{"sample_id": 1471, "db_id": "synthea", "gold_sql": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'", "pred_sql": "SELECT p.ssn, p.address \nFROM patients p \nJOIN encounters e ON p.patient = e.patient \nJOIN conditions c ON e.id = c.encounter \nWHERE c.description = 'viral sinusitis' AND e.date = '2008-06-13';"}
{"sample_id": 1522, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN immunizations AS T3 ON T1.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'IPV'", "pred_sql": "SELECT c.description AS condition_description \nFROM conditions c \nJOIN immunizations i ON c.patient = i.patient \nWHERE i.code = 'IPV'"}
{"sample_id": 1536, "db_id": "synthea", "gold_sql": "SELECT T4.DESCRIPTION FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON T2.DESCRIPTION = T1.ITEM INNER JOIN encounters AS T3 ON T2.ENCOUNTER = T3.ID INNER JOIN careplans AS T4 ON T4.ENCOUNTER = T3.ID ORDER BY T1.\"PREVALENCE PERCENTAGE\" DESC LIMIT 1", "pred_sql": "SELECT cp.description \nFROM careplans cp \nJOIN conditions c ON cp.encounter = c.encounter \nJOIN all_prevalences ap ON c.description = ap.item \nORDER BY ap.prevalence_percentage DESC \nLIMIT 1;"}
{"sample_id": 1398, "db_id": "synthea", "gold_sql": "SELECT COUNT(T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) INNER JOIN immunizations AS T3 ON T2.PATIENT = T3.PATIENT GROUP BY T2.PATIENT ORDER BY T2.START DESC, T1.\"PREVALENCE RATE\" DESC LIMIT 1", "pred_sql": "SELECT COUNT(i.id) AS immunization_count\nFROM immunizations i\nJOIN conditions c ON i.patient = c.patient\nWHERE c.start = (SELECT MAX(start) FROM conditions WHERE description = (SELECT item FROM all_prevalences ORDER BY prevalence_rate DESC LIMIT 1))"}
{"sample_id": 1369, "db_id": "synthea", "gold_sql": "SELECT T2.description FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Elly' AND T1.last = 'Koss' AND T2.START = '2009-01-08'", "pred_sql": "SELECT c.description FROM conditions c JOIN patients p ON c.patient = p.patient WHERE p.first = 'Elly' AND p.last = 'Koss' AND c.start <= '2009-01-08' AND c.stop >= '2009-01-08';"}
{"sample_id": 1507, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T1.DESCRIPTION FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.ethnicity = 'american'", "pred_sql": "SELECT careplans.description FROM careplans JOIN patients ON careplans.patient = patients.patient WHERE patients.birthplace = 'America';"}
{"sample_id": 1387, "db_id": "synthea", "gold_sql": "SELECT PATIENT FROM allergies WHERE STOP IS NOT NULL GROUP BY PATIENT ORDER BY CASE WHEN SUBSTR(STOP, -2, 1) != '9' THEN SUBSTR(STOP, LENGTH(STOP) - 1) + 2000 END - CASE WHEN SUBSTR(START, -2, 1) = '9' THEN SUBSTR(START, LENGTH(START) - 1) + 1900 ELSE SUBSTR(START, LENGTH(START) - 1) + 2000 END LIMIT 1", "pred_sql": "SELECT patient, MAX(stop - start) AS longest_allergy_period FROM allergies GROUP BY patient ORDER BY longest_allergy_period DESC LIMIT 1;"}
{"sample_id": 1384, "db_id": "synthea", "gold_sql": "SELECT T2.date FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mrs.' AND T1.first = 'Ira' AND T1.last = 'Deckow' AND T2.description = 'Standard pregnancy test'", "pred_sql": "SELECT procedures.date FROM procedures JOIN patients ON procedures.patient = patients.patient WHERE patients.first = 'Ira' AND patients.last = 'Deckow' AND procedures.description LIKE '%standard pregnancy test%';"}
{"sample_id": 1473, "db_id": "synthea", "gold_sql": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN allergies AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Shellfish allergy' AND CAST((strftime('%J', T1.deathdate) - strftime('%J', T1.birthdate)) AS REAL) / 365 < 12", "pred_sql": "SELECT p.first || ' ' || p.last AS full_name \nFROM patients p \nJOIN allergies a ON p.patient = a.patient \nJOIN encounters e ON p.patient = e.patient \nWHERE a.description = 'shellfish' \nAND (p.deathdate IS NOT NULL AND (strftime('%Y', p.deathdate) - strftime('%Y', p.birthdate)) < 12)"}
{"sample_id": 1394, "db_id": "synthea", "gold_sql": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND strftime('%Y', T2.START) = '2016' AND strftime('%m', T2.STOP) - strftime('%m', T2.START) = 1", "pred_sql": "SELECT COUNT(DISTINCT m.patient) AS patient_count\nFROM medications m\nJOIN patients p ON m.patient = p.patient\nWHERE m.description = 'Ibuprofen 200mg Oral Tablet'\nAND m.start >= '2016-01-01' AND m.start < '2017-01-01'\nAND m.stop = DATE(m.start, '+1 month')\nAND p.ethnicity = 'Dominican';"}
{"sample_id": 1539, "db_id": "synthea", "gold_sql": "SELECT DISTINCT T2.first, T2.last FROM medications AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.REASONDESCRIPTION = 'Streptococcal sore throat (disorder)' LIMIT 5", "pred_sql": "SELECT p.first || ' ' || p.last AS full_name \nFROM patients p \nJOIN medications m ON p.patient = m.patient \nJOIN conditions c ON p.patient = c.patient \nWHERE c.description = 'streptococcal sore throat' \nLIMIT 5;"}
{"sample_id": 1409, "db_id": "synthea", "gold_sql": "SELECT COUNT(T2.patient) FROM allergies AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Allergy to peanuts' AND T2.race = 'asian'", "pred_sql": "SELECT COUNT(DISTINCT p.patient) AS total_asian_allergic_patients\nFROM patients p\nJOIN allergies a ON p.patient = a.patient\nWHERE p.ethnicity = 'Asian' AND a.description = 'peanuts';"}
{"sample_id": 3698, "db_id": "college_completion", "gold_sql": "SELECT SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Amridge University' AND T2.gender = 'M' AND T2.race = 'H'", "pred_sql": "SELECT SUM(grad_100) AS total_hispanic_male_grads FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Amridge University' AND ig.gender = 'M' AND ig.race = 'H';"}
{"sample_id": 3719, "db_id": "college_completion", "gold_sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' AND T1.lat_y = ( SELECT MAX(T1.lat_y) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'PA' )", "pred_sql": "SELECT site FROM institution_details WHERE state = 'PA' ORDER BY lat_y DESC LIMIT 1;"}
{"sample_id": 3703, "db_id": "college_completion", "gold_sql": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' AND T2.grad_150 = ( SELECT MAX(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.gender = 'M' AND T2.race = 'W' )", "pred_sql": "SELECT id.chronname, MAX(g.grad_150_rate) AS max_grad_rate\nFROM institution_details AS id\nJOIN institution_grads AS g ON id.unitid = g.unitid\nWHERE g.year = 2011 AND g.gender = 'M' AND g.race = 'W'\nGROUP BY id.chronname\nORDER BY max_grad_rate DESC\nLIMIT 1;"}
{"sample_id": 3713, "db_id": "college_completion", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Mercer University' THEN state ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "pred_sql": "SELECT state FROM institution_details WHERE chronname = 'Mercer University';"}
{"sample_id": 3699, "db_id": "college_completion", "gold_sql": "SELECT COUNT(T1.unitid) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Lincoln College' AND T2.year = 2011 AND T2.cohort = '4y bach'", "pred_sql": "SELECT SUM(grad_100) AS total_graduates FROM institution_grads ig JOIN institution_details id ON ig.unitid = id.unitid WHERE id.chronname = 'Lincoln College' AND ig.year = 2011 AND ig.cohort = '4y bach';"}
{"sample_id": 3707, "db_id": "college_completion", "gold_sql": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.med_sat_percentile = '100' AND T2.year = 2011 AND T2.grad_cohort > 500", "pred_sql": "SELECT COUNT(*) AS total_institutes\nFROM institution_details id\nJOIN institution_grads ig ON id.unitid = ig.unitid\nWHERE id.state = 'Alabama'\nAND id.med_sat_percentile = '77'\nAND ig.year = 2011\nAND ig.grad_cohort > 500;"}
{"sample_id": 3738, "db_id": "college_completion", "gold_sql": "SELECT DISTINCT T1.site FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.student_count BETWEEN 500 AND 1000 AND T2.year = ( SELECT MAX(T2.year) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid )", "pred_sql": "SELECT site FROM institution_details WHERE student_count BETWEEN '500' AND '1000' ORDER BY vsa_year DESC LIMIT 1;"}
{"sample_id": 3730, "db_id": "college_completion", "gold_sql": "SELECT DISTINCT T1.state, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.race = 'B' AND T2.year BETWEEN 2010 AND 2012", "pred_sql": "SELECT id.state, id.chronname \nFROM institution_details id \nJOIN institution_grads ig ON id.unitid = ig.unitid \nWHERE ig.year BETWEEN 2010 AND 2012 \nAND ig.race = 'B';"}
{"sample_id": 3715, "db_id": "college_completion", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN state = 'Delaware' THEN state_abbr ELSE NULL END AS T FROM state_sector_grads ) WHERE T IS NOT NULL", "pred_sql": "SELECT state_abbr FROM state_sector_details WHERE state = 'Delaware';"}
{"sample_id": 3712, "db_id": "college_completion", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE WHEN chronname = 'Swarthmore College' THEN site ELSE NULL END AS T FROM institution_details ) WHERE T IS NOT NULL", "pred_sql": "SELECT site FROM institution_details WHERE chronname = 'Swarthmore College';"}
{"sample_id": 3693, "db_id": "college_completion", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.race = 'B' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.race = 'B' AND T1.control = 'Private for-profit'", "pred_sql": "SELECT SUM(CASE WHEN race = 'B' THEN grad_cohort ELSE 0 END) * 100.0 / SUM(grad_cohort) AS black_student_percentage\nFROM institution_grads ig\nJOIN institution_details id ON ig.unitid = id.unitid\nWHERE id.control = 'Private for-profit';"}
{"sample_id": 3689, "db_id": "college_completion", "gold_sql": "SELECT T1.chronname, T2.grad_cohort FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'B' AND T2.race = 'X' AND T2.grad_cohort < 200", "pred_sql": "SELECT id.chronname, id.fte_value FROM institution_details id JOIN institution_grads ig ON id.unitid = ig.unitid WHERE ig.year = 2013 AND ig.grad_cohort < 200 AND ig.race = 'X' AND ig.gender = 'B';"}
{"sample_id": 3740, "db_id": "college_completion", "gold_sql": "SELECT DISTINCT T1.site, T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T2.year = 2011 AND T2.race = 'B' AND T2.grad_cohort BETWEEN 20 AND 30", "pred_sql": "SELECT id.site, id.chronname \nFROM institution_details id \nJOIN institution_grads ig ON id.unitid = ig.unitid \nWHERE ig.year = 2011 \nAND ig.race = 'B' \nAND ig.grad_cohort BETWEEN 20 AND 30;"}
{"sample_id": 3685, "db_id": "college_completion", "gold_sql": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2012 AND T2.gender = 'M' ORDER BY T1.aid_value DESC LIMIT 1", "pred_sql": "SELECT SUM(grad_100) AS total_male_graduates\nFROM institution_grads ig\nJOIN institution_details id ON ig.unitid = id.unitid\nWHERE ig.year = 2012 AND ig.gender = 'M' AND id.unitid = (\n    SELECT unitid\n    FROM institution_details\n    ORDER BY aid_value DESC\n    LIMIT 1\n)"}
{"sample_id": 3744, "db_id": "college_completion", "gold_sql": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' AND retain_percentile = ( SELECT MAX(retain_percentile) FROM institution_details WHERE state = 'Connecticut' )", "pred_sql": "SELECT chronname FROM institution_details WHERE state = 'Connecticut' ORDER BY retain_percentile DESC LIMIT 1;"}
{"sample_id": 3711, "db_id": "college_completion", "gold_sql": "SELECT AVG(T2.grad_100_rate) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College'", "pred_sql": "SELECT AVG(grad_100_rate) AS average_grad_100_rate \nFROM institution_grads ig \nJOIN institution_details id ON ig.unitid = id.unitid \nWHERE id.chronname = 'Central Alabama Community College';"}
{"sample_id": 5677, "db_id": "shipping", "gold_sql": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.population DESC LIMIT 1", "pred_sql": "SELECT s.ship_id \nFROM shipment s \nJOIN city c ON s.city_id = c.city_id \nWHERE c.city_id = (SELECT city_id FROM city ORDER BY population DESC LIMIT 1)"}
{"sample_id": 5676, "db_id": "shipping", "gold_sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1147'", "pred_sql": "SELECT cust_name FROM customer WHERE cust_id = (SELECT cust_id FROM shipment WHERE ship_id = 1147);"}
{"sample_id": 5625, "db_id": "shipping", "gold_sql": "SELECT T2.cust_name FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T1.city_id WHERE T3.city_name = 'Oak Park'", "pred_sql": "SELECT customer.cust_name FROM customer JOIN shipment ON customer.cust_id = shipment.cust_id JOIN city ON shipment.city_id = city.city_id WHERE city.city_name = 'Oak Park';"}
{"sample_id": 5624, "db_id": "shipping", "gold_sql": "SELECT T3.first_name, T3.last_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.city_name = 'New York' AND T1.ship_date LIKE '2016-02%'", "pred_sql": "SELECT driver.first_name || ' ' || driver.last_name AS full_name \nFROM driver \nJOIN shipment ON driver.driver_id = shipment.driver_id \nJOIN city ON shipment.city_id = city.city_id \nWHERE city.city_name = 'New York' AND shipment.ship_date BETWEEN '2016-02-01' AND '2016-02-29';"}
{"sample_id": 5634, "db_id": "shipping", "gold_sql": "SELECT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1011'", "pred_sql": "SELECT truck.make FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE shipment.ship_id = 1011;"}
{"sample_id": 5583, "db_id": "shipping", "gold_sql": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE STRFTIME('%Y', T2.ship_date) = '2017' AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) T3", "pred_sql": "SELECT COUNT(DISTINCT c.cust_id) AS customer_count\nFROM customer c\nJOIN shipment s ON c.cust_id = s.cust_id\nWHERE s.ship_date BETWEEN '2017-01-01' AND '2017-12-31'\nAND c.annual_revenue > 30000000;"}
{"sample_id": 5672, "db_id": "shipping", "gold_sql": "SELECT T2.annual_revenue FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1047'", "pred_sql": "SELECT annual_revenue FROM customer WHERE cust_id = (SELECT cust_id FROM shipment WHERE ship_id = 1047);"}
{"sample_id": 5667, "db_id": "shipping", "gold_sql": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1233'", "pred_sql": "SELECT truck.model_year FROM shipment JOIN truck ON shipment.truck_id = truck.truck_id WHERE shipment.ship_id = 1233;"}
{"sample_id": 5636, "db_id": "shipping", "gold_sql": "SELECT T2.state FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1055'", "pred_sql": "SELECT d.state FROM driver d JOIN shipment s ON d.driver_id = s.driver_id WHERE s.ship_id = 1055;"}
{"sample_id": 5595, "db_id": "shipping", "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1701'", "pred_sql": "SELECT city.city_name FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE shipment.ship_id = 1701;"}
{"sample_id": 5593, "db_id": "shipping", "gold_sql": "SELECT COUNT(*) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id GROUP BY T1.model_year ORDER BY T1.model_year ASC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS shipment_count FROM shipment WHERE truck_id = (SELECT truck_id FROM truck ORDER BY model_year ASC LIMIT 1)"}
{"sample_id": 5652, "db_id": "shipping", "gold_sql": "SELECT DISTINCT T1.make FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks'", "pred_sql": "SELECT truck.make FROM truck JOIN shipment ON truck.truck_id = shipment.truck_id JOIN driver ON shipment.driver_id = driver.driver_id WHERE driver.first_name = 'Zachery' AND driver.last_name = 'Hicks';"}
{"sample_id": 5631, "db_id": "shipping", "gold_sql": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND STRFTIME('%Y', T2.ship_date) = '2017'", "pred_sql": "SELECT COUNT(DISTINCT city.city_id) AS city_count FROM city JOIN shipment ON city.city_id = shipment.city_id WHERE city.population > 50000 AND strftime('%Y', shipment.ship_date) = '2017';"}
{"sample_id": 5659, "db_id": "shipping", "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T1.weight DESC LIMIT 1", "pred_sql": "SELECT c.city_name FROM shipment s JOIN city c ON s.city_id = c.city_id ORDER BY s.weight DESC LIMIT 1;"}
{"sample_id": 5619, "db_id": "shipping", "gold_sql": "SELECT SUM(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'San Mateo' AND STRFTIME('%Y', T1.ship_date) = '2016'", "pred_sql": "SELECT SUM(s.weight) AS total_weight\nFROM shipment s\nJOIN city c ON s.city_id = c.city_id\nWHERE c.city_name = 'San Mateo' AND c.state = 'California' AND strftime('%Y', s.ship_date) = '2016';"}
{"sample_id": 5653, "db_id": "shipping", "gold_sql": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_date LIKE '2017-02%'", "pred_sql": "SELECT DISTINCT customer.cust_name FROM customer JOIN shipment ON customer.cust_id = shipment.cust_id WHERE shipment.ship_date BETWEEN '2017-02-01' AND '2017-02-28';"}
{"sample_id": 5579, "db_id": "shipping", "gold_sql": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'", "pred_sql": "SELECT SUM(s.weight) AS total_weight FROM shipment s JOIN customer c ON s.cust_id = c.cust_id WHERE c.cust_name = 'S K L Enterprises Inc';"}
{"sample_id": 5680, "db_id": "shipping", "gold_sql": "SELECT T2.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T1.ship_id = '1117'", "pred_sql": "SELECT customer.address FROM customer JOIN shipment ON customer.cust_id = shipment.cust_id WHERE shipment.ship_id = 1117;"}
{"sample_id": 5641, "db_id": "shipping", "gold_sql": "SELECT T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1088'", "pred_sql": "SELECT last_name FROM driver INNER JOIN shipment ON driver.driver_id = shipment.driver_id WHERE shipment.ship_id = 1088;"}
{"sample_id": 5658, "db_id": "shipping", "gold_sql": "SELECT COUNT(T3.city_name) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.state = 'California' ORDER BY T3.population ASC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS shipment_count \nFROM shipment \nWHERE city_id = (SELECT city_id \n                  FROM city \n                  WHERE state = 'California' \n                  ORDER BY population ASC \n                  LIMIT 1);"}
{"sample_id": 5584, "db_id": "shipping", "gold_sql": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017' AND T2.first_name = 'Sue' AND T2.last_name = 'Newell'", "pred_sql": "SELECT COUNT(*) AS shipment_count \nFROM shipment s \nJOIN customer c ON s.cust_id = c.cust_id \nJOIN driver d ON s.driver_id = d.driver_id \nWHERE d.first_name = 'Sue' AND d.last_name = 'Newell' AND strftime('%Y', s.ship_date) = '2017';"}
{"sample_id": 5622, "db_id": "shipping", "gold_sql": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'", "pred_sql": "SELECT city.city_name, city.state FROM shipment JOIN city ON shipment.city_id = city.city_id WHERE shipment.ship_id = 1002;"}
{"sample_id": 9686, "db_id": "toxicology", "gold_sql": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')", "pred_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');"}
{"sample_id": 9718, "db_id": "toxicology", "gold_sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'", "pred_sql": "SELECT bond.molecule_id \nFROM bond \nJOIN connected ON bond.bond_id = connected.bond_id \nWHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 IN (SELECT atom.atom_id FROM atom WHERE atom.molecule_id = bond.molecule_id AND atom.atom_id != 'TR000_1')"}
{"sample_id": 9664, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'", "pred_sql": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.atom_id BETWEEN '21' AND '25';"}
{"sample_id": 9743, "db_id": "toxicology", "gold_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'", "pred_sql": "SELECT m.molecule_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4';"}
{"sample_id": 9667, "db_id": "toxicology", "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'", "pred_sql": "SELECT AVG(bond_count) AS average_bonds FROM (SELECT COUNT(bond_id) AS bond_count FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 'i') GROUP BY atom_id)"}
{"sample_id": 9688, "db_id": "toxicology", "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'", "pred_sql": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+';"}
{"sample_id": 9706, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'", "pred_sql": "SELECT bond.bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'c';"}
{"sample_id": 9695, "db_id": "toxicology", "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "pred_sql": "SELECT (COUNT(a.atom_id) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+'))) AS chlorine_percentage FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'cl' AND m.label = '+';"}
{"sample_id": 9741, "db_id": "toxicology", "gold_sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'", "pred_sql": "SELECT COUNT(DISTINCT a.element) AS element_count\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id\nWHERE b.bond_id = 'TR001_3_4';"}
{"sample_id": 9641, "db_id": "toxicology", "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'", "pred_sql": "SELECT (COUNT(DISTINCT m.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule)) AS carcinogenic_percentage\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '#' AND m.label = '+';"}
{"sample_id": 9704, "db_id": "toxicology", "gold_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label", "pred_sql": "SELECT (COUNT(CASE WHEN a.element = 'h' THEN 1 END) * 1.0 / COUNT(*)) AS hydrogen_ratio, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR006' GROUP BY m.label;"}
{"sample_id": 9721, "db_id": "toxicology", "gold_sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'", "pred_sql": "SELECT label FROM molecule WHERE molecule_id = 'TR124';"}
{"sample_id": 9638, "db_id": "toxicology", "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'", "pred_sql": "SELECT c.atom_id, c.atom_id2 \nFROM connected c \nJOIN bond b ON c.bond_id = b.bond_id \nWHERE b.bond_type = '#'"}
{"sample_id": 9681, "db_id": "toxicology", "gold_sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T", "pred_sql": "SELECT COUNT(DISTINCT a.element) AS element_count\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE b.bond_type = '-' AND m.label = '+';"}
{"sample_id": 9653, "db_id": "toxicology", "gold_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T", "pred_sql": "SELECT bond.bond_type, COUNT(bond.bond_id) AS bond_count, molecule.label \nFROM bond \nJOIN molecule ON bond.molecule_id = molecule.molecule_id \nWHERE bond.molecule_id = 'TR010' \nGROUP BY bond.bond_type, molecule.label \nORDER BY bond_count DESC \nLIMIT 1;"}
{"sample_id": 9639, "db_id": "toxicology", "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'", "pred_sql": "SELECT DISTINCT a1.atom_id, a1.element \nFROM atom a1 \nJOIN connected c ON a1.atom_id = c.atom_id \nJOIN atom a2 ON c.atom_id2 = a2.atom_id \nWHERE a1.molecule_id = 'TR181' OR a2.molecule_id = 'TR181';"}
{"sample_id": 9735, "db_id": "toxicology", "gold_sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'", "pred_sql": "SELECT COUNT(*) AS atom_count FROM atom WHERE molecule_id = 'TR001';"}
{"sample_id": 9659, "db_id": "toxicology", "gold_sql": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'", "pred_sql": "SELECT molecule.molecule_id, molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';"}
{"sample_id": 9716, "db_id": "toxicology", "gold_sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='", "pred_sql": "SELECT bond.bond_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = '+';"}
{"sample_id": 9740, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'", "pred_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';"}
{"sample_id": 9723, "db_id": "toxicology", "gold_sql": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'", "pred_sql": "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';"}
{"sample_id": 9690, "db_id": "toxicology", "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'", "pred_sql": "SELECT a.element \nFROM atom a \nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 \nJOIN bond b ON c.bond_id = b.bond_id \nWHERE b.bond_id = 'TR001_10_11';"}
{"sample_id": 9737, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'", "pred_sql": "SELECT DISTINCT m.molecule_id, m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'cl' AND m.label = '+';"}
{"sample_id": 9700, "db_id": "toxicology", "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'", "pred_sql": "SELECT COUNT(DISTINCT bond.molecule_id) AS non_carcinogenic_single_bonds\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE bond.bond_type = '-' AND bond.bond_type = '-'"}
{"sample_id": 9703, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7", "pred_sql": "SELECT atom.element, COUNT(*) as element_count\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+'\nAND atom.atom_id LIKE '%_4'\nGROUP BY atom.element;"}
{"sample_id": 9673, "db_id": "toxicology", "gold_sql": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t", "pred_sql": "SELECT element, COUNT(*) as element_count\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = '+'\nGROUP BY element\nORDER BY element_count ASC\nLIMIT 1;"}
{"sample_id": 9701, "db_id": "toxicology", "gold_sql": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'", "pred_sql": "SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11';"}
{"sample_id": 9656, "db_id": "toxicology", "gold_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'", "pred_sql": "SELECT COUNT(bond.bond_id) AS bond_count FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR009' AND (connected.atom_id = '12' OR connected.atom_id2 = '12');"}
{"sample_id": 9628, "db_id": "toxicology", "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'", "pred_sql": "SELECT DISTINCT a.element \nFROM atom a \nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 \nJOIN bond b ON c.bond_id = b.bond_id \nWHERE b.bond_id = 'TR004_8_9';"}
{"sample_id": 2507, "db_id": "genes", "gold_sql": "SELECT T1.GeneID FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr > 0 AND T1.Localization = 'nucleus'", "pred_sql": "SELECT g.* FROM genes g JOIN interactions i ON g.geneid = i.geneid1 JOIN classification c ON i.geneid2 = c.geneid WHERE c.localization = 'nucleus' AND i.expression_corr > 0;"}
{"sample_id": 2493, "db_id": "genes", "gold_sql": "SELECT T2.Expression_Corr FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T1.Localization = 'nucleus' AND T3.Localization = 'nucleus' ORDER BY T2.Expression_Corr DESC LIMIT 1", "pred_sql": "SELECT MAX(i.expression_corr) AS highest_expression_corr\nFROM interactions i\nJOIN classification c1 ON i.geneid1 = c1.geneid\nJOIN classification c2 ON i.geneid2 = c2.geneid\nWHERE c1.localization = 'nucleus' AND c2.localization = 'nucleus';"}
{"sample_id": 2510, "db_id": "genes", "gold_sql": "SELECT CAST(SUM(IIF(T2.Expression_Corr > 0, 1, 0)) AS REAL) * 100 / COUNT(T2.GeneID1) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Phenotype = 'Nucleic acid metabolism defects' AND T1.Motif = 'PS00107'", "pred_sql": "SELECT (COUNT(DISTINCT i.geneid1) * 100.0 / (SELECT COUNT(*) FROM genes g WHERE g.phenotype = 'nucleic acid metabolism defects' AND g.motif = 'PS00107')) AS positive_interaction_percentage\nFROM interactions i\nJOIN genes g1 ON i.geneid1 = g1.geneid\nJOIN genes g2 ON i.geneid2 = g2.geneid\nWHERE g1.phenotype = 'nucleic acid metabolism defects' AND g1.motif = 'PS00107' AND i.type = 'positively correlated';"}
{"sample_id": 2502, "db_id": "genes", "gold_sql": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'", "pred_sql": "SELECT g.geneid FROM genes g WHERE g.localization = 'cytoplasm' AND g.function = 'metabolism';"}
{"sample_id": 2495, "db_id": "genes", "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T2.Expression_Corr < 0 AND T1.Class = 'Motorproteins'", "pred_sql": "SELECT COUNT(*) AS negative_correlated_count \nFROM interactions \nJOIN genes g1 ON interactions.geneid1 = g1.geneid \nJOIN genes g2 ON interactions.geneid2 = g2.geneid \nWHERE g1.class != 'motorproteins' AND g2.class != 'motorproteins' \nAND interactions.expression_corr < 0;"}
{"sample_id": 2491, "db_id": "genes", "gold_sql": "SELECT COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Classification AS T2 ON T1.GeneID = T2.GeneID WHERE T2.Localization = 'vacuole' AND T1.Phenotype = 'Nucleic acid metabolism defects'", "pred_sql": "SELECT COUNT(DISTINCT g.geneid) AS gene_count \nFROM genes g \nJOIN classification c ON g.geneid = c.geneid \nWHERE g.function LIKE '%nucleic acid metabolism%' \nAND c.localization = 'vacuole';"}
{"sample_id": 6699, "db_id": "retails", "gold_sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate = '1997-12-10' AND T1.o_clerk = 'Clerk#000000803'", "pred_sql": "SELECT c_name FROM customer c JOIN orders o ON c.c_custkey = o.o_custkey WHERE o.o_clerk = '000000803' AND o.o_orderdate = '1997-12-10';"}
{"sample_id": 6679, "db_id": "retails", "gold_sql": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0", "pred_sql": "SELECT o_orderkey FROM orders WHERE o_custkey IN (SELECT c_custkey FROM customer WHERE c_acctbal < 0);"}
{"sample_id": 6700, "db_id": "retails", "gold_sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_suppkey = 7414 AND T1.l_orderkey = 817154", "pred_sql": "SELECT (l.l_extendedprice * (1 - l.l_discount)) - (ps.ps_supplycost * l.l_quantity) AS profit\nFROM lineitem l\nJOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey\nWHERE l.l_orderkey = 817154 AND ps.ps_suppkey = 7414;"}
{"sample_id": 6708, "db_id": "retails", "gold_sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'AUTOMOBILE'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customer WHERE c_mktsegment = 'AUTOMOBILE';"}
{"sample_id": 6717, "db_id": "retails", "gold_sql": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'", "pred_sql": "SELECT n_name FROM nation WHERE n_regionkey IN (SELECT r_regionkey FROM region WHERE r_name = 'Asia');"}
{"sample_id": 6774, "db_id": "retails", "gold_sql": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey ORDER BY T2.ps_availqty DESC LIMIT 10", "pred_sql": "SELECT p.p_name FROM part p JOIN partsupp ps ON p.p_partkey = ps.ps_partkey ORDER BY ps.ps_availqty DESC LIMIT 10;"}
{"sample_id": 6765, "db_id": "retails", "gold_sql": "SELECT CAST(SUM(IIF(ps_supplycost > 500, 1, 0)) AS REAL) * 100 / COUNT(ps_suppkey) FROM partsupp", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM partsupp)) AS percentage_above_500 FROM partsupp WHERE ps_supplycost > 500;"}
{"sample_id": 6739, "db_id": "retails", "gold_sql": "SELECT COUNT(T3.s_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T3.s_acctbal < 0 AND T1.r_name = 'MIDDLE EAST'", "pred_sql": "SELECT COUNT(*) AS number_of_debt_suppliers FROM supplier s JOIN nation n ON s.s_nationkey = n.n_nationkey JOIN region r ON n.n_regionkey = r.r_regionkey WHERE s.s_acctbal < 0 AND r.r_name = 'Middle East';"}
{"sample_id": 6791, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'MOZAMBIQUE' AND T3.o_orderpriority = '5-LOW'", "pred_sql": "SELECT COUNT(DISTINCT c.c_custkey) AS client_count \nFROM customer c \nJOIN orders o ON c.c_custkey = o.o_custkey \nJOIN nation n ON c.c_nationkey = n.n_nationkey \nWHERE n.n_name = 'Mozambique' AND o.o_orderpriority > 0;"}
{"sample_id": 6690, "db_id": "retails", "gold_sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 34", "pred_sql": "SELECT n_name FROM nation WHERE n_nationkey = (SELECT s_nationkey FROM supplier WHERE s_suppkey = 34);"}
{"sample_id": 6803, "db_id": "retails", "gold_sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33", "pred_sql": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33;"}
{"sample_id": 6714, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'", "pred_sql": "SELECT COUNT(*) AS supplier_count FROM supplier WHERE s_nationkey IN (SELECT n_nationkey FROM nation WHERE n_name = 'Japan');"}
{"sample_id": 6911, "db_id": "retails", "gold_sql": "SELECT SUM(T2.l_quantity) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1995-10-05' AND T1.o_custkey = 101660", "pred_sql": "SELECT SUM(l_quantity) AS total_quantity\nFROM lineitem l\nJOIN orders o ON l.l_orderkey = o.o_orderkey\nWHERE o.o_custkey = '101660' AND o.o_orderdate = '1995-10-05';"}
{"sample_id": 6899, "db_id": "retails", "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994' AND l_returnflag = 'R' AND l_shipmode = 'TRUCK'", "pred_sql": "SELECT COUNT(*) AS returned_items_count \nFROM lineitem \nWHERE l_shipdate BETWEEN 19940101 AND 19941231 \nAND l_returnflag = 'R' \nAND l_shipmode = 'TRUCK';"}
{"sample_id": 6703, "db_id": "retails", "gold_sql": "SELECT CAST(SUM(IIF(T2.n_name = 'JAPAN', 1, 0)) AS REAL) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0", "pred_sql": "SELECT (COUNT(CASE WHEN s_acctbal < 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_debt_japanese_suppliers\nFROM supplier\nJOIN nation ON supplier.s_nationkey = nation.n_nationkey\nWHERE nation.n_name = 'Japan';"}
{"sample_id": 6815, "db_id": "retails", "gold_sql": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697", "pred_sql": "SELECT c_name FROM customer JOIN orders ON customer.c_custkey = orders.o_custkey WHERE customer.c_custkey = '93697' AND orders.o_totalprice = 191918.92;"}
{"sample_id": 6852, "db_id": "retails", "gold_sql": "SELECT T1.s_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'ARGENTINA'", "pred_sql": "SELECT s_name, s_acctbal FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Argentina' AND supplier.s_acctbal < 0;"}
{"sample_id": 6773, "db_id": "retails", "gold_sql": "SELECT CAST(SUM(IIF(T2.r_name = 'AFRICA', 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey WHERE T3.c_mktsegment = 'HOUSEHOLD'", "pred_sql": "SELECT (COUNT(CASE WHEN c_mktsegment = 'HOUSEHOLD' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_household_customers FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE region.r_name = 'AFRICA';"}
{"sample_id": 6749, "db_id": "retails", "gold_sql": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'Furniture' LIMIT 5", "pred_sql": "SELECT o_comment FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_mktsegment = 'FURNITURE' LIMIT 5;"}
{"sample_id": 6831, "db_id": "retails", "gold_sql": "SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT r_name, COUNT(c_custkey) AS customer_count \nFROM customer \nJOIN nation ON customer.c_nationkey = nation.n_nationkey \nJOIN region ON nation.n_regionkey = region.r_regionkey \nGROUP BY r_name \nORDER BY customer_count DESC \nLIMIT 1;"}
{"sample_id": 6905, "db_id": "retails", "gold_sql": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1", "pred_sql": "SELECT n_name, COUNT(s_suppkey) AS supplier_count FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey GROUP BY n_name ORDER BY supplier_count ASC LIMIT 1;"}
{"sample_id": 6711, "db_id": "retails", "gold_sql": "SELECT T.n_name FROM ( SELECT T2.n_name, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT n_name, COUNT(c_custkey) AS customer_count \nFROM customer \nJOIN nation ON customer.c_nationkey = nation.n_nationkey \nGROUP BY n_name \nORDER BY customer_count DESC \nLIMIT 1;"}
{"sample_id": 6798, "db_id": "retails", "gold_sql": "SELECT CAST(SUM(IIF(T2.n_name = 'IRAN', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM customer WHERE c_mktsegment = 'HOUSEHOLD')) AS percentage FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey WHERE nation.n_name = 'Iran' AND customer.c_mktsegment = 'HOUSEHOLD';"}
{"sample_id": 6742, "db_id": "retails", "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994'", "pred_sql": "SELECT COUNT(*) AS total_orders FROM orders WHERE o_orderdate BETWEEN '1994-01-01' AND '1994-12-31';"}
{"sample_id": 6851, "db_id": "retails", "gold_sql": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'", "pred_sql": "SELECT s_phone FROM supplier JOIN nation ON supplier.s_nationkey = nation.n_nationkey WHERE nation.n_name = 'Japan';"}
{"sample_id": 6685, "db_id": "retails", "gold_sql": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'", "pred_sql": "SELECT SUM(o_totalprice) AS total_price FROM orders JOIN customer ON orders.o_custkey = customer.c_custkey WHERE customer.c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany');"}
{"sample_id": 6694, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'MOROCCO' AND T1.c_acctbal < 0", "pred_sql": "SELECT COUNT(*) AS num_debt_customers FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Morocco') AND c_acctbal < 0;"}
{"sample_id": 6880, "db_id": "retails", "gold_sql": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'", "pred_sql": "SELECT SUM(l_quantity) AS total_quantity\nFROM lineitem l\nJOIN orders o ON l.l_orderkey = o.o_orderkey\nJOIN part p ON l.l_partkey = p.p_partkey\nWHERE p.p_name = 'hot spring dodger dim light';"}
{"sample_id": 6820, "db_id": "retails", "gold_sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'", "pred_sql": "SELECT o_orderdate FROM orders WHERE o_orderpriority = 0;"}
{"sample_id": 6816, "db_id": "retails", "gold_sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'", "pred_sql": "SELECT n.n_name AS nation, r.r_name AS region \nFROM customer c \nJOIN nation n ON c.c_nationkey = n.n_nationkey \nJOIN region r ON n.n_regionkey = r.r_regionkey \nWHERE c.c_custkey = '000000008';"}
{"sample_id": 6890, "db_id": "retails", "gold_sql": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'", "pred_sql": "SELECT MAX(l_discount) AS biggest_discount\nFROM lineitem\nJOIN part ON lineitem.l_partkey = part.p_partkey\nWHERE part.p_name = 'burnished seashell gainsboro navajo chocolate';"}
{"sample_id": 6900, "db_id": "retails", "gold_sql": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0 AND c_mktsegment = 'MACHINERY'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customer WHERE c_mktsegment = 'machinery' AND c_acctbal < 0;"}
{"sample_id": 6813, "db_id": "retails", "gold_sql": "SELECT T.r_name FROM ( SELECT T1.r_name, COUNT(T2.n_name) AS num FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey GROUP BY T1.r_name ) AS T ORDER BY T.num LIMIT 1", "pred_sql": "SELECT r_name, COUNT(n_nationkey) AS country_count FROM region JOIN nation ON region.r_regionkey = nation.n_regionkey GROUP BY r_name ORDER BY country_count ASC LIMIT 1;"}
{"sample_id": 6758, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customer WHERE c_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Brazil') AND c_acctbal < 1000;"}
{"sample_id": 6895, "db_id": "retails", "gold_sql": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1", "pred_sql": "SELECT (l_extendedprice * (1 - l_discount)) AS discounted_price \nFROM lineitem \nJOIN part ON lineitem.l_partkey = part.p_partkey \nWHERE part.p_name = 'burnished seashell gainsboro navajo chocolate' \nAND lineitem.l_orderkey = 1;"}
{"sample_id": 6795, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'", "pred_sql": "SELECT COUNT(*) FROM supplier WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Germany') AND s_comment LIKE '%carefully regular packages%';"}
{"sample_id": 6846, "db_id": "retails", "gold_sql": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY T2.l_discount DESC LIMIT 1", "pred_sql": "SELECT c.c_name\nFROM customer c\nJOIN orders o ON c.c_custkey = o.o_custkey\nJOIN lineitem l ON o.o_orderkey = l.l_orderkey\nORDER BY l.l_discount DESC\nLIMIT 1;"}
{"sample_id": 6842, "db_id": "retails", "gold_sql": "SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1", "pred_sql": "SELECT * FROM lineitem WHERE l_shipmode = 'air' ORDER BY l_quantity DESC LIMIT 1;"}
{"sample_id": 6822, "db_id": "retails", "gold_sql": "SELECT MAX(s_acctbal) FROM supplier", "pred_sql": "SELECT MAX(s_acctbal) AS largest_account_balance FROM supplier;"}
{"sample_id": 6897, "db_id": "retails", "gold_sql": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'", "pred_sql": "SELECT COUNT(*) AS order_count \nFROM orders o \nJOIN lineitem l ON o.o_orderkey = l.l_orderkey \nWHERE l.l_shipmode = 'MAIL' AND strftime('%Y', o.o_orderdate) = '1997';"}
{"sample_id": 6670, "db_id": "retails", "gold_sql": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'", "pred_sql": "SELECT COUNT(DISTINCT l_partkey) AS returned_item_count FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R';"}
{"sample_id": 6859, "db_id": "retails", "gold_sql": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900", "pred_sql": "SELECT COUNT(*) AS part_count FROM part WHERE p_retailprice > 1900;"}
{"sample_id": 6704, "db_id": "retails", "gold_sql": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )", "pred_sql": "SELECT c_name FROM customer WHERE c_acctbal < 0 ORDER BY c_acctbal ASC LIMIT 1;"}
{"sample_id": 6906, "db_id": "retails", "gold_sql": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'medium metallic grey dodger linen'", "pred_sql": "SELECT ps_supplycost FROM partsupp JOIN part ON partsupp.ps_partkey = part.p_partkey WHERE part.p_name = 'dodger linen' AND part.p_size = 'medium' AND part.p_type = 'metallic grey';"}
{"sample_id": 6757, "db_id": "retails", "gold_sql": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'", "pred_sql": "SELECT nation.n_name, region.r_name, customer.c_address FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey JOIN region ON nation.n_regionkey = region.r_regionkey WHERE customer.c_address = 'wH55UnX7 VI';"}
{"sample_id": 6794, "db_id": "retails", "gold_sql": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.l_discount = 0.0000", "pred_sql": "SELECT p_name FROM part WHERE p_partkey NOT IN (SELECT l_partkey FROM lineitem WHERE l_discount > 0)"}
{"sample_id": 6785, "db_id": "retails", "gold_sql": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'EGYPT'", "pred_sql": "SELECT COUNT(*) AS supplier_count FROM supplier WHERE s_nationkey = (SELECT n_nationkey FROM nation WHERE n_name = 'Egypt') AND s_acctbal < 0;"}
{"sample_id": 6910, "db_id": "retails", "gold_sql": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T2.l_extendedprice DESC LIMIT 1", "pred_sql": "SELECT o.o_clerk\nFROM lineitem l\nJOIN orders o ON l.l_orderkey = o.o_orderkey\nORDER BY l.l_extendedprice DESC\nLIMIT 1;"}
{"sample_id": 6861, "db_id": "retails", "gold_sql": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'", "pred_sql": "SELECT DISTINCT p_brand FROM part WHERE p_type = 'promo brushed steel';"}
{"sample_id": 9777, "db_id": "card_games", "gold_sql": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'", "pred_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';"}
{"sample_id": 9768, "db_id": "card_games", "gold_sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')", "pred_sql": "SELECT cards.id, cards.artist FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.power = 'unknown' AND legalities.format = 'commander' AND legalities.status = 'legal';"}
{"sample_id": 9887, "db_id": "card_games", "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'", "pred_sql": "SELECT * FROM foreign_data WHERE name = (SELECT uuid FROM cards WHERE name = \"Ancestor's Chosen\") AND language = 'Korean';"}
{"sample_id": 9809, "db_id": "card_games", "gold_sql": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )", "pred_sql": "SELECT colors FROM cards WHERE setcode = 'OGW';"}
{"sample_id": 9895, "db_id": "card_games", "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'", "pred_sql": "SELECT sets.isforeignonly FROM cards JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Adarkar Valkyrie';"}
{"sample_id": 9804, "db_id": "card_games", "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'", "pred_sql": "SELECT cards.name, cards.artist, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.availability LIKE '%paper%' AND foreign_data.language = 'Japanese';"}
{"sample_id": 9943, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'", "pred_sql": "SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.frameversion = '1997' AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy' AND cards.hascontentwarning = '1';"}
{"sample_id": 9907, "db_id": "card_games", "gold_sql": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'", "pred_sql": "SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce')"}
{"sample_id": 9911, "db_id": "card_games", "gold_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'", "pred_sql": "SELECT keyrunecode FROM sets WHERE code = 'PKHC';"}
{"sample_id": 9866, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'", "pred_sql": "SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'boros';"}
{"sample_id": 9936, "db_id": "card_games", "gold_sql": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10", "pred_sql": "SELECT name, convertedmanacost FROM cards WHERE dueldeck IS NOT NULL ORDER BY convertedmanacost DESC LIMIT 10;"}
{"sample_id": 9806, "db_id": "card_games", "gold_sql": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'", "pred_sql": "SELECT cards.uuid, foreign_data.language \nFROM cards \nJOIN legalities ON cards.uuid = legalities.uuid \nJOIN foreign_data ON cards.uuid = foreign_data.uuid \nWHERE legalities.format = 'legacy';"}
{"sample_id": 9885, "db_id": "card_games", "gold_sql": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL", "pred_sql": "SELECT COUNT(*) FROM set_translations WHERE setcode IN (SELECT DISTINCT setcode FROM cards WHERE name = 'Angel of Mercy');"}
{"sample_id": 9861, "db_id": "card_games", "gold_sql": "SELECT name FROM sets WHERE code = 'ALL'", "pred_sql": "SELECT name FROM sets WHERE code = 'ALL';"}
{"sample_id": 9814, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3", "pred_sql": "SELECT cards.name FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;"}
{"sample_id": 9845, "db_id": "card_games", "gold_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3", "pred_sql": "SELECT c1.cardkingdomfoilid, c1.id, c2.cardkingdomid, c2.id \nFROM cards c1 \nJOIN cards c2 ON c1.cardkingdomfoilid IS NOT NULL AND c1.cardkingdomfoilid = c2.cardkingdomid \nORDER BY c1.cardkingdomfoilid \nLIMIT 3;"}
{"sample_id": 9834, "db_id": "card_games", "gold_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'", "pred_sql": "SELECT foreign_data.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French' AND cards.type LIKE '%Creature%' AND cards.layout = 'normal' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson';"}
{"sample_id": 9946, "db_id": "card_games", "gold_sql": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'", "pred_sql": "SELECT DISTINCT artist FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena%';"}
{"sample_id": 9810, "db_id": "card_games", "gold_sql": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'", "pred_sql": "SELECT cards.name, set_translations.language FROM cards JOIN sets ON cards.setcode = sets.code JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = '10E' AND cards.convertedmanacost = '5';"}
{"sample_id": 9871, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'", "pred_sql": "SELECT foreign_data.language, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius';"}
{"sample_id": 9795, "db_id": "card_games", "gold_sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'", "pred_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';"}
{"sample_id": 9783, "db_id": "card_games", "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0", "pred_sql": "SELECT COUNT(*) FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE status = 'restricted') AND istextless = '0';"}
{"sample_id": 9898, "db_id": "card_games", "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1", "pred_sql": "SELECT name FROM cards WHERE setcode = 'CSP' ORDER BY convertedmanacost DESC LIMIT 1;"}
{"sample_id": 9852, "db_id": "card_games", "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2", "pred_sql": "SELECT sets.id, sets.name FROM sets JOIN foreign_data ON sets.id = foreign_data.multiverseid WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name ASC LIMIT 2;"}
{"sample_id": 9813, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'", "pred_sql": "SELECT cards.* FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.type LIKE '%Artifact%' AND cards.colors LIKE '%black%';"}
{"sample_id": 9881, "db_id": "card_games", "gold_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1", "pred_sql": "SELECT name, convertedmanacost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedmanacost DESC LIMIT 1;"}
{"sample_id": 9919, "db_id": "card_games", "gold_sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )", "pred_sql": "SELECT type FROM sets WHERE name = 'Huiti\u00e8me \u00e9dition';"}
{"sample_id": 9842, "db_id": "card_games", "gold_sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1", "pred_sql": "SELECT COUNT(*) AS oversized_reprinted_promotions_count FROM cards WHERE isoversized = '1' AND isreprint = '1' AND ispromo = '1';"}
{"sample_id": 9891, "db_id": "card_games", "gold_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'", "pred_sql": "SELECT COUNT(*) > 0 AS appeared_on_mtg_online FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgocode IS NOT NULL;"}
{"sample_id": 9867, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'", "pred_sql": "SELECT foreign_data.language, foreign_data.flavortext, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';"}
{"sample_id": 9883, "db_id": "card_games", "gold_sql": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3", "pred_sql": "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3;"}
{"sample_id": 9817, "db_id": "card_games", "gold_sql": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'", "pred_sql": "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability LIKE '%mtgo%' AND hand = '-1';"}
{"sample_id": 9890, "db_id": "card_games", "gold_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'", "pred_sql": "SELECT set_translations.translation FROM set_translations JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Simplified Chinese';"}
{"sample_id": 9876, "db_id": "card_games", "gold_sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'", "pred_sql": "SELECT COUNT(*) FROM cards WHERE bordercolor = 'white' AND power IS NULL;"}
{"sample_id": 9787, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'", "pred_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight';"}
{"sample_id": 9952, "db_id": "card_games", "gold_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'", "pred_sql": "SELECT DISTINCT frameversion, cards.name, cards.artist FROM cards LEFT JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' OR legalities.status = 'banned';"}
{"sample_id": 9931, "db_id": "card_games", "gold_sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1", "pred_sql": "SELECT id FROM sets ORDER BY basesetsize DESC LIMIT 1;"}
{"sample_id": 9793, "db_id": "card_games", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isstoryspotlight = '1')) AS french_percentage\nFROM foreign_data\nJOIN cards ON foreign_data.uuid = cards.uuid\nWHERE foreign_data.language = 'French' AND cards.isstoryspotlight = '1';"}
{"sample_id": 9921, "db_id": "card_games", "gold_sql": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL", "pred_sql": "SELECT COUNT(*) FROM set_translations WHERE setcode = (SELECT code FROM sets WHERE name = 'Tenth Edition')"}
{"sample_id": 7055, "db_id": "works_cycles", "gold_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.HireDate DESC LIMIT 1", "pred_sql": "SELECT e.businessentityid, ep.rate \nFROM employee e \nJOIN employeepayhistory ep ON e.businessentityid = ep.businessentityid \nWHERE ep.ratechangedate = (SELECT MAX(ratechangedate) FROM employeepayhistory)"}
{"sample_id": 7455, "db_id": "works_cycles", "gold_sql": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425", "pred_sql": "SELECT (julianday(enddate) - julianday(startdate)) AS days_to_end FROM workorder WHERE workorderid = '425';"}
{"sample_id": 7279, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(ProductID) FROM ProductVendor WHERE OnOrderQty = 0", "pred_sql": "SELECT COUNT(*) AS out_of_stock_count FROM productvendor WHERE onorderqty = 0;"}
{"sample_id": 7108, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(*) FROM ProductVendor WHERE MinOrderQty > 500 AND MaxOrderQty < 15000", "pred_sql": "SELECT COUNT(*) AS vendor_count \nFROM vendor \nWHERE preferredvendorstatus = 1 AND activeflag = 1;"}
{"sample_id": 7206, "db_id": "works_cycles", "gold_sql": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS REAL) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE STRFTIME('%Y', T2.QuotaDate) = '2013'", "pred_sql": "SELECT SUM(s.bonus) AS total_bonus, SUM(s.bonus) / SUM(s.salesquota) * 100 AS bonus_percentage\nFROM salesperson s\nJOIN salesorderheader so ON s.businessentityid = so.salespersonid\nWHERE strftime('%Y', so.orderdate) = '2013';"}
{"sample_id": 7295, "db_id": "works_cycles", "gold_sql": "SELECT T3.PurchasingWebServiceURL FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5'", "pred_sql": "SELECT v.purchasingwebserviceurl \nFROM vendor v \nJOIN productvendor pv ON v.businessentityid = pv.businessentityid \nJOIN product p ON pv.productid = p.productid \nWHERE p.name = 'Hex Nut 5';"}
{"sample_id": 7274, "db_id": "works_cycles", "gold_sql": "SELECT T1.AverageLeadTime, T1.LastReceiptCost - T1.StandardPrice, T4.AddressLine1, T4.AddressLine2 , T4.City, T4.PostalCode FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN BusinessEntityAddress AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID INNER JOIN Address AS T4 ON T3.AddressID = T4.AddressID WHERE T1.ProductID = 843", "pred_sql": "SELECT pv.productid, pv.averageleadtime, (pv.lastreceiptcost - pv.standardprice) AS profit_on_net, v.name AS vendor_name, l.name AS location_name \nFROM productvendor pv \nJOIN vendor v ON pv.businessentityid = v.businessentityid \nJOIN product p ON pv.productid = p.productid \nJOIN productinventory pi ON p.productid = pi.productid \nJOIN location l ON pi.locationid = l.locationid \nWHERE p.productid = 843;"}
{"sample_id": 7120, "db_id": "works_cycles", "gold_sql": "SELECT T1.FirstName, T2.BirthDate FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 18", "pred_sql": "SELECT firstname, birthdate FROM person WHERE businessentityid = '18';"}
{"sample_id": 7248, "db_id": "works_cycles", "gold_sql": "SELECT Name FROM Product ORDER BY ListPrice DESC LIMIT 5", "pred_sql": "SELECT productcategory.name, MAX(product.listprice) AS highest_selling_price\nFROM product\nJOIN productsubcategory ON product.productsubcategoryid = productsubcategory.productsubcategoryid\nJOIN productcategory ON productsubcategory.productcategoryid = productcategory.productcategoryid\nGROUP BY productcategory.name\nORDER BY highest_selling_price DESC\nLIMIT 5;"}
{"sample_id": 7110, "db_id": "works_cycles", "gold_sql": "SELECT LastName FROM Person WHERE PersonType = 'EM' AND MiddleName LIKE 'C%'", "pred_sql": "SELECT lastname FROM person INNER JOIN employee ON person.businessentityid = employee.businessentityid WHERE middlename LIKE 'C%';"}
{"sample_id": 7156, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM BillOfMaterials AS T1 INNER JOIN UnitMeasure AS T2 ON T1.UnitMeasureCode = T2.UnitMeasureCode WHERE T1.ComponentID = 494 AND T1.EndDate IS NULL GROUP BY T2.name", "pred_sql": "SELECT unitmeasurecode FROM billofmaterials WHERE componentid = '494' AND enddate IS NULL;"}
{"sample_id": 7029, "db_id": "works_cycles", "gold_sql": "SELECT T1.CustomerID FROM SalesOrderHeader AS T1 INNER JOIN SalesPerson AS T2 ON T1.SalesPersonID = T2.BusinessEntityID ORDER BY T1.SubTotal DESC LIMIT 1", "pred_sql": "SELECT c.customerid, SUM(so.subtotal) AS total_subtotal\nFROM customer c\nJOIN salesorderheader so ON c.customerid = so.customerid\nJOIN salesperson s ON so.salespersonid = s.businessentityid\nWHERE s.bonus = (SELECT MAX(bonus) FROM salesperson)\nGROUP BY c.customerid\nORDER BY total_subtotal DESC\nLIMIT 1;"}
{"sample_id": 7096, "db_id": "works_cycles", "gold_sql": "SELECT SUM(T2.ScrappedQty) FROM ScrapReason AS T1 INNER JOIN WorkOrder AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.Name = 'Trim length too long'", "pred_sql": "SELECT SUM(rejectedqty) AS total_rejected_products\nFROM purchaseorderdetail\nWHERE rejectedqty > 0;"}
{"sample_id": 7040, "db_id": "works_cycles", "gold_sql": "SELECT T2.PayFrequency FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SickLeaveHours ASC LIMIT 1", "pred_sql": "SELECT e.businessentityid, e.hiredate, ep.rate, ep.payfrequency \nFROM employee e \nJOIN employeepayhistory ep ON e.businessentityid = ep.businessentityid \nWHERE e.sickleavehours = (SELECT MIN(sickleavehours) FROM employee)"}
{"sample_id": 7124, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T1.Name = 'Finance'", "pred_sql": "SELECT COUNT(e.businessentityid) AS number_of_employees\nFROM employee e\nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid\nJOIN department d ON edh.departmentid = d.departmentid\nWHERE d.name = 'Finance' AND edh.enddate IS NULL;"}
{"sample_id": 7211, "db_id": "works_cycles", "gold_sql": "SELECT SUM(Quantity) FROM TransactionHistory WHERE TransactionDate LIKE '2013-08%' AND TransactionType = 'S' AND ProductID = 989", "pred_sql": "SELECT SUM(orderqty) AS total_sold\nFROM salesorderdetail\nJOIN salesorderheader ON salesorderdetail.salesorderid = salesorderheader.salesorderid\nWHERE salesorderdetail.productid = '989' \nAND salesorderheader.orderdate >= '2013-08-01' \nAND salesorderheader.orderdate < '2013-09-01';"}
{"sample_id": 7020, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name, T2.LineTotal FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE Class = 'L' ORDER BY OrderQty * UnitPrice DESC LIMIT 1", "pred_sql": "SELECT p.name, SUM(so.lineTotal) AS lineTotal\nFROM product p\nJOIN salesorderdetail so ON p.productid = so.productid\nWHERE p.class = 'L'  -- Low quality products\nGROUP BY p.name\nORDER BY lineTotal DESC\nLIMIT 1;"}
{"sample_id": 7439, "db_id": "works_cycles", "gold_sql": "SELECT ListPrice FROM ProductListPriceHistory WHERE ProductID = 912", "pred_sql": "SELECT listprice FROM product WHERE productid = '912';"}
{"sample_id": 7060, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SickLeaveHours > 10 AND T1.Rate > 35", "pred_sql": "SELECT COUNT(*) AS EmployeeCount\nFROM employee\nWHERE rate > 35 AND sickleavehours > 10;"}
{"sample_id": 7097, "db_id": "works_cycles", "gold_sql": "SELECT SUM(T2.OrderQty) FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID WHERE T1.Status = 1", "pred_sql": "SELECT SUM(sod.orderqty) AS total_quantity\nFROM salesorderdetail sod\nJOIN salesorderheader soh ON sod.salesorderid = soh.salesorderid\nWHERE soh.status = 1 AND soh.employeeid = 257;"}
{"sample_id": 7317, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName, T2.LastName FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.JobTitle NOT LIKE 'Chief Executive Officer' ORDER BY T1.Rate DESC LIMIT 1", "pred_sql": "SELECT e.businessentityid, e.rate, p.firstname, p.lastname \nFROM employeepayhistory e \nJOIN employee emp ON e.businessentityid = emp.businessentityid \nJOIN person p ON emp.businessentityid = p.businessentityid \nWHERE emp.jobtitle != 'Chief Executive Officer' \nORDER BY e.rate DESC \nLIMIT 1;"}
{"sample_id": 7184, "db_id": "works_cycles", "gold_sql": "SELECT ProductID FROM Product WHERE ProductID IN ( SELECT ProductID FROM TransactionHistory WHERE TransactionType = 'P' )", "pred_sql": "SELECT p.name \nFROM product p \nJOIN transactionhistory th ON p.productid = th.productid \nWHERE th.transactiontype = 'P';"}
{"sample_id": 7320, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.ProductID = 342 ORDER BY T2.LastReceiptCost - T2.StandardPrice DESC LIMIT 1", "pred_sql": "SELECT v.name, (pv.lastreceiptcost - pv.standardprice) AS profit_on_net \nFROM vendor v \nJOIN productvendor pv ON v.businessentityid = pv.businessentityid \nWHERE pv.productid = '342' \nORDER BY profit_on_net DESC \nLIMIT 1;"}
{"sample_id": 7081, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(ActualCost) AS REAL) / COUNT(TransactionID) FROM TransactionHistoryArchive WHERE TransactionType = 'P' AND TransactionDate >= '2012-01-01' AND TransactionDate < '2012-07-01'", "pred_sql": "SELECT AVG(purchaseorderdetail.unitprice * purchaseorderdetail.orderqty) AS average_cost\nFROM purchaseorderheader\nJOIN purchaseorderdetail ON purchaseorderheader.purchaseorderid = purchaseorderdetail.purchaseorderid\nWHERE purchaseorderheader.orderdate >= '2012-01-01' AND purchaseorderheader.orderdate < '2012-07-01';"}
{"sample_id": 7386, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' AND T1.Gender = 'M' AND T1.MaritalStatus = 'M' ORDER BY T1.BirthDate DESC LIMIT 10", "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name \nFROM person p \nJOIN employee e ON p.businessentityid = e.businessentityid \nWHERE e.jobtitle = 'Production Technician' \nAND e.gender = 'M' \nAND e.maritalstatus = 'M' \nORDER BY e.birthdate DESC \nLIMIT 10;"}
{"sample_id": 7022, "db_id": "works_cycles", "gold_sql": "SELECT DISTINCT T1.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MinOrderQty = 100 ORDER BY T1.Name DESC", "pred_sql": "SELECT * FROM product WHERE minorderqty = 100 ORDER BY name DESC;"}
{"sample_id": 7371, "db_id": "works_cycles", "gold_sql": "SELECT StartTime FROM Shift WHERE Name = 'Night'", "pred_sql": "SELECT starttime FROM shift WHERE name = 'Night Shift';"}
{"sample_id": 7242, "db_id": "works_cycles", "gold_sql": "SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle LIKE 'Production Technician%' ORDER BY T2.Rate DESC LIMIT 1", "pred_sql": "SELECT e.businessentityid, p.firstname, p.lastname, ep.rate \nFROM employee e \nJOIN person p ON e.businessentityid = p.businessentityid \nJOIN employeepayhistory ep ON e.businessentityid = ep.businessentityid \nWHERE ep.rate = (SELECT MAX(rate) FROM employeepayhistory)"}
{"sample_id": 7440, "db_id": "works_cycles", "gold_sql": "SELECT CASE WHEN ActualCost = PlannedCost THEN 'No' ELSE 'Yes' END FROM WorkOrderRouting", "pred_sql": "SELECT * FROM workorder WHERE plannedcost != actualcost;"}
{"sample_id": 7063, "db_id": "works_cycles", "gold_sql": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1", "pred_sql": "SELECT jobtitle FROM employee ORDER BY birthdate ASC LIMIT 1;"}
{"sample_id": 7330, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.SalesYTD DESC LIMIT 1", "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS SalesRepresentativeName\nFROM salesperson s\nJOIN person p ON s.businessentityid = p.businessentityid\nORDER BY s.salesytd DESC\nLIMIT 1;"}
{"sample_id": 7018, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999", "pred_sql": "SELECT p.name, p.productline \nFROM product p \nJOIN purchaseorderdetail pod ON p.productid = pod.productid \nJOIN purchaseorderheader poh ON pod.purchaseorderid = poh.purchaseorderid \nWHERE pod.orderqty >= 5000;"}
{"sample_id": 7126, "db_id": "works_cycles", "gold_sql": "SELECT SUM(IIF(T1.city = 'Bothell', 1, 0)) - SUM(IIF(T1.city = 'Kenmore', 1, 0)) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode", "pred_sql": "SELECT COUNT(CASE WHEN a.city = 'Bothell' THEN 1 END) AS Bothell_Accounts, COUNT(CASE WHEN a.city = 'Kenmore' THEN 1 END) AS Kenmore_Accounts, sp.name AS State_Name\nFROM address a\nJOIN stateprovince sp ON a.stateprovinceid = sp.stateprovinceid\nWHERE a.city IN ('Bothell', 'Kenmore')\nGROUP BY sp.name;"}
{"sample_id": 7197, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3", "pred_sql": "SELECT COUNT(*) AS EmployeeCount, organizationlevel FROM employee WHERE suffix IS NULL GROUP BY organizationlevel;"}
{"sample_id": 7178, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Name = 'Cell' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Name) FROM PersonPhone AS T1 INNER JOIN PhoneNumberType AS T2 ON T1.PhoneNumberTypeID = T2.PhoneNumberTypeID", "pred_sql": "SELECT (COUNT(CASE WHEN phonenumbertype.name = 'Cell' THEN 1 END) * 100.0 / COUNT(*)) AS cell_phone_percentage FROM phonenumbertype JOIN businessentitycontact ON phonenumbertype.phonenumbertypeid = businessentitycontact.contacttypeid;"}
{"sample_id": 7183, "db_id": "works_cycles", "gold_sql": "SELECT ProductID FROM Product WHERE ProductID NOT IN ( SELECT T1.ProductID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID )", "pred_sql": "SELECT productid FROM workorder WHERE productid IS NULL;"}
{"sample_id": 7299, "db_id": "works_cycles", "gold_sql": "SELECT SUM(CASE WHEN T1.ProductLine = 'M' THEN 1 ELSE 0 END) FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID GROUP BY T1.ProductID HAVING COUNT(T1.Name) > 2", "pred_sql": "SELECT COUNT(DISTINCT p.productid) AS product_count\nFROM product p\nJOIN productvendor pv ON p.productid = pv.productid\nJOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid\nWHERE ps.name = 'Mountain'\nGROUP BY p.productid\nHAVING COUNT(DISTINCT pv.businessentityid) > 2;"}
{"sample_id": 7334, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.ProductID = 348 ORDER BY T1.AverageLeadTime ASC LIMIT 1", "pred_sql": "SELECT v.name, pv.averageleadtime \nFROM vendor v \nJOIN productvendor pv ON v.businessentityid = pv.businessentityid \nWHERE pv.productid = '348' \nORDER BY pv.averageleadtime ASC \nLIMIT 1;"}
{"sample_id": 7252, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T3.Name) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'Sheela' AND T1.LastName = 'Word' AND STRFTIME('%Y', T3.ModifiedDate) BETWEEN '2011' AND '2012'", "pred_sql": "SELECT COUNT(DISTINCT edh.departmentid) AS department_count\nFROM employeedepartmenthistory edh\nJOIN employee e ON edh.businessentityid = e.businessentityid\nJOIN person p ON e.businessentityid = p.businessentityid\nWHERE p.firstname = 'Sheela' AND p.lastname = 'Ward'\nAND edh.startdate >= '2011-01-01' AND edh.enddate <= '2012-12-31';"}
{"sample_id": 7007, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T2.TransactionID) FROM Product AS T1 INNER JOIN TransactionHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductLine = 'M'", "pred_sql": "SELECT COUNT(*) AS transaction_count \nFROM transactionhistory \nWHERE productid IN (SELECT productid FROM product WHERE productline = 'M')"}
{"sample_id": 7336, "db_id": "works_cycles", "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.BirthDate) + 1 , T3.Name FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (BusinessEntityID) INNER JOIN Department AS T3 USING (DepartmentID) ORDER BY T1.BirthDate DESC LIMIT 1", "pred_sql": "SELECT d.name AS DepartmentName, AVG(julianday('now') - julianday(e.birthdate)) / 365.25 AS AverageAge\nFROM employee e\nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid\nJOIN department d ON edh.departmentid = d.departmentid\nGROUP BY d.name\nORDER BY AverageAge ASC\nLIMIT 1;"}
{"sample_id": 7407, "db_id": "works_cycles", "gold_sql": "SELECT T2.AddressLine1, T2.AddressLine2 FROM BusinessEntityAddress AS T1 INNER JOIN Address AS T2 ON T1.AddressID = T2.AddressID INNER JOIN Store AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.Name = 'Valley Bicycle Specialists'", "pred_sql": "SELECT * FROM store WHERE name = 'Valley Bicycle Specialists';"}
{"sample_id": 7286, "db_id": "works_cycles", "gold_sql": "SELECT T2.NAME FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T2.NAME ORDER BY COUNT(T1.comments) > 10", "pred_sql": "SELECT p.name \nFROM product p \nJOIN productreview pr ON p.productid = pr.productid \nGROUP BY p.productid \nHAVING COUNT(pr.productreviewid) > 10 AND p.finishedgoodsflag = 1;"}
{"sample_id": 7365, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Arabic' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Name = 'Thai' THEN 1 ELSE 0 END) FROM Culture AS T1 INNER JOIN ProductModelProductDescriptionCulture AS T2 ON T1.CultureID = T2.CultureID", "pred_sql": "SELECT (SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Arabic%') AS ArabicCount, (SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Thai%') AS ThaiCount, ((SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Arabic%') - (SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Thai%')) * 100.0 / NULLIF((SELECT COUNT(*) FROM productdescription pd WHERE pd.description LIKE '%Thai%'), 0) AS PercentageDifference;"}
{"sample_id": 7457, "db_id": "works_cycles", "gold_sql": "SELECT StandardCost FROM ProductCostHistory WHERE ProductID = 847", "pred_sql": "SELECT standardcost FROM product WHERE productid = '847';"}
{"sample_id": 7050, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(DocumentNode) FROM Document WHERE DocumentSummary IS NULL", "pred_sql": "SELECT COUNT(*) AS private_document_count FROM document WHERE documentsummary IS NULL;"}
{"sample_id": 7306, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductLine = 'M' GROUP BY T2.Name ORDER BY CAST(SUM(T1.Rating) AS REAL) / COUNT(T1.ProductID) DESC LIMIT 1", "pred_sql": "SELECT p.name, AVG(pr.rating) AS average_rating\nFROM product p\nJOIN productreview pr ON p.productid = pr.productid\nWHERE p.productline = 'M'\nGROUP BY p.productid\nORDER BY average_rating DESC\nLIMIT 1;"}
{"sample_id": 7066, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1 AND T1.SickLeaveHours > 10", "pred_sql": "SELECT COUNT(DISTINCT e.businessentityid) AS EmployeesWishingPromotions\nFROM employee e\nJOIN person p ON e.businessentityid = p.businessentityid\nWHERE e.sickleavehours > 10 AND p.emailpromotion = 1;"}
{"sample_id": 7192, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010", "pred_sql": "SELECT p.firstname, p.lastname, e.hiredate \nFROM person p \nJOIN employee e ON p.businessentityid = e.businessentityid \nWHERE e.hiredate < '2010-01-01';"}
{"sample_id": 7461, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(DISTINCT T2.ProductID) FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T1.LargePhotoFileName = 'roadster_black_large.gif'", "pred_sql": "SELECT COUNT(*) AS product_count FROM productphoto WHERE thumbnailphotofilename = 'roadster_black_small.gif';"}
{"sample_id": 7297, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T2.Name) FROM ProductVendor AS T1 INNER JOIN Product AS T2 USING (ProductID) INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T3.PreferredVendorStatus = 1 AND T2.Class = 'M'", "pred_sql": "SELECT COUNT(DISTINCT p.productid) AS high_class_product_count\nFROM product p\nJOIN productvendor pv ON p.productid = pv.productid\nJOIN vendor v ON pv.businessentityid = v.businessentityid\nWHERE p.class = 'H' AND v.preferredvendorstatus = 1;"}
{"sample_id": 7264, "db_id": "works_cycles", "gold_sql": "SELECT T1.JobTitle, T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.HireDate LIMIT 1", "pred_sql": "SELECT e.jobtitle, p.firstname || ' ' || p.lastname AS full_name\nFROM employee e\nJOIN person p ON e.businessentityid = p.businessentityid\nORDER BY e.hiredate ASC\nLIMIT 1;"}
{"sample_id": 7466, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName, T2.LastName FROM EmailAddress AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.EmailAddress = 'regina7@adventure-works.com'", "pred_sql": "SELECT p.firstname, p.lastname, e.emailaddress \nFROM person p \nJOIN emailaddress e ON p.businessentityid = e.businessentityid \nWHERE e.emailaddress = 'regina7@adventure-works.com';"}
{"sample_id": 7442, "db_id": "works_cycles", "gold_sql": "SELECT DISTINCT T2.Name FROM ProductListPriceHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice > 1000", "pred_sql": "SELECT name FROM product WHERE listprice > 1000;"}
{"sample_id": 7249, "db_id": "works_cycles", "gold_sql": "SELECT MIN(HireDate) FROM Employee WHERE JobTitle = 'Accountant'", "pred_sql": "SELECT MIN(hiredate) AS First_Accountant_Hire_Date \nFROM employee \nWHERE jobtitle = 'Accountant';"}
{"sample_id": 7069, "db_id": "works_cycles", "gold_sql": "SELECT T2.FirstName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.NameStyle = 0 AND T1.Gender = 'M'", "pred_sql": "SELECT firstname FROM employee e JOIN person p ON e.businessentityid = p.businessentityid WHERE e.gender = 'M' AND p.namestyle = '0' LIMIT 1;"}
{"sample_id": 7324, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(CASE WHEN JobTitle = 'Sales Representative' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee", "pred_sql": "SELECT (COUNT(CASE WHEN p.persontype = 'SP' THEN 1 END) * 100.0 / COUNT(*)) AS sales_representative_percentage\nFROM person p\nJOIN employee e ON p.businessentityid = e.businessentityid;"}
{"sample_id": 7195, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(T1.VacationHours) AS REAL) / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP'", "pred_sql": "SELECT AVG(vacationhours) AS average_vacation_hours\nFROM employee\nJOIN salesperson ON employee.businessentityid = salesperson.businessentityid;"}
{"sample_id": 7315, "db_id": "works_cycles", "gold_sql": "SELECT T2.JobTitle, T4.Name FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID INNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID ORDER BY T2.HireDate LIMIT 1", "pred_sql": "SELECT e.jobtitle, d.name \nFROM employee e \nJOIN employeedepartmenthistory edh ON e.businessentityid = edh.businessentityid \nJOIN department d ON edh.departmentid = d.departmentid \nWHERE e.birthdate = (SELECT MIN(birthdate) FROM employee)"}
{"sample_id": 7356, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesOrderID = 43660", "pred_sql": "SELECT p.name AS product_name, sod.orderqty, sod.unitprice, sod.linetotal \nFROM salesorderheader soh \nJOIN salesorderdetail sod ON soh.salesorderid = sod.salesorderid \nJOIN product p ON sod.productid = p.productid \nWHERE soh.salesordernumber = 43660;"}
{"sample_id": 7251, "db_id": "works_cycles", "gold_sql": "SELECT LastReceiptCost - StandardPrice FROM ProductVendor ORDER BY StandardPrice DESC LIMIT 1", "pred_sql": "SELECT v.businessentityid, (pv.lastreceiptcost - pv.standardprice) AS profit_on_net\nFROM vendor v\nJOIN productvendor pv ON v.businessentityid = pv.businessentityid\nWHERE pv.standardprice = (\n    SELECT MAX(standardprice)\n    FROM productvendor\n) \nLIMIT 1;"}
{"sample_id": 7287, "db_id": "works_cycles", "gold_sql": "SELECT T1.ReviewerName FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Class = 'M' AND T2.Style = 'W' AND T1.Rating = 5", "pred_sql": "SELECT reviewername, rating \nFROM productreview pr \nJOIN product p ON pr.productid = p.productid \nWHERE p.class = 'M' AND p.style = 'W' AND pr.rating = 5;"}
{"sample_id": 7450, "db_id": "works_cycles", "gold_sql": "SELECT T2.StandardCost FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name LIKE '%Sport%'", "pred_sql": "SELECT p.name AS ProductName, p.standardcost AS Cost\nFROM product p\nJOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid\nJOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid\nWHERE pc.name = 'Sports';"}
{"sample_id": 7410, "db_id": "works_cycles", "gold_sql": "SELECT T2.PasswordHash FROM Person AS T1 INNER JOIN Password AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'David' AND T1.LastName = 'Bradley'", "pred_sql": "SELECT p.firstname, p.lastname, pwd.passwordhash \nFROM person p \nJOIN password pwd ON p.businessentityid = pwd.businessentityid \nWHERE p.firstname = 'David' AND p.lastname = 'Bradley';"}
{"sample_id": 7144, "db_id": "works_cycles", "gold_sql": "SELECT DepartmentID FROM Department WHERE GroupName = 'Sales and Marketing'", "pred_sql": "SELECT departmentid FROM department WHERE groupname = 'Sales and Marketing'"}
{"sample_id": 7077, "db_id": "works_cycles", "gold_sql": "SELECT MAX(T1.Rate) - SUM(T1.Rate) / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Employee AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T2.EmailPromotion = 2 AND T3.MaritalStatus = 'M'", "pred_sql": "SELECT MAX(ep.rate) - AVG(ep.rate) AS pay_difference\nFROM employeepayhistory ep\nJOIN employee e ON ep.businessentityid = e.businessentityid\nJOIN person p ON e.businessentityid = p.businessentityid\nWHERE e.maritalstatus = 'M' AND p.emailpromotion = 1;"}
{"sample_id": 7429, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T2.ProductID) FROM SpecialOffer AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID INNER JOIN ProductSubcategory AS T4 ON T3.ProductSubcategoryID = T4.ProductSubcategoryID INNER JOIN ProductCategory AS T5 ON T4.ProductCategoryID = T5.ProductCategoryID WHERE T1.Description = 'LL Road Frame Sale' AND T4.Name = 'Clothing'", "pred_sql": "SELECT COUNT(p.productid) AS product_count \nFROM product p \nJOIN productsubcategory ps ON p.productsubcategoryid = ps.productsubcategoryid \nJOIN productcategory pc ON ps.productcategoryid = pc.productcategoryid \nJOIN specialofferproduct sop ON p.productid = sop.productid \nJOIN specialoffer so ON sop.specialofferid = so.specialofferid \nWHERE pc.name = 'Clothing' AND so.description LIKE '%LL Road Frame Sale%';"}
{"sample_id": 7188, "db_id": "works_cycles", "gold_sql": "SELECT BusinessEntityID FROM SalesPerson WHERE BusinessEntityID IN ( SELECT BusinessEntityID FROM SalesPersonQuotaHistory WHERE STRFTIME('%Y', QuotaDate) = '2013' ) ORDER BY CAST(SalesLastYear AS REAL) / SalesQuota DESC LIMIT 1", "pred_sql": "SELECT p.firstname, p.lastname, s.salesquota, s.salesytd, (s.salesytd / s.salesquota) * 100 AS percentage_achieved\nFROM salesperson s\nJOIN person p ON s.businessentityid = p.businessentityid\nWHERE s.salesquota > 0 AND strftime('%Y', s.modifieddate) = '2013'\nORDER BY percentage_achieved DESC\nLIMIT 1;"}
{"sample_id": 7296, "db_id": "works_cycles", "gold_sql": "SELECT T3.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Hex Nut 5' ORDER BY T1.StandardPrice LIMIT 1", "pred_sql": "SELECT v.name\nFROM vendor v\nJOIN productvendor pv ON v.businessentityid = pv.businessentityid\nJOIN product p ON pv.productid = p.productid\nWHERE p.name = 'Hex Nut 5'\nORDER BY pv.standardprice ASC\nLIMIT 1;"}
{"sample_id": 7471, "db_id": "works_cycles", "gold_sql": "SELECT AVG((T1.ListPrice - T2.StandardCost) * 100 / T2.StandardCost) FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID", "pred_sql": "SELECT AVG(listprice - standardcost) / AVG(listprice) * 100 AS average_profit_percentage FROM product;"}
{"sample_id": 7230, "db_id": "works_cycles", "gold_sql": "SELECT TerritoryID FROM Customer WHERE ModifiedDate < '2014-12-09' GROUP BY TerritoryID ORDER BY COUNT(TerritoryID) DESC LIMIT 1", "pred_sql": "SELECT st.name AS TerritoryName, COUNT(c.customerid) AS CustomerCount\nFROM salesterritory st\nJOIN customer c ON st.territoryid = c.territoryid\nWHERE c.modifieddate <= '2014-09-12'\nGROUP BY st.name\nORDER BY CustomerCount DESC\nLIMIT 1;"}
{"sample_id": 7454, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(ProductID) FROM ProductProductPhoto WHERE ProductPhotoID != 1", "pred_sql": "SELECT COUNT(*) AS product_count FROM productphoto WHERE thumbnailphoto IS NOT NULL;"}
{"sample_id": 7181, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(*) FROM WorkOrderRouting AS T1 INNER JOIN BillOfMaterials AS T2 ON T1.LocationID = T2.ProductAssemblyID INNER JOIN WorkOrder AS T3 ON T3.WorkOrderID = T1.WorkOrderID WHERE T1.LocationID = 40", "pred_sql": "SELECT SUM(stockedqty) AS total_stocked_quantity \nFROM workorder \nWHERE locationid = 40;"}
{"sample_id": 7016, "db_id": "works_cycles", "gold_sql": "SELECT T1.Name FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.RejectedQty = T2.ReceivedQty AND T2.RejectedQty <> 0", "pred_sql": "SELECT p.name\nFROM purchaseorderdetail pod\nJOIN product p ON pod.productid = p.productid\nWHERE pod.receivedqty = 0 AND pod.rejectedqty > 0;"}
{"sample_id": 7444, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM ProductInventory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T1.LocationID = 1 AND T1.Shelf = 'L' AND T1.Bin = 6", "pred_sql": "SELECT p.name \nFROM product p \nJOIN productinventory pi ON p.productid = pi.productid \nWHERE pi.locationid = '1' AND pi.shelf = 'L' AND pi.bin = '6';"}
{"sample_id": 7011, "db_id": "works_cycles", "gold_sql": "SELECT ProductID, Rating, Comments FROM ProductReview WHERE ReviewerName LIKE 'J%'", "pred_sql": "SELECT productid, rating, comments FROM productreview WHERE reviewername LIKE 'J%';"}
{"sample_id": 7111, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(DISTINCT BusinessEntityID) FROM ProductVendor WHERE AverageLeadTime = 25", "pred_sql": "SELECT COUNT(DISTINCT pv.businessentityid) AS vendor_count\nFROM productvendor pv\nWHERE pv.averageleadtime = 25;"}
{"sample_id": 7054, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )", "pred_sql": "SELECT COUNT(*) AS MarriedEmployeesCount\nFROM employee\nWHERE maritalstatus = 'M' AND payfrequency = (SELECT MAX(payfrequency) FROM employeepayhistory)"}
{"sample_id": 7364, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.StateProvinceID = T2.StateProvinceID WHERE T1.City = 'Racine'", "pred_sql": "SELECT sp.name \nFROM stateprovince sp \nJOIN salesterritory st ON sp.territoryid = st.territoryid \nJOIN customer c ON st.territoryid = c.territoryid \nWHERE c.storeid = (SELECT storeid FROM store WHERE name = 'Racine')"}
{"sample_id": 7372, "db_id": "works_cycles", "gold_sql": "SELECT Weight FROM Product WHERE WeightUnitMeasureCode = 'LB' GROUP BY Weight ORDER BY COUNT(Style) DESC LIMIT 1", "pred_sql": "SELECT name, weight FROM product WHERE style = (SELECT style FROM product GROUP BY style ORDER BY COUNT(*) DESC LIMIT 1)"}
{"sample_id": 7085, "db_id": "works_cycles", "gold_sql": "SELECT SUM(TotalDue) / COUNT(TotalDue) FROM PurchaseOrderHeader WHERE Status = 2", "pred_sql": "SELECT AVG(totaldue) AS average_total_due FROM salesorderheader WHERE status = 2;"}
{"sample_id": 7291, "db_id": "works_cycles", "gold_sql": "SELECT T1.Description FROM ProductDescription AS T1 INNER JOIN Product AS T2 WHERE T2.Name = 'Headset Ball Bearings' AND T1.productDescriptionID = T2.ProductID", "pred_sql": "SELECT pd.description \nFROM product p \nJOIN productdescription pd ON p.productid = pd.productid \nWHERE p.name = 'Headset Ball Bearings';"}
{"sample_id": 7319, "db_id": "works_cycles", "gold_sql": "SELECT T3.Name FROM Vendor AS T1 INNER JOIN ProductVendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Product AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Name = 'Australia Bike Retailer'", "pred_sql": "SELECT p.name FROM product p\nJOIN salesorderdetail sd ON p.productid = sd.productid\nJOIN salesorderheader so ON sd.salesorderid = so.salesorderid\nJOIN store s ON so.storeid = s.businessentityid\nJOIN salesterritory st ON s.territoryid = st.territoryid\nJOIN countryregion cr ON st.countryregioncode = cr.countryregioncode\nWHERE cr.name = 'Australia'\nORDER BY p.productid;"}
{"sample_id": 7068, "db_id": "works_cycles", "gold_sql": "SELECT T2.AdditionalContactInfo FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE PersonType = 'SP' ORDER BY T1.BirthDate ASC LIMIT 1", "pred_sql": "SELECT p.additionalcontactinfo \nFROM person p \nJOIN employee e ON p.businessentityid = e.businessentityid \nWHERE e.jobtitle = 'Sales Person' \nORDER BY e.hiredate ASC \nLIMIT 1;"}
{"sample_id": 7187, "db_id": "works_cycles", "gold_sql": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 0 AND T1.Gender = 'M'", "pred_sql": "SELECT COUNT(*) AS MaleEmployeesWithoutEmailPromotion\nFROM employee e\nJOIN person p ON e.businessentityid = p.businessentityid\nWHERE p.gender = 'M' AND p.emailpromotion = '0';"}
{"sample_id": 7229, "db_id": "works_cycles", "gold_sql": "SELECT Name FROM Vendor WHERE ActiveFlag = 1", "pred_sql": "SELECT * FROM vendor WHERE activeflag = 1 AND purchasingwebserviceurl IS NOT NULL;"}
{"sample_id": 7443, "db_id": "works_cycles", "gold_sql": "SELECT T1.ProductID FROM ProductListPriceHistory AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.ListPrice - T2.StandardCost DESC LIMIT 1", "pred_sql": "SELECT name, (listprice - standardcost) AS profit FROM product ORDER BY profit DESC LIMIT 1;"}
{"sample_id": 7103, "db_id": "works_cycles", "gold_sql": "SELECT CAST(SUM(IIF(T1.ShipMethodID = 5, T3.OrderQty, 0)) AS REAL) / COUNT(T3.ProductID) FROM ShipMethod AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.ShipMethodID = T2.ShipMethodID INNER JOIN PurchaseOrderDetail AS T3 ON T2.PurchaseOrderID = T3.PurchaseOrderID", "pred_sql": "SELECT AVG(so.orderqty) AS average_ordered_quantity\nFROM salesorderdetail sod\nJOIN salesorderheader so ON sod.salesorderid = so.salesorderid\nJOIN shipmethod sm ON so.shipmethodid = sm.shipmethodid\nWHERE sm.name = 'Cargo Transport 5';"}
{"sample_id": 7104, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM SalesTerritory AS T1 INNER JOIN StateProvince AS T2 ON T1.CountryRegionCode = T2.CountryRegionCode INNER JOIN SalesTaxRate AS T3 ON T2.StateProvinceID = T3.StateProvinceID ORDER BY (T1.SalesYTD - T1.SalesLastYear) / T1.SalesLastYear DESC LIMIT 1", "pred_sql": "SELECT sr.name\nFROM salestaxrate sr\nJOIN stateprovince sp ON sr.stateprovinceid = sp.stateprovinceid\nJOIN salesterritory st ON sp.countryregioncode = st.countryregioncode\nWHERE st.salesytd - st.saleslastyear = (\n    SELECT MAX(salesytd - saleslastyear)\n    FROM salesterritory\n)"}
{"sample_id": 7285, "db_id": "works_cycles", "gold_sql": "SELECT T2.Name FROM ProductReview AS T1 INNER JOIN Product AS T2 USING (ProductID) WHERE T2.FinishedGoodsFlag = 1 AND T2.MakeFlag = 1 GROUP BY T2.Name ORDER BY COUNT(T1.COMMENTS) > 10", "pred_sql": "SELECT COUNT(*) AS ProductCount\nFROM product p\nJOIN productreview pr ON p.productid = pr.productid\nWHERE p.makeflag = 1 AND p.finishedgoodsflag = 1\nGROUP BY p.productid\nHAVING COUNT(pr.productreviewid) > 10;"}
{"sample_id": 7159, "db_id": "works_cycles", "gold_sql": "SELECT T1.ThumbNailPhoto FROM ProductPhoto AS T1 INNER JOIN ProductProductPhoto AS T2 ON T1.ProductPhotoID = T2.ProductPhotoID WHERE T2.ProductID = 1", "pred_sql": "SELECT productphoto.thumbnailphoto, productphoto.largephoto FROM product INNER JOIN productproductphoto ON product.productid = productproductphoto.productid INNER JOIN productphoto ON productproductphoto.productphotoid = productphoto.productphotoid WHERE product.productid = 1;"}
{"sample_id": 7030, "db_id": "works_cycles", "gold_sql": "SELECT T2.UnitPrice * T2.OrderQty FROM SpecialOffer AS T1 INNER JOIN SalesOrderDetail AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID WHERE T1.Description = 'Volume Discount 11 to 14' AND T1.SpecialOfferID = 2 AND T2.ProductID = 716 AND T2.SalesOrderID = 46625", "pred_sql": "SELECT SUM(soh.subtotal + soh.taxamt + soh.freight) AS total_price\nFROM salesorderheader AS soh\nJOIN salesorderdetail AS sod ON soh.salesorderid = sod.salesorderid\nWHERE soh.salesorderid = 46625 AND sod.productid = 716 AND sod.orderqty BETWEEN 11 AND 14;"}
{"sample_id": 7057, "db_id": "works_cycles", "gold_sql": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SalariedFlag = 1 ORDER BY T1.Rate DESC LIMIT 1", "pred_sql": "SELECT MAX(rate) AS highest_pay_rate FROM employeepayhistory WHERE businessentityid IN (SELECT businessentityid FROM employee WHERE salariedflag = 1)"}
{"sample_id": 7169, "db_id": "works_cycles", "gold_sql": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'", "pred_sql": "SELECT creditrating FROM vendor WHERE rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C';"}
{"sample_id": 7284, "db_id": "works_cycles", "gold_sql": "SELECT T1.Comments FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.FinishedGoodsFlag = 1 GROUP BY T1.Comments ORDER BY COUNT(T1.ProductReviewID) DESC LIMIT 1", "pred_sql": "SELECT product.name, COUNT(productreview.productreviewid) AS review_count\nFROM product\nJOIN productreview ON product.productid = productreview.productid\nWHERE product.finishedgoodsflag = 1\nGROUP BY product.productid\nORDER BY review_count DESC\nLIMIT 1;"}
{"sample_id": 6164, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 3 AND T2.results = 'Pass' AND T1.facility_type = 'Restaurant'", "pred_sql": "SELECT COUNT(DISTINCT e.license_no) AS restaurant_count\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nWHERE e.facility_type = 'Restaurant' AND e.risk_level = (SELECT MAX(risk_level) FROM establishment WHERE facility_type = 'Restaurant')\nAND i.results IN ('Pass', 'Pass w/ Conditions');"}
{"sample_id": 6194, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'", "pred_sql": "SELECT results FROM inspection JOIN employee ON inspection.employee_id = employee.employee_id WHERE employee.first_name = 'Thomas' AND employee.last_name = 'Langley';"}
{"sample_id": 6166, "db_id": "food_inspection_2", "gold_sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 60332", "pred_sql": "SELECT e.title FROM employee e JOIN inspection i ON e.employee_id = i.employee_id WHERE i.inspection_id = '60332';"}
{"sample_id": 6134, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND strftime('%Y-%m', T1.inspection_date) = '2011-05'", "pred_sql": "SELECT COUNT(DISTINCT inspection.license_no) AS establishment_count\nFROM employee\nJOIN inspection ON employee.employee_id = inspection.employee_id\nWHERE employee.address = '5000 N Wolcott Ave'\nAND inspection.inspection_date BETWEEN '2011-05-01' AND '2011-05-31';"}
{"sample_id": 6151, "db_id": "food_inspection_2", "gold_sql": "SELECT T.dba_name FROM ( SELECT T1.dba_name, SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE strftime('%Y', T2.inspection_date) = '2014' GROUP BY T1.dba_name ORDER BY SUM(T3.fine) DESC LIMIT 1 ) AS T", "pred_sql": "SELECT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no JOIN violation v ON i.inspection_id = v.inspection_id WHERE strftime('%Y', i.inspection_date) = '2014' GROUP BY e.dba_name ORDER BY SUM(v.fine) DESC LIMIT 1;"}
{"sample_id": 6115, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T2.latitude, T2.longitude FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.inspection_date = '2010-05-11'", "pred_sql": "SELECT latitude, longitude FROM establishment WHERE license_no IN (SELECT license_no FROM inspection WHERE inspection_date = '2010-05-11');"}
{"sample_id": 6153, "db_id": "food_inspection_2", "gold_sql": "SELECT T3.inspector_comment FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T2.inspection_date = '2010-01-25' AND T1.dba_name = 'TAQUERIA LA FIESTA'", "pred_sql": "SELECT v.inspector_comment \nFROM violation v \nJOIN inspection i ON v.inspection_id = i.inspection_id \nJOIN establishment e ON i.license_no = e.license_no \nWHERE e.dba_name = 'Taqueria La Fiesta' AND i.inspection_date = '2010-01-25';"}
{"sample_id": 6175, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y', inspection_date) = '2014' AND results = 'Fail'", "pred_sql": "SELECT COUNT(*) AS failed_inspections_count FROM inspection WHERE results = 'Fail' AND strftime('%Y', inspection_date) = '2014';"}
{"sample_id": 6131, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.address = '3635 W DIVERSEY AVE ' AND T1.facility_type = 'Grocery Store'", "pred_sql": "SELECT COUNT(*) AS inspection_count FROM inspection WHERE license_no IN (SELECT license_no FROM establishment WHERE address = '3635 W DIVERSEY AVE');"}
{"sample_id": 6197, "db_id": "food_inspection_2", "gold_sql": "SELECT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 52269", "pred_sql": "SELECT title FROM employee WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = '52269');"}
{"sample_id": 6202, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.dba_name FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results LIKE '%Pass%'", "pred_sql": "SELECT DISTINCT e.dba_name FROM establishment e JOIN inspection i ON e.license_no = i.license_no WHERE i.results IN ('Pass', 'Pass w/ Conditions')"}
{"sample_id": 6207, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1334073", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM employee WHERE employee_id IN (SELECT employee_id FROM inspection WHERE license_no = '1334073')"}
{"sample_id": 6222, "db_id": "food_inspection_2", "gold_sql": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant'", "pred_sql": "SELECT dba_name FROM establishment WHERE latitude = 41.9532864854 AND longitude = -87.7673790701422 AND facility_type = 'Restaurant';"}
{"sample_id": 6236, "db_id": "food_inspection_2", "gold_sql": "SELECT T2.inspection_id FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND T1.code = '7-38-030, 015, 010 (A), 005 (A)'", "pred_sql": "SELECT inspection_id FROM violation v JOIN inspection_point ip ON v.point_id = ip.point_id WHERE inspector_comment = 'MUST CLEAN AND BETTER ORGANIZE HALLWAY AREA' AND ip.code IN ('7-38-030', '015', '010 (A)', '005 (A)')"}
{"sample_id": 6191, "db_id": "food_inspection_2", "gold_sql": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225", "pred_sql": "SELECT first_name FROM employee WHERE employee_id = (SELECT employee_id FROM inspection WHERE inspection_id = '48225');"}
{"sample_id": 6232, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_date = '2010-02-24' AND T1.first_name = 'Arnold' AND T1.last_name = 'Holder'", "pred_sql": "SELECT i.results FROM inspection i JOIN employee e ON i.employee_id = e.employee_id WHERE e.first_name = 'Arnold' AND e.last_name = 'Holder' AND i.inspection_date = '2010-02-24';"}
{"sample_id": 6177, "db_id": "food_inspection_2", "gold_sql": "SELECT T2.point_id, T2.fine FROM inspection AS T1 INNER JOIN violation AS T2 ON T1.inspection_id = T2.inspection_id WHERE T1.inspection_date = '2010-08-07'", "pred_sql": "SELECT violation.point_id, violation.fine FROM violation JOIN inspection ON violation.inspection_id = inspection.inspection_id WHERE inspection.inspection_date = '2010-08-07';"}
{"sample_id": 6120, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Pass' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "pred_sql": "SELECT COUNT(*) AS pass_count FROM inspection WHERE employee_id = (SELECT employee_id FROM employee WHERE first_name = 'Joshua' AND last_name = 'Rosa') AND results = 'Pass';"}
{"sample_id": 6231, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.facility_type, T1.license_no FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.risk_level = 1 AND T2.results = 'Fail'", "pred_sql": "SELECT e.facility_type, e.license_no \nFROM establishment e \nJOIN inspection i ON e.license_no = i.license_no \nWHERE e.risk_level = (SELECT MIN(risk_level) FROM establishment) \nAND i.results = 'Fail';"}
{"sample_id": 6204, "db_id": "food_inspection_2", "gold_sql": "SELECT AVG(T2.salary) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T1.inspection_type = 'License Re-Inspection'", "pred_sql": "SELECT AVG(salary) AS average_salary FROM employee WHERE employee_id IN (SELECT employee_id FROM inspection WHERE inspection_type = 'License Re-Inspection');"}
{"sample_id": 6217, "db_id": "food_inspection_2", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.fine = 250 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T1.facility_type = 'Restaurant'", "pred_sql": "SELECT (COUNT(CASE WHEN v.fine = 250 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_restaurants_with_fine_250\nFROM establishment e\nJOIN inspection i ON e.license_no = i.license_no\nJOIN violation v ON i.inspection_id = v.inspection_id\nWHERE e.facility_type = 'Restaurant';"}
{"sample_id": 6112, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y', T2.inspection_date) = '2010' AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa'", "pred_sql": "SELECT COUNT(*) AS inspection_count FROM inspection WHERE employee_id = (SELECT employee_id FROM employee WHERE first_name = 'Joshua' AND last_name = 'Rosa') AND strftime('%Y', inspection_date) = '2010';"}
{"sample_id": 6127, "db_id": "food_inspection_2", "gold_sql": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.aka_name = 'WING HUNG CHOP SUEY RESTAURANT'", "pred_sql": "SELECT MIN(inspection_date) AS first_inspection_date \nFROM inspection \nJOIN establishment ON inspection.license_no = establishment.license_no \nWHERE establishment.dba_name = 'Wing Hung Chop Suey Restaurant';"}
{"sample_id": 6246, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(CASE WHEN T2.results = 'Pass' THEN T1.license_no END) - COUNT(CASE WHEN T2.results = 'Fail' THEN T1.license_no END) AS diff FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.inspection_type = 'Canvass' AND T1.facility_type = 'Restaurant'", "pred_sql": "SELECT COUNT(CASE WHEN results = 'Pass' THEN 1 END) - COUNT(CASE WHEN results = 'Fail' THEN 1 END) AS difference\nFROM inspection\nJOIN establishment ON inspection.license_no = establishment.license_no\nWHERE inspection_type = 'canvass' AND facility_type = 'Restaurant';"}
{"sample_id": 6111, "db_id": "food_inspection_2", "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE strftime('%Y-%m', T2.inspection_date) = '2010-05' AND T1.title = 'Sanitarian'", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name \nFROM employee \nWHERE title = 'Sanitarian' \nAND employee_id IN (\n    SELECT employee_id \n    FROM inspection \n    WHERE inspection_date BETWEEN '2010-05-01' AND '2010-05-31'\n);"}
{"sample_id": 6124, "db_id": "food_inspection_2", "gold_sql": "SELECT point_level FROM inspection_point WHERE Description = 'Refrigeration and metal stem thermometers provided and conspicuous '", "pred_sql": "SELECT point_level FROM inspection_point WHERE description = 'Refrigeration and metal stem thermometers provided and conspicuous';"}
{"sample_id": 6226, "db_id": "food_inspection_2", "gold_sql": "SELECT COUNT(license_no) FROM establishment WHERE risk_level = 3", "pred_sql": "SELECT COUNT(*) AS total_establishments FROM establishment WHERE risk_level = (SELECT MAX(risk_level) FROM establishment);"}
{"sample_id": 6138, "db_id": "food_inspection_2", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.results = 'Pass' THEN T2.inspection_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'POCKETS' AND T1.facility_type = 'Restaurant'", "pred_sql": "SELECT COUNT(CASE WHEN results IN ('Pass', 'Pass w/ Conditions') THEN 1 END) * 100.0 / COUNT(*) AS pass_rate FROM inspection JOIN establishment ON inspection.license_no = establishment.license_no WHERE establishment.dba_name = 'Pockets Restaurant';"}
{"sample_id": 6185, "db_id": "food_inspection_2", "gold_sql": "SELECT T3.first_name, T3.last_name, T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id WHERE T1.dba_name = 'JEAN SAMOCKI'", "pred_sql": "SELECT e.first_name, e.last_name, i.results \nFROM employee e \nJOIN inspection i ON e.employee_id = i.employee_id \nWHERE e.first_name = 'Jean' AND e.last_name = 'Samocki';"}
{"sample_id": 7925, "db_id": "music_platform_2", "gold_sql": "SELECT T2.author_id FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Pop Rocket' AND T2.created_at LIKE '2016-%' AND T2.rating < 5", "pred_sql": "SELECT DISTINCT r.author_id \nFROM reviews r \nJOIN podcasts p ON r.podcast_id = p.podcast_id \nWHERE p.title = 'Pop Rocket' \nAND r.rating < 5 \nAND strftime('%Y', r.created_at) = '2016';"}
{"sample_id": 7961, "db_id": "music_platform_2", "gold_sql": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE (T2.created_at LIKE '2018-%' AND T1.category = 'arts' AND T2.content LIKE '%love%') OR (T2.created_at LIKE '2019-%' AND T1.category = 'arts' AND T2.content LIKE '%love%')", "pred_sql": "SELECT p.title \nFROM podcasts p \nJOIN reviews r ON p.podcast_id = r.podcast_id \nJOIN categories c ON p.podcast_id = c.podcast_id \nWHERE r.content LIKE '%love%' \nAND c.category = 'art' \nAND r.created_at BETWEEN '2018-01-01' AND '2019-12-31';"}
{"sample_id": 7985, "db_id": "music_platform_2", "gold_sql": "SELECT COUNT(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.rating = 5", "pred_sql": "SELECT COUNT(*) AS five_star_ratings FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.rating = 5 AND p.title = 'Please Excuse My Dead Aunt Sally';"}
{"sample_id": 7946, "db_id": "music_platform_2", "gold_sql": "SELECT AVG(rating) FROM reviews WHERE created_at BETWEEN '2019-01-01T00:00:00-07:00' AND '2019-12-31T23:59:59-07:00'", "pred_sql": "SELECT AVG(r.rating) AS average_rating\nFROM reviews r\nJOIN podcasts p ON r.podcast_id = p.podcast_id\nWHERE strftime('%Y', r.created_at) = '2019';"}
{"sample_id": 7966, "db_id": "music_platform_2", "gold_sql": "SELECT title FROM podcasts WHERE podcast_id = ( SELECT podcast_id FROM reviews WHERE title = 'Hosts bring the show down' )", "pred_sql": "SELECT r.content, r.rating, p.title, p.itunes_url FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE r.title = 'Hosts bring the show down';"}
{"sample_id": 7956, "db_id": "music_platform_2", "gold_sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'", "pred_sql": "SELECT AVG(r.rating) AS average_rating \nFROM reviews r \nJOIN categories c ON r.podcast_id = c.podcast_id \nWHERE c.category = 'true crime';"}
{"sample_id": 7986, "db_id": "music_platform_2", "gold_sql": "SELECT AVG(T2.rating) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally'", "pred_sql": "SELECT AVG(rating) AS average_rating FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE p.title = 'Please Excuse My Dead Aunt Sally';"}
{"sample_id": 7984, "db_id": "music_platform_2", "gold_sql": "SELECT T2.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'F7E5A318989779D'", "pred_sql": "SELECT DISTINCT p.title FROM podcasts p JOIN reviews r ON p.podcast_id = r.podcast_id WHERE r.author_id = 'F7E5A318989779D';"}
{"sample_id": 7945, "db_id": "music_platform_2", "gold_sql": "SELECT CAST(SUM(CASE WHEN category = 'fiction-science-fiction' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(podcast_id) OR '%' \"percentage\" FROM categories", "pred_sql": "SELECT (COUNT(DISTINCT p.podcast_id) * 100.0 / (SELECT COUNT(DISTINCT podcast_id) FROM podcasts)) AS percentage_fiction_science_fiction\nFROM podcasts p\nJOIN categories c ON p.podcast_id = c.podcast_id\nWHERE c.category = 'fiction-science-fiction';"}
{"sample_id": 7944, "db_id": "music_platform_2", "gold_sql": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'", "pred_sql": "SELECT COUNT(*) AS review_count FROM reviews WHERE rating = 3 AND created_at >= '2015-01-01T00:00:00' AND created_at < '2015-04-01T00:00:00';"}
{"sample_id": 7949, "db_id": "music_platform_2", "gold_sql": "SELECT DISTINCT T3.rating, T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T2.title = 'Sitcomadon'", "pred_sql": "SELECT r.rating, c.category \nFROM podcasts p \nJOIN reviews r ON p.podcast_id = r.podcast_id \nJOIN categories c ON p.podcast_id = c.podcast_id \nWHERE p.title = 'Sitcomadon';"}
{"sample_id": 7963, "db_id": "music_platform_2", "gold_sql": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'", "pred_sql": "SELECT AVG(r.rating) AS average_rating \nFROM reviews r \nJOIN categories c ON r.podcast_id = c.podcast_id \nWHERE c.category = 'comedy';"}
{"sample_id": 7935, "db_id": "music_platform_2", "gold_sql": "SELECT T1.category FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'SciFi Tech Talk'", "pred_sql": "SELECT c.category FROM podcasts p JOIN categories c ON p.podcast_id = c.podcast_id WHERE p.title = 'SciFi Tech Talk';"}
{"sample_id": 7979, "db_id": "music_platform_2", "gold_sql": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'", "pred_sql": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16'"}
{"sample_id": 7976, "db_id": "music_platform_2", "gold_sql": "SELECT COUNT(T2.podcast_id) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Planet Money'", "pred_sql": "SELECT COUNT(*) AS review_count FROM reviews r JOIN podcasts p ON r.podcast_id = p.podcast_id WHERE p.title = 'Planet Money';"}
{"sample_id": 6990, "db_id": "ice_hockey_draft", "gold_sql": "SELECT SUM(T2.GP) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.PlayerName = 'Per Mars' AND T2.GAMETYPE = 'Playoffs'", "pred_sql": "SELECT SUM(gp) AS total_playoffs FROM seasonstatus JOIN playerinfo ON seasonstatus.eliteid = playerinfo.eliteid WHERE playerinfo.playername = 'Per Mars' AND seasonstatus.gametype = 'playoffs';"}
{"sample_id": 6982, "db_id": "ice_hockey_draft", "gold_sql": "SELECT COUNT(T2.TEAM) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN weight_info AS T3 ON T1.weight = T3.weight_id WHERE T1.overallby = 'Arizona Coyotes' ORDER BY T3.weight_in_lbs DESC LIMIT 1", "pred_sql": "SELECT COUNT(DISTINCT ss.team) AS team_count\nFROM playerinfo pi\nJOIN weight_info wi ON pi.weight = wi.weight_id\nJOIN seasonstatus ss ON pi.eliteid = ss.eliteid\nWHERE pi.eliteid = (\n    SELECT eliteid\n    FROM playerinfo\n    JOIN weight_info ON playerinfo.weight = weight_info.weight_id\n    WHERE weight_in_kg = (\n        SELECT MAX(weight_in_kg)\n        FROM playerinfo\n        JOIN weight_info ON playerinfo.weight = weight_info.weight_id\n        WHERE eliteid IN (\n            SELECT eliteid\n            FROM seasonstatus\n            WHERE team = 'Arizona Coyotes'\n        )\n    )\n)"}
{"sample_id": 6948, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.P = ( SELECT MAX(P) FROM SeasonStatus )", "pred_sql": "SELECT playername, MAX(p) AS max_points FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid GROUP BY playername ORDER BY max_points DESC LIMIT 1;"}
{"sample_id": 6992, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T.nation FROM ( SELECT T1.nation, COUNT(T1.ELITEID) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.TEAM = 'Plymouth Whalers' GROUP BY T1.nation ORDER BY COUNT(T1.ELITEID) DESC LIMIT 1 ) AS T", "pred_sql": "SELECT birthplace, COUNT(*) as player_count FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.team = 'Plymouth Whalers' GROUP BY birthplace ORDER BY player_count DESC LIMIT 1;"}
{"sample_id": 6951, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.PlayerName, T1.TEAM FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2006-2007' AND T1.GAMETYPE = 'Playoffs' AND T1.LEAGUE = 'SuperElit' ORDER BY T1.P DESC LIMIT 1", "pred_sql": "SELECT p.playername, s.team \nFROM playerinfo p \nJOIN seasonstatus s ON p.eliteid = s.eliteid \nWHERE s.season = '2006-2007' AND s.league = 'SuperElit' AND s.gp > 0 \nORDER BY s.p DESC \nLIMIT 1;"}
{"sample_id": 6915, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.height_in_inch FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar'", "pred_sql": "SELECT height_in_inch FROM height_info JOIN playerinfo ON height_info.height_id = playerinfo.height WHERE playerinfo.playername = 'David Bornhammar';"}
{"sample_id": 6929, "db_id": "ice_hockey_draft", "gold_sql": "SELECT MAX(T2.weight_in_lbs) FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id", "pred_sql": "SELECT weight_in_lbs FROM weight_info WHERE weight_id = (SELECT weight FROM playerinfo ORDER BY weight DESC LIMIT 1)"}
{"sample_id": 6949, "db_id": "ice_hockey_draft", "gold_sql": "SELECT CAST(COUNT(CASE WHEN nation IN ('Belarus', 'Czech Rep.', 'Slovakia', 'Ukraine') THEN ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(ELITEID) FROM PlayerInfo WHERE overallby = 'Toronto Maple Leafs'", "pred_sql": "SELECT (COUNT(CASE WHEN nation IN ('Ukraine', 'Poland', 'Romania', 'Hungary', 'Czech Republic', 'Slovakia', 'Bulgaria', 'Moldova', 'Belarus', 'Lithuania', 'Latvia', 'Estonia') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_eastern_europe_players\nFROM playerinfo\nJOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid\nWHERE overallby = 'Toronto Maple Leafs';"}
{"sample_id": 6979, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' AND T1.TEAM = 'Czech Republic (all)' AND T1.G = 0", "pred_sql": "SELECT playerinfo.playername \nFROM playerinfo \nJOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid \nWHERE seasonstatus.team = 'Avangard Omsk' \nAND seasonstatus.season = '2000-2001' \nAND seasonstatus.g = '0' \nAND seasonstatus.league = 'International';"}
{"sample_id": 6964, "db_id": "ice_hockey_draft", "gold_sql": "SELECT DISTINCT T2.nation FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1997-1998'", "pred_sql": "SELECT DISTINCT playerinfo.nation FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE seasonstatus.season = '1997-1998';"}
{"sample_id": 6980, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.GAMETYPE = 'Regular Season' AND T1.TEAM = 'Avangard Omsk' ORDER BY T2.birthdate ASC LIMIT 1", "pred_sql": "SELECT playername, birthyear, birthmonth, birthday FROM playerinfo JOIN seasonstatus ON playerinfo.eliteid = seasonstatus.eliteid WHERE team = 'Avangard Omsk' AND season = '2000-2001' AND gametype = 'Regular season' ORDER BY birthyear, birthmonth, birthday LIMIT 1;"}
{"sample_id": 6919, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.weight_in_kg FROM PlayerInfo AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id WHERE T1.PlayerName = 'David Bornhammar'", "pred_sql": "SELECT weight_in_kg FROM weight_info JOIN playerinfo ON weight_info.weight_id = playerinfo.weight WHERE playername = 'David Bornhammar';"}
{"sample_id": 6924, "db_id": "ice_hockey_draft", "gold_sql": "SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' )", "pred_sql": "SELECT (h1.height_in_cm - h2.height_in_cm) AS height_difference_cm\nFROM playerinfo p1\nJOIN height_info h1 ON p1.height = h1.height_id\nJOIN playerinfo p2 ON p2.playername = 'Pauli Levokari'\nJOIN height_info h2 ON p2.height = h2.height_id\nWHERE p1.playername = 'David Bornhammar';"}
{"sample_id": 6953, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T3.height_in_cm FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T2.height = T3.height_id WHERE T1.SEASON = '2005-2006' AND T1.TEAM = 'Yale Univ.' AND T1.PIM = 28", "pred_sql": "SELECT h.height_in_cm FROM playerinfo p JOIN seasonstatus s ON p.eliteid = s.eliteid JOIN height_info h ON p.height = h.height_id WHERE p.birthplace = 'Yale University' AND s.pim = '28' AND s.season = '2005-2006';"}
{"sample_id": 6968, "db_id": "ice_hockey_draft", "gold_sql": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND strftime('%Y', T2.birthdate) = '1982'", "pred_sql": "SELECT COUNT(*) FROM playerinfo WHERE birthyear = 1982 AND height IN (SELECT height_id FROM height_info WHERE height_in_cm > '182');"}
{"sample_id": 6932, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.birthplace = 'Edmonton, AB, CAN' ORDER BY T2.height_in_cm DESC LIMIT 1", "pred_sql": "SELECT height_in_cm FROM height_info h JOIN playerinfo p ON h.height_id = p.height WHERE p.birthplace = 'Edmonton, Alberta, Canada' ORDER BY h.height_in_cm DESC LIMIT 1;"}
{"sample_id": 6944, "db_id": "ice_hockey_draft", "gold_sql": "SELECT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.TEAM = 'Chilliwack Chiefs' AND T1.P >= 100", "pred_sql": "SELECT p.playername \nFROM playerinfo p \nJOIN seasonstatus s ON p.eliteid = s.eliteid \nWHERE s.p >= 100 AND s.team = 'Chilliwack Chiefs';"}
{"sample_id": 516, "db_id": "movies_4", "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin'", "pred_sql": "SELECT AVG(revenue) AS average_revenue FROM movie INNER JOIN movie_languages ON movie.movie_id = movie_languages.movie_id INNER JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_name = 'Latin';"}
{"sample_id": 511, "db_id": "movies_4", "gold_sql": "SELECT DISTINCT CASE WHEN T1.movie_status = 'Post Production' THEN 'YES' ELSE 'NO' END AS YORN FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Nederlands'", "pred_sql": "SELECT m.title FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id JOIN country c ON pc.country_id = c.country_id WHERE c.country_name = 'Nederlands' AND m.movie_status = 'Released';"}
{"sample_id": 496, "db_id": "movies_4", "gold_sql": "SELECT T3.genre_name FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T3.genre_id = T2.genre_id WHERE T1.tagline = 'A long time ago in a galaxy far, far away...'", "pred_sql": "SELECT g.genre_name \nFROM movie m \nJOIN movie_genres mg ON m.movie_id = mg.movie_id \nJOIN genre g ON mg.genre_id = g.genre_id \nWHERE m.tagline = 'A long time ago in a galaxy far, far away\u2026';"}
{"sample_id": 455, "db_id": "movies_4", "gold_sql": "SELECT person_id FROM movie_crew WHERE movie_id = 12 AND job = 'Second Film Editor'", "pred_sql": "SELECT mc.person_id \nFROM movie_crew mc \nJOIN department d ON mc.department_id = d.department_id \nWHERE mc.movie_id = '12' AND d.department_name = 'Film Editing' \nORDER BY mc.person_id \nLIMIT 1 OFFSET 1;"}
{"sample_id": 525, "db_id": "movies_4", "gold_sql": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.release_date LIKE '2006%' GROUP BY T3.keyword_name ORDER BY COUNT(T3.keyword_name) DESC LIMIT 1", "pred_sql": "SELECT k.keyword_name, COUNT(k.keyword_name) AS keyword_count\nFROM movie_keywords AS mk\nJOIN keyword AS k ON mk.keyword_id = k.keyword_id\nJOIN movie AS m ON mk.movie_id = m.movie_id\nWHERE strftime('%Y', m.release_date) = '2006'\nGROUP BY k.keyword_name\nORDER BY keyword_count DESC\nLIMIT 1;"}
{"sample_id": 533, "db_id": "movies_4", "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1", "pred_sql": "SELECT m.title\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nGROUP BY m.movie_id\nORDER BY COUNT(mk.keyword_id) DESC\nLIMIT 1;"}
{"sample_id": 503, "db_id": "movies_4", "gold_sql": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'", "pred_sql": "SELECT mc.company_id FROM movie_company mc JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Gladiator';"}
{"sample_id": 441, "db_id": "movies_4", "gold_sql": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1", "pred_sql": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1;"}
{"sample_id": 408, "db_id": "movies_4", "gold_sql": "SELECT T1.company_name FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T3.title = 'Four Rooms'", "pred_sql": "SELECT pc.company_name \nFROM movie m \nJOIN movie_company mc ON m.movie_id = mc.movie_id \nJOIN production_company pc ON mc.company_id = pc.company_id \nWHERE m.title = 'Four Rooms';"}
{"sample_id": 529, "db_id": "movies_4", "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'France'", "pred_sql": "SELECT AVG(revenue) AS average_revenue FROM movie INNER JOIN production_country ON movie.movie_id = production_country.movie_id INNER JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'France';"}
{"sample_id": 562, "db_id": "movies_4", "gold_sql": "SELECT T2.character_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' AND T3.person_name = 'Orlando Bloom'", "pred_sql": "SELECT mc.character_name \nFROM movie_cast mc \nJOIN movie m ON mc.movie_id = m.movie_id \nWHERE m.title = 'Pirates of the Caribbean: The Curse of the Black Pearl' \nAND mc.person_id = (SELECT person_id FROM person WHERE person_name = 'Orlando Bloom');"}
{"sample_id": 536, "db_id": "movies_4", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.person_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Male' THEN T1.person_id ELSE NULL END) FROM movie_cast AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id", "pred_sql": "SELECT AVG(female_count * 1.0 / NULLIF(male_count, 0)) AS average_female_to_male_ratio\nFROM (\n    SELECT movie_id,\n           SUM(CASE WHEN gender_id = 'female' THEN 1 ELSE 0 END) AS female_count,\n           SUM(CASE WHEN gender_id = 'male' THEN 1 ELSE 0 END) AS male_count\n    FROM movie_cast\n    GROUP BY movie_id\n) AS gender_counts;"}
{"sample_id": 544, "db_id": "movies_4", "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title LIKE 'Pirates of the Caribbean: At World%s End' ORDER BY T2.cast_order LIMIT 1", "pred_sql": "SELECT p.person_name FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id JOIN movie m ON mc.movie_id = m.movie_id WHERE m.title = 'Pirates of the Caribbean: At World\\'s End' AND mc.cast_order = '1';"}
{"sample_id": 534, "db_id": "movies_4", "gold_sql": "SELECT T1.department_name FROM department AS T1 INNER JOIN movie_crew AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.department_id) DESC LIMIT 1", "pred_sql": "SELECT department.department_name, COUNT(movie_crew.person_id) AS num_people\nFROM movie_crew\nJOIN department ON movie_crew.department_id = department.department_id\nGROUP BY department.department_name\nORDER BY num_people DESC\nLIMIT 1;"}
{"sample_id": 430, "db_id": "movies_4", "gold_sql": "SELECT COUNT(T2.person_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Amityville Horror' AND T2.job = 'Producer'", "pred_sql": "SELECT COUNT(DISTINCT mc.person_id) AS producer_count\nFROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE m.title = 'The Amityville Horror';"}
{"sample_id": 469, "db_id": "movies_4", "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'", "pred_sql": "SELECT movie.title FROM movie JOIN movie_languages ON movie.movie_id = movie_languages.movie_id JOIN language ON movie_languages.language_id = language.language_id WHERE language.language_name = 'Latin' AND movie.release_date BETWEEN '1990-01-01' AND '1995-12-31';"}
{"sample_id": 524, "db_id": "movies_4", "gold_sql": "SELECT DISTINCT T1.person_name FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T2.character_name LIKE '%captain%'", "pred_sql": "SELECT DISTINCT p.person_name \nFROM person p \nJOIN movie_cast mc ON p.person_id = mc.person_id \nWHERE mc.character_name LIKE '%captain%';"}
{"sample_id": 497, "db_id": "movies_4", "gold_sql": "SELECT T2.COUNTry_id FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title LIKE 'Pirates of the Caribbean: Dead Man%s Chest'", "pred_sql": "SELECT pc.country_id FROM movie m JOIN production_country pc ON m.movie_id = pc.movie_id WHERE m.title = 'Pirates of the Caribbean: Dead Man''s Chest';"}
{"sample_id": 465, "db_id": "movies_4", "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Horror' AND vote_average > 7", "pred_sql": "SELECT m.title FROM movie m JOIN movie_genres mg ON m.movie_id = mg.movie_id JOIN genre g ON mg.genre_id = g.genre_id WHERE g.genre_name = 'Horror' AND m.vote_average > 7;"}
{"sample_id": 499, "db_id": "movies_4", "gold_sql": "SELECT SUM(T1.budget) FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T3.keyword_name = 'video game'", "pred_sql": "SELECT SUM(m.budget) AS total_budget\nFROM movie m\nJOIN movie_keywords mk ON m.movie_id = mk.movie_id\nJOIN keyword k ON mk.keyword_id = k.keyword_id\nWHERE k.keyword_name = 'video game';"}
{"sample_id": 426, "db_id": "movies_4", "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T1.title = 'Land of the Dead' AND T2.job = 'Director'", "pred_sql": "SELECT p.person_name FROM movie_crew mc JOIN person p ON mc.person_id = p.person_id JOIN department d ON mc.department_id = d.department_id WHERE mc.movie_id = (SELECT movie_id FROM movie WHERE title = 'Land of the Dead') AND d.department_name = 'Directing';"}
{"sample_id": 470, "db_id": "movies_4", "gold_sql": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id INNER JOIN COUNTry AS T3 ON T2.COUNTry_id = T3.COUNTry_id WHERE T3.COUNTry_name = 'United States of America' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2006", "pred_sql": "SELECT AVG(revenue) AS average_revenue FROM movie JOIN production_country ON movie.movie_id = production_country.movie_id JOIN country ON production_country.country_id = country.country_id WHERE country.country_name = 'United States' AND strftime('%Y', movie.release_date) = '2006';"}
{"sample_id": 527, "db_id": "movies_4", "gold_sql": "SELECT T2.genre_name FROM movie_genres AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.genre_id GROUP BY T2.genre_id ORDER BY COUNT(T1.movie_id) LIMIT 2, 1", "pred_sql": "SELECT genre.genre_name FROM genre JOIN movie_genres ON genre.genre_id = movie_genres.genre_id GROUP BY genre.genre_id ORDER BY COUNT(movie_genres.movie_id) ASC LIMIT 1 OFFSET 2;"}
{"sample_id": 552, "db_id": "movies_4", "gold_sql": "SELECT CAST((SUM(CASE WHEN T1.keyword_name = 'woman director' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.keyword_name = 'independent film' THEN 1 ELSE 0 END) FROM keyword AS T1 INNER JOIN movie_keywords AS T2 ON T1.keyword_id = T2.keyword_id", "pred_sql": "SELECT (COUNT(CASE WHEN kw.keyword_name = 'woman director' THEN 1 END) * 100.0 / COUNT(*)) - (COUNT(CASE WHEN kw.keyword_name = 'independent film' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_difference\nFROM movie_keywords AS mk\nJOIN keyword AS kw ON mk.keyword_id = kw.keyword_id\nJOIN movie AS m ON mk.movie_id = m.movie_id;"}
{"sample_id": 554, "db_id": "movies_4", "gold_sql": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(STRFTIME('%Y', T1.release_date) AS INT) = 2000", "pred_sql": "SELECT COUNT(*) AS adventure_movie_count FROM movie INNER JOIN movie_genres ON movie.movie_id = movie_genres.movie_id INNER JOIN genre ON movie_genres.genre_id = genre.genre_id WHERE genre.genre_name = 'Adventure' AND strftime('%Y', movie.release_date) = '2000';"}
{"sample_id": 513, "db_id": "movies_4", "gold_sql": "SELECT DISTINCT T1.homepage FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Bahasa indonesia'", "pred_sql": "SELECT m.homepage \nFROM movie m \nJOIN movie_languages ml ON m.movie_id = ml.movie_id \nJOIN language l ON ml.language_id = l.language_id \nWHERE l.language_name = 'Bahasa Indonesia';"}
{"sample_id": 531, "db_id": "movies_4", "gold_sql": "SELECT T3.person_name FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T2.job = 'Director' ORDER BY T1.popularity DESC LIMIT 5", "pred_sql": "SELECT p.person_name, COUNT(m.movie_id) AS movie_count \nFROM person p \nJOIN movie_crew mc ON p.person_id = mc.person_id \nWHERE mc.job = 'Director' \nGROUP BY p.person_id \nORDER BY movie_count DESC \nLIMIT 5;"}
{"sample_id": 521, "db_id": "movies_4", "gold_sql": "SELECT COUNTry_iso_code FROM COUNTry WHERE COUNTry_name = 'Kyrgyz Republic'", "pred_sql": "SELECT country_iso_code FROM country WHERE country_name = 'Kyrgyz Republic';"}
{"sample_id": 420, "db_id": "movies_4", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'", "pred_sql": "SELECT (COUNT(CASE WHEN m.vote_average > 5.0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM movie m JOIN movie_crew mc ON m.movie_id = mc.movie_id JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Dariusz Wolski' AND mc.job = 'Director of Photography';"}
{"sample_id": 551, "db_id": "movies_4", "gold_sql": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100", "pred_sql": "SELECT pc.company_name \nFROM movie m \nJOIN movie_company mc ON m.movie_id = mc.movie_id \nJOIN production_company pc ON mc.company_id = pc.company_id \nWHERE m.release_date LIKE '2016%' \nAND m.runtime > (SELECT AVG(runtime) * 0.35 FROM movie WHERE release_date LIKE '2016%');"}
{"sample_id": 459, "db_id": "movies_4", "gold_sql": "SELECT COUNT(T2.movie_id) FROM person AS T1 INNER JOIN movie_cast AS T2 ON T1.person_id = T2.person_id WHERE T1.person_name = 'Bob Peterson'", "pred_sql": "SELECT COUNT(*) AS appearance_count FROM movie_cast mc JOIN person p ON mc.person_id = p.person_id WHERE p.person_name = 'Bob Peterson';"}
{"sample_id": 462, "db_id": "movies_4", "gold_sql": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jim Carrey'", "pred_sql": "SELECT movie.title FROM movie JOIN movie_cast ON movie.movie_id = movie_cast.movie_id JOIN person ON movie_cast.person_id = person.person_id WHERE person.person_name = 'Jim Carrey';"}
{"sample_id": 506, "db_id": "movies_4", "gold_sql": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Warner Bros. Pictures' ORDER BY T3.revenue DESC LIMIT 1", "pred_sql": "SELECT m.title FROM movie m\nJOIN movie_company mc ON m.movie_id = mc.movie_id\nJOIN production_company pc ON mc.company_id = pc.company_id\nWHERE pc.company_name = 'Warner Bros. Pictures'\nORDER BY m.revenue DESC\nLIMIT 1;"}
{"sample_id": 10136, "db_id": "codebase_community", "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'", "pred_sql": "SELECT * FROM comments WHERE userid = (SELECT id FROM users WHERE displayname = 'Harvey Motulsky')"}
{"sample_id": 10020, "db_id": "codebase_community", "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'", "pred_sql": "SELECT (SUM(CASE WHEN strftime('%Y', date) = '2011' THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN strftime('%Y', date) IN ('2010', '2011') THEN 1 ELSE 0 END), 0)) - 100) AS percentage_difference\nFROM badges;"}
{"sample_id": 9994, "db_id": "codebase_community", "gold_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'", "pred_sql": "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';"}
{"sample_id": 10067, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60", "pred_sql": "SELECT COUNT(*) AS negative_comment_count FROM comments WHERE userid = 13 AND score < 60;"}
{"sample_id": 10062, "db_id": "codebase_community", "gold_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId", "pred_sql": "SELECT (SELECT SUM(viewcount) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Mornington')) - (SELECT SUM(viewcount) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Amos')) AS view_count_difference;"}
{"sample_id": 10106, "db_id": "codebase_community", "gold_sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users)) AS teenage_percentage FROM users WHERE age BETWEEN 13 AND 18;"}
{"sample_id": 10050, "db_id": "codebase_community", "gold_sql": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )", "pred_sql": "SELECT displayname, views FROM users ORDER BY views DESC LIMIT 10;"}
{"sample_id": 10122, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30", "pred_sql": "SELECT COUNT(*) AS number_of_posts FROM votes WHERE bountyamount > 30;"}
{"sample_id": 10009, "db_id": "codebase_community", "gold_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text", "pred_sql": "SELECT p.title, p.commentcount, AVG(p.viewcount) AS average_view_count\nFROM posts p\nJOIN tags t ON p.id = t.excerptpostid\nWHERE t.tagname = 'humor'\nGROUP BY p.title, p.commentcount;"}
{"sample_id": 10034, "db_id": "codebase_community", "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'", "pred_sql": "SELECT badges.name FROM badges JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';"}
{"sample_id": 9973, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "pred_sql": "SELECT COUNT(*) AS badge_count FROM badges WHERE userid = 'csgillespie';"}
{"sample_id": 10100, "db_id": "codebase_community", "gold_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1", "pred_sql": "SELECT id, title FROM posts WHERE ownerdisplayname = 'Harvey Motulsky' ORDER BY viewcount DESC LIMIT 1;"}
{"sample_id": 9972, "db_id": "codebase_community", "gold_sql": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )", "pred_sql": "SELECT p.body FROM posts p JOIN tags t ON t.excerptpostid = p.id ORDER BY t.count DESC LIMIT 1;"}
{"sample_id": 9995, "db_id": "codebase_community", "gold_sql": "SELECT Text FROM comments WHERE Score = 17", "pred_sql": "SELECT * FROM comments WHERE score = 17;"}
{"sample_id": 10069, "db_id": "codebase_community", "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'", "pred_sql": "SELECT name FROM badges WHERE userid IN (SELECT id FROM users WHERE location = 'North Pole') AND date LIKE '2011%';"}
{"sample_id": 10091, "db_id": "codebase_community", "gold_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1", "pred_sql": "SELECT MIN(creationdate) AS first_vote_date\nFROM votes\nWHERE userid = (SELECT id FROM users WHERE displayname = 'chl')"}
{"sample_id": 10075, "db_id": "codebase_community", "gold_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )", "pred_sql": "SELECT ownerdisplayname FROM posts ORDER BY viewcount DESC LIMIT 1;"}
{"sample_id": 10099, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'", "pred_sql": "SELECT COUNT(*) AS post_count FROM posts WHERE ownerdisplayname = 'Jay Stevens' AND strftime('%Y', creaiondate) = '2010';"}
{"sample_id": 10066, "db_id": "codebase_community", "gold_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'", "pred_sql": "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images';"}
{"sample_id": 10021, "db_id": "codebase_community", "gold_sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720", "pred_sql": "SELECT DISTINCT posthistorytypeid, COUNT(DISTINCT userid) AS unique_user_count FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;"}
{"sample_id": 9998, "db_id": "codebase_community", "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'", "pred_sql": "SELECT userdisplayname FROM comments WHERE text = 'thank you user93!';"}
{"sample_id": 10026, "db_id": "codebase_community", "gold_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId", "pred_sql": "SELECT AVG(u.upvotes) AS average_upvotes, AVG(u.age) AS average_age\nFROM users u\nJOIN posts p ON u.id = p.owneruserid\nGROUP BY u.id\nHAVING COUNT(p.id) > 10;"}
{"sample_id": 9960, "db_id": "codebase_community", "gold_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "pred_sql": "SELECT title FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie')"}
{"sample_id": 10005, "db_id": "codebase_community", "gold_sql": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl", "pred_sql": "SELECT SUM(posts.score) AS total_score, users.websiteurl FROM posts JOIN users ON posts.lasteditoruserid = users.id WHERE users.displayname = 'Yevgeny' GROUP BY users.websiteurl;"}
{"sample_id": 9967, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL", "pred_sql": "SELECT COUNT(*) AS root_post_count FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL;"}
{"sample_id": 10093, "db_id": "codebase_community", "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.\"Name\" = 'Autobiographer' ORDER BY T2.Date LIMIT 1", "pred_sql": "SELECT users.displayname FROM badges JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer' ORDER BY badges.date ASC LIMIT 1;"}
{"sample_id": 10002, "db_id": "codebase_community", "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10", "pred_sql": "SELECT users.displayname FROM users JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer' LIMIT 10;"}
{"sample_id": 10128, "db_id": "codebase_community", "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'", "pred_sql": "SELECT comments.text FROM comments JOIN posts ON comments.postid = posts.id WHERE posts.body LIKE '%linear regression%';"}
{"sample_id": 10024, "db_id": "codebase_community", "gold_sql": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )", "pred_sql": "SELECT posts.id AS post_id, posts.owneruserid AS user_id FROM posts WHERE posts.score > 60;"}
{"sample_id": 9953, "db_id": "codebase_community", "gold_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )", "pred_sql": "SELECT displayname, reputation FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY reputation DESC LIMIT 1;"}
{"sample_id": 10096, "db_id": "codebase_community", "gold_sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )", "pred_sql": "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1;"}
{"sample_id": 10058, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60", "pred_sql": "SELECT COUNT(comments.id) AS negative_comment_count\nFROM comments\nJOIN users ON comments.userid = users.id\nJOIN posts ON comments.postid = posts.id\nWHERE users.displayname = 'Neil McGuigan' AND comments.score < 60;"}
{"sample_id": 9984, "db_id": "codebase_community", "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910", "pred_sql": "SELECT COUNT(*) AS comment_count FROM comments WHERE postid = (SELECT id FROM posts WHERE viewcount = 1910)"}
{"sample_id": 10138, "db_id": "codebase_community", "gold_sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10", "pred_sql": "SELECT (COUNT(CASE WHEN u.upvotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_users_with_zero_upvotes\nFROM comments c\nJOIN users u ON c.userid = u.id\nWHERE c.score BETWEEN 5 AND 10;"}
{"sample_id": 10082, "db_id": "codebase_community", "gold_sql": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )", "pred_sql": "SELECT owneruserid FROM posts ORDER BY favoritecount DESC LIMIT 1;"}
{"sample_id": 10022, "db_id": "codebase_community", "gold_sql": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217", "pred_sql": "SELECT p.id, p.title, p.viewcount, p.favoritecount, p.score FROM postlinks pl JOIN posts p ON pl.relatedpostid = p.id WHERE pl.postid = '61217';"}
{"sample_id": 9974, "db_id": "codebase_community", "gold_sql": "SELECT T1.\"Name\" FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'", "pred_sql": "SELECT name FROM badges WHERE userid = (SELECT id FROM users WHERE displayname = 'csgillespie')"}
{"sample_id": 10046, "db_id": "codebase_community", "gold_sql": "SELECT DisplayName FROM users WHERE Id = 30", "pred_sql": "SELECT displayname FROM users WHERE id = 30;"}
{"sample_id": 10692, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL", "pred_sql": "SELECT COUNT(*) AS female_patients_without_symptoms\nFROM patient p\nJOIN examination e ON p.id = e.id\nWHERE p.sex = 'F' AND e.sc170 = '-' AND e.symptoms IS NULL;"}
{"sample_id": 10698, "db_id": "thrombosis_prediction", "gold_sql": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8", "pred_sql": "SELECT DISTINCT e.diagnosis FROM examination e JOIN laboratory l ON e.id = l.id WHERE l.dna >= 8;"}
{"sample_id": 10730, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL", "pred_sql": "SELECT COUNT(*) AS normal_platelet_count FROM patient p JOIN examination e ON p.id = e.id WHERE e.plt BETWEEN 100 AND 400 AND e.symptoms IS NOT NULL;"}
{"sample_id": 10727, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS normal_wbc_patients\nFROM patient p\nJOIN examination e ON p.id = e.id\nWHERE p.admission = '+' AND e.wbc > 3.5 AND e.wbc < 9.0;"}
{"sample_id": 10607, "db_id": "thrombosis_prediction", "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'", "pred_sql": "SELECT (l2.t-cho - l1.t-cho) / l1.t-cho * 100 AS decrease_rate\nFROM laboratory l1\nJOIN patient p ON l1.id = p.id\nJOIN laboratory l2 ON l1.id = l2.id\nWHERE p.birthday = 19590218 AND l1.date = '8111' AND l2.date = '8112';"}
{"sample_id": 10601, "db_id": "thrombosis_prediction", "gold_sql": "SELECT \"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND \"Examination Date\" = '1993-11-12'", "pred_sql": "SELECT `acl igg`, `acl igm`, `acl iga` FROM examination e JOIN patient p ON e.id = p.id WHERE p.diagnosis = 'SLE' AND p.first date = '1994-02-19' AND e.examination date = '1993-11-12';"}
{"sample_id": 10715, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1", "pred_sql": "SELECT MAX(ana) AS highest_ana_concentration FROM examination e JOIN laboratory l ON e.id = l.id WHERE l.cre < 1.5;"}
{"sample_id": 10688, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1", "pred_sql": "SELECT p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE l.rnp = '+' ORDER BY p.birthday DESC LIMIT 1;"}
{"sample_id": 10699, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS normal_patients_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nWHERE e.dna < 8 AND (p.description IS NULL OR p.description = '')"}
{"sample_id": 10640, "db_id": "thrombosis_prediction", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'", "pred_sql": "SELECT (COUNT(CASE WHEN p.sex = 'F' AND l.ua > 8.0 THEN 1 END) * 100.0 / COUNT(*)) AS female_ua_percentage FROM patient p JOIN laboratory l ON p.id = l.id;"}
{"sample_id": 10719, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.\"T-CHO\" >= 250 AND T3.KCT = '-'", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nJOIN examination e ON p.id = e.id\nWHERE l.t-cho > 250 AND (e.kct = '-' OR e.rvvt = '-' OR e.lac = '-')"}
{"sample_id": 10579, "db_id": "thrombosis_prediction", "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2", "pred_sql": "SELECT patient.id, patient.sex, patient.diagnosis FROM patient JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 2;"}
{"sample_id": 10711, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5", "pred_sql": "SELECT COUNT(*) AS normal_total_protein_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nJOIN laboratory l ON p.id = l.id\nWHERE p.diagnosis = 'SJS' AND l.tp > 6.0 AND l.tp < 8.5;"}
{"sample_id": 10591, "db_id": "thrombosis_prediction", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID", "pred_sql": "SELECT SUM(CASE WHEN p.sex = 'M' THEN 1 ELSE 0 END) AS male_count, SUM(CASE WHEN p.sex = 'F' THEN 1 ELSE 0 END) AS female_count, (SUM(CASE WHEN p.sex = 'M' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN p.sex = 'F' THEN 1 ELSE 0 END), 0)) AS male_to_female_ratio\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE l.ua > 8.0;"}
{"sample_id": 10681, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'", "pred_sql": "SELECT DISTINCT p.diagnosis FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.birthday > '1985-01-01' AND l.rf < 20;"}
{"sample_id": 10626, "db_id": "thrombosis_prediction", "gold_sql": "SELECT STRFTIME('%d', T3.\"Examination Date\") - STRFTIME('%d', T1.\"First Date\") FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298", "pred_sql": "SELECT (examination.examination_date - patient.first_date) AS days_until_evaluation FROM patient JOIN examination ON patient.id = examination.id WHERE patient.id = 821298;"}
{"sample_id": 10651, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50", "pred_sql": "SELECT COUNT(*) AS patient_count \nFROM patient \nWHERE (strftime('%Y', 'now') - birthday) > 50 \nAND id IN (\n    SELECT id \n    FROM laboratory \n    WHERE tg > 200\n);"}
{"sample_id": 10632, "db_id": "thrombosis_prediction", "gold_sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500", "pred_sql": "SELECT AVG(ldh) AS average_ldh FROM laboratory WHERE ldh < 500;"}
{"sample_id": 10644, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'", "pred_sql": "SELECT COUNT(*) AS male_patients_out_of_range FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.sex = 'M' AND l.cre > 1.5;"}
{"sample_id": 10709, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'", "pred_sql": "SELECT COUNT(*) AS normal_alkaliphophatase_count \nFROM patient p \nJOIN laboratory l ON p.id = l.id \nWHERE p.admission = '-' \nAND l.alp < 300;"}
{"sample_id": 10680, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE l.rf < 20 AND l.pt < 14;"}
{"sample_id": 10620, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'", "pred_sql": "SELECT COUNT(*) AS female_patient_count FROM patient WHERE sex = 'F' AND diagnosis = 'APS';"}
{"sample_id": 10571, "db_id": "thrombosis_prediction", "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'", "pred_sql": "SELECT CASE WHEN COUNT(CASE WHEN admission = '+' AND sex = 'M' THEN 1 END) > COUNT(CASE WHEN admission = '-' AND sex = 'M' THEN 1 END) THEN 'In-patient' ELSE 'Outpatient' END AS more_male,\n       ABS((COUNT(CASE WHEN admission = '+' AND sex = 'M' THEN 1 END) - COUNT(CASE WHEN admission = '-' AND sex = 'M' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN admission = '-' AND sex = 'M' THEN 1 END), 0)) AS percentage_deviation\nFROM patient;"}
{"sample_id": 10574, "db_id": "thrombosis_prediction", "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'", "pred_sql": "SELECT COUNT(CASE WHEN admission = '+' THEN 1 END) AS inpatient_count, COUNT(CASE WHEN admission = '-' THEN 1 END) AS outpatient_count, (COUNT(CASE WHEN admission = '-') * 1.0 / NULLIF(COUNT(CASE WHEN admission = '+' THEN 1 END), 0)) AS ratio FROM patient WHERE diagnosis = 'SLE';"}
{"sample_id": 10690, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3", "pred_sql": "SELECT p.id FROM patient p JOIN examination e ON p.id = e.id WHERE e.sm = '+' ORDER BY p.birthday DESC LIMIT 3;"}
{"sample_id": 10635, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'", "pred_sql": "SELECT p.id, l.alp FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.birthday = 19820401;"}
{"sample_id": 10596, "db_id": "thrombosis_prediction", "gold_sql": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'", "pred_sql": "SELECT AVG(1999 - birthday) AS average_age FROM patient WHERE id IN (SELECT id FROM laboratory WHERE date BETWEEN '19911001' AND '19911031')"}
{"sample_id": 10661, "db_id": "thrombosis_prediction", "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )", "pred_sql": "SELECT p.id, (strftime('%Y', 'now') - strftime('%Y', p.birthday)) AS age\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE l.hct > 52\nGROUP BY p.id\nHAVING COUNT(l.id) >= 2;"}
{"sample_id": 10725, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1", "pred_sql": "SELECT birthday FROM patient WHERE id = (SELECT id FROM laboratory WHERE glu >= 180 ORDER BY date ASC LIMIT 1) ORDER BY birthday ASC LIMIT 1;"}
{"sample_id": 10733, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nWHERE e.thrombosis = 2 AND e.pt < 14;"}
{"sample_id": 10684, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.\"ANA Pattern\" = 'P'", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN examination e ON p.id = e.id\nJOIN laboratory l ON p.id = l.id\nWHERE l.c3 > 35 AND e.ana_pattern = 'P';"}
{"sample_id": 10670, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS patient_count\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE p.birthday > '1980-01-01' AND (l.fg < 150 OR l.fg > 450);"}
{"sample_id": 10634, "db_id": "thrombosis_prediction", "gold_sql": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300", "pred_sql": "SELECT p.admission, COUNT(*) AS patient_count\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE l.alp < 300\nGROUP BY p.admission;"}
{"sample_id": 10594, "db_id": "thrombosis_prediction", "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.\"T-BIL\" >= 2.0 AND T1.SEX = 'M'", "pred_sql": "SELECT COUNT(DISTINCT p.id) AS male_patients_with_elevated_bilirubin\nFROM patient p\nJOIN laboratory l ON p.id = l.id\nWHERE p.sex = 'M' AND l.t-bil > 2.0;"}
{"sample_id": 3599, "db_id": "authors", "gold_sql": "SELECT ShortName, HomePage FROM Conference WHERE FullName LIKE 'International Conference on Artificial Intelligence%'", "pred_sql": "SELECT conference.shortname, conference.homepage FROM conference JOIN paper ON conference.id = paper.conferenceid WHERE paper.keyword LIKE '%artificial intelligence%';"}
{"sample_id": 3589, "db_id": "authors", "gold_sql": "SELECT COUNT(T1.JournalId) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Iet Software/iee Proceedings - Software'", "pred_sql": "SELECT COUNT(*) FROM paper WHERE journalid IN (SELECT id FROM journal WHERE fullname = 'Iet Software/iee Proceedings - Software')"}
{"sample_id": 3582, "db_id": "authors", "gold_sql": "SELECT CAST((SUM(CASE WHEN T1.Affiliation LIKE '%INFN%' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T2.Id) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title LIKE '%Charged particle multiplicity%'", "pred_sql": "SELECT (COUNT(CASE WHEN a.affiliation = 'INFN' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM paperauthor pa\nJOIN paper p ON pa.paperid = p.id\nJOIN author a ON pa.authorid = a.id\nWHERE p.title LIKE '%Charged particle multiplicity%';"}
{"sample_id": 3609, "db_id": "authors", "gold_sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Title = 'Extended Fuzzy Regression Models'", "pred_sql": "SELECT conference.fullname FROM paper JOIN conference ON paper.conferenceid = conference.id WHERE paper.title = 'Extended Fuzzy Regression Models';"}
{"sample_id": 3658, "db_id": "authors", "gold_sql": "SELECT SUM(CASE WHEN Year = 2005 THEN 1 ELSE 0 END) , SUM(CASE WHEN year = 2005 THEN 1 ELSE 0 END) - SUM(CASE WHEN year = 2004 THEN 1 ELSE 0 END) AS diff FROM Paper", "pred_sql": "SELECT (SELECT COUNT(*) FROM paper WHERE year = '2005') - (SELECT COUNT(*) FROM paper WHERE year = '2004') AS difference;"}
{"sample_id": 3603, "db_id": "authors", "gold_sql": "SELECT T1.Title, T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Keyword LIKE '%optical properties%' AND T1.Year BETWEEN 2000 AND 2005 AND T1.Title <> ''", "pred_sql": "SELECT paper.title, paperauthor.name \nFROM paper \nJOIN paperauthor ON paper.id = paperauthor.paperid \nWHERE paper.year BETWEEN '2000' AND '2005' \nAND paper.keyword LIKE '%optical properties%';"}
{"sample_id": 3559, "db_id": "authors", "gold_sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Id > 100 AND T1.Id < 106", "pred_sql": "SELECT name FROM paperauthor WHERE paperid BETWEEN 101 AND 105;"}
{"sample_id": 3615, "db_id": "authors", "gold_sql": "SELECT DISTINCT T1.Title FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T2.FullName = 'Theoretical Computer Science' AND T1.Year = 2003 AND T1.Title <> ''", "pred_sql": "SELECT paper.* FROM paper JOIN journal ON paper.journalid = journal.id WHERE journal.fullname = 'Theoretical Computer Science' AND paper.year = '2003';"}
{"sample_id": 3555, "db_id": "authors", "gold_sql": "SELECT T2.title, T3.name, T1.FullName FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.id = T2.ConferenceId INNER JOIN PaperAuthor AS T3 ON T1.id = T3.PaperId WHERE T1.ShortName = 'MICRO' AND T2.Year BETWEEN '1971' AND '1980'", "pred_sql": "WITH published_papers AS (\n    SELECT p.title, pa.name AS author_name, p.year\n    FROM paper p\n    JOIN paperauthor pa ON p.id = pa.paperid\n    JOIN conference c ON p.conferenceid = c.id\n    WHERE c.shortname = 'MICRO' AND p.year BETWEEN '1971' AND '1980'\n),\ncount_1991_2000 AS (\n    SELECT COUNT(*) AS count\n    FROM paper p\n    JOIN conference c ON p.conferenceid = c.id\n    WHERE c.shortname = 'MICRO' AND p.year BETWEEN '1991' AND '2000'\n),\naverage_needed AS (\n    SELECT (count / 10.0) AS average_needed\n    FROM count_1991_2000\n)\nSELECT pp.title, pp.author_name, an.average_needed\nFROM published_papers pp, average_needed an;"}
{"sample_id": 3673, "db_id": "authors", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'Turbulent Fluids' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.FullName = 'Physics of Fluids' THEN 1 ELSE 0 END) FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id", "pred_sql": "SELECT (COUNT(CASE WHEN j.fullname = 'Physics of Fluids' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM paper p JOIN journal j ON p.journalid = j.id WHERE p.keyword LIKE '%Turbulent Fluids%';"}
{"sample_id": 3622, "db_id": "authors", "gold_sql": "SELECT ShortName FROM Journal WHERE FullName = 'Software - Concepts and Tools / Structured Programming'", "pred_sql": "SELECT shortname FROM conference WHERE fullname = 'Software - Concepts and Tools / Structured Programming';"}
{"sample_id": 3524, "db_id": "authors", "gold_sql": "SELECT COUNT(Id) FROM Journal WHERE FullName LIKE '%computing%'", "pred_sql": "SELECT COUNT(*) FROM journal WHERE fullname LIKE '%computing%';"}
{"sample_id": 3577, "db_id": "authors", "gold_sql": "SELECT T2.FullName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Year = 2001 AND T1.ConferenceId > 0 AND T1.JournalId > 0", "pred_sql": "SELECT DISTINCT journal.fullname FROM journal JOIN paper ON journal.id = paper.journalid WHERE paper.year = '2001';"}
{"sample_id": 3519, "db_id": "authors", "gold_sql": "SELECT T1.Name FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' AND T1.Affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan'", "pred_sql": "SELECT a.name \nFROM author a \nJOIN paperauthor pa ON a.id = pa.authorid \nJOIN paper p ON pa.paperid = p.id \nWHERE p.title = 'Incremental Extraction of Keyterms for Classifying Multilingual Documents in the Web' \nAND pa.affiliation = 'National Taiwan University Department of Computer Science and Information Engineering Taiwan';"}
{"sample_id": 3553, "db_id": "authors", "gold_sql": "SELECT SUM(CASE WHEN T2.Year = 2000 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Year = 2010 THEN 1 ELSE 0 END) AS DIFF FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.ShortName = 'IWC'", "pred_sql": "SELECT (SELECT COUNT(*) FROM paper p JOIN journal j ON p.journalid = j.id WHERE j.shortname = 'IWC' AND p.year = '2000') - (SELECT COUNT(*) FROM paper p JOIN journal j ON p.journalid = j.id WHERE j.shortname = 'IWC' AND p.year = '2010') AS difference;"}
{"sample_id": 3527, "db_id": "authors", "gold_sql": "SELECT AuthorId FROM PaperAuthor WHERE Name = 'Peter'", "pred_sql": "SELECT id FROM author WHERE name = 'Peter';"}
{"sample_id": 3678, "db_id": "authors", "gold_sql": "SELECT T1.Year, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Barrasa'", "pred_sql": "SELECT paper.year, paper.title FROM paper JOIN paperauthor ON paper.id = paperauthor.paperid JOIN author ON paperauthor.authorid = author.id WHERE author.name = 'Barrasa';"}
{"sample_id": 3646, "db_id": "authors", "gold_sql": "SELECT T2.ShortName FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = 'A Case of Unilateral Ashy Dermatosis'", "pred_sql": "SELECT journal.shortname FROM journal JOIN paper ON journal.id = paper.journalid WHERE paper.title = 'A Case of Unilateral Ashy Dermatosis';"}
{"sample_id": 3656, "db_id": "authors", "gold_sql": "SELECT COUNT(Id) FROM Paper WHERE Year = 0 OR (ConferenceId = 0 AND JournalId = 0)", "pred_sql": "SELECT COUNT(*) AS preprint_count FROM paper WHERE conferenceid = '0' AND journalid = '0';"}
{"sample_id": 3647, "db_id": "authors", "gold_sql": "SELECT T1.Affiliation FROM PaperAuthor AS T1 INNER JOIN Author AS T2 ON T1.AuthorId = T2.Id WHERE T2.Name = 'Mark A. Musen'", "pred_sql": "SELECT DISTINCT affiliation FROM author WHERE name = 'Mark A. Musen' UNION SELECT DISTINCT affiliation FROM paperauthor WHERE name = 'Mark A. Musen';"}
{"sample_id": 3554, "db_id": "authors", "gold_sql": "SELECT DISTINCT T2.JournalId, T1.ShortName, T1.FullName FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Year = 2013 AND T2.JournalId != 0 AND T2.JournalId != -1 LIMIT 4", "pred_sql": "SELECT journal.id, journal.shortname, journal.fullname FROM journal JOIN paper ON journal.id = paper.journalid WHERE paper.year = '2013' LIMIT 4;"}
{"sample_id": 3561, "db_id": "authors", "gold_sql": "SELECT T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id WHERE T1.Title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results'", "pred_sql": "SELECT j.homepage FROM journal j JOIN paper p ON j.id = p.journalid WHERE p.title = '364: Induction of Mixed Chimerism and Transplantation Tolerance in a Non-Human Primate Lung Allograft Model: Early Results';"}
{"sample_id": 3518, "db_id": "authors", "gold_sql": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Klaus Zimmermann'", "pred_sql": "SELECT paper.title FROM paper JOIN paperauthor ON paper.id = paperauthor.paperid JOIN author ON paperauthor.authorid = author.id WHERE author.name = 'Klaus Zimmermann';"}
{"sample_id": 3605, "db_id": "authors", "gold_sql": "SELECT DISTINCT T2.Name, T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId = 0 AND T1.Year = 1997 AND T1.Title <> ''", "pred_sql": "SELECT paper.title, paperauthor.name \nFROM paper \nJOIN paperauthor ON paper.id = paperauthor.paperid \nWHERE paper.year = '0' AND paper.year = '1997';"}
{"sample_id": 3624, "db_id": "authors", "gold_sql": "SELECT COUNT(T2.Id) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Nuclear Science' AND T2.Year = 1999", "pred_sql": "SELECT COUNT(*) AS number_of_papers FROM paper p JOIN journal j ON p.journalid = j.id WHERE j.fullname = 'IEEE Transactions on Nuclear Science' AND p.year = '1999';"}
{"sample_id": 3598, "db_id": "authors", "gold_sql": "SELECT Name FROM Author WHERE Affiliation = 'University of Oxford' ORDER BY Name ASC", "pred_sql": "SELECT name FROM author WHERE affiliation = 'University of Oxford' ORDER BY name ASC;"}
{"sample_id": 3571, "db_id": "authors", "gold_sql": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 0", "pred_sql": "SELECT DISTINCT a.name \nFROM author a \nJOIN paperauthor pa ON a.id = pa.authorid \nJOIN paper p ON pa.paperid = p.id \nWHERE p.year = '0' AND p.conferenceid = '0' AND p.journalid = '0';"}
{"sample_id": 3654, "db_id": "authors", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.Keyword = 'cancer' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id), T2.Name, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId", "pred_sql": "SELECT a.name, a.affiliation, COUNT(p.id) AS paper_count, (SELECT COUNT(*) FROM paper) AS total_papers, (COUNT(p.id) * 1.0 / (SELECT COUNT(*) FROM paper)) AS proportion FROM author a JOIN paperauthor pa ON a.id = pa.authorid JOIN paper p ON pa.paperid = p.id WHERE p.keyword LIKE '%cancer%' GROUP BY a.id, a.name, a.affiliation;"}
{"sample_id": 3625, "db_id": "authors", "gold_sql": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND T2.Year = 2011 AND T2.Title <> ''", "pred_sql": "SELECT paper.title FROM paper JOIN journal ON paper.journalid = journal.id WHERE journal.fullname = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND paper.year = '2011';"}
{"sample_id": 3671, "db_id": "authors", "gold_sql": "SELECT CAST(COUNT(T2.JournalId) AS REAL) / COUNT(DISTINCT T2.Year) FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'Information Sciences'", "pred_sql": "SELECT AVG(paper_count) AS average_papers_per_year\nFROM (\n    SELECT COUNT(p.id) AS paper_count, p.year\n    FROM paper p\n    JOIN journal j ON p.journalid = j.id\n    WHERE j.fullname = 'Information Sciences' AND p.year != '0'\n    GROUP BY p.year\n) AS yearly_paper_counts;"}
{"sample_id": 3608, "db_id": "authors", "gold_sql": "SELECT COUNT(DISTINCT T2.Name) FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Subcellular localization of nuclease in barley aleurone'", "pred_sql": "SELECT COUNT(DISTINCT pa.authorid) AS author_count \nFROM paper p \nJOIN paperauthor pa ON p.id = pa.paperid \nWHERE p.title = 'Subcellular localization of nuclease in barley aleurone';"}
{"sample_id": 3652, "db_id": "authors", "gold_sql": "SELECT DISTINCT T2.FullName FROM Paper AS T1 INNER JOIN Conference AS T2 ON T1.ConferenceId = T2.Id WHERE T1.Year = 2008", "pred_sql": "SELECT DISTINCT conference.fullname \nFROM conference \nJOIN paper ON conference.id = paper.conferenceid \nWHERE paper.year = '2008';"}
{"sample_id": 3512, "db_id": "authors", "gold_sql": "SELECT T1.HomePage FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Area Effects in Cepaea'", "pred_sql": "SELECT journal.homepage FROM paper JOIN journal ON paper.journalid = journal.id WHERE paper.title = 'Area Effects in Cepaea';"}
{"sample_id": 3535, "db_id": "authors", "gold_sql": "SELECT DISTINCT T1.Title, T2.AuthorId FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 2006 AND T1.ConferenceId < 100", "pred_sql": "SELECT paper.title, paperauthor.authorid FROM paper JOIN paperauthor ON paper.id = paperauthor.paperid WHERE paper.conferenceid < 100 AND paper.year = '2006';"}
{"sample_id": 3515, "db_id": "authors", "gold_sql": "SELECT COUNT(T1.AuthorId) FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T2.Title = 'Equation Solving in Geometrical Theories'", "pred_sql": "SELECT COUNT(DISTINCT paperauthor.authorid) AS author_count \nFROM paperauthor \nJOIN paper ON paperauthor.paperid = paper.id \nWHERE paper.title = 'Equation Solving in Geometrical Theories';"}
{"sample_id": 3592, "db_id": "authors", "gold_sql": "SELECT T1.Title FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Cheng Huang' AND T2.Affiliation = 'Microsoft'", "pred_sql": "SELECT paper.title FROM paper JOIN paperauthor ON paper.id = paperauthor.paperid JOIN author ON paperauthor.authorid = author.id WHERE author.name = 'Cheng Huang' AND author.affiliation = 'Microsoft';"}
{"sample_id": 2937, "db_id": "professional_basketball", "gold_sql": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 AND T1.year = 1997 ORDER BY T1.rebounds DESC LIMIT 1", "pred_sql": "SELECT t.name, SUM(pt.rebounds) AS total_rebounds \nFROM teams t \nJOIN players_teams pt ON t.tmid = pt.tmid AND t.year = pt.year \nWHERE t.playoff IS NULL AND t.year = '1997' \nGROUP BY t.name \nORDER BY total_rebounds DESC \nLIMIT 1;"}
{"sample_id": 2910, "db_id": "professional_basketball", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.award = 'All-Defensive Second Team' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Auburn'", "pred_sql": "SELECT (COUNT(DISTINCT p.playerid) * 100.0 / (SELECT COUNT(DISTINCT playerid) FROM players WHERE college = 'Auburn')) AS percentage\nFROM awards_players ap\nJOIN players p ON ap.playerid = p.playerid\nWHERE p.college = 'Auburn' AND ap.award = 'All-Defensive Second Team';"}
{"sample_id": 2821, "db_id": "professional_basketball", "gold_sql": "SELECT coachID FROM coaches GROUP BY coachID HAVING COUNT(DISTINCT tmID) > 2", "pred_sql": "SELECT DISTINCT c.coachid FROM coaches c WHERE c.lgid = 'NBA' GROUP BY c.coachid HAVING COUNT(DISTINCT c.tmid) > 2;"}
{"sample_id": 2841, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(DISTINCT coachID) FROM awards_coaches WHERE year BETWEEN 1962 AND 1975", "pred_sql": "SELECT COUNT(DISTINCT coachid) AS number_of_coaches FROM awards_coaches WHERE year BETWEEN '1962' AND '1975';"}
{"sample_id": 2830, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Most Valuable Player' AND T1.birthCity = 'Houston'", "pred_sql": "SELECT COUNT(DISTINCT awards_players.playerid) AS mvp_winners\nFROM awards_players\nJOIN players ON awards_players.playerid = players.playerid\nWHERE players.birthcity = 'Whitestone' AND awards_players.award = 'MVP';"}
{"sample_id": 2846, "db_id": "professional_basketball", "gold_sql": "SELECT MIN(T1.weight) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'UCLA'", "pred_sql": "SELECT MIN(weight) AS min_weight FROM players JOIN players_teams ON players.playerid = players_teams.playerid JOIN draft ON players.playerid = draft.playerid WHERE draft.draftfrom = 'UCLA' AND players.playerid IN (SELECT playerid FROM player_allstar)"}
{"sample_id": 2904, "db_id": "professional_basketball", "gold_sql": "SELECT CAST(SUM(lost) AS REAL) * 100 / SUM(games) FROM teams WHERE name = 'Houston Mavericks'", "pred_sql": "SELECT (lost * 1.0 / games) * 100 AS percentage_lost FROM teams WHERE name = 'Houston Mavericks'"}
{"sample_id": 2876, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(coachID) FROM awards_coaches WHERE year BETWEEN 1950 AND 1970 GROUP BY coachID HAVING COUNT(coachID) > 1", "pred_sql": "SELECT COUNT(DISTINCT coachid) AS coach_count\nFROM awards_coaches\nWHERE year BETWEEN '1950' AND '1970'\nGROUP BY coachid\nHAVING COUNT(award) > 1;"}
{"sample_id": 2951, "db_id": "professional_basketball", "gold_sql": "SELECT T1.name FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.year = 1997 GROUP BY T1.name ORDER BY SUM(rebounds + dRebounds) DESC LIMIT 1", "pred_sql": "SELECT teams.name FROM players INNER JOIN player_allstar ON players.playerid = player_allstar.playerid INNER JOIN players_teams ON players.playerid = players_teams.playerid INNER JOIN teams ON players_teams.tmid = teams.tmid WHERE player_allstar.year = '1997' AND player_allstar.rebounds = (SELECT MAX(rebounds) FROM player_allstar WHERE year = '1997')"}
{"sample_id": 2889, "db_id": "professional_basketball", "gold_sql": "SELECT T1.firstName, T1.middleName, T1.lastName , 2003 - strftime('%Y', T1.birthDate) FROM awards_players AS T2 JOIN players AS T1 ON T2.playerID = T1.playerID WHERE T2.award = 'Finals MVP' AND T2.year = 2003", "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name, (strftime('%Y', 'now') - strftime('%Y', p.birthdate)) AS age \nFROM awards_players ap \nJOIN players p ON ap.playerid = p.playerid \nWHERE ap.award = 'Finals MVP' AND ap.year = '2003';"}
{"sample_id": 2908, "db_id": "professional_basketball", "gold_sql": "SELECT CAST(SUM(CASE WHEN year = 1947 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1947 THEN 1 ELSE 0 END) - CAST(SUM(CASE WHEN year = 1946 AND tmIDWinner = 'CHS' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN year = 1946 THEN 1 ELSE 0 END) FROM series_post", "pred_sql": "SELECT (CAST(SUM(CASE WHEN year = '1946' AND tmidwinner = 'CHS' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN year = '1946' THEN 1 ELSE 0 END), 0) * 100) - (CAST(SUM(CASE WHEN year = '1947' AND tmidwinner = 'CHS' THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN year = '1947' THEN 1 ELSE 0 END), 0) * 100) AS winning_rate_difference\nFROM series_post\nWHERE (year = '1946' OR year = '1947') AND (tmidwinner = 'CHS' OR tmidloser = 'CHS');"}
{"sample_id": 2902, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T2.season_id = 1973 AND T1.race = 'B'", "pred_sql": "SELECT COUNT(*) AS black_all_star_players_count \nFROM player_allstar \nJOIN players ON player_allstar.playerid = players.playerid \nWHERE player_allstar.season_id = 1973 AND players.race = 'B';"}
{"sample_id": 2798, "db_id": "professional_basketball", "gold_sql": "SELECT T1.name, T1.won FROM teams AS T1 INNER JOIN ( SELECT * FROM teams WHERE year = 2004 ) AS T2 on T1.tmID = T2.tmID WHERE T1.year = 2005 and T1.won > T2.won", "pred_sql": "SELECT t.name, t.won FROM teams t WHERE t.year = '2005' AND t.won > (SELECT t2.won FROM teams t2 WHERE t2.year = '2004' AND t2.tmid = t.tmid)"}
{"sample_id": 2845, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT T1.lastName, T1.firstName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.height > 75", "pred_sql": "SELECT last_name, first_name FROM players JOIN player_allstar ON players.playerid = player_allstar.playerid WHERE height > 75;"}
{"sample_id": 2933, "db_id": "professional_basketball", "gold_sql": "SELECT T2.playerID FROM players_teams AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.PostGP = 0 AND T1.year = 1988 ORDER BY T1.turnovers DESC LIMIT 1", "pred_sql": "SELECT pt.playerid\nFROM players_teams pt\nJOIN teams t ON pt.tmid = t.tmid AND pt.year = t.year\nWHERE t.playoff IS NULL AND pt.year = '1988'\nORDER BY pt.turnovers DESC\nLIMIT 1;"}
{"sample_id": 2856, "db_id": "professional_basketball", "gold_sql": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990", "pred_sql": "SELECT COUNT(DISTINCT pt.playerid) AS player_count\nFROM players_teams pt\nJOIN teams t ON pt.tmid = t.tmid AND pt.year = t.year\nWHERE t.won > 0 AND t.games > 0 AND (t.won * 1.0 / t.games) > 0.75 AND pt.year = '1990';"}
{"sample_id": 2864, "db_id": "professional_basketball", "gold_sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1", "pred_sql": "SELECT p.firstname, p.lastname, COUNT(ap.award) AS award_count \nFROM players p \nJOIN awards_players ap ON p.playerid = ap.playerid \nWHERE p.deathdate != '0000-00-00' \nGROUP BY p.playerid \nORDER BY award_count DESC \nLIMIT 1;"}
{"sample_id": 2885, "db_id": "professional_basketball", "gold_sql": "SELECT coachID FROM coaches WHERE year = 1988 ORDER BY won - lost DESC LIMIT 1", "pred_sql": "SELECT coachid, (won - lost) AS win_difference FROM coaches WHERE year = '1988' ORDER BY win_difference DESC LIMIT 1;"}
{"sample_id": 2932, "db_id": "professional_basketball", "gold_sql": "SELECT T1.playerID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 AND T2.PostGP = 0 ORDER BY T2.steals DESC LIMIT 1", "pred_sql": "SELECT p.firstname, p.lastname \nFROM players p \nJOIN players_teams pt ON p.playerid = pt.playerid \nLEFT JOIN teams t ON pt.tmid = t.tmid AND pt.year = t.year \nLEFT JOIN player_allstar pa ON p.playerid = pa.playerid \nWHERE pt.year = '1996' \nAND t.playoff IS NULL \nORDER BY pa.steals DESC \nLIMIT 1;"}
{"sample_id": 2898, "db_id": "professional_basketball", "gold_sql": "SELECT DISTINCT coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE name = 'Oklahoma City Thunder'", "pred_sql": "SELECT * FROM coaches WHERE tmid = 'OKC'"}
{"sample_id": 2870, "db_id": "professional_basketball", "gold_sql": "SELECT T1.coachID FROM coaches AS T1 INNER JOIN awards_coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.award = 'ABA Coach of the Year' GROUP BY T1.coachID, T1.won ORDER BY T1.won DESC LIMIT 1", "pred_sql": "SELECT c.coachid, COUNT(c.won) AS total_wins\nFROM awards_coaches ac\nJOIN coaches c ON ac.coachid = c.coachid\nWHERE ac.award = 'ABA Coach of the Year'\nGROUP BY c.coachid\nORDER BY total_wins DESC\nLIMIT 1;"}
{"sample_id": 2919, "db_id": "professional_basketball", "gold_sql": "SELECT T1.firstName, T1.lastName, T2.tmID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Atlanta' ORDER BY T2.blocks DESC LIMIT 1", "pred_sql": "SELECT p.firstname || ' ' || p.lastname AS full_name, t.name AS team_name, MAX(p_all.blocks) AS max_blocks\nFROM players p\nJOIN players_teams pt ON p.playerid = pt.playerid\nJOIN teams t ON pt.tmid = t.tmid\nJOIN player_allstar p_all ON p.playerid = p_all.playerid\nWHERE p.birthcity = 'Atlanta'\nGROUP BY p.playerid, t.name\nORDER BY max_blocks DESC\nLIMIT 1;"}
{"sample_id": 2873, "db_id": "professional_basketball", "gold_sql": "SELECT T1.name FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.draftYear WHERE T2.firstName = 'Mike' AND T2.lastName = 'Lynn'", "pred_sql": "SELECT teams.name FROM teams JOIN draft ON teams.tmid = draft.tmid JOIN players ON draft.playerid = players.playerid WHERE players.firstname = 'Mike' AND players.lastname = 'Lynn';"}
{"sample_id": 2946, "db_id": "professional_basketball", "gold_sql": "SELECT T1.tmID FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.GP = 82 AND T2.year = 2000 GROUP BY T1.tmID ORDER BY SUM(T2.PostMinutes) ASC LIMIT 1", "pred_sql": "SELECT t.name FROM players_teams pt JOIN teams t ON pt.tmid = t.tmid WHERE pt.year = '2000' AND pt.gp = 82 ORDER BY pt.minutes ASC LIMIT 1;"}
{"sample_id": 2938, "db_id": "professional_basketball", "gold_sql": "SELECT T2.tmID FROM draft AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.draftYear = T2.year WHERE T1.draftRound = 1 AND T1.draftSelection = 6 AND T1.draftYear = 1976", "pred_sql": "SELECT pt.tmid FROM draft d JOIN players_teams pt ON d.playerid = pt.playerid WHERE d.draftround = 1 AND d.draftselection = 6 AND d.draftyear = '1976';"}
{"sample_id": 2842, "db_id": "professional_basketball", "gold_sql": "SELECT coachID FROM awards_coaches WHERE year BETWEEN 1970 AND 1990 GROUP BY coachID, award HAVING COUNT(award) = 2", "pred_sql": "SELECT coachid FROM awards_coaches WHERE year BETWEEN '1970' AND '1990' GROUP BY coachid HAVING COUNT(award) = 2;"}
{"sample_id": 2943, "db_id": "professional_basketball", "gold_sql": "SELECT SUM(T2.points) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.pos = 'C-F-G' GROUP BY T2.playerID, T2.year ORDER BY T2.year DESC LIMIT 1", "pred_sql": "SELECT SUM(pt.points) AS total_points\nFROM players p\nJOIN players_teams pt ON p.playerid = pt.playerid\nWHERE p.pos IN ('C', 'F', 'G')\nAND p.playerid = (SELECT playerid FROM players ORDER BY birthdate DESC LIMIT 1);"}
{"sample_id": 2799, "db_id": "professional_basketball", "gold_sql": "SELECT name, o_pts FROM teams WHERE CAST((homeWon - homeLost) AS REAL) * 100 / games > 80", "pred_sql": "SELECT name, o_pts FROM teams WHERE homewon > homewon + homelost * 0.8;"}
{"sample_id": 2940, "db_id": "professional_basketball", "gold_sql": "SELECT T1.weight, T1.height FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID ORDER BY T2.rebounds DESC LIMIT 1", "pred_sql": "SELECT p.weight, p.height \nFROM player_allstar AS pa \nJOIN players AS p ON pa.playerid = p.playerid \nGROUP BY pa.playerid \nORDER BY SUM(pa.rebounds) DESC \nLIMIT 1;"}
{"sample_id": 2840, "db_id": "professional_basketball", "gold_sql": "SELECT T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'BLB'", "pred_sql": "SELECT players.lastname FROM players JOIN players_teams ON players.playerid = players_teams.playerid WHERE players_teams.tmid = 'BLB';"}
{"sample_id": 2913, "db_id": "professional_basketball", "gold_sql": "SELECT playerID FROM player_allstar WHERE season_id = 1996 AND CAST(ft_made AS REAL) * 100 / ft_attempted > 70", "pred_sql": "SELECT playerid FROM player_allstar WHERE season_id = 1996 AND league_id = 'NBA' AND (ftmade / ftattempted) > 0.7;"}
{"sample_id": 2852, "db_id": "professional_basketball", "gold_sql": "SELECT MAX(T2.points) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1950 AND 1970 AND T1.rank = 1", "pred_sql": "SELECT MAX(pt.points) AS max_points\nFROM players_teams pt\nJOIN teams t ON pt.tmid = t.tmid AND pt.year = t.year\nWHERE t.rank = '1' AND pt.year BETWEEN '1950' AND '1970';"}
{"sample_id": 2396, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T3.\"Product Name\" FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Anne McFarland'", "pred_sql": "SELECT p.product_name \nFROM product p \nJOIN west_superstore w ON p.product_id = w.product_id \nJOIN people pe ON w.customer_id = pe.customer_id \nWHERE pe.customer_name = 'Anne McFarland';"}
{"sample_id": 2411, "db_id": "superstore", "gold_sql": "SELECT T2.Category FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" ORDER BY T1.Sales LIMIT 1", "pred_sql": "SELECT category, SUM(sales) AS total_sales FROM product JOIN west_superstore ON product.product_id = west_superstore.product_id GROUP BY category ORDER BY total_sales ASC LIMIT 1;"}
{"sample_id": 2419, "db_id": "superstore", "gold_sql": "SELECT MAX(T2.Profit) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Anna Chung'", "pred_sql": "SELECT MAX(profit) AS highest_profit\nFROM central_superstore\nJOIN people ON central_superstore.customer_id = people.customer_id\nWHERE people.customer_name = 'Anna Chung';"}
{"sample_id": 2409, "db_id": "superstore", "gold_sql": "SELECT SUM(T1.Quantity) FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Cindy Stewart' AND T3.\"Product Name\" = 'Lexmark X 9575 Professional All-in-One Color Printer'", "pred_sql": "SELECT SUM(s.quantity) AS total_quantity\nFROM south_superstore s\nJOIN product p ON s.product_id = p.product_id\nJOIN people pe ON s.customer_id = pe.customer_id\nWHERE pe.customer_name = 'Cindy Stewart' AND p.product_name = 'Lexmark X 9575 Professional All-in-One Color Printer';"}
{"sample_id": 2417, "db_id": "superstore", "gold_sql": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.\"Sub-Category\" = 'Art' GROUP BY T2.\"Product Name\" ORDER BY COUNT(T2.\"Product ID\") DESC LIMIT 1", "pred_sql": "SELECT p.product_name, SUM(cs.quantity) AS total_quantity\nFROM central_superstore cs\nJOIN product p ON cs.product_id = p.product_id\nWHERE p.category = 'Art'\nGROUP BY p.product_name\nORDER BY total_quantity DESC\nLIMIT 1;"}
{"sample_id": 2435, "db_id": "superstore", "gold_sql": "SELECT COUNT(*) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aaron Bergman' AND T2.\"Ship Mode\" = 'Standard Class'", "pred_sql": "SELECT COUNT(*) AS total_orders\nFROM west_superstore\nWHERE customer_id = (SELECT customer_id FROM people WHERE customer_name = 'Aaron Bergman')\nAND ship_mode = 'Standard Class';"}
{"sample_id": 2346, "db_id": "superstore", "gold_sql": "SELECT MAX(strftime('%J', \"Ship Date\") - strftime('%J', \"Order Date\")) AS longestTimeDays FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby'", "pred_sql": "SELECT MAX(julianday(ship_date) - julianday(order_date)) AS longest_shipment_time\nFROM (\n    SELECT cs.ship_date, cs.order_date\n    FROM central_superstore cs\n    JOIN people p ON cs.customer_id = p.customer_id\n    WHERE p.customer_name = 'Aimee Bixby'\n    UNION ALL\n    SELECT es.ship_date, es.order_date\n    FROM east_superstore es\n    JOIN people p ON es.customer_id = p.customer_id\n    WHERE p.customer_name = 'Aimee Bixby'\n    UNION ALL\n    SELECT ss.ship_date, ss.order_date\n    FROM south_superstore ss\n    JOIN people p ON ss.customer_id = p.customer_id\n    WHERE p.customer_name = 'Aimee Bixby'\n    UNION ALL\n    SELECT ws.ship_date, ws.order_date\n    FROM west_superstore ws\n    JOIN people p ON ws.customer_id = p.customer_id\n    WHERE p.customer_name = 'Aimee Bixby'\n) AS all_orders;"}
{"sample_id": 2429, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT \"Order ID\") FROM central_superstore WHERE Quantity > 5 AND \"Ship Mode\" = 'First Class'", "pred_sql": "SELECT COUNT(*) AS order_count FROM central_superstore WHERE quantity > 5 AND ship_mode = 'First Class' UNION ALL SELECT COUNT(*) AS order_count FROM east_superstore WHERE quantity > 5 AND ship_mode = 'First Class' UNION ALL SELECT COUNT(*) AS order_count FROM south_superstore WHERE quantity > 5 AND ship_mode = 'First Class' UNION ALL SELECT COUNT(*) AS order_count FROM west_superstore WHERE quantity > 5 AND ship_mode = 'First Class';"}
{"sample_id": 2410, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Ship Mode\" = 'Standard Class' AND T1.Quantity >= 10", "pred_sql": "SELECT p.product_name \nFROM product p \nJOIN central_superstore cs ON p.product_id = cs.product_id \nWHERE cs.quantity >= 10 \nAND cs.ship_mode = 'Standard Class';"}
{"sample_id": 2367, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T1.Profit > 1000", "pred_sql": "SELECT DISTINCT p.product_name \nFROM product p \nJOIN central_superstore cs ON p.product_id = cs.product_id \nWHERE cs.profit >= 1000 \nUNION \nSELECT DISTINCT p.product_name \nFROM product p \nJOIN east_superstore es ON p.product_id = es.product_id \nWHERE es.profit >= 1000 \nUNION \nSELECT DISTINCT p.product_name \nFROM product p \nJOIN south_superstore ss ON p.product_id = ss.product_id \nWHERE ss.profit >= 1000 \nUNION \nSELECT DISTINCT p.product_name \nFROM product p \nJOIN west_superstore ws ON p.product_id = ws.product_id \nWHERE ws.profit >= 1000;"}
{"sample_id": 2441, "db_id": "superstore", "gold_sql": "SELECT COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture'", "pred_sql": "SELECT COUNT(*) AS furniture_product_count FROM central_superstore cs JOIN product p ON cs.product_id = p.product_id WHERE p.category = 'Furniture';"}
{"sample_id": 2380, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.Segment FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.Region = 'West' AND T1.\"Order ID\" = 'CA-2011-108189'", "pred_sql": "SELECT segment FROM people WHERE customer id IN (SELECT customer id FROM west_superstore WHERE order id = 'CA-2011-108189');"}
{"sample_id": 2358, "db_id": "superstore", "gold_sql": "SELECT DISTINCT (T2.Sales / (1 - T2.discount)) * T2.Quantity - Profit FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID\" WHERE T1.\"Customer Name\" = 'Aimee Bixby' AND T3.\"Product Name\" = 'Xerox 1952' AND T2.\"Order Date\" = '2014-09-10'", "pred_sql": "SELECT SUM((sales / (1 - discount)) * quantity - profit) AS total_cost\nFROM central_superstore\nJOIN product ON central_superstore.product_id = product.product_id\nJOIN people ON central_superstore.customer_id = people.customer_id\nWHERE product.product_name = 'Xerox 1952' \nAND people.customer_name = 'Aimee Bixby' \nAND central_superstore.order_date = '2014-09-10';"}
{"sample_id": 2442, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE strftime('%Y-%m', T1.\"Ship Date\") = '2013-03'", "pred_sql": "SELECT DISTINCT product.product_name FROM central_superstore JOIN product ON central_superstore.product_id = product.product_id WHERE strftime('%Y-%m', central_superstore.ship_date) = '2013-03';"}
{"sample_id": 2382, "db_id": "superstore", "gold_sql": "SELECT T1.\"Order ID\" FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T2.Region = 'South' AND T2.\"Customer Name\" = 'Frank Olsen'", "pred_sql": "SELECT cs.order_id FROM south_superstore cs JOIN people p ON cs.customer_id = p.customer_id WHERE p.customer_name = 'Frank Olsen' AND p.region = 'South';"}
{"sample_id": 2420, "db_id": "superstore", "gold_sql": "SELECT COUNT(T2.\"Customer ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" WHERE T1.\"Customer Name\" = 'Corey Roper' AND STRFTIME('%Y', T2.\"Ship Date\") = '2015'", "pred_sql": "SELECT COUNT(*) AS order_count FROM central_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Corey Roper') AND strftime('%Y', order_date) = '2015' UNION ALL SELECT COUNT(*) AS order_count FROM east_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Corey Roper') AND strftime('%Y', order_date) = '2015' UNION ALL SELECT COUNT(*) AS order_count FROM south_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Corey Roper') AND strftime('%Y', order_date) = '2015' UNION ALL SELECT COUNT(*) AS order_count FROM west_superstore WHERE customer_id IN (SELECT customer_id FROM people WHERE customer_name = 'Corey Roper') AND strftime('%Y', order_date) = '2015';"}
{"sample_id": 2360, "db_id": "superstore", "gold_sql": "SELECT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" GROUP BY T1.\"Order ID\", T2.\"Customer Name\" ORDER BY SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) DESC LIMIT 1", "pred_sql": "SELECT p.\"customer name\" \nFROM central_superstore cs \nJOIN people p ON cs.\"customer id\" = p.\"customer id\" \nGROUP BY p.\"customer name\" \nORDER BY SUM(cs.sales / (1 - cs.discount) * cs.quantity - cs.profit) DESC \nLIMIT 1;"}
{"sample_id": 2377, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T3.Category FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T2.\"Customer Name\" = 'Katherine Murray' AND T1.\"Order Date\" = '2018-11-04' AND T2.Region = 'South'", "pred_sql": "SELECT p.category FROM product p JOIN south_superstore s ON p.product_id = s.product_id JOIN people pe ON s.customer_id = pe.customer_id WHERE pe.customer_name = 'Katherine Murray' AND s.order_date = '2018-11-04' AND s.region = 'South';"}
{"sample_id": 2376, "db_id": "superstore", "gold_sql": "SELECT DISTINCT T2.\"Customer Name\" FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Global High-Back Leather Tilter, Burgundy' AND T1.\"Order Date\" = '2013-10-13' AND T1.Region = 'East'", "pred_sql": "SELECT p.\"customer name\" FROM east_superstore es JOIN product pr ON es.\"product id\" = pr.\"product id\" JOIN people p ON es.\"customer id\" = p.\"customer id\" WHERE pr.\"product name\" = 'Global High-Back Leather Tilter, Burgundy' AND es.\"order date\" = '2013-10-13' AND es.\"region\" = 'East';"}
{"sample_id": 2447, "db_id": "superstore", "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.\"Ship Mode\" = 'First Class' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Category = 'Furniture' AND STRFTIME('%Y', T1.\"Ship Date\") = '2013'", "pred_sql": "SELECT (COUNT(CASE WHEN ship_mode = 'First Class' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_first_class_furniture\nFROM central_superstore\nJOIN product ON central_superstore.product_id = product.product_id\nWHERE product.category = 'Furniture' AND strftime('%Y', order_date) = '2013';"}
{"sample_id": 2416, "db_id": "superstore", "gold_sql": "SELECT CAST(SUM(CASE  WHEN State = 'Texas' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN State = 'Indiana' THEN 1 ELSE 0 END) FROM people", "pred_sql": "SELECT (SELECT COUNT(*) FROM people WHERE state = 'TX') * 1.0 / (SELECT COUNT(*) FROM people WHERE state = 'IN') AS ratio;"}
{"sample_id": 2426, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT T1.\"Order ID\") FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" INNER JOIN people AS T3 ON T3.\"Customer ID\" = T1.\"Customer ID\" WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'", "pred_sql": "SELECT COUNT(*) AS order_count \nFROM west_superstore \nWHERE sales >= 5000 \nAND customer_id IN (SELECT customer_id FROM people WHERE state = 'CA');"}
{"sample_id": 2366, "db_id": "superstore", "gold_sql": "SELECT COUNT(DISTINCT T1.\"Customer ID\") FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Cardinal EasyOpen D-Ring Binders' AND T2.City = 'Chicago' AND T1.Quantity > 10", "pred_sql": "SELECT COUNT(DISTINCT p.\"customer id\") \nFROM people p \nJOIN central_superstore cs ON p.\"customer id\" = cs.\"customer id\" \nJOIN product pr ON cs.\"product id\" = pr.\"product id\" \nWHERE p.city = 'Chicago' \nAND pr.\"product name\" = 'Cardinal EasyOpen D-Ring Binders' \nAND cs.quantity >= 10;"}
{"sample_id": 2414, "db_id": "superstore", "gold_sql": "SELECT AVG(T1.Sales) FROM west_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" INNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" WHERE T3.\"Product Name\" = 'Sharp AL-1530CS Digital Copier'", "pred_sql": "SELECT AVG(sales) AS average_sales\nFROM (\n    SELECT sales\n    FROM east_superstore\n    WHERE product_id = (SELECT product_id FROM product WHERE product_name = 'Sharp AL-1530CS Digital Copier')\n    UNION ALL\n    SELECT sales\n    FROM west_superstore\n    WHERE product_id = (SELECT product_id FROM product WHERE product_name = 'Sharp AL-1530CS Digital Copier')\n) AS combined_sales;"}
{"sample_id": 7493, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(PRED_CLASS_ID) FROM PRED_CLASSES", "pred_sql": "SELECT COUNT(*) AS predicted_class_count FROM pred_classes;"}
{"sample_id": 7544, "db_id": "image_and_language", "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363", "pred_sql": "SELECT obj_classes.obj_class FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.x = '422' AND img_obj.y = '63' AND img_obj.w = '77' AND img_obj.h = '363';"}
{"sample_id": 7482, "db_id": "image_and_language", "gold_sql": "SELECT T1.PRED_CLASS FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID = 8 AND T2.OBJ2_SAMPLE_ID = 4", "pred_sql": "SELECT p.pred_class \nFROM img_rel r \nJOIN pred_classes p ON r.pred_class_id = p.pred_class_id \nWHERE r.img_id = '1' \nAND (r.obj1_sample_id = '8' AND r.obj2_sample_id = '4' OR r.obj1_sample_id = '4' AND r.obj2_sample_id = '8');"}
{"sample_id": 7600, "db_id": "image_and_language", "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 36 AND T1.X = 0 AND T1.Y = 0", "pred_sql": "SELECT obj_classes.obj_class FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE img_obj.img_id = '36' AND img_obj.x = '0' AND img_obj.y = '0';"}
{"sample_id": 7496, "db_id": "image_and_language", "gold_sql": "SELECT SUM(CASE WHEN T2.ATT_CLASS = 'white' THEN 1 ELSE 0 END) FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 2347915", "pred_sql": "SELECT COUNT(DISTINCT img_obj.obj_sample_id) AS sample_count \nFROM img_obj \nJOIN img_obj_att ON img_obj.img_id = img_obj_att.img_id AND img_obj.obj_sample_id = img_obj_att.obj_sample_id \nJOIN att_classes ON img_obj_att.att_class_id = att_classes.att_class_id \nWHERE img_obj.img_id = '2377985' AND att_classes.att_class = 'electrical';"}
{"sample_id": 7602, "db_id": "image_and_language", "gold_sql": "SELECT T1.IMG_ID, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 126 AND T1.Y = 363", "pred_sql": "SELECT obj_classes.obj_class FROM img_obj WHERE img_obj.x = '126' AND img_obj.y = '363';"}
{"sample_id": 7586, "db_id": "image_and_language", "gold_sql": "SELECT T1.W, T1.H FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'keyboard' AND T1.X = 5 AND T1.Y = 647", "pred_sql": "SELECT w, h FROM img_obj WHERE obj_class_id = (SELECT obj_class_id FROM obj_classes WHERE obj_class = 'keyboard') AND x = '5' AND y = '647';"}
{"sample_id": 7523, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.OBJ1_SAMPLE_ID != T1.OBJ2_SAMPLE_ID AND T2.PRED_CLASS = 'on'", "pred_sql": "SELECT COUNT(DISTINCT img_rel.img_id) AS image_count\nFROM img_rel\nJOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id\nWHERE pred_classes.pred_class = 'on' \nAND img_rel.obj1_sample_id IN (\n    SELECT obj_sample_id\n    FROM img_rel\n    GROUP BY obj_sample_id\n    HAVING COUNT(DISTINCT obj2_sample_id) > 1\n)"}
{"sample_id": 7489, "db_id": "image_and_language", "gold_sql": "SELECT CAST(SUM(T3.Y) AS REAL) / COUNT(CASE WHEN T1.PRED_CLASS = 'parked on' THEN 1 ELSE NULL END) FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T2.OBJ1_SAMPLE_ID = T3.OBJ_CLASS_ID WHERE T2.IMG_ID = 1 AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID", "pred_sql": "SELECT AVG(ABS(o1.y - o2.y)) AS average_y_difference\nFROM img_rel ir\nJOIN img_obj o1 ON ir.obj1_sample_id = o1.obj_sample_id AND ir.img_id = o1.img_id\nJOIN img_obj o2 ON ir.obj2_sample_id = o2.obj_sample_id AND ir.img_id = o2.img_id\nWHERE ir.img_id = '1' AND ir.pred_class_id = (SELECT pred_class_id FROM pred_classes WHERE pred_class = 'parked on')"}
{"sample_id": 7478, "db_id": "image_and_language", "gold_sql": "SELECT T2.X, T2.Y, T2.W, T2.H FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID WHERE T1.IMG_ID = 5 AND T1.OBJ1_SAMPLE_ID = T1.OBJ2_SAMPLE_ID", "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h \nFROM img_obj \nJOIN img_rel ON img_obj.obj_sample_id = img_rel.obj1_sample_id \nWHERE img_obj.img_id = '5' AND img_rel.obj1_sample_id = img_rel.obj2_sample_id;"}
{"sample_id": 7534, "db_id": "image_and_language", "gold_sql": "SELECT T4.ATT_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID INNER JOIN IMG_OBJ_ATT AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN ATT_CLASSES AS T4 ON T3.ATT_CLASS_ID = T4.ATT_CLASS_ID WHERE T2.OBJ_CLASS = 'van' AND T1.IMG_ID = 1 GROUP BY T4.ATT_CLASS", "pred_sql": "SELECT att_class.att_class FROM img_obj_att AS img_att JOIN att_classes AS att_class ON img_att.att_class_id = att_class.att_class_id JOIN img_obj AS img_obj ON img_att.img_id = img_obj.img_id WHERE img_obj.img_id = '1' AND att_class.att_class LIKE '%colour%'"}
{"sample_id": 7591, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T2.IMG_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'picture'", "pred_sql": "SELECT COUNT(DISTINCT img_id) AS image_count FROM img_obj_att WHERE att_class_id IN (SELECT att_class_id FROM att_classes WHERE att_class = 'picture')"}
{"sample_id": 7546, "db_id": "image_and_language", "gold_sql": "SELECT X, Y, W, H FROM IMG_OBJ WHERE IMG_ID = 8", "pred_sql": "SELECT x, y, w, h FROM img_obj WHERE img_id = '8';"}
{"sample_id": 7598, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE IMG_ID = 12 AND Y = 0", "pred_sql": "SELECT COUNT(*) AS count FROM img_obj WHERE img_id = '12' AND y = '0';"}
{"sample_id": 7606, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T2.PRED_CLASS) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 107 AND T2.PRED_CLASS = 'has'", "pred_sql": "SELECT COUNT(DISTINCT pred_class_id) AS has_predicate_count FROM img_rel WHERE img_id = 107 AND pred_class_id = 'has';"}
{"sample_id": 7516, "db_id": "image_and_language", "gold_sql": "SELECT T1.PRED_CLASS_ID FROM IMG_REL AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.IMG_ID = T2.IMG_ID ORDER BY T2.H DESC LIMIT 1", "pred_sql": "SELECT img_rel.pred_class_id \nFROM img_rel \nJOIN img_obj ON img_rel.img_id = img_obj.img_id \nWHERE img_obj.h = (SELECT MAX(h) FROM img_obj)"}
{"sample_id": 7533, "db_id": "image_and_language", "gold_sql": "SELECT CAST(COUNT(OBJ_CLASS_ID) AS REAL) / COUNT(DISTINCT IMG_ID) FROM IMG_OBJ", "pred_sql": "SELECT AVG(object_count) AS average_object_count FROM (SELECT img_id, COUNT(obj_sample_id) AS object_count FROM img_obj GROUP BY img_id);"}
{"sample_id": 7590, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T1.IMG_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T2.PRED_CLASS = 'reading'", "pred_sql": "SELECT COUNT(DISTINCT img_rel.img_id) AS image_count\nFROM img_rel\nJOIN pred_classes ON img_rel.pred_class_id = pred_classes.pred_class_id\nJOIN img_obj ON img_rel.img_id = img_obj.img_id\nWHERE pred_classes.pred_class = 'reading'\nAND img_obj.obj_sample_id IN (\n    SELECT obj_sample_id\n    FROM img_rel\n    GROUP BY obj_sample_id\n    HAVING COUNT(DISTINCT pred_class_id) > 1\n);"}
{"sample_id": 7510, "db_id": "image_and_language", "gold_sql": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc')", "pred_sql": "SELECT img_obj.obj_sample_id FROM img_obj JOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id WHERE obj_classes.obj_class = 'transportation';"}
{"sample_id": 7601, "db_id": "image_and_language", "gold_sql": "SELECT T1.IMG_ID, T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'pizza' LIMIT 10", "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE obj_classes.obj_class = 'pizza' \nLIMIT 10;"}
{"sample_id": 7559, "db_id": "image_and_language", "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID ORDER BY T1.H LIMIT 1", "pred_sql": "SELECT obj_classes.obj_class \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nORDER BY (CAST(img_obj.y AS INTEGER) + CAST(img_obj.h AS INTEGER)) ASC \nLIMIT 1;"}
{"sample_id": 7492, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(OBJ_CLASS_ID) FROM OBJ_CLASSES", "pred_sql": "SELECT COUNT(DISTINCT obj_class_id) AS total_object_classes FROM obj_classes;"}
{"sample_id": 7522, "db_id": "image_and_language", "gold_sql": "SELECT T2.X, T2.Y, T2.H, T2.W FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2222 AND T1.OBJ_CLASS = 'feathers'", "pred_sql": "SELECT img_obj.x, img_obj.y, img_obj.w, img_obj.h \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE img_obj.img_id = '2222' AND obj_classes.obj_class = 'feathers';"}
{"sample_id": 7558, "db_id": "image_and_language", "gold_sql": "SELECT SUM(CASE WHEN T2.OBJ_CLASS = 'bed' THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 1098", "pred_sql": "SELECT COUNT(img_obj.obj_sample_id) AS sample_count \nFROM img_obj \nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id \nWHERE obj_classes.obj_class = 'bed' AND img_obj.img_id = '1098';"}
{"sample_id": 7486, "db_id": "image_and_language", "gold_sql": "SELECT T2.IMG_ID FROM PRED_CLASSES AS T1 INNER JOIN IMG_REL AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.PRED_CLASS = 'parked on' AND T2.OBJ1_SAMPLE_ID != T2.OBJ2_SAMPLE_ID GROUP BY T2.IMG_ID HAVING COUNT(T2.IMG_ID) > 2", "pred_sql": "SELECT img_id FROM img_rel WHERE pred_class_id = (SELECT pred_class_id FROM pred_classes WHERE pred_class = 'parked on') GROUP BY img_id HAVING COUNT(DISTINCT obj1_sample_id, obj2_sample_id) > 2;"}
{"sample_id": 7578, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(IMG_ID) FROM IMG_OBJ WHERE X = 5 AND Y = 5", "pred_sql": "SELECT COUNT(DISTINCT img_id) AS image_count FROM img_obj WHERE x = '5' AND y = '5';"}
{"sample_id": 7508, "db_id": "image_and_language", "gold_sql": "SELECT DISTINCT IMG_ID FROM IMG_REL WHERE OBJ1_SAMPLE_ID = OBJ2_SAMPLE_ID", "pred_sql": "SELECT DISTINCT img_id FROM img_rel WHERE obj1_sample_id = obj2_sample_id;"}
{"sample_id": 7480, "db_id": "image_and_language", "gold_sql": "SELECT COUNT(T.IMG_ID) FROM ( SELECT T2.IMG_ID FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.OBJ_CLASS = 'man' GROUP BY T2.IMG_ID ) T", "pred_sql": "SELECT COUNT(DISTINCT img_obj.img_id) AS image_count\nFROM img_obj\nJOIN obj_classes ON img_obj.obj_class_id = obj_classes.obj_class_id\nWHERE obj_classes.obj_class = 'man';"}
{"sample_id": 7584, "db_id": "image_and_language", "gold_sql": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 5 AND T1.Y = 5", "pred_sql": "SELECT DISTINCT obj_classes.obj_class FROM img_obj WHERE img_obj.x = '5' AND img_obj.y = '5';"}
{"sample_id": 10821, "db_id": "student_club", "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'", "pred_sql": "SELECT a.link_to_event FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';"}
{"sample_id": 10836, "db_id": "student_club", "gold_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'", "pred_sql": "SELECT major.major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';"}
{"sample_id": 10875, "db_id": "student_club", "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)", "pred_sql": "SELECT event.event_name \nFROM event \nJOIN budget ON event.event_id = budget.link_to_event \nWHERE budget.category = 'parking' \nAND budget.spent < (SELECT AVG(budget.spent) FROM budget WHERE budget.category = 'parking');"}
{"sample_id": 10790, "db_id": "student_club", "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'", "pred_sql": "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';"}
{"sample_id": 10859, "db_id": "student_club", "gold_sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'", "pred_sql": "SELECT m.member_id, m.first_name, m.last_name, a.link_to_event \nFROM member m \nJOIN attendance a ON m.member_id = a.link_to_member \nJOIN expense e ON m.member_id = e.link_to_member \nWHERE e.approved = 'true' \nAND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';"}
{"sample_id": 10805, "db_id": "student_club", "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'", "pred_sql": "SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';"}
{"sample_id": 10841, "db_id": "student_club", "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'", "pred_sql": "SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00';"}
{"sample_id": 10839, "db_id": "student_club", "gold_sql": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30", "pred_sql": "SELECT DISTINCT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;"}
{"sample_id": 10735, "db_id": "student_club", "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'", "pred_sql": "SELECT COUNT(*) AS student_count FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';"}
{"sample_id": 10856, "db_id": "student_club", "gold_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'", "pred_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND city = 'San Juan Municipio' AND state = 'Puerto Rico';"}
{"sample_id": 10818, "db_id": "student_club", "gold_sql": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'", "pred_sql": "SELECT COUNT(a.link_to_event) AS event_count, m.link_to_major \nFROM attendance a \nJOIN member m ON a.link_to_member = m.member_id \nWHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi' \nGROUP BY m.link_to_major;"}
{"sample_id": 10799, "db_id": "student_club", "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'", "pred_sql": "SELECT COUNT(*) AS student_count FROM member WHERE position = 'president';"}
{"sample_id": 10833, "db_id": "student_club", "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'", "pred_sql": "SELECT expense_description, cost, expense_date FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison')"}
{"sample_id": 10796, "db_id": "student_club", "gold_sql": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'", "pred_sql": "SELECT COUNT(DISTINCT attendance.link_to_event) AS event_count\nFROM attendance\nJOIN member ON attendance.link_to_member = member.member_id\nWHERE member.phone = '954-555-6240';"}
{"sample_id": 10791, "db_id": "student_club", "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1", "pred_sql": "SELECT event.event_name, budget.amount \nFROM event \nJOIN budget ON event.event_id = budget.link_to_event \nORDER BY budget.amount DESC \nLIMIT 1;"}
{"sample_id": 10852, "db_id": "student_club", "gold_sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'", "pred_sql": "SELECT m.last_name, m.position \nFROM member m \nJOIN expense e ON m.member_id = e.link_to_member \nWHERE e.expense_description LIKE '%pizza%' AND e.expense_date = '2019-09-10';"}
{"sample_id": 10814, "db_id": "student_club", "gold_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1", "pred_sql": "SELECT source, SUM(amount) AS total_amount\nFROM income\nWHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY source\nORDER BY total_amount DESC\nLIMIT 1;"}
{"sample_id": 10855, "db_id": "student_club", "gold_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL", "pred_sql": "SELECT DISTINCT city, state FROM zip_code WHERE type = 'PO Box';"}
{"sample_id": 10854, "db_id": "student_club", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'", "pred_sql": "SELECT (SUM(CASE WHEN income.amount = '50' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM member JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'medium';"}
{"sample_id": 10879, "db_id": "student_club", "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )", "pred_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone \nFROM member m \nJOIN expense e ON m.member_id = e.link_to_member \nWHERE e.cost > (SELECT AVG(cost) FROM expense)"}
{"sample_id": 10813, "db_id": "student_club", "gold_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major", "pred_sql": "SELECT (SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Finance')) * 1.0 / (SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics')) AS ratio;"}
{"sample_id": 10865, "db_id": "student_club", "gold_sql": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'", "pred_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';"}
{"sample_id": 10768, "db_id": "student_club", "gold_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'", "pred_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';"}
{"sample_id": 10846, "db_id": "student_club", "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'", "pred_sql": "SELECT COUNT(*) AS extra_large_count FROM member WHERE t_shirt_size = 'Extra Large';"}
{"sample_id": 10779, "db_id": "student_club", "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'", "pred_sql": "SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton');"}
{"sample_id": 10770, "db_id": "student_club", "gold_sql": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0", "pred_sql": "SELECT COUNT(*) AS exceeded_budget_count\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'November Meeting' AND b.remaining < 0;"}
{"sample_id": 10760, "db_id": "student_club", "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'", "pred_sql": "SELECT expense.expense_id, expense.expense_description, expense.approved \nFROM expense \nJOIN budget ON expense.link_to_budget = budget.budget_id \nJOIN event ON budget.link_to_event = event.event_id \nWHERE event.event_name = 'October Meeting' \nAND event.event_date = '2019-10-08';"}
{"sample_id": 10848, "db_id": "student_club", "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'", "pred_sql": "SELECT m.last_name, ma.department, ma.college \nFROM member m \nJOIN major ma ON m.link_to_major = ma.major_id \nWHERE ma.major_name = 'Environmental Engineering';"}
{"sample_id": 10845, "db_id": "student_club", "gold_sql": "SELECT COUNT(income_id) FROM income WHERE amount = 50", "pred_sql": "SELECT COUNT(*) AS income_count FROM income WHERE amount = '50';"}
{"sample_id": 10776, "db_id": "student_club", "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'", "pred_sql": "SELECT major.major_name FROM member WHERE member.position = 'Vice President'"}
{"sample_id": 10850, "db_id": "student_club", "gold_sql": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'", "pred_sql": "SELECT zip_code.city, zip_code.state \nFROM member \nJOIN major ON member.link_to_major = major.major_id \nJOIN zip_code ON member.zip = zip_code.zip_code \nWHERE major.department = 'Electrical and Computer Engineering';"}
{"sample_id": 10883, "db_id": "student_club", "gold_sql": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'", "pred_sql": "SELECT m.last_name, m.phone \nFROM member m \nJOIN major j ON m.link_to_major = j.major_id \nWHERE j.major_name = 'Elementary Education';"}
{"sample_id": 10838, "db_id": "student_club", "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'", "pred_sql": "SELECT COUNT(*) AS member_count FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';"}
{"sample_id": 399, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T2.Stars) FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Nashville' AND T1.state_abbrev = 'TN' AND T2.Product = 'Eagle National Mortgage' AND T2.Stars = 5", "pred_sql": "SELECT COUNT(*) AS five_star_reviews_count \nFROM reviews r \nJOIN district d ON r.district_id = d.district_id \nJOIN state s ON d.state_abbrev = s.statecode \nWHERE r.product = 'Eagle National Bank' \nAND r.stars = '5' \nAND d.city = 'Nashville' \nAND s.state = 'Tennessee';"}
{"sample_id": 388, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND strftime('%Y', T2.\"Date received\") = '2012' AND T2.Product = 'Credit card'", "pred_sql": "SELECT COUNT(*) AS complaint_count \nFROM callcenterlogs ccl \nJOIN events e ON ccl.complaint_id = e.complaint_id \nJOIN client cl ON ccl.rand_client = cl.client_id \nJOIN district d ON cl.district_id = d.district_id \nWHERE e.product = 'Credit card' \nAND d.city = 'Omaha' \nAND strftime('%Y', ccl.date_received) = '2012';"}
{"sample_id": 314, "db_id": "retail_complains", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.age > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.\"Submitted via\") FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Postal mail'", "pred_sql": "SELECT (COUNT(CASE WHEN c.age >= 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM client c\nJOIN callcenterlogs cl ON c.client_id = cl.rand_client\nWHERE cl.submitted_via = 'postal mail';"}
{"sample_id": 355, "db_id": "retail_complains", "gold_sql": "SELECT DISTINCT T2.Product FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Alexander' AND T1.middle = 'Bronx' AND T1.last = 'Lewis'", "pred_sql": "SELECT events.product FROM events JOIN client ON events.client_id = client.client_id WHERE client.first = 'Alexander' AND client.middle = 'Bronx' AND client.last = 'Lewis';"}
{"sample_id": 359, "db_id": "retail_complains", "gold_sql": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE strftime('%M', T1.ser_time) < '10'", "pred_sql": "SELECT issue FROM events JOIN callcenterlogs ON events.complaint_id = callcenterlogs.complaint_id WHERE strftime('%s', callcenterlogs.ser_exit) - strftime('%s', callcenterlogs.ser_start) < 600;"}
{"sample_id": 293, "db_id": "retail_complains", "gold_sql": "SELECT DISTINCT \"Complaint ID\" FROM callcenterlogs WHERE priority = 2 ORDER BY \"Date received\" DESC", "pred_sql": "SELECT * FROM callcenterlogs WHERE priority = '2' ORDER BY 'date received';"}
{"sample_id": 370, "db_id": "retail_complains", "gold_sql": "SELECT T2.city FROM reviews AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.Stars = 5 AND T1.Date LIKE '2016%' ORDER BY T1.Date DESC LIMIT 5", "pred_sql": "SELECT city, COUNT(*) AS five_star_count\nFROM reviews r\nJOIN district d ON r.district_id = d.district_id\nWHERE stars = '5' AND date LIKE '2016%'\nGROUP BY city\nORDER BY five_star_count DESC\nLIMIT 5;"}
{"sample_id": 385, "db_id": "retail_complains", "gold_sql": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1", "pred_sql": "SELECT state, COUNT(DISTINCT city) AS city_count FROM district GROUP BY state ORDER BY city_count DESC LIMIT 1;"}
{"sample_id": 394, "db_id": "retail_complains", "gold_sql": "SELECT T2.Client_ID FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.\"Submitted via\" = 'Fax' AND T1.\"Date received\" = '2014-04-16'", "pred_sql": "SELECT client_id FROM events WHERE date_received = '2014-04-16' AND submitted_via = 'fax';"}
{"sample_id": 248, "db_id": "retail_complains", "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.\"Date received\" = '2017-03-27' AND T2.server = 'MICHAL'", "pred_sql": "SELECT client.first || ' ' || client.last AS full_name \nFROM callcenterlogs \nJOIN client ON callcenterlogs.rand client = client.client_id \nWHERE callcenterlogs.date received = '2017/3/27' AND callcenterlogs.phonefinal = 'MICHAL';"}
{"sample_id": 276, "db_id": "retail_complains", "gold_sql": "SELECT T1.email FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.outcome = 'HANG'", "pred_sql": "SELECT client.email FROM callcenterlogs JOIN client ON callcenterlogs.rand client = client.client_id WHERE callcenterlogs.outcome = 'hung';"}
{"sample_id": 379, "db_id": "retail_complains", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'", "pred_sql": "SELECT (COUNT(CASE WHEN sex = 'female' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage\nFROM client c\nJOIN state s ON c.state = s.statecode\nWHERE s.region = 'Middle Atlantic';"}
{"sample_id": 287, "db_id": "retail_complains", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.priority = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.priority) FROM callcenterlogs AS T1 INNER JOIN client AS T2 ON T1.\"rand client\" = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN state AS T4 ON T3.state_abbrev = T4.StateCode WHERE T4.State = 'California'", "pred_sql": "SELECT (COUNT(CASE WHEN priority = '1' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_priority_1 FROM callcenterlogs JOIN client ON callcenterlogs.rand_client = client.client_id JOIN state ON client.state = state.statecode WHERE state.state = 'California';"}
{"sample_id": 398, "db_id": "retail_complains", "gold_sql": "SELECT T2.Product FROM district AS T1 INNER JOIN reviews AS T2 ON T1.district_id = T2.district_id WHERE T1.city = 'Newton' AND T1.state_abbrev = 'MA' AND T2.Date = '2016-03-14' AND T2.Stars = 1", "pred_sql": "SELECT reviews.product FROM reviews JOIN district ON reviews.district_id = district.district_id WHERE reviews.stars = '1' AND reviews.date = '2016-03-14' AND district.city = 'Newton' AND district.state_abbrev = 'MA';"}
{"sample_id": 241, "db_id": "retail_complains", "gold_sql": "SELECT MIN(ser_time) FROM callcenterlogs WHERE \"Date received\" = '2017-03-22'", "pred_sql": "SELECT MIN(ser_start) AS earliest_complaint_start FROM callcenterlogs WHERE date_received = '2017-03-22';"}
{"sample_id": 352, "db_id": "retail_complains", "gold_sql": "SELECT T1.first, T1.middle, T1.last FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE strftime('%M', T2.ser_time) > '20'", "pred_sql": "SELECT client.first, client.middle, client.last \nFROM client \nJOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client \nWHERE callcenterlogs.ser_time >= '00:20:00';"}
{"sample_id": 299, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T3.sex) FROM state AS T1 INNER JOIN district AS T2 ON T1.StateCode = T2.state_abbrev INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.state = 'Massachusetts' AND T3.sex = 'Male'", "pred_sql": "SELECT COUNT(*) AS male_client_count FROM client WHERE sex = 'male' AND state = 'MA';"}
{"sample_id": 351, "db_id": "retail_complains", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.email LIKE '%@gmail.com' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.email) FROM client AS T1 INNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.\"rand client\" WHERE T2.server = 'ZOHARI'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM callcenterlogs WHERE server = 'ZOHARI')) AS google_complaint_percentage\nFROM callcenterlogs\nJOIN client ON callcenterlogs.rand client = client.client_id\nWHERE client.email LIKE '%@gmail.com%' AND callcenterlogs.server = 'ZOHARI';"}
{"sample_id": 329, "db_id": "retail_complains", "gold_sql": "SELECT T1.Issue FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T2.priority = 2 GROUP BY T1.Issue ORDER BY COUNT(T1.Issue) DESC LIMIT 1", "pred_sql": "SELECT issue, COUNT(issue) AS issue_count \nFROM callcenterlogs \nJOIN events ON callcenterlogs.complaint_id = events.complaint_id \nWHERE callcenterlogs.priority = 'higher' \nGROUP BY issue \nORDER BY issue_count DESC \nLIMIT 1;"}
{"sample_id": 383, "db_id": "retail_complains", "gold_sql": "SELECT T2.city FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'West North Central' AND T1.age > 60 GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1", "pred_sql": "SELECT c.city, COUNT(c.client_id) AS customer_count\nFROM client c\nJOIN state s ON c.state = s.statecode\nWHERE s.region = 'West North Central' AND c.age = 'elder'\nGROUP BY c.city\nORDER BY customer_count DESC\nLIMIT 1;"}
{"sample_id": 246, "db_id": "retail_complains", "gold_sql": "SELECT CASE WHEN T2.\"Consumer consent provided?\" IN (NULL, 'N/A', 'Empty') THEN 'No' ELSE 'Yes' END FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.first = 'Matthew' AND T1.last = 'Pierce' AND T2.\"Date received\" = '2016-10-28'", "pred_sql": "SELECT \"consumer consent provided?\" FROM events JOIN client ON events.client_id = client.client_id WHERE client.first = 'Matthew' AND client.last = 'Pierce' AND events.date received = '2016-10-28';"}
{"sample_id": 338, "db_id": "retail_complains", "gold_sql": "SELECT T2.division FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id GROUP BY T2.division ORDER BY COUNT(T2.division) DESC LIMIT 1, 1", "pred_sql": "SELECT region, COUNT(client.client_id) AS client_count \nFROM client \nJOIN district ON client.district_id = district.district_id \nJOIN state ON district.state_abbrev = state.statecode \nGROUP BY region \nORDER BY client_count DESC \nLIMIT 1 OFFSET 1;"}
{"sample_id": 281, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'", "pred_sql": "SELECT COUNT(*) AS complaint_count \nFROM callcenterlogs cl \nJOIN client c ON cl.rand client = c.client_id \nWHERE cl.type = 'Credit card' AND c.sex = 'female';"}
{"sample_id": 390, "db_id": "retail_complains", "gold_sql": "SELECT T1.phone, T2.\"Complaint ID\" FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Company response to consumer\" = 'In progress'", "pred_sql": "SELECT client.phone, callcenterlogs.complaint_id FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.outcome IS NULL;"}
{"sample_id": 250, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T2.Issue) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Issue = 'Deposits and withdrawals' AND T1.city = 'New York City'", "pred_sql": "SELECT COUNT(DISTINCT c.client_id) AS client_count \nFROM client c \nJOIN callcenterlogs cl ON c.client_id = cl.rand_client \nJOIN events e ON cl.complaint_id = e.complaint_id \nJOIN district d ON c.district_id = d.district_id \nWHERE d.city = 'New York' AND e.issue = 'Deposits and withdrawals';"}
{"sample_id": 368, "db_id": "retail_complains", "gold_sql": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'Middle Atlantic' AND T1.sex = 'Female' AND T1.age < 18", "pred_sql": "SELECT COUNT(*) AS female_under_18_count \nFROM client c \nJOIN state s ON c.state = s.statecode \nWHERE s.region = 'Middle Atlantic' \nAND c.sex = 'female' \nAND CAST(c.age AS INTEGER) <= 18;"}
{"sample_id": 343, "db_id": "retail_complains", "gold_sql": "SELECT CASE WHEN SUM(CASE WHEN email LIKE '%@gmail.com' THEN 1 ELSE 0 END) > SUM(CASE WHEN email LIKE '%@outlook.com' THEN 1 ELSE 0 END) THEN 'Google account' ELSE 'Microsoft account' END FROM client WHERE age BETWEEN 13 AND 19", "pred_sql": "SELECT 'Google' AS account_type, COUNT(*) AS client_count FROM client WHERE age = 'teenager' AND email LIKE '%@gmail.com' UNION ALL SELECT 'Microsoft' AS account_type, COUNT(*) AS client_count FROM client WHERE age = 'teenager' AND email LIKE '%@outlook.com';"}
{"sample_id": 321, "db_id": "retail_complains", "gold_sql": "SELECT T3.ser_time FROM events AS T1 INNER JOIN client AS T2 ON T1.Client_ID = T2.client_id INNER JOIN callcenterlogs AS T3 ON T1.\"Complaint ID\" = T3.\"Complaint ID\" WHERE T2.first = 'Kendall' AND T2.last = 'Allen' AND T2.sex = 'Female' AND T1.Product = 'Credit card'", "pred_sql": "SELECT callcenterlogs.ser_time FROM callcenterlogs JOIN client ON callcenterlogs.rand client = client.client_id WHERE client.first = 'Kendall' AND client.last = 'Allen' AND callcenterlogs.type = 'credit card';"}
{"sample_id": 278, "db_id": "retail_complains", "gold_sql": "SELECT T1.first, T1.middle, T1.last, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Submitted via\" = 'Fax'", "pred_sql": "SELECT client.first, client.last, client.phone \nFROM client \nJOIN events ON client.client_id = events.client_id \nJOIN callcenterlogs ON events.complaint_id = callcenterlogs.complaint_id \nWHERE callcenterlogs.submitted_via = 'fax';"}
{"sample_id": 367, "db_id": "retail_complains", "gold_sql": "SELECT strftime('%Y', \"Date received\"), COUNT(\"Date received\") FROM events WHERE product = 'Credit card' AND issue = 'Overlimit fee' GROUP BY strftime('%Y', \"Date received\") HAVING COUNT(\"Date received\")", "pred_sql": "SELECT strftime('%Y', e.date_received) AS year, COUNT(*) AS complaint_count\nFROM events e\nJOIN callcenterlogs c ON e.complaint_id = c.complaint_id\nJOIN client cl ON e.client_id = cl.client_id\nWHERE e.product = 'Credit Card' AND e.issue = 'Overlimit Fees'\nGROUP BY year;"}
{"sample_id": 400, "db_id": "retail_complains", "gold_sql": "SELECT DISTINCT T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Male' AND T1.age < 25", "pred_sql": "SELECT e.issue, e.sub_issue \nFROM events e \nJOIN client c ON e.client_id = c.client_id \nWHERE c.sex = 'male' AND c.age <= 25;"}
{"sample_id": 291, "db_id": "retail_complains", "gold_sql": "SELECT Client_ID FROM events WHERE \"Consumer consent provided?\" = 'N/A' OR 'Consumer consent provided?' IS NULL OR 'Consumer consent provided?' = ''", "pred_sql": "SELECT client_id FROM client WHERE social IS NULL OR social = ''"}
{"sample_id": 335, "db_id": "retail_complains", "gold_sql": "SELECT DISTINCT T2.server FROM events AS T1 INNER JOIN callcenterlogs AS T2 ON T1.\"Complaint ID\" = T2.\"Complaint ID\" WHERE T1.\"Submitted via\" = 'Phone' AND T1.\"Timely response?\" = 'No'", "pred_sql": "SELECT DISTINCT callcenterlogs.server \nFROM callcenterlogs \nJOIN events ON callcenterlogs.complaint_id = events.complaint_id \nWHERE events.timely_response = 'No';"}
{"sample_id": 387, "db_id": "retail_complains", "gold_sql": "SELECT T1.email FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Date received\" = '2014-07-03'", "pred_sql": "SELECT client.email FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.date_received = '7/3/2014';"}
{"sample_id": 386, "db_id": "retail_complains", "gold_sql": "SELECT T1.first, T1.phone FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.\"Complaint ID\" = 'CR0922485'", "pred_sql": "SELECT client.first, client.phone FROM client JOIN callcenterlogs ON client.client_id = callcenterlogs.rand_client WHERE callcenterlogs.complaint_id = 'CR0922485';"}
{"sample_id": 2292, "db_id": "movielens", "gold_sql": "SELECT DISTINCT T1.movieid FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.runningtime = 0 AND T2.rating = ( SELECT MAX(rating) FROM u2base )", "pred_sql": "SELECT movies.movieid, AVG(u2base.rating) AS avg_rating \nFROM movies \nJOIN u2base ON movies.movieid = u2base.movieid \nWHERE movies.runningtime = '0' \nGROUP BY movies.movieid \nORDER BY avg_rating DESC \nLIMIT 1;"}
{"sample_id": 2306, "db_id": "movielens", "gold_sql": "SELECT T2.actorid FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'France' GROUP BY T2.actorid HAVING COUNT(T1.movieid) > 2", "pred_sql": "SELECT ma.actorid FROM movies2actors ma JOIN movies m ON ma.movieid = m.movieid WHERE m.country = 'France' GROUP BY ma.actorid HAVING COUNT(m.movieid) >= 2;"}
{"sample_id": 2270, "db_id": "movielens", "gold_sql": "SELECT DISTINCT T2.age FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 3", "pred_sql": "SELECT DISTINCT u.age FROM u2base AS u2 JOIN users AS u ON u2.userid = u.userid WHERE u2.rating = 3;"}
{"sample_id": 2321, "db_id": "movielens", "gold_sql": "SELECT T1.userid, T1.age FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.movieid = '2409051' AND T2.rating = 2", "pred_sql": "SELECT userid, age FROM u2base JOIN users ON u2base.userid = users.userid WHERE rating = 2 AND movieid = 2409051;"}
{"sample_id": 2287, "db_id": "movielens", "gold_sql": "SELECT T3.country FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN movies AS T3 ON T2.movieid = T3.movieid WHERE T1.a_gender = 'F' AND T1.a_quality = 0", "pred_sql": "SELECT DISTINCT m.country \nFROM movies m \nJOIN movies2actors ma ON m.movieid = ma.movieid \nJOIN actors a ON ma.actorid = a.actorid \nWHERE a.a_quality = (SELECT MIN(a_quality) FROM actors)"}
{"sample_id": 2285, "db_id": "movielens", "gold_sql": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4", "pred_sql": "SELECT DISTINCT md.genre \nFROM movies2directors md \nJOIN directors d ON md.directorid = d.directorid \nWHERE d.avg_revenue = (SELECT MAX(avg_revenue) FROM directors);"}
{"sample_id": 2288, "db_id": "movielens", "gold_sql": "SELECT AVG(T2.rating) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid INNER JOIN movies2directors AS T3 ON T1.movieid = T3.movieid WHERE T1.country = 'USA' AND T3.genre = 'Action' GROUP BY T1.movieid ORDER BY AVG(T2.rating) DESC LIMIT 1", "pred_sql": "SELECT MAX(avg_rating) AS highest_average_rating \nFROM (\n    SELECT AVG(u2base.rating) AS avg_rating \n    FROM movies \n    JOIN movies2directors ON movies.movieid = movies2directors.movieid \n    JOIN movies2actors ON movies.movieid = movies2actors.movieid \n    JOIN u2base ON movies.movieid = u2base.movieid \n    WHERE movies.country = 'USA' AND movies2directors.genre = 'action' \n    GROUP BY movies.movieid\n) AS action_movies_ratings;"}
{"sample_id": 2313, "db_id": "movielens", "gold_sql": "SELECT COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.genre IN ('Action', 'drama')", "pred_sql": "SELECT COUNT(*) AS movie_count FROM movies2directors md JOIN movies m ON md.movieid = m.movieid WHERE m.year = '4' AND md.genre IN (1, 2);"}
{"sample_id": 2264, "db_id": "movielens", "gold_sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T3.a_gender = 'F' AND T1.year = 4", "pred_sql": "SELECT COUNT(DISTINCT a.actorid) AS female_actor_count\nFROM actors a\nJOIN movies2actors ma ON a.actorid = ma.actorid\nJOIN movies m ON ma.movieid = m.movieid\nWHERE a.a_gender = 'F' AND m.year = '4';"}
{"sample_id": 2331, "db_id": "movielens", "gold_sql": "SELECT CAST(SUM(IIF(T2.cast_num = 2 AND T1.a_quality = 2, 1, 0)) AS REAL) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM movies2actors WHERE movieid = '1672580')) AS female_percentage\nFROM movies2actors ma\nJOIN actors a ON ma.actorid = a.actorid\nWHERE ma.movieid = '1672580' AND a.a_gender = 'F' AND a.a_quality = '2'\nGROUP BY ma.actorid\nHAVING COUNT(ma.movieid) = 2;"}
{"sample_id": 2253, "db_id": "movielens", "gold_sql": "SELECT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA' GROUP BY T1.movieid ORDER BY AVG(T1.rating) DESC LIMIT 10", "pred_sql": "SELECT movies.movieid, AVG(u2base.rating) AS avg_rating \nFROM movies \nJOIN u2base ON movies.movieid = u2base.movieid \nWHERE movies.country = 'USA' \nGROUP BY movies.movieid \nORDER BY avg_rating DESC \nLIMIT 10;"}
{"sample_id": 2281, "db_id": "movielens", "gold_sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.year = 4 AND T1.rating = 1", "pred_sql": "SELECT DISTINCT movieid FROM movies WHERE year = (SELECT MAX(year) FROM movies) AND movieid IN (SELECT movieid FROM u2base ORDER BY rating ASC LIMIT 1)"}
{"sample_id": 2310, "db_id": "movielens", "gold_sql": "SELECT COUNT(T1.directorid) FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4 AND (T2.genre = 'Adventure' OR T2.genre = 'Action')", "pred_sql": "SELECT COUNT(DISTINCT d.directorid) AS director_count \nFROM directors d \nJOIN movies2directors md ON d.directorid = md.directorid \nWHERE d.avg_revenue = 4 AND md.genre IN (1, 2);"}
{"sample_id": 2248, "db_id": "movielens", "gold_sql": "SELECT COUNT(T1.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 5 AND T2.u_gender = 'M'", "pred_sql": "SELECT COUNT(*) AS male_count FROM users INNER JOIN u2base ON users.userid = u2base.userid WHERE u2base.rating = 5 AND users.u_gender = 'M';"}
{"sample_id": 2271, "db_id": "movielens", "gold_sql": "SELECT T3.country FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid INNER JOIN movies AS T3 ON T1.movieid = T3.movieid WHERE T1.genre = 'Action' GROUP BY T3.country ORDER BY COUNT(T3.country) DESC LIMIT 1", "pred_sql": "SELECT directors.country, COUNT(movies2directors.movieid) AS action_movie_count\nFROM movies2directors\nJOIN movies ON movies2directors.movieid = movies.movieid\nJOIN directors ON movies2directors.directorid = directors.directorid\nWHERE movies2directors.genre = 'Action'\nGROUP BY directors.country\nORDER BY action_movie_count DESC;"}
{"sample_id": 2303, "db_id": "movielens", "gold_sql": "SELECT CAST(SUM(IIF(T2.avg_revenue > T2.d_quality, 1, 0)) AS REAL) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action'", "pred_sql": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM movies2directors WHERE genre = 'action') AS proportion\nFROM directors\nWHERE d_quality > (SELECT AVG(d_quality) FROM directors) AND directorid IN (SELECT directorid FROM movies2directors WHERE genre = 'action' AND movieid IN (SELECT movieid FROM movies WHERE title = 'box office success paradox'));"}
{"sample_id": 2323, "db_id": "movielens", "gold_sql": "SELECT DISTINCT T1.movieid FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'France' AND T1.rating = 1", "pred_sql": "SELECT DISTINCT m.movieid FROM movies m JOIN u2base u ON m.movieid = u.movieid WHERE m.country = 'France' ORDER BY u.rating ASC LIMIT 1;"}
{"sample_id": 2324, "db_id": "movielens", "gold_sql": "SELECT COUNT(T2.actorid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid WHERE T1.country IN ('France', 'USA')", "pred_sql": "SELECT COUNT(DISTINCT a.actorid) AS female_actor_count \nFROM actors a \nJOIN movies2actors ma ON a.actorid = ma.actorid \nJOIN movies m ON ma.movieid = m.movieid \nWHERE a.a_gender = 'F' AND (m.country = 'France' OR m.country = 'USA');"}
{"sample_id": 2319, "db_id": "movielens", "gold_sql": "SELECT T2.movieid FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T1.age = 25 GROUP BY T2.movieid ORDER BY COUNT(T1.userid) DESC LIMIT 1", "pred_sql": "SELECT m.movieid, COUNT(u.userid) AS rating_count\nFROM movies m\nJOIN u2base u ON m.movieid = u.movieid\nJOIN users us ON u.userid = us.userid\nWHERE us.age = '25'\nGROUP BY m.movieid\nORDER BY rating_count DESC;"}
{"sample_id": 2256, "db_id": "movielens", "gold_sql": "SELECT COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid INNER JOIN u2base AS T3 ON T2.movieid = T3.movieid WHERE T1.a_quality = 5 AND T3.rating = 5", "pred_sql": "SELECT COUNT(DISTINCT ma.actorid) AS best_actors_with_rating_5\nFROM actors ma\nJOIN movies2actors ma2m ON ma.actorid = ma2m.actorid\nJOIN u2base u ON ma2m.movieid = u.movieid\nWHERE ma.a_quality = 'high' AND u.rating = 5;"}
{"sample_id": 2257, "db_id": "movielens", "gold_sql": "SELECT AVG(T1.rating) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'france' AND T2.year = 4", "pred_sql": "SELECT AVG(u2base.rating) AS average_rating FROM movies JOIN u2base ON movies.movieid = u2base.movieid WHERE movies.year = '4' AND movies.country = 'France';"}
{"sample_id": 2787, "db_id": "european_football_1", "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Bundesliga' AND T1.AwayTeam = 'Werder Bremen' AND T1.FTR = 'A'", "pred_sql": "SELECT COUNT(*) AS away_wins FROM matchs WHERE awayteam = 'Werder Bremen' AND ftr = 'A' AND div = (SELECT division FROM divisions WHERE name = 'Bundesliga')"}
{"sample_id": 2777, "db_id": "european_football_1", "gold_sql": "SELECT COUNT(T1.Date) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish League One' AND T1.Date = ( SELECT Date FROM matchs WHERE FTHG = 5 AND FTAG = 2 AND HomeTeam = 'Pro Vercelli' AND AwayTeam = 'Pescara' )", "pred_sql": "SELECT COUNT(*) FROM matchs WHERE date = (SELECT date FROM matchs WHERE hometeam = 'Pro Vercelli' AND awayteam = 'Pescara' AND fthg = '5' AND ftag = '2') AND div = (SELECT division FROM divisions WHERE name = 'Scottish League One');"}
{"sample_id": 2778, "db_id": "european_football_1", "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.country = 'Greece' AND T1.FTHG = 5 AND T1.FTAG = 0", "pred_sql": "SELECT COUNT(*) AS number_of_games FROM matchs m JOIN divisions d ON m.div = d.division WHERE m.fthg = '5' AND m.ftag = '0' AND d.country = 'Greece';"}
{"sample_id": 2759, "db_id": "european_football_1", "gold_sql": "SELECT DISTINCT T2.division,T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Hearts' AND T1.AwayTeam = 'Hibernian'", "pred_sql": "SELECT divisions.name, divisions.country FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE matchs.hometeam = 'Hearts' AND matchs.awayteam = 'Hibernian';"}
{"sample_id": 2776, "db_id": "european_football_1", "gold_sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.FTAG = 0 AND T1.FTHG = 0 GROUP BY T2.division ORDER BY COUNT(T1.FTAG) DESC LIMIT 1", "pred_sql": "SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.div WHERE m.fthg = 0 AND m.ftag = 0 GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1;"}
{"sample_id": 2775, "db_id": "european_football_1", "gold_sql": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2020-02-22' AND T1.FTAG + T1.FTHG > 5 ORDER BY T1.FTAG + T1.FTHG DESC LIMIT 1", "pred_sql": "SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.div WHERE m.date = '2020-02-22' AND (m.fthg + m.ftag) > 5 GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1;"}
{"sample_id": 2764, "db_id": "european_football_1", "gold_sql": "SELECT COUNT(T1.FTR) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Seria A' AND T1.FTR = 'D'", "pred_sql": "SELECT COUNT(*) AS equal_goals_count FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Seria A' AND matchs.fthg = matchs.ftag;"}
{"sample_id": 2773, "db_id": "european_football_1", "gold_sql": "SELECT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division GROUP BY T2.country ORDER BY SUM(T1.FTAG) DESC LIMIT 1", "pred_sql": "SELECT d.country, MAX(m.ftag) AS max_away_goals\nFROM matchs m\nJOIN divisions d ON m.div = d.division\nGROUP BY d.country\nORDER BY max_away_goals DESC\nLIMIT 1;"}
{"sample_id": 2762, "db_id": "european_football_1", "gold_sql": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T1.FTR = 'D' GROUP BY T2.division ORDER BY COUNT(FTR) LIMIT 1", "pred_sql": "SELECT d.name FROM divisions d JOIN matchs m ON d.division = m.div WHERE m.season = '2019' GROUP BY d.name ORDER BY SUM(CASE WHEN m.fthg = m.ftag THEN 1 ELSE 0 END) ASC LIMIT 1;"}
{"sample_id": 2748, "db_id": "european_football_1", "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2019 AND T2.name = 'Scottish Championship' AND T1.FTAG = 2 AND T1.FTHG = 2", "pred_sql": "SELECT COUNT(*) FROM matchs JOIN divisions ON matchs.div = divisions.division WHERE divisions.name = 'Scottish Championship' AND matchs.season = '2019' AND matchs.fthg = '2' AND matchs.ftag = '2';"}
{"sample_id": 2758, "db_id": "european_football_1", "gold_sql": "SELECT COUNT(T1.Div) FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T2.name = 'Scottish Premiership' AND (T1.season BETWEEN 2006 AND 2008)", "pred_sql": "SELECT COUNT(*) AS match_count FROM matchs m JOIN divisions d ON m.div = d.division WHERE d.name = 'Scottish Premiership' AND m.date BETWEEN '2006-01-01' AND '2008-12-31';"}
{"sample_id": 2742, "db_id": "european_football_1", "gold_sql": "SELECT AwayTeam FROM matchs WHERE HomeTeam = 'Caen' AND season = 2010 AND FTR = 'A' GROUP BY AwayTeam ORDER BY COUNT(AwayTeam) DESC LIMIT 1", "pred_sql": "SELECT awayteam, COUNT(*) AS total_matches, SUM(CASE WHEN ftr = 'A' THEN 1 ELSE 0 END) AS away_wins, (SUM(CASE WHEN ftr = 'A' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) * 100 AS winning_percentage FROM matchs WHERE div IN (SELECT division FROM divisions WHERE name = 'Caen') AND season = '2010' GROUP BY awayteam ORDER BY winning_percentage DESC LIMIT 1;"}
{"sample_id": 5685, "db_id": "language_corpus", "gold_sql": "SELECT title FROM pages WHERE words < 10", "pred_sql": "SELECT title FROM pages WHERE lid = 1 AND words < 10;"}
{"sample_id": 5693, "db_id": "language_corpus", "gold_sql": "SELECT T1.title, T2.occurrences FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid INNER JOIN words AS T3 ON T2.wid = T3.wid WHERE T3.word = 'quipu'", "pred_sql": "SELECT pages.title, pages_words.occurrences \nFROM pages \nJOIN pages_words ON pages.pid = pages_words.pid \nJOIN words ON pages_words.wid = words.wid \nWHERE words.word = 'quipu';"}
{"sample_id": 5742, "db_id": "language_corpus", "gold_sql": "SELECT page FROM pages WHERE words = ( SELECT MAX(words) FROM pages )", "pred_sql": "SELECT pid FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 1;"}
{"sample_id": 5749, "db_id": "language_corpus", "gold_sql": "SELECT T2.word FROM langs_words AS T1 INNER JOIN words AS T2 ON T1.wid = T2.wid WHERE T1.occurrences = ( SELECT MAX(occurrences) FROM langs_words )", "pred_sql": "SELECT word, occurrences FROM words WHERE wid IN (SELECT wid FROM langs_words WHERE lid = 1) ORDER BY occurrences DESC LIMIT 1;"}
{"sample_id": 5715, "db_id": "language_corpus", "gold_sql": "SELECT T1.word, T3.word FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st INNER JOIN words AS T3 ON T3.wid = T2.w2nd WHERE T2.occurrences = 4 LIMIT 1", "pred_sql": "SELECT w1st, w2nd FROM biwords WHERE occurrences = 4 LIMIT 1;"}
{"sample_id": 5736, "db_id": "language_corpus", "gold_sql": "SELECT page FROM pages WHERE words > 300 LIMIT 3", "pred_sql": "SELECT * FROM pages WHERE words > 300 LIMIT 3;"}
{"sample_id": 5811, "db_id": "language_corpus", "gold_sql": "SELECT title FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 3", "pred_sql": "SELECT title FROM pages WHERE lid = 1 ORDER BY words DESC LIMIT 3;"}
{"sample_id": 5766, "db_id": "language_corpus", "gold_sql": "SELECT DISTINCT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid < 20", "pred_sql": "SELECT title FROM pages WHERE pid < 20;"}
{"sample_id": 5805, "db_id": "language_corpus", "gold_sql": "SELECT T1.word FROM words AS T1 INNER JOIN langs_words AS T2 ON T1.wid = T2.wid WHERE T2.occurrences = 274499 AND T2.lid = 1", "pred_sql": "SELECT word FROM words WHERE occurrences = '274499'"}
{"sample_id": 5744, "db_id": "language_corpus", "gold_sql": "SELECT pages FROM langs WHERE lang = 'ca'", "pred_sql": "SELECT COUNT(*) AS total_pages FROM pages WHERE lid = 1;"}
{"sample_id": 5768, "db_id": "language_corpus", "gold_sql": "SELECT COUNT(T2.wid), T1.lid FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.occurrences = 8", "pred_sql": "SELECT pages.lid, COUNT(*) AS word_count\nFROM words\nJOIN pages_words ON words.wid = pages_words.wid\nWHERE pages_words.occurrences = 8\nGROUP BY pages.lid;"}
{"sample_id": 5740, "db_id": "language_corpus", "gold_sql": "SELECT words FROM pages WHERE revision = 27457362", "pred_sql": "SELECT words FROM pages WHERE revision = 27457362;"}
{"sample_id": 5718, "db_id": "language_corpus", "gold_sql": "SELECT T3.revision FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'fresc'", "pred_sql": "SELECT pages.revision FROM pages JOIN pages_words ON pages.pid = pages_words.pid JOIN words ON pages_words.wid = words.wid WHERE words.word = 'fresc';"}
{"sample_id": 5714, "db_id": "language_corpus", "gold_sql": "SELECT T2.occurrences FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'del' AND T3.title = 'Any anomal\u00c3\u00adstic'", "pred_sql": "SELECT occurrences FROM pages_words JOIN pages ON pages.pid = pages_words.pid WHERE pages.title = 'Any anomal\u00c3\u00adstic' AND pages_words.wid = (SELECT wid FROM words WHERE word = 'del');"}
{"sample_id": 5777, "db_id": "language_corpus", "gold_sql": "SELECT word FROM words WHERE occurrences > 200000", "pred_sql": "SELECT word FROM words WHERE occurrences > 200000;"}
{"sample_id": 5812, "db_id": "language_corpus", "gold_sql": "SELECT revision FROM pages WHERE lid = 1 AND title = 'Arqueologia'", "pred_sql": "SELECT revision FROM pages WHERE title = 'Arqueologia' AND lid = 1;"}
{"sample_id": 5702, "db_id": "language_corpus", "gold_sql": "SELECT SUM(occurrences) FROM biwords WHERE w1st = 86 AND w2nd = 109", "pred_sql": "SELECT occurrences FROM biwords WHERE lid = 1 AND w1st = (SELECT wid FROM words WHERE word = 'i') AND w2nd = (SELECT wid FROM words WHERE word = 'a');"}
{"sample_id": 5817, "db_id": "language_corpus", "gold_sql": "SELECT T3.title FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid INNER JOIN pages AS T3 ON T2.pid = T3.pid WHERE T1.word = 'grec' AND T2.occurrences = 52", "pred_sql": "SELECT pages.title FROM pages JOIN pages_words ON pages.pid = pages_words.pid JOIN words ON pages_words.wid = words.wid WHERE words.word = 'grec' AND pages_words.occurrences = 52;"}
{"sample_id": 5690, "db_id": "language_corpus", "gold_sql": "SELECT T2.pid FROM words AS T1 INNER JOIN pages_words AS T2 ON T1.wid = T2.wid WHERE T1.word = 'decimal'", "pred_sql": "SELECT pages.pid FROM pages JOIN pages_words ON pages.pid = pages_words.pid JOIN words ON pages_words.wid = words.wid WHERE words.word = 'decimal';"}
{"sample_id": 5778, "db_id": "language_corpus", "gold_sql": "SELECT T2.locale FROM pages AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.title = 'Asclepi'", "pred_sql": "SELECT langs.locale FROM langs JOIN pages ON langs.lid = pages.lid WHERE pages.title = 'Asclepi';"}
{"sample_id": 5789, "db_id": "language_corpus", "gold_sql": "SELECT pages FROM langs WHERE lang = 'ca'", "pred_sql": "SELECT COUNT(*) AS total_pages FROM pages WHERE lid = 1;"}
{"sample_id": 5725, "db_id": "language_corpus", "gold_sql": "SELECT SUM(occurrences) FROM words WHERE LENGTH(word) = 3", "pred_sql": "SELECT SUM(occurrences) AS total_occurrences FROM words WHERE LENGTH(word) = 3;"}
{"sample_id": 5760, "db_id": "language_corpus", "gold_sql": "SELECT SUM(occurrences) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'barcelona' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'precolombina' )", "pred_sql": "SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'barcelona') AND w2nd = (SELECT wid FROM words WHERE word = 'precolombina');"}
{"sample_id": 5717, "db_id": "language_corpus", "gold_sql": "SELECT w2nd FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'john' ) LIMIT 10", "pred_sql": "SELECT w2.word, bw.occurrences \nFROM biwords bw \nJOIN words w1 ON bw.w1st = w1.wid \nJOIN words w2 ON bw.w2nd = w2.wid \nWHERE w1.word = 'John' \nLIMIT 10;"}
{"sample_id": 5727, "db_id": "language_corpus", "gold_sql": "SELECT CAST(SUM(CASE WHEN w1st = 34 THEN 1 ELSE 0 END) AS REAL) / COUNT(w1st) FROM biwords", "pred_sql": "SELECT AVG(occurrences) AS average_repetitions FROM biwords WHERE w1st = 34;"}
{"sample_id": 5751, "db_id": "language_corpus", "gold_sql": "SELECT SUM(T1.occurrences) FROM pages_words AS T1 INNER JOIN biwords AS T2 ON T2.w2nd = T1.wid WHERE T2.w2nd = 109 AND T2.w1st = 1 AND T1.pid = 16", "pred_sql": "SELECT occurrences FROM pages_words WHERE pid = 16 AND wid IN (SELECT w2nd FROM biwords WHERE w1st = 1 AND w2nd = 109)"}
{"sample_id": 5705, "db_id": "language_corpus", "gold_sql": "SELECT SUM(words) FROM pages WHERE title IN ('Adam', 'Acampada')", "pred_sql": "SELECT SUM(p.words) AS total_words FROM pages p WHERE p.title IN ('Adam', 'Acampada');"}
{"sample_id": 5758, "db_id": "language_corpus", "gold_sql": "SELECT title FROM pages WHERE revision = 106601", "pred_sql": "SELECT title FROM pages WHERE revision = 106601 AND lid = 1;"}
{"sample_id": 3162, "db_id": "donor", "gold_sql": "SELECT T1.title, SUM(T3.donation_to_project), CAST((T2.total_price_excluding_optional_support - SUM(T3.donation_to_project)) AS REAL) * 100 / SUM(T3.donation_to_project) FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid ORDER BY T2.total_price_excluding_optional_support DESC LIMIT 1", "pred_sql": "SELECT p.title, \n       p.total_price_including_optional_support AS total_cost, \n       COALESCE(SUM(d.donation_total), 0) AS total_donated, \n       (p.total_price_including_optional_support - COALESCE(SUM(d.donation_total), 0)) AS amount_lacking, \n       ((COALESCE(SUM(d.donation_total), 0) / p.total_price_including_optional_support) * 100) AS percentage_collected \nFROM projects p \nLEFT JOIN donations d ON p.projectid = d.projectid \nGROUP BY p.projectid \nORDER BY total_cost DESC \nLIMIT 1;"}
{"sample_id": 3273, "db_id": "donor", "gold_sql": "SELECT school_city FROM projects WHERE school_metro = 'suburban' AND school_county = 'Los Angeles'", "pred_sql": "SELECT DISTINCT school_city FROM projects WHERE school_metro = 'Los Angeles County Suburban';"}
{"sample_id": 3290, "db_id": "donor", "gold_sql": "SELECT SUM(T2.donation_optional_support + T2.donation_to_project) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_county = 'Fresno'", "pred_sql": "SELECT AVG(donation_total) AS average_donations FROM donations JOIN projects ON donations.projectid = projects.projectid WHERE projects.school_county = 'Fresno County';"}
{"sample_id": 3232, "db_id": "donor", "gold_sql": "SELECT T2.school_city FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title = 'ABC Read'", "pred_sql": "SELECT school_city FROM projects JOIN essays ON projects.projectid = essays.projectid WHERE essays.title = 'ABC Read';"}
{"sample_id": 3256, "db_id": "donor", "gold_sql": "SELECT T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'R & A Plant Genetics' AND T1.vendor_name = 'Benchmark Education'", "pred_sql": "SELECT projects.school_latitude, projects.school_longitude FROM projects JOIN resources ON projects.projectid = resources.projectid WHERE resources.vendor_name = 'R & A Plant Genetics' AND resources.project_resource_type = 'Benchmark Education';"}
{"sample_id": 3271, "db_id": "donor", "gold_sql": "SELECT COUNT(projectid) FROM resources WHERE vendor_name = 'Quill.com' AND item_quantity BETWEEN 5 AND 10", "pred_sql": "SELECT COUNT(DISTINCT p.projectid) AS project_count\nFROM projects p\nJOIN resources r ON p.projectid = r.projectid\nWHERE r.vendor_name = 'Quill.com'\nAND r.item_quantity BETWEEN 5 AND 10;"}
{"sample_id": 3251, "db_id": "donor", "gold_sql": "SELECT school_county FROM projects WHERE poverty_level = 'low poverty' AND school_state = 'NY' GROUP BY school_state ORDER BY COUNT(poverty_level) DESC LIMIT 1", "pred_sql": "SELECT school_county, COUNT(*) as project_count \nFROM projects \nWHERE school_state = 'New York' AND poverty_level = 'low' \nGROUP BY school_county \nORDER BY project_count DESC;"}
{"sample_id": 3148, "db_id": "donor", "gold_sql": "SELECT donation_timestamp, donation_total FROM donations WHERE donation_total = ( SELECT donation_total FROM donations ORDER BY donation_total DESC LIMIT 1 )", "pred_sql": "SELECT donation_timestamp, MAX(donation_total) AS highest_donation_amount FROM donations GROUP BY donation_timestamp ORDER BY highest_donation_amount DESC LIMIT 1;"}
{"sample_id": 3154, "db_id": "donor", "gold_sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'", "pred_sql": "SELECT title FROM projects WHERE teacher_acctid IN (SELECT teacher_acctid FROM projects WHERE teacher_prefix = 'Dr. ');"}
{"sample_id": 3214, "db_id": "donor", "gold_sql": "SELECT COUNT(T1.schoolid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_magnet = 't' AND T2.payment_included_acct_credit = 'f'", "pred_sql": "SELECT COUNT(DISTINCT p.schoolid) AS public_magnet_school_count \nFROM projects p \nJOIN donations d ON p.projectid = d.projectid \nWHERE d.payment_included_acct_credit = 'f' \nAND p.school_magnet = 't';"}
{"sample_id": 3187, "db_id": "donor", "gold_sql": "SELECT T1.title FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.teacher_prefix LIKE 'Dr.' AND T2.students_reached > 300", "pred_sql": "SELECT p.title \nFROM projects p \nJOIN essays e ON p.projectid = e.projectid \nWHERE e.teacher_acctid IN (SELECT teacher_acctid FROM projects WHERE teacher_prefix = 'Dr. ') \nAND p.students_reached > 300;"}
{"sample_id": 3224, "db_id": "donor", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.school_city LIKE 'Brooklyn' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'", "pred_sql": "SELECT (COUNT(DISTINCT p.schoolid) * 100.0 / (SELECT COUNT(DISTINCT schoolid) FROM projects WHERE school_city = 'Brooklyn')) AS percentage_brooklyn_schools\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nWHERE d.is_teacher_acct = 't' AND p.school_city = 'Brooklyn';"}
{"sample_id": 3199, "db_id": "donor", "gold_sql": "SELECT T1.vendor_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T2.total_price_including_optional_support - T2.total_price_including_optional_support DESC LIMIT 1", "pred_sql": "SELECT vendor_name FROM resources WHERE projectid = (SELECT projectid FROM donations ORDER BY donation_optional_support DESC LIMIT 1)"}
{"sample_id": 3235, "db_id": "donor", "gold_sql": "SELECT T1.title FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_message LIKE 'Donation on behalf of Matt Carpenter because I''m a strong believer in education.'", "pred_sql": "SELECT p.title FROM projects p JOIN donations d ON p.projectid = d.projectid WHERE d.donation_message = 'Donation on behalf of Matt Carpenter because I\\'m a strong believer in education';"}
{"sample_id": 3198, "db_id": "donor", "gold_sql": "SELECT T2.schoolid FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.vendor_name = 'Lakeshore Learning Materials' ORDER BY T2.fulfillment_labor_materials DESC LIMIT 1", "pred_sql": "SELECT p.schoolid FROM projects p JOIN resources r ON p.projectid = r.projectid WHERE r.vendor_name = 'Lakeshore Learning Materials' ORDER BY p.fulfillment_labor_materials DESC LIMIT 1;"}
{"sample_id": 3295, "db_id": "donor", "gold_sql": "SELECT T2.school_city, T2.school_latitude, T2.school_longitude FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.item_name = 'Viewscreen LCD FROM Texas Instruments, TI-84 Plus'", "pred_sql": "SELECT p.school_latitude, p.school_longitude \nFROM projects p \nJOIN resources r ON p.projectid = r.projectid \nWHERE r.item_name = 'Viewscreen LCD from Texas Instruments, TI-84 Plus';"}
{"sample_id": 3210, "db_id": "donor", "gold_sql": "SELECT CASE WHEN teacher_prefix = 'Dr.' THEN 'Yes' ELSE 'NO' END FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'", "pred_sql": "SELECT teacher_prefix FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973';"}
{"sample_id": 3155, "db_id": "donor", "gold_sql": "SELECT T1.title, T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.students_reached = 320", "pred_sql": "SELECT title, total_price_excluding_optional_support FROM projects WHERE students_reached = '320';"}
{"sample_id": 3176, "db_id": "donor", "gold_sql": "SELECT T2.date_posted, T2.grade_level FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid ORDER BY T1.item_quantity DESC LIMIT 1", "pred_sql": "SELECT date_posted, grade_level FROM projects JOIN resources ON projects.projectid = resources.projectid WHERE resources.item_quantity = (SELECT MAX(item_quantity) FROM resources)"}
{"sample_id": 3207, "db_id": "donor", "gold_sql": "SELECT SUM(T2.donation_total) / COUNT(donationid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'", "pred_sql": "SELECT AVG(donation_total) AS average_donation_amount \nFROM donations \nJOIN projects ON donations.projectid = projects.projectid \nWHERE projects.school_city = 'Brooklyn';"}
{"sample_id": 3266, "db_id": "donor", "gold_sql": "SELECT COUNT(donationid) FROM donations WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f'", "pred_sql": "SELECT COUNT(DISTINCT donor_acctid) AS non_teacher_donors_count FROM donations WHERE donor_city = 'Pocatello' AND is_teacher_acct = 'f';"}
{"sample_id": 3288, "db_id": "donor", "gold_sql": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.students_reached > 300 AND t2.donation_included_optional_support = 't'", "pred_sql": "SELECT SUM(donation_total) AS total_donations_with_optional_support \nFROM donations \nJOIN projects ON donations.projectid = projects.projectid \nWHERE students_reached > 300 AND donation_included_optional_support = 't';"}
{"sample_id": 3305, "db_id": "donor", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.via_giving_page = 't' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(donation_total), ( SELECT T2.primary_focus_area FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.via_giving_page = 't' GROUP BY T2.primary_focus_area ORDER BY SUM(T1.donation_total) DESC LIMIT 1 ) result FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid", "pred_sql": "SELECT (COUNT(donationid) * 100.0 / (SELECT COUNT(*) FROM donations)) AS percentage, projects.primary_focus_area\nFROM donations\nJOIN projects ON donations.projectid = projects.projectid\nWHERE donations.via_giving_page = 't'\nGROUP BY projects.primary_focus_area;"}
{"sample_id": 3267, "db_id": "donor", "gold_sql": "SELECT COUNT(schoolid) FROM projects WHERE teacher_prefix = 'Dr.' AND school_county = 'Suffolk'", "pred_sql": "SELECT COUNT(DISTINCT schoolid) AS number_of_schools FROM projects WHERE school_county = 'Suffolk' AND teacher_prefix = 'Dr. ';"}
{"sample_id": 3265, "db_id": "donor", "gold_sql": "SELECT SUM(T3.donation_total), school_city, poverty_level FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T1.title = 'Lets Share Ideas' AND T3.payment_method = 'paypal'", "pred_sql": "SELECT p.school_city, p.poverty_level, SUM(d.donation_total) AS total_donated\nFROM donations d\nJOIN projects p ON d.projectid = p.projectid\nJOIN essays e ON p.projectid = e.projectid\nWHERE e.title = 'Lets Share Ideas' AND d.payment_method = 'paypal'\nGROUP BY p.school_city, p.poverty_level;"}
{"sample_id": 3270, "db_id": "donor", "gold_sql": "SELECT vendorid FROM resources WHERE project_resource_type = 'Technology' AND item_unit_price <= 15", "pred_sql": "SELECT vendorid, COUNT(*) AS resource_count FROM resources WHERE item_unit_price < 15 AND project_resource_type != 'technology' GROUP BY vendorid;"}
{"sample_id": 3219, "db_id": "donor", "gold_sql": "SELECT T2.short_description FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = '301c9bf0a45d159d162b65a93fddd74e'", "pred_sql": "SELECT essays.short_description FROM essays JOIN projects ON essays.projectid = projects.projectid JOIN donations ON projects.projectid = donations.projectid WHERE projects.schoolid = '301c9bf0a45d159d162b65a93fddd74e';"}
{"sample_id": 3209, "db_id": "donor", "gold_sql": "SELECT DISTINCT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'", "pred_sql": "SELECT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5';"}
{"sample_id": 3217, "db_id": "donor", "gold_sql": "SELECT COUNT(T2.schoolid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.school_magnet = 't' AND T1.vendor_name = 'ABC School Supply'", "pred_sql": "SELECT COUNT(DISTINCT p.schoolid) AS public_magnet_school_count \nFROM projects p \nJOIN donations d ON p.projectid = d.projectid \nJOIN resources r ON p.projectid = r.projectid \nWHERE r.vendor_name = 'ABC School Supply' \nAND p.school_magnet = 't';"}
{"sample_id": 3174, "db_id": "donor", "gold_sql": "SELECT T2.date_posted, T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.date_posted = ( SELECT date_posted FROM projects ORDER BY date_posted ASC LIMIT 1 )", "pred_sql": "SELECT p.date_posted, r.item_name \nFROM projects p \nJOIN resources r ON p.projectid = r.projectid \nWHERE p.date_posted = (SELECT MIN(date_posted) FROM projects)"}
{"sample_id": 3165, "db_id": "donor", "gold_sql": "SELECT projectid FROM projects ORDER BY total_price_including_optional_support DESC LIMIT 1", "pred_sql": "SELECT projectid FROM projects ORDER BY total_price_including_optional_support DESC LIMIT 1;"}
{"sample_id": 3277, "db_id": "donor", "gold_sql": "SELECT payment_method , CAST(COUNT(donationid) AS REAL) * 100 / 51090 FROM donations WHERE donation_timestamp LIKE '2013-03%' GROUP BY payment_method", "pred_sql": "SELECT payment_method, COUNT(payment_method) * 100.0 / (SELECT COUNT(*) FROM donations WHERE strftime('%Y-%m', donation_timestamp) = '2013-03') AS percentage FROM donations WHERE strftime('%Y-%m', donation_timestamp) = '2013-03' GROUP BY payment_method;"}
{"sample_id": 6644, "db_id": "retail_world", "gold_sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'", "pred_sql": "SELECT orders.orderid FROM orders JOIN employees ON orders.employeeid = employees.employeeid WHERE employees.firstname = 'Michael' AND employees.lastname = 'Suyama';"}
{"sample_id": 6355, "db_id": "retail_world", "gold_sql": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE country = (SELECT country FROM customers GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1);"}
{"sample_id": 6470, "db_id": "retail_world", "gold_sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'", "pred_sql": "SELECT suppliers.contactname FROM products JOIN suppliers ON products.supplierid = suppliers.supplierid WHERE products.productname = 'Teatime Chocolate Biscuits';"}
{"sample_id": 6482, "db_id": "retail_world", "gold_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50", "pred_sql": "SELECT COUNT(DISTINCT p.productid) AS seafood_count\nFROM products p\nJOIN categories c ON p.categoryid = c.categoryid\nJOIN orderdetails od ON p.productid = od.productid\nWHERE c.categoryname = 'Seafood' AND od.quantity > 50;"}
{"sample_id": 6655, "db_id": "retail_world", "gold_sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employees WHERE birthdate = '1955-03-04 00:00:00';"}
{"sample_id": 6653, "db_id": "retail_world", "gold_sql": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE city = 'London';"}
{"sample_id": 6552, "db_id": "retail_world", "gold_sql": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'", "pred_sql": "SELECT COUNT(*) AS total_orders FROM orders WHERE customerid IN (SELECT customerid FROM customers WHERE country = 'Ireland');"}
{"sample_id": 6657, "db_id": "retail_world", "gold_sql": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'", "pred_sql": "SELECT COUNT(orders.orderid) AS total_orders FROM orders JOIN employees ON orders.employeeid = employees.employeeid WHERE employees.city = 'Tacoma';"}
{"sample_id": 6603, "db_id": "retail_world", "gold_sql": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T1.ProductID = T2.ProductID", "pred_sql": "SELECT SUM(od.quantity) AS total_quantity,\n       (SUM(od.quantity) * 100.0 / (SELECT SUM(quantity) FROM orderdetails)) AS percentage\nFROM products p\nJOIN orderdetails od ON p.productid = od.productid\nWHERE p.productname = 'Geitost';"}
{"sample_id": 6429, "db_id": "retail_world", "gold_sql": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'", "pred_sql": "SELECT products.productname FROM products JOIN categories ON products.categoryid = categories.categoryid WHERE categories.categoryname = 'beverage';"}
{"sample_id": 6332, "db_id": "retail_world", "gold_sql": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM employees ORDER BY birthdate DESC LIMIT 1;"}
{"sample_id": 6660, "db_id": "retail_world", "gold_sql": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264", "pred_sql": "SELECT customers.phone FROM customers JOIN orders ON customers.customerid = orders.customerid WHERE orders.orderid = '10264';"}
{"sample_id": 6434, "db_id": "retail_world", "gold_sql": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'", "pred_sql": "SELECT suppliers.contactname FROM products JOIN suppliers ON products.supplierid = suppliers.supplierid WHERE products.productname = 'Camembert Pierrot';"}
{"sample_id": 6446, "db_id": "retail_world", "gold_sql": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN \"Order Details\" AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1", "pred_sql": "SELECT MAX(od.quantity) AS max_quantity\nFROM orderdetails od\nJOIN products p ON od.productid = p.productid\nWHERE p.productname = 'Manjimup Dried Apples';"}
{"sample_id": 4029, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.tip_length = 'Medium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tip_length), T2.user_yelping_since_year FROM Tips AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id", "pred_sql": "SELECT (COUNT(CASE WHEN tip_length BETWEEN 50 AND 100 THEN 1 END) * 100.0 / COUNT(*)) AS medium_tip_percentage, user_yelping_since_year FROM tips JOIN users ON tips.user_id = users.user_id GROUP BY user_yelping_since_year;"}
{"sample_id": 3913, "db_id": "public_review_platform", "gold_sql": "SELECT T2.category_id FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Reviews AS T3 ON T3.business_id = T1.business_id WHERE T2.category_name = 'Hotels & Travel' GROUP BY T2.category_id ORDER BY COUNT(T2.category_id) DESC LIMIT 1", "pred_sql": "SELECT b.business_id, b.city, b.state, COUNT(r.review_stars) AS review_count, STDEV(r.review_stars) AS stddev_review_stars\nFROM business b\nJOIN reviews r ON b.business_id = r.business_id\nWHERE b.active = 'True' AND b.business_id IN (\n    SELECT business_id\n    FROM business_categories\n    WHERE category_id IN (\n        SELECT category_id\n        FROM categories\n        WHERE category_name IN ('hotel', 'travel')\n    )\n)\nGROUP BY b.business_id, b.city, b.state\nORDER BY review_count DESC\nLIMIT 1;"}
{"sample_id": 3876, "db_id": "public_review_platform", "gold_sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.state LIKE 'AZ' AND T2.user_id = 3", "pred_sql": "SELECT AVG(reviews.review_stars) AS average_stars\nFROM reviews\nJOIN business ON reviews.business_id = business.business_id\nWHERE reviews.user_id = 3 AND business.state = 'Arizona';"}
{"sample_id": 3987, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Phoenix' AND state = 'AZ' AND stars = 2", "pred_sql": "SELECT COUNT(*) AS two_star_business_count FROM business WHERE stars = '2' AND city = 'Phoenix' AND state = 'Arizona';"}
{"sample_id": 3945, "db_id": "public_review_platform", "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '6PM' AND T2.opening_time LIKE '1PM' AND T3.day_of_week LIKE 'Saturday'", "pred_sql": "SELECT b.city \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nJOIN days d ON bh.day_id = d.day_id \nWHERE d.day_of_week = 6 \nAND bh.opening_time <= 13 \nAND bh.closing_time >= 18;"}
{"sample_id": 3985, "db_id": "public_review_platform", "gold_sql": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100", "pred_sql": "SELECT uc.compliment_id, c.compliment_type, u.user_fans\nFROM users_compliments uc\nJOIN compliments c ON uc.compliment_id = c.compliment_id\nJOIN users u ON uc.user_id = u.user_id\nWHERE u.user_id < 100\nORDER BY uc.number_of_compliments DESC\nLIMIT 1;"}
{"sample_id": 3928, "db_id": "public_review_platform", "gold_sql": "SELECT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.review_count = 'Low' AND T1.city = 'Mesa' AND T1.active = 'true' AND T1.state = 'AZ'", "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.active = 'True' \nAND b.city = 'Mesa' \nAND b.state = 'AZ' \nAND b.review_count < (SELECT AVG(review_count) FROM business WHERE active = 'True')"}
{"sample_id": 3786, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.category_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T1.category_name LIKE 'Hair Removal'", "pred_sql": "SELECT COUNT(*) AS number_of_hair_removal_businesses \nFROM business_categories bc \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business b ON bc.business_id = b.business_id \nWHERE c.category_name = 'hair removal' AND b.active = 'True';"}
{"sample_id": 3781, "db_id": "public_review_platform", "gold_sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Sun City' AND T1.active LIKE 'FALSE' GROUP BY T1.business_id ORDER BY COUNT(T2.review_length) DESC LIMIT 1", "pred_sql": "SELECT business_id FROM business WHERE active = 'False' AND city = 'Sun City' ORDER BY review_count DESC LIMIT 1;"}
{"sample_id": 3939, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T2.business_id) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_value LIKE 'TRUE' AND T1.attribute_name LIKE 'Open 24 Hours'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS total_24_hour_businesses\nFROM business b\nJOIN business_hours bh ON b.business_id = bh.business_id\nWHERE bh.opening_time = 0 AND bh.closing_time = 24;"}
{"sample_id": 4025, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.attribute_value = 'full_bar'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count\nFROM business b\nJOIN business_attributes ba ON b.business_id = ba.business_id\nWHERE ba.attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'full_bar')\nAND b.stars > 3;"}
{"sample_id": 3774, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.category_name LIKE 'Automotive' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS \"percentage\" FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "pred_sql": "SELECT (COUNT(CASE WHEN bc.category_id = (SELECT category_id FROM categories WHERE category_name = 'Automotive') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_automotive_businesses FROM business b JOIN business_categories bc ON b.business_id = bc.business_id;"}
{"sample_id": 4080, "db_id": "public_review_platform", "gold_sql": "SELECT T3.user_id, T3.user_yelping_since_year FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.compliment_type = 'profile' AND T2.number_of_compliments = 'Uber' LIMIT 5", "pred_sql": "SELECT user_id, user_yelping_since_year FROM users WHERE user_id IN (SELECT user_id FROM users_compliments WHERE number_of_compliments > 100) LIMIT 5;"}
{"sample_id": 3868, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business_Attributes AS T3 ON T1.business_id = T3.business_id INNER JOIN Attributes AS T4 ON T4.attribute_id = T4.attribute_id WHERE T2.day_id IN (1, 2, 3, 4, 5, 6, 7) AND T4.attribute_name = 'Good for Kids' AND T3.attribute_value = 'true'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS good_for_kids_count\nFROM business b\nJOIN business_attributes ba ON b.business_id = ba.business_id\nJOIN attributes a ON ba.attribute_id = a.attribute_id\nJOIN business_hours bh ON b.business_id = bh.business_id\nWHERE a.attribute_name = 'Good for Kids'\nAND b.active = 'True'\nGROUP BY b.business_id\nHAVING COUNT(DISTINCT bh.day_id) = 7;"}
{"sample_id": 3920, "db_id": "public_review_platform", "gold_sql": "SELECT review_length FROM Reviews WHERE user_id = 60776 AND business_id = 1", "pred_sql": "SELECT review_length FROM reviews WHERE user_id = 60776 AND business_id = 1;"}
{"sample_id": 4089, "db_id": "public_review_platform", "gold_sql": "SELECT T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY COUNT(T2.tip_length) DESC LIMIT 1", "pred_sql": "SELECT AVG(tip_length) AS average_tip_length\nFROM tips\nJOIN users ON tips.user_id = users.user_id\nWHERE users.user_average_stars = 3;"}
{"sample_id": 4015, "db_id": "public_review_platform", "gold_sql": "SELECT T2.opening_time, T2.closing_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Black Canyon City' GROUP BY t2.business_id HAVING T1.review_count > AVG(T1.review_count)", "pred_sql": "SELECT b.business_id, b.city, b.state, bh.opening_time, bh.closing_time \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nWHERE b.city = 'Black Canyon City' \nAND b.review_count > (SELECT AVG(review_count) FROM business);"}
{"sample_id": 4037, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(DISTINCT user_id) FROM Reviews WHERE review_votes_funny = 'Uber'", "pred_sql": "SELECT COUNT(DISTINCT u.user_id) AS uber_fans_with_funny_votes\nFROM users u\nWHERE u.user_votes_funny > 100 AND u.user_fans > 100;"}
{"sample_id": 3859, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T3.stars) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Attributes AS T4 ON T3.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.category_name LIKE 'Food' AND T5.attribute_name LIKE 'Good for Kids' AND T4.attribute_value LIKE 'TRUE'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS good_for_kids_count\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN categories c ON bc.category_id = c.category_id\nJOIN business_attributes ba ON b.business_id = ba.business_id\nWHERE c.category_name = 'Food' AND ba.attribute_value = 'True' AND ba.attribute_id = (SELECT attribute_id FROM attributes WHERE attribute_name = 'Good for Kids');"}
{"sample_id": 3922, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T3.category_name LIKE 'Automotive' AND T1.stars < 3", "pred_sql": "SELECT COUNT(*) AS count FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id WHERE categories.category_name = 'automotive' AND business.stars < 3;"}
{"sample_id": 4094, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T3.category_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T1.stars = 5", "pred_sql": "SELECT DISTINCT c.category_name \nFROM business_categories bc \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business b ON bc.business_id = b.business_id \nWHERE b.stars = '5';"}
{"sample_id": 3803, "db_id": "public_review_platform", "gold_sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Men''s Clothing' AND T3.stars < 5", "pred_sql": "SELECT b.business_id FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE b.stars < 5 AND c.category_name = 'men's clothing';"}
{"sample_id": 3831, "db_id": "public_review_platform", "gold_sql": "SELECT T1.closing_time - T1.opening_time AS \"opening hours\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Friday' AND T1.business_id = 53", "pred_sql": "SELECT opening_time, closing_time FROM business_hours WHERE business_id = 53 AND day_id = (SELECT day_id FROM days WHERE day_of_week = 5);"}
{"sample_id": 4088, "db_id": "public_review_platform", "gold_sql": "SELECT SUM(T2.likes) FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_yelping_since_year = 2010", "pred_sql": "SELECT SUM(t.likes) AS total_likes\nFROM tips t\nJOIN users u ON t.user_id = u.user_id\nWHERE u.user_yelping_since_year = 2010;"}
{"sample_id": 4132, "db_id": "public_review_platform", "gold_sql": "SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.review_count = 'High' AND T1.city = 'Goodyear' AND T1.state = 'AZ' AND T1.active = 'true'", "pred_sql": "SELECT c.category_name, a.attribute_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.active = 'True' \nAND b.city = 'Goodyear' \nAND b.state = 'AZ' \nAND b.review_count > (SELECT AVG(review_count) FROM business WHERE active = 'True' AND city = 'Goodyear' AND state = 'AZ') \nORDER BY b.review_count DESC;"}
{"sample_id": 3801, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T2.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id INNER JOIN Days AS T5 ON T4.day_id = T5.day_id WHERE T5.day_of_week LIKE 'Monday' OR T5.day_of_week LIKE 'Tuesday' OR T5.day_of_week LIKE 'Wednesday' OR T5.day_of_week LIKE 'Thursday'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS open_business_count\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN business_hours bh ON b.business_id = bh.business_id\nJOIN days d ON bh.day_id = d.day_id\nWHERE b.active = 'True' AND d.day_of_week IN (1, 2, 3, 4)\nGROUP BY b.business_id\nHAVING COUNT(DISTINCT d.day_of_week) = 4;"}
{"sample_id": 3810, "db_id": "public_review_platform", "gold_sql": "SELECT SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.city) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id", "pred_sql": "SELECT COUNT(business_id) AS business_count, (COUNT(business_id) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage FROM business WHERE city = 'Phoenix';"}
{"sample_id": 3895, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city LIKE 'Chandler' AND T1.active LIKE 'TRUE' AND T1.review_count LIKE 'Medium'", "pred_sql": "SELECT b.business_id, bh.opening_time \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nWHERE b.active = 'True' \nAND b.city = 'Chandler' \nAND b.review_count BETWEEN 10 AND 50;"}
{"sample_id": 3811, "db_id": "public_review_platform", "gold_sql": "SELECT SUM(CASE WHEN T2.category_name LIKE 'Active Life' THEN 1 ELSE 0 END) AS \"num\" , CAST(SUM(CASE WHEN T3.city LIKE 'Phoenix' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(T3.review_count) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T3.review_count LIKE 'Low' ) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id", "pred_sql": "SELECT COUNT(DISTINCT b.city) AS active_cities, \n       (SELECT COUNT(*) FROM business WHERE review_count < 10) * 100.0 / COUNT(DISTINCT b.city) AS low_review_percentage \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE b.active = 'True' AND c.category_name = 'life';"}
{"sample_id": 3875, "db_id": "public_review_platform", "gold_sql": "SELECT AVG(T2.review_stars) FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city LIKE 'Anthem'", "pred_sql": "SELECT AVG(CAST(stars AS INTEGER)) AS average_stars FROM business WHERE city = 'Anthem';"}
{"sample_id": 3806, "db_id": "public_review_platform", "gold_sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T1.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T4.category_name LIKE 'Fashion' AND T1.city LIKE 'Scottsdale'", "pred_sql": "SELECT ba.attribute_value \nFROM business_attributes ba \nJOIN business_categories bc ON ba.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business b ON ba.business_id = b.business_id \nWHERE c.category_name = 'fashion' AND b.city = 'Scottsdale';"}
{"sample_id": 4070, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.category_name = 'Food' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.category_name) FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id", "pred_sql": "SELECT (COUNT(DISTINCT b.business_id) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage_open_food\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN categories c ON bc.category_id = c.category_id\nJOIN business_hours bh ON b.business_id = bh.business_id\nWHERE c.category_name = 'food'\nAND bh.opening_time <= 7 * 60\nAND bh.closing_time >= 20 * 60;"}
{"sample_id": 4126, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.stars < 3", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE c.category_name = 'food' AND b.stars < 3;"}
{"sample_id": 4129, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T3.category_name FROM Reviews AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T2.business_id >= 7 AND T2.business_id < 15 AND T1.review_length = 'Short' AND T1.review_stars = ( SELECT MAX(review_stars) FROM Reviews )", "pred_sql": "SELECT c.category_name \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN reviews r ON b.business_id = r.business_id \nWHERE r.review_length = (SELECT MIN(review_length) FROM reviews WHERE business_id BETWEEN 7 AND 14) \nAND r.review_stars = (SELECT MAX(review_stars) FROM reviews WHERE business_id BETWEEN 7 AND 14) \nAND b.business_id BETWEEN 7 AND 14;"}
{"sample_id": 3992, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7", "pred_sql": "SELECT DISTINCT b.business_id, b.city, b.state \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nGROUP BY b.business_id \nHAVING COUNT(DISTINCT bh.day_id) = 7 AND MAX(bh.closing_time) > 0;"}
{"sample_id": 4009, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN stars > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(stars) FROM Business WHERE city = 'Avondale' AND active = 'false'", "pred_sql": "SELECT (COUNT(CASE WHEN stars > 3 THEN 1 END) * 100.0 / COUNT(*)) AS wonderful_experience_percentage\nFROM business\nWHERE active = 'False' AND city = 'Avondale' AND state = 'AZ';"}
{"sample_id": 3778, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city LIKE 'Tolleson' AND active LIKE 'TRUE'", "pred_sql": "SELECT COUNT(*) AS active_business_count FROM business WHERE active = 'True' AND city = 'Tolleson';"}
{"sample_id": 3822, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year = 2012 AND user_votes_funny LIKE 'High'", "pred_sql": "SELECT COUNT(*) AS user_count FROM users WHERE user_yelping_since_year >= 2012 AND user_votes_funny > (SELECT AVG(user_votes_funny) FROM users);"}
{"sample_id": 4117, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(T1.stars) AS REAL) / COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Obstetricians & Gynecologists'", "pred_sql": "SELECT AVG(b.stars) AS average_stars\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN categories c ON bc.category_id = c.category_id\nWHERE c.category_name = 'Obstetricians & Gynecologists';"}
{"sample_id": 4104, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business_Hours WHERE opening_time = '8AM' AND closing_time = '6PM'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS number_of_businesses\nFROM business b\nJOIN business_hours bh ON b.business_id = bh.business_id\nGROUP BY b.business_id\nHAVING COUNT(DISTINCT (bh.closing_time - bh.opening_time)) = 1;"}
{"sample_id": 3906, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3", "pred_sql": "SELECT bc.category_id, c.category_name, AVG(r.review_stars) AS average_review_stars\nFROM business_categories AS bc\nJOIN categories AS c ON bc.category_id = c.category_id\nJOIN business AS b ON bc.business_id = b.business_id\nJOIN reviews AS r ON b.business_id = r.business_id\nWHERE b.state = 'Arizona'\nGROUP BY bc.category_id, c.category_name\nHAVING AVG(r.review_stars) > 3\nORDER BY average_review_stars DESC;"}
{"sample_id": 4083, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.opening_time = '9AM' AND T2.closing_time = '9PM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.day_id) FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday'", "pred_sql": "SELECT (COUNT(CASE WHEN bh.opening_time <= 9 AND bh.closing_time >= 21 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_opened_on_sunday\nFROM business_hours bh\nJOIN days d ON bh.day_id = d.day_id\nWHERE d.day_of_week = 0;"}
{"sample_id": 4135, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state = 'AZ' AND T1.city = 'Goodyear' AND T1.active = 'true' AND T1.stars = 3 AND T1.review_count = 'Low'", "pred_sql": "SELECT ba.attribute_value \nFROM business_attributes ba \nJOIN business b ON ba.business_id = b.business_id \nWHERE b.active = 'True' \nAND b.review_count < 10 \nAND b.stars = '3' \nAND b.city = 'Goodyear' \nAND b.state = 'AZ';"}
{"sample_id": 3760, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 36139 AND review_length LIKE 'long'", "pred_sql": "SELECT COUNT(*) AS long_review_count FROM reviews WHERE user_id = 36139 AND review_length > 100;"}
{"sample_id": 4031, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T1.state FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T2.closing_time = '12AM'", "pred_sql": "SELECT DISTINCT b.state FROM business b JOIN business_hours bh ON b.business_id = bh.business_id WHERE bh.closing_time = '0'"}
{"sample_id": 4049, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.active = 'true' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.business_id) AS ACT FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'", "pred_sql": "SELECT COUNT(*) AS total_businesses, SUM(CASE WHEN active = 'True' THEN 1 ELSE 0 END) AS active_businesses, (SUM(CASE WHEN active = 'True' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS active_percentage FROM business JOIN business_hours ON business.business_id = business_hours.business_id WHERE business.city = 'Mesa' AND (business_hours.closing_time - business_hours.opening_time) > 8;"}
{"sample_id": 4020, "db_id": "public_review_platform", "gold_sql": "SELECT T2.closing_time FROM Days AS T1 INNER JOIN Business_Hours AS T2 ON T1.day_id = T2.day_id WHERE T1.day_of_week = 'Sunday' AND T2.business_id = 4", "pred_sql": "SELECT closing_time FROM business_hours WHERE business_id = 4 AND day_id = (SELECT day_id FROM days WHERE day_of_week = 0)"}
{"sample_id": 4021, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T1.business_id FROM Business AS T1 INNER JOIN Reviews AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Phoenix' AND T2.review_length = 'Short'", "pred_sql": "SELECT business.business_id, business.city, business.state, reviews.review_length \nFROM business \nJOIN reviews ON business.business_id = reviews.business_id \nWHERE business.city = 'Phoenix' AND reviews.review_length < (SELECT AVG(review_length) FROM reviews)"}
{"sample_id": 3973, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN number_of_compliments = 'Low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(user_id) FROM Users_compliments", "pred_sql": "SELECT (COUNT(CASE WHEN uc.number_of_compliments < 5 THEN 1 END) * 100.0 / COUNT(*)) AS low_compliment_percentage\nFROM users_compliments uc;"}
{"sample_id": 3919, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year BETWEEN 2010 AND 2012 AND user_fans LIKE 'Low'", "pred_sql": "SELECT COUNT(*) AS low_fans_count \nFROM users \nWHERE user_yelping_since_year BETWEEN 2010 AND 2012 \nAND user_fans < 10;"}
{"sample_id": 3994, "db_id": "public_review_platform", "gold_sql": "SELECT T1.business_id FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Shopping' AND T1.stars = 4", "pred_sql": "SELECT business_id FROM business_categories bc JOIN business b ON bc.business_id = b.business_id WHERE bc.category_id = (SELECT category_id FROM categories WHERE category_name = 'shopping') AND b.stars = '4';"}
{"sample_id": 3930, "db_id": "public_review_platform", "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time LIKE '9PM' AND T2.opening_time LIKE '9AM' AND T3.day_of_week LIKE 'Saturday' GROUP BY T1.city", "pred_sql": "SELECT b.business_id, b.city, b.state \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nJOIN days d ON bh.day_id = d.day_id \nWHERE bh.opening_time = 9 AND bh.closing_time = 21 AND d.day_of_week = 6;"}
{"sample_id": 4100, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Business WHERE city = 'Mesa' AND active = 'true'", "pred_sql": "SELECT COUNT(*) AS active_business_count FROM business WHERE active = 'True' AND city = 'Mesa';"}
{"sample_id": 3866, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.business_id) FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id INNER JOIN Business AS T3 ON T1.business_id = T3.business_id WHERE T2.day_of_week LIKE 'Sunday' AND T1.closing_time LIKE '12PM' AND T3.state LIKE 'AZ'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nJOIN days d ON bh.day_id = d.day_id \nWHERE b.state = 'Arizona' \nAND d.day_of_week = 0 \nAND bh.closing_time = 12"}
{"sample_id": 4123, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(user_id) FROM Users WHERE user_yelping_since_year >= 2009 AND user_yelping_since_year < 2012 AND user_fans = 'Low'", "pred_sql": "SELECT COUNT(*) AS low_fan_count FROM users WHERE user_yelping_since_year BETWEEN 2009 AND 2011 AND user_fans < 10;"}
{"sample_id": 4067, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business_Hours AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T1.opening_time > '12PM'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS active_businesses_after_12PM\nFROM business b\nJOIN business_hours bh ON b.business_id = bh.business_id\nJOIN days d ON bh.day_id = d.day_id\nWHERE b.active = 'True' \nAND bh.opening_time < 12 \nAND bh.closing_time > 12\nAND b.state = 'Arizona';"}
{"sample_id": 3923, "db_id": "public_review_platform", "gold_sql": "SELECT T1.business_id, T1.stars FROM Business AS T1 INNER JOIN Business_Categories ON T1.business_id = Business_Categories.business_id INNER JOIN Categories AS T3 ON Business_Categories.category_id = T3.category_id WHERE T1.active LIKE 'TRUE' AND T3.category_name LIKE 'Pets'", "pred_sql": "SELECT b.business_id, b.stars \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE c.category_name = 'Pets' AND b.active = 'True';"}
{"sample_id": 4086, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T2.business_id, T2.city FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 AND ( SELECT CAST(( SELECT COUNT(DISTINCT T1.user_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_stars >= 4 ) AS REAL) * 100 / ( SELECT COUNT(user_id) FROM Users ) > 65 )", "pred_sql": "SELECT b.business_id, b.active, b.city \nFROM business b \nJOIN reviews r ON b.business_id = r.business_id \nWHERE r.review_stars >= 4 \nGROUP BY b.business_id \nHAVING COUNT(CASE WHEN r.review_stars >= 4 THEN 1 END) * 1.0 / COUNT(r.review_stars) >= 0.65;"}
{"sample_id": 3894, "db_id": "public_review_platform", "gold_sql": "SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3", "pred_sql": "SELECT ba.attribute_value \nFROM business_attributes ba \nJOIN business b ON ba.business_id = b.business_id \nWHERE b.active = 'True' \nAND b.review_count > 0 \nAND b.stars = '3' \nAND b.city = 'Mesa' \nAND b.state = 'AZ';"}
{"sample_id": 3773, "db_id": "public_review_platform", "gold_sql": "SELECT T2.stars FROM Tips AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.user_id = 69722", "pred_sql": "SELECT b.stars FROM tips t JOIN business b ON t.business_id = b.business_id WHERE t.user_id = 69722"}
{"sample_id": 3788, "db_id": "public_review_platform", "gold_sql": "SELECT T1.city FROM Business AS T1 INNER JOIN Tips AS T2 ON T1.business_id = T2.business_id WHERE T2.likes = 1 AND T2.user_id = 63469", "pred_sql": "SELECT b.city FROM tips t JOIN business b ON t.business_id = b.business_id WHERE t.user_id = 63469 AND t.likes = 1;"}
{"sample_id": 3857, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T3.business_id) FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' AND T3.city LIKE 'Anthem'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nWHERE b.city = 'Anthem' AND c.category_name = 'Food';"}
{"sample_id": 3986, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT business_id FROM Business_Hours WHERE closing_time = '8PM'", "pred_sql": "SELECT b.business_id, b.city, b.state, b.stars, b.review_count \nFROM business b \nJOIN business_hours bh ON b.business_id = bh.business_id \nWHERE bh.closing_time = 20"}
{"sample_id": 3967, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.category_name = 'Pets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.category_name) FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id", "pred_sql": "SELECT (COUNT(DISTINCT b.business_id) * 100.0 / (SELECT COUNT(*) FROM business)) AS percentage FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id WHERE c.category_name = 'Pets';"}
{"sample_id": 3770, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Tips AS T4 ON T3.business_id = T4.business_id WHERE T4.tip_length LIKE 'short'", "pred_sql": "SELECT c.category_name \nFROM tips t \nJOIN business b ON t.business_id = b.business_id \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nGROUP BY t.business_id \nORDER BY COUNT(t.tip_length) ASC \nLIMIT 1;"}
{"sample_id": 4118, "db_id": "public_review_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.user_fans = 'High' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.user_fans) FROM Years AS T1 INNER JOIN Elite AS T2 ON T1.year_id = T2.year_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T1.actual_year = 2011", "pred_sql": "SELECT (COUNT(DISTINCT e.user_id) * 100.0 / COUNT(DISTINCT u.user_id)) AS elite_percentage\nFROM elite e\nJOIN users u ON e.user_id = u.user_id\nWHERE e.year_id = 2011 AND u.user_fans > 100;"}
{"sample_id": 3993, "db_id": "public_review_platform", "gold_sql": "SELECT DISTINCT T1.user_id FROM Elite AS T1 INNER JOIN Years AS T2 ON T1.year_id = T2.year_id WHERE T2.actual_year = 2012", "pred_sql": "SELECT user_id FROM elite WHERE year_id = 2012;"}
{"sample_id": 3984, "db_id": "public_review_platform", "gold_sql": "SELECT SUM(CASE WHEN T1.category_name = 'Men''s Clothing' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.category_name = 'Women''s Clothing' THEN 1 ELSE 0 END) AS diff FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id", "pred_sql": "SELECT c.category_name, COUNT(b.business_id) AS business_count\nFROM business_categories bc\nJOIN categories c ON bc.category_id = c.category_id\nJOIN business b ON bc.business_id = b.business_id\nWHERE c.category_name IN ('Men''s Clothing', 'Women''s Clothing')\nGROUP BY c.category_name;"}
{"sample_id": 4013, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(business_id) FROM Tips WHERE business_id = 2 AND tip_length = 'Short'", "pred_sql": "SELECT COUNT(*) AS short_tips_count FROM tips WHERE business_id = 2 AND tip_length < 50;"}
{"sample_id": 3903, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(T1.business_id) FROM Business AS T1 INNER JOIN Business_attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city LIKE 'Phoenix' AND T3.attribute_name LIKE 'waiter_service' AND T2.attribute_id = 2", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count \nFROM business b \nJOIN business_attributes ba ON b.business_id = ba.business_id \nJOIN attributes a ON ba.attribute_id = a.attribute_id \nWHERE b.city = 'Phoenix' AND b.state = 'Arizona' AND a.attribute_name = 'waiter service';"}
{"sample_id": 4060, "db_id": "public_review_platform", "gold_sql": "SELECT T2.category_name FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id GROUP BY T2.category_name ORDER BY COUNT(T3.day_id) DESC LIMIT 1", "pred_sql": "SELECT b.business_id, COUNT(DISTINCT bh.day_id) AS working_days_count\nFROM business b\nJOIN business_categories bc ON b.business_id = bc.business_id\nJOIN categories c ON bc.category_id = c.category_id\nJOIN business_hours bh ON b.business_id = bh.business_id\nWHERE c.category_name IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')\nGROUP BY b.business_id\nORDER BY working_days_count DESC;"}
{"sample_id": 4112, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_length = 'Long' AND T2.active = 'true' AND T2.city = 'Phoenix'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS open_businesses_count\nFROM business b\nJOIN reviews r ON b.business_id = r.business_id\nWHERE b.city = 'Phoenix' AND b.active = 'True' AND r.review_length > 100;"}
{"sample_id": 3798, "db_id": "public_review_platform", "gold_sql": "SELECT T4.opening_time FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name LIKE 'Fashion'", "pred_sql": "SELECT b.business_id, b.city, b.state, bh.opening_time, bh.closing_time \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_hours bh ON b.business_id = bh.business_id \nWHERE c.category_name = 'fashion';"}
{"sample_id": 3785, "db_id": "public_review_platform", "gold_sql": "SELECT T1.closing_time - T1.opening_time AS \"hour\" FROM Business_Hours AS T1 INNER JOIN Days AS T2 ON T1.day_id = T2.day_id WHERE T2.day_of_week LIKE 'Saturday' AND T1.business_id = 5734", "pred_sql": "SELECT (b.closing_time - b.opening_time) AS hours_open FROM business_hours b JOIN days d ON b.day_id = d.day_id WHERE b.business_id = '5734' AND d.day_of_week = 6;"}
{"sample_id": 4116, "db_id": "public_review_platform", "gold_sql": "SELECT COUNT(DISTINCT T2.business_id) FROM Business AS T1 INNER JOIN Business_hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Scottsdale' AND T3.day_of_week = 'Sunday' AND T2.opening_time = '12PM'", "pred_sql": "SELECT COUNT(DISTINCT b.business_id) AS business_count\nFROM business b\nJOIN business_hours bh ON b.business_id = bh.business_id\nJOIN days d ON bh.day_id = d.day_id\nWHERE b.city = 'Scottsdale' \nAND d.day_of_week = 0 \nAND bh.opening_time <= 12 \nAND bh.closing_time > 12;"}
{"sample_id": 4061, "db_id": "public_review_platform", "gold_sql": "SELECT T1.business_id, T3.closing_time FROM Business_Categories AS T1 INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business_Hours AS T3 ON T1.business_id = T3.business_id INNER JOIN Days AS T4 ON T3.day_id = T4.day_id WHERE T2.category_name = 'Arts & Entertainment' AND T4.day_of_week = 'Sunday'", "pred_sql": "SELECT b.business_id \nFROM business b \nJOIN business_categories bc ON b.business_id = bc.business_id \nJOIN categories c ON bc.category_id = c.category_id \nJOIN business_hours bh ON b.business_id = bh.business_id \nJOIN days d ON bh.day_id = d.day_id \nWHERE c.category_name = 'Arts & Entertainment' \nAND d.day_of_week = 7 \nAND bh.closing_time IS NOT NULL;"}
{"sample_id": 3858, "db_id": "public_review_platform", "gold_sql": "SELECT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name LIKE 'Food' ORDER BY T3.stars DESC LIMIT 1", "pred_sql": "SELECT b.business_id FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN elite e ON b.stars = e.year_id WHERE bc.category_id = (SELECT category_id FROM categories WHERE category_name = 'Food') ORDER BY b.stars DESC LIMIT 1;"}
{"sample_id": 10907, "db_id": "debit_card_specializing", "gold_sql": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'", "pred_sql": "SELECT (COALESCE(SUM(y1.consumption), 0) - COALESCE(SUM(y5.consumption), 0)) AS consumption_difference\nFROM yearmonth y1\nLEFT JOIN yearmonth y5 ON y1.date = y5.date\nWHERE y1.customerid = 7 AND y1.date BETWEEN 20130401 AND 20130430\nAND y5.customerid = 5 AND y5.date BETWEEN 20130401 AND 20130430;"}
{"sample_id": 10935, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1", "pred_sql": "SELECT g.country FROM transactions_1k t JOIN gasstations g ON t.gasstationid = g.gasstationid WHERE t.date = '2012/8/25' ORDER BY t.transactionid LIMIT 1;"}
{"sample_id": 10946, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4", "pred_sql": "SELECT c.country FROM customers c JOIN transactions_1k t ON c.customerid = t.customerid WHERE t.price * t.amount = 548.4 AND t.date = '2012/8/24';"}
{"sample_id": 10948, "db_id": "debit_card_specializing", "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )", "pred_sql": "SELECT (consumption_2012 - consumption_2013) / consumption_2012 * 100 AS decrease_rate\nFROM (\n    SELECT SUM(amount) AS consumption_2012\n    FROM transactions_1k\n    WHERE customerid = (SELECT customerid FROM transactions_1k WHERE price * amount = 634.8 AND date = '2012-08-25')\n    AND date LIKE '2012%'\n), (\n    SELECT SUM(amount) AS consumption_2013\n    FROM transactions_1k\n    WHERE customerid = (SELECT customerid FROM transactions_1k WHERE price * amount = 634.8 AND date = '2012-08-25')\n    AND date LIKE '2013%'\n);"}
{"sample_id": 10905, "db_id": "debit_card_specializing", "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'", "pred_sql": "SELECT SUM(consumption) AS total_consumption \nFROM yearmonth \nWHERE customerid = 6 \nAND date BETWEEN 20130801 AND 20131130;"}
{"sample_id": 10913, "db_id": "debit_card_specializing", "gold_sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1", "pred_sql": "SELECT g.country, COUNT(g.gasstationid) AS value_for_money_stations\nFROM gasstations g\nJOIN transactions_1k t ON g.gasstationid = t.gasstationid\nGROUP BY g.country\nHAVING AVG(t.price) / AVG(t.amount) < (SELECT AVG(price) / AVG(amount) FROM transactions_1k);"}
{"sample_id": 10940, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'", "pred_sql": "SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.date = '2012/8/24' AND transactions_1k.time = '12:42:00';"}
{"sample_id": 10937, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'", "pred_sql": "SELECT segment FROM customers WHERE customerid = (SELECT customerid FROM transactions_1k WHERE date = '2012/8/23' AND time = '21:20:00')"}
{"sample_id": 10910, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "pred_sql": "SELECT c.customerid, SUM(ym.consumption) AS total_consumption\nFROM customers c\nJOIN yearmonth ym ON c.customerid = ym.customerid\nWHERE c.segment = 'KAM'\nGROUP BY c.customerid\nORDER BY total_consumption DESC\nLIMIT 1;"}
{"sample_id": 10945, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'", "pred_sql": "SELECT gasstations.country FROM transactions_1k JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE transactions_1k.cardid = 'No.667467';"}
{"sample_id": 10952, "db_id": "debit_card_specializing", "gold_sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5", "pred_sql": "SELECT p.description, SUM(t.amount) AS total_sold FROM transactions_1k t JOIN products p ON t.productid = p.productid GROUP BY p.description ORDER BY total_sold DESC LIMIT 5;"}
{"sample_id": 10943, "db_id": "debit_card_specializing", "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'", "pred_sql": "SELECT COUNT(*) AS transaction_count \nFROM transactions_1k \nWHERE time BETWEEN '08:00:00' AND '09:00:00' \nAND date = '2012/8/26' \nAND gasstationid IN (SELECT gasstationid FROM gasstations WHERE country = 'CZE');"}
{"sample_id": 10892, "db_id": "debit_card_specializing", "gold_sql": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'", "pred_sql": "SELECT COUNT(*) AS gas_station_count \nFROM gasstations g \nJOIN products p ON g.gasstationid = p.productid \nWHERE g.country = 'CZE' AND p.description LIKE '%Premium%';"}
{"sample_id": 10894, "db_id": "debit_card_specializing", "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "pred_sql": "SELECT c.customerid, MIN(ym.consumption) AS least_consumption \nFROM customers c \nJOIN yearmonth ym ON c.customerid = ym.customerid \nWHERE ym.date BETWEEN 20120101 AND 20121231 \nAND c.segment = 'LAM' \nGROUP BY c.customerid \nORDER BY least_consumption ASC \nLIMIT 1;"}
{"sample_id": 7906, "db_id": "world", "gold_sql": "SELECT T2.Name FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GNP < 1000 AND T1.IsOfficial = 'T' AND T1.Language = 'Dutch'", "pred_sql": "SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.gnp < 1000 AND countrylanguage.language = 'Dutch';"}
{"sample_id": 7860, "db_id": "world", "gold_sql": "SELECT T2.Percentage FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.Language = 'Chinese'", "pred_sql": "SELECT cl.percentage FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.name = 'China' AND cl.language = 'Chinese';"}
{"sample_id": 7821, "db_id": "world", "gold_sql": "SELECT AVG(Population) FROM City WHERE District = 'Karnataka' GROUP BY ID", "pred_sql": "SELECT AVG(population) AS average_population FROM city WHERE district = 'Karnataka';"}
{"sample_id": 7883, "db_id": "world", "gold_sql": "SELECT Name FROM ( SELECT T1.Name, T2.Language FROM City AS T1 INNER JOIN CountryLanguage AS T2 ON T1.CountryCode = T2.CountryCode GROUP BY T1.Name, T1.Population, T2.Language ORDER BY T1.Population DESC ) AS T3 GROUP BY t3.Name ORDER BY COUNT(Language) DESC LIMIT 1", "pred_sql": "SELECT c.name AS country_name, COUNT(cl.language) AS language_count\nFROM city ci\nJOIN country c ON ci.countrycode = c.code\nJOIN countrylanguage cl ON c.code = cl.countrycode\nWHERE ci.id IN (\n    SELECT id\n    FROM city\n    ORDER BY population DESC\n    LIMIT 5\n)\nGROUP BY c.name\nORDER BY language_count DESC\nLIMIT 1;"}
{"sample_id": 7837, "db_id": "world", "gold_sql": "SELECT District FROM City ORDER BY Population LIMIT 1", "pred_sql": "SELECT district FROM city WHERE population = (SELECT MIN(population) FROM city);"}
{"sample_id": 7875, "db_id": "world", "gold_sql": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 1", "pred_sql": "SELECT cl.language FROM country c JOIN countrylanguage cl ON c.code = cl.countrycode WHERE c.population = (SELECT MIN(population) FROM country)"}
{"sample_id": 7888, "db_id": "world", "gold_sql": "SELECT CAST((T1.GNP - T1.GNPOld) AS REAL) / T1.GNPOld FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Shanghai'", "pred_sql": "SELECT (c.gnp - c.gnpold) / c.gnpold * 100 AS gnp_growth_rate FROM country c JOIN city ci ON c.code = ci.countrycode WHERE ci.name = 'Shanghai';"}
{"sample_id": 7865, "db_id": "world", "gold_sql": "SELECT SUM(CASE WHEN T2.IsOfficial = 'F' THEN 1 ELSE 0 END) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Italy'", "pred_sql": "SELECT COUNT(*) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Italy') AND isofficial = 'F';"}
{"sample_id": 7836, "db_id": "world", "gold_sql": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "pred_sql": "SELECT COUNT(DISTINCT country.code) * 100.0 / (SELECT COUNT(*) FROM country WHERE region = 'North America') AS percentage FROM countrylanguage WHERE language = 'English' AND isofficial = 'T';"}
{"sample_id": 7916, "db_id": "world", "gold_sql": "SELECT T2.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Population BETWEEN 140000 AND 150000 GROUP BY T2.Name, LifeExpectancy HAVING LifeExpectancy < ( SELECT AVG(LifeExpectancy) FROM Country ) * 0.8", "pred_sql": "SELECT DISTINCT c.name \nFROM country c \nJOIN city ci ON c.code = ci.countrycode \nWHERE ci.population BETWEEN 140000 AND 150000 \nAND c.lifeexpectancy > (SELECT 0.8 * AVG(lifeexpectancy) FROM country);"}
{"sample_id": 7823, "db_id": "world", "gold_sql": "SELECT SUM(CASE WHEN Language = 'Portuguese' THEN 1 ELSE 0 END) FROM CountryLanguage", "pred_sql": "SELECT COUNT(DISTINCT countrycode) AS number_of_countries FROM countrylanguage WHERE language = 'Portuguese';"}
{"sample_id": 7846, "db_id": "world", "gold_sql": "SELECT T2.Name, T2.District FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T1.LocalName = 'Hajastan'", "pred_sql": "SELECT city.name, city.district FROM city JOIN country ON city.countrycode = country.code WHERE country.localname = 'Hajastan';"}
{"sample_id": 7843, "db_id": "world", "gold_sql": "SELECT T1.SurfaceArea FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Sutton Coldfield'", "pred_sql": "SELECT country.surfacearea FROM country JOIN city ON city.countrycode = country.code WHERE city.name = 'Sutton Coldfield';"}
{"sample_id": 7872, "db_id": "world", "gold_sql": "SELECT CAST(SUM(IIF(T2.Language = 'Chinese', T1.SurfaceArea, 0)) AS REAL) * 100 / SUM(T1.SurfaceArea) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode", "pred_sql": "SELECT SUM(surfacearea) * 100.0 / (SELECT SUM(surfacearea) FROM country) AS percentage_of_surface_area FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese')"}
{"sample_id": 7838, "db_id": "world", "gold_sql": "SELECT Continent FROM Country ORDER BY SurfaceArea LIMIT 1", "pred_sql": "SELECT continent FROM country WHERE surfacearea = (SELECT MIN(surfacearea) FROM country);"}
{"sample_id": 7905, "db_id": "world", "gold_sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code ORDER BY T2.SurfaceArea ASC LIMIT 1", "pred_sql": "SELECT DISTINCT district FROM city WHERE countrycode = (SELECT code FROM country ORDER BY surfacearea ASC LIMIT 1)"}
{"sample_id": 7874, "db_id": "world", "gold_sql": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT name FROM country ORDER BY population DESC LIMIT 1;"}
{"sample_id": 7898, "db_id": "world", "gold_sql": "SELECT T1.District FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = ( SELECT Name FROM Country ORDER BY SurfaceArea DESC LIMIT 1 )", "pred_sql": "SELECT DISTINCT district FROM city WHERE countrycode = (SELECT code FROM country ORDER BY surfacearea DESC LIMIT 1)"}
{"sample_id": 7910, "db_id": "world", "gold_sql": "SELECT AVG(T2.LifeExpectancy) FROM CountryLanguage AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Japanese'", "pred_sql": "SELECT country.lifeexpectancy FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Japanese';"}
{"sample_id": 7839, "db_id": "world", "gold_sql": "SELECT T1.HeadOfState FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Population DESC LIMIT 1", "pred_sql": "SELECT c.headofstate FROM country c JOIN city ci ON c.code = ci.countrycode ORDER BY ci.population DESC LIMIT 1;"}
{"sample_id": 7909, "db_id": "world", "gold_sql": "SELECT T2.Name, T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.SurfaceArea > 7000000", "pred_sql": "SELECT city.name FROM city JOIN country ON city.countrycode = country.code WHERE country.surfacearea > 7000000;"}
{"sample_id": 8252, "db_id": "mondial_geo", "gold_sql": "SELECT T2.City FROM lake AS T1 LEFT JOIN located AS T2 ON T2.Lake = T1.Name ORDER BY T1.Altitude DESC LIMIT 1", "pred_sql": "SELECT c.name AS city_name \nFROM lake l \nJOIN located lo ON l.name = lo.lake \nJOIN city c ON lo.city = c.name \nORDER BY l.altitude DESC \nLIMIT 1;"}
{"sample_id": 8296, "db_id": "mondial_geo", "gold_sql": "SELECT MAX(T2.Length) / MIN(T2.Length) FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country2 WHERE T1.Name = 'United States'", "pred_sql": "SELECT (SELECT length FROM borders WHERE country1 = 'USA' OR country2 = 'USA' ORDER BY length DESC LIMIT 1) / (SELECT length FROM borders WHERE country1 = 'USA' OR country2 = 'USA' ORDER BY length ASC LIMIT 1) AS ratio;"}
{"sample_id": 8245, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC LIMIT 1", "pred_sql": "SELECT country, gdp FROM economy ORDER BY gdp DESC LIMIT 1;"}
{"sample_id": 8354, "db_id": "mondial_geo", "gold_sql": "SELECT AVG(Area) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country WHERE T2.Continent = 'Asia'", "pred_sql": "SELECT AVG(area) AS average_area FROM country WHERE code IN (SELECT country FROM encompasses WHERE continent = 'Asia');"}
{"sample_id": 8370, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Population FROM politics AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN city AS T3 ON T3.Name = T2.Capital WHERE T1.Independence = '1947-08-15'", "pred_sql": "SELECT c.population FROM country c JOIN politics p ON c.code = p.country WHERE c.capital = (SELECT name FROM city WHERE country = c.code) AND p.independence = '1947-08-15';"}
{"sample_id": 8310, "db_id": "mondial_geo", "gold_sql": "SELECT SUM(T4.GDP) FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN economy AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe'", "pred_sql": "SELECT e.gdp FROM economy e JOIN encompasses ec ON e.country = ec.country WHERE ec.continent = 'Europe';"}
{"sample_id": 8231, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Percentage * T1.Population FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'African' AND T1.Name = 'Turks and Caicos Islands'", "pred_sql": "SELECT c.population \nFROM country c \nJOIN encompasses e ON c.code = e.country \nWHERE e.continent = 'Africa' AND c.name = 'Turks and Caicos Islands';"}
{"sample_id": 8225, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM ethnicGroup AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Percentage = 100 AND T1.Name = 'African'", "pred_sql": "SELECT country.name FROM country JOIN ethnicgroup ON country.code = ethnicgroup.country WHERE ethnicgroup.name = 'African' AND ethnicgroup.percentage = 100;"}
{"sample_id": 8456, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Type, T3.Name, T4.Name FROM mountain AS T1 INNER JOIN geo_mountain AS T2 ON T1.Name = T2.Mountain INNER JOIN province AS T3 ON T3.Name = T2.Province INNER JOIN country AS T4 ON T3.Country = T4.Code WHERE T1.Name = 'Ampato'", "pred_sql": "SELECT geo_mountain.type, geo_mountain.province, geo_mountain.country FROM geo_mountain WHERE geo_mountain.name = 'Ampato';"}
{"sample_id": 8309, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 ORDER BY T2.Length ASC LIMIT 1", "pred_sql": "SELECT country1, country2, length FROM borders ORDER BY length ASC LIMIT 1;"}
{"sample_id": 8458, "db_id": "mondial_geo", "gold_sql": "SELECT SUM(IIF(government = 'parliamentary democracy', 1, 0)) , CAST(SUM(IIF(government = 'parliamentary democracy', 1, 0)) AS REAL) * 100 / COUNT(*) FROM politics AS t1 WHERE STRFTIME('%Y', independence) >= '1993'", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM politics WHERE independence IS NOT NULL) AS percentage_of_independent_nations,\n       (SELECT name FROM country WHERE code IN (\n           SELECT country FROM politics WHERE independence > '1993-01-01' AND government = 'parliamentary'\n           LIMIT 3\n       )) AS three_parliamentary_democracies\nFROM politics\nWHERE independence > '1993-01-01' AND government = 'parliamentary';"}
{"sample_id": 8247, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T2.Inflation < 2", "pred_sql": "SELECT country.capital FROM country JOIN economy ON country.code = economy.country WHERE economy.inflation < 2;"}
{"sample_id": 8262, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T2.Name) FROM language AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.Name = 'Bosnian'", "pred_sql": "SELECT COUNT(*) AS organization_count \nFROM organization o \nJOIN language l ON o.country = l.country \nWHERE l.name = 'Bosnian';"}
{"sample_id": 8274, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN borders AS T2 ON T1.Code = T2.Country1 GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1", "pred_sql": "SELECT c.name FROM country c JOIN (SELECT country1 AS country, COUNT(country2) AS neighbors FROM borders GROUP BY country1 UNION SELECT country2 AS country, COUNT(country1) AS neighbors FROM borders GROUP BY country2) AS neighbor_counts ON c.code = neighbor_counts.country ORDER BY neighbor_counts.neighbors DESC LIMIT 1;"}
{"sample_id": 8224, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T2.Name, T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T1.Name = ( SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country GROUP BY T1.Name ORDER BY COUNT(T2.Name) DESC LIMIT 1 ) GROUP BY T1.Name, T2.Name, T2.Percentage", "pred_sql": "SELECT c.name AS country_name, eg.name AS ethnic_group, eg.percentage\nFROM country c\nJOIN ethnicgroup eg ON c.code = eg.country\nWHERE eg.percentage = (SELECT MAX(percentage) FROM ethnicgroup WHERE country = c.code)"}
{"sample_id": 8236, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T1.Population, T2.Population_Growth FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T2.Population_Growth < 0", "pred_sql": "SELECT country.name, population.population, population.population_growth \nFROM country \nJOIN population ON country.code = population.country \nWHERE population.population_growth < 0;"}
{"sample_id": 8464, "db_id": "mondial_geo", "gold_sql": "SELECT Abbreviation, Name, Established FROM organization WHERE City = 'Paris' ORDER BY Established ASC LIMIT 1", "pred_sql": "SELECT abbreviation, name, established FROM organization WHERE city = 'Paris' ORDER BY established ASC LIMIT 1;"}
{"sample_id": 8408, "db_id": "mondial_geo", "gold_sql": "SELECT River, GROUP_CONCAT(Province) FROM geo_river GROUP BY River HAVING COUNT(DISTINCT Country) > 1", "pred_sql": "SELECT geo_river.river, located.province \nFROM geo_river \nJOIN located ON geo_river.country = located.country \nGROUP BY geo_river.river \nHAVING COUNT(DISTINCT located.country) > 1;"}
{"sample_id": 8505, "db_id": "mondial_geo", "gold_sql": "SELECT * FROM politics WHERE STRFTIME('%Y', Independence) BETWEEN '1950' AND '1999' AND Government = 'parliamentary democracy'", "pred_sql": "SELECT country.name, politics.independence, politics.government \nFROM politics \nJOIN country ON politics.country = country.code \nWHERE politics.government = 'parliamentary democracy' \nAND politics.independence BETWEEN '1950-01-01' AND '1999-12-31';"}
{"sample_id": 8407, "db_id": "mondial_geo", "gold_sql": "SELECT Desert FROM geo_desert GROUP BY Desert HAVING COUNT(DISTINCT Country) > 1", "pred_sql": "SELECT d.name FROM desert d LEFT JOIN geo_desert gd ON d.name = gd.desert GROUP BY d.name HAVING COUNT(gd.country) > 1;"}
{"sample_id": 8462, "db_id": "mondial_geo", "gold_sql": "SELECT Name FROM organization WHERE City = 'London'", "pred_sql": "SELECT * FROM organization WHERE city = 'London';"}
{"sample_id": 8331, "db_id": "mondial_geo", "gold_sql": "SELECT Name, Height FROM mountain WHERE Mountains = 'Himalaya' ORDER BY Height DESC LIMIT 1", "pred_sql": "SELECT name, height FROM mountain WHERE mountains = 'Himalaya' ORDER BY height DESC LIMIT 1;"}
{"sample_id": 8416, "db_id": "mondial_geo", "gold_sql": "SELECT T2.River FROM country AS T1 INNER JOIN geo_river AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Slovenia' AND T2.River IN ( SELECT NAME FROM river WHERE Length > 500 AND River = 'Donau' )", "pred_sql": "SELECT name FROM river WHERE river = 'Donau' AND length > '500' AND country = 'Slovenia';"}
{"sample_id": 8237, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T2.Infant_Mortality FROM country AS T1 INNER JOIN population AS T2 ON T1.Code = T2.Country WHERE T1.Area BETWEEN 500000 AND 1000000", "pred_sql": "SELECT country.name, population.infant_mortality \nFROM country \nJOIN population ON country.code = population.country \nWHERE country.area BETWEEN 500000 AND 1000000;"}
{"sample_id": 8415, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Country FROM country AS T1 INNER JOIN isMember AS T2 ON T1.Code = T2.Country INNER JOIN organization AS T3 ON T3.Country = T2.Country INNER JOIN city AS T4 ON T4.Country = T3.Country WHERE T3.Abbreviation = 'EBRD' AND T4.Population BETWEEN 50000 AND 300000 AND T3.Established BETWEEN '1991-01-31' AND '1991-04-30'", "pred_sql": "SELECT DISTINCT c.name \nFROM country c \nJOIN city ci ON c.code = ci.country \nJOIN ismember im ON c.code = im.country \nJOIN organization o ON im.organization = o.abbreviation \nWHERE ci.population BETWEEN 50000 AND 300000 \nAND o.established BETWEEN '1991-03-01' AND '1991-04-30' \nAND im.organization = 'EBRD';"}
{"sample_id": 8333, "db_id": "mondial_geo", "gold_sql": "SELECT Name FROM mountain WHERE Type = 'volcano' AND Height BETWEEN 2000 AND 4000", "pred_sql": "SELECT name FROM mountain WHERE height BETWEEN 2000 AND 4000;"}
{"sample_id": 8313, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Country FROM country AS T1 INNER JOIN encompasses AS T2 ON T1.Code = T2.Country INNER JOIN continent AS T3 ON T3.Name = T2.Continent INNER JOIN population AS T4 ON T4.Country = T1.Code WHERE T3.Name = 'Europe' AND T4.Population_Growth > 0.03", "pred_sql": "SELECT country.name FROM country JOIN encompasses ON country.code = encompasses.country WHERE encompasses.continent = 'Europe' AND country.code IN (SELECT population.country FROM population WHERE population.population_growth > '3%');"}
{"sample_id": 8433, "db_id": "mondial_geo", "gold_sql": "SELECT MAX(Population) - MIN(Population) FROM country WHERE Name = 'United Kingdom' OR Name = 'Italy'", "pred_sql": "SELECT (SELECT population FROM country WHERE name = 'United Kingdom') - (SELECT population FROM country WHERE name = 'Italy') AS population_gap;"}
{"sample_id": 8390, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T3.Name) FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T1.Name = 'Japan'", "pred_sql": "SELECT COUNT(*) AS total_cities FROM city WHERE country = 'JP';"}
{"sample_id": 8402, "db_id": "mondial_geo", "gold_sql": "SELECT T2.GDP / T1.Population FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Switzerland'", "pred_sql": "SELECT gdp / population AS gdp_per_capita FROM economy JOIN country ON economy.country = country.code WHERE country.name = 'Switzerland';"}
{"sample_id": 8306, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN geo_mountain AS T2 ON T1.Code = T2.Country INNER JOIN economy AS T3 ON T3.Country = T1.Code INNER JOIN mountain AS T4 ON T4.Name = T2.Mountain WHERE T3.GDP > 1000000 AND T4.Height > 1000", "pred_sql": "SELECT COUNT(DISTINCT country) AS country_count\nFROM economy e\nJOIN geo_mountain m ON e.country = m.country\nWHERE e.gdp > 1000000 AND m.height > 1000;"}
{"sample_id": 8382, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T4.Sea) FROM mountain AS T1 INNER JOIN mountainOnIsland AS T2 ON T1.Name = T2.Mountain INNER JOIN island AS T3 ON T3.Name = T2.Island INNER JOIN islandIn AS T4 ON T4.Island = T3.Name WHERE T1.Name = 'Kerinci'", "pred_sql": "SELECT SUM(sea.depth) AS total_depth\nFROM sea\nJOIN geo_mountain ON sea.country = geo_mountain.country\nWHERE geo_mountain.mountain = 'Kerinci Mountain';"}
{"sample_id": 8371, "db_id": "mondial_geo", "gold_sql": "SELECT T5.Percentage * T6.Population FROM ethnicGroup AS T5 INNER JOIN country AS T6 ON T5.Country = T6.Code WHERE Country = ( SELECT T3.Code FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T3.Code = T2.Country INNER JOIN politics AS T4 ON T4.Country = T3.Code WHERE T4.Government = 'monarchy' AND T1.Name = 'Asia' ORDER BY T3.Population DESC LIMIT 1 ) AND T5.Name = 'Afro-Asian'", "pred_sql": "SELECT SUM(population) AS total_afro_asian_population\nFROM country\nJOIN population ON country.code = population.country\nWHERE country.continent = 'Asia' \nAND country.government = 'monarchy'\nORDER BY country.population DESC\nLIMIT 1;"}
{"sample_id": 8365, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(*) FROM geo_lake WHERE Country = ( SELECT T4.Code FROM ( SELECT T2.Code, T2.Population FROM encompasses AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code INNER JOIN politics AS T3 ON T1.Country = T3.Country WHERE T1.Continent = 'Africa' AND T1.Percentage = 100 AND T3.Government = 'republic' ORDER BY Population DESC LIMIT 4 ) AS T4 ORDER BY population ASC LIMIT 1 )", "pred_sql": "SELECT COUNT(*) AS lake_count FROM lake WHERE country = (SELECT code FROM country WHERE population = (SELECT population FROM country WHERE continent = 'Africa' ORDER BY population DESC LIMIT 1 OFFSET 3) AND government = 'republic')"}
{"sample_id": 8451, "db_id": "mondial_geo", "gold_sql": "SELECT NAME FROM organization WHERE country IN ( SELECT country FROM politics WHERE dependent != '' )", "pred_sql": "SELECT name FROM organization WHERE type = 'associated member';"}
{"sample_id": 8424, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Sea2 FROM sea AS T1 INNER JOIN mergesWith AS T2 ON T1.Name = T2.Sea1 WHERE T1.Name = ( SELECT Name FROM sea ORDER BY Depth DESC LIMIT 1 )", "pred_sql": "SELECT sea1 AS sea_name FROM mergeswith ORDER BY sea2 DESC LIMIT 1;"}
{"sample_id": 8229, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'", "pred_sql": "SELECT independence FROM politics WHERE country = (SELECT code FROM country WHERE name = 'Bulgaria');"}
{"sample_id": 8263, "db_id": "mondial_geo", "gold_sql": "SELECT MAX(T2.Infant_Mortality) FROM economy AS T1 INNER JOIN population AS T2 ON T1.Country = T2.Country WHERE T1.Inflation < 3", "pred_sql": "SELECT country, infant_mortality FROM population JOIN economy ON population.country = economy.country WHERE inflation < 3 ORDER BY infant_mortality DESC LIMIT 1;"}
{"sample_id": 8475, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN isMember AS T2 ON T2.Country = T1.Country INNER JOIN country AS T3 ON T2.Country = T3.Code GROUP BY T1.Name ORDER BY COUNT(T3.Name) DESC LIMIT 1", "pred_sql": "SELECT organization.name, COUNT(ismember.country) AS member_count\nFROM organization\nJOIN ismember ON organization.abbreviation = ismember.organization\nGROUP BY organization.name\nORDER BY member_count DESC;"}
{"sample_id": 8491, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T2.Name = 'Saudi Arabia' ORDER BY T1.Established DESC LIMIT 1", "pred_sql": "SELECT name FROM organization WHERE country = 'SA' ORDER BY established DESC LIMIT 1;"}
{"sample_id": 8473, "db_id": "mondial_geo", "gold_sql": "SELECT country FROM organization WHERE country IN ( SELECT Code FROM country ) GROUP BY country ORDER BY COUNT(NAME) LIMIT 1", "pred_sql": "SELECT country, COUNT(organization) AS membership_count FROM ismember GROUP BY country ORDER BY membership_count ASC LIMIT 1;"}
{"sample_id": 8360, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Government FROM politics AS T1 INNER JOIN economy AS T2 ON T1.Country = T2.Country ORDER BY T2.Inflation DESC LIMIT 1", "pred_sql": "SELECT government FROM politics WHERE country = (SELECT country FROM economy ORDER BY inflation DESC LIMIT 1)"}
{"sample_id": 8339, "db_id": "mondial_geo", "gold_sql": "SELECT T1.SourceLongitude, T1.SourceLatitude, T1.SourceAltitude FROM river AS T1 INNER JOIN geo_river AS T2 ON T2.River = T1.Name WHERE T2.Province = 'Lorraine'", "pred_sql": "SELECT geo_river.river, geo_mountain.name FROM located JOIN geo_river ON located.river = geo_river.river JOIN geo_mountain ON geo_river.mountains = geo_mountain.mountains WHERE located.city = 'Lorraine';"}
{"sample_id": 8487, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name, T1.Population * T2.Percentage FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Chinese' AND T2.Percentage > 70", "pred_sql": "SELECT country.name, population.population \nFROM country \nJOIN ethnicgroup ON country.code = ethnicgroup.country \nJOIN population ON country.code = population.country \nWHERE ethnicgroup.name = 'Chinese' AND ethnicgroup.percentage > 70;"}
{"sample_id": 8470, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Country, T2.Type FROM organization AS T1 INNER JOIN isMember AS T2 ON T1.Abbreviation = T2.Organization INNER JOIN country AS T3 ON T2.Country = T3.Code WHERE T1.Name = 'Islamic Development Bank'", "pred_sql": "SELECT country, type FROM ismember WHERE organization = 'Islamic Development Bank';"}
{"sample_id": 8477, "db_id": "mondial_geo", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.City = 'Washington' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.City) FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE T2.Country = 'USA'", "pred_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM organization WHERE country = 'USA') AS percentage FROM organization WHERE country = 'USA' AND city = 'Washington';"}
{"sample_id": 8288, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Capital FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Malay' ORDER BY T2.Percentage DESC LIMIT 1", "pred_sql": "SELECT c.capital, c.name FROM country c JOIN ethnicgroup e ON c.code = e.country WHERE e.name = 'Malay' ORDER BY e.percentage DESC LIMIT 1;"}
{"sample_id": 8242, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Code = T2.Country WHERE T2.Name = 'Albanian' ORDER BY T2.Percentage DESC LIMIT 1", "pred_sql": "SELECT country, percentage FROM ethnicgroup WHERE name = 'Albanian' ORDER BY percentage DESC LIMIT 1;"}
{"sample_id": 8452, "db_id": "mondial_geo", "gold_sql": "SELECT T3.Name FROM desert AS T1 INNER JOIN geo_desert AS T2 ON T1.Name = T2.Desert INNER JOIN country AS T3 ON T3.Code = T2.Country WHERE T1.Name = 'Kalahari'", "pred_sql": "SELECT DISTINCT geo_desert.country FROM geo_desert JOIN desert ON geo_desert.desert = desert.name WHERE desert.name = 'Kalahari'"}
{"sample_id": 8471, "db_id": "mondial_geo", "gold_sql": "SELECT T2.Name, T2.Population FROM organization AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Code WHERE T1.Name = 'Asia Pacific Economic Cooperation'", "pred_sql": "SELECT country.area, country.population FROM organization JOIN country ON organization.country = country.code WHERE organization.name = 'Asia Pacific Economic Cooperation';"}
{"sample_id": 8446, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP DESC, T2.Agriculture ASC LIMIT 1", "pred_sql": "SELECT country, gdp, agriculture FROM economy ORDER BY gdp DESC LIMIT 3;"}
{"sample_id": 8405, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Hanoi'", "pred_sql": "SELECT population / area AS population_density FROM country WHERE code = (SELECT country FROM city WHERE name = 'Hanoi')"}
{"sample_id": 8434, "db_id": "mondial_geo", "gold_sql": "SELECT City, Province FROM organization WHERE Name = 'European Bank for Reconstruction and Development'", "pred_sql": "SELECT city.name, city.province FROM organization JOIN city ON organization.city = city.name WHERE organization.name = 'European Bank for Reconstruction and Development';"}
{"sample_id": 8393, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN province AS T2 ON T1.Code = T2.Country INNER JOIN city AS T3 ON T3.Province = T2.Name WHERE T3.Name = 'Grozny'", "pred_sql": "SELECT country.name FROM city JOIN country ON city.country = country.code WHERE city.name = 'Grozny';"}
{"sample_id": 8265, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country ORDER BY T2.GDP / T1.Population DESC LIMIT 1", "pred_sql": "SELECT country.name, (CAST(economy.gdp AS REAL) / CAST(country.population AS REAL)) AS gdp_per_capita FROM economy JOIN country ON economy.country = country.code ORDER BY gdp_per_capita DESC LIMIT 1;"}
{"sample_id": 8301, "db_id": "mondial_geo", "gold_sql": "SELECT COUNT(T3.Desert) FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country INNER JOIN geo_desert AS T3 ON T3.Country = T2.Country WHERE T2.Government = 'republic'", "pred_sql": "SELECT country, COUNT(desert) AS desert_count\nFROM geo_desert\nJOIN politics ON geo_desert.country = politics.country\nWHERE politics.independence IS NOT NULL AND politics.government = 'republic'\nGROUP BY country\nORDER BY desert_count DESC\nLIMIT 1;"}
{"sample_id": 8380, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Name FROM country AS T1 INNER JOIN economy AS T2 ON T1.Code = T2.Country WHERE T1.Population > 1000000000 ORDER BY T2.GDP ASC LIMIT 1", "pred_sql": "SELECT name FROM country WHERE population > 1000000000 ORDER BY (SELECT gdp FROM economy WHERE country = code) ASC LIMIT 1;"}
{"sample_id": 8292, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Area FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T2.Independence = '1921-03-13'", "pred_sql": "SELECT area FROM country WHERE code IN (SELECT country FROM politics WHERE independence = '1921-03-13')"}
{"sample_id": 8330, "db_id": "mondial_geo", "gold_sql": "SELECT Lake, City FROM located WHERE Province = 'Albania' AND Lake IS NOT NULL", "pred_sql": "SELECT lake.name AS lake_name, city.name AS city_name \nFROM lake \nJOIN located ON lake.name = located.lake \nJOIN city ON located.city = city.name \nWHERE city.province = 'Albania';"}
{"sample_id": 8226, "db_id": "mondial_geo", "gold_sql": "SELECT T1.Infant_Mortality FROM population AS T1 INNER JOIN ethnicGroup AS T2 ON T1.Country = T2.Country WHERE T2.Name = 'Amerindian' ORDER BY T2.Percentage ASC LIMIT 1", "pred_sql": "SELECT p.infant_mortality FROM population p JOIN (SELECT e.country FROM ethnicgroup e WHERE e.name = 'Amerindian' ORDER BY e.percentage ASC LIMIT 1) AS least_amerindian ON p.country = least_amerindian.country;"}
{"sample_id": 5402, "db_id": "sales", "gold_sql": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID INNER JOIN Customers AS T4 ON T2.CustomerID = T4.CustomerID WHERE T4.MiddleInitial = 'A' AND T4.LastName = 'White' AND T1.Name = 'Road-250 Black, 48' AND T4.FirstName = 'Elizabeth'", "pred_sql": "SELECT e.firstname, e.lastname FROM employees e JOIN sales s ON e.employeeid = s.salespersonid JOIN customers c ON s.customerid = c.customerid JOIN products p ON s.productid = p.productid WHERE c.firstname = 'Elizabeth' AND c.middleinitial = 'A' AND c.lastname = 'White' AND p.name = 'Road-250 Black'"}
{"sample_id": 5384, "db_id": "sales", "gold_sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.LastName = 'Valdez' ORDER BY T2.Quantity DESC LIMIT 1", "pred_sql": "SELECT c.firstname, c.lastname, SUM(s.quantity) AS total_quantity\nFROM customers c\nJOIN sales s ON c.customerid = s.customerid\nWHERE c.lastname = 'Valdez'\nGROUP BY c.customerid\nORDER BY total_quantity DESC\nLIMIT 1;"}
{"sample_id": 5417, "db_id": "sales", "gold_sql": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.Quantity > 500", "pred_sql": "SELECT employees.firstname FROM employees JOIN sales ON employees.employeeid = sales.salespersonid WHERE sales.quantity > 500;"}
{"sample_id": 5363, "db_id": "sales", "gold_sql": "SELECT COUNT(SalesID) FROM Sales WHERE CustomerID = 80", "pred_sql": "SELECT COUNT(salesid) AS total_sales FROM sales WHERE customerid = '80';"}
{"sample_id": 5438, "db_id": "sales", "gold_sql": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'", "pred_sql": "SELECT products.name, products.price FROM products JOIN sales ON products.productid = sales.productid JOIN customers ON sales.customerid = customers.customerid WHERE customers.firstname = 'Erica' AND customers.lastname = 'Xu';"}
{"sample_id": 5451, "db_id": "sales", "gold_sql": "SELECT SUM(T2.Quantity * T3.Price) FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.FirstName = 'Heather' AND T1.LastName = 'McBadden'", "pred_sql": "SELECT SUM(p.price * s.quantity) AS total_sales_amount \nFROM sales s \nJOIN employees e ON s.salespersonid = e.employeeid \nJOIN products p ON s.productid = p.productid \nWHERE e.firstname = 'Heather' AND e.lastname = 'McBadden';"}
{"sample_id": 5414, "db_id": "sales", "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID ORDER BY T2.Quantity DESC LIMIT 1", "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS full_name\nFROM employees e\nJOIN sales s ON e.employeeid = s.salespersonid\nGROUP BY e.employeeid\nORDER BY SUM(s.quantity) DESC\nLIMIT 1;"}
{"sample_id": 5393, "db_id": "sales", "gold_sql": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity > 950", "pred_sql": "SELECT products.name FROM sales JOIN products ON sales.productid = products.productid WHERE sales.quantity > 950;"}
{"sample_id": 5396, "db_id": "sales", "gold_sql": "SELECT SUM(T1.Price * T2.quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Reflector'", "pred_sql": "SELECT SUM(s.quantity * p.price) AS total_sales_amount \nFROM sales s \nJOIN products p ON s.productid = p.productid \nWHERE p.name = 'Reflector';"}
{"sample_id": 5418, "db_id": "sales", "gold_sql": "SELECT T1.FirstName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 1", "pred_sql": "SELECT customers.firstname FROM customers JOIN sales ON customers.customerid = sales.customerid WHERE sales.salespersonid = '1';"}
{"sample_id": 5447, "db_id": "sales", "gold_sql": "SELECT COUNT(ProductID) FROM Products WHERE Price = 0", "pred_sql": "SELECT COUNT(*) AS free_product_count FROM products WHERE price = '0.0';"}
{"sample_id": 5420, "db_id": "sales", "gold_sql": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Quantity > 600", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name FROM customers WHERE customerid IN (SELECT customerid FROM sales WHERE quantity > 600)"}
{"sample_id": 5457, "db_id": "sales", "gold_sql": "SELECT T1.Quantity FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'Chainring Bolts' AND T1.SalesID = 551971", "pred_sql": "SELECT SUM(quantity) AS total_bolts_sold FROM sales WHERE salesid = '551971' AND productid = (SELECT productid FROM products WHERE name = 'chainring bolt');"}
{"sample_id": 5435, "db_id": "sales", "gold_sql": "SELECT COUNT(T1.ProductID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Erica' AND T1.Quantity < 200", "pred_sql": "SELECT COUNT(DISTINCT c.customerid) AS customer_count \nFROM customers c \nJOIN sales s ON c.customerid = s.customerid \nWHERE c.firstname = 'Erica' AND s.quantity < 200;"}
{"sample_id": 5456, "db_id": "sales", "gold_sql": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'ML Road Frame-W - Yellow, 40'", "pred_sql": "SELECT COUNT(DISTINCT e.employeeid) AS number_of_employees \nFROM sales s \nJOIN products p ON s.productid = p.productid \nJOIN employees e ON s.salespersonid = e.employeeid \nWHERE p.name = 'ML Road Frame-W - Yellow, 40';"}
{"sample_id": 5454, "db_id": "sales", "gold_sql": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID GROUP BY T2.SalesPersonID, T1.FirstName, T1.MiddleInitial, T1.LastName ORDER BY COUNT(T2.SalesID) DESC LIMIT 3", "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS full_name, COUNT(s.salesid) AS sales_count\nFROM employees e\nJOIN sales s ON e.employeeid = s.salespersonid\nGROUP BY e.employeeid\nORDER BY sales_count DESC\nLIMIT 3;"}
{"sample_id": 5416, "db_id": "sales", "gold_sql": "SELECT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.SalesPersonID = 20 ORDER BY T2.Quantity DESC LIMIT 1", "pred_sql": "SELECT p.name FROM sales s JOIN products p ON s.productid = p.productid WHERE s.salespersonid = '20' GROUP BY s.productid ORDER BY SUM(s.quantity) DESC LIMIT 1;"}
{"sample_id": 5423, "db_id": "sales", "gold_sql": "SELECT DISTINCT T2.CustomerID FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Price BETWEEN 1000 AND 2000", "pred_sql": "SELECT DISTINCT customerid FROM sales JOIN products ON sales.productid = products.productid WHERE products.price BETWEEN '1000' AND '2000';"}
{"sample_id": 5426, "db_id": "sales", "gold_sql": "SELECT CAST(SUM(IIF(T1.Name = 'Blade', T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "pred_sql": "SELECT (COUNT(CASE WHEN p.name = 'blade' THEN s.salesid END) * 100.0 / COUNT(s.salesid)) AS percentage_of_blades_sold\nFROM sales s\nJOIN products p ON s.productid = p.productid;"}
{"sample_id": 5425, "db_id": "sales", "gold_sql": "SELECT CAST(SUM(IIF(T1.Price = 0, T2.Quantity, 0)) AS REAL) * 100 / SUM(T2.Quantity)FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "pred_sql": "SELECT (SUM(CASE WHEN p.price = '0.0' THEN s.quantity ELSE 0 END) * 100.0 / SUM(s.quantity)) AS gift_percentage FROM sales s JOIN products p ON s.productid = p.productid;"}
{"sample_id": 5434, "db_id": "sales", "gold_sql": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity = 60 AND T1.Price <= 500", "pred_sql": "SELECT COUNT(*) AS count FROM sales s JOIN products p ON s.productid = p.productid WHERE s.quantity = 60 AND p.price <= 500;"}
{"sample_id": 5439, "db_id": "sales", "gold_sql": "SELECT T1.SalesID FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'External Lock Washer 7' AND T1.Quantity = 590", "pred_sql": "SELECT salesid FROM sales JOIN products ON sales.productid = products.productid WHERE sales.quantity = '590' AND products.name = 'External Lock Washer 7';"}
{"sample_id": 876, "db_id": "cs_semester", "gold_sql": "SELECT T1.first_name, T1.last_name FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.f_name = 'Oliy' AND T3.l_name = 'Spratling'", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name \nFROM prof \nJOIN ra ON prof.prof_id = ra.prof_id \nJOIN student ON ra.student_id = student.student_id \nWHERE student.f_name = 'Oliy' AND student.l_name = 'Spratling';"}
{"sample_id": 856, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(prof_id) FROM prof WHERE popularity > ( SELECT popularity FROM prof WHERE first_name = 'Zhihua' AND last_name = 'Zhou' )", "pred_sql": "SELECT COUNT(*) FROM prof WHERE popularity > (SELECT popularity FROM prof WHERE first_name = 'Zhou' AND last_name = 'Zhihua')"}
{"sample_id": 860, "db_id": "cs_semester", "gold_sql": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN RA AS T2 ON T1.student_id = T2.student_id WHERE T2.capability = 5", "pred_sql": "SELECT s.f_name || ' ' || s.l_name AS full_name\nFROM student s\nJOIN ra r ON s.student_id = r.student_id\nWHERE r.capability = (SELECT MAX(capability) FROM ra)"}
{"sample_id": 958, "db_id": "cs_semester", "gold_sql": "SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2'", "pred_sql": "SELECT (COUNT(CASE WHEN sat = 5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_highly_satisfied FROM registration JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Intro to Database 2';"}
{"sample_id": 912, "db_id": "cs_semester", "gold_sql": "SELECT T3.f_name, T3.l_name, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id ORDER BY T1.popularity DESC LIMIT 1", "pred_sql": "SELECT s.f_name || ' ' || s.l_name AS full_name, s.gpa \nFROM student s \nJOIN ra r ON s.student_id = r.student_id \nJOIN prof p ON r.prof_id = p.prof_id \nWHERE p.popularity = (SELECT MAX(popularity) FROM prof);"}
{"sample_id": 956, "db_id": "cs_semester", "gold_sql": "SELECT T1.graduate_from FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T3.type = 'UG' GROUP BY T1.prof_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "pred_sql": "SELECT graduate_from FROM prof WHERE prof_id = (SELECT prof_id FROM ra JOIN student ON ra.student_id = student.student_id WHERE student.type = 'UG' GROUP BY prof_id ORDER BY COUNT(student.student_id) DESC LIMIT 1)"}
{"sample_id": 966, "db_id": "cs_semester", "gold_sql": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3", "pred_sql": "SELECT COUNT(CASE WHEN s.type = 'UG' THEN 1 END) AS undergrad_count, COUNT(CASE WHEN s.type = 'RPG' THEN 1 END) AS research_postgrad_count\nFROM student s\nJOIN ra r ON s.student_id = r.student_id\nWHERE r.capability < 3;"}
{"sample_id": 855, "db_id": "cs_semester", "gold_sql": "SELECT name FROM course WHERE credit < ( SELECT credit FROM course WHERE name = 'Machine Learning Theory' )", "pred_sql": "SELECT name FROM course WHERE diff < (SELECT diff FROM course WHERE name = 'Machine Learning Theory')"}
{"sample_id": 941, "db_id": "cs_semester", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3", "pred_sql": "SELECT (COUNT(CASE WHEN ra.salary = 'low' THEN 1 END) * 100.0 / COUNT(*)) AS low_salary_percentage\nFROM prof\nJOIN ra ON prof.prof_id = ra.prof_id\nWHERE prof.teachingability <= 3;"}
{"sample_id": 931, "db_id": "cs_semester", "gold_sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.type = 'UG' ORDER BY T2.sat DESC LIMIT 1", "pred_sql": "SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.type = 'UG' ORDER BY r.sat DESC LIMIT 1;"}
{"sample_id": 940, "db_id": "cs_semester", "gold_sql": "SELECT T2.email FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T1.grade = 'B' GROUP BY T3.diff HAVING T3.diff > AVG(T3.diff) * 0.8", "pred_sql": "SELECT s.email FROM student s JOIN registration r ON s.student_id = r.student_id JOIN course c ON r.course_id = c.course_id WHERE r.grade = 3 AND c.diff > (SELECT AVG(CAST(diff AS INTEGER)) * 0.8 FROM course);"}
{"sample_id": 881, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.course_id) FROM registration AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.f_name = 'Alvera' AND T2.l_name = 'McQuillin'", "pred_sql": "SELECT COUNT(*) FROM registration r JOIN student s ON r.student_id = s.student_id WHERE s.f_name = 'Alvera' AND s.l_name = 'McQuillin';"}
{"sample_id": 943, "db_id": "cs_semester", "gold_sql": "SELECT CAST(SUM(teachingability) AS REAL) / COUNT(prof_id) FROM prof WHERE popularity = ( SELECT MAX(popularity) FROM prof )", "pred_sql": "SELECT AVG(teachingability) AS average_teaching_ability FROM prof WHERE popularity = (SELECT MAX(popularity) FROM prof)"}
{"sample_id": 867, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )", "pred_sql": "SELECT COUNT(*) AS male_professors_count FROM prof WHERE prof_id IN (SELECT prof_id FROM ra GROUP BY prof_id HAVING COUNT(student_id) > 3) AND gender = 1;"}
{"sample_id": 939, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.gpa = 3.5 AND T1.salary = 'low'", "pred_sql": "SELECT COUNT(*) AS low_salary_students_with_high_gpa\nFROM student\nWHERE salary = 'low' AND gpa >= 3.5;"}
{"sample_id": 909, "db_id": "cs_semester", "gold_sql": "SELECT course_id, student_id FROM registration WHERE grade IS NULL OR grade = ''", "pred_sql": "SELECT registration.course_id, registration.student_id FROM registration WHERE registration.grade IS NULL;"}
{"sample_id": 900, "db_id": "cs_semester", "gold_sql": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1", "pred_sql": "SELECT c.name FROM course c JOIN registration r ON c.course_id = r.course_id JOIN student s ON r.student_id = s.student_id WHERE s.intelligence = (SELECT MIN(intelligence) FROM student) ORDER BY r.sat ASC;"}
{"sample_id": 932, "db_id": "cs_semester", "gold_sql": "SELECT T1.capability FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T2.type = 'RPG' AND T2.intelligence >= 4", "pred_sql": "SELECT ra.capability \nFROM ra \nJOIN student ON ra.student_id = student.student_id \nWHERE student.type = 'RPG' AND student.intelligence >= 4;"}
{"sample_id": 905, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T2.student_id) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id WHERE T2.grade = 'A' AND T1.type = 'UG'", "pred_sql": "SELECT COUNT(DISTINCT r.student_id) AS num_students\nFROM registration r\nJOIN student s ON r.student_id = s.student_id\nWHERE s.type = 'UG' AND r.grade = 'A';"}
{"sample_id": 952, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN registration AS T2 ON T2.student_id = T1.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.salary = 'high' AND T3.name = 'Computer Vision'", "pred_sql": "SELECT COUNT(DISTINCT r.student_id) AS high_salary_students_count\nFROM registration r\nJOIN course c ON r.course_id = c.course_id\nJOIN ra a ON r.student_id = a.student_id\nWHERE a.salary = 'high' AND c.name = 'computer vision';"}
{"sample_id": 861, "db_id": "cs_semester", "gold_sql": "SELECT COUNT(T1.prof_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.first_name = 'Ogdon' AND T1.salary = 'med' AND T2.last_name = 'Zywicki'", "pred_sql": "SELECT COUNT(*) AS research_assistant_count FROM ra JOIN prof ON ra.prof_id = prof.prof_id WHERE prof.first_name = 'Ogdon' AND prof.last_name = 'Zywicki' AND ra.salary = 'med';"}
{"sample_id": 854, "db_id": "cs_semester", "gold_sql": "SELECT name FROM course WHERE name = 'Intro to BlockChain' OR name = 'Computer Network' ORDER BY diff DESC LIMIT 1", "pred_sql": "SELECT name, diff FROM course WHERE name IN ('Intro to BlockChain', 'Computer Network') ORDER BY CAST(diff AS INTEGER) DESC LIMIT 1;"}
{"sample_id": 889, "db_id": "cs_semester", "gold_sql": "SELECT first_name, last_name FROM prof WHERE graduate_from IN ( 'Brown University',  'Columbia University',  'Cornell University',  'Dartmouth College',  'Harvard University',  'Princeton University',  'University of Pennsylvania',  'Yale University' )", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM prof WHERE graduate_from = 'Ivy League School';"}
{"sample_id": 879, "db_id": "cs_semester", "gold_sql": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1", "pred_sql": "SELECT p.first_name || ' ' || p.last_name AS full_name \nFROM prof p \nJOIN ra r ON p.prof_id = r.prof_id \nGROUP BY p.prof_id \nHAVING COUNT(r.student_id) > 2 \nORDER BY p.teachingability DESC \nLIMIT 1;"}
{"sample_id": 4584, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' AND T2.SurveyID = 2014 AND T2.AnswerText LIKE 'NO'", "pred_sql": "SELECT COUNT(DISTINCT a.userid) AS user_count \nFROM answer a \nJOIN question q ON a.questionid = q.questionid \nWHERE a.answertext = 'No' \nAND q.questiontext = 'Would you bring up a mental health issue with a potential employer in an interview?' \nAND a.surveyid = '2014';"}
{"sample_id": 4612, "db_id": "mental_health_survey", "gold_sql": "SELECT CAST(COUNT(T1.UserID) AS REAL) / ( SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2018' ) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2017'", "pred_sql": "SELECT (SELECT COUNT(DISTINCT userid) FROM answer WHERE surveyid = '2017' AND questionid IN (SELECT questionid FROM question WHERE questiontext LIKE '%mental health survey%')) / (SELECT COUNT(DISTINCT userid) FROM answer WHERE surveyid = '2018' AND questionid IN (SELECT questionid FROM question WHERE questiontext LIKE '%mental health survey%')) AS ratio;"}
{"sample_id": 4602, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(DISTINCT T1.UserID) FROM Answer AS T1 INNER JOIN Survey AS T2 ON T1.SurveyID = T2.SurveyID WHERE T2.Description = 'mental health survey for 2016'", "pred_sql": "SELECT COUNT(DISTINCT userid) AS number_of_users FROM answer WHERE surveyid = '2016'"}
{"sample_id": 4613, "db_id": "mental_health_survey", "gold_sql": "SELECT CAST(SUM(CASE  WHEN T1.AnswerText LIKE 'Yes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.SurveyID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T1.QuestionID = 32 AND T1.SurveyID = 2016", "pred_sql": "SELECT (COUNT(CASE WHEN answer.answertext = 'Yes' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM answer JOIN survey ON answer.surveyid = survey.surveyid WHERE survey.surveyid = '2016' AND answer.questionid = (SELECT questionid FROM question WHERE questiontext LIKE '%mental health disorder%');"}
{"sample_id": 4587, "db_id": "mental_health_survey", "gold_sql": "SELECT T2.AnswerText FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T1.questiontext = 'Any additional notes or comments' AND T2.SurveyID = 2014 AND T2.AnswerText <> -1", "pred_sql": "SELECT a.answertext \nFROM answer a \nJOIN question q ON a.questionid = q.questionid \nWHERE q.questiontext = 'Any additional notes or comments' \nAND a.surveyid = '2014' \nAND a.answertext IS NOT NULL;"}
{"sample_id": 4619, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(AnswerText) FROM Answer WHERE AnswerText LIKE 'Substance Use Disorder'", "pred_sql": "SELECT COUNT(DISTINCT userid) AS respondent_count \nFROM answer \nJOIN survey ON answer.surveyid = survey.surveyid \nWHERE survey.description = 'mental health survey' \nAND answer.answertext = 'Substance Use Disorder';"}
{"sample_id": 4603, "db_id": "mental_health_survey", "gold_sql": "SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'What country do you work in?' GROUP BY T1.AnswerText ORDER BY COUNT(T1.AnswerText) DESC LIMIT 1", "pred_sql": "SELECT answer.answertext, COUNT(answer.answertext) AS answer_count\nFROM answer\nJOIN question ON answer.questionid = question.questionid\nWHERE question.questiontext = 'What country do you work in?'\nGROUP BY answer.answertext\nORDER BY answer_count DESC\nLIMIT 1;"}
{"sample_id": 4592, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(T2.UserID) FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2016, 2017, 2018) AND T1.questiontext LIKE 'Have you had a mental health disorder in the past?' AND T2.AnswerText = 'Yes'", "pred_sql": "SELECT COUNT(DISTINCT a.userid) AS user_count \nFROM answer a \nJOIN question q ON a.questionid = q.questionid \nWHERE a.answertext = 'Yes' \nAND q.questiontext = 'Have you had a mental health disorder in the past?' \nAND a.surveyid IN (2016, 2017, 2018);"}
{"sample_id": 4600, "db_id": "mental_health_survey", "gold_sql": "SELECT COUNT(DISTINCT T1.QuestionID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid INNER JOIN Survey AS T3 ON T1.SurveyID = T3.SurveyID WHERE T2.questiontext = 'What country do you work in?'", "pred_sql": "SELECT COUNT(DISTINCT s.surveyid) AS number_of_surveys\nFROM survey s\nJOIN answer a ON s.surveyid = a.surveyid\nJOIN question q ON a.questionid = q.questionid\nWHERE q.questiontext = 'What country do you work in?';"}
{"sample_id": 4588, "db_id": "mental_health_survey", "gold_sql": "SELECT T1.questiontext FROM Question AS T1 INNER JOIN Answer AS T2 ON T1.questionid = T2.QuestionID WHERE T2.SurveyID IN (2014, 2016) GROUP BY T1.questiontext", "pred_sql": "SELECT q.questiontext \nFROM question q \nJOIN answer a1 ON q.questionid = a1.questionid \nJOIN survey s1 ON a1.surveyid = s1.surveyid \nJOIN answer a2 ON q.questionid = a2.questionid \nJOIN survey s2 ON a2.surveyid = s2.surveyid \nWHERE s1.surveyid = '2014' AND s2.surveyid = '2016' \nGROUP BY q.questionid \nHAVING COUNT(DISTINCT s1.surveyid) > 0 AND COUNT(DISTINCT s2.surveyid) > 0;"}
{"sample_id": 3018, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 5 AND T2.Scene = 1 AND T1.Title = 'Comedy of Errors'", "pred_sql": "SELECT COUNT(paragraphs.id) AS paragraph_count \nFROM paragraphs \nJOIN chapters ON paragraphs.chapter_id = chapters.id \nJOIN works ON chapters.work_id = works.id \nWHERE chapters.act = '5' AND chapters.scene = '1' AND works.title = 'Comedy of Errors';"}
{"sample_id": 3015, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(Scene) FROM chapters WHERE work_id = 9 AND Act = 5", "pred_sql": "SELECT COUNT(scene) AS scene_count FROM chapters WHERE act = '5' AND work_id = '9';"}
{"sample_id": 3056, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night'", "pred_sql": "SELECT COUNT(p.plaintext) AS total_lines\nFROM paragraphs p\nJOIN chapters c ON p.chapter_id = c.id\nJOIN works w ON c.work_id = w.id\nWHERE w.title = 'Twelfth Night' AND c.act = '1' AND c.scene = '2'"}
{"sample_id": 2980, "db_id": "shakespeare", "gold_sql": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'", "pred_sql": "SELECT chapters.description FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.title = 'Midsummer Night's Dream' AND chapters.act = '2' AND chapters.scene = '2';"}
{"sample_id": 3010, "db_id": "shakespeare", "gold_sql": "SELECT CAST(SUM(T2.Scene) AS REAL) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'Comedy'", "pred_sql": "SELECT AVG(scene_count) AS average_scenes_per_comedy\nFROM (\n    SELECT COUNT(DISTINCT scene) AS scene_count\n    FROM chapters\n    JOIN works ON chapters.work_id = works.id\n    WHERE works.genretype = 'comedy' AND works.title LIKE '%Shakespeare%'\n    GROUP BY chapters.work_id\n) AS scene_counts;"}
{"sample_id": 2992, "db_id": "shakespeare", "gold_sql": "SELECT T2.LongTitle FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T1.Act = 1 ORDER BY T1.Scene DESC LIMIT 1", "pred_sql": "SELECT w.longtitle FROM works w JOIN chapters c ON w.id = c.work_id WHERE c.act = '1' GROUP BY w.id ORDER BY COUNT(c.scene) DESC LIMIT 1;"}
{"sample_id": 2979, "db_id": "shakespeare", "gold_sql": "SELECT T1.Title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.id = '324' AND T2.Description = 'friend to Caesar'", "pred_sql": "SELECT works.title FROM works JOIN characters ON works.id = characters.id WHERE characters.id = 324 AND characters.description = 'this friend of Caesar';"}
{"sample_id": 2966, "db_id": "shakespeare", "gold_sql": "SELECT SUM(DISTINCT T4.id) / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id", "pred_sql": "SELECT AVG(character_count) AS average_character_count FROM (SELECT COUNT(DISTINCT c.id) AS character_count FROM works w JOIN chapters ch ON w.id = ch.work_id JOIN paragraphs p ON ch.id = p.chapter_id JOIN characters c ON p.character_id = c.id WHERE w.title LIKE '%Shakespeare%' GROUP BY w.id) AS character_counts;"}
{"sample_id": 3044, "db_id": "shakespeare", "gold_sql": "SELECT CAST(( SELECT COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.GenreType = 'History' AND T1.DATE BETWEEN 1500 AND 1599 GROUP BY T1.id HAVING COUNT(T2.Scene) >= 5 ) AS REAL) * 100 / COUNT(id) FROM works WHERE GenreType = 'History' AND DATE BETWEEN 1500 AND 1599", "pred_sql": "SELECT (COUNT(DISTINCT w.id) * 100.0 / (SELECT COUNT(DISTINCT w2.id) FROM works w2 WHERE w2.date BETWEEN 1500 AND 1599 AND w2.genretype = 'historical')) AS percentage FROM chapters c JOIN works w ON c.work_id = w.id WHERE w.date BETWEEN 1500 AND 1599 AND w.genretype = 'historical' GROUP BY c.work_id HAVING COUNT(c.scene) >= 5;"}
{"sample_id": 3054, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman'", "pred_sql": "SELECT COUNT(DISTINCT w.id) AS work_count\nFROM works w\nJOIN chapters c ON w.id = c.work_id\nJOIN paragraphs p ON c.id = p.chapter_id\nJOIN characters ch ON p.character_id = ch.id\nWHERE ch.charname = 'Third Servingman' AND w.date BETWEEN 1600 AND 1610;"}
{"sample_id": 3031, "db_id": "shakespeare", "gold_sql": "SELECT LongTitle FROM works WHERE GenreType = 'History' ORDER BY Date DESC LIMIT 1", "pred_sql": "SELECT title FROM works WHERE genretype = 'historical' ORDER BY date DESC LIMIT 1;"}
{"sample_id": 3037, "db_id": "shakespeare", "gold_sql": "SELECT T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.ParagraphNum = 20", "pred_sql": "SELECT c.description FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.paragraphnum = 20;"}
{"sample_id": 2967, "db_id": "shakespeare", "gold_sql": "SELECT SUM(T2.Scene) / COUNT(T2.Act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'", "pred_sql": "SELECT AVG(scene_count) AS average_scenes_per_act FROM (SELECT act, COUNT(scene) AS scene_count FROM chapters JOIN works ON chapters.work_id = works.id WHERE works.title = 'Twelfth Night' GROUP BY act) AS act_scenes;"}
{"sample_id": 3038, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Gratiano' AND T1.Description = 'friend to Antonio and Bassiano'", "pred_sql": "SELECT COUNT(DISTINCT c.id) AS chapter_count \nFROM chapters c \nJOIN paragraphs p ON c.id = p.chapter_id \nJOIN characters ch ON p.character_id = ch.id \nWHERE ch.charname = 'Gratiano' AND ch.description = 'friend to Antonio and Bassiano';"}
{"sample_id": 3020, "db_id": "shakespeare", "gold_sql": "SELECT DISTINCT T1.title FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T4.CharName = 'Froth'", "pred_sql": "SELECT works.title FROM works JOIN characters ON works.id = characters.id WHERE characters.charname = 'Froth';"}
{"sample_id": 2978, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(DISTINCT T2.chapter_id) FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T1.CharName = 'Demetrius'", "pred_sql": "SELECT COUNT(DISTINCT c.id) AS chapter_count\nFROM characters AS ch\nJOIN paragraphs AS p ON ch.id = p.character_id\nJOIN chapters AS c ON p.chapter_id = c.id\nWHERE ch.charname = 'Demetrius';"}
{"sample_id": 2972, "db_id": "shakespeare", "gold_sql": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.PlainText = 'Would he do so, I''ld beg your precious mistress,Which he counts but a trifle.'", "pred_sql": "SELECT c.charname FROM characters c JOIN paragraphs p ON c.id = p.character_id WHERE p.plaintext = 'Would he do so, I''ld beg your precious mistress, Which he counts but a trifle.';"}
{"sample_id": 2973, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Titus Andronicus'", "pred_sql": "SELECT COUNT(*) AS character_count FROM characters WHERE id IN (SELECT DISTINCT character_id FROM paragraphs WHERE chapter_id IN (SELECT id FROM chapters WHERE work_id = (SELECT id FROM works WHERE title = 'Titus Andronicus'))));"}
{"sample_id": 2959, "db_id": "shakespeare", "gold_sql": "SELECT SUM(T3.ParagraphNum) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T2.Act = 1 AND T2.Scene = 1 AND T1.Title = 'Twelfth Night'", "pred_sql": "SELECT COUNT(paragraphs.id) AS paragraph_count \nFROM paragraphs \nJOIN chapters ON paragraphs.chapter_id = chapters.id \nJOIN works ON chapters.work_id = works.id \nWHERE works.title = 'Twelfth Night' AND chapters.act = '1' AND chapters.scene = '1';"}
{"sample_id": 2984, "db_id": "shakespeare", "gold_sql": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'", "pred_sql": "SELECT AVG(chapter_count) AS average_chapters FROM (SELECT COUNT(*) AS chapter_count FROM chapters WHERE work_id = (SELECT id FROM works WHERE date = 1599 AND title LIKE '%Shakespeare%') GROUP BY work_id)"}
{"sample_id": 3016, "db_id": "shakespeare", "gold_sql": "SELECT DISTINCT T1.CharName, T1.Description FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.Chapter_id = 18710", "pred_sql": "SELECT characters.charname, characters.description FROM characters JOIN paragraphs ON characters.id = paragraphs.character_id JOIN chapters ON paragraphs.chapter_id = chapters.id WHERE chapters.id = '18710';"}
{"sample_id": 3001, "db_id": "shakespeare", "gold_sql": "SELECT COUNT(DISTINCT T3.character_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id WHERE T1.Title = 'Hamlet'", "pred_sql": "SELECT COUNT(*) AS character_count FROM characters WHERE id IN (SELECT DISTINCT character_id FROM paragraphs WHERE chapter_id IN (SELECT id FROM chapters WHERE work_id = (SELECT id FROM works WHERE title = 'Hamlet')));"}
{"sample_id": 3503, "db_id": "video_games", "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '999: Nine Hours, Nine Persons, Nine Doors'", "pred_sql": "SELECT g.genre_id, ge.genre_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE g.game_name = '999: Nine Hours, Nine Persons, Nine Doors';"}
{"sample_id": 3423, "db_id": "video_games", "gold_sql": "SELECT T3.game_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.publisher_name = 'American Softworks'", "pred_sql": "SELECT game.game_name FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'American Softworks';"}
{"sample_id": 3461, "db_id": "video_games", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.platform_name = 'PS4' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id INNER JOIN game_publisher AS T3 ON T1.game_publisher_id = T3.id WHERE T1.release_year = 2014", "pred_sql": "SELECT (COUNT(CASE WHEN gp.release_year = '2014' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_ps4_games_2014\nFROM game_platform gp\nJOIN platform p ON gp.platform_id = p.id\nWHERE p.platform_name = 'PS4';"}
{"sample_id": 3490, "db_id": "video_games", "gold_sql": "SELECT T3.publisher_name FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T1.game_name = 'Adventure Time: Explore the Dungeon Because I Don''t Know!'", "pred_sql": "SELECT publisher.publisher_name FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE game.game_name = 'Adventure Time: Explore the Dungeon Because I Don't Know!';"}
{"sample_id": 3309, "db_id": "video_games", "gold_sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Action'", "pred_sql": "SELECT COUNT(*) AS total_action_games FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'action');"}
{"sample_id": 3334, "db_id": "video_games", "gold_sql": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 10031", "pred_sql": "SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id WHERE game_publisher.game_id = 10031;"}
{"sample_id": 3345, "db_id": "video_games", "gold_sql": "SELECT COUNT(T3.id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Role-Playing' AND T1.publisher_name = 'Microsoft Game Studios'", "pred_sql": "SELECT COUNT(g.id) AS num_role_playing_games\nFROM game g\nJOIN game_publisher gp ON g.id = gp.game_id\nJOIN publisher p ON gp.publisher_id = p.id\nJOIN genre ge ON g.genre_id = ge.id\nWHERE p.publisher_name = 'Microsoft Game Studios' AND ge.genre_name = 'role-playing';"}
{"sample_id": 3427, "db_id": "video_games", "gold_sql": "SELECT T2.num_sales * 100000 AS nums_eur FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T2.game_platform_id = 26 AND T1.region_name = 'Europe'", "pred_sql": "SELECT SUM(num_sales) AS total_sales FROM region_sales WHERE region_id = (SELECT id FROM region WHERE region_name = 'Europe') AND game_platform_id = '26';"}
{"sample_id": 3424, "db_id": "video_games", "gold_sql": "SELECT COUNT(CASE WHEN T1.genre_name = 'Strategy' THEN T2.id ELSE NULL END) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "pred_sql": "SELECT COUNT(*) AS strategy_game_count FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'strategy');"}
{"sample_id": 3507, "db_id": "video_games", "gold_sql": "SELECT DISTINCT T3.platform_id FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id WHERE T1.region_name = 'Europe' AND T2.num_sales * 100 * 100000 < ( SELECT AVG(T2.num_sales * 100000) * 30 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Europe' )", "pred_sql": "SELECT gp.platform_id \nFROM game_platform gp \nJOIN region_sales rs ON gp.id = rs.game_platform_id \nJOIN region r ON rs.region_id = r.id \nWHERE r.region_name = 'Europe' \nAND rs.num_sales < (SELECT AVG(num_sales) * 0.3 FROM region_sales WHERE region_id = r.id);"}
{"sample_id": 3448, "db_id": "video_games", "gold_sql": "SELECT COUNT(*) FROM ( SELECT T.game_name FROM game AS T WHERE T.game_name LIKE '%FIFA%' )", "pred_sql": "SELECT COUNT(*) AS fifa_game_count FROM game WHERE game_name LIKE '%FIFA%';"}
{"sample_id": 3316, "db_id": "video_games", "gold_sql": "SELECT T5.platform_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN game AS T3 ON T1.game_id = T3.id INNER JOIN game_platform AS T4 ON T1.id = T4.game_publisher_id INNER JOIN platform AS T5 ON T4.platform_id = T5.id WHERE T3.game_name = 'Panzer Tactics' AND T4.release_year = 2007", "pred_sql": "SELECT platform.platform_name FROM game_platform JOIN game ON game_platform.game_publisher_id = game.id JOIN platform ON game_platform.platform_id = platform.id WHERE game.game_name = 'Panzer Tactics' AND game_platform.release_year = '2007';"}
{"sample_id": 3381, "db_id": "video_games", "gold_sql": "SELECT T3.release_year FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id WHERE T1.game_name = 'Adventure Island'", "pred_sql": "SELECT gp.release_year FROM game g JOIN game_publisher gp ON g.id = gp.game_id WHERE g.game_name = 'Adventure Island';"}
{"sample_id": 3357, "db_id": "video_games", "gold_sql": "SELECT T.release_year FROM game_platform AS T WHERE T.id BETWEEN 1 AND 10", "pred_sql": "SELECT release_year FROM game_platform WHERE id BETWEEN '1' AND '10';"}
{"sample_id": 3411, "db_id": "video_games", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM game)) AS sports_percentage FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'sports');"}
{"sample_id": 3335, "db_id": "video_games", "gold_sql": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t", "pred_sql": "SELECT publisher_name FROM publisher WHERE id = (SELECT publisher_id FROM game_publisher GROUP BY publisher_id ORDER BY COUNT(game_id) DESC LIMIT 1)"}
{"sample_id": 3308, "db_id": "video_games", "gold_sql": "SELECT T1.game_name FROM game AS T1 WHERE T1.genre_id = ( SELECT T.genre_id FROM game AS T WHERE T.game_name = '3D Lemmings' )", "pred_sql": "SELECT g.game_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE ge.id = (SELECT genre_id FROM game WHERE game_name = '3D Lemmings')"}
{"sample_id": 3473, "db_id": "video_games", "gold_sql": "SELECT T1.game_id FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Bethesda Softworks'", "pred_sql": "SELECT game.id FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name = 'Bethesda Softworks';"}
{"sample_id": 3347, "db_id": "video_games", "gold_sql": "SELECT T4.platform_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game_platform AS T3 ON T2.id = T3.game_publisher_id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T3.release_year = 2004 AND T1.publisher_name = 'Codemasters'", "pred_sql": "SELECT platform.platform_name \nFROM platform \nJOIN game_platform ON platform.id = game_platform.platform_id \nJOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id \nJOIN game ON game_publisher.game_id = game.id \nWHERE game_publisher.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Codemasters') \nAND game_platform.release_year = '2004';"}
{"sample_id": 3449, "db_id": "video_games", "gold_sql": "SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t", "pred_sql": "SELECT platform.platform_name, SUM(region_sales.num_sales) AS total_sales\nFROM region_sales\nJOIN game_platform ON region_sales.game_platform_id = game_platform.id\nJOIN platform ON game_platform.platform_id = platform.id\nJOIN region ON region_sales.region_id = region.id\nWHERE region.region_name = 'Europe'\nGROUP BY platform.platform_name\nORDER BY total_sales DESC\nLIMIT 1;"}
{"sample_id": 3428, "db_id": "video_games", "gold_sql": "SELECT COUNT(id) FROM game_platform AS T WHERE T.release_year = 2001", "pred_sql": "SELECT COUNT(*) AS total_games FROM game_platform WHERE release_year = '2001';"}
{"sample_id": 3382, "db_id": "video_games", "gold_sql": "SELECT COUNT(T1.id) FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Puzzle'", "pred_sql": "SELECT COUNT(*) AS num_puzzle_games FROM game WHERE genre_id = (SELECT id FROM genre WHERE genre_name = 'puzzle');"}
{"sample_id": 3419, "db_id": "video_games", "gold_sql": "SELECT T.publisher_name FROM ( SELECT T4.publisher_name, COUNT(DISTINCT T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id INNER JOIN game_publisher AS T3 ON T2.id = T3.game_id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T1.genre_name = 'Action' GROUP BY T4.publisher_name ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1 ) t", "pred_sql": "SELECT publisher.publisher_name, COUNT(game.id) AS action_game_count\nFROM publisher\nJOIN game_publisher ON publisher.id = game_publisher.publisher_id\nJOIN game ON game_publisher.game_id = game.id\nJOIN genre ON game.genre_id = genre.id\nWHERE genre.genre_name = 'Action'\nGROUP BY publisher.publisher_name\nORDER BY action_game_count DESC\nLIMIT 1;"}
{"sample_id": 3501, "db_id": "video_games", "gold_sql": "SELECT T1.platform_id FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'Airborne Troops: Countdown to D-Day'", "pred_sql": "SELECT gp.platform_id FROM game g JOIN game_publisher gp ON g.id = gp.game_id JOIN game_platform gpl ON gp.id = gpl.game_publisher_id WHERE g.game_name = 'Airborne Troops: Countdown to D-Day';"}
{"sample_id": 3474, "db_id": "video_games", "gold_sql": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name IN ('Capcom', 'Sony Computer Entertainment')", "pred_sql": "SELECT COUNT(DISTINCT game.id) AS total_game_ids FROM game JOIN game_publisher ON game.id = game_publisher.game_id JOIN publisher ON game_publisher.publisher_id = publisher.id WHERE publisher.publisher_name IN ('Capcom', 'Sony Computer Entertainment');"}
{"sample_id": 3462, "db_id": "video_games", "gold_sql": "SELECT SUM(T.num_sales) * 100000 FROM region_sales AS T WHERE T.region_id = 4", "pred_sql": "SELECT SUM(num_sales) AS total_sales FROM region_sales WHERE region_id = 4;"}
{"sample_id": 3453, "db_id": "video_games", "gold_sql": "SELECT T.region_name FROM ( SELECT T2.region_name, SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id INNER JOIN game_platform AS T3 ON T1.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id GROUP BY T4.platform_name ORDER BY SUM(T1.num_sales) DESC LIMIT 1 ) t", "pred_sql": "SELECT region.region_name, SUM(region_sales.num_sales) AS total_sales\nFROM region\nJOIN region_sales ON region.id = region_sales.region_id\nGROUP BY region.id\nORDER BY total_sales DESC\nLIMIT 1;"}
{"sample_id": 3500, "db_id": "video_games", "gold_sql": "SELECT T.publisher_name FROM ( SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T1.region_name = 'North America' AND T2.num_sales * 100000 < 10000 LIMIT 5 ) t", "pred_sql": "SELECT DISTINCT publisher.publisher_name \nFROM publisher \nJOIN game_publisher ON publisher.id = game_publisher.publisher_id \nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id \nJOIN region_sales ON game_platform.id = region_sales.game_platform_id \nWHERE region_sales.num_sales < 10000 \nLIMIT 5;"}
{"sample_id": 3470, "db_id": "video_games", "gold_sql": "SELECT COUNT(T1.game_publisher_id) FROM game_platform AS T1 INNER JOIN platform AS T2 ON T1.platform_id = T2.id WHERE T2.platform_name = 'X360'", "pred_sql": "SELECT COUNT(DISTINCT game_publisher.publisher_id) AS publisher_count \nFROM game_platform \nJOIN game_publisher ON game_platform.game_publisher_id = game_publisher.id \nWHERE game_platform.platform_id = (SELECT id FROM platform WHERE platform_name = 'X360');"}
{"sample_id": 3433, "db_id": "video_games", "gold_sql": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Adventure'", "pred_sql": "SELECT game.game_name FROM game JOIN genre ON game.genre_id = genre.id WHERE genre.genre_name = 'adventure';"}
{"sample_id": 3467, "db_id": "video_games", "gold_sql": "SELECT COUNT(T.game_publisher_id) FROM game_platform AS T WHERE T.release_year = 1984", "pred_sql": "SELECT COUNT(DISTINCT game_publisher.publisher_id) AS publisher_count \nFROM game \nJOIN game_publisher ON game.id = game_publisher.game_id \nJOIN game_platform ON game_publisher.id = game_platform.game_publisher_id \nWHERE game_platform.release_year = '1984';"}
{"sample_id": 3374, "db_id": "video_games", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.platform_name = 'PSP' THEN T3.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T3.game_id) FROM platform AS T1 INNER JOIN game_platform AS T2 ON T1.id = T2.platform_id INNER JOIN game_publisher AS T3 ON T2.game_publisher_id = T3.id WHERE T2.release_year = 2004", "pred_sql": "SELECT (COUNT(gp.id) * 100.0 / (SELECT COUNT(*) FROM game_platform WHERE release_year = '2004')) AS psp_percentage\nFROM game_platform gp\nJOIN platform p ON gp.platform_id = p.id\nWHERE gp.release_year = '2004' AND p.platform_name = 'PSP';"}
{"sample_id": 3452, "db_id": "video_games", "gold_sql": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name = '2010 FIFA World Cup South Africa'", "pred_sql": "SELECT g.genre_id, ge.genre_name FROM game g JOIN genre ge ON g.genre_id = ge.id WHERE g.game_name = '2010 FIFA World Cup South Africa';"}
{"sample_id": 3388, "db_id": "video_games", "gold_sql": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2011", "pred_sql": "SELECT game_name FROM game INNER JOIN game_platform ON game.id = game_platform.game_publisher_id WHERE game_platform.release_year = '2011';"}
{"sample_id": 3390, "db_id": "video_games", "gold_sql": "SELECT T3.game_name, T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T4.genre_name = 'Sports' LIMIT 5", "pred_sql": "SELECT game.game_name, game_platform.release_year \nFROM game \nJOIN genre ON game.genre_id = genre.id \nJOIN game_platform ON game.id = game_platform.game_publisher_id \nWHERE genre.genre_name = 'sports' \nLIMIT 5;"}
{"sample_id": 3504, "db_id": "video_games", "gold_sql": "SELECT T1.release_year FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id WHERE T2.game_id = 156", "pred_sql": "SELECT release_year FROM game_platform WHERE game_publisher_id = (SELECT id FROM game_publisher WHERE game_id = 156)"}
{"sample_id": 3483, "db_id": "video_games", "gold_sql": "SELECT AVG(T.num_sales * 100000) FROM region_sales AS T WHERE T.region_id = 3", "pred_sql": "SELECT AVG(num_sales * 100000) AS average_sales FROM region_sales WHERE region_id = 3;"}
{"sample_id": 3481, "db_id": "video_games", "gold_sql": "SELECT SUM(CASE WHEN T2.release_year = 2000 THEN T1.num_sales ELSE 0 END) - SUM(CASE WHEN T2.release_year = 1990 THEN T1.num_sales ELSE 0 END) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id", "pred_sql": "SELECT SUM(CASE WHEN gp.release_year = '1990' THEN rs.num_sales * 100000 ELSE 0 END) AS sales_1990, SUM(CASE WHEN gp.release_year = '2000' THEN rs.num_sales * 100000 ELSE 0 END) AS sales_2000, (SUM(CASE WHEN gp.release_year = '1990' THEN rs.num_sales * 100000 ELSE 0 END) - SUM(CASE WHEN gp.release_year = '2000' THEN rs.num_sales * 100000 ELSE 0 END)) AS sales_difference\nFROM game_platform gp\nJOIN game_publisher gpub ON gp.game_publisher_id = gpub.id\nJOIN region_sales rs ON gp.id = rs.game_platform_id\nWHERE gp.release_year IN ('1990', '2000');"}
{"sample_id": 3464, "db_id": "video_games", "gold_sql": "SELECT SUM(CASE WHEN T.region_id = 2 THEN T.num_sales ELSE 0 END) - SUM(CASE WHEN T.region_id = 3 THEN T.num_sales ELSE 0 END) FROM region_sales t", "pred_sql": "SELECT (SUM(rs2.num_sales) - SUM(rs3.num_sales)) AS sales_difference\nFROM region_sales rs2\nJOIN region_sales rs3 ON rs2.game_platform_id = rs3.game_platform_id\nWHERE rs2.region_id = 2 AND rs3.region_id = 3;"}
{"sample_id": 3393, "db_id": "video_games", "gold_sql": "SELECT (SUM(CASE WHEN T2.region_name = 'North America' THEN T1.num_sales ELSE 0 END) - AVG(T1.num_sales)) * 100.0 / AVG(T1.num_sales) FROM region_sales AS T1 INNER JOIN region AS T2 ON T1.region_id = T2.id WHERE T1.game_platform_id = 9577", "pred_sql": "SELECT (SUM(rs.num_sales) * 100000) / (SELECT AVG(num_sales) FROM region_sales WHERE game_platform_id IN (SELECT id FROM game_platform WHERE platform_id = '9577')) * 100 AS percent_higher_sales\nFROM region_sales rs\nJOIN region r ON rs.region_id = r.id\nWHERE r.region_name = 'North America' AND rs.num_sales > (SELECT AVG(num_sales) FROM region_sales WHERE game_platform_id IN (SELECT id FROM game_platform WHERE platform_id = '9577'));"}
{"sample_id": 3480, "db_id": "video_games", "gold_sql": "SELECT SUM(T1.num_sales) FROM region_sales AS T1 INNER JOIN game_platform AS T2 ON T1.game_platform_id = T2.id WHERE T2.release_year = 2000", "pred_sql": "SELECT SUM(num_sales * 100000) AS total_sales FROM region_sales rs JOIN game_platform gp ON rs.game_platform_id = gp.id WHERE gp.release_year = '2000';"}
{"sample_id": 4652, "db_id": "disney", "gold_sql": "SELECT character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Frank Welker'", "pred_sql": "SELECT character FROM voice-actors WHERE voice-actor = 'Frank Welker';"}
{"sample_id": 4649, "db_id": "disney", "gold_sql": "SELECT COUNT(name) FROM director WHERE director = 'Wolfgang Reitherman'", "pred_sql": "SELECT COUNT(*) FROM director WHERE director = 'Wolfgang Reitherman';"}
{"sample_id": 4699, "db_id": "disney", "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Hercules' AND character = 'Calliope'", "pred_sql": "SELECT voice-actors.voice-actor FROM voice-actors WHERE voice-actors.character = 'Calliope' AND voice-actors.movie = 'Hercules';"}
{"sample_id": 4623, "db_id": "disney", "gold_sql": "SELECT director FROM director WHERE name = 'Pinocchio'", "pred_sql": "SELECT director FROM director WHERE name = 'Pinocchio';"}
{"sample_id": 4645, "db_id": "disney", "gold_sql": "SELECT T1.director FROM director AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.name WHERE T2.genre = 'Adventure' AND T2.release_date = 'Mar 30, 2007'", "pred_sql": "SELECT director FROM director WHERE name IN (SELECT movie_title FROM movies_total_gross WHERE genre = 'adventure' AND release_date = '2007/3/30');"}
{"sample_id": 4663, "db_id": "disney", "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" WHERE movie = 'Meet the Robinsons'", "pred_sql": "SELECT voice-actors.voice-actor FROM voice-actors WHERE voice-actors.movie = 'Meet the Robinsons';"}
{"sample_id": 4732, "db_id": "disney", "gold_sql": "SELECT T1.movie_title, MAX(T1.release_date), MAX(T1.inflation_adjusted_gross) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Chris Buck'", "pred_sql": "SELECT m1.movie_title, m1.release_date, m1.total_gross, m2.movie_title AS more_successful_movie\nFROM movies_total_gross m1\nJOIN director d ON d.name = m1.movie_title\nJOIN movies_total_gross m2 ON m1.total_gross < m2.total_gross\nWHERE d.director = 'Chris Buck'\nORDER BY m1.release_date DESC\nLIMIT 1;"}
{"sample_id": 4682, "db_id": "disney", "gold_sql": "SELECT name FROM director WHERE director = 'Jack Kinney'", "pred_sql": "SELECT name FROM director WHERE director = 'Jack Kinney';"}
{"sample_id": 4685, "db_id": "disney", "gold_sql": "SELECT movie, character FROM \"voice-actors\" WHERE \"voice-actor\" = 'Bill Thompson'", "pred_sql": "SELECT characters.movie_title, characters.hero FROM characters JOIN voice-actors ON characters.hero = voice-actors.character WHERE voice-actors.voice-actor = 'Bill Thompson';"}
{"sample_id": 4673, "db_id": "disney", "gold_sql": "SELECT T2.director, COUNT(DISTINCT T1.\"voice-actor\") FROM \"voice-actors\" AS T1 INNER JOIN director AS T2 ON T1.movie = T2.name GROUP BY T2.director ORDER BY COUNT(DISTINCT T1.\"voice-actor\") DESC LIMIT 1", "pred_sql": "SELECT d.director \nFROM director d \nJOIN voice-actors va ON d.name = va.movie \nGROUP BY d.director \nORDER BY COUNT(va.character) DESC \nLIMIT 1;"}
{"sample_id": 4727, "db_id": "disney", "gold_sql": "SELECT SUM(\"Walt Disney Parks and Resorts\") / SUM(Total) * 100 FROM revenue WHERE year = 2010", "pred_sql": "SELECT (SUM(total) / (SELECT SUM(total) FROM revenue WHERE year = '2010')) * 100 AS proportion FROM revenue WHERE year = '2010' AND `walt disney parks and resorts` IS NOT NULL;"}
{"sample_id": 4678, "db_id": "disney", "gold_sql": "SELECT SUM(CAST(REPLACE(trim(T2.total_gross, '$'), ',', '') AS REAL)) / COUNT(T2.movie_title) FROM \"voice-actors\" AS T1 INNER JOIN movies_total_gross AS T2 ON T1.movie = T2.movie_title WHERE T1.\"voice-actor\" = 'Sterling Holloway'", "pred_sql": "SELECT AVG(m.total_gross) AS average_total_gross\nFROM movies_total_gross m\nJOIN voice-actors v ON m.movie_title = v.movie\nWHERE v.voice_actor = 'Sterling Holloway';"}
{"sample_id": 4627, "db_id": "disney", "gold_sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title WHERE T1.character LIKE '%' OR T2.villian OR '%' AND T2.movie_title = 'Alice in Wonderland'", "pred_sql": "SELECT va.voice-actor FROM voice-actors va JOIN characters c ON va.character = c.villian WHERE c.movie_title = 'Alice in Wonderland';"}
{"sample_id": 4687, "db_id": "disney", "gold_sql": "SELECT T1.movie_title, T2.hero, T2.song FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name WHERE T3.director = 'Wolfgang Reitherman' AND SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) = '1977'", "pred_sql": "SELECT c.movie_title, c.hero, r.song \nFROM characters c \nJOIN director d ON c.movie_title = d.name \nJOIN round r ON c.movie_title = r.movie \nWHERE d.director = 'Wolfgang Reitherman' AND c.release_date LIKE '1977%';"}
{"sample_id": 4669, "db_id": "disney", "gold_sql": "SELECT T1.\"voice-actor\" FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T2.movie_title = T1.movie WHERE T2.movie_title = 'The Rescuers' AND T1.character = T2.villian", "pred_sql": "SELECT voice-actors.voice-actor FROM voice-actors JOIN characters ON voice-actors.character = characters.villian WHERE characters.movie_title = 'The Rescuers';"}
{"sample_id": 4733, "db_id": "disney", "gold_sql": "SELECT \"voice-actor\" FROM \"voice-actors\" GROUP BY \"voice-actor\" HAVING COUNT(movie) > 5", "pred_sql": "SELECT voice_actor, COUNT(character) AS character_count \nFROM voice-actors \nGROUP BY voice_actor \nHAVING COUNT(character) > 5;"}
{"sample_id": 4689, "db_id": "disney", "gold_sql": "SELECT T1.hero, T2.director, T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.movie_title = 'Mulan'", "pred_sql": "SELECT characters.hero, director.director, characters.release_date FROM characters JOIN director ON characters.movie_title = director.name WHERE characters.movie_title = 'Mulan';"}
{"sample_id": 4633, "db_id": "disney", "gold_sql": "SELECT T2.villian FROM \"movies_total_gross\" AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title ORDER BY T1.total_gross DESC LIMIT 1", "pred_sql": "SELECT round.villian FROM round JOIN movies_total_gross ON round.movie_title = movies_total_gross.movie_title ORDER BY movies_total_gross.total_gross DESC LIMIT 1;"}
{"sample_id": 4691, "db_id": "disney", "gold_sql": "SELECT T1.movie, T3.director, T2.release_date FROM \"voice-actors\" AS T1 INNER JOIN characters AS T2 ON T1.movie = T2.movie_title INNER JOIN director AS T3 ON T3.name = T2.movie_title WHERE T1.\"voice-actor\" = 'Freddie Jones'", "pred_sql": "SELECT characters.movie_title, director.director, characters.release_date \nFROM characters \nJOIN voice-actors ON characters.hero = voice-actors.character \nJOIN director ON director.name = characters.movie_title \nWHERE voice-actors.voice-actor = 'Freddie Jones';"}
{"sample_id": 4637, "db_id": "disney", "gold_sql": "SELECT movie_title FROM characters WHERE song = 'I Thought I Lost You'", "pred_sql": "SELECT movie_title FROM round WHERE song = 'I Thought I Lost You';"}
{"sample_id": 4646, "db_id": "disney", "gold_sql": "SELECT T1.movie_title FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' ORDER BY CAST(REPLACE(SUBSTR(inflation_adjusted_gross, 2), ',', '') AS REAL) DESC LIMIT 1", "pred_sql": "SELECT mt.movie_title, mt.inflation_adjusted_gross \nFROM director d \nJOIN movies_total_gross mt ON d.name = mt.movie_title \nWHERE d.director = 'Wolfgang Reitherman' \nORDER BY mt.inflation_adjusted_gross DESC \nLIMIT 1;"}
{"sample_id": 4708, "db_id": "disney", "gold_sql": "SELECT T1.movie_title FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Wolfgang Reitherman' AND T1.villian IS NULL", "pred_sql": "SELECT c.movie_title, c.release_date, c.hero \nFROM characters c \nJOIN director d ON c.movie_title = d.name \nLEFT JOIN round r ON c.movie_title = r.movie \nWHERE d.director = 'Wolfgang Reitherman' AND r.villian IS NULL;"}
{"sample_id": 4659, "db_id": "disney", "gold_sql": "SELECT T2.\"voice-actor\" FROM director AS T1 INNER JOIN \"voice-actors\" AS T2 INNER JOIN movies_total_gross AS T3 ON T1.name = T2.movie AND T2.movie = T3.movie_title WHERE T1.director = 'Ben Sharpsteen' AND T3.release_date = 'Feb 9, 1940' AND T2.\"voice-actor\" != 'None' GROUP BY T2.\"voice-actor\"", "pred_sql": "SELECT voice-actors.voice-actor FROM voice-actors JOIN director ON voice-actors.movie = director.name JOIN characters ON director.name = characters.movie_title WHERE director.director = 'Ben Sharpsteen' AND characters.release_date = '1940-02-09';"}
{"sample_id": 138, "db_id": "movie_platform", "gold_sql": "SELECT list_title FROM lists WHERE user_id LIKE 4208563", "pred_sql": "SELECT list_title FROM lists WHERE user_id = '4208563';"}
{"sample_id": 152, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year = 1976 AND director_name LIKE 'Felipe Cazals'", "pred_sql": "SELECT COUNT(*) AS movie_count FROM movies WHERE director_name = 'Felipe Cazals' AND movie_release_year = 1976;"}
{"sample_id": 63, "db_id": "movie_platform", "gold_sql": "SELECT T2.list_update_date_utc FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.list_title = '250 Favourite Films' ORDER BY T2.list_update_date_utc DESC LIMIT 1", "pred_sql": "SELECT list_update_timestamp_utc FROM lists WHERE list_title = '250 Favourite Films'"}
{"sample_id": 54, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(*) FROM lists_users WHERE user_id = 83373278 AND user_subscriber = 1", "pred_sql": "SELECT COUNT(*) AS number_of_lists FROM lists_users WHERE user_id = '83373278' AND user_subscriber = '1';"}
{"sample_id": 107, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.user_id = 59988436 AND T1.critic_comments = 21", "pred_sql": "SELECT movies.movie_title, ratings.rating_id, ratings.critic_comments \nFROM ratings \nJOIN ratings_users ON ratings.user_id = ratings_users.user_id \nJOIN movies ON ratings.movie_id = movies.movie_id \nWHERE ratings_users.user_id = '59988436' AND ratings.critic_comments = 21;"}
{"sample_id": 50, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(*) FROM lists WHERE SUBSTR(list_update_timestamp_utc, 1, 4) - SUBSTR(list_creation_timestamp_utc, 1, 4) > 10", "pred_sql": "SELECT COUNT(*) AS updated_lists_count FROM lists WHERE list_update_timestamp_utc > datetime(list_creation_timestamp_utc, '+10 years')"}
{"sample_id": 164, "db_id": "movie_platform", "gold_sql": "SELECT T1.director_name, T1.movie_release_year , SUM(T2.rating_score) / COUNT(T2.user_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.user_trialist = 1 ORDER BY T1.movie_popularity DESC LIMIT 1", "pred_sql": "SELECT m.director_name, m.movie_release_year, AVG(r.rating_score) AS average_rating_score\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE m.movie_popularity = (SELECT MAX(movie_popularity) FROM movies)\nAND r.user_trialist = 1\nGROUP BY m.director_name, m.movie_release_year;"}
{"sample_id": 58, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(movie_id) FROM movies WHERE director_name = 'Hong Sang-soo'", "pred_sql": "SELECT COUNT(*) AS movie_count FROM movies WHERE director_name = 'Hong Sang-soo';"}
{"sample_id": 48, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id INNER JOIN lists AS T3 ON T3.user_id = T1.user_id WHERE T1.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31' AND T3.list_title = '100 Greatest Living American Filmmakers'", "pred_sql": "SELECT m.movie_title, AVG(r.rating_score) AS average_rating_score\nFROM ratings r\nJOIN ratings_users ru ON r.user_id = ru.user_id\nJOIN lists_users lu ON ru.user_id = lu.user_id\nJOIN lists l ON lu.list_id = l.list_id\nJOIN movies m ON r.movie_id = m.movie_id\nWHERE l.list_title = '100 Greatest Living American Filmmakers'\nAND r.rating_timestamp_utc BETWEEN '2013-01-01' AND '2013-12-31'\nGROUP BY m.movie_title;"}
{"sample_id": 88, "db_id": "movie_platform", "gold_sql": "SELECT movie_title FROM movies WHERE director_name = '\u00c5ke Sandgren' ORDER BY movie_popularity DESC LIMIT 1", "pred_sql": "SELECT movie_title, movie_popularity FROM movies WHERE director_name = '\u00c1lex de la Iclesia' ORDER BY movie_popularity DESC LIMIT 1;"}
{"sample_id": 21, "db_id": "movie_platform", "gold_sql": "SELECT movie_release_year, director_name FROM movies WHERE movie_release_year IS NOT NULL ORDER BY movie_release_year ASC LIMIT 1", "pred_sql": "SELECT movie_release_year, director_name FROM movies ORDER BY movie_release_year ASC LIMIT 1;"}
{"sample_id": 57, "db_id": "movie_platform", "gold_sql": "SELECT movie_title FROM movies WHERE movie_title = 'The General' OR movie_title = 'Il grido' ORDER BY movie_popularity DESC LIMIT 1", "pred_sql": "SELECT movie_title, movie_popularity FROM movies WHERE movie_title IN ('The General', 'Il grido') ORDER BY movie_popularity DESC LIMIT 1;"}
{"sample_id": 161, "db_id": "movie_platform", "gold_sql": "SELECT CAST(SUM(T4.list_followers) AS REAL) / COUNT(T2.list_id) FROM ratings AS T1 INNER JOIN lists_users AS T2 ON T1.user_id = T2.user_id INNER JOIN movies AS T3 ON T1.movie_id = T3.movie_id INNER JOIN lists AS T4 ON T2.list_id = T4.list_id WHERE T3.movie_title LIKE 'Pavee Lackeen: The Traveller Girl' AND T1.rating_timestamp_utc LIKE '2011-03-27 02:06:34'", "pred_sql": "SELECT AVG(lists.list_followers) AS average_followers\nFROM lists\nJOIN lists_users ON lists.list_id = lists_users.list_id\nJOIN ratings_users ON lists_users.user_id = ratings_users.user_id\nJOIN ratings ON ratings_users.user_id = ratings.user_id\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_title = 'Pavee Lackeen: The Traveller Girl' \nAND ratings.rating_date_utc = '2011-03-27' \nAND ratings.rating_timestamp_utc = '2011-03-27 02:06:34';"}
{"sample_id": 129, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(T2.movie_title) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 4 AND T2.movie_release_year = 1998 ORDER BY T2.movie_popularity DESC LIMIT 1", "pred_sql": "SELECT COUNT(rating_id) AS four_star_ratings\nFROM ratings\nJOIN movies ON ratings.movie_id = movies.movie_id\nWHERE movies.movie_release_year = 1998\nAND movies.movie_popularity = (SELECT MAX(movie_popularity) FROM movies WHERE movie_release_year = 1998)\nAND ratings.rating_score = 4;"}
{"sample_id": 37, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(T2.user_id), T2.rating_url FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_title = 'The Magnificent Ambersons' AND T2.rating_score <= 2", "pred_sql": "SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'The Magnificent Ambersons' AND r.rating_score <= 2;"}
{"sample_id": 157, "db_id": "movie_platform", "gold_sql": "SELECT T2.director_name, T1.rating_score FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_release_year BETWEEN 1970 AND 1979 GROUP BY T2.director_id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1", "pred_sql": "SELECT director_name, COUNT(movies.movie_id) AS movie_count, MAX(ratings.rating_score) AS highest_rating_score\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE movie_release_year BETWEEN 1970 AND 1979\nGROUP BY director_name\nHAVING movie_count = (SELECT MAX(movie_count) FROM (SELECT COUNT(movie_id) AS movie_count\nFROM movies\nWHERE movie_release_year BETWEEN 1970 AND 1979\nGROUP BY director_id))"}
{"sample_id": 1, "db_id": "movie_platform", "gold_sql": "SELECT movie_title, movie_release_year, director_name FROM movies ORDER BY movie_popularity DESC LIMIT 1", "pred_sql": "SELECT movie_title, movie_release_year, director_name FROM movies ORDER BY movie_popularity DESC LIMIT 1;"}
{"sample_id": 52, "db_id": "movie_platform", "gold_sql": "SELECT list_url FROM lists WHERE list_title = 'Short and pretty damn sweet'", "pred_sql": "SELECT * FROM lists WHERE list_title = 'Short and pretty damn sweet';"}
{"sample_id": 149, "db_id": "movie_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.movie_id IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.movie_id) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id", "pred_sql": "SELECT (COUNT(movies.movie_id) - COUNT(ratings.movie_id)) * 100.0 / COUNT(movies.movie_id) AS percentage_unrated\nFROM lists\nJOIN lists_users ON lists.list_id = lists_users.list_id\nJOIN movies ON lists.list_id = movies.movie_id\nLEFT JOIN ratings ON movies.movie_id = ratings.movie_id\nWHERE lists_users.user_id = ?;"}
{"sample_id": 130, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_popularity > 13000 ORDER BY T1.rating_score LIMIT 1", "pred_sql": "SELECT movies.movie_title, COUNT(ratings.rating_id) AS rating_count \nFROM movies \nLEFT JOIN ratings ON movies.movie_id = ratings.movie_id \nWHERE movies.movie_popularity > 13000 \nGROUP BY movies.movie_id \nORDER BY rating_count ASC \nLIMIT 1;"}
{"sample_id": 151, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(movie_id) FROM movies WHERE movie_release_year BETWEEN '1970' AND '1980' AND movie_popularity > 11000", "pred_sql": "SELECT COUNT(*) AS movie_count FROM movies WHERE movie_release_year BETWEEN 1970 AND 1980 AND movie_popularity > 11000;"}
{"sample_id": 103, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.critic_comments DESC LIMIT 3", "pred_sql": "SELECT m.movie_title\nFROM movies m\nJOIN ratings r ON m.movie_id = r.movie_id\nWHERE r.critic != 'None'\nORDER BY r.critic_comments DESC\nLIMIT 3;"}
{"sample_id": 99, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating_score = 5 AND T1.user_id = 94978", "pred_sql": "SELECT movies.movie_title FROM ratings_users JOIN ratings ON ratings_users.user_id = ratings.user_id JOIN movies ON ratings.movie_id = movies.movie_id WHERE ratings_users.user_id = '94978' AND ratings.rating_score = 5;"}
{"sample_id": 116, "db_id": "movie_platform", "gold_sql": "SELECT user_id FROM lists_users WHERE user_subscriber = 0 ORDER BY list_creation_date_utc LIMIT 1", "pred_sql": "SELECT user_id FROM lists WHERE list_followers = '0' ORDER BY list_creation_timestamp_utc ASC LIMIT 1;"}
{"sample_id": 87, "db_id": "movie_platform", "gold_sql": "SELECT COUNT(movie_title) FROM movies WHERE director_name = '\u00c5ke Sandgren'", "pred_sql": "SELECT COUNT(*) AS number_of_films FROM movies WHERE director_name = '\u00c5ke Sandgren';"}
{"sample_id": 74, "db_id": "movie_platform", "gold_sql": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.critic IS NOT NULL", "pred_sql": "SELECT r.rating_url FROM ratings r JOIN movies m ON r.movie_id = m.movie_id WHERE m.movie_title = 'A Way of Life' AND r.critic != 'None';"}
{"sample_id": 121, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY COUNT(T1.critic_comments) DESC LIMIT 1", "pred_sql": "SELECT movies.movie_title FROM movies JOIN ratings ON movies.movie_id = ratings.movie_id ORDER BY ratings.critic_comments DESC LIMIT 1;"}
{"sample_id": 166, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_id, AVG(T1.rating_score), T2.director_name, T2.movie_release_year FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.rating_timestamp_utc ASC LIMIT 10", "pred_sql": "SELECT movies.movie_title, movies.movie_release_year, movies.director_name, AVG(ratings.rating_score) AS average_rating_score\nFROM movies\nJOIN ratings ON movies.movie_id = ratings.movie_id\nGROUP BY movies.movie_id\nORDER BY movies.movie_release_year ASC\nLIMIT 10;"}
{"sample_id": 20, "db_id": "movie_platform", "gold_sql": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg'", "pred_sql": "SELECT movie_title, movie_popularity FROM movies WHERE movie_release_year = 2021 AND director_name = 'Steven Spielberg';"}
{"sample_id": 71, "db_id": "movie_platform", "gold_sql": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.user_id = 39115684", "pred_sql": "SELECT ratings.rating_url FROM ratings JOIN ratings_users ON ratings.user_id = ratings_users.user_id JOIN movies ON ratings.movie_id = movies.movie_id WHERE ratings_users.user_id = '39115684' AND movies.movie_title = 'When Will I Be Loved';"}
{"sample_id": 106, "db_id": "movie_platform", "gold_sql": "SELECT AVG(T1.rating_score) FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title LIKE 'Versailles Rive-Gauche'", "pred_sql": "SELECT AVG(rating_score) AS average_score FROM ratings JOIN movies ON ratings.movie_id = movies.movie_id WHERE movies.movie_title = 'Versailles Rive-Gauche';"}
{"sample_id": 14, "db_id": "movie_platform", "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.movie_release_year = 2021 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id", "pred_sql": "SELECT (COUNT(CASE WHEN m.movie_release_year = 2021 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_rated_movies_2021 FROM ratings r JOIN movies m ON r.movie_id = m.movie_id;"}
{"sample_id": 92, "db_id": "movie_platform", "gold_sql": "SELECT list_title FROM lists GROUP BY list_title ORDER BY COUNT(list_comments) DESC LIMIT 1", "pred_sql": "SELECT list_title FROM lists ORDER BY list_comments DESC LIMIT 1;"}
{"sample_id": 102, "db_id": "movie_platform", "gold_sql": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id GROUP BY T2.movie_title ORDER BY SUM(T1.rating_score) / COUNT(T1.rating_id) DESC LIMIT 1", "pred_sql": "SELECT movies.movie_title, AVG(ratings.rating_score) AS average_score \nFROM ratings \nJOIN movies ON ratings.movie_id = movies.movie_id \nGROUP BY movies.movie_id \nORDER BY average_score DESC \nLIMIT 1;"}
{"sample_id": 8738, "db_id": "chicago_crime", "gold_sql": "SELECT T2.case_number FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.title = 'Criminal Sexual Assault' AND T2.arrest = 'TRUE' AND T1.crime_against = 'Persons' LIMIT 3", "pred_sql": "SELECT crime.case_number, crime.date, crime.block, crime.location_description, crime.arrest, fbi_code.title \nFROM crime \nJOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no \nWHERE fbi_code.title LIKE '%criminal sexual assault%' \nAND crime.arrest = 'true' \nLIMIT 3;"}
{"sample_id": 8742, "db_id": "chicago_crime", "gold_sql": "SELECT T1.fbi_code_no, T1.title FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T3.community_area_name = 'Rogers Park' GROUP BY T1.fbi_code_no, T1.title", "pred_sql": "SELECT fbi_code.title AS major_crime_type\nFROM crime\nJOIN community_area ON crime.community_area_no = community_area.community_area_no\nJOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no\nWHERE community_area.community_area_name = 'Rogers Park'\nGROUP BY fbi_code.title\nORDER BY COUNT(*) DESC\nLIMIT 1;"}
{"sample_id": 8701, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T1.crime_against = 'Society' THEN 1 ELSE 0 END) FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T2.fbi_code_no = T1.fbi_code_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE T3.district_name = 'Wentworth'", "pred_sql": "SELECT COUNT(*) AS crime_count \nFROM crime c \nJOIN fbi_code f ON c.fbi_code_no = f.fbi_code_no \nJOIN district d ON c.district_no = d.district_no \nWHERE f.crime_against = 'Society' \nAND d.district_name = 'Wentworth';"}
{"sample_id": 8690, "db_id": "chicago_crime", "gold_sql": "SELECT T2.community_area_name, T2.population FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T2.community_area_no = T1.community_area_no INNER JOIN IUCR AS T3 ON T3.iucr_no = T1.iucr_no WHERE T3.iucr_no = ( SELECT iucr_no FROM IUCR WHERE secondary_description = 'SOLICIT FOR PROSTITUTE' GROUP BY iucr_no HAVING COUNT(iucr_no) > ( SELECT SUM(CASE WHEN secondary_description = 'SOLICIT FOR PROSTITUTE' THEN 1.0 ELSE 0 END) / COUNT(iucr_no) AS average FROM IUCR ) )", "pred_sql": "SELECT ca.community_area_name, ca.population \nFROM community_area ca \nJOIN (\n    SELECT community_area_no, COUNT(*) AS solicit_count \n    FROM crime \n    WHERE fbi_code_no = (SELECT fbi_code_no FROM fbi_code WHERE title = 'Prostitution') \n    GROUP BY community_area_no \n) AS solicit_counts ON ca.community_area_no = solicit_counts.community_area_no \nWHERE solicit_counts.solicit_count > (\n    SELECT AVG(solicit_count) \n    FROM (\n        SELECT COUNT(*) AS solicit_count \n        FROM crime \n        WHERE fbi_code_no = (SELECT fbi_code_no FROM fbi_code WHERE title = 'Prostitution') \n        GROUP BY community_area_no\n    ) AS avg_solicit\n);"}
{"sample_id": 8717, "db_id": "chicago_crime", "gold_sql": "SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1", "pred_sql": "SELECT iucr.primary_description, iucr.secondary_description, COUNT(*) as incident_count\nFROM crime\nJOIN iucr ON crime.iucr_no = iucr.iucr_no\nWHERE crime.location_description LIKE '%aircraft%'\nGROUP BY iucr.primary_description, iucr.secondary_description\nORDER BY incident_count DESC\nLIMIT 1;"}
{"sample_id": 8756, "db_id": "chicago_crime", "gold_sql": "SELECT ward_no FROM Ward ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT ward_no FROM ward ORDER BY population DESC LIMIT 1;"}
{"sample_id": 8596, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(*) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no WHERE T2.district_name = 'Central'", "pred_sql": "SELECT COUNT(*) AS total_crimes FROM crime INNER JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.community_area_name = 'Central Chicago';"}
{"sample_id": 8680, "db_id": "chicago_crime", "gold_sql": "SELECT T2.location_description FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Austin' GROUP BY T2.location_description ORDER BY COUNT(T2.case_number) DESC LIMIT 1", "pred_sql": "SELECT location_description, COUNT(*) as crime_count \nFROM crime \nWHERE block LIKE '%Austin%'\nGROUP BY location_description \nORDER BY crime_count DESC \nLIMIT 1;"}
{"sample_id": 8753, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T1.commander = 'Jill M. Stevens' THEN 1 ELSE 0 END) FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no", "pred_sql": "SELECT crime.report_no FROM crime JOIN district ON crime.district_no = district.district_no WHERE district.commander = 'Jill M. Stevens';"}
{"sample_id": 8719, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T2.arrest = 'TRUE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.location_description = 'DAY CARE CENTER' AND T1.secondary_description = 'FORCIBLE ENTRY' AND T1.primary_description = 'BURGLARY'", "pred_sql": "SELECT COUNT(*) AS total_arrests FROM crime WHERE arrest = 'true' AND iucr_no IN (SELECT iucr_no FROM iucr WHERE primary_description = 'Burglary' AND secondary_description = 'Forcible Entry') AND location_description LIKE '%day care center%';"}
{"sample_id": 8607, "db_id": "chicago_crime", "gold_sql": "SELECT T1.district_name FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB100065'", "pred_sql": "SELECT district.district_name FROM crime JOIN district ON crime.district_no = district.district_no WHERE crime.case_number = 'JB100065';"}
{"sample_id": 8600, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T1.community_area_name = 'Woodlawn' THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.date LIKE '%1/2018%'", "pred_sql": "SELECT COUNT(*) AS crime_count FROM crime c JOIN community_area ca ON c.community_area_no = ca.community_area_no WHERE ca.community_area_name = 'Woodlawn' AND c.date BETWEEN '2018-01-01' AND '2018-01-31';"}
{"sample_id": 8765, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T2.arrest = 'FALSE' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.primary_description = 'BATTERY'", "pred_sql": "SELECT COUNT(*) AS no_arrests FROM crime WHERE iucr_no IN (SELECT iucr_no FROM iucr WHERE primary_description = 'BATTERY') AND arrest = 'false';"}
{"sample_id": 8681, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(T1.ward_no) AS REAL) / COUNT(DISTINCT T3.side) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T2.ward_no = T1.ward_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no", "pred_sql": "SELECT side, COUNT(DISTINCT community_area_no) AS average_community_areas FROM community_area GROUP BY side;"}
{"sample_id": 8617, "db_id": "chicago_crime", "gold_sql": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'", "pred_sql": "SELECT f.title, f.description FROM crime c JOIN fbi_code f ON c.fbi_code_no = f.fbi_code_no WHERE c.case_number = 'JB134191';"}
{"sample_id": 8741, "db_id": "chicago_crime", "gold_sql": "SELECT T3.community_area_name FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no INNER JOIN Community_Area AS T3 ON T2.community_area_no = T3.community_area_no WHERE T1.title = 'Criminal Sexual Assault' LIMIT 3", "pred_sql": "SELECT DISTINCT ca.community_area_name \nFROM community_area ca \nJOIN crime c ON ca.community_area_no = c.community_area_no \nJOIN fbi_code f ON c.fbi_code_no = f.fbi_code_no \nWHERE f.title LIKE '%Fraud%' \nLIMIT 3;"}
{"sample_id": 8757, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(*) FROM IUCR WHERE primary_description = 'ASSAULT'", "pred_sql": "SELECT COUNT(*) AS incident_count FROM iucr WHERE primary_description = 'ASSAULT';"}
{"sample_id": 8667, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T1.population > 60000 THEN 1 ELSE 0 END) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.side = 'Far North '", "pred_sql": "SELECT crime.report_no FROM crime JOIN community_area ON crime.community_area_no = community_area.community_area_no WHERE community_area.side = 'far north side' AND community_area.population > 60000;"}
{"sample_id": 8611, "db_id": "chicago_crime", "gold_sql": "SELECT T2.district_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT district_no, COUNT(*) AS murder_count FROM crime JOIN fbi_code ON crime.fbi_code_no = fbi_code.fbi_code_no WHERE fbi_code.title = 'First Degree Murder' GROUP BY district_no ORDER BY murder_count DESC LIMIT 1;"}
{"sample_id": 8610, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T2.secondary_description = 'SIMPLE' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.date LIKE '%9/8/2018%' AND T2.primary_description = 'ASSAULT'", "pred_sql": "SELECT COUNT(*) AS simple_assault_count FROM crime WHERE date = '2018/9/8' AND fbi_code_no = (SELECT fbi_code_no FROM fbi_code WHERE title = 'Simple Assault');"}
{"sample_id": 8624, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(population) FROM Community_Area GROUP BY side ORDER BY SUM(population) LIMIT 1", "pred_sql": "SELECT MIN(population) AS least_population FROM community_area;"}
{"sample_id": 8739, "db_id": "chicago_crime", "gold_sql": "SELECT T1.case_number FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.title = 'Criminal Sexual Assault' AND T2.crime_against = 'Persons' AND T1.arrest = 'TRUE' LIMIT 3", "pred_sql": "SELECT district.district_name FROM crime JOIN district ON crime.district_no = district.district_no WHERE crime.case_number = 'JB106545';"}
{"sample_id": 8656, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.arrest = 'TRUE' THEN T2.report_no END) AS REAL) * 100 / COUNT(T2.report_no) FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'West Pullman' AND T2.domestic = 'TRUE'", "pred_sql": "SELECT (COUNT(CASE WHEN arrest = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS arrest_percentage\nFROM crime\nJOIN community_area ON crime.community_area_no = community_area.community_area_no\nWHERE community_area.community_area_name = 'West Pullman' AND domestic = 'true';"}
{"sample_id": 8712, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(*) AS cnt FROM District WHERE zip_code = 60608", "pred_sql": "SELECT COUNT(*) AS district_count FROM district WHERE zip_code = 60608;"}
{"sample_id": 8659, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(*) FROM Crime WHERE date LIKE '1/1/2018%'", "pred_sql": "SELECT COUNT(*) AS total_crimes FROM crime WHERE date = '2018-01-01';"}
{"sample_id": 8589, "db_id": "chicago_crime", "gold_sql": "SELECT commander FROM District WHERE district_name = 'Central'", "pred_sql": "SELECT district.commander FROM district JOIN community_area ON district.district_no = community_area.side WHERE community_area.community_area_name = 'Central Chicago';"}
{"sample_id": 8603, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(T1.report_no) AS REAL) / COUNT(T2.community_area_no) FROM Crime AS T1 INNER JOIN Community_Area AS T2 ON T1.community_area_no = T2.community_area_no WHERE T2.side = 'Central'", "pred_sql": "SELECT AVG(crime_count) AS average_crimes\nFROM (\n    SELECT neighborhood.neighborhood_name, COUNT(crime.report_no) AS crime_count\n    FROM neighborhood\n    JOIN community_area ON neighborhood.community_area_no = community_area.community_area_no\n    JOIN crime ON neighborhood.community_area_no = crime.community_area_no\n    WHERE community_area.community_area_name LIKE '%Central Chicago%'\n    GROUP BY neighborhood.neighborhood_name\n) AS neighborhood_crime_counts;"}
{"sample_id": 8609, "db_id": "chicago_crime", "gold_sql": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB524952'", "pred_sql": "SELECT district.commander FROM crime JOIN district ON crime.district_no = district.district_no WHERE crime.case_number = 'JB524952';"}
{"sample_id": 8604, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no", "pred_sql": "SELECT (COUNT(CASE WHEN d.district_name = 'Central' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_crimes_in_central_district\nFROM crime c\nJOIN district d ON c.district_no = d.district_no;"}
{"sample_id": 8699, "db_id": "chicago_crime", "gold_sql": "SELECT SUM(CASE WHEN T4.neighborhood_name = 'Hermosa' THEN 1 ELSE 0 END) FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN Community_Area AS T3 ON T3.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T4 ON T4.community_area_no = T3.community_area_no", "pred_sql": "SELECT COUNT(DISTINCT iucr.primary_description) AS different_crime_types\nFROM crime\nJOIN neighborhood ON crime.community_area_no = neighborhood.community_area_no\nJOIN iucr ON crime.iucr_no = iucr.iucr_no\nWHERE neighborhood.neighborhood_name = 'Hermosa';"}
{"sample_id": 8657, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.domestic = 'TRUE' THEN T1.report_no END) AS REAL) * 100 / COUNT(T1.report_no), COUNT(CASE WHEN T1.domestic = 'TRUE' AND T1.location_description = 'BANK' THEN T1.report_no END) AS \"number\" FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T2.alderman_first_name = 'Christopher' AND T2.alderman_last_name = 'Taliaferro'", "pred_sql": "SELECT (COUNT(CASE WHEN c.domestic = 'true' THEN 1 END) * 100.0 / COUNT(*)) AS domestic_violence_percentage, GROUP_CONCAT(c.report_no) AS report_numbers\nFROM crime c\nJOIN ward w ON c.ward_no = w.ward_no\nWHERE w.alderman_first_name = 'Christopher' AND w.alderman_last_name = 'Taliaferro' AND c.location_description LIKE '%bank%';"}
{"sample_id": 8695, "db_id": "chicago_crime", "gold_sql": "SELECT alderman_first_name FROM Ward WHERE Population > 50000", "pred_sql": "SELECT alderman_first_name FROM ward WHERE population > 50000;"}
{"sample_id": 8641, "db_id": "chicago_crime", "gold_sql": "SELECT commander, email FROM District WHERE district_name = 'Chicago Lawn'", "pred_sql": "SELECT d.commander, d.email FROM district d JOIN community_area ca ON d.district_no = ca.side WHERE ca.community_area_name = 'Chicago Lawn';"}
{"sample_id": 8682, "db_id": "chicago_crime", "gold_sql": "SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T2.location_description = 'STREET' GROUP BY T1.community_area_no ORDER BY COUNT(T2.location_description) DESC LIMIT 1", "pred_sql": "SELECT community_area.community_area_name, COUNT(crime.report_no) AS crime_count \nFROM community_area \nJOIN crime ON community_area.community_area_no = crime.community_area_no \nGROUP BY community_area.community_area_name \nORDER BY crime_count DESC \nLIMIT 1;"}
{"sample_id": 8592, "db_id": "chicago_crime", "gold_sql": "SELECT COUNT(T3.community_area_no) FROM ( SELECT T1.community_area_no FROM Community_Area AS T1 INNER JOIN Neighborhood AS T2 ON T1.community_area_no = T2.community_area_no WHERE community_area_name = 'Lincoln Square' GROUP BY T1.community_area_no ) T3", "pred_sql": "SELECT COUNT(*) AS neighborhood_count FROM neighborhood WHERE community_area_no = (SELECT community_area_no FROM community_area WHERE community_area_name = 'Lincoln Square');"}
{"sample_id": 8614, "db_id": "chicago_crime", "gold_sql": "SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.case_number = 'JB103470'", "pred_sql": "SELECT ward.alderman_first_name || ' ' || ward.alderman_last_name AS full_name \nFROM crime \nJOIN ward ON crime.ward_no = ward.ward_no \nWHERE crime.case_number = 'JB103470';"}
{"sample_id": 8708, "db_id": "chicago_crime", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.domestic = 'FALSE' THEN T2.case_number END) AS REAL) * 100 / COUNT(T2.case_number) FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no WHERE T1.district_name = 'Jefferson Park'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM crime WHERE district_no = (SELECT district_no FROM district WHERE district_name = 'Jefferson Park'))) AS non_domestic_crime_percentage FROM crime WHERE district_no = (SELECT district_no FROM district WHERE district_name = 'Jefferson Park') AND domestic = 'false';"}
{"sample_id": 8709, "db_id": "chicago_crime", "gold_sql": "SELECT AVG(T2.Population) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.location_description = 'APARTMENT' AND T1.arrest = 'FALSE'", "pred_sql": "SELECT AVG(w.population) AS average_population\nFROM ward w\nJOIN crime c ON w.ward_no = c.ward_no\nJOIN iucr i ON c.iucr_no = i.iucr_no\nWHERE c.arrest = 'false' AND i.primary_description LIKE '%apartment%';"}
{"sample_id": 8698, "db_id": "chicago_crime", "gold_sql": "SELECT T2.latitude, T2.longitude FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T2.community_area_no = T1.community_area_no WHERE T1.community_area_name = 'Belmont Cragin' GROUP BY T2.latitude, T2.longitude", "pred_sql": "SELECT latitude, longitude FROM crime WHERE community_area_no = (SELECT community_area_no FROM community_area WHERE community_area_name = 'Belmont Cragin');"}
{"sample_id": 2697, "db_id": "regional_sales", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.State = 'New York' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderDate = '4/4/20'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM sales orders WHERE orderdate = '04/04/2020')) AS percentage FROM sales orders JOIN store locations ON sales orders._storeid = store locations.storeid WHERE store locations.state = 'New York' AND sales orders.orderdate = '04/04/2020';"}
{"sample_id": 2680, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Order Quantity\" = 3 AND T2.OrderDate LIKE '2/%/18' THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "pred_sql": "SELECT c.\"customer names\" FROM customers c JOIN sales orders so ON c.customerid = so._customerid WHERE so.\"order quantity\" = '3' AND so.orderdate LIKE '2018-02%';"}
{"sample_id": 2653, "db_id": "regional_sales", "gold_sql": "SELECT T1.OrderNumber FROM \"Sales Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1._CustomerID WHERE T2.\"Customer Names\" = 'Qualitest ' ORDER BY T1.\"Order Quantity\" DESC LIMIT 1", "pred_sql": "SELECT so.ordernumber \nFROM sales orders so \nJOIN customers c ON so._customerid = c.customerid \nWHERE c.customer names = 'Qualitest' \nORDER BY so.order quantity DESC \nLIMIT 1;"}
{"sample_id": 2642, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN SUM(T1.\"Order Quantity\") > 5 THEN T2.\"Customer Names\" END AS T FROM \"Sales Orders\" T1 INNER JOIN Customers T2 ON T2.CustomerID = T1._CustomerID WHERE T1.OrderDate = '6/1/18' GROUP BY T1._CustomerID ) WHERE T IS NOT NULL", "pred_sql": "SELECT DISTINCT c.\"customer names\" \nFROM customers c \nJOIN sales orders so ON c.customerid = so._customerid \nWHERE so.\"order quantity\" > 5 AND so.\"orderdate\" = '6/1/2018';"}
{"sample_id": 2701, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T FROM ( SELECT CASE  WHEN OrderDate > '1/1/18' THEN OrderNumber ELSE NULL END AS T FROM \"Sales Orders\" ) WHERE T IS NOT NULL", "pred_sql": "SELECT ordernumber FROM sales orders WHERE orderdate > '1/1/2018';"}
{"sample_id": 2610, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT IIF(T1.\"Unit Cost\" = 781.22, T2.\"Product Name\", NULL) AS T FROM \"Sales Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1._ProductID ) WHERE T IS NOT NULL", "pred_sql": "SELECT products.product_name FROM sales_orders JOIN products ON sales_orders._productid = products.productid WHERE sales_orders.unit_cost = 781.22;"}
{"sample_id": 2623, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.\"Unit Cost\" > 4000 THEN T1.\"Customer Names\" END AS T FROM Customers T1 INNER JOIN \"Sales Orders\" T2 ON T2._CustomerID = T1.CustomerID ) WHERE T IS NOT NULL", "pred_sql": "SELECT DISTINCT c.`customer names` \nFROM `sales orders` so \nJOIN `customers` c ON so.`_customerid` = c.`customerid` \nWHERE so.`unit cost` > 4000;"}
{"sample_id": 2647, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT CASE  WHEN ProductID BETWEEN 30 AND 40 THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL", "pred_sql": "SELECT product name FROM products WHERE productid BETWEEN 30 AND 40;"}
{"sample_id": 2679, "db_id": "regional_sales", "gold_sql": "SELECT T2.\"Product Name\" FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID GROUP BY T1._ProductID ORDER BY SUM(REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '')) DESC LIMIT 10", "pred_sql": "SELECT p.productid, p.product_name, SUM((so.unit_price - so.unit_cost) * so.order_quantity) AS net_profit\nFROM sales_orders so\nJOIN products p ON so._productid = p.productid\nGROUP BY p.productid, p.product_name\nORDER BY net_profit DESC\nLIMIT 10;"}
{"sample_id": 2711, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN T2.State = 'California' AND T1.\"Sales Channel\" = 'In-Store' AND T1.\"Discount Applied\" = 0.2 THEN T2.StoreID END AS T FROM \"Sales Orders\" T1 INNER JOIN \"Store Locations\" T2 ON T2.StoreID = T1._StoreID ) WHERE T IS NOT NULL", "pred_sql": "SELECT DISTINCT sl.storeid \nFROM store locations sl \nJOIN sales orders so ON sl.storeid = so._storeid \nWHERE sl.state = 'California' AND so.discount applied = '0.2';"}
{"sample_id": 2656, "db_id": "regional_sales", "gold_sql": "SELECT T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID WHERE T3.County = 'Maricopa County' ORDER BY T2.\"Order Quantity\" ASC LIMIT 1", "pred_sql": "SELECT p.productid, p.product_name, SUM(so.order_quantity) AS total_sold\nFROM sales_orders so\nJOIN store_locations sl ON so._storeid = sl.storeid\nJOIN products p ON so._productid = p.productid\nWHERE sl.county = 'Maricopa'\nGROUP BY p.productid, p.product_name\nORDER BY total_sold ASC\nLIMIT 1;"}
{"sample_id": 2687, "db_id": "regional_sales", "gold_sql": "SELECT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 5", "pred_sql": "SELECT st.sales team, SUM(so.unit price - so.unit cost) AS net_profit\nFROM sales orders so\nJOIN sales team st ON so._salesteamid = st.salesteamid\nGROUP BY st.sales team\nORDER BY net_profit DESC\nLIMIT 5;"}
{"sample_id": 2686, "db_id": "regional_sales", "gold_sql": "SELECT \"Sales Channel\" FROM ( SELECT T1.\"Sales Channel\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY T2.\"Median Income\" DESC LIMIT 3 ) GROUP BY \"Sales Channel\" ORDER BY COUNT(\"Sales Channel\") DESC LIMIT 1", "pred_sql": "SELECT \"sales channel\", COUNT(*) as channel_count \nFROM sales orders \nJOIN store locations ON sales orders._storeid = store locations.storeid \nJOIN (SELECT statecode, MAX(median income) as max_median_income \n      FROM store locations \n      GROUP BY statecode \n      ORDER BY max_median_income DESC \n      LIMIT 3) as top_states \nON store locations.statecode = top_states.statecode \nGROUP BY \"sales channel\" \nORDER BY channel_count DESC;"}
{"sample_id": 2612, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T1.OrderDate LIKE '%/%/18' AND T2.\"Product Name\" = 'Furniture Cushions' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID", "pred_sql": "SELECT COUNT(*) AS total_orders FROM sales_orders JOIN products ON sales_orders._productid = products.productid WHERE products.product_name = 'furniture cushions' AND sales_orders.orderdate LIKE '2018%';"}
{"sample_id": 2713, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END), CAST(SUM(CASE WHEN T1.\"Product Name\" = 'Candles' THEN T2.\"Order Quantity\" ELSE 0 END) AS REAL) * 100 / SUM(T2.\"Order Quantity\") FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Store Locations\" AS T3 ON T3.StoreID = T2._StoreID", "pred_sql": "SELECT SUM(so.`order quantity`) AS total_order_quantity, (SUM(so.`order quantity`) * 100.0 / (SELECT SUM(`order quantity`) FROM `sales orders`)) AS percentage_of_total_orders\nFROM `sales orders` so\nJOIN `products` p ON so.`_productid` = p.`productid`\nWHERE p.`product name` = 'Candles';"}
{"sample_id": 2638, "db_id": "regional_sales", "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T1.OrderNumber = 'SO - 000115'", "pred_sql": "SELECT sl.* FROM store locations sl JOIN sales orders so ON sl.storeid = so._storeid WHERE so.ordernumber = 'SO - 000115';"}
{"sample_id": 2582, "db_id": "regional_sales", "gold_sql": "SELECT T2.OrderNumber, T1.\"Customer Names\", T2.OrderDate FROM Customers AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._CustomerID = T1.CustomerID INNER JOIN Products AS T3 ON T3.ProductID = T2._ProductID ORDER BY T2.\"Unit Cost\" DESC LIMIT 1", "pred_sql": "SELECT c.\"customer names\", so.\"orderdate\", p.\"product name\", (so.\"order quantity\" * so.\"unit price\") AS total_price\nFROM \"sales orders\" so\nJOIN \"products\" p ON so.\"_productid\" = p.\"productid\"\nJOIN \"customers\" c ON so.\"_customerid\" = c.\"customerid\"\nORDER BY total_price DESC\nLIMIT 1;"}
{"sample_id": 2671, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT OrderNumber, \"Product Name\" FROM ( SELECT IIF(T2.OrderDate = '6/6/18', T2.OrderNumber, NULL) AS \"OrderNumber\" , IIF(T2.OrderDate = '6/6/18', T1.\"Product Name\", NULL) AS \"Product Name\" FROM Products T1 INNER JOIN \"Sales Orders\" T2 ON T2._ProductID = T1.ProductID ) WHERE OrderNumber IS NOT NULL AND \"Product Name\" IS NOT NULL", "pred_sql": "SELECT sales_orders.ordernumber, products.product_name \nFROM sales_orders \nJOIN products ON sales_orders._productid = products.productid \nWHERE sales_orders.orderdate = '6/6/2018';"}
{"sample_id": 2669, "db_id": "regional_sales", "gold_sql": "SELECT COUNT(T1.OrderNumber) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.Population BETWEEN 3000000 AND 4000000", "pred_sql": "SELECT COUNT(*) AS order_count \nFROM sales_orders so \nJOIN store_locations sl ON so._storeid = sl.storeid \nWHERE sl.population BETWEEN '3000000' AND '4000000';"}
{"sample_id": 2725, "db_id": "regional_sales", "gold_sql": "SELECT COUNT(T1.OrderNumber), T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T1.OrderDate LIKE '%/%/19' AND T1.ShipDate LIKE '%/%/19' GROUP BY T2.\"Sales Team\" ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "pred_sql": "SELECT st.`sales team`, COUNT(so.`ordernumber`) AS order_count\nFROM `sales orders` so\nJOIN `sales team` st ON so.`_salesteamid` = st.`salesteamid`\nWHERE strftime('%Y', so.`shipdate`) = '2019'\nGROUP BY st.`sales team`\nORDER BY order_count DESC\nLIMIT 1;"}
{"sample_id": 2579, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T1.ProductID, T1.\"Product Name\" FROM Products AS T1 INNER JOIN \"Sales Orders\" AS T2 ON T2._ProductID = T1.ProductID INNER JOIN \"Sales Team\" AS T3 ON T3.SalesTeamID = T2._SalesTeamID WHERE T3.\"Sales Team\" = 'Douglas Tucker'", "pred_sql": "SELECT sales_orders.ordernumber, products.product_name \nFROM sales_orders \nJOIN sales_team ON sales_orders._salesteamid = sales_team.salesteamid \nJOIN products ON sales_orders._productid = products.productid \nWHERE sales_team.sales_team = 'Douglas Tucker';"}
{"sample_id": 2625, "db_id": "regional_sales", "gold_sql": "SELECT \"City Name\" FROM \"Store Locations\" ORDER BY Population DESC LIMIT 1", "pred_sql": "SELECT \"city name\", MAX(population) AS largest_population FROM \"store locations\" GROUP BY \"city name\" ORDER BY largest_population DESC LIMIT 1;"}
{"sample_id": 2602, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T2.\"Product Name\" = 'Platters' THEN 1 ELSE 0 END) AS num1 , SUM(CASE WHEN T2.\"Product Name\" = 'Serveware' THEN 1 ELSE 0 END) AS num2 FROM \"Sales Orders\" AS T1 INNER JOIN Products AS T2 ON T2.ProductID = T1._ProductID", "pred_sql": "SELECT p.product_name, COUNT(so.ordernumber) AS order_count\nFROM products p\nJOIN sales_orders so ON p.productid = so._productid\nWHERE p.product_name IN ('Platters', 'Serveware')\nGROUP BY p.product_name;"}
{"sample_id": 2710, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T2.\"Sales Team\" FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.Region = 'Midwest' AND T1.\"Order Quantity\" > 5", "pred_sql": "SELECT st.`sales team` \nFROM `sales orders` so \nJOIN `sales team` st ON so.`_salesteamid` = st.`salesteamid` \nWHERE st.`region` = 'Midwest' \nAND so.`order quantity` > 5;"}
{"sample_id": 2718, "db_id": "regional_sales", "gold_sql": "SELECT SUM(IIF(ShipDate LIKE '6/%/18' AND \"Sales Channel\" = 'Online', 1, 0)) FROM \"Sales Orders\"", "pred_sql": "SELECT COUNT(*) AS online_order_count FROM sales_orders WHERE sales_channel = 'Online' AND strftime('%Y-%m', shipdate) = '2018-06';"}
{"sample_id": 2714, "db_id": "regional_sales", "gold_sql": "SELECT T FROM ( SELECT DISTINCT CASE  WHEN \"Sales Team\" = 'Joshua Bennett' THEN Region ELSE NULL END AS T FROM \"Sales Team\" ) WHERE T IS NOT NULL", "pred_sql": "SELECT regions.region FROM customers JOIN store locations ON customers.customerid = store locations.storeid JOIN regions ON store locations.statecode = regions.statecode WHERE customers.customer names = 'Joshua Bennet';"}
{"sample_id": 2685, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T1.ProcuredDate = '10/27/18' AND T2.\"City Name\" = 'Orlando' THEN 1 ELSE 0 END) FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID", "pred_sql": "SELECT COUNT(DISTINCT sl.storeid) AS store_count \nFROM store locations sl \nJOIN sales orders so ON sl.storeid = so._storeid \nWHERE so.procureddate = '10/27/2018' AND sl.city name = 'Oregon';"}
{"sample_id": 2632, "db_id": "regional_sales", "gold_sql": "SELECT SUBSTR(T1.OrderDate, -2, 2) FROM \"Sales Orders\" AS T1 INNER JOIN \"Sales Team\" AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE T2.\"Sales Team\" = 'George Lewis' GROUP BY SUBSTR(T1.OrderDate, -2, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "pred_sql": "SELECT strftime('%Y', orderdate) AS year, COUNT(ordernumber) AS order_count \nFROM sales orders \nJOIN customers ON sales orders._customerid = customers.customerid \nWHERE customers.customer names = 'George Lewis' \nAND strftime('%Y', orderdate) BETWEEN '2018' AND '2020' \nGROUP BY year \nORDER BY order_count DESC \nLIMIT 1;"}
{"sample_id": 2595, "db_id": "regional_sales", "gold_sql": "SELECT DISTINCT T2.StoreID, T2.\"City Name\", T1.State, T2.Type FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode WHERE T2.Type = 'Borough' OR T2.Type = 'CDP'", "pred_sql": "SELECT storeid, \"city name\", state, region FROM \"store locations\" WHERE type = (SELECT type FROM \"store locations\" WHERE type IN ('Borough', 'CDP') GROUP BY type ORDER BY COUNT(*) ASC LIMIT 1)"}
{"sample_id": 2723, "db_id": "regional_sales", "gold_sql": "SELECT SUM(CASE WHEN T1.Region = 'West' AND T2.\"Land Area\" < 20000000 THEN 1 ELSE 0 END) FROM Regions AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StateCode = T1.StateCode", "pred_sql": "SELECT COUNT(*) AS store_count FROM store locations WHERE region = 'West' AND land area < 20000000;"}
{"sample_id": 2708, "db_id": "regional_sales", "gold_sql": "SELECT T2.StoreID FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID WHERE T2.State = 'Arizona' ORDER BY T1.\"Unit Price\" - T1.\"Unit Cost\" DESC LIMIT 1", "pred_sql": "SELECT sl.city name, SUM(so.unit price - so.unit cost) AS net_profit\nFROM store locations sl\nJOIN sales orders so ON sl.storeid = so._storeid\nJOIN regions r ON sl.statecode = r.statecode\nWHERE r.state = 'Arizona'\nGROUP BY sl.city name\nORDER BY net_profit DESC\nLIMIT 1;"}
{"sample_id": 2591, "db_id": "regional_sales", "gold_sql": "SELECT ProductID, T FROM ( SELECT ProductID , CASE  WHEN \"Product Name\" LIKE '%Outdoor%' THEN \"Product Name\" ELSE NULL END AS T FROM Products ) WHERE T IS NOT NULL ORDER BY T DESC", "pred_sql": "SELECT productid, `product name` FROM products WHERE `product name` LIKE '%Outdoor%';"}
{"sample_id": 2738, "db_id": "regional_sales", "gold_sql": "SELECT MAX(\"Discount Applied\") FROM \"Sales Orders\" WHERE OrderDate LIKE '%/%/20'", "pred_sql": "SELECT MAX(\"discount applied\") AS best_discount FROM \"sales orders\" WHERE strftime('%Y', \"orderdate\") = '2020';"}
{"sample_id": 2727, "db_id": "regional_sales", "gold_sql": "SELECT T2.Latitude, T2.Longitude FROM \"Sales Orders\" AS T1 INNER JOIN \"Store Locations\" AS T2 ON T2.StoreID = T1._StoreID ORDER BY REPLACE(T1.\"Unit Price\", ',', '') - REPLACE(T1.\"Unit Cost\", ',', '') DESC LIMIT 3, 1", "pred_sql": "SELECT sl.latitude, sl.longitude \nFROM sales_orders so \nJOIN products p ON so._productid = p.productid \nJOIN store_locations sl ON so._storeid = sl.storeid \nORDER BY (so.unit_price - so.unit_cost) * so.order_quantity DESC \nLIMIT 1 OFFSET 3;"}
{"sample_id": 3119, "db_id": "cars", "gold_sql": "SELECT T1.ID FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Japan' AND T1.model_year = 1979", "pred_sql": "SELECT production.id FROM production JOIN country ON production.country = country.origin WHERE country.origin = 'Asia' AND production.model_year = 1979;"}
{"sample_id": 3120, "db_id": "cars", "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg ASC LIMIT 1", "pred_sql": "SELECT country.origin FROM data JOIN production ON data.id = production.id JOIN country ON production.country = country.origin ORDER BY CAST(data.mpg AS FLOAT) ASC LIMIT 1;"}
{"sample_id": 3145, "db_id": "cars", "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country", "pred_sql": "SELECT (COUNT(CASE WHEN c.country = 'USA' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_american_cars FROM production p JOIN country c ON p.country = c.origin;"}
{"sample_id": 3113, "db_id": "cars", "gold_sql": "SELECT T4.car_name FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country INNER JOIN data AS T4 ON T4.ID = T1.ID WHERE T3.country = 'Japan' ORDER BY T1.price DESC LIMIT 1", "pred_sql": "SELECT d.car_name FROM data d JOIN price p ON d.id = p.id JOIN production pr ON d.id = pr.id JOIN country c ON pr.country = c.origin WHERE c.origin = 'Japan' ORDER BY p.price DESC LIMIT 1;"}
{"sample_id": 3103, "db_id": "cars", "gold_sql": "SELECT T2.country, CAST(COUNT(T1.ID) AS REAL) / COUNT(DISTINCT T1.model_year) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin GROUP BY T2.country ORDER BY COUNT(T2.country) DESC LIMIT 1", "pred_sql": "SELECT c.origin, COUNT(p.id) AS total_cars, AVG(cars_per_year) AS annual_average_cars\nFROM (\n    SELECT p.country, COUNT(p.id) AS cars_per_year\n    FROM production p\n    GROUP BY p.model_year, p.country\n) AS yearly_production\nJOIN country c ON yearly_production.country = c.origin\nGROUP BY c.origin\nORDER BY total_cars DESC\nLIMIT 1;"}
{"sample_id": 3096, "db_id": "cars", "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country ORDER BY T1.mpg DESC LIMIT 1", "pred_sql": "SELECT c.country, d.mpg FROM data d JOIN production p ON d.id = p.id JOIN country c ON p.country = c.origin ORDER BY d.mpg DESC LIMIT 1;"}
{"sample_id": 3114, "db_id": "cars", "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000", "pred_sql": "SELECT car_name FROM data JOIN price ON data.id = price.id WHERE price = 20000;"}
{"sample_id": 3097, "db_id": "cars", "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name LIKE 'dodge%' ORDER BY T2.price ASC LIMIT 1", "pred_sql": "SELECT d.car_name, p.price FROM data d JOIN price p ON d.id = p.id JOIN production pr ON d.id = pr.id JOIN country c ON pr.country = c.origin WHERE c.country = 'Dodge' ORDER BY p.price ASC LIMIT 1;"}
{"sample_id": 3095, "db_id": "cars", "gold_sql": "SELECT COUNT(T2.model_year) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'ford maverick'", "pred_sql": "SELECT COUNT(*) AS introduction_count FROM production WHERE id IN (SELECT id FROM data WHERE car_name = 'Ford Maverick');"}
{"sample_id": 3124, "db_id": "cars", "gold_sql": "SELECT T2.price FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.car_name = 'chevrolet bel air'", "pred_sql": "SELECT price.price FROM price JOIN data ON price.id = data.id WHERE data.car_name = 'Chevrolet Bel Air';"}
{"sample_id": 3090, "db_id": "cars", "gold_sql": "SELECT T1.displacement / T1.cylinders FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 34538.97449", "pred_sql": "SELECT (CAST(d.displacement AS REAL) / CAST(d.cylinders AS REAL)) AS swept_volume\nFROM price p\nJOIN data d ON p.id = d.id\nWHERE p.price = 34538.97449;"}
{"sample_id": 3083, "db_id": "cars", "gold_sql": "SELECT T1.displacement FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '37443.85589'", "pred_sql": "SELECT d.displacement FROM data d JOIN price p ON d.id = p.id WHERE p.price = 37443.85589;"}
{"sample_id": 3092, "db_id": "cars", "gold_sql": "SELECT COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'USA' AND T1.model_year = 1981", "pred_sql": "SELECT COUNT(*) FROM production WHERE country = (SELECT origin FROM country WHERE country = 'USA') AND model_year = 1981;"}
{"sample_id": 3138, "db_id": "cars", "gold_sql": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T1.mpg DESC, T2.price DESC LIMIT 1", "pred_sql": "SELECT d.car_name, p.price, d.mpg FROM data d JOIN price p ON d.id = p.id ORDER BY d.mpg ASC, p.price DESC LIMIT 1;"}
{"sample_id": 3065, "db_id": "cars", "gold_sql": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1", "pred_sql": "SELECT d.acceleration FROM data d JOIN price p ON d.id = p.id ORDER BY p.price DESC LIMIT 1;"}
{"sample_id": 3135, "db_id": "cars", "gold_sql": "SELECT T3.country FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.car_name = 'chevy c20'", "pred_sql": "SELECT country.origin FROM country JOIN production ON country.origin = production.country JOIN data ON production.id = data.id WHERE data.car_name = 'Chevy C20';"}
{"sample_id": 3109, "db_id": "cars", "gold_sql": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID WHERE T2.model_year = 1973 AND T1.horsepower < 100", "pred_sql": "SELECT COUNT(*) FROM data JOIN production ON data.id = production.id WHERE production.model_year = 1973 AND data.horsepower < 100;"}
{"sample_id": 3128, "db_id": "cars", "gold_sql": "SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1", "pred_sql": "SELECT d.acceleration, d.cylinders, p.model_year \nFROM price AS pr \nJOIN data AS d ON pr.id = d.id \nJOIN production AS p ON d.id = p.id \nORDER BY pr.price ASC \nLIMIT 1;"}
{"sample_id": 768, "db_id": "movie", "gold_sql": "SELECT T1.\"MPAA Rating\", T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1", "pred_sql": "SELECT movie.title, movie.\"mpaa rating\" FROM movie JOIN characters ON movie.movieid = characters.movieid JOIN actor ON characters.actorid = actor.actorid WHERE actor.name = 'Leonardo DiCaprio' ORDER BY movie.budget DESC LIMIT 1;"}
{"sample_id": 760, "db_id": "movie", "gold_sql": "SELECT COUNT(*) FROM movie WHERE \"MPAA Rating\" = 'PG' AND \"Release Date\" LIKE '1990-06%'", "pred_sql": "SELECT COUNT(*) FROM movie WHERE \"mpaa rating\" = 'PG' AND strftime('%Y-%m', \"release date\") = '1990-06';"}
{"sample_id": 734, "db_id": "movie", "gold_sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.\"Character Name\" = 'Dr. Archibald ''Moonlight'' Graham'", "pred_sql": "SELECT movie.title FROM movie JOIN characters ON movie.movieid = characters.movieid WHERE characters.character_name = 'Dr. Archibald ''Moonlight'' Graham';"}
{"sample_id": 746, "db_id": "movie", "gold_sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T2.creditOrder = '1' AND T1.Genre = 'Thriller' ORDER BY T1.Rating DESC LIMIT 1", "pred_sql": "SELECT c.`character name` FROM characters c JOIN movie m ON c.movieid = m.movieid WHERE m.genre = 'thriller' ORDER BY m.rating DESC, c.creditorder ASC LIMIT 1;"}
{"sample_id": 757, "db_id": "movie", "gold_sql": "SELECT CAST(SUM(CASE WHEN T3.\"Birth Country\" = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.\"Birth Country\") FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Mrs. Doubtfire'", "pred_sql": "SELECT (COUNT(DISTINCT a.actorid) * 100.0 / (SELECT COUNT(*) FROM actor WHERE \"birth country\" = 'USA')) AS percentage\nFROM actor a\nJOIN characters c ON a.actorid = c.actorid\nJOIN movie m ON c.movieid = m.movieid\nWHERE m.title = 'Mrs. Doubtfire';"}
{"sample_id": 735, "db_id": "movie", "gold_sql": "SELECT T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Tom Cruise'", "pred_sql": "SELECT movie.title FROM movie JOIN characters ON movie.movieid = characters.movieid JOIN actor ON characters.actorid = actor.actorid WHERE actor.name = 'Tom Cruise';"}
{"sample_id": 750, "db_id": "movie", "gold_sql": "SELECT T2.\"Date of Birth\" FROM characters AS T1 INNER JOIN actor AS T2 ON T1.ActorID = T2.ActorID WHERE T1.\"Character Name\" = 'Sully'", "pred_sql": "SELECT a.`date of birth` FROM actor a JOIN characters c ON a.actorid = c.actorid JOIN movie m ON c.movieid = m.movieid WHERE c.`character name` = 'Sully';"}
{"sample_id": 730, "db_id": "movie", "gold_sql": "SELECT T2.\"Character Name\" FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID WHERE T1.Title = 'Look Who''s Talking'", "pred_sql": "SELECT characters.`character name` FROM characters JOIN movie ON characters.movieid = movie.movieid WHERE movie.title = 'Look Who's Talking';"}
{"sample_id": 764, "db_id": "movie", "gold_sql": "SELECT T3.\"Height (Inches)\", T3.NetWorth FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T1.Title = 'Three Men and a Little Lady'", "pred_sql": "SELECT actor.height, actor.networth FROM actor JOIN characters ON actor.actorid = characters.actorid JOIN movie ON characters.movieid = movie.movieid WHERE movie.title = 'Three Men and a Little Lady';"}
{"sample_id": 770, "db_id": "movie", "gold_sql": "SELECT T1.Runtime FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Ethnicity = 'African American' AND T3.\"Date of Birth\" = '1954-12-28'", "pred_sql": "SELECT m.runtime \nFROM movie m \nJOIN characters c ON m.movieid = c.movieid \nJOIN actor a ON c.actorid = a.actorid \nWHERE a.ethnicity = 'African-American' \nAND a.date of birth = '1954-12-28';"}
{"sample_id": 2526, "db_id": "app_store", "gold_sql": "SELECT SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Genres > 1", "pred_sql": "SELECT playstore.app, SUM(user_reviews.sentiment_subjectivity) AS total_sentiment_subjectivity \nFROM playstore \nJOIN user_reviews ON playstore.app = user_reviews.app \nWHERE playstore.genres LIKE '%/%' \nGROUP BY playstore.app;"}
{"sample_id": 2550, "db_id": "app_store", "gold_sql": "SELECT DISTINCT App FROM playstore WHERE Reviews > 75000000 AND \"Content Rating\" = 'Teen'", "pred_sql": "SELECT app FROM playstore WHERE reviews > '75000' AND content_rating = 'Teen';"}
{"sample_id": 2532, "db_id": "app_store", "gold_sql": "SELECT COUNT(App) FROM user_reviews WHERE App = 'Brit + Co' AND Translated_Review IS NOT NULL", "pred_sql": "SELECT COUNT(*) AS review_count FROM user_reviews WHERE app = 'Brit + Co' AND translated_review IS NOT NULL;"}
{"sample_id": 2551, "db_id": "app_store", "gold_sql": "SELECT Genres FROM playstore WHERE Installs = '1,000,000,000+' GROUP BY Genres", "pred_sql": "SELECT DISTINCT genres FROM playstore WHERE installs > '1,000,000,000+';"}
{"sample_id": 2547, "db_id": "app_store", "gold_sql": "SELECT T1.Rating, SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Onefootball - Soccer Scores'", "pred_sql": "SELECT p.rating, SUM(ur.sentiment_subjectivity) AS total_sentiment_subjectivity\nFROM playstore p\nJOIN user_reviews ur ON p.app = ur.app\nWHERE p.app = 'Onefootball - Soccer Scores'"}
{"sample_id": 2573, "db_id": "app_store", "gold_sql": "SELECT COUNT(T1.App), AVG(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.\"Content Rating\" = 'Teen' AND T1.Genres = 'Role Playing'", "pred_sql": "SELECT COUNT(DISTINCT p.app) AS teen_rpg_count, AVG(u.sentiment_polarity) AS average_sentiment_polarity\nFROM playstore p\nJOIN user_reviews u ON p.app = u.app\nWHERE p.category = 'GAME' \nAND p.genres LIKE '%Role Playing%' \nAND p.content_rating = 'Teen';"}
{"sample_id": 2552, "db_id": "app_store", "gold_sql": "SELECT AVG(Price) FROM playstore WHERE Genres = 'Dating'", "pred_sql": "SELECT AVG(CAST(price AS REAL)) AS average_price FROM playstore WHERE category = 'Dating';"}
{"sample_id": 2533, "db_id": "app_store", "gold_sql": "SELECT DISTINCT App FROM playstore WHERE Genres = 'Shopping' GROUP BY App ORDER BY COUNT(App) DESC LIMIT 5", "pred_sql": "SELECT p.app, p.reviews FROM playstore p WHERE p.category = 'Shopping' ORDER BY CAST(p.reviews AS INTEGER) DESC LIMIT 5;"}
{"sample_id": 2570, "db_id": "app_store", "gold_sql": "SELECT T1.Rating, COUNT(T2.Sentiment_Polarity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Dragon Ball Legends' AND CAST(Sentiment_Polarity AS INTEGER) < -0.5", "pred_sql": "SELECT p.rating, COUNT(ur.sentiment) AS dislikes FROM playstore p JOIN user_reviews ur ON p.app = ur.app WHERE p.app = 'Dragon Ball Legends' AND ur.sentiment = 'Negative'"}
{"sample_id": 2536, "db_id": "app_store", "gold_sql": "SELECT Translated_Review FROM user_reviews WHERE App = 'Dog Run - Pet Dog Simulator' AND Sentiment = 'Negative'", "pred_sql": "SELECT translated_review FROM user_reviews WHERE app = 'Dog Run - Pet Dog Simulator' AND sentiment = 'Negative';"}
{"sample_id": 2561, "db_id": "app_store", "gold_sql": "SELECT DISTINCT Rating FROM playstore WHERE App = 'Learn C++'", "pred_sql": "SELECT rating FROM playstore WHERE app = 'Learn C++';"}
{"sample_id": 2566, "db_id": "app_store", "gold_sql": "SELECT T1.App, COUNT(T1.App) COUNTNUMBER FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T2.Sentiment = 'Negative' GROUP BY T1.App ORDER BY T1.Rating LIMIT 5", "pred_sql": "SELECT p.app, p.rating, COUNT(ur.sentiment) AS negative_sentiment_count\nFROM playstore p\nJOIN user_reviews ur ON p.app = ur.app\nWHERE p.category = 'GAME' AND p.genres LIKE '%Puzzle%'\nAND ur.sentiment = 'Negative'\nGROUP BY p.app, p.rating\nORDER BY p.rating ASC\nLIMIT 5;"}
{"sample_id": 4985, "db_id": "olympics", "gold_sql": "SELECT AVG(T5.height) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id INNER JOIN competitor_event AS T3 ON T2.id = T3.event_id INNER JOIN games_competitor AS T4 ON T3.competitor_id = T4.id INNER JOIN person AS T5 ON T4.person_id = T5.id WHERE T1.sport_name = 'Basketball' AND T5.gender = 'M'", "pred_sql": "SELECT AVG(p.height) AS average_height\nFROM person p\nJOIN games_competitor gc ON p.id = gc.person_id\nJOIN event e ON gc.id = competitor_event.competitor_id\nJOIN sport s ON e.sport_id = s.id\nWHERE p.gender = 'M' AND s.sport_name = 'Basketball';"}
{"sample_id": 5000, "db_id": "olympics", "gold_sql": "SELECT sport_name FROM sport WHERE id = 19", "pred_sql": "SELECT sport_name FROM sport WHERE id = 19;"}
{"sample_id": 4957, "db_id": "olympics", "gold_sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name IN ('1976 Summer', '1976 Winter')", "pred_sql": "SELECT city.city_name FROM games_city JOIN games ON games_city.games_id = games.id JOIN city ON games_city.city_id = city.id WHERE games.games_year = 1976;"}
{"sample_id": 4919, "db_id": "olympics", "gold_sql": "SELECT T1.noc FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' ORDER BY T3.height DESC LIMIT 1", "pred_sql": "SELECT noc.noc FROM person AS p\nJOIN person_region AS pr ON p.id = pr.person_id\nJOIN noc_region AS noc ON pr.region_id = noc.id\nWHERE p.gender = 'M' AND p.height = (SELECT MAX(height) FROM person WHERE gender = 'M');"}
{"sample_id": 4974, "db_id": "olympics", "gold_sql": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4", "pred_sql": "SELECT COUNT(DISTINCT games_competitor.person_id) AS medal_winners FROM competitor_event JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id JOIN person_region ON games_competitor.person_id = person_region.person_id WHERE person_region.region_id = 151 AND competitor_event.medal_id IN (1, 2, 3);"}
{"sample_id": 5028, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1948 Summer' AND T3.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS male_competitors_count\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE g.games_year = 1948 AND g.games_name LIKE '%Summer%' AND p.gender = 'M';"}
{"sample_id": 4996, "db_id": "olympics", "gold_sql": "SELECT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T4.city_name = 'Los Angeles' GROUP BY T1.id ORDER BY COUNT(T2.person_id) DESC LIMIT 1", "pred_sql": "SELECT g.games_name\nFROM games g\nJOIN games_city gc ON g.id = gc.games_id\nJOIN games_competitor gc2 ON g.id = gc2.games_id\nWHERE gc.city_id = (SELECT id FROM city WHERE city_name = 'Los Angeles')\nGROUP BY g.id\nORDER BY COUNT(gc2.id) DESC\nLIMIT 1;"}
{"sample_id": 5040, "db_id": "olympics", "gold_sql": "SELECT DISTINCT T1.games_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T2.games_id = 13", "pred_sql": "SELECT games_name FROM games WHERE id = 13;"}
{"sample_id": 5078, "db_id": "olympics", "gold_sql": "SELECT T2.age FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T1.height DESC LIMIT 1", "pred_sql": "SELECT age FROM games_competitor WHERE person_id = (SELECT id FROM person WHERE height != '0' ORDER BY height DESC LIMIT 1)"}
{"sample_id": 4941, "db_id": "olympics", "gold_sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1", "pred_sql": "SELECT full_name FROM person WHERE id = (SELECT person_id FROM games_competitor ORDER BY age ASC LIMIT 1)"}
{"sample_id": 4920, "db_id": "olympics", "gold_sql": "SELECT COUNT(T3.id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'F'", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS female_competitors_count\nFROM games_competitor gc\nJOIN person p ON gc.person_id = p.id\nJOIN person_region pr ON p.id = pr.person_id\nJOIN noc_region nr ON pr.region_id = nr.id\nWHERE nr.noc = 'FIN' AND p.gender = 'F';"}
{"sample_id": 5075, "db_id": "olympics", "gold_sql": "SELECT DISTINCT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.medal_name = 'Gold'", "pred_sql": "SELECT DISTINCT p.full_name \nFROM competitor_event ce \nJOIN games_competitor gc ON ce.competitor_id = gc.id \nJOIN person p ON gc.person_id = p.id \nWHERE ce.medal_id = 1;"}
{"sample_id": 5020, "db_id": "olympics", "gold_sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'London' AND T3.games_year BETWEEN 1900 AND 1992", "pred_sql": "SELECT COUNT(g.id) AS number_of_games FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'London' AND g.games_year BETWEEN 1900 AND 1992;"}
{"sample_id": 4987, "db_id": "olympics", "gold_sql": "SELECT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.full_name = 'Yao Ming'", "pred_sql": "SELECT noc_region.region_name FROM person JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE person.full_name = 'Yao Ming';"}
{"sample_id": 4938, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.id) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Martina Kohlov'", "pred_sql": "SELECT COUNT(games_competitor.id) AS competitor_count FROM games_competitor JOIN person ON games_competitor.person_id = person.id WHERE person.full_name = 'Martina Kohlov';"}
{"sample_id": 4948, "db_id": "olympics", "gold_sql": "SELECT COUNT(T3.id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Stockholm' AND T3.season = 'Summer'", "pred_sql": "SELECT COUNT(*) AS summer_games_count FROM games g JOIN games_city gc ON g.id = gc.games_id JOIN city c ON gc.city_id = c.id WHERE c.city_name = 'Stockholm' AND g.games_name LIKE '%Summer%';"}
{"sample_id": 5065, "db_id": "olympics", "gold_sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'", "pred_sql": "SELECT games_name FROM games INNER JOIN games_city ON games.id = games_city.games_id INNER JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'Paris';"}
{"sample_id": 4949, "db_id": "olympics", "gold_sql": "SELECT T2.region_name FROM person_region AS T1 INNER JOIN noc_region AS T2 ON T1.region_id = T2.id GROUP BY T2.region_name ORDER BY COUNT(T1.person_id) DESC LIMIT 1", "pred_sql": "SELECT noc_region.region_name, COUNT(person.id) AS athlete_count\nFROM person\nJOIN person_region ON person.id = person_region.person_id\nJOIN noc_region ON person_region.region_id = noc_region.id\nGROUP BY noc_region.region_name\nORDER BY athlete_count DESC\nLIMIT 1;"}
{"sample_id": 4978, "db_id": "olympics", "gold_sql": "SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1", "pred_sql": "SELECT p.full_name \nFROM competitor_event ce \nJOIN games_competitor gc ON ce.competitor_id = gc.id \nJOIN event e ON ce.event_id = e.id \nJOIN sport s ON e.sport_id = s.id \nJOIN medal m ON ce.medal_id = m.id \nJOIN person p ON gc.person_id = p.id \nWHERE m.medal_name = 'Gold' AND s.sport_name = 'Cycling';"}
{"sample_id": 4925, "db_id": "olympics", "gold_sql": "SELECT AVG(T3.height) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Finland' AND T3.gender = 'M'", "pred_sql": "SELECT AVG(CAST(height AS REAL)) AS average_height FROM person JOIN games_competitor ON person.id = games_competitor.person_id JOIN person_region ON person.id = person_region.person_id JOIN noc_region ON person_region.region_id = noc_region.id WHERE noc_region.region_name = 'Finland' AND person.gender = 'M';"}
{"sample_id": 5006, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.event_name) FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Cycling'", "pred_sql": "SELECT COUNT(DISTINCT event.id) AS event_count\nFROM event\nJOIN sport ON event.sport_id = sport.id\nWHERE sport.sport_name = 'cycling';"}
{"sample_id": 5002, "db_id": "olympics", "gold_sql": "SELECT id FROM sport WHERE sport_name = 'Hockey'", "pred_sql": "SELECT id FROM sport WHERE sport_name = 'hockey';"}
{"sample_id": 5068, "db_id": "olympics", "gold_sql": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age LIMIT 1", "pred_sql": "SELECT full_name FROM person WHERE id = (SELECT person_id FROM games_competitor ORDER BY age ASC LIMIT 1)"}
{"sample_id": 5043, "db_id": "olympics", "gold_sql": "SELECT T2.event_name FROM sport AS T1 INNER JOIN event AS T2 ON T1.id = T2.sport_id WHERE T1.sport_name = 'Basketball'", "pred_sql": "SELECT event.event_name FROM event JOIN sport ON event.sport_id = sport.id WHERE sport.sport_name = 'Basketball';"}
{"sample_id": 4932, "db_id": "olympics", "gold_sql": "SELECT T2.games_id FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T1.full_name = 'Jessica Carolina Aguilera Aguilera'", "pred_sql": "SELECT games.id FROM games_competitor JOIN person ON games_competitor.person_id = person.id JOIN games ON games_competitor.games_id = games.id WHERE person.full_name = 'Jessica Carolina Aguilera Aguilera';"}
{"sample_id": 5030, "db_id": "olympics", "gold_sql": "SELECT T3.full_name FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2014 Winter' ORDER BY T2.age LIMIT 1", "pred_sql": "SELECT p.full_name, MIN(gc.age) AS youngest_age\nFROM games g\nJOIN games_competitor gc ON g.id = gc.games_id\nJOIN person p ON gc.person_id = p.id\nWHERE g.games_year = 2014 AND g.games_name LIKE '%Winter%'\nGROUP BY p.id\nORDER BY youngest_age ASC\nLIMIT 1;"}
{"sample_id": 4952, "db_id": "olympics", "gold_sql": "SELECT COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '1928 Summer'", "pred_sql": "SELECT COUNT(DISTINCT gc.person_id) AS athlete_count \nFROM games g \nJOIN games_competitor gc ON g.id = gc.games_id \nWHERE g.games_year = 1992;"}
{"sample_id": 4924, "db_id": "olympics", "gold_sql": "SELECT COUNT(T1.games_id) FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.city_name = 'London'", "pred_sql": "SELECT COUNT(games.id) AS times_held FROM games_city JOIN city ON games_city.city_id = city.id JOIN games ON games_city.games_id = games.id WHERE city.city_name = 'London';"}
{"sample_id": 4955, "db_id": "olympics", "gold_sql": "SELECT age FROM games_competitor GROUP BY age ORDER BY COUNT(person_id) DESC LIMIT 1", "pred_sql": "SELECT age, COUNT(*) as count FROM games_competitor GROUP BY age ORDER BY count DESC LIMIT 1;"}
{"sample_id": 4971, "db_id": "olympics", "gold_sql": "SELECT games_year FROM games WHERE season != 'Winter' GROUP BY games_year HAVING COUNT(season) = 1", "pred_sql": "SELECT DISTINCT games_year FROM games WHERE games_year % 4 = 0 AND games_name LIKE '%summer%';"}
{"sample_id": 5031, "db_id": "olympics", "gold_sql": "SELECT AVG(T2.age) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '1988 Winter'", "pred_sql": "SELECT AVG(age) AS average_age FROM games_competitor gc JOIN games g ON gc.games_id = g.id WHERE g.games_year = 1988 AND g.games_name LIKE '%Winter%';"}
{"sample_id": 5073, "db_id": "olympics", "gold_sql": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T3.games_name = '2004 Summer'", "pred_sql": "SELECT city.city_name FROM city JOIN games_city ON city.id = games_city.city_id JOIN games ON games_city.games_id = games.id WHERE games.games_year = 2004 AND games.games_name = 'Summer';"}
{"sample_id": 5024, "db_id": "olympics", "gold_sql": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Beijing' AND T3.games_year = 2008", "pred_sql": "SELECT games.games_name FROM games JOIN games_city ON games.id = games_city.games_id JOIN city ON games_city.city_id = city.id WHERE city.city_name = 'Beijing' AND games.games_year = 2008;"}
{"sample_id": 5060, "db_id": "olympics", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T4.medal_name = 'Bronze' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN event AS T3 ON T1.event_id = T3.id INNER JOIN medal AS T4 ON T1.medal_id = T4.id WHERE T3.event_name LIKE 'Basketball Men%s Basketball'", "pred_sql": "SELECT (COUNT(CASE WHEN m.medal_name = 'Bronze' THEN 1 END) * 100.0 / COUNT(*)) AS bronze_percentage\nFROM games_competitor gc\nJOIN competitor_event ce ON gc.id = ce.competitor_id\nJOIN medal m ON ce.medal_id = m.id\nJOIN person p ON gc.person_id = p.id\nJOIN event e ON ce.event_id = e.id\nJOIN sport s ON e.sport_id = s.id\nWHERE s.sport_name = 'Basketball' AND p.gender = 'M';"}
{"sample_id": 5054, "db_id": "olympics", "gold_sql": "SELECT T4.city_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN games_city AS T3 ON T2.games_id = T3.games_id INNER JOIN city AS T4 ON T3.city_id = T4.id WHERE T1.full_name = 'John Aalberg'", "pred_sql": "SELECT DISTINCT city.city_name \nFROM city \nJOIN games_city ON city.id = games_city.city_id \nJOIN games ON games_city.games_id = games.id \nJOIN games_competitor ON games.id = games_competitor.games_id \nJOIN person ON games_competitor.person_id = person.id \nWHERE person.full_name = 'John Aalberg';"}
{"sample_id": 1206, "db_id": "talkingdata", "gold_sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'game-stress reliever'", "pred_sql": "SELECT app_all.app_id \nFROM app_all \nJOIN app_labels ON app_all.app_id = app_labels.app_id \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'game-stress reliever';"}
{"sample_id": 1240, "db_id": "talkingdata", "gold_sql": "SELECT T2.longitude, T2.latitude FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.\"group\" = 'F24-26' AND T1.gender = 'F'", "pred_sql": "SELECT e.longitude, e.latitude \nFROM events e \nJOIN gender_age g ON e.device_id = g.device_id \nWHERE g.gender = 'F' AND g.age BETWEEN 24 AND 26;"}
{"sample_id": 1174, "db_id": "talkingdata", "gold_sql": "SELECT T1.longitude, T1.latitude, T1.timestamp FROM events AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = 8715964299802120000", "pred_sql": "SELECT e.longitude, e.latitude, e.timestamp \nFROM events e \nJOIN app_events ae ON e.event_id = ae.event_id \nWHERE ae.app_id = '8715964299802120000';"}
{"sample_id": 1227, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'comics'", "pred_sql": "SELECT COUNT(DISTINCT a.app_id) AS user_count\nFROM app_labels a\nJOIN label_categories l ON a.label_id = l.label_id\nWHERE l.category = (SELECT category FROM label_categories WHERE label_id = (SELECT label_id FROM app_labels WHERE app_id IN (SELECT app_id FROM app_all WHERE app_id IN (SELECT app_id FROM app_labels WHERE label_id = (SELECT label_id FROM label_categories WHERE category = 'comics')))));"}
{"sample_id": 1233, "db_id": "talkingdata", "gold_sql": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 826' AND T2.phone_brand = 'HTC'", "pred_sql": "SELECT DISTINCT ga.gender \nFROM gender_age ga \nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id \nWHERE pb.phone_brand = 'HTC' AND pb.device_model = 'Desire 826';"}
{"sample_id": 1147, "db_id": "talkingdata", "gold_sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T2.gender = 'F'", "pred_sql": "SELECT DISTINCT phone_brand_device_model2.device_model \nFROM phone_brand_device_model2 \nJOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id \nWHERE gender_age.gender = 'F';"}
{"sample_id": 1085, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T2.label_id = T1.label_id WHERE T2.category = 'Securities'", "pred_sql": "SELECT COUNT(DISTINCT app_labels.app_id) AS user_count \nFROM app_labels \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'Securities';"}
{"sample_id": 1197, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 50 AND T2.device_model = 'Galaxy Premier'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS user_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.age > 20 AND ga.age < 50 AND pb.device_model = 'Galaxy Premier';"}
{"sample_id": 1179, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T1.gender = 'F' AND T1.age > 80, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'HTC'", "pred_sql": "SELECT (COUNT(CASE WHEN g.gender = 'F' AND g.age > 80 THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage_over_80\nFROM gender_age g\nJOIN phone_brand_device_model2 p ON g.device_id = p.device_id\nWHERE p.phone_brand = 'HTC';"}
{"sample_id": 1226, "db_id": "talkingdata", "gold_sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 5902120154267990000", "pred_sql": "SELECT lc.category \nFROM app_labels al \nJOIN label_categories lc ON al.label_id = lc.label_id \nWHERE al.app_id = (SELECT app_id FROM app_all WHERE app_id = '5902120154267990000')"}
{"sample_id": 1156, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN gender_age AS T2 ON T1.device_id = T2.device_id WHERE T1.timestamp = '2016-05-01' AND T2.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT e.device_id) AS male_device_count\nFROM events e\nJOIN gender_age g ON e.device_id = g.device_id\nWHERE g.gender = 'M' AND DATE(e.timestamp, 'unixepoch') = '2016-05-01';"}
{"sample_id": 1224, "db_id": "talkingdata", "gold_sql": "SELECT IIF(SUM(IIF(T1.gender = 'M', 1, 0)) - SUM(IIF(T1.gender = 'F', 1, 0)) > 0, 'M', 'F') AS gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'", "pred_sql": "SELECT gender, COUNT(*) as count FROM phone_brand_device_model2 pbdm JOIN gender_age ga ON pbdm.device_id = ga.device_id WHERE pbdm.device_model = 'Galaxy Note 2' GROUP BY gender ORDER BY count DESC LIMIT 1;"}
{"sample_id": 1112, "db_id": "talkingdata", "gold_sql": "SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age ) )", "pred_sql": "SELECT phone_brand_device_model2.phone_brand \nFROM gender_age \nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id \nWHERE gender_age.age = (SELECT MIN(age) FROM gender_age)"}
{"sample_id": 1161, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T2.category = 'Securities', 1, 0)) / SUM(IIF(T2.category = 'Finance', 1, 0)) AS per FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id", "pred_sql": "SELECT (SELECT COUNT(DISTINCT app_labels.app_id) FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'Securities') * 1.0 / (SELECT COUNT(DISTINCT app_labels.app_id) FROM app_labels JOIN label_categories ON app_labels.label_id = label_categories.label_id WHERE label_categories.category = 'Finance') AS ratio;"}
{"sample_id": 1043, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(is_active) FROM app_events WHERE event_id = 2 AND is_active = 1", "pred_sql": "SELECT COUNT(DISTINCT app_events.app_id) AS active_users_count FROM app_events WHERE event_id = 2 AND is_active = 1;"}
{"sample_id": 1048, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T3.gender) FROM app_events AS T1 INNER JOIN events_relevant AS T2 ON T2.event_id = T1.event_id INNER JOIN gender_age AS T3 ON T3.device_id = T2.device_id WHERE T1.is_active = 1 AND T3.gender = 'M' AND T2.timestamp LIKE '2016-05-01%'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS active_male_users\nFROM gender_age ga\nJOIN app_events ae ON ga.device_id = ae.app_id\nJOIN events e ON ae.event_id = e.event_id\nWHERE ga.gender = 'M' AND ae.is_active = 1 AND e.timestamp = 1462060800;"}
{"sample_id": 1104, "db_id": "talkingdata", "gold_sql": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'", "pred_sql": "SELECT MIN(age) AS youngest_female_age \nFROM gender_age \nWHERE gender = 'F';"}
{"sample_id": 1124, "db_id": "talkingdata", "gold_sql": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id WHERE T2.longitude = '113' AND T2.latitude = '28' AND T2.timestamp = '2016-05-07 23:55:16'", "pred_sql": "SELECT phone_brand_device_model2.device_model \nFROM events \nJOIN events_relevant ON events.event_id = events_relevant.event_id \nJOIN gender_age ON events_relevant.device_id = gender_age.device_id \nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id \nWHERE events.timestamp = 1462630516 \nAND events.longitude = 113 \nAND events.latitude = 28;"}
{"sample_id": 1234, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(T1.category = 'Academic Information', 1.0, 0)) / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id", "pred_sql": "SELECT (COUNT(DISTINCT app_labels.app_id) * 100.0 / (SELECT COUNT(DISTINCT app_id) FROM app_all)) AS percentage\nFROM app_labels\nJOIN label_categories ON app_labels.label_id = label_categories.label_id\nWHERE label_categories.category = 'Academic Information';"}
{"sample_id": 1221, "db_id": "talkingdata", "gold_sql": "SELECT category, label_id FROM label_categories WHERE category LIKE '%game%' LIMIT 5", "pred_sql": "SELECT lc.category, al.label_id \nFROM label_categories lc \nJOIN app_labels al ON lc.label_id = al.label_id \nWHERE lc.category LIKE '%games%' \nLIMIT 5;"}
{"sample_id": 1229, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.longitude = 114 AND T1.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS male_user_count\nFROM gender_age ga\nJOIN events e ON ga.device_id = e.device_id\nWHERE ga.gender = 'M' AND e.longitude = 114;"}
{"sample_id": 1135, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'", "pred_sql": "SELECT COUNT(*) AS device_count FROM phone_brand_device_model2 WHERE phone_brand = 'vivo';"}
{"sample_id": 1223, "db_id": "talkingdata", "gold_sql": "SELECT SUM(IIF(is_installed = 1 AND is_active = 0, 1, 0)) / COUNT(app_id) AS perrcent FROM app_events WHERE event_id = 6", "pred_sql": "SELECT (COUNT(DISTINCT ae.app_id) * 100.0 / NULLIF((SELECT COUNT(DISTINCT ae2.app_id) FROM app_events ae2 WHERE ae2.event_id = 6), 0)) AS percentage\nFROM app_events ae\nJOIN app_events_relevant aer ON ae.event_id = aer.event_id\nWHERE ae.event_id = 6 AND aer.is_installed = 1 AND aer.is_active = 0;"}
{"sample_id": 1076, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(event_id) FROM \"events\" WHERE SUBSTR(\"timestamp\", 1, 4) = '2016'", "pred_sql": "SELECT COUNT(*) AS total_events FROM events WHERE timestamp >= 1451606400 AND timestamp < 1483228800;"}
{"sample_id": 1231, "db_id": "talkingdata", "gold_sql": "SELECT T3.category FROM app_all AS T1 INNER JOIN app_labels AS T2 ON T1.app_id = T2.app_id INNER JOIN label_categories AS T3 ON T2.label_id = T3.label_id WHERE T1.app_id = -9222198347540750000", "pred_sql": "SELECT lc.category \nFROM app_labels al \nJOIN label_categories lc ON al.label_id = lc.label_id \nWHERE al.app_id = (SELECT app_id FROM app_all WHERE app_id = '-9222198347540750000')"}
{"sample_id": 1202, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(device_model) FROM phone_brand_device_model2 WHERE phone_brand = 'HTC'", "pred_sql": "SELECT COUNT(DISTINCT device_model) AS different_models FROM phone_brand_device_model2 WHERE phone_brand = 'HTC';"}
{"sample_id": 1193, "db_id": "talkingdata", "gold_sql": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = 4955831798976240000", "pred_sql": "SELECT lc.category \nFROM app_labels al \nJOIN label_categories lc ON al.label_id = lc.label_id \nWHERE al.app_id = '4955831798976240000';"}
{"sample_id": 1071, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id WHERE T1.category = 'science fiction'", "pred_sql": "SELECT COUNT(DISTINCT app_all.app_id) AS science_fiction_app_count\nFROM app_all\nJOIN app_labels ON app_all.app_id = app_labels.app_id\nJOIN label_categories ON app_labels.label_id = label_categories.label_id\nWHERE label_categories.category = 'science fiction';"}
{"sample_id": 1195, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Desire 820' AND T1.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS male_users_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pbdm ON ga.device_id = pbdm.device_id\nWHERE ga.gender = 'M' AND pbdm.device_model = 'Desire 820';"}
{"sample_id": 1149, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T2.app_id) FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id INNER JOIN app_events AS T3 ON T2.app_id = T3.app_id WHERE T3.is_active = 0 AND T1.category = 'Property Industry 1.0' AND T3.event_id = 2", "pred_sql": "SELECT COUNT(DISTINCT ae.app_id) AS inactive_users_count\nFROM app_events ae\nJOIN app_events_relevant aer ON ae.app_id = aer.app_id\nJOIN app_labels al ON ae.app_id = al.app_id\nJOIN label_categories lc ON al.label_id = lc.label_id\nWHERE ae.is_active = 0 AND ae.event_id = 2 AND lc.category = 'Property Industry 1.0';"}
{"sample_id": 1053, "db_id": "talkingdata", "gold_sql": "SELECT T.gender FROM ( SELECT T2.gender, COUNT(T2.gender) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.gender ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT gender, COUNT(*) as count FROM gender_age WHERE device_id IN (SELECT device_id FROM phone_brand_device_model2 WHERE phone_brand = 'Vivo') GROUP BY gender ORDER BY count DESC LIMIT 1;"}
{"sample_id": 1230, "db_id": "talkingdata", "gold_sql": "SELECT T1.timestamp FROM events_relevant AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = -8022267440849930000 AND T1.event_id = 7", "pred_sql": "SELECT timestamp FROM events WHERE event_id = 7 AND device_id = -8022267440849930000;"}
{"sample_id": 1080, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(device_id) FROM gender_age WHERE age < 30 AND gender = 'F'", "pred_sql": "SELECT COUNT(*) AS female_users_under_30\nFROM gender_age ga\nJOIN sample_submission ss ON ga.device_id = ss.device_id\nWHERE ga.gender = 'F' AND ga.age < 30;"}
{"sample_id": 1241, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 3' AND T1.gender = 'M'", "pred_sql": "SELECT COUNT(DISTINCT ga.device_id) AS male_users_count\nFROM gender_age ga\nJOIN phone_brand_device_model2 pb ON ga.device_id = pb.device_id\nWHERE ga.gender = 'M' AND pb.phone_brand = 'Samsung' AND pb.device_model = 'Galaxy Note 3';"}
{"sample_id": 1173, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(T1.app_id), T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 79641 GROUP BY T2.longitude, T2.latitude", "pred_sql": "SELECT COUNT(DISTINCT app_all.app_id) AS number_of_app_ids, events.longitude, events.latitude FROM events JOIN app_events ON events.event_id = app_events.event_id JOIN app_events_relevant ON app_events.app_id = app_events_relevant.app_id WHERE events.event_id = 79641 GROUP BY events.longitude, events.latitude;"}
{"sample_id": 1105, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'vivo'", "pred_sql": "SELECT COUNT(DISTINCT device_model) AS model_count FROM phone_brand_device_model2 WHERE phone_brand = 'VIVO';"}
{"sample_id": 1172, "db_id": "talkingdata", "gold_sql": "SELECT T1.label_id, T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Chinese Classical Mythology'", "pred_sql": "SELECT app_labels.label_id, app_labels.app_id \nFROM app_labels \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'Chinese Classical Mythology';"}
{"sample_id": 1236, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(device_id) FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO'", "pred_sql": "SELECT COUNT(*) AS device_count FROM phone_brand_device_model2 WHERE phone_brand = 'OPPO';"}
{"sample_id": 1243, "db_id": "talkingdata", "gold_sql": "SELECT T.phone_brand FROM ( SELECT T2.phone_brand, COUNT(T2.phone_brand) AS num FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 30 GROUP BY T2.phone_brand ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT phone_brand, COUNT(*) as count\nFROM gender_age\nJOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id\nWHERE age BETWEEN 20 AND 29\nGROUP BY phone_brand\nORDER BY count DESC\nLIMIT 1;"}
{"sample_id": 1077, "db_id": "talkingdata", "gold_sql": "SELECT COUNT(event_id) FROM \"events\" WHERE SUBSTR(\"timestamp\", 1, 4) = '2016' AND device_id = 29182687948017100", "pred_sql": "SELECT COUNT(*) AS event_count FROM events WHERE device_id = 29182687948017100 AND strftime('%Y', timestamp, 'unixepoch') = '2016';"}
{"sample_id": 1217, "db_id": "talkingdata", "gold_sql": "SELECT event_id FROM events WHERE timestamp LIKE '2016-05-01%' AND latitude = 31 LIMIT 3", "pred_sql": "SELECT event_id FROM events WHERE latitude = 31 AND DATE(timestamp, 'unixepoch') = '2016-05-01' LIMIT 3;"}
{"sample_id": 1142, "db_id": "talkingdata", "gold_sql": "SELECT T2.app_id FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T1.category = 'Securities'", "pred_sql": "SELECT DISTINCT app_all.app_id \nFROM app_all \nJOIN app_labels ON app_all.app_id = app_labels.app_id \nJOIN label_categories ON app_labels.label_id = label_categories.label_id \nWHERE label_categories.category = 'Securities';"}
{"sample_id": 205, "db_id": "book_publishing_company", "gold_sql": "SELECT COUNT(T1.stor_id) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts'", "pred_sql": "SELECT COUNT(DISTINCT stores.stor_id) AS store_count \nFROM stores \nJOIN sales ON stores.stor_id = sales.stor_id \nJOIN titles ON sales.title_id = titles.title_id \nWHERE titles.title = 'Life Without Fear' AND stores.state = 'MA';"}
{"sample_id": 169, "db_id": "book_publishing_company", "gold_sql": "SELECT T2.title, T2.price, T2.pubdate FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE T1.payterms = 'ON invoice'", "pred_sql": "SELECT titles.title, titles.price, titles.pubdate \nFROM sales \nJOIN titles ON sales.title_id = titles.title_id \nWHERE sales.payterms = 'ON invoice';"}
{"sample_id": 207, "db_id": "book_publishing_company", "gold_sql": "SELECT T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id ORDER BY T1.price DESC LIMIT 1", "pred_sql": "SELECT pub_name FROM publishers JOIN titles ON publishers.pub_id = titles.pub_id ORDER BY price DESC LIMIT 1;"}
{"sample_id": 179, "db_id": "book_publishing_company", "gold_sql": "SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name", "pred_sql": "SELECT stor_name, (SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) * 100.0 / SUM(qty)) AS percentage_net_30 FROM stores JOIN sales ON stores.stor_id = sales.stor_id WHERE stores.stor_id = '7066' GROUP BY stor_name;"}
{"sample_id": 218, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.contract FROM authors AS T1 INNER JOIN titleauthor AS T2 ON T1.au_id = T2.au_id INNER JOIN titles AS T3 ON T2.title_id = T3.title_id WHERE T3.title = 'Sushi, Anyone?'", "pred_sql": "SELECT authors.contract FROM authors JOIN titleauthor ON authors.au_id = titleauthor.au_id JOIN titles ON titleauthor.title_id = titles.title_id WHERE titles.title = 'Sushi, Anyone?';"}
{"sample_id": 223, "db_id": "book_publishing_company", "gold_sql": "SELECT DISTINCT T1.type FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y-%m-%d', T2.ord_date) = '1993-05-29'", "pred_sql": "SELECT titles.type FROM sales JOIN titles ON sales.title_id = titles.title_id WHERE sales.ord_date = '1993/5/29';"}
{"sample_id": 233, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title, T1.type, T1.price FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T2.pub_name = 'New Moon Books' ORDER BY T1.price", "pred_sql": "SELECT titles.title, titles.type, titles.price FROM titles JOIN publishers ON titles.pub_id = publishers.pub_id WHERE publishers.pub_name = 'New Moon Books' ORDER BY titles.price ASC;"}
{"sample_id": 193, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title_id, T1.ytd_sales FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0", "pred_sql": "SELECT titles.title, titles.ytd_sales \nFROM titles \nJOIN titleauthor ON titles.title_id = titleauthor.title_id \nJOIN authors ON titleauthor.au_id = authors.au_id \nWHERE authors.contract = '0';"}
{"sample_id": 167, "db_id": "book_publishing_company", "gold_sql": "SELECT ord_date, SUM(qty) FROM sales GROUP BY ord_date ORDER BY SUM(qty) DESC LIMIT 1", "pred_sql": "SELECT ord_date, SUM(qty) AS total_quantity\nFROM sales\nGROUP BY ord_date\nORDER BY total_quantity DESC\nLIMIT 1;"}
{"sample_id": 234, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id WHERE T2.country = 'USA' ORDER BY T1.royalty DESC", "pred_sql": "SELECT titles.title, titles.royalty \nFROM titles \nJOIN publishers ON titles.pub_id = publishers.pub_id \nWHERE publishers.country = 'US' \nORDER BY titles.royalty DESC;"}
{"sample_id": 228, "db_id": "book_publishing_company", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS REAL) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE STRFTIME('%Y', T1.ord_date) = '1993'", "pred_sql": "SELECT (SUM(CASE WHEN s.city = 'Fremont' THEN qty ELSE 0 END) - SUM(CASE WHEN s.city = 'Portland' THEN qty ELSE 0 END)) * 100.0 / SUM(CASE WHEN s.city = 'Portland' THEN qty ELSE 0 END) AS percent_difference\nFROM sales s\nWHERE s.ord_date BETWEEN '1993-01-01' AND '1993-12-31';"}
{"sample_id": 196, "db_id": "book_publishing_company", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.job_desc IN ('Editor', 'Designer') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.job_id) FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id", "pred_sql": "SELECT (COUNT(CASE WHEN job_id IN (SELECT job_id FROM jobs WHERE job_desc IN ('Editor', 'Designer')) THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM employee;"}
{"sample_id": 210, "db_id": "book_publishing_company", "gold_sql": "SELECT SUM(T1.qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id INNER JOIN titles AS T3 ON T1.title_id = T3.title_id WHERE T2.state = 'Massachusetts' AND T3.type = 'business'", "pred_sql": "SELECT SUM(s.qty) AS total_books_ordered\nFROM sales s\nJOIN titles t ON s.title_id = t.title_id\nJOIN stores st ON s.stor_id = st.stor_id\nWHERE t.title LIKE '%business%' AND st.state = 'MA';"}
{"sample_id": 238, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title, T2.pub_name, T1.ytd_sales FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.notes = 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.'", "pred_sql": "SELECT titles.title, publishers.state, titles.ytd_sales \nFROM titles \nJOIN publishers ON titles.pub_id = publishers.pub_id \nWHERE titles.notes LIKE '%Carefully researched study of the effects of strong emotions on the body%';"}
{"sample_id": 194, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T3.contract = 0 AND T3.state = 'CA' ORDER BY T1.ytd_sales DESC LIMIT 1", "pred_sql": "SELECT a.au_id, a.au_fname, a.au_lname, t.title, t.ytd_sales \nFROM authors a \nJOIN titleauthor ta ON a.au_id = ta.au_id \nJOIN titles t ON ta.title_id = t.title_id \nWHERE a.state = 'CA' AND a.contract = '0' \nORDER BY t.ytd_sales DESC \nLIMIT 1;"}
{"sample_id": 172, "db_id": "book_publishing_company", "gold_sql": "SELECT T1.title, T2.lorange FROM titles AS T1 INNER JOIN roysched AS T2 ON T1.title_id = T2.title_id ORDER BY T2.royalty DESC LIMIT 1", "pred_sql": "SELECT t.title, r.lorange, r.hirange, r.royalty \nFROM titles t \nJOIN roysched r ON t.title_id = r.title_id \nORDER BY r.royalty DESC \nLIMIT 1;"}
{"sample_id": 4910, "db_id": "legislator", "gold_sql": "SELECT T2.contact_form FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Rick Crawford'", "pred_sql": "SELECT ct.contact_form FROM current_terms ct JOIN current c ON ct.bioguide = c.bioguide_id WHERE c.first_name = 'Rick' AND c.last_name = 'Crawford';"}
{"sample_id": 4863, "db_id": "legislator", "gold_sql": "SELECT CAST(COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(CASE WHEN wikipedia_id IS NOT NULL THEN bioguide_id ELSE 0 END) FROM historical ) FROM current", "pred_sql": "SELECT (SELECT COUNT(*) FROM current WHERE wikipedia_id IS NOT NULL) * 1.0 / (SELECT COUNT(*) FROM historical WHERE wikipedia_id IS NOT NULL) AS ratio;"}
{"sample_id": 4848, "db_id": "legislator", "gold_sql": "SELECT first_name, last_name FROM historical WHERE gender_bio = 'F'", "pred_sql": "SELECT * FROM current WHERE gender_bio = 'female';"}
{"sample_id": 4903, "db_id": "legislator", "gold_sql": "SELECT COUNT(gender_bio) FROM current WHERE gender_bio = 'F'", "pred_sql": "SELECT COUNT(*) AS female_legislators FROM current WHERE gender_bio = 'Female';"}
{"sample_id": 4758, "db_id": "legislator", "gold_sql": "SELECT COUNT(*) FROM \"social-media\" WHERE instagram IS NOT NULL AND instagram <> ''", "pred_sql": "SELECT COUNT(*) AS count FROM social-media WHERE instagram IS NOT NULL AND instagram != '';"}
{"sample_id": 4905, "db_id": "legislator", "gold_sql": "SELECT address FROM \"current-terms\" WHERE contact_form = 'http://www.carper.senate.gov/contact/'", "pred_sql": "SELECT address FROM current-terms WHERE contact_form = 'http://www.carper.senate.gov/contact/';"}
{"sample_id": 4850, "db_id": "legislator", "gold_sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class IS NULL", "pred_sql": "SELECT COUNT(*) AS non_senator_count FROM current-terms WHERE type != 'sen';"}
{"sample_id": 4875, "db_id": "legislator", "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NOT NULL AND T2.instagram IS NOT NULL AND T2.twitter IS NOT NULL AND T2.youtube IS NOT NULL", "pred_sql": "SELECT current.official_full_name FROM current JOIN social-media ON current.bioguide_id = social-media.bioguide WHERE social-media.facebook IS NOT NULL AND social-media.instagram IS NOT NULL AND social-media.twitter IS NOT NULL AND social-media.youtube IS NOT NULL;"}
{"sample_id": 4737, "db_id": "legislator", "gold_sql": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = ''", "pred_sql": "SELECT official_full_name FROM current WHERE cspan_id IS NULL OR cspan_id = '';"}
{"sample_id": 4816, "db_id": "legislator", "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.class IS NULL THEN T1.bioguide_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE CAST(T1.birthday_bio AS DATE) <= 1975", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM current)) AS percentage_not_senators_born_before_1975\nFROM current\nWHERE bioguide_id IS NOT NULL AND birthday_bio < '1975-01-01' AND bioguide_id NOT IN (SELECT bioguide FROM current-terms WHERE chamber = 'senate');"}
{"sample_id": 4815, "db_id": "legislator", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.class IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio LIKE '%1964%'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM current)) AS percentage_senators_born_1964\nFROM current\nJOIN current-terms ON current.bioguide_id = current-terms.bioguide\nWHERE current.birthday_bio LIKE '1964%' AND current-terms.type = 'sen';"}
{"sample_id": 4874, "db_id": "legislator", "gold_sql": "SELECT T2.party FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.religion_bio = 'Baptist' GROUP BY T2.party ORDER BY COUNT(T2.party) DESC LIMIT 1", "pred_sql": "SELECT party, COUNT(*) as num_legislators \nFROM current \nWHERE religion_bio = 'Baptist' \nGROUP BY party \nORDER BY num_legislators DESC \nLIMIT 1;"}
{"sample_id": 4779, "db_id": "legislator", "gold_sql": "SELECT T1.official_full_name FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'VA' GROUP BY T1.official_full_name", "pred_sql": "SELECT current.official_full_name FROM current JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE current-terms.state = 'VA';"}
{"sample_id": 4873, "db_id": "legislator", "gold_sql": "SELECT COUNT(T3.bioguide_id) FROM ( SELECT T1.bioguide_id FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.facebook IS NULL GROUP BY T1.bioguide_id ) T3", "pred_sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Jewish' AND bioguide_id NOT IN (SELECT bioguide FROM social-media WHERE facebook IS NOT NULL)"}
{"sample_id": 4829, "db_id": "legislator", "gold_sql": "SELECT official_full_name FROM current WHERE birthday_bio LIKE '1960%'", "pred_sql": "SELECT official_full_name FROM current WHERE birthday_bio LIKE '1960%'"}
{"sample_id": 4865, "db_id": "legislator", "gold_sql": "SELECT COUNT(bioguide_id) FROM historical WHERE religion_bio = 'Catholic' AND ballotpedia_id IS NULL", "pred_sql": "SELECT COUNT(*) FROM current WHERE religion_bio = 'Catholic' AND (ballotpedia_id IS NULL OR ballotpedia_id = '')"}
{"sample_id": 4775, "db_id": "legislator", "gold_sql": "SELECT youtube_id FROM \"social-media\" WHERE youtube = 'RepWassermanSchultz'", "pred_sql": "SELECT youtube_id FROM social-media WHERE facebook = 'RepWassermanSchultz';"}
{"sample_id": 4792, "db_id": "legislator", "gold_sql": "SELECT CAST(SUM(CASE WHEN class = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM \"historical-terms\" WHERE type = 'sen'", "pred_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM current-terms WHERE chamber = 'senate')) AS percent_class_1 FROM current-terms WHERE class = 1 AND chamber = 'senate';"}
{"sample_id": 4794, "db_id": "legislator", "gold_sql": "SELECT SUM(CAST(T2.END - T2.start AS DATE)) AS sum FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'John Conyers, Jr.'", "pred_sql": "SELECT SUM(julianday(end) - julianday(start)) / 365 AS total_years FROM historical-terms WHERE name = 'John Conyers' AND state_rank = 'junior';"}
{"sample_id": 4839, "db_id": "legislator", "gold_sql": "SELECT T2.party, T2.state FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.opensecrets_id = 'N00003689' AND T1.thomas_id = 186 GROUP BY T2.party, T2.state", "pred_sql": "SELECT ct.party, ct.state FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.opensecrets_id = 'N00003689' AND c.thomas_id = '186';"}
{"sample_id": 4743, "db_id": "legislator", "gold_sql": "SELECT COUNT(*) FROM \"social-media\" AS T1 INNER JOIN current AS T2 ON T1.bioguide = T2.bioguide_id WHERE T1.instagram IS NULL", "pred_sql": "SELECT COUNT(*) FROM current c LEFT JOIN social-media sm ON c.bioguide_id = sm.bioguide WHERE sm.instagram IS NULL;"}
{"sample_id": 4751, "db_id": "legislator", "gold_sql": "SELECT T1.state FROM \"current-terms\" AS T1 INNER JOIN current AS T2 ON T2.bioguide_id = T1.bioguide WHERE T1.start = '1993-01-05' AND T2.official_full_name = 'Sherrod Brown'", "pred_sql": "SELECT state FROM current-terms WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Sherrod' AND last_name = 'Brown') AND start = '1993-01-05';"}
{"sample_id": 4789, "db_id": "legislator", "gold_sql": "SELECT CAST(SUM(CASE WHEN gender_bio = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_bio = 'F' THEN 1 ELSE 0 END) FROM historical", "pred_sql": "SELECT gender_bio, COUNT(*) AS count FROM historical GROUP BY gender_bio;"}
{"sample_id": 4746, "db_id": "legislator", "gold_sql": "SELECT T2.facebook FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id ORDER BY T1.birthday_bio LIMIT 1", "pred_sql": "SELECT sm.facebook FROM current c JOIN social-media sm ON c.bioguide_id = sm.bioguide ORDER BY c.birthday_bio ASC LIMIT 1;"}
{"sample_id": 4748, "db_id": "legislator", "gold_sql": "SELECT SUM(CASE WHEN T1.official_full_name = 'Roger F. Wicker' THEN 1 ELSE 0 END) AS count FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.district IS NULL OR T2.district = ''", "pred_sql": "SELECT COUNT(*) AS term_count FROM historical-terms WHERE bioguide = (SELECT bioguide_id FROM current WHERE first_name = 'Roger' AND last_name = 'Wicker') AND type = 'rep';"}
{"sample_id": 4811, "db_id": "legislator", "gold_sql": "SELECT T2.title FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = '1942-02-20' GROUP BY T2.title", "pred_sql": "SELECT title FROM current WHERE birthday_bio = '1942-02-20';"}
{"sample_id": 4797, "db_id": "legislator", "gold_sql": "SELECT T1.official_full_name, T1.nickname_name FROM current AS T1 INNER JOIN \"social-media\" AS T2 ON T2.bioguide = T1.bioguide_id WHERE T2.instagram IS NOT NULL AND T1.thomas_id < 1000", "pred_sql": "SELECT c.official_full_name, c.nickname_name \nFROM current c \nJOIN social-media sm ON c.bioguide_id = sm.bioguide \nWHERE sm.instagram IS NOT NULL \nAND c.thomas_id < '1000';"}
{"sample_id": 4771, "db_id": "legislator", "gold_sql": "SELECT T2.district FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.official_full_name = 'Chris Van Hollen' AND T2.district IS NOT NULL GROUP BY T2.district", "pred_sql": "SELECT current_terms.district FROM current_terms JOIN current ON current_terms.bioguide = current.bioguide_id WHERE current.first_name = 'Chris' AND current.last_name = 'Van Hollen';"}
{"sample_id": 4825, "db_id": "legislator", "gold_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'", "pred_sql": "SELECT COUNT(*) AS male_legislators FROM current WHERE gender_bio = 'male';"}
{"sample_id": 4799, "db_id": "legislator", "gold_sql": "SELECT T1.party, T1.state FROM \"historical-terms\" AS T1 INNER JOIN historical AS T2 ON T2.bioguide_id = T1.bioguide WHERE T2.house_history_id IS NOT NULL AND T2.birthday_bio LIKE '%1738%'", "pred_sql": "SELECT ct.party, ct.state FROM current c JOIN current-terms ct ON c.bioguide_id = ct.bioguide WHERE c.birthday_bio LIKE '1738%' AND ct.type = 'rep';"}
{"sample_id": 4756, "db_id": "legislator", "gold_sql": "SELECT COUNT(*) FROM current WHERE gender_bio = 'M'", "pred_sql": "SELECT COUNT(*) AS male_count FROM current WHERE gender_bio = 'male';"}
{"sample_id": 4866, "db_id": "legislator", "gold_sql": "SELECT COUNT(bioguide) FROM \"current-terms\" WHERE class = 1 AND party = 'Republican'", "pred_sql": "SELECT COUNT(*) FROM current-terms WHERE class = '1' AND party = 'Republican';"}
{"sample_id": 4879, "db_id": "legislator", "gold_sql": "SELECT COUNT(T.bioguide_id) FROM ( SELECT T1.bioguide_id FROM historical AS T1 INNER JOIN \"historical-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.first_name = 'Benjamin' AND T2.party = 'Federalist' AND T2.type = 'rep' GROUP BY T1.bioguide_id ) AS T", "pred_sql": "SELECT COUNT(*) FROM current INNER JOIN current-terms ON current.bioguide_id = current-terms.bioguide WHERE current.first_name = 'Benjamin' AND current-terms.party = 'Federalist';"}
{"sample_id": 4880, "db_id": "legislator", "gold_sql": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(strftime('%Y', T2.\"end\") AS int) - CAST(strftime('%Y', T2.start) AS int)) > 10 THEN 1 ELSE 0 END AS result FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3", "pred_sql": "SELECT COUNT(DISTINCT ct.bioguide_id) AS female_representatives_count\nFROM current AS c\nJOIN current-terms AS ct ON c.bioguide_id = ct.bioguide\nWHERE c.gender_bio = 'female' \nAND ct.state = 'CA' \nAND (julianday(ct.end) - julianday(ct.start)) / 365.25 >= 10;"}
{"sample_id": 4892, "db_id": "legislator", "gold_sql": "SELECT COUNT(T2.bioguide) FROM current AS T1 INNER JOIN \"current-terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.birthday_bio = ( SELECT MIN(birthday_bio) FROM current )", "pred_sql": "SELECT COUNT(*) AS term_count FROM current-terms WHERE bioguide IN (SELECT bioguide_id FROM current ORDER BY birthday_bio ASC LIMIT 1)"}
{"sample_id": 4869, "db_id": "legislator", "gold_sql": "SELECT first_name, last_name FROM historical ORDER BY birthday_bio LIMIT 1", "pred_sql": "SELECT official_full_name FROM current ORDER BY birthday_bio ASC LIMIT 1;"}
{"sample_id": 9060, "db_id": "bike_share_1", "gold_sql": "SELECT T2.lat, T2.long FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name )", "pred_sql": "SELECT s.lat, s.long FROM trip t JOIN station s ON t.start_station_id = s.id ORDER BY t.duration DESC LIMIT 1;"}
{"sample_id": 9047, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(T1.duration) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.events = 'Fog'", "pred_sql": "SELECT AVG(duration) AS average_duration\nFROM trip\nJOIN weather ON date = start_date\nWHERE events = 'Fog';"}
{"sample_id": 9083, "db_id": "bike_share_1", "gold_sql": "SELECT name FROM station WHERE installation_date = '12/31/2013' AND city = 'Mountain View'", "pred_sql": "SELECT name FROM station WHERE city = 'Mountain View' AND installation_date = '12/31/2013';"}
{"sample_id": 8992, "db_id": "bike_share_1", "gold_sql": "SELECT T1.id, T1.duration FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2.date = SUBSTR(CAST(T1.start_date AS TEXT), 1, INSTR(T1.start_date, ' ') - 1) WHERE T2.events LIKE '%Rain%' OR T2.events LIKE '%rain%'", "pred_sql": "SELECT trip.start_station_name, trip.end_station_name, trip.duration \nFROM trip \nJOIN weather ON date(trip.start_date) = weather.date \nWHERE weather.events = 'Rain';"}
{"sample_id": 9058, "db_id": "bike_share_1", "gold_sql": "SELECT DISTINCT T1.start_station_name FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), -4) = '2013' AND T2.zip_code = 94107 AND T2.max_temperature_f > 80", "pred_sql": "SELECT DISTINCT trip.start_station_name \nFROM trip \nJOIN weather ON date(start_date) = date(weather.date) \nWHERE weather.max_humidity > 80 \nAND weather.zip_code = 94107 \nAND strftime('%Y', start_date) = '2013';"}
{"sample_id": 8997, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(T1.duration), AVG(T2.wind_dir_degrees) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTR(CAST(T2.date AS TEXT), 1, INSTR(T2.date, '/') - 1) IN ('7', '8', '9') AND SUBSTR(CAST(T2.date AS TEXT), -4) = '2013'", "pred_sql": "SELECT trip.bike_id, AVG(trip.duration) AS average_usage, AVG(weather.wind_dir_degrees) AS average_wind_direction\nFROM trip\nJOIN weather ON DATE(trip.start_date) = DATE(weather.date)\nWHERE trip.start_date BETWEEN '2013-07-01' AND '2013-09-30'\nGROUP BY trip.bike_id;"}
{"sample_id": 9093, "db_id": "bike_share_1", "gold_sql": "SELECT T1.name, T1.lat, T1.long FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T2.start_station_name = 'Market at 4th' AND T2.end_date = '8/29/2013 12:45'", "pred_sql": "SELECT s.name, s.lat, s.long FROM trip t JOIN station s ON t.end_station_id = s.id WHERE t.start_station_name = 'Market at 4th' AND t.end_date = '2013-08-29 12:45:00';"}
{"sample_id": 9039, "db_id": "bike_share_1", "gold_sql": "SELECT T1.id FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 AND T1.duration = ( SELECT MIN(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.dock_count = 15 )", "pred_sql": "SELECT * FROM trip WHERE start_station_id IN (SELECT id FROM station WHERE dock_count = '15') ORDER BY duration ASC LIMIT 1;"}
{"sample_id": 9001, "db_id": "bike_share_1", "gold_sql": "SELECT bike_id FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' AND duration = ( SELECT MAX(duration) FROM trip WHERE start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%' AND end_station_name = 'California Ave Caltrain Station' AND start_station_name = 'University and Emerson' )", "pred_sql": "SELECT t.bike_id, MAX(t.duration) AS longest_duration\nFROM trip t\nJOIN station s1 ON t.start_station_name = s1.name\nJOIN station s2 ON t.end_station_name = s2.name\nWHERE s1.name IN ('University', 'Emerson')\nAND s2.name = 'California Ave Caltrain Station'\nAND DATE(t.start_date) = '2013-08-29'\nGROUP BY t.bike_id\nORDER BY longest_duration DESC\nLIMIT 1;"}
{"sample_id": 8994, "db_id": "bike_share_1", "gold_sql": "SELECT COUNT(T2.start_date) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '8/%/2013%' AND T1.city = 'Redwood City'", "pred_sql": "SELECT COUNT(*) AS bikes_borrowed FROM trip WHERE start_station_name = 'Redwood City' AND start_date BETWEEN '2013-08-01' AND '2013-08-31';"}
{"sample_id": 9013, "db_id": "bike_share_1", "gold_sql": "SELECT T1.start_station_name, T1.end_station_name, T2.city FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration = ( SELECT MAX(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )", "pred_sql": "SELECT t.start_station_name, t.end_station_name, s1.city AS start_city, s2.city AS end_city, t.duration \nFROM trip t \nJOIN station s1 ON t.start_station_id = s1.id \nJOIN station s2 ON t.end_station_id = s2.id \nORDER BY t.duration DESC \nLIMIT 1;"}
{"sample_id": 8991, "db_id": "bike_share_1", "gold_sql": "SELECT T2.time FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.bikes_available = ( SELECT MAX(T2.bikes_available) FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T1.name = 'San Jose Diridon Caltrain Station' )", "pred_sql": "SELECT s.installation_date, st.time, st.bikes_available \nFROM station s \nJOIN status st ON s.id = st.station_id \nWHERE s.name = 'San Jose Diridon Caltrain Station' \nORDER BY st.bikes_available DESC \nLIMIT 1;"}
{"sample_id": 9050, "db_id": "bike_share_1", "gold_sql": "SELECT T2.mean_humidity FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.id = 4275", "pred_sql": "SELECT mean_humidity FROM weather WHERE date IN (SELECT start_date FROM trip WHERE id = '4275')"}
{"sample_id": 9012, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'Palo Alto'", "pred_sql": "SELECT AVG(duration) AS average_duration FROM trip WHERE start_station_name IN (SELECT name FROM station WHERE city = 'Palo Alto');"}
{"sample_id": 9059, "db_id": "bike_share_1", "gold_sql": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T1.id = T2.start_station_id WHERE T2.subscription_type = 'Subscriber' AND T2.start_date LIKE '8/%/2013%' AND T1.dock_count > 20", "pred_sql": "SELECT COUNT(*) AS trip_count \nFROM trip \nWHERE subscription_type = 'Subscriber' \nAND start_date BETWEEN '2013-08-01' AND '2013-08-31' \nAND start_station_id IN (\n    SELECT id \n    FROM station \n    WHERE dock_count > 20\n);"}
{"sample_id": 9074, "db_id": "bike_share_1", "gold_sql": "SELECT DISTINCT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.zip_code = 94107", "pred_sql": "SELECT * FROM station WHERE city = 'San Francisco' AND zip_code = '94107';"}
{"sample_id": 9043, "db_id": "bike_share_1", "gold_sql": "SELECT AVG(duration) FROM trip WHERE start_date LIKE '%2015%' AND start_station_name = 'South Van Ness at Market'", "pred_sql": "SELECT AVG(duration) AS average_duration FROM trip WHERE start_station_name = 'South Van Ness at Market' AND strftime('%Y', start_date) = '2015';"}
{"sample_id": 9007, "db_id": "bike_share_1", "gold_sql": "SELECT MIN(T2.duration), T2.end_station_name, COUNT(T2.start_station_name) FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE T2.start_date LIKE '12/1/2013%' AND T2.start_station_name = 'South Van Ness at Market' AND T2.subscription_type = 'Subscriber'", "pred_sql": "SELECT trip.end_station_name, station.dock_count\nFROM trip\nJOIN station ON trip.end_station_id = station.id\nWHERE trip.start_station_name = 'South Van Ness at Market'\nAND trip.start_date LIKE '2013-12-01%'\nAND trip.subscription_type = 'Subscriber'\nORDER BY trip.duration ASC\nLIMIT 1;"}
{"sample_id": 9022, "db_id": "bike_share_1", "gold_sql": "SELECT SUM(T2.docks_available) FROM trip AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.start_station_id WHERE T1.zip_code = 912900", "pred_sql": "SELECT s.dock_count FROM station s JOIN trip t ON s.id = t.start_station_id WHERE t.id = '912900';"}
{"sample_id": 9034, "db_id": "bike_share_1", "gold_sql": "SELECT SUM(CASE WHEN city = 'San Francisco' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station", "pred_sql": "SELECT COUNT(*) FROM station WHERE city = 'San Francisco' AND installation_date LIKE '2014%';"}
{"sample_id": 9070, "db_id": "bike_share_1", "gold_sql": "SELECT SUM(CASE WHEN city = 'Redwood City' AND SUBSTR(installation_date, -4) < '2014' THEN dock_count ELSE 0 END) NUM FROM station", "pred_sql": "SELECT SUM(dock_count) AS total_bikes FROM station WHERE city = 'Redwood City' AND installation_date < '2014-01-01';"}
{"sample_id": 8987, "db_id": "bike_share_1", "gold_sql": "SELECT DISTINCT T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, '/') + 1) - SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, ' ') - 5) <> SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, '/') + 1) - SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, ' ') - 5)", "pred_sql": "SELECT trip.id, trip.start_station_name, trip.end_station_name, station.city \nFROM trip \nJOIN station ON trip.end_station_id = station.id \nWHERE DATE(trip.start_date) <> DATE(trip.end_date);"}
{"sample_id": 8998, "db_id": "bike_share_1", "gold_sql": "SELECT SUM(CASE WHEN city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014' THEN 1 ELSE 0 END) FROM station UNION SELECT name FROM station WHERE city = 'San Jose' AND SUBSTR(installation_date, -4) = '2014'", "pred_sql": "SELECT name FROM station WHERE city = 'San Jose' AND installation_date LIKE '2014%';"}
{"sample_id": 7669, "db_id": "hockey", "gold_sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'All-Rookie' AND T1.birthCity = 'Toronto'", "pred_sql": "SELECT COUNT(DISTINCT awardsplayers.playerid) AS player_count\nFROM awardsplayers\nJOIN master ON awardsplayers.playerid = master.playerid\nWHERE awardsplayers.award = 'All-Rookie' AND master.birthcity = 'Toronto';"}
{"sample_id": 7723, "db_id": "hockey", "gold_sql": "SELECT award FROM Teams AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.lgID = T2.lgID WHERE T1.lgID = 'NHL' GROUP BY T2.coachID, T2.award ORDER BY COUNT(T2.award) DESC LIMIT 1", "pred_sql": "SELECT award, COUNT(*) as award_count\nFROM awardscoaches\nWHERE coachid = (SELECT coachid\n                  FROM coaches\n                  ORDER BY w DESC\n                  LIMIT 1)\nGROUP BY award\nORDER BY award_count DESC\nLIMIT 1;"}
{"sample_id": 7720, "db_id": "hockey", "gold_sql": "SELECT T2.legendsID FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2011 ORDER BY 1 - CAST(T1.PostGA AS REAL) / T1.PostSA DESC LIMIT 1", "pred_sql": "SELECT g.playerid, m.legendsid \nFROM goalies g \nJOIN master m ON g.playerid = m.playerid \nWHERE g.year = '2011' \nORDER BY (g.w / (g.w + g.l)) DESC \nLIMIT 1;"}
{"sample_id": 7796, "db_id": "hockey", "gold_sql": "SELECT COUNT(DISTINCT playerID) FROM Goalies AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T2.name = 'Calgary Flames'", "pred_sql": "SELECT COUNT(DISTINCT playerid) AS goalie_count FROM goalies WHERE tmid = 'CGY';"}
{"sample_id": 7714, "db_id": "hockey", "gold_sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1989 GROUP BY T2.playerID HAVING SUM(T2.SHG) = 7", "pred_sql": "SELECT shootcatch FROM master JOIN scoring ON master.playerid = scoring.playerid WHERE scoring.year = '1989' AND scoring.shg = 7;"}
{"sample_id": 7688, "db_id": "hockey", "gold_sql": "SELECT SUM(T1.W) FROM Coaches AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1933 AND T2.award = 'Second Team All-Star'", "pred_sql": "SELECT c.w FROM coaches c JOIN awardscoaches a ON c.coachid = a.coachid WHERE a.award = 'Second Team All-Star' AND a.year = 1933;"}
{"sample_id": 7721, "db_id": "hockey", "gold_sql": "SELECT COUNT(playerID) FROM Master WHERE playerID IS NOT NULL AND coachID IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT master.coachid) AS former_athletes_coaches_count\nFROM master\nWHERE master.coachid IS NOT NULL;"}
{"sample_id": 7710, "db_id": "hockey", "gold_sql": "SELECT T1.shootCatch FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 ORDER BY T2.SHO DESC LIMIT 1", "pred_sql": "SELECT shootcatch FROM goalies WHERE year = '1996' ORDER BY sho DESC LIMIT 1;"}
{"sample_id": 7667, "db_id": "hockey", "gold_sql": "SELECT COUNT(T1.playerID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID WHERE T1.playerID IS NOT NULL AND T1.coachID IS NOT NULL", "pred_sql": "SELECT COUNT(DISTINCT m.coachid) AS hof_coaches_count\nFROM master m\nJOIN hof h ON m.coachid = h.hofid;"}
{"sample_id": 7639, "db_id": "hockey", "gold_sql": "SELECT T2.nameGiven, T3.name FROM Coaches AS T1 INNER JOIN Master AS T2 ON T2.coachID = T1.coachID INNER JOIN Teams AS T3 ON T1.lgID = T3.lgID WHERE T1.coachID IS NOT NULL ORDER BY CAST(T1.w AS REAL) / T1.g DESC LIMIT 1", "pred_sql": "SELECT c.firstname, c.tmid, (CAST(c.w AS FLOAT) / (CAST(c.w AS FLOAT) + CAST(c.l AS FLOAT))) AS winning_percentage\nFROM coaches c\nLEFT JOIN master m ON c.coachid = m.coachid\nWHERE m.playerid IS NULL\nORDER BY winning_percentage DESC\nLIMIT 1;"}
{"sample_id": 7680, "db_id": "hockey", "gold_sql": "SELECT SUM(T1.weight / (T1.height * T1.height)) / COUNT(T1.coachID) FROM Master AS T1 INNER JOIN HOF AS T2 ON T1.hofID = T2.hofID", "pred_sql": "SELECT AVG((weight / (height * height))) AS average_bmi\nFROM coaches\nJOIN hof ON coaches.coachid = hof.hofid;"}
{"sample_id": 7623, "db_id": "hockey", "gold_sql": "SELECT T1.firstName, T1.lastName , T2.year FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.ENG >= 10", "pred_sql": "SELECT master.firstname, master.lastname, goaliessc.year, goaliessc.tmid, goaliessc.eng \nFROM goaliessc \nJOIN master ON goaliessc.playerid = master.playerid \nWHERE goaliessc.eng >= 10;"}
{"sample_id": 7620, "db_id": "hockey", "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1", "pred_sql": "SELECT DISTINCT m.firstname, m.lastname \nFROM master m \nJOIN goalies g ON m.playerid = g.playerid \nWHERE g.lgid IN ('PCHA', 'NHL') \nGROUP BY m.playerid \nHAVING COUNT(DISTINCT g.lgid) = 2;"}
{"sample_id": 7708, "db_id": "hockey", "gold_sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 2008 ORDER BY T2.PostSA DESC LIMIT 1", "pred_sql": "SELECT DISTINCT m.birthyear FROM goaliessc g JOIN master m ON g.playerid = m.playerid WHERE g.year = '2008' ORDER BY g.sa DESC LIMIT 1;"}
{"sample_id": 7712, "db_id": "hockey", "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1981 GROUP BY T2.playerID ORDER BY SUM(T2.\"+/-\") DESC LIMIT 1", "pred_sql": "SELECT CONCAT(m.firstname, ' ', m.lastname) AS full_name\nFROM scoring s\nJOIN master m ON s.playerid = m.playerid\nWHERE s.year = '1981'\nORDER BY s.'+/-' DESC\nLIMIT 1;"}
{"sample_id": 7701, "db_id": "hockey", "gold_sql": "SELECT GP FROM ScoringSC WHERE playerID = 'broadpu01' AND YEAR = 1922", "pred_sql": "SELECT SUM(gp) AS total_games_played FROM scoring WHERE playerid = 'broadpu01' AND year = 1922;"}
{"sample_id": 7751, "db_id": "hockey", "gold_sql": "SELECT CAST(SUM(BenchMinor) AS REAL) / 2 FROM Teams WHERE name = 'St. Louis Blues'", "pred_sql": "SELECT SUM(benchminor) AS total_bench_minor_penalties FROM teams WHERE name = 'St. Louis Blues';"}
{"sample_id": 7655, "db_id": "hockey", "gold_sql": "SELECT COUNT(hofID) FROM HOF WHERE year > 1980 AND category = 'Player'", "pred_sql": "SELECT COUNT(*) AS player_count FROM hof WHERE year > '1980' AND category = 'Player';"}
{"sample_id": 7764, "db_id": "hockey", "gold_sql": "SELECT T2.name, T3.name FROM TeamVsTeam AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Teams AS T3 ON T1.year = T3.year AND T1.oppID = T3.tmID WHERE T1.year = 1909 AND T1.T = 1", "pred_sql": "SELECT name FROM teams WHERE year = '1909' AND t = '1';"}
{"sample_id": 7717, "db_id": "hockey", "gold_sql": "SELECT DISTINCT T3.firstName, T3.lastName FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.year = '2003' GROUP BY T3.firstName, T3.lastName ORDER BY SUM(T1.BenchMinor) DESC LIMIT 1", "pred_sql": "SELECT coaches.year, coaches.tmid, coaches.coachid \nFROM coaches \nJOIN teamspost ON coaches.year = teamspost.year AND coaches.tmid = teamspost.tmid \nWHERE teamspost.benchminor = (SELECT MAX(benchminor) FROM teamspost WHERE year = '2003') \nAND teamspost.year = '2003';"}
{"sample_id": 7664, "db_id": "hockey", "gold_sql": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.lgID = 'NHL'", "pred_sql": "SELECT DISTINCT a.award, c.year, c.tmid \nFROM awardscoaches a \nJOIN coaches c ON a.coachid = c.coachid \nJOIN master m ON c.coachid = m.coachid \nWHERE c.lgid = 'NHL' \nAND m.deathyear IS NOT NULL;"}
{"sample_id": 7770, "db_id": "hockey", "gold_sql": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Philadelphia Flyers' AND T3.birthCountry = 'USA'", "pred_sql": "SELECT COUNT(DISTINCT coaches.coachid) AS coach_count \nFROM coaches \nJOIN master ON coaches.coachid = master.coachid \nWHERE master.birthcountry = 'USA' AND coaches.tmid = 'PHI';"}
{"sample_id": 7691, "db_id": "hockey", "gold_sql": "SELECT T1.birthCountry FROM Master AS T1 INNER JOIN Coaches AS T2 ON T1.coachID = T2.coachID WHERE T2.year = 1998 AND T2.notes = 'co-coach with Dave Lewis'", "pred_sql": "SELECT m.birthcity, m.birthstate, m.birthcountry \nFROM coaches c \nJOIN master m ON c.coachid = m.coachid \nWHERE c.year = '1998' AND c.tmid IN (SELECT tmid FROM coaches WHERE coachid IN (SELECT coachid FROM coaches WHERE year = '1998' AND tmid = (SELECT tmid FROM coaches WHERE coachid = (SELECT coachid FROM master WHERE lastname = 'Lewis' AND firstname = 'Dave'))));"}
{"sample_id": 7715, "db_id": "hockey", "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1986 GROUP BY T2.playerID ORDER BY SUM(T2.GWG) DESC LIMIT 1", "pred_sql": "SELECT CONCAT(m.firstname, ' ', m.lastname) AS full_name\nFROM scoring s\nJOIN master m ON s.playerid = m.playerid\nWHERE s.year = '1986'\nORDER BY s.g + s.a DESC\nLIMIT 1;"}
{"sample_id": 7679, "db_id": "hockey", "gold_sql": "SELECT DISTINCT T1.pos FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCountry = 'Canada' AND T2.award = 'All-Rookie'", "pred_sql": "SELECT DISTINCT p.pos FROM master m JOIN awardsplayers a ON m.playerid = a.playerid WHERE m.birthcountry = 'Canada' AND a.award = 'All-Rookie'"}
{"sample_id": 7810, "db_id": "hockey", "gold_sql": "SELECT DISTINCT playerID FROM Master WHERE pos LIKE '%L%' AND weight > 200 AND playerID IS NOT NULL AND pos = 'L'", "pred_sql": "SELECT playerid FROM master WHERE playerid IN (SELECT playerid FROM awardsplayers WHERE pos = 'LW') AND weight > 200;"}
{"sample_id": 7755, "db_id": "hockey", "gold_sql": "SELECT name FROM Teams WHERE year = 2006 GROUP BY tmID, name ORDER BY CAST(SUM(BenchMinor) AS REAL) / 2 DESC LIMIT 1", "pred_sql": "SELECT t.name, SUM(t.benchminor) AS total_bench_minors \nFROM teams t \nWHERE t.year = '2006' \nGROUP BY t.tmid \nORDER BY total_bench_minors DESC \nLIMIT 1;"}
{"sample_id": 7734, "db_id": "hockey", "gold_sql": "SELECT CAST(SUM(T2.height) AS REAL) / COUNT(*) FROM AwardsPlayers AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.height IS NOT NULL AND (T2.pos = 'LW' OR T2.pos = 'L/C')", "pred_sql": "SELECT g.tmid, AVG(m.height) AS average_height\nFROM goalies g\nJOIN master m ON g.playerid = m.playerid\nWHERE m.birthyear BETWEEN '1970' AND '1979' AND m.shootcatch = 'L'\nGROUP BY g.tmid\nORDER BY average_height DESC\nLIMIT 1;"}
{"sample_id": 7808, "db_id": "hockey", "gold_sql": "SELECT SUM(T2.G), STRFTIME('%Y', CURRENT_TIMESTAMP) - T1.birthyear FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aaltoan01' GROUP BY T1.birthyear", "pred_sql": "SELECT SUM(scoring.g) AS total_goals, (strftime('%Y', 'now') - master.birthyear) AS age FROM scoring JOIN master ON scoring.playerid = master.playerid WHERE master.playerid = 'aaltoan01';"}
{"sample_id": 7779, "db_id": "hockey", "gold_sql": "SELECT T3.firstName FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.name = 'Montreal Canadiens' ORDER BY T1.year LIMIT 1", "pred_sql": "SELECT c.firstname FROM coaches c JOIN teams t ON c.tmid = t.tmid WHERE t.name = 'Montreal Canadiens' AND c.year = (SELECT MIN(year) FROM coaches WHERE tmid = c.tmid);"}
{"sample_id": 7817, "db_id": "hockey", "gold_sql": "SELECT DISTINCT T3.tmID, T1.birthCountry FROM Master AS T1 INNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID INNER JOIN ( SELECT year, tmID FROM Teams WHERE year = 2000 ORDER BY W / (W + L) DESC LIMIT 1 ) AS T3 ON T2.tmID = T3.tmID AND T2.year = T3.year", "pred_sql": "SELECT teams.tmid, master.birthcountry \nFROM teams \nJOIN coaches ON teams.year = coaches.year AND teams.tmid = coaches.tmid \nJOIN master ON coaches.coachid = master.coachid \nWHERE teams.year = '2000' \nORDER BY (CAST(coaches.w AS INTEGER) / (CAST(coaches.w AS INTEGER) + CAST(coaches.l AS INTEGER))) DESC \nLIMIT 1;"}
{"sample_id": 7762, "db_id": "hockey", "gold_sql": "SELECT T2.name FROM TeamsSC AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year GROUP BY T2.name ORDER BY SUM(T1.W) DESC LIMIT 1", "pred_sql": "SELECT t.tmid, t.w FROM teamspost t JOIN seriespost s ON t.year = s.year AND t.tmid = s.tmidwinner ORDER BY t.w DESC LIMIT 1;"}
{"sample_id": 7776, "db_id": "hockey", "gold_sql": "SELECT T2.PIM FROM Teams AS T1 INNER JOIN TeamsSC AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.name = 'Montreal Canadiens' AND T1.year = 1918", "pred_sql": "SELECT SUM(pim) AS total_penalty_minutes \nFROM teamspost \nWHERE tmid = 'MONT' AND year = 1918;"}
{"sample_id": 7800, "db_id": "hockey", "gold_sql": "SELECT CAST((SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) - SUM(CASE WHEN T1.year = 2006 THEN T1.GP ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.year = 2005 THEN T1.GP ELSE 0 END) FROM Goalies AS T1 INNER JOIN Master AS T2 ON T1.playerID = T2.playerID WHERE T2.firstName = 'David' AND T2.lastName = 'Aebischer'", "pred_sql": "SELECT (SUM(gp) - (SELECT gp FROM goaliessc WHERE playerid = (SELECT playerid FROM master WHERE firstname = 'David' AND lastname = 'Aebischer') AND year = '2005')) / SUM(gp) * 100 AS decrease_rate FROM goaliessc WHERE playerid = (SELECT playerid FROM master WHERE firstname = 'David' AND lastname = 'Aebischer') AND year > '2005';"}
{"sample_id": 7637, "db_id": "hockey", "gold_sql": "SELECT DISTINCT T3.name FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID INNER JOIN Teams AS T3 ON T2.lgID = T3.lgID AND T2.year = T3.year WHERE T1.deathYear IS NOT NULL AND T1.firstNHL < 1950", "pred_sql": "SELECT DISTINCT teams.name \nFROM goalies \nJOIN master ON goalies.playerid = master.playerid \nJOIN teams ON goalies.tmid = teams.tmid AND goalies.year = teams.year \nWHERE master.deathyear IS NULL \nAND goalies.year < '1950';"}
{"sample_id": 7719, "db_id": "hockey", "gold_sql": "SELECT SUM(CASE WHEN T1.year = 2006 THEN CAST(T1.W AS REAL) * 100 / (T1.W + T1.L) ELSE 0 END) - ( SELECT CAST(W AS REAL) * 100 / (W + L) FROM Teams WHERE year = '2005' AND name = 'Vancouver Canucks' ) FROM Teams AS T1 INNER JOIN Coaches AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN Master AS T3 ON T2.coachID = T3.coachID WHERE T1.name = 'Vancouver Canucks' AND T3.firstName = 'Alain' AND T3.lastName = 'Vigneault'", "pred_sql": "SELECT (CAST(SUM(CASE WHEN w + l > 0 THEN w * 1.0 / (w + l) END) AS FLOAT) - CAST(SUM(CASE WHEN w + l > 0 AND year < 2006 THEN w * 1.0 / (w + l) END) AS FLOAT)) * 100 AS winning_rate_improvement\nFROM coaches\nJOIN teams ON coaches.tmid = teams.tmid AND coaches.year = teams.year\nWHERE coaches.coachid = (SELECT coachid FROM master WHERE firstname = 'Alain' AND lastname = 'Vigneault')\nAND teams.year >= 2006;"}
{"sample_id": 7622, "db_id": "hockey", "gold_sql": "SELECT T1.nameGiven, T1.height , T1.weight, STRFTIME('%Y', CURRENT_TIMESTAMP) - birthYear FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID", "pred_sql": "SELECT m.namegiven, m.height, m.weight, (2023 - CAST(m.birthyear AS INTEGER)) AS age \nFROM goalies g \nJOIN master m ON g.playerid = m.playerid \nWHERE g.year BETWEEN '2000' AND '2010' AND g.tmid = 'COL';"}
{"sample_id": 7743, "db_id": "hockey", "gold_sql": "SELECT SUM(T1.g) FROM Coaches AS T1 INNER JOIN ( SELECT coachID, year FROM AwardsCoaches WHERE award = 'Second Team All-Star' ORDER BY year LIMIT 1 ) AS T2 ON T1.coachID = T2.coachID AND T1.year < T2.year", "pred_sql": "SELECT SUM(g) AS total_games\nFROM coaches\nWHERE coachid = (SELECT coachid \n                  FROM awardscoaches \n                  WHERE award = 'Second Team All-Star' \n                  ORDER BY year ASC \n                  LIMIT 1)"}
{"sample_id": 7676, "db_id": "hockey", "gold_sql": "SELECT T1.birthYear FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID GROUP BY T1.birthYear ORDER BY COUNT(T2.award) DESC LIMIT 1", "pred_sql": "SELECT birthyear, COUNT(awardsplayers.award) AS total_awards\nFROM master\nJOIN awardsplayers ON master.playerid = awardsplayers.playerid\nGROUP BY birthyear\nORDER BY total_awards DESC\nLIMIT 1;"}
{"sample_id": 7809, "db_id": "hockey", "gold_sql": "SELECT DISTINCT T2.coachID FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.playerID IS NULL", "pred_sql": "SELECT DISTINCT c.coachid \nFROM coaches c \nJOIN awardscoaches a ON c.coachid = a.coachid \nWHERE c.coachid NOT IN (SELECT m.coachid FROM master m)"}
{"sample_id": 7696, "db_id": "hockey", "gold_sql": "SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'NJD' GROUP BY T2.playerID ORDER BY SUM(T2.SA - T2.GA) DESC LIMIT 1", "pred_sql": "SELECT m.firstname || ' ' || m.lastname AS full_name, SUM(g.sa) AS total_saves\nFROM goalies g\nJOIN master m ON g.playerid = m.playerid\nWHERE g.tmid = 'NJD'\nGROUP BY m.playerid\nORDER BY total_saves DESC\nLIMIT 1;"}
{"sample_id": 7754, "db_id": "hockey", "gold_sql": "SELECT COUNT(tmID) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100", "pred_sql": "SELECT COUNT(*) AS team_count FROM teams WHERE year = '2006' AND w > l AND pts > 100;"}
{"sample_id": 5549, "db_id": "menu", "gold_sql": "SELECT T2.menu_page_id FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Mashed potatoes'", "pred_sql": "SELECT DISTINCT menupage.id \nFROM menupage \nJOIN menuitem ON menupage.id = menuitem.menu_page_id \nJOIN dish ON menuitem.dish_id = dish.id \nWHERE dish.name = 'mashed potatoes';"}
{"sample_id": 5526, "db_id": "menu", "gold_sql": "SELECT name FROM Dish WHERE first_appeared = 1855 AND last_appeared = 1900", "pred_sql": "SELECT name FROM dish WHERE first_appeared = '1855' AND last_appeared = '1900';"}
{"sample_id": 5540, "db_id": "menu", "gold_sql": "SELECT T1.full_height * T1.full_width, T1.page_number, T1.image_id FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T3.name = 'Baked Stuffed Mullet & Sauce Pomard'", "pred_sql": "SELECT mp.page_number, mp.image_id, (mp.full_height * mp.full_width) AS image_area \nFROM dish d \nJOIN menuitem mi ON d.id = mi.dish_id \nJOIN menupage mp ON mi.menu_page_id = mp.id \nJOIN menu m ON mp.menu_id = m.id \nWHERE d.name = 'Baked Stuffed Mullet & Sauce Pomard';"}
{"sample_id": 5566, "db_id": "menu", "gold_sql": "SELECT CASE WHEN SUM(CASE WHEN T1.name = 'Zentral Theater Terrace' THEN T2.full_width ELSE 0 END) - SUM(CASE WHEN T1.name = 'Young''s Hotel' THEN T2.full_width ELSE 0 END) > 0 THEN 'Zentral Theater Terrace' ELSE 'Young''s Hotel' END FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "pred_sql": "SELECT mp1.full_width AS width_zentral, mp2.full_width AS width_youngs\nFROM menupage mp1\nJOIN menu m1 ON mp1.menu_id = m1.id\nJOIN menupage mp2 ON mp2.menu_id = (SELECT id FROM menu WHERE name = 'Young's Hotel')\nJOIN menu m2 ON mp2.menu_id = m2.id\nWHERE mp1.page_number = '1' AND m1.name = 'Zentral Theater Terrace' AND mp2.page_number = '1';"}
{"sample_id": 5569, "db_id": "menu", "gold_sql": "SELECT SUM(CASE WHEN T1.page_number = 1 THEN 1 ELSE 0 END) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882", "pred_sql": "SELECT COUNT(*) AS dish_count FROM menuitem INNER JOIN menupage ON menuitem.menu_page_id = menupage.id WHERE menupage.menu_id = '12882' AND menupage.page_number = '1';"}
{"sample_id": 5573, "db_id": "menu", "gold_sql": "SELECT SUM(CASE WHEN T1.name = 'Chicken gumbo' THEN 1 ELSE 0 END) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id", "pred_sql": "SELECT SUM(CASE WHEN menuitem.dish_id = (SELECT id FROM dish WHERE name = 'Chicken gumbo') THEN 1 ELSE 0 END) AS times_appeared FROM menuitem;"}
{"sample_id": 5542, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Menu WHERE date LIKE '2015-04%' AND sponsor = 'Krogs Fiskerestaurant'", "pred_sql": "SELECT COUNT(*) FROM menu WHERE sponsor = (SELECT id FROM restaurant WHERE name = 'Krogs Fiske Restaurant') AND date >= '2015-04-01' AND date < '2015-05-01';"}
{"sample_id": 5568, "db_id": "menu", "gold_sql": "SELECT SUM(CASE WHEN T1.name = 'Ritz Carlton' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.full_width > 1000", "pred_sql": "SELECT COUNT(*) FROM menupage mp JOIN menu m ON mp.menu_id = m.id WHERE m.place = 'Ritz Carlton' AND mp.full_width > '1000';"}
{"sample_id": 5512, "db_id": "menu", "gold_sql": "SELECT T1.full_height, T1.full_width FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T2.name = 'El Fuerte Del Palmar'", "pred_sql": "SELECT full_height, full_width FROM menupage WHERE menu_id = (SELECT id FROM menu WHERE name = 'El Fuerte Del Palmar')"}
{"sample_id": 5484, "db_id": "menu", "gold_sql": "SELECT SUM(CASE WHEN T3.name = 'Waldorf Astoria' THEN 1 ELSE 0 END) FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id", "pred_sql": "SELECT COUNT(DISTINCT menuitem.dish_id) AS total_dishes\nFROM menu\nJOIN menupage ON menu.id = menupage.menu_id\nJOIN menuitem ON menupage.id = menuitem.menu_page_id\nWHERE menu.name = 'Waldorf Astoria';"}
{"sample_id": 5493, "db_id": "menu", "gold_sql": "SELECT SUM(CASE WHEN T1.date = '1898-11-17' THEN 1 ELSE 0 END) FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id", "pred_sql": "SELECT COUNT(*) FROM menupage WHERE menu_id IN (SELECT id FROM menu WHERE date = '1898-11-17');"}
{"sample_id": 5477, "db_id": "menu", "gold_sql": "SELECT T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.name = 'Clear green turtle' ORDER BY T2.price DESC LIMIT 1", "pred_sql": "SELECT MAX(price) AS highest_price FROM menuitem WHERE dish_id = (SELECT id FROM dish WHERE name = 'Clear green turtle')"}
{"sample_id": 5472, "db_id": "menu", "gold_sql": "SELECT name FROM Dish WHERE lowest_price = 0 ORDER BY menus_appeared DESC LIMIT 1", "pred_sql": "SELECT name FROM dish WHERE lowest_price = '0' ORDER BY menus_appeared DESC LIMIT 1;"}
{"sample_id": 5500, "db_id": "menu", "gold_sql": "SELECT T2.menu_id, T1.xpos, T1.ypos FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Fresh lobsters in every style'", "pred_sql": "SELECT menuitem.id, menu.location \nFROM menuitem \nJOIN menupage ON menuitem.menu_page_id = menupage.id \nJOIN menu ON menupage.menu_id = menu.id \nJOIN dish ON menuitem.dish_id = dish.id \nWHERE dish.name = 'Fresh lobsters in every style';"}
{"sample_id": 5535, "db_id": "menu", "gold_sql": "SELECT T2.sponsor FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id WHERE T1.full_height = 10000", "pred_sql": "SELECT DISTINCT menu.sponsor FROM menu JOIN menupage ON menu.id = menupage.menu_id WHERE menupage.full_height > '10000';"}
{"sample_id": 5565, "db_id": "menu", "gold_sql": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.image_id = 5189412", "pred_sql": "SELECT menu.name FROM menu JOIN menupage ON menu.id = menupage.menu_id WHERE menupage.image_id = '5189412';"}
{"sample_id": 5497, "db_id": "menu", "gold_sql": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.page_number = 30 ORDER BY T1.full_height DESC, T1.full_height ASC LIMIT 1", "pred_sql": "SELECT dish.name, menupage.full_height \nFROM menuitem \nJOIN menupage ON menuitem.menu_page_id = menupage.id \nJOIN dish ON menuitem.dish_id = dish.id \nWHERE menupage.page_number = '30' \nORDER BY menupage.full_height ASC;"}
{"sample_id": 5559, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Menu WHERE event = 'LUNCH'", "pred_sql": "SELECT COUNT(*) AS menu_count FROM menu WHERE occasion = 'lunch';"}
{"sample_id": 5514, "db_id": "menu", "gold_sql": "SELECT T2.name FROM MenuPage AS T1 INNER JOIN Menu AS T2 ON T2.id = T1.menu_id ORDER BY T1.full_height DESC LIMIT 1", "pred_sql": "SELECT menu.name FROM menu JOIN menupage ON menu.id = menupage.menu_id ORDER BY menupage.full_height DESC LIMIT 1;"}
{"sample_id": 5473, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Menu WHERE name = 'Waldorf Astoria' AND page_count = 4", "pred_sql": "SELECT COUNT(*) FROM menu WHERE name = 'Waldorf Astoria' AND id IN (SELECT menu_id FROM menupage GROUP BY menu_id HAVING COUNT(*) = 4);"}
{"sample_id": 5531, "db_id": "menu", "gold_sql": "SELECT COUNT(*) FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared < 5", "pred_sql": "SELECT COUNT(*) AS dish_count FROM dish WHERE (last_appeared - first_appeared) < 5 AND first_appeared BETWEEN 1851 AND 2012 AND last_appeared BETWEEN 1851 AND 2012;"}
{"sample_id": 5485, "db_id": "menu", "gold_sql": "SELECT T2.menu_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T4.name = 'Clear green turtle' AND T3.sponsor IS NULL", "pred_sql": "SELECT menu.id FROM menu JOIN menuitem ON menu.id = menuitem.menu_page_id JOIN dish ON menuitem.dish_id = dish.id WHERE menu.sponsor IS NULL AND dish.name = 'Clear green turtle';"}
{"sample_id": 5561, "db_id": "menu", "gold_sql": "SELECT id FROM Menu ORDER BY dish_count DESC LIMIT 1", "pred_sql": "SELECT id FROM menu ORDER BY dish_count DESC LIMIT 1;"}
{"sample_id": 2066, "db_id": "music_tracker", "gold_sql": "SELECT ( SELECT groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' ORDER BY groupYear LIMIT 1, 1 ) - groupYear FROM torrents WHERE artist LIKE '2Pac' AND releaseType LIKE 'album' AND groupYear = 1991", "pred_sql": "SELECT (MAX(groupyear) - MIN(groupyear)) AS years_passed FROM torrents WHERE artist = '2Pac' AND groupyear > '1991';"}
{"sample_id": 2049, "db_id": "music_tracker", "gold_sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag LIKE 'funk' AND T1.releaseType = 'single' ORDER BY T1.groupYear LIMIT 1", "pred_sql": "SELECT t.groupname FROM torrents t JOIN tags tg ON t.id = tg.id WHERE tg.tag = 'funk' AND t.releasetype = 'single' ORDER BY t.groupyear ASC LIMIT 1;"}
{"sample_id": 2082, "db_id": "music_tracker", "gold_sql": "SELECT COUNT(releaseType) FROM torrents WHERE artist LIKE 'sugar daddy' AND releaseType LIKE 'Single' AND groupYear = 1980", "pred_sql": "SELECT COUNT(*) FROM torrents WHERE artist = 'sugar daddy' AND releasetype = 'single' AND groupyear = '1980';"}
{"sample_id": 2076, "db_id": "music_tracker", "gold_sql": "SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1", "pred_sql": "SELECT t.groupname, MAX(t.totalsnatched) AS max_downloads \nFROM torrents t \nJOIN tags tg ON t.id = tg.id \nWHERE tg.tag = 'jazz' AND t.groupyear >= '1982' \nGROUP BY t.groupname \nORDER BY max_downloads DESC \nLIMIT 1;"}
{"sample_id": 2073, "db_id": "music_tracker", "gold_sql": "SELECT T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'funk' AND T1.groupYear = 1980 AND T1.totalSnatched <= 100", "pred_sql": "SELECT DISTINCT t.artist \nFROM torrents t \nJOIN tags tg ON t.id = tg.id \nWHERE t.totalsnatched <= '100' \nAND tg.tag = 'funk' \nAND t.groupyear = '1980';"}
{"sample_id": 2089, "db_id": "music_tracker", "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.tag LIKE 'united.states' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.releaseType) FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.groupYear BETWEEN 1979 AND 1982 AND T1.releaseType LIKE 'album'", "pred_sql": "SELECT (COUNT(CASE WHEN artist = 'united.states' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM torrents WHERE groupyear BETWEEN '1979' AND '1982' AND releasetype = 'album';"}
{"sample_id": 2045, "db_id": "music_tracker", "gold_sql": "SELECT groupName FROM torrents WHERE artist LIKE 'ron hunt & ronnie g & the sm crew' AND groupYear = 1979 AND releaseType LIKE 'single' AND totalSnatched = 239", "pred_sql": "SELECT groupname FROM torrents WHERE artist = 'Ron Hunt' AND groupyear = '1979' AND releasetype = 'single' AND totalsnatched = '239';"}
{"sample_id": 2065, "db_id": "music_tracker", "gold_sql": "SELECT COUNT(id), ( SELECT COUNT(id) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'album' ) FROM torrents WHERE groupYear BETWEEN 2010 AND 2015 AND artist LIKE '50 cent' AND releaseType LIKE 'Single'", "pred_sql": "SELECT releasetype, COUNT(*) AS count FROM torrents WHERE artist = '50 cent' AND groupyear BETWEEN '2010' AND '2015' AND (releasetype = 'album' OR releasetype = 'Single-Tables') GROUP BY releasetype;"}
{"sample_id": 2052, "db_id": "music_tracker", "gold_sql": "SELECT T2.tag, T1.artist FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T1.releaseType = 'single' ORDER BY T1.totalSnatched DESC LIMIT 1", "pred_sql": "SELECT t.artist, tg.tag FROM torrents t JOIN tags tg ON t.id = tg.id WHERE t.releasetype = 'single' ORDER BY t.totalsnatched DESC LIMIT 1;"}
{"sample_id": 10455, "db_id": "european_football_2", "gold_sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'", "pred_sql": "SELECT AVG(height) AS average_height FROM player WHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';"}
{"sample_id": 10530, "db_id": "european_football_2", "gold_sql": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.\"date\", 1, 10) = '2011-02-22'", "pred_sql": "SELECT ta.buildupplayspeedclass \nFROM team_attributes ta \nJOIN team t ON ta.team_api_id = t.team_api_id \nWHERE t.team_long_name = 'Willem II' AND ta.date = '2011-02-22';"}
{"sample_id": 10500, "db_id": "european_football_2", "gold_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1", "pred_sql": "SELECT player_name, birthday FROM player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;"}
{"sample_id": 10556, "db_id": "european_football_2", "gold_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1", "pred_sql": "SELECT p1.player_name, p1.jumping AS jumping_score_player_6, p2.jumping AS jumping_score_player_23, (p1.jumping - p2.jumping) AS difference FROM player_attributes p1 JOIN player_attributes p2 ON p1.player_api_id = 6 AND p2.player_api_id = 23;"}
{"sample_id": 10569, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)", "pred_sql": "SELECT player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1;"}
{"sample_id": 10512, "db_id": "european_football_2", "gold_sql": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1", "pred_sql": "SELECT pa.long_passing FROM player_attributes pa JOIN player p ON pa.player_api_id = p.player_api_id ORDER BY p.birthday ASC LIMIT 1;"}
{"sample_id": 10501, "db_id": "european_football_2", "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1", "pred_sql": "SELECT player_name, height FROM player ORDER BY height DESC LIMIT 1;"}
{"sample_id": 10498, "db_id": "european_football_2", "gold_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id", "pred_sql": "SELECT AVG(ball_control) AS average_ball_control FROM player_attributes WHERE player_api_id IN (SELECT player_api_id FROM player WHERE player_name IN ('Abdou Diallo', 'Aaron Appindangoye')) GROUP BY player_api_id;"}
{"sample_id": 10495, "db_id": "european_football_2", "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.\"date\", 1, 7) BETWEEN '2008-08' AND '2008-10'", "pred_sql": "SELECT COUNT(*) AS match_count FROM match m JOIN league l ON m.league_id = l.id WHERE l.name = 'Germany 1. Bundesliga' AND m.date BETWEEN '2008-08-01' AND '2008-10-31';"}
{"sample_id": 10538, "db_id": "european_football_2", "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1", "pred_sql": "SELECT player_name FROM player ORDER BY height DESC LIMIT 10;"}
{"sample_id": 10563, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'", "pred_sql": "SELECT team_attributes.buildupplayspeedclass \nFROM team_attributes \nJOIN team ON team_attributes.team_api_id = team.team_api_id \nWHERE team.team_long_name = 'KSV Cercle Brugge' \nORDER BY team_attributes.date DESC \nLIMIT 1;"}
{"sample_id": 10493, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32", "pred_sql": "SELECT team_short_name FROM team_attributes WHERE buildupplayspeed = 31 AND buildupplaydribbling = 53 AND buildupplaypassing = 32;"}
{"sample_id": 10534, "db_id": "european_football_2", "gold_sql": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.\"date\", 1, 10) = '2010-02-22'", "pred_sql": "SELECT ta.chancecreationcrossingclass FROM team_attributes ta JOIN team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'Hull City' AND ta.date = '2010-02-22';"}
{"sample_id": 10524, "db_id": "european_football_2", "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1", "pred_sql": "SELECT player.player_name FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating = '77' AND player_attributes.date = '2016-06-23' ORDER BY player.birthday ASC LIMIT 1;"}
{"sample_id": 10468, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'", "pred_sql": "SELECT ta.buildupplaypositioningclass FROM team_attributes ta JOIN team t ON ta.team_api_id = t.team_api_id WHERE t.team_long_name = 'ADO Den Haag' ORDER BY ta.date DESC LIMIT 1;"}
{"sample_id": 10480, "db_id": "european_football_2", "gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1", "pred_sql": "SELECT player.player_name, AVG(player_attributes.finishing) AS average_finishing\nFROM player\nJOIN player_attributes ON player.player_api_id = player_attributes.player_api_id\nWHERE player.height = (SELECT MAX(height) FROM player) OR player.height = (SELECT MIN(height) FROM player)\nGROUP BY player.player_name\nORDER BY average_finishing DESC\nLIMIT 1;"}
{"sample_id": 10540, "db_id": "european_football_2", "gold_sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35", "pred_sql": "SELECT player_name FROM player WHERE birthday <= date('now', '-35 years');"}
{"sample_id": 10526, "db_id": "european_football_2", "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.\"date\", 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'", "pred_sql": "SELECT potential FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30';"}
{"sample_id": 10543, "db_id": "european_football_2", "gold_sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31", "pred_sql": "SELECT SUM(m.home_team_goal) AS total_home_goals\nFROM match m\nJOIN player p ON p.player_api_id IN (m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5, m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11)\nWHERE (strftime('%Y', 'now') - strftime('%Y', p.birthday)) <= 30;"}
{"sample_id": 10515, "db_id": "european_football_2", "gold_sql": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'", "pred_sql": "SELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM player_attributes pa\nJOIN player p ON pa.player_api_id = p.player_api_id\nWHERE p.birthday < '1986-01-01';"}
{"sample_id": 10558, "db_id": "european_football_2", "gold_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)", "pred_sql": "SELECT COUNT(*) AS player_count FROM player_attributes WHERE potential = (SELECT MAX(potential) FROM player_attributes) AND preferred_foot = 'left' AND crossing > 0;"}
{"sample_id": 10447, "db_id": "european_football_2", "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1", "pred_sql": "SELECT l.name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM match m\nJOIN league l ON m.league_id = l.id\nWHERE m.season = '2016'\nGROUP BY l.id\nORDER BY total_goals DESC\nLIMIT 1;"}
{"sample_id": 10457, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60", "pred_sql": "SELECT team_fifa_api_id FROM team_attributes WHERE buildupplayspeed > 50 AND buildupplayspeed < 60;"}
{"sample_id": 10549, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89", "pred_sql": "SELECT p.player_name, c.name AS country_name \nFROM player p \nJOIN player_attributes pa ON p.player_api_id = pa.player_api_id \nJOIN team t ON p.player_api_id = t.team_api_id \nJOIN league l ON t.team_fifa_api_id = l.id \nJOIN country c ON l.country_id = c.id \nWHERE pa.vision >= 90;"}
{"sample_id": 10461, "db_id": "european_football_2", "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.\"date\") FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'", "pred_sql": "SELECT AVG(player_attributes.long_shots) AS average_long_shots\nFROM player_attributes\nJOIN player ON player_attributes.player_api_id = player.player_api_id\nWHERE player.player_name = 'Ahmed Samir Farag';"}
{"sample_id": 10520, "db_id": "european_football_2", "gold_sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1", "pred_sql": "SELECT chancecreationpassing, chancecreationpassingclass FROM team_attributes WHERE team_api_id = (SELECT team_api_id FROM team WHERE team_long_name = 'Ajax') ORDER BY date DESC LIMIT 1;"}
{"sample_id": 10521, "db_id": "european_football_2", "gold_sql": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'", "pred_sql": "SELECT preferred_foot FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo';"}
{"sample_id": 1006, "db_id": "computer_student", "gold_sql": "SELECT T2.yearsInProgram, T2.inPhase FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id GROUP BY T1.p_id ORDER BY COUNT(*) DESC LIMIT 1", "pred_sql": "SELECT p.yearsinprogram, p.inphase \nFROM person p \nJOIN advisedby a ON p.p_id = a.p_id \nWHERE a.p_id_dummy = (SELECT a2.p_id_dummy \n                      FROM advisedby a2 \n                      GROUP BY a2.p_id_dummy \n                      ORDER BY COUNT(a2.p_id) DESC \n                      LIMIT 1) \nAND p.student = 1;"}
{"sample_id": 979, "db_id": "computer_student", "gold_sql": "SELECT T1.p_id_dummy, T2.courseLevel FROM advisedBy AS T1 INNER JOIN course AS T2 ON T1.p_id = T2.course_id INNER JOIN taughtBy AS T3 ON T2.course_id = T3.course_id WHERE T1.p_id = 80", "pred_sql": "SELECT advisedby.p_id_dummy, course.courselevel FROM advisedby JOIN person ON advisedby.p_id_dummy = person.p_id JOIN taughtby ON person.p_id = taughtby.p_id JOIN course ON taughtby.course_id = course.course_id WHERE advisedby.p_id = 80;"}
{"sample_id": 968, "db_id": "computer_student", "gold_sql": "SELECT COUNT(DISTINCT p_id) FROM taughtBy WHERE course_id = 18", "pred_sql": "SELECT COUNT(DISTINCT p.p_id) AS professor_count FROM person p JOIN taughtby t ON p.p_id = t.p_id WHERE p.professor = 0 AND t.course_id = '18';"}
{"sample_id": 1010, "db_id": "computer_student", "gold_sql": "SELECT T1.p_id, T3.courseLevel FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id WHERE T3.course_id = 104 AND T1.hasPosition <> 0", "pred_sql": "SELECT person.p_id, course.courselevel FROM person JOIN taughtby ON person.p_id = taughtby.p_id JOIN course ON taughtby.course_id = course.course_id WHERE person.professor = 0 AND taughtby.course_id = 104;"}
{"sample_id": 1031, "db_id": "computer_student", "gold_sql": "SELECT CAST(COUNT(T1.course_id) AS REAL) / COUNT(DISTINCT T2.p_id) FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_500'", "pred_sql": "SELECT AVG(course_count) AS average_courses_taught\nFROM (\n    SELECT COUNT(taughtby.course_id) AS course_count\n    FROM taughtby\n    JOIN person ON taughtby.p_id = person.p_id\n    JOIN course ON taughtby.course_id = course.course_id\n    WHERE person.professor = 0 AND course.courselevel = 'Level_500'\n    GROUP BY person.p_id\n) AS course_counts;"}
{"sample_id": 989, "db_id": "computer_student", "gold_sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id INNER JOIN person AS T3 ON T3.p_id = T2.p_id WHERE T1.courseLevel = 'Level_300' AND T3.hasPosition = 'Faculty_eme'", "pred_sql": "SELECT DISTINCT person.p_id FROM person JOIN taughtby ON person.p_id = taughtby.p_id JOIN course ON taughtby.course_id = course.course_id WHERE person.professor = 0 AND course.courselevel = 'Level_300';"}
{"sample_id": 971, "db_id": "computer_student", "gold_sql": "SELECT T2.p_id, T2.course_id FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0", "pred_sql": "SELECT person.p_id, course.course_id \nFROM person \nJOIN taughtby ON person.p_id = taughtby.p_id \nJOIN course ON taughtby.course_id = course.course_id \nWHERE person.professor = 0 AND person.hasposition = 0;"}
{"sample_id": 976, "db_id": "computer_student", "gold_sql": "SELECT T1.courseLevel, T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 165", "pred_sql": "SELECT p.p_id, p.professor FROM course c JOIN taughtby t ON c.course_id = t.course_id JOIN person p ON t.p_id = p.p_id WHERE c.course_id = '165';"}
{"sample_id": 1016, "db_id": "computer_student", "gold_sql": "SELECT COUNT(*) FROM course WHERE courseLevel = 'Level_500'", "pred_sql": "SELECT COUNT(*) FROM course WHERE courselevel = 'Level_500';"}
{"sample_id": 972, "db_id": "computer_student", "gold_sql": "SELECT T2.p_id FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id WHERE T1.courseLevel = 'Level_400'", "pred_sql": "SELECT DISTINCT person.p_id FROM person JOIN taughtby ON person.p_id = taughtby.p_id JOIN course ON taughtby.course_id = course.course_id WHERE course.courselevel = 'Level_400'"}
{"sample_id": 999, "db_id": "computer_student", "gold_sql": "SELECT COUNT(DISTINCT T1.p_id_dummy) FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T2.yearsInProgram = 'Year_3'", "pred_sql": "SELECT COUNT(DISTINCT a.p_id_dummy) AS total_professors FROM advisedby a JOIN person p ON a.p_id_dummy = p.p_id WHERE p.professor = 0 AND p.yearsinprogram = 3;"}
{"sample_id": 969, "db_id": "computer_student", "gold_sql": "SELECT course_id FROM course WHERE courseLevel = 'Level_500'", "pred_sql": "SELECT course_id FROM course WHERE courselevel = 'Level_500';"}
{"sample_id": 977, "db_id": "computer_student", "gold_sql": "SELECT T1.p_id, T2.yearsInProgram FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id = T2.p_id WHERE T1.p_id_dummy = 5", "pred_sql": "SELECT person.p_id, person.yearsinprogram FROM person JOIN advisedby ON person.p_id = advisedby.p_id WHERE advisedby.p_id_dummy = 5 AND person.student = 1;"}
{"sample_id": 1003, "db_id": "computer_student", "gold_sql": "SELECT p_id FROM taughtBy WHERE course_id = 18", "pred_sql": "SELECT p_id FROM taughtby WHERE course_id = 18;"}
{"sample_id": 1004, "db_id": "computer_student", "gold_sql": "SELECT T2.hasPosition, T1.p_id_dummy FROM advisedBy AS T1 INNER JOIN person AS T2 ON T1.p_id_dummy = T2.p_id WHERE T1.p_id = 303", "pred_sql": "SELECT person.p_id, person.hasposition FROM person JOIN advisedby ON person.p_id = advisedby.p_id_dummy WHERE advisedby.p_id = '303' AND person.professor = 0;"}
{"sample_id": 9203, "db_id": "movie_3", "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Emily' AND T1.last_name = 'Dee'", "pred_sql": "SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'Emily' AND a.last_name = 'Dee';"}
{"sample_id": 9300, "db_id": "movie_3", "gold_sql": "SELECT rating FROM film WHERE special_features LIKE '%Behind the Scenes%'", "pred_sql": "SELECT f.rating FROM film f JOIN film_text ft ON f.film_id = ft.film_id WHERE ft.description LIKE '%behind the scenes%';"}
{"sample_id": 9354, "db_id": "movie_3", "gold_sql": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'", "pred_sql": "SELECT (COUNT(CASE WHEN c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS horror_percentage\nFROM film f\nJOIN film_category fc ON f.film_id = fc.film_id\nJOIN category c ON fc.category_id = c.category_id\nWHERE f.language_id = (SELECT language_id FROM language WHERE name = 'English');"}
{"sample_id": 9201, "db_id": "movie_3", "gold_sql": "SELECT description, title FROM film_text WHERE film_id = 996", "pred_sql": "SELECT title, description FROM film_text WHERE film_id = '996';"}
{"sample_id": 9355, "db_id": "movie_3", "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rating = 'NC-17' AND rental_duration < 4", "pred_sql": "SELECT COUNT(*) AS adult_film_count FROM film WHERE rating = 'NC-17' AND rental_duration < 4;"}
{"sample_id": 9118, "db_id": "movie_3", "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS' ORDER BY T3.length DESC LIMIT 1", "pred_sql": "SELECT f.title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id JOIN actor a ON fa.actor_id = a.actor_id WHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS' ORDER BY f.length DESC LIMIT 1;"}
{"sample_id": 9386, "db_id": "movie_3", "gold_sql": "SELECT T3.title FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T2.first_name = 'BURT' AND T2.last_name = 'DUKAKIS'", "pred_sql": "SELECT f.title \nFROM film f \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nWHERE a.first_name = 'Burt' AND a.last_name = 'Dukakis';"}
{"sample_id": 9419, "db_id": "movie_3", "gold_sql": "SELECT SUM(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'", "pred_sql": "SELECT SUM(p.amount) AS total_spent\nFROM payment p\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN customer c ON r.customer_id = c.customer_id\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nJOIN country co ON ci.country_id = co.country_id\nWHERE co.country = 'Italy';"}
{"sample_id": 9219, "db_id": "movie_3", "gold_sql": "SELECT SUM(T2.amount) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Diane' AND T1.last_name = 'Collins'", "pred_sql": "SELECT SUM(p.amount) AS total_payment\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE c.first_name = 'Diane' AND c.last_name = 'Collins';"}
{"sample_id": 9309, "db_id": "movie_3", "gold_sql": "SELECT T.title FROM ( SELECT T3.title, COUNT(T2.inventory_id) AS num FROM rental AS T1 INNER JOIN inventory AS T2 ON T1.inventory_id = T2.inventory_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id GROUP BY T3.title ) AS T ORDER BY T.num DESC LIMIT 5", "pred_sql": "SELECT f.title, COUNT(r.rental_id) AS rental_count\nFROM film f\nJOIN inventory i ON f.film_id = i.film_id\nJOIN rental r ON i.inventory_id = r.inventory_id\nGROUP BY f.film_id\nORDER BY rental_count DESC\nLIMIT 5;"}
{"sample_id": 9351, "db_id": "movie_3", "gold_sql": "SELECT T3.first_name, T3.last_name FROM film AS T1 INNER JOIN film_actor AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T2.actor_id = T3.actor_id WHERE T1.title = 'BIRD INDEPENDENCE'", "pred_sql": "SELECT actor.first_name, actor.last_name \nFROM actor \nJOIN film_actor ON actor.actor_id = film_actor.actor_id \nJOIN film ON film_actor.film_id = film.film_id \nWHERE film.title = 'BIRD INDEPENDENCE';"}
{"sample_id": 9243, "db_id": "movie_3", "gold_sql": "SELECT CAST(SUM(IIF(T2.name = 'horror', 1, 0)) AS REAL) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "pred_sql": "SELECT (COUNT(CASE WHEN c.name = 'Horror' THEN 1 END) * 100.0 / COUNT(*)) AS horror_percentage FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id;"}
{"sample_id": 9287, "db_id": "movie_3", "gold_sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'AGENT TRUMAN'", "pred_sql": "SELECT c.name FROM film f JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE f.title = 'Agent Truman';"}
{"sample_id": 9170, "db_id": "movie_3", "gold_sql": "SELECT title FROM film WHERE length > 180", "pred_sql": "SELECT title FROM film WHERE length > 180;"}
{"sample_id": 9200, "db_id": "movie_3", "gold_sql": "SELECT CAST(SUM(IIF(active = 0, 1, 0)) AS REAL) * 100 / COUNT(customer_id) FROM customer", "pred_sql": "SELECT (COUNT(CASE WHEN active = '0' THEN 1 END) * 100.0 / COUNT(*)) AS inactive_percentage FROM customer;"}
{"sample_id": 9123, "db_id": "movie_3", "gold_sql": "SELECT T4.title FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id INNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN film AS T4 ON T3.film_id = T4.film_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ'", "pred_sql": "SELECT f.title \nFROM film f \nJOIN inventory i ON f.film_id = i.film_id \nJOIN rental r ON i.inventory_id = r.inventory_id \nJOIN customer c ON r.customer_id = c.customer_id \nWHERE c.first_name = 'RUTH' AND c.last_name = 'MARTINEZ';"}
{"sample_id": 9215, "db_id": "movie_3", "gold_sql": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id", "pred_sql": "SELECT (COUNT(CASE WHEN c.address_id IN (SELECT a.address_id FROM address a JOIN city ci ON a.city_id = ci.city_id JOIN country co ON ci.country_id = co.country_id WHERE co.country = 'India') THEN 1 END) * 100.0 / COUNT(*)) AS percentage_customers_in_india FROM customer c;"}
{"sample_id": 9135, "db_id": "movie_3", "gold_sql": "SELECT AVG(T3.length) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'PENELOPE' AND T1.last_name = 'GUINESS'", "pred_sql": "SELECT AVG(f.length) AS average_duration\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'PENELOPE' AND a.last_name = 'GUINESS';"}
{"sample_id": 9204, "db_id": "movie_3", "gold_sql": "SELECT T3.first_name, T3.last_name FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = 'CHOCOLATE DUCK'", "pred_sql": "SELECT a.first_name || ' ' || a.last_name AS full_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.title = 'CHOCOLATE DUCK';"}
{"sample_id": 9174, "db_id": "movie_3", "gold_sql": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'", "pred_sql": "SELECT COUNT(*) AS total_rentals FROM rental WHERE return_date = '2005-05-27';"}
{"sample_id": 9330, "db_id": "movie_3", "gold_sql": "SELECT CAST(SUM(IIF(T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE', T1.amount, 0)) AS REAL) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id", "pred_sql": "SELECT (SUM(p.amount) / (SELECT SUM(amount) FROM payment) * 100) AS percentage FROM payment p JOIN customer c ON p.customer_id = c.customer_id WHERE c.first_name = 'MARGARET' AND c.last_name = 'MOORE';"}
{"sample_id": 9269, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id INNER JOIN staff AS T3 ON T2.manager_staff_id = T3.staff_id WHERE T3.first_name != 'Mike'", "pred_sql": "SELECT COUNT(DISTINCT c.customer_id) AS non_renting_customers\nFROM customer c\nLEFT JOIN rental r ON c.customer_id = r.customer_id\nWHERE c.store_id = (SELECT store_id FROM staff WHERE first_name = 'Mike')\nAND r.rental_id IS NULL;"}
{"sample_id": 9137, "db_id": "movie_3", "gold_sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 0", "pred_sql": "SELECT COUNT(*) AS inactive_customer_count FROM customer WHERE active = 0;"}
{"sample_id": 9420, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND T1.amount > 4.99", "pred_sql": "SELECT COUNT(payment_id) AS payment_count FROM payment p JOIN customer c ON p.customer_id = c.customer_id WHERE c.first_name = 'Mary' AND c.last_name = 'Smith' AND p.amount > 4.99;"}
{"sample_id": 9211, "db_id": "movie_3", "gold_sql": "SELECT T4.inventory_id, T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T2.film_id = T4.film_id WHERE T3.title = 'STREETCAR INTENTIONS'", "pred_sql": "SELECT i.inventory_id, a.first_name || ' ' || a.last_name AS actor_name \nFROM inventory i \nJOIN film f ON i.film_id = f.film_id \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nWHERE f.title = 'STREETCAR INTENTIONS';"}
{"sample_id": 9105, "db_id": "movie_3", "gold_sql": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens'", "pred_sql": "SELECT email FROM staff WHERE first_name = 'Jon' AND last_name = 'Stephens';"}
{"sample_id": 9154, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.address_id) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city = 'Woodridge'", "pred_sql": "SELECT COUNT(*) AS address_count FROM address WHERE city_id = (SELECT city_id FROM city WHERE city = 'Woodridge');"}
{"sample_id": 9285, "db_id": "movie_3", "gold_sql": "SELECT T1.city FROM city AS T1 INNER JOIN address AS T2 ON T2.city_id = T1.city_id WHERE T2.address = '1623 Kingstown Drive'", "pred_sql": "SELECT city.city FROM address JOIN city ON address.city_id = city.city_id WHERE address.address = '1623 Kingstown Drive';"}
{"sample_id": 9359, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'", "pred_sql": "SELECT COUNT(p.payment_id) AS payment_count \nFROM payment p \nJOIN customer c ON p.customer_id = c.customer_id \nJOIN staff s ON c.address_id = s.address_id \nWHERE c.first_name = 'Susan' AND c.last_name = 'Wilson' \nAND p.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 22:08:29';"}
{"sample_id": 9336, "db_id": "movie_3", "gold_sql": "SELECT title FROM film WHERE rating = 'G'", "pred_sql": "SELECT title FROM film WHERE rating = 'G';"}
{"sample_id": 9179, "db_id": "movie_3", "gold_sql": "SELECT T.title FROM ( SELECT T1.title, COUNT(T3.rental_id) AS num FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T1.title ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT f.title FROM film f JOIN rental r ON f.film_id = r.inventory_id GROUP BY f.film_id ORDER BY COUNT(r.rental_id) DESC LIMIT 1;"}
{"sample_id": 9346, "db_id": "movie_3", "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 1", "pred_sql": "SELECT c.first_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id JOIN staff s ON r.staff_id = s.staff_id WHERE s.staff_id = 1;"}
{"sample_id": 9319, "db_id": "movie_3", "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id ORDER BY T3.rental_rate DESC LIMIT 1", "pred_sql": "SELECT a.first_name || ' ' || a.last_name AS full_name\nFROM actor a\nJOIN film_actor fa ON a.actor_id = fa.actor_id\nJOIN film f ON fa.film_id = f.film_id\nORDER BY f.rental_rate DESC\nLIMIT 1;"}
{"sample_id": 9293, "db_id": "movie_3", "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'ACADEMY DINOSAUR'", "pred_sql": "SELECT a.first_name, a.last_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.title = 'ACADEMY DINOSAUR';"}
{"sample_id": 9252, "db_id": "movie_3", "gold_sql": "SELECT CAST(( SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN payment AS T2 ON T1.customer_id = T2.customer_id WHERE T2.amount > ( SELECT AVG(amount) FROM payment ) ) AS REAL) * 100 / ( SELECT COUNT(customer_id) FROM customer )", "pred_sql": "SELECT (COUNT(DISTINCT c.customer_id) * 100.0 / (SELECT COUNT(*) FROM customer WHERE store_id = '1')) AS percentage\nFROM payment p\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN customer c ON r.customer_id = c.customer_id\nWHERE f.rental_rate > (SELECT AVG(rental_rate) FROM film WHERE film_id IN (SELECT film_id FROM inventory WHERE store_id = '1'))\nAND c.store_id = '1';"}
{"sample_id": 9326, "db_id": "movie_3", "gold_sql": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T3.film_id = T2.film_id WHERE T3.title = 'ANONYMOUS HUMAN'", "pred_sql": "SELECT a.first_name, a.last_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.title = 'ANONYMOUS HUMAN';"}
{"sample_id": 9409, "db_id": "movie_3", "gold_sql": "SELECT COUNT(customer_id) FROM customer WHERE active = 1 AND store_id = 1", "pred_sql": "SELECT COUNT(*) AS active_customers_count FROM customer WHERE store_id = '1' AND active = '1';"}
{"sample_id": 9208, "db_id": "movie_3", "gold_sql": "SELECT T2.name, T1.replacement_cost / T1.rental_duration AS cost FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'UNTOUCHABLES SUNRISE'", "pred_sql": "SELECT l.name AS language, (f.rental_rate / f.rental_duration) AS rental_cost_per_day \nFROM film f \nJOIN language l ON f.language_id = l.language_id \nWHERE f.title = 'Untouchables Sunrise';"}
{"sample_id": 9228, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.length = 113 AND T1.first_name = 'Kirk' AND T1.last_name = 'Jovovich'", "pred_sql": "SELECT COUNT(DISTINCT f.film_id) AS film_count \nFROM film f \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nWHERE f.length = 113 AND (a.first_name = 'Kirk' AND a.last_name = 'Jovovich');"}
{"sample_id": 9338, "db_id": "movie_3", "gold_sql": "SELECT DISTINCT T1.last_update FROM film AS T1 INNER JOIN \"language\" AS T2 ON T1.language_id = T2.language_id WHERE T2.\"name\" = 'English' AND T1.release_year = 2006", "pred_sql": "SELECT title, last_update FROM film WHERE release_year = 2006 AND language_id = (SELECT language_id FROM language WHERE name = 'English')"}
{"sample_id": 9149, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id WHERE T2.first_name = 'DARYL' AND T2.last_name = 'WAHLBERG'", "pred_sql": "SELECT COUNT(f.film_id) AS film_count\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE a.first_name = 'Daryl' AND a.last_name = 'Wahlberg';"}
{"sample_id": 9286, "db_id": "movie_3", "gold_sql": "SELECT T2.city FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id WHERE T1.country = 'Algeria'", "pred_sql": "SELECT city FROM city WHERE country_id = (SELECT country_id FROM country WHERE country = 'Algeria') LIMIT 3;"}
{"sample_id": 9188, "db_id": "movie_3", "gold_sql": "SELECT T4.first_name, T4.last_name FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id WHERE T1.country = 'India'", "pred_sql": "SELECT c.first_name, c.last_name \nFROM customer c \nJOIN address a ON c.address_id = a.address_id \nJOIN city ci ON a.city_id = ci.city_id \nJOIN country co ON ci.country_id = co.country_id \nWHERE co.country = 'India';"}
{"sample_id": 9223, "db_id": "movie_3", "gold_sql": "SELECT T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies'", "pred_sql": "SELECT a.last_name \nFROM actor a \nJOIN film_actor fa ON a.actor_id = fa.actor_id \nJOIN film f ON fa.film_id = f.film_id \nWHERE f.description = 'A Thoughtful Drama of a Composer And a Feminist who must Meet a Secret Agent in The Canadian Rockies';"}
{"sample_id": 9103, "db_id": "movie_3", "gold_sql": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 2.99 AND special_features = 'Deleted Scenes'", "pred_sql": "SELECT COUNT(*) FROM film WHERE rental_rate = 2.99 AND special_features LIKE '%Deleted Scenes%';"}
{"sample_id": 9322, "db_id": "movie_3", "gold_sql": "SELECT T1.address FROM address AS T1 INNER JOIN customer AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = 'SUSAN' AND T1.postal_code = 77948", "pred_sql": "SELECT address.* FROM address JOIN customer ON address.address_id = customer.address_id WHERE customer.first_name = 'SUSAN' AND address.postal_code = '77948';"}
{"sample_id": 9389, "db_id": "movie_3", "gold_sql": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'KARL' AND T1.last_name = 'BERRY' AND T3.rating = 'PG'", "pred_sql": "SELECT f.title \nFROM film f \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nWHERE a.first_name = 'Karl' AND a.last_name = 'Berr' AND f.rating = 'PG';"}
{"sample_id": 9378, "db_id": "movie_3", "gold_sql": "SELECT title FROM film WHERE length = ( SELECT MAX(length) FROM film )", "pred_sql": "SELECT title FROM film ORDER BY length DESC, title ASC;"}
{"sample_id": 9271, "db_id": "movie_3", "gold_sql": "SELECT T.first_name FROM ( SELECT T2.first_name, COUNT(T1.rental_date) AS num FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.first_name ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS rental_count\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nWHERE r.return_date IS NULL\nGROUP BY c.customer_id\nORDER BY rental_count DESC\nLIMIT 1;"}
{"sample_id": 9159, "db_id": "movie_3", "gold_sql": "SELECT T3.name FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T1.title = 'WORKING MICROCOSMOS'", "pred_sql": "SELECT c.name FROM category c JOIN film_category fc ON c.category_id = fc.category_id JOIN film f ON fc.film_id = f.film_id WHERE f.title = 'Working Microcosmos';"}
{"sample_id": 9199, "db_id": "movie_3", "gold_sql": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2", "pred_sql": "SELECT first_name || ' ' || last_name AS name, email FROM staff WHERE store_id = '2';"}
{"sample_id": 9382, "db_id": "movie_3", "gold_sql": "SELECT title FROM film WHERE rating = 'PG-13'", "pred_sql": "SELECT title FROM film WHERE rating = 'PG-13';"}
{"sample_id": 9401, "db_id": "movie_3", "gold_sql": "SELECT T4.store_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length < 100 AND T1.first_name = 'Reese' AND T1.last_name = 'West'", "pred_sql": "SELECT DISTINCT i.store_id \nFROM film f \nJOIN film_actor fa ON f.film_id = fa.film_id \nJOIN actor a ON fa.actor_id = a.actor_id \nJOIN inventory i ON f.film_id = i.film_id \nWHERE a.first_name = 'Reese' AND a.last_name = 'West' AND f.length <= 100;"}
{"sample_id": 9357, "db_id": "movie_3", "gold_sql": "SELECT T2.email FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.rental_date BETWEEN '2005-5-25 07:37:47' AND '2005-5-26 10:06:49' AND T2.active = 1", "pred_sql": "SELECT c.email FROM customer c JOIN rental r ON c.customer_id = r.customer_id WHERE c.active = '1' AND r.rental_date BETWEEN '2005-05-25 19:37:47' AND '2005-05-26 10:06:49';"}
{"sample_id": 9196, "db_id": "movie_3", "gold_sql": "SELECT title, description, special_features FROM film WHERE length = ( SELECT MAX(length) FROM film ) LIMIT 5", "pred_sql": "SELECT title, description, special_features FROM film ORDER BY length DESC LIMIT 5;"}
{"sample_id": 9405, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T1.film_id) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.rental_rate = 2.99 AND T2.first_name = 'Nina' AND T2.last_name = 'Soto'", "pred_sql": "SELECT COUNT(DISTINCT f.film_id) AS film_count\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nWHERE f.rental_rate = 2.99 AND (a.first_name = 'Nina' AND a.last_name = 'Soto');"}
{"sample_id": 9333, "db_id": "movie_3", "gold_sql": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10", "pred_sql": "SELECT title FROM film WHERE film_id BETWEEN 1 AND 10;"}
{"sample_id": 9214, "db_id": "movie_3", "gold_sql": "SELECT T4.first_name, T4.last_name, T6.city FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id INNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id INNER JOIN customer AS T4 ON T3.customer_id = T4.customer_id INNER JOIN address AS T5 ON T4.address_id = T5.address_id INNER JOIN city AS T6 ON T5.city_id = T6.city_id WHERE T1.title = 'DREAM PICKUP'", "pred_sql": "SELECT c.first_name || ' ' || c.last_name AS full_name, ci.city AS city\nFROM customer c\nJOIN rental r ON c.customer_id = r.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nJOIN address a ON c.address_id = a.address_id\nJOIN city ci ON a.city_id = ci.city_id\nWHERE f.title = 'DREAM PICKUP';"}
{"sample_id": 9202, "db_id": "movie_3", "gold_sql": "SELECT SUM(amount) FROM payment WHERE SUBSTR(payment_date, 1, 7) = '2005-08'", "pred_sql": "SELECT SUM(p.amount) AS total_payment\nFROM payment p\nJOIN rental r ON p.rental_id = r.rental_id\nJOIN customer c ON p.customer_id = c.customer_id\nWHERE strftime('%Y-%m', r.rental_date) = '2005-08';"}
{"sample_id": 9232, "db_id": "movie_3", "gold_sql": "SELECT T2.store_id, T2.inventory_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id ORDER BY T1.length DESC LIMIT 1", "pred_sql": "SELECT store.store_id, inventory.inventory_id \nFROM inventory \nJOIN film ON inventory.film_id = film.film_id \nJOIN store ON inventory.store_id = store.store_id \nWHERE film.length = (SELECT MAX(length) FROM film);"}
{"sample_id": 9376, "db_id": "movie_3", "gold_sql": "SELECT rental_duration FROM film WHERE title = 'DIRTY ACE'", "pred_sql": "SELECT rental_duration FROM film WHERE title = 'Dirty Ace';"}
{"sample_id": 9316, "db_id": "movie_3", "gold_sql": "SELECT first_name, last_name FROM actor WHERE actor_id = 5", "pred_sql": "SELECT first_name || ' ' || last_name AS full_name FROM actor WHERE actor_id = 5;"}
{"sample_id": 9302, "db_id": "movie_3", "gold_sql": "SELECT title FROM film_text WHERE description LIKE '%Lacklusture%'", "pred_sql": "SELECT title, description FROM film_text WHERE description LIKE '%Lacklusture%';"}
{"sample_id": 9306, "db_id": "movie_3", "gold_sql": "SELECT T.name FROM ( SELECT T2.name, COUNT(T2.name) AS num FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T2.name ) AS T ORDER BY T.num DESC LIMIT 1", "pred_sql": "SELECT c.name, COUNT(fc.film_id) AS film_count\nFROM category c\nJOIN film_category fc ON c.category_id = fc.category_id\nGROUP BY c.category_id\nORDER BY film_count DESC\nLIMIT 1;"}
{"sample_id": 9380, "db_id": "movie_3", "gold_sql": "SELECT COUNT(T2.rental_id) , CAST(SUM(IIF(STRFTIME('%m',T2.rental_date) = '7', 1, 0)) AS REAL) * 100 / COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller' AND STRFTIME('%Y',T2.rental_date) = '2005'", "pred_sql": "SELECT COUNT(DISTINCT f.title) AS total_titles_rented,\n       (COUNT(DISTINCT CASE WHEN strftime('%m', r.rental_date) = '06' THEN f.title END) * 100.0 / COUNT(DISTINCT f.title)) AS percentage_june_rented\nFROM rental r\nJOIN customer c ON r.customer_id = c.customer_id\nJOIN inventory i ON r.inventory_id = i.inventory_id\nJOIN film f ON i.film_id = f.film_id\nWHERE c.first_name = 'Mary' AND c.last_name = 'Smith' AND strftime('%Y', r.rental_date) = '2005';"}
{"sample_id": 1625, "db_id": "car_retails", "gold_sql": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'", "pred_sql": "SELECT firstname || ' ' || lastname AS full_name \nFROM employees \nJOIN customers ON employees.employeenumber = customers.salesrepemployeenumber \nWHERE customers.customername = 'Muscle Machine Inc';"}
{"sample_id": 1593, "db_id": "car_retails", "gold_sql": "SELECT T1.firstName, T1.lastName, T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber ORDER BY T3.amount DESC LIMIT 1", "pred_sql": "SELECT e.firstname || ' ' || e.lastname AS sales_agent, e2.firstname || ' ' || e2.lastname AS supervisor\nFROM payments p\nJOIN customers c ON p.customernumber = c.customernumber\nJOIN employees e ON c.salesrepemployeenumber = e.employeenumber\nLEFT JOIN employees e2 ON e.reportsto = e2.employeenumber\nWHERE p.amount = (SELECT MAX(amount) FROM payments);"}
{"sample_id": 1578, "db_id": "car_retails", "gold_sql": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'", "pred_sql": "SELECT COUNT(*) AS customer_count FROM customers WHERE country = 'Australia' AND creditlimit < 220000;"}
{"sample_id": 1604, "db_id": "car_retails", "gold_sql": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'", "pred_sql": "SELECT o.addressline1 || ' ' || o.addressline2 AS full_address \nFROM offices o \nJOIN employees e ON o.officecode = e.officecode \nJOIN customers c ON e.employeenumber = c.salesrepemployeenumber \nWHERE c.city = 'New York';"}
{"sample_id": 1563, "db_id": "car_retails", "gold_sql": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND STRFTIME('%Y', T3.orderDate) = '2005'", "pred_sql": "SELECT AVG(od.quantityordered * od.priceeach) AS average_total_price\nFROM orders o\nJOIN orderdetails od ON o.ordernumber = od.ordernumber\nJOIN products p ON od.productcode = p.productcode\nWHERE p.productvendor = 'Exoto Designs' AND strftime('%Y', o.orderdate) = '2005';"}
{"sample_id": 1642, "db_id": "car_retails", "gold_sql": "SELECT productName, MSRP - buyPrice FROM products WHERE productCode = ( SELECT productCode FROM orderdetails ORDER BY quantityOrdered DESC LIMIT 1 )", "pred_sql": "SELECT p.productname, SUM(od.quantityordered) AS total_quantity_ordered, (p.msrp - p.buyprice) AS expected_profit_per_piece \nFROM products p \nJOIN orderdetails od ON p.productcode = od.productcode \nGROUP BY p.productname \nORDER BY total_quantity_ordered DESC \nLIMIT 1;"}
{"sample_id": 1552, "db_id": "car_retails", "gold_sql": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'", "pred_sql": "SELECT COUNT(p.checknumber) AS checks_issued\nFROM payments p\nJOIN customers c ON p.customernumber = c.customernumber\nWHERE c.customername = 'Euro+ Shopping Channel' AND strftime('%Y', p.paymentdate) = '2004';"}
{"sample_id": 1592, "db_id": "car_retails", "gold_sql": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'", "pred_sql": "SELECT SUM(od.quantityordered * od.priceeach) AS total_value\nFROM orders o\nJOIN orderdetails od ON o.ordernumber = od.ordernumber\nJOIN products p ON od.productcode = p.productcode\nWHERE o.status = 'Shipped' \nAND o.orderdate BETWEEN '2003-01-01' AND '2004-12-31'\nAND p.productline = 'Vintage Cars';"}
{"sample_id": 1630, "db_id": "car_retails", "gold_sql": "SELECT COUNT(t1.employeeNumber) FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.country = 'USA' AND t1.jobTitle = 'Sales Rep'", "pred_sql": "SELECT COUNT(DISTINCT e.employeenumber) AS sales_representatives_count \nFROM employees e \nJOIN offices o ON e.officecode = o.officecode \nWHERE o.country = 'USA' AND e.jobtitle = 'Sales Representative';"}
{"sample_id": 1590, "db_id": "car_retails", "gold_sql": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'", "pred_sql": "SELECT payments.checknumber \nFROM payments \nJOIN customers ON payments.customernumber = customers.customernumber \nWHERE customers.customername = 'Mini Gifts Distributors Ltd.' \nAND payments.paymentdate BETWEEN '2003-08-01' AND '2004-08-30';"}
{"sample_id": 1597, "db_id": "car_retails", "gold_sql": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'", "pred_sql": "SELECT phone FROM customers WHERE contactlastname LIKE 'M%' AND country != 'Germany';"}
{"sample_id": 1659, "db_id": "car_retails", "gold_sql": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1", "pred_sql": "SELECT c.customername, SUM((p.msrp - p.buyprice) * od.quantityordered) AS profit\nFROM orders o\nJOIN customers c ON o.customernumber = c.customernumber\nJOIN orderdetails od ON o.ordernumber = od.ordernumber\nJOIN products p ON od.productcode = p.productcode\nGROUP BY o.ordernumber, c.customername\nORDER BY profit DESC\nLIMIT 1;"}
{"sample_id": 1548, "db_id": "car_retails", "gold_sql": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )", "pred_sql": "SELECT COUNT(*) AS employee_count FROM employees e JOIN offices o ON e.officecode = o.officecode WHERE o.city = 'Sydney';"}
{"sample_id": 1549, "db_id": "car_retails", "gold_sql": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'", "pred_sql": "SELECT e.employeenumber FROM employees e JOIN offices o ON e.officecode = o.officecode WHERE o.city = 'New York' AND e.reportsto = (SELECT employeenumber FROM employees WHERE firstname = 'Anthony' AND lastname = 'Bow')"}
{"sample_id": 1546, "db_id": "car_retails", "gold_sql": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1", "pred_sql": "SELECT DISTINCT e.firstname || ' ' || e.lastname AS sales_agent\nFROM payments p\nJOIN customers c ON p.customernumber = c.customernumber\nJOIN employees e ON c.salesrepemployeenumber = e.employeenumber\nWHERE p.amount = (\n    SELECT MAX(amount)\n    FROM payments\n    WHERE strftime('%Y', paymentdate) = '2004'\n)"}
{"sample_id": 1656, "db_id": "car_retails", "gold_sql": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1", "pred_sql": "SELECT shippeddate FROM orders JOIN orderdetails ON orders.ordernumber = orderdetails.ordernumber JOIN products ON orderdetails.productcode = products.productcode ORDER BY products.msrp DESC LIMIT 1;"}
{"sample_id": 1584, "db_id": "car_retails", "gold_sql": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'", "pred_sql": "SELECT firstname || ' ' || lastname AS fullname, email FROM employees JOIN offices ON employees.officecode = offices.officecode WHERE offices.city = 'Paris';"}
{"sample_id": 1633, "db_id": "car_retails", "gold_sql": "SELECT SUM(t1.priceEach * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'", "pred_sql": "SELECT SUM(od.quantityordered * od.priceeach) AS total_price \nFROM orders o \nJOIN customers c ON o.customernumber = c.customernumber \nJOIN orderdetails od ON o.ordernumber = od.ordernumber \nWHERE c.customername = 'Cruz & Sons Co.' AND o.orderdate = '2003-03-03';"}
{"sample_id": 1600, "db_id": "car_retails", "gold_sql": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000", "pred_sql": "SELECT COUNT(DISTINCT c.customernumber) AS customer_count \nFROM customers c \nJOIN orders o ON c.customernumber = o.customernumber \nWHERE o.status = 'Canceled' AND c.creditlimit > 115000;"}
{"sample_id": 1641, "db_id": "car_retails", "gold_sql": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1", "pred_sql": "SELECT c.customername, SUM(p.amount) AS total_payment\nFROM customers c\nJOIN payments p ON c.customernumber = p.customernumber\nWHERE strftime('%Y', p.paymentdate) = '2005'\nGROUP BY c.customernumber\nORDER BY total_payment DESC\nLIMIT 1;"}
{"sample_id": 1650, "db_id": "car_retails", "gold_sql": "SELECT SUM((t1.priceEach - t2.buyPrice) * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t1.orderNumber = '10100'", "pred_sql": "SELECT (SUM(od.quantityordered * od.priceeach) - SUM((p.msrp - p.buyprice) * od.quantityordered)) AS actual_profit\nFROM orderdetails od\nJOIN products p ON od.productcode = p.productcode\nJOIN orders o ON od.ordernumber = o.ordernumber\nWHERE o.ordernumber = '10100';"}
{"sample_id": 1617, "db_id": "car_retails", "gold_sql": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'", "pred_sql": "SELECT c.addressline1, c.addressline2, c.city, c.state, c.postalcode, c.country \nFROM orders o \nJOIN customers c ON o.customernumber = c.customernumber \nWHERE o.ordernumber = '10383';"}
{"sample_id": 1653, "db_id": "car_retails", "gold_sql": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3", "pred_sql": "SELECT productname FROM products ORDER BY msrp DESC LIMIT 3;"}
{"sample_id": 1652, "db_id": "car_retails", "gold_sql": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'", "pred_sql": "SELECT SUM(quantityordered * priceeach) AS total_price FROM orderdetails WHERE ordernumber = '10100';"}
{"sample_id": 1658, "db_id": "car_retails", "gold_sql": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300", "pred_sql": "SELECT o.ordernumber FROM orders o JOIN customers c ON o.customernumber = c.customernumber WHERE c.creditlimit = '45300';"}
{"sample_id": 1660, "db_id": "car_retails", "gold_sql": "SELECT STRFTIME('%Y', t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY STRFTIME('%Y', t1.paymentDate)", "pred_sql": "SELECT strftime('%Y', paymentdate) AS year, COUNT(*) AS transaction_count \nFROM payments \nWHERE amount < 10000 \nGROUP BY year;"}
