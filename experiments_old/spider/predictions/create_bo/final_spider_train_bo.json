{
    "movie_1": [
        {
            "sample_id": 2523,
            "gold_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
            "gold_complexity": 8,
            "vt": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4",
            "ba": "The virtual table identifies the titles of movies that have received both a 3-star and a 4-star rating from reviewers. It does this by performing an intersection of two queries: the first query selects movie titles rated with 3 stars, and the second query selects movie titles rated with 4 stars. The intersection ensures that only those titles that meet both criteria are returned.",
            "question": "What are the names of movies that get 3 star and 4 star?"
        },
        {
            "sample_id": 2463,
            "gold_sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
            "gold_complexity": 14,
            "vt": "SELECT movie.title, movie.director FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID WHERE rating.stars > (SELECT AVG(rating.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = \"James Cameron\")",
            "ba": "The virtual table describes the titles and directors of movies that have received a rating higher than the average rating of movies directed by a specific director. The query joins the 'rating' table with the 'movie' table to filter and display relevant information based on the average rating condition.",
            "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?"
        },
        {
            "sample_id": 2476,
            "gold_sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
            "gold_complexity": 8,
            "vt": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
            "ba": "The virtual table combines the names of reviewers and the titles of movies into a single list. The placeholder indicates that the output will include names from the 'Reviewer' table and titles from the 'Movie' table, without any specific filtering conditions.",
            "question": "What are the names of all the reviewers and movie names?"
        },
        {
            "sample_id": 2453,
            "gold_sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT reviewer.name FROM reviewer JOIN Rating AS T2 ON T1.rID = T2.rID WHERE rating.ratingdate = None.\"null\"",
            "ba": "The virtual table lists the distinct names of reviewers from the 'reviewer' table who have submitted ratings without a specified date. The query joins the 'reviewer' table with the 'rating' table based on the reviewer's ID, filtering for ratings that have a null date.",
            "question": "Find the names of all reviewers who have ratings with a NULL value for the date."
        },
        {
            "sample_id": 2477,
            "gold_sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
            "ba": "The virtual table lists the titles of movies that have not been rated by a specific reviewer. It does this by selecting all distinct movie titles from the 'movie' table and excluding those titles that have ratings submitted by the reviewer named 'Chris Jackson'.",
            "question": "Find the titles of all movies not reviewed by Chris Jackson."
        },
        {
            "sample_id": 2427,
            "gold_sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
            "gold_complexity": 6,
            "vt": "SELECT movie.title FROM movie WHERE movie.director = '[placeholder-type:string]'",
            "ba": "The virtual table describes the titles of movies from the 'movie' table that were directed by a specific director. The placeholder in the WHERE clause represents the director's name.",
            "question": "Find the titles of all movies directed by steven spielberg."
        },
        {
            "sample_id": 2519,
            "gold_sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
            "gold_complexity": 8,
            "vt": "SELECT movie.title FROM movie WHERE movie.director = None.\"james cameron\" OR movie.year < [placeholder-type:numeric]",
            "ba": "The virtual table lists the titles of movies from the 'movie' table that are either directed by a specific director or released before a certain year. The placeholders represent the director's name and the year for filtering the results.",
            "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?"
        },
        {
            "sample_id": 2443,
            "gold_sql": "SELECT max(stars) ,  min(stars) FROM Rating",
            "gold_complexity": 5,
            "vt": "SELECT MAX(rating.stars), MIN(rating.stars) FROM rating",
            "ba": "The virtual table provides the maximum and minimum star ratings from the 'rating' table, which contains ratings given by reviewers to movies.",
            "question": "What is the lowest and highest rating star?"
        },
        {
            "sample_id": 2470,
            "gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT reviewer.name FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE movie.title = '[placeholder-type:string]'",
            "ba": "The virtual table lists the distinct names of reviewers who have rated a specific movie from the 'movie' table. The query joins the 'rating' table with the 'movie' and 'reviewer' tables to filter the results based on the movie's title.",
            "question": "What are the names of all the different reviewers who rates Gone with the Wind?"
        },
        {
            "sample_id": 2466,
            "gold_sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
            "gold_complexity": 18,
            "vt": "SELECT reviewer.name, movie.title, rating.stars, rating.ratingdate FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY reviewer.name, movie.title, rating.stars",
            "ba": "The virtual table presents a list of reviewers along with the titles of the movies they rated, the number of stars they awarded, and the date of the rating submission. It combines data from the 'rating', 'movie', and 'reviewer' tables, ensuring that each review is associated with the correct movie and reviewer. The results are ordered by the reviewer's name, movie title, and the star rating given.",
            "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?"
        },
        {
            "sample_id": 2450,
            "gold_sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
            "gold_complexity": 9,
            "vt": "SELECT reviewer.name, AVG(rating.stars) FROM rating JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY reviewer.name",
            "ba": "The virtual table provides the average star ratings given by each reviewer for the movies they have rated. It combines data from the 'rating' and 'reviewer' tables, linking them through the reviewer's unique identifier. The result will show each reviewer's name alongside their average rating score.",
            "question": "What is the average number of stars that each reviewer awards for a movie?"
        },
        {
            "sample_id": 2521,
            "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
            "gold_complexity": 8,
            "vt": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4",
            "ba": "The virtual table identifies reviewers who have given ratings of both 3 and 4 stars to movies. It does this by joining the 'Rating' table with the 'Reviewer' table based on the reviewer ID, and then filtering the results to include only those reviewers who meet both rating criteria.",
            "question": "What are the names of reviewers who had rated 3 star and 4 star?"
        },
        {
            "sample_id": 2489,
            "gold_sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT movie.title, AVG(rating.stars) FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY rating.mid ORDER BY AVG(rating.stars) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of movie titles along with their average ratings from the 'rating' table. It joins the 'rating' table with the 'movie' table to associate each rating with its corresponding movie. The results are grouped by movie identifier to calculate the average stars given for each movie, and the output is ordered by the average rating in ascending order. A placeholder is included to limit the number of results returned.",
            "question": "Find the movies with the highest average rating. Return the movie titles and average rating."
        },
        {
            "sample_id": 2485,
            "gold_sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
            "gold_complexity": 10,
            "vt": "SELECT movie.director FROM movie WHERE movie.director <> None.\"null\" GROUP BY movie.director HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the directors of movies from the 'movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the minimum count of movies directed by each director.",
            "question": "What are the names of the directors who made exactly one movie excluding director NULL?"
        },
        {
            "sample_id": 2510,
            "gold_sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"",
            "gold_complexity": 8,
            "vt": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\"",
            "ba": "The virtual table identifies movies that have received ratings but were not rated by a specific reviewer. It does this by selecting all movie IDs from the 'Rating' table and excluding those that have been rated by the reviewer named 'Brittany Harris'.",
            "question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?"
        },
        {
            "sample_id": 2435,
            "gold_sql": "SELECT count(*) FROM Reviewer",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM reviewer",
            "ba": "The virtual table counts the total number of reviewers from the 'reviewer' table.",
            "question": "How many reviewers listed?"
        },
        {
            "sample_id": 2487,
            "gold_sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), movie.director FROM movie JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY movie.director",
            "ba": "The virtual table summarizes the number of movies directed by each director from the 'movie' table. It counts the total number of movies associated with each director by joining the 'movie' table with the 'rating' table based on the movie identifier. The results are grouped by the director's name, allowing us to see how many movies each director has in the database.",
            "question": "How many movie reviews does each director get?"
        },
        {
            "sample_id": 2512,
            "gold_sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT rating.mid, AVG(rating.stars) FROM rating GROUP BY rating.mid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides the average star rating for each movie from the 'rating' table, but only includes movies that have received a minimum number of ratings. The placeholder in the HAVING clause represents the minimum count of ratings required for a movie to be included in the results.",
            "question": "For each movie that received more than 3 reviews, what is the average rating?"
        },
        {
            "sample_id": 2465,
            "gold_sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars",
            "gold_complexity": 18,
            "vt": "SELECT reviewer.name, movie.title, rating.stars, rating.ratingdate FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY reviewer.name, movie.title, rating.stars",
            "ba": "The virtual table presents a list of reviewers along with the titles of the movies they rated, the number of stars they awarded, and the date of the rating. It combines data from the 'rating', 'movie', and 'reviewer' tables, ensuring that each reviewer's name is associated with the corresponding movie title and rating details. The results are ordered by the reviewer's name, movie title, and the star rating given.",
            "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars."
        },
        {
            "sample_id": 2448,
            "gold_sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5",
            "gold_complexity": 9,
            "vt": "SELECT movie.director, movie.title FROM movie JOIN Rating AS T2 ON T1.mID = T2.mID WHERE rating.stars = [placeholder-type:numeric]",
            "ba": "The virtual table describes the directors and titles of movies from the 'movie' table that have received a specific star rating. The placeholder in the WHERE clause represents the number of stars given in the rating.",
            "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?"
        },
        {
            "sample_id": 2507,
            "gold_sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID",
            "gold_complexity": 14,
            "vt": "SELECT rating.mid, AVG(rating.stars) FROM rating WHERE NOT rating.mid IN (SELECT rating.mid FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = \"Brittany Harris\") GROUP BY rating.mid",
            "ba": "The virtual table calculates the average star rating for movies that have not been rated by a specific reviewer. It selects the movie identifier and the average of the stars from the 'rating' table, excluding any movies rated by the reviewer named 'Brittany Harris'. The results are grouped by the movie identifier to provide a summary of ratings for each movie.",
            "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris."
        },
        {
            "sample_id": 2494,
            "gold_sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT movie.title, movie.year FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY rating.stars LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles and release years of movies from the 'movie' table that have been rated, ordered by the number of stars given in the ratings. The placeholder in the LIMIT clause represents the maximum number of results to return.",
            "question": "What are the names and years released for the movies with the top 3 highest ratings?"
        },
        {
            "sample_id": 2473,
            "gold_sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
            "gold_complexity": 13,
            "vt": "SELECT DISTINCT reviewer.name, movie.title, rating.stars FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE movie.director = reviewer.name",
            "ba": "The virtual table describes the distinct names of reviewers along with the titles of movies and the corresponding star ratings given by those reviewers. It combines data from the 'rating', 'movie', and 'reviewer' tables, filtering the results based on a condition that matches the director's name with the reviewer's name.",
            "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars."
        },
        {
            "sample_id": 2431,
            "gold_sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM movie WHERE movie.year < [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of movies from the 'movie' table that were released before a specific year. The placeholder in the WHERE clause represents the year of interest.",
            "question": "How many movies were made before 2000?"
        },
        {
            "sample_id": 2452,
            "gold_sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
            "gold_complexity": 10,
            "vt": "SELECT movie.title FROM movie WHERE NOT movie.mid IN (SELECT movie.mid FROM Rating)",
            "ba": "The virtual table lists the titles of movies from the 'movie' table that have not received any ratings. The subquery identifies all movie identifiers that have been rated, and the main query filters out these movies from the selection.",
            "question": "What are the titles of all movies that have not been rated?"
        },
        {
            "sample_id": 2445,
            "gold_sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT movie.year FROM movie JOIN Rating AS T2 ON T1.mID = T2.mID WHERE rating.stars >= [placeholder-type:numeric] ORDER BY movie.year",
            "ba": "The virtual table lists distinct years of movie releases from the 'movie' table, filtered by ratings that are equal to or greater than a specified number of stars. The query joins the 'movie' table with the 'rating' table to access the ratings associated with each movie.",
            "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year."
        },
        {
            "sample_id": 2449,
            "gold_sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
            "gold_complexity": 9,
            "vt": "SELECT reviewer.name, AVG(rating.stars) FROM rating JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY reviewer.name",
            "ba": "The virtual table presents the names of reviewers along with the average star ratings they have given to movies. It combines data from the 'rating' and 'reviewer' tables, linking them through the reviewer's unique identifier. The average rating is calculated for each reviewer, providing insights into their overall rating tendencies.",
            "question": "What is the average rating star for each reviewer?"
        },
        {
            "sample_id": 2483,
            "gold_sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1",
            "gold_complexity": 8,
            "vt": "SELECT movie.director FROM movie GROUP BY movie.director HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the directors of movies from the 'movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.",
            "question": "What are the names of the directors who made exactly one movie?"
        },
        {
            "sample_id": 2502,
            "gold_sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT movie.title, rating.mid FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY rating.mid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of movie titles along with their identifiers from the 'movie' table, based on the ratings given by reviewers. It aggregates the ratings for each movie and orders them by the number of ratings received, limiting the results to a specified number of entries.",
            "question": "What is the name of the movie that has been reviewed the most?"
        },
        {
            "sample_id": 2515,
            "gold_sql": "SELECT rID FROM Rating WHERE stars != 4",
            "gold_complexity": 6,
            "vt": "SELECT rating.rid FROM rating WHERE rating.stars <> [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of reviewers from the 'rating' table who have given a rating that is not equal to a specified number of stars. The placeholder in the WHERE clause represents the number of stars to filter out.",
            "question": "Find the ids of reviewers who didn't only give 4 star."
        },
        {
            "sample_id": 2437,
            "gold_sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
            "gold_complexity": 6,
            "vt": "SELECT reviewer.rid FROM reviewer WHERE reviewer.name LIKE None.\"%mike%\"",
            "ba": "The virtual table retrieves the unique identifiers of reviewers from the 'reviewer' table whose names contain the substring 'mike'. The placeholder in the LIKE clause allows for flexible searching of reviewer names.",
            "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?"
        },
        {
            "sample_id": 2484,
            "gold_sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1",
            "gold_complexity": 8,
            "vt": "SELECT movie.director FROM movie GROUP BY movie.director HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the directors of movies from the 'movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the count of movies directed by each director.",
            "question": "What are the names of all directors who made one movie?"
        },
        {
            "sample_id": 2522,
            "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4",
            "gold_complexity": 8,
            "vt": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4",
            "ba": "The virtual table identifies reviewers who have given ratings of both 3 and 4 stars to movies. It combines results from two queries using an INTERSECT operation to ensure that only reviewers who meet both criteria are included.",
            "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?"
        },
        {
            "sample_id": 2482,
            "gold_sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title",
            "gold_complexity": 9,
            "vt": "SELECT movie.title, movie.year FROM movie JOIN Movie AS T2 ON T1.director = T2.director WHERE movie.title <> movie.title",
            "ba": "The virtual table describes the titles and release years of movies from the 'movie' table that share the same director, excluding the movie itself.",
            "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?"
        },
        {
            "sample_id": 2455,
            "gold_sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)",
            "gold_complexity": 13,
            "vt": "SELECT AVG(rating.stars), movie.title FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID WHERE movie.year = (SELECT MIN(movie.year) FROM Movie)",
            "ba": "The virtual table calculates the average rating of movies released in the earliest year from the 'movie' table. It joins the 'rating' table to get the ratings associated with each movie and filters the results to only include movies from the earliest release year. The placeholder in the SELECT clause represents the average stars given to those movies, and the title of the movie is also included in the output.",
            "question": "What is the average rating stars and title for the oldest movie?"
        },
        {
            "sample_id": 2444,
            "gold_sql": "SELECT max(stars) ,  min(stars) FROM Rating",
            "gold_complexity": 5,
            "vt": "SELECT MAX(rating.stars), MIN(rating.stars) FROM rating",
            "ba": "The virtual table provides the maximum and minimum star ratings from the 'rating' table, which contains ratings given by reviewers to movies.",
            "question": "What is the maximum and mininum number of stars a rating can receive?"
        },
        {
            "sample_id": 2500,
            "gold_sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director",
            "gold_complexity": 12,
            "vt": "SELECT movie.title, rating.stars, movie.director, MIN(rating.stars) FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY movie.director",
            "ba": "The virtual table provides a summary of movie ratings by director, showing the title of the movie, the number of stars given in the rating, and the director's name. It also includes the minimum rating received by any movie directed by each director.",
            "question": "For each director, what is the title and score of their most poorly rated movie?"
        },
        {
            "sample_id": 2497,
            "gold_sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID",
            "gold_complexity": 12,
            "vt": "SELECT movie.title, rating.rid, rating.stars, MIN(rating.stars) FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY rating.rid",
            "ba": "The virtual table provides a summary of movie ratings by reviewers, showing the title of the movie, the reviewer's identifier, the number of stars given, and the minimum star rating for each reviewer.",
            "question": "Find the title and star rating of the movie that got the least rating star for each reviewer."
        },
        {
            "sample_id": 2457,
            "gold_sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
            "gold_complexity": 9,
            "vt": "SELECT movie.title FROM movie WHERE movie.year = (SELECT MAX(movie.year) FROM Movie)",
            "ba": "The virtual table retrieves the titles of movies from the 'movie' table that were released in the most recent year. The inner query identifies the maximum year from the 'movie' table, ensuring that only the latest movies are selected.",
            "question": "What is the name of the most recent movie?"
        },
        {
            "sample_id": 2488,
            "gold_sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), movie.director FROM movie JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY movie.director",
            "ba": "The virtual table summarizes the number of movies directed by each director from the 'movie' table. It joins the 'movie' table with the 'rating' table to ensure that only movies that have been rated are considered. The result is grouped by the director's name, allowing us to count how many movies each director has in the dataset.",
            "question": "For each director, how many reviews have they received?"
        },
        {
            "sample_id": 2454,
            "gold_sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT reviewer.name FROM reviewer JOIN Rating AS T2 ON T1.rID = T2.rID WHERE rating.ratingdate = None.\"null\"",
            "ba": "The virtual table lists the distinct names of reviewers from the 'reviewer' table who have not submitted any ratings, as indicated by a null value in the 'ratingdate' column of the 'rating' table. The query uses a JOIN to connect the 'reviewer' and 'rating' tables based on the reviewer's unique identifier.",
            "question": "What are the different names of all reviewers whose ratings do not have a date field?"
        },
        {
            "sample_id": 2469,
            "gold_sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT reviewer.name FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE movie.title = '[placeholder-type:string]'",
            "ba": "The virtual table lists the distinct names of reviewers who have rated a specific movie from the 'movie' table. It joins the 'rating' table with the 'movie' and 'reviewer' tables to filter the results based on the movie's title.",
            "question": "Find the names of all reviewers who rated Gone with the Wind."
        },
        {
            "sample_id": 2458,
            "gold_sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
            "gold_complexity": 9,
            "vt": "SELECT movie.title FROM movie WHERE movie.year = (SELECT MAX(movie.year) FROM Movie)",
            "ba": "The virtual table describes the titles of movies from the 'movie' table that were released in the most recent year. The inner query retrieves the maximum year from the 'movie' table, and the outer query selects the titles of movies that match this year.",
            "question": "What is the title of the newest movie?"
        },
        {
            "sample_id": 2524,
            "gold_sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
            "gold_complexity": 8,
            "vt": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4",
            "ba": "The virtual table identifies movies that have received both a 3-star and a 4-star rating from reviewers. It does this by performing an intersection of two queries: the first query selects movie titles rated with 3 stars, and the second query selects movie titles rated with 4 stars. The intersection ensures that only those movies that meet both rating criteria are included in the final result.",
            "question": "What are the names of all movies that received 3 or 4 stars?"
        },
        {
            "sample_id": 2474,
            "gold_sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
            "gold_complexity": 13,
            "vt": "SELECT DISTINCT reviewer.name, movie.title, rating.stars FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE movie.director = reviewer.name",
            "ba": "The virtual table presents a list of distinct reviewers along with the titles of movies they rated and the corresponding star ratings. It combines data from the 'rating', 'movie', and 'reviewer' tables, filtering the results to show only those movies directed by the reviewers themselves.",
            "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?"
        },
        {
            "sample_id": 2511,
            "gold_sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT rating.mid, AVG(rating.stars) FROM rating GROUP BY rating.mid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides the average star rating for each movie from the 'rating' table, but only includes movies that have received a minimum number of ratings. The placeholder in the HAVING clause represents the minimum count of ratings required for a movie to be included in the results.",
            "question": "Find the average rating star for each movie that received at least 2 ratings."
        },
        {
            "sample_id": 2481,
            "gold_sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title",
            "gold_complexity": 9,
            "vt": "SELECT movie.title, movie.year FROM movie JOIN Movie AS T2 ON T1.director = T2.director WHERE movie.title <> movie.title",
            "ba": "The virtual table describes the titles and release years of movies from the 'movie' table that share the same director, excluding the movie itself.",
            "question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them."
        },
        {
            "sample_id": 2430,
            "gold_sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
            "gold_complexity": 8,
            "vt": "SELECT movie.title FROM movie WHERE movie.director = '[placeholder-type:string]' AND movie.year > [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles of movies from the 'movie' table that were directed by a specific director and released after a certain year. The placeholders in the WHERE clause represent the director's name and the year of release.",
            "question": "What are the titles of all movies that James Cameron directed after 2000?"
        },
        {
            "sample_id": 2486,
            "gold_sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1",
            "gold_complexity": 10,
            "vt": "SELECT movie.director FROM movie WHERE movie.director <> None.\"null\" GROUP BY movie.director HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the directors of movies from the 'movie' table who have directed a specific number of films. The placeholder in the HAVING clause represents the minimum count of movies directed by each director.",
            "question": "What are the names of all directors who have made one movie except for the director named NULL?"
        },
        {
            "sample_id": 2505,
            "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3",
            "gold_complexity": 7,
            "vt": "SELECT reviewer.name FROM rating JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE rating.stars > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of reviewers who have given a rating of more than a specified number of stars. It retrieves data from the 'reviewer' table and joins it with the 'rating' table based on the reviewer's unique identifier.",
            "question": "Find the names of reviewers who had given higher than 3 star ratings."
        },
        {
            "sample_id": 2434,
            "gold_sql": "SELECT director FROM Movie WHERE title  = 'Avatar'",
            "gold_complexity": 6,
            "vt": "SELECT movie.director FROM movie WHERE movie.title = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the director of a specific movie from the 'movie' table based on the movie's title. The placeholder in the WHERE clause represents the title of the movie.",
            "question": "Who directed Avatar?"
        },
        {
            "sample_id": 2460,
            "gold_sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
            "gold_complexity": 12,
            "vt": "SELECT MAX(rating.stars), movie.year FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID WHERE movie.year = (SELECT MAX(movie.year) FROM Movie)",
            "ba": "The virtual table retrieves the maximum star rating given to movies released in the most recent year. It joins the 'rating' table with the 'movie' table to access the movie's release year and filters the results to only include movies from that year.",
            "question": "What is highest rating for the most recent movie and when was it released?"
        },
        {
            "sample_id": 2479,
            "gold_sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
            "gold_complexity": 13,
            "vt": "SELECT movie.title, movie.director FROM movie JOIN Movie AS T2 ON T1.director = T2.director WHERE movie.title <> movie.title ORDER BY movie.director, movie.title",
            "ba": "The virtual table describes the titles and directors of movies from the 'movie' table that share the same director but are not the same movie. The query joins the 'movie' table with itself to find other movies directed by the same person, excluding the current movie being considered.",
            "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title."
        },
        {
            "sample_id": 2439,
            "gold_sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"",
            "gold_complexity": 6,
            "vt": "SELECT reviewer.rid FROM reviewer WHERE reviewer.name = None.\"daniel lewis\"",
            "ba": "The virtual table retrieves the unique identifier of a reviewer from the 'reviewer' table based on the reviewer's name.",
            "question": "What is the reviewer id of Daniel Lewis?"
        },
        {
            "sample_id": 2496,
            "gold_sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director",
            "gold_complexity": 14,
            "vt": "SELECT movie.title, rating.stars, movie.director, MAX(rating.stars) FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID WHERE movie.director <> None.\"null\" GROUP BY movie.director",
            "ba": "The virtual table provides a summary of movie ratings by different directors. It selects the movie title, the number of stars given in the rating, and the director's name, while also calculating the maximum stars given for each director. The query filters out any movies that do not have a valid director name and groups the results by the director's name to aggregate the ratings.",
            "question": "For each director, what are the titles and ratings for all the movies they reviewed?"
        },
        {
            "sample_id": 2513,
            "gold_sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
            "gold_complexity": 7,
            "vt": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4",
            "ba": "The virtual table identifies reviewers who have given ratings to movies, excluding those who rated any movie with 4 stars. The query uses the EXCEPT clause to filter out reviewers who have given a 4-star rating from the overall list of reviewers in the Rating table.",
            "question": "find the ids of reviewers who did not give 4 star."
        },
        {
            "sample_id": 2467,
            "gold_sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3",
            "gold_complexity": 9,
            "vt": "SELECT reviewer.name FROM rating JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY rating.rid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of reviewers from the 'reviewer' table who have submitted a certain number of ratings. The query joins the 'rating' table with the 'reviewer' table based on the reviewer ID, groups the results by reviewer ID, and filters the groups to include only those reviewers who have submitted a specified minimum number of ratings.",
            "question": "Find the names of all reviewers who have contributed three or more ratings."
        },
        {
            "sample_id": 2501,
            "gold_sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT movie.title, rating.mid FROM rating JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY rating.mid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the titles of movies along with their unique identifiers from the 'rating' table, joining it with the 'movie' table. It groups the results by movie identifier and orders them based on the count of ratings received, limiting the output to a specified number of entries.",
            "question": "What is the name of the movie that is rated by most of times?"
        }
    ],
    "csu_1": [
        {
            "sample_id": 2327,
            "gold_sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
            "gold_complexity": 10,
            "vt": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
            "ba": "The virtual table retrieves the names of campuses located in specific geographical areas, namely Northridge in Los Angeles and San Francisco in San Francisco. It combines results from two separate queries using a UNION to ensure that campuses from both locations are included in the final output.",
            "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco."
        },
        {
            "sample_id": 2380,
            "gold_sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
            "gold_complexity": 8,
            "vt": "SELECT SUM(discipline_enrollments.graduate) FROM discipline_enrollments JOIN campuses AS t2 ON t1.campus = t2.id WHERE discipline_enrollments.year = [placeholder-type:numeric] AND campuses.campus = None.\"san francisco state university\"",
            "ba": "The virtual table summarizes the total number of graduate enrollments from the 'discipline_enrollments' table for a specific year at a particular campus. The placeholder in the WHERE clause represents the year of interest, while the campus name is specified directly in the query.",
            "question": "How many people graduated from San Francisco State University in 2004?"
        },
        {
            "sample_id": 2363,
            "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
            "gold_complexity": 8,
            "vt": "SELECT degrees.degrees FROM campuses JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = None.\"san francisco state university\" AND t2.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the types of degrees awarded at a specific campus for a given year. It retrieves data from the 'degrees' table, which is linked to the 'campuses' table to filter by campus name. The placeholder in the WHERE clause represents the year for which the degrees were awarded.",
            "question": "What are the degrees conferred in \"San Francisco State University\" in 2001."
        },
        {
            "sample_id": 2371,
            "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
            "gold_complexity": 11,
            "vt": "SELECT T1.campus FROM campuses JOIN faculty AS t2 ON t1.id = t2.campus WHERE faculty.faculty >= [placeholder-type:numeric] AND faculty.faculty <= [placeholder-type:numeric] AND T1.year = [placeholder-type:numeric]",
            "ba": "The virtual table lists the campuses from the 'campuses' table that have a number of faculty members within a specified range for a given year. The placeholders in the WHERE clause represent the minimum and maximum number of faculty members, as well as the year of interest.",
            "question": "List the campus that have between 600 and 1000 faculty lines in year 2004."
        },
        {
            "sample_id": 2317,
            "gold_sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
            "gold_complexity": 6,
            "vt": "SELECT campuses.campus FROM campuses WHERE campuses.county = None.\"los angeles\"",
            "ba": "The virtual table lists the names of campuses from the 'campuses' table that are located in a specific county. The placeholder in the WHERE clause represents the county's name.",
            "question": "Report the name of all campuses in Los Angeles county."
        },
        {
            "sample_id": 2334,
            "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM csu_fees WHERE csu_fees.campusfee > (SELECT AVG(csu_fees.campusfee) FROM csu_fees)",
            "ba": "The virtual table counts the number of campuses that have a campus fee greater than the average campus fee across all campuses. It uses a subquery to calculate the average campus fee from the 'csu_fees' table and compares each campus's fee against this average.",
            "question": "How many universities have a campus fee higher than average?"
        },
        {
            "sample_id": 2330,
            "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
            "gold_complexity": 8,
            "vt": "SELECT csu_fees.campusfee FROM campuses JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = None.\"san jose state university\" AND csu_fees.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the campus fee amount for a specific campus from the 'csu_fees' table, joining it with the 'campuses' table to filter by campus name. The placeholder in the WHERE clause represents the year for which the fee is applicable.",
            "question": "What is the campus fee for San Jose State University in 1996?"
        },
        {
            "sample_id": 2344,
            "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT campuses.campus FROM campuses JOIN faculty AS T2 ON T1.id = T2.campus WHERE faculty.year = [placeholder-type:numeric] ORDER BY faculty.faculty LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of campuses from the 'campuses' table that have faculty data for a specific year. The query joins the 'campuses' table with the 'faculty' table to filter campuses based on the year of faculty records. The results are ordered by the number of faculty members and limited to a specified number of entries.",
            "question": "What campus has the most faculties in 2003?"
        },
        {
            "sample_id": 2377,
            "gold_sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
            "gold_complexity": 8,
            "vt": "SELECT SUM(discipline_enrollments.undergraduate) FROM discipline_enrollments JOIN campuses AS t2 ON t1.campus = t2.id WHERE discipline_enrollments.year = [placeholder-type:numeric] AND campuses.campus = None.\"san jose state university\"",
            "ba": "The virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific year and campus. The query joins the 'discipline_enrollments' table with the 'campuses' table to filter the results based on the campus name, which is represented as a placeholder. The year is also specified as a numeric placeholder to allow for dynamic querying.",
            "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?"
        },
        {
            "sample_id": 2340,
            "gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT degrees.year FROM degrees GROUP BY degrees.year ORDER BY SUM(degrees.degrees) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the years in which degrees were awarded from the 'degrees' table, grouping the results by year and ordering them based on the total number of degrees awarded. The placeholder in the LIMIT clause allows for specifying the maximum number of years to return.",
            "question": "In what year was the most degrees conferred?"
        },
        {
            "sample_id": 2341,
            "gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT degrees.campus FROM degrees GROUP BY degrees.campus ORDER BY SUM(degrees.degrees) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique campuses from the 'degrees' table, grouping the results by campus identifier. It orders the campuses based on the total number of degrees awarded, limiting the output to a specified number of campuses.",
            "question": "Which campus has the most degrees conferred in all times?"
        },
        {
            "sample_id": 2323,
            "gold_sql": "SELECT campus FROM campuses WHERE YEAR  <  1800",
            "gold_complexity": 6,
            "vt": "SELECT campuses.campus FROM campuses WHERE campuses.year < [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of campuses from the 'campuses' table that have data records from years earlier than a specified year. The placeholder in the WHERE clause represents the year to filter the campuses accordingly.",
            "question": "Find the name of the campuses opened before 1800."
        },
        {
            "sample_id": 2359,
            "gold_sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
            "gold_complexity": 6,
            "vt": "SELECT campuses.campus FROM campuses WHERE campuses.county = None.\"los angeles\"",
            "ba": "The virtual table describes the names of campuses from the 'campuses' table that are located in a specific county. The placeholder in the WHERE clause represents the county's name.",
            "question": "List the campuses in Los Angeles county."
        },
        {
            "sample_id": 2367,
            "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
            "gold_complexity": 8,
            "vt": "SELECT faculty.faculty FROM faculty JOIN campuses AS T2 ON T1.campus = T2.id WHERE faculty.year = [placeholder-type:numeric] AND campuses.campus = None.\"long beach state university\"",
            "ba": "The virtual table retrieves the number of faculty members from the 'faculty' table for a specific year at 'long beach state university'. The query joins the 'faculty' table with the 'campuses' table to filter the results based on the campus name and the specified year.",
            "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?"
        },
        {
            "sample_id": 2347,
            "gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
            "gold_complexity": 6,
            "vt": "SELECT AVG(csu_fees.campusfee) FROM csu_fees WHERE csu_fees.year = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average campus fee from the 'csu_fees' table for a specific year. The placeholder in the WHERE clause represents the year for which the average fee is being calculated.",
            "question": "What is the average fee on a CSU campus in 2005?"
        },
        {
            "sample_id": 2335,
            "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM csu_fees WHERE csu_fees.campusfee > (SELECT AVG(csu_fees.campusfee) FROM csu_fees)",
            "ba": "The virtual table counts the number of campuses that have a campus fee greater than the average campus fee across all campuses. It uses a subquery to calculate the average campus fee from the 'csu_fees' table and compares each campus's fee against this average.",
            "question": "Find the count of universities whose campus fee is greater than the average campus fee."
        },
        {
            "sample_id": 2366,
            "gold_sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
            "gold_complexity": 6,
            "vt": "SELECT SUM(faculty.faculty) FROM faculty WHERE faculty.year = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the total number of faculty members across all campuses for a specific year. The placeholder in the WHERE clause represents the year for which the total faculty count is being queried.",
            "question": "How many faculty, in total, are there in the year 2002?"
        },
        {
            "sample_id": 2353,
            "gold_sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
            "gold_complexity": 13,
            "vt": "SELECT campuses.campus FROM campuses JOIN faculty AS T2 ON T1.id = T2.campus WHERE faculty.year = [placeholder-type:numeric] AND faculty.faculty > (SELECT MAX(faculty.faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = \"Orange\")",
            "ba": "The virtual table lists the names of campuses from the 'campuses' table that have a faculty count greater than the maximum faculty count recorded in the year 2002 for campuses located in Orange County. The query uses a placeholder for the year to filter the faculty data.",
            "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county."
        },
        {
            "sample_id": 2345,
            "gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
            "gold_complexity": 6,
            "vt": "SELECT AVG(csu_fees.campusfee) FROM csu_fees WHERE csu_fees.year = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average campus fee from the 'csu_fees' table for a specific year. The placeholder in the WHERE clause represents the year for which the average fee is being calculated.",
            "question": "Find the average fee on a CSU campus in 1996"
        },
        {
            "sample_id": 2378,
            "gold_sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
            "gold_complexity": 8,
            "vt": "SELECT SUM(discipline_enrollments.undergraduate) FROM discipline_enrollments JOIN campuses AS t2 ON t1.campus = t2.id WHERE discipline_enrollments.year = [placeholder-type:numeric] AND campuses.campus = None.\"san jose state university\"",
            "ba": "The virtual table calculates the total number of undergraduate enrollments from the 'discipline_enrollments' table for a specific year and campus. It joins the 'discipline_enrollments' table with the 'campuses' table to filter the results based on the campus name, which is represented by a placeholder. The year is also specified using a numeric placeholder.",
            "question": "How many undergraduates are there at San Jose State"
        },
        {
            "sample_id": 2326,
            "gold_sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
            "gold_complexity": 8,
            "vt": "SELECT campuses.campus FROM campuses WHERE campuses.year >= [placeholder-type:numeric] AND campuses.year <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of campuses from the 'campuses' table that have data records for a specified range of years. The placeholders in the WHERE clause represent the start and end years for filtering the campuses.",
            "question": "What campuses opened between 1935 and 1939?"
        },
        {
            "sample_id": 2332,
            "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
            "gold_complexity": 8,
            "vt": "SELECT csu_fees.campusfee FROM campuses JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = None.\"san francisco state university\" AND csu_fees.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the campus fee amount for a specific campus from the 'csu_fees' table, which is linked to the 'campuses' table. The query filters the results based on the campus name and the applicable year of the fee.",
            "question": "What is the campus fee for San Francisco State University in 1996?"
        },
        {
            "sample_id": 2382,
            "gold_sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
            "gold_complexity": 8,
            "vt": "SELECT csu_fees.campusfee FROM csu_fees JOIN campuses AS t2 ON t1.campus = t2.id WHERE campuses.campus = None.\"san francisco state university\" AND csu_fees.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the campus fee amount for a specific campus and year from the 'csu_fees' table, joining it with the 'campuses' table to filter by campus name. The placeholder in the WHERE clause represents the year for which the fee is applicable.",
            "question": "In the year 2000, what is the campus fee for San Francisco State University?"
        },
        {
            "sample_id": 2331,
            "gold_sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
            "gold_complexity": 8,
            "vt": "SELECT csu_fees.campusfee FROM campuses JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = None.\"san francisco state university\" AND csu_fees.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the campus fee amount for a specific campus from the 'csu_fees' table, which is linked to the 'campuses' table. The query filters the results based on the campus name and the applicable year of the fee.",
            "question": "What is the campus fee of \"San Francisco State University\" in year 1996?"
        },
        {
            "sample_id": 2372,
            "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
            "gold_complexity": 11,
            "vt": "SELECT T1.campus FROM campuses JOIN faculty AS t2 ON t1.id = t2.campus WHERE faculty.faculty >= [placeholder-type:numeric] AND faculty.faculty <= [placeholder-type:numeric] AND T1.year = [placeholder-type:numeric]",
            "ba": "The virtual table lists the campuses from the 'campuses' table that have a number of faculty members within a specified range for a given year. The placeholders in the WHERE clause represent the minimum and maximum number of faculty members, as well as the year of interest.",
            "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?"
        },
        {
            "sample_id": 2369,
            "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
            "gold_complexity": 8,
            "vt": "SELECT faculty.faculty FROM faculty JOIN campuses AS T2 ON T1.campus = T2.id WHERE faculty.year = [placeholder-type:numeric] AND campuses.campus = None.\"san francisco state university\"",
            "ba": "The virtual table retrieves the number of faculty members from the 'faculty' table for a specific year at 'San Francisco State University'. The query joins the 'faculty' table with the 'campuses' table to filter the results based on the campus name and the year.",
            "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?"
        },
        {
            "sample_id": 2373,
            "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT faculty.faculty FROM campuses JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = [placeholder-type:numeric] ORDER BY t3.degrees LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of faculty members from the 'faculty' table associated with specific campuses, filtered by the year of the faculty data record. It joins the 'campuses' table to ensure that the faculty data corresponds to the correct campus and also joins the 'degrees' table to relate the faculty data to the degrees awarded in the same year. The results are ordered by the types of degrees awarded, and a limit is applied to control the number of records returned.",
            "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?"
        },
        {
            "sample_id": 2342,
            "gold_sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT degrees.campus FROM degrees GROUP BY degrees.campus ORDER BY SUM(degrees.degrees) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of campuses from the 'degrees' table, grouping the results by campus identifier. It orders the campuses based on the total number of degrees awarded, limiting the output to a specified number of campuses.",
            "question": "What campus has the most degrees  conferrred over its entire existence?"
        },
        {
            "sample_id": 2328,
            "gold_sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
            "gold_complexity": 10,
            "vt": "SELECT campus FROM campuses WHERE LOCATION = \"Northridge\" AND county = \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION = \"San Francisco\" AND county = \"San Francisco\"",
            "ba": "The virtual table retrieves the names of campuses located in specific geographical areas, namely 'Northridge' in 'Los Angeles' and 'San Francisco' in 'San Francisco'. The query combines results from two separate conditions using a UNION to ensure that campuses from both locations are included.",
            "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?"
        },
        {
            "sample_id": 2386,
            "gold_sql": "SELECT count(*) FROM campuses",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM campuses",
            "ba": "The virtual table provides a count of all campuses recorded in the 'campuses' table. This count represents the total number of unique campuses available in the database.",
            "question": "What is the total number of campuses?"
        },
        {
            "sample_id": 2362,
            "gold_sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
            "gold_complexity": 8,
            "vt": "SELECT degrees.degrees FROM campuses JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = None.\"san jose state university\" AND t2.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the types of degrees awarded at a specific campus for a given year. It retrieves data from the 'degrees' table, which is linked to the 'campuses' table to filter by campus name. The placeholder in the WHERE clause represents the year for which the degrees were awarded.",
            "question": "How many degrees were conferred at San Jose State University in 2000?"
        },
        {
            "sample_id": 2336,
            "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM csu_fees WHERE csu_fees.campusfee > (SELECT AVG(csu_fees.campusfee) FROM csu_fees)",
            "ba": "The virtual table counts the number of campuses that have a campus fee greater than the average campus fee across all campuses. It uses a subquery to calculate the average campus fee from the 'csu_fees' table and compares each campus's fee against this average.",
            "question": "How many universities have a campus fee greater than the average?"
        },
        {
            "sample_id": 2346,
            "gold_sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
            "gold_complexity": 6,
            "vt": "SELECT AVG(csu_fees.campusfee) FROM csu_fees WHERE csu_fees.year = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average campus fee from the 'csu_fees' table for a specific year. The placeholder in the WHERE clause represents the year for which the average fee is being calculated.",
            "question": "What is the average fee for a CSU campus in the year of 1996?"
        },
        {
            "sample_id": 2374,
            "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT faculty.faculty FROM campuses JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = [placeholder-type:numeric] ORDER BY t3.degrees LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the number of faculty members from the 'faculty' table for each campus, joining it with the 'campuses' table to get campus details. It also joins with the 'degrees' table to ensure that the faculty data corresponds to the same year as the degrees awarded. The results are filtered by a specific year and ordered by the types of degrees awarded, with a limit on the number of results returned.",
            "question": "How many faculty members did the university that conferred the most degrees in 2002 have?"
        },
        {
            "sample_id": 2350,
            "gold_sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
            "gold_complexity": 13,
            "vt": "SELECT campuses.campus, SUM(degrees.degrees) FROM campuses JOIN degrees AS T2 ON T1.id = T2.campus WHERE degrees.year >= [placeholder-type:numeric] AND degrees.year <= [placeholder-type:numeric] GROUP BY campuses.campus",
            "ba": "The virtual table summarizes the total number of degrees awarded by each campus over a specified range of years. It joins the 'campuses' table with the 'degrees' table to aggregate the degree counts for each campus, filtered by the year range provided.",
            "question": "how many degrees were conferred between 1998 and 2002?"
        },
        {
            "sample_id": 2351,
            "gold_sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
            "gold_complexity": 13,
            "vt": "SELECT campuses.campus, SUM(degrees.degrees) FROM campuses JOIN degrees AS T2 ON T1.id = T2.campus WHERE campuses.county = None.\"orange\" AND degrees.year >= [placeholder-type:numeric] GROUP BY campuses.campus",
            "ba": "The virtual table summarizes the total number of degrees awarded for each campus located in a specific county, filtered by a minimum year. It joins the 'campuses' table with the 'degrees' table to aggregate the degree counts per campus.",
            "question": "For each Orange county campus, report the number of degrees granted after 2000."
        },
        {
            "sample_id": 2333,
            "gold_sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM csu_fees WHERE csu_fees.campusfee > (SELECT AVG(csu_fees.campusfee) FROM csu_fees)",
            "ba": "The virtual table counts the number of campuses that have a campus fee greater than the average campus fee across all campuses. It uses a subquery to calculate the average fee from the 'csu_fees' table and compares each campus's fee to this average.",
            "question": "Find the count of universities whose campus fee is greater than the average campus fee."
        },
        {
            "sample_id": 2356,
            "gold_sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
            "gold_complexity": 10,
            "vt": "SELECT T1.campus FROM campuses JOIN enrollments AS t2 ON t1.id = t2.campus WHERE enrollments.year = [placeholder-type:numeric] AND enrollments.totalenrollment_ay > [placeholder-type:numeric] AND enrollments.fte_ay > [placeholder-type:numeric]",
            "ba": "The virtual table lists the campuses from the 'campuses' table that have enrollments for a specific academic year, where the total number of enrollments and full-time equivalent enrollments exceed certain thresholds. The placeholders in the WHERE clause represent the year and the minimum values for total and full-time equivalent enrollments.",
            "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?"
        },
        {
            "sample_id": 2339,
            "gold_sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT degrees.year FROM degrees GROUP BY degrees.year ORDER BY SUM(degrees.degrees) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the years in which degrees were awarded from the 'degrees' table, grouping the results by year and ordering them based on the total number of degrees awarded. The placeholder in the LIMIT clause allows for specifying the maximum number of years to return.",
            "question": "Which year has the most degrees conferred?"
        },
        {
            "sample_id": 2370,
            "gold_sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
            "gold_complexity": 8,
            "vt": "SELECT faculty.faculty FROM faculty JOIN campuses AS T2 ON T1.campus = T2.id WHERE faculty.year = [placeholder-type:numeric] AND campuses.campus = None.\"san francisco state university\"",
            "ba": "The virtual table retrieves the number of faculty members from the 'faculty' table for a specific year at 'San Francisco State University'. The query joins the 'faculty' table with the 'campuses' table to filter the results based on the campus name and the year.",
            "question": "How many faculty lines are there at San Francisco State University in 2004?"
        },
        {
            "sample_id": 2376,
            "gold_sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT faculty.faculty FROM campuses JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = [placeholder-type:numeric] ORDER BY t3.degrees LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the number of faculty members from the 'faculty' table for each campus, joining it with the 'campuses' table to get campus details. It also joins with the 'degrees' table to ensure that the faculty data corresponds to the same year as the degrees awarded. The results are filtered by a specific year and ordered by the types of degrees awarded, with a limit on the number of results returned.",
            "question": "How many faculty members are at the university that gave the least number of degrees in 2001?"
        },
        {
            "sample_id": 2338,
            "gold_sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
            "gold_complexity": 8,
            "vt": "SELECT campuses.campus FROM campuses WHERE campuses.county = None.\"los angeles\" AND campuses.year > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of campuses from the 'campuses' table that are located in a specific county and have data records from a certain year onwards. The placeholder in the WHERE clause represents the year threshold for filtering the campuses.",
            "question": "What campuses are located in Los Angeles county and opened after 1950?"
        }
    ],
    "wedding": [
        {
            "sample_id": 1632,
            "gold_sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT church.open_date FROM church GROUP BY church.open_date HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides the open dates of churches from the 'church' table that have been established on the same date, filtering for those dates that have a count of occurrences greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of churches that must share the same open date.",
            "question": "Show the opening year in whcih at least two churches opened."
        },
        {
            "sample_id": 1635,
            "gold_sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT church.name, church.open_date FROM church ORDER BY church.open_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and opening dates of churches from the 'church' table, ordered by their opening dates. The placeholder in the LIMIT clause indicates the maximum number of records to return.",
            "question": "Show the name and opening year for three churches that opened most recently."
        },
        {
            "sample_id": 1647,
            "gold_sql": "SELECT country ,  count(*) FROM people GROUP BY country",
            "gold_complexity": 8,
            "vt": "SELECT people.country, COUNT(*) FROM people GROUP BY people.country",
            "ba": "The virtual table summarizes the number of people residing in each country by counting the entries in the 'people' table and grouping them by the 'country' column.",
            "question": "Show all countries and the number of people from each country."
        },
        {
            "sample_id": 1642,
            "gold_sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
            "gold_complexity": 8,
            "vt": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015",
            "ba": "The virtual table lists the names of churches that did not host any weddings in the year specified. It uses a subquery to exclude the names of churches that are associated with weddings that took place in that year.",
            "question": "Show all church names except for those that had a wedding in year 2015."
        },
        {
            "sample_id": 1638,
            "gold_sql": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
            "gold_complexity": 6,
            "vt": "SELECT MIN(people.age), MAX(people.age), AVG(people.age) FROM people",
            "ba": "The virtual table provides statistical information about the ages of individuals from the 'people' table. It calculates the minimum, maximum, and average age of all people listed in the database.",
            "question": "Show the minimum, maximum, and average age for all people."
        },
        {
            "sample_id": 1639,
            "gold_sql": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",
            "gold_complexity": 11,
            "vt": "SELECT people.name, people.country FROM people WHERE people.age < (SELECT AVG(people.age) FROM people)",
            "ba": "The virtual table describes the names and countries of individuals from the 'people' table who are younger than the average age of all individuals in the same table. The query uses a subquery to calculate the average age, and the placeholder represents this average age condition.",
            "question": "Show the name and country for all people whose age is smaller than the average."
        },
        {
            "sample_id": 1640,
            "gold_sql": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014",
            "gold_complexity": 7,
            "vt": "SELECT people.name, people.name FROM wedding JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE wedding.year > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of male and female participants in weddings that took place after a specific year. It retrieves data from the 'wedding' table and joins it with the 'people' table twice to get the names of both the male and female participants. The placeholder in the WHERE clause represents the year after which the weddings occurred.",
            "question": "Show the pair of male and female names in all weddings after year 2014"
        },
        {
            "sample_id": 1633,
            "gold_sql": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840",
            "gold_complexity": 8,
            "vt": "SELECT church.organized_by, church.name FROM church WHERE church.open_date BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the organizers and names of churches that were established within a specific date range. The placeholders in the WHERE clause represent the start and end dates for filtering the churches based on their open dates.",
            "question": "Show the organizer and name for churches that opened between 1830 and 1840."
        },
        {
            "sample_id": 1637,
            "gold_sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
            "gold_complexity": 9,
            "vt": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30",
            "ba": "The virtual table identifies the countries of individuals from the 'people' table who are younger than 25 years and those who are older than 30 years. The use of INTERSECT ensures that only countries common to both age groups are returned.",
            "question": "Show the country where people older than 30 and younger than 25 are from."
        },
        {
            "sample_id": 1643,
            "gold_sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT church.name FROM church JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY church.church_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of churches from the 'church' table that have hosted a minimum number of weddings. The query joins the 'church' table with the 'wedding' table to count the number of weddings associated with each church, filtering those that meet or exceed a specified count.",
            "question": "Show all church names that have hosted least two weddings."
        },
        {
            "sample_id": 1644,
            "gold_sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'",
            "gold_complexity": 9,
            "vt": "SELECT people.name FROM wedding JOIN people AS T2 ON T1.female_id = T2.people_id WHERE wedding.year = [placeholder-type:numeric] AND people.is_male = '[placeholder-type:string]' AND people.country = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of individuals who participated in weddings that occurred in a specific year, filtered by their gender and country of residence. The placeholders in the WHERE clause represent the year of the wedding, the gender of the individuals, and their country.",
            "question": "Show the names for all females from Canada having a wedding in year 2016."
        },
        {
            "sample_id": 1631,
            "gold_sql": "SELECT name FROM church ORDER BY open_date DESC",
            "gold_complexity": 6,
            "vt": "SELECT church.name FROM church ORDER BY church.open_date",
            "ba": "The virtual table lists the names of churches from the 'church' table, ordered by their establishment date. This allows users to see the churches in chronological order of when they were opened.",
            "question": "List all church names in descending order of opening date."
        }
    ],
    "baseball_1": [
        {
            "sample_id": 3649,
            "gold_sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
            "gold_complexity": 8,
            "vt": "SELECT AVG(player.height) FROM player JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE college.name_full = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average height of players who attended a specific college. It joins the 'player' table with the 'player_college' table to link players to their respective colleges, and then further joins with the 'college' table to filter by the college's full name. The placeholder in the WHERE clause represents the name of the college being queried.",
            "question": "Find the average height of the players who belong to the college called 'Yale University'."
        },
        {
            "sample_id": 3690,
            "gold_sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
            "gold_complexity": 12,
            "vt": "SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
            "ba": "The virtual table retrieves the first and last names of players who were part of the 'Washington Nationals' team in both the year 2005 and 2007. It does this by joining the 'salary' table with the 'player' and 'team' tables, filtering for the specified years and team name.",
            "question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007."
        },
        {
            "sample_id": 3686,
            "gold_sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
            "gold_complexity": 9,
            "vt": "SELECT SUM(home_game.attendance) FROM home_game JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE team.name = '[placeholder-type:string]' AND home_game.year BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total attendance of home games for a specific team over a range of years. It joins the 'home_game' table with the 'team' table to filter by the team's name and the specified year range.",
            "question": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?"
        },
        {
            "sample_id": 3641,
            "gold_sql": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
            "gold_complexity": 14,
            "vt": "SELECT player.name_first, player.name_last, player.player_id FROM player JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY player.player_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the first and last names along with the unique identifier of players from the 'player' table who have received awards. It joins the 'player' table with the 'player_award' table to gather this information, grouping the results by player ID to ensure each player is listed only once. The results are ordered by the count of awards received, and a placeholder is used to limit the number of results returned.",
            "question": "Find the first name, last name and id for the top three players won the most player awards."
        },
        {
            "sample_id": 3701,
            "gold_sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
            "gold_complexity": 8,
            "vt": "SELECT park.city FROM park GROUP BY park.city HAVING COUNT(*) BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table lists the cities where parks are located, grouping them by city and filtering to include only those cities that have a number of parks within a specified range.",
            "question": "Find all the cities that have 2 to 4 parks."
        },
        {
            "sample_id": 3691,
            "gold_sql": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
            "gold_complexity": 12,
            "vt": "SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
            "ba": "The virtual table retrieves the first and last names of players who were part of the 'Washington Nationals' team in both the years 2005 and 2007. It does this by joining the 'salary' table with the 'player' and 'team' tables, filtering for the specific years and team name, and using an INTERSECT to find players present in both years.",
            "question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?"
        },
        {
            "sample_id": 3667,
            "gold_sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*) FROM (SELECT * FROM postseason JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE team.name = '[placeholder-type:string]' UNION SELECT * FROM postseason JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE team.name = '[placeholder-type:string]')",
            "ba": "The virtual table counts the total number of postseason appearances for a specific team, including both wins and losses. It combines data from the 'postseason' table with the 'team' table to filter results based on the team's name, using a UNION to aggregate both winning and losing records.",
            "question": "How many times in total did the team Boston Red Stockings participate in postseason games?"
        },
        {
            "sample_id": 3655,
            "gold_sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
            "gold_complexity": 10,
            "vt": "SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1961",
            "ba": "The virtual table identifies players who received awards in both 1960 and 1961. It selects the first and last names of players from the 'player' table who have entries in the 'player_award' table for the specified years, using an INTERSECT to find common players between the two years.",
            "question": "Which players won awards in both 1960 and 1961? Return their first names and last names."
        },
        {
            "sample_id": 3633,
            "gold_sql": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
            "gold_complexity": 8,
            "vt": "SELECT home_game.year, AVG(home_game.attendance) FROM home_game GROUP BY home_game.year",
            "ba": "The virtual table summarizes the average attendance of home games for each year from the 'home_game' table. It groups the results by year to provide a yearly average attendance figure.",
            "question": "For each year, return the year and the average number of attendance at home games."
        },
        {
            "sample_id": 3639,
            "gold_sql": "SELECT count(*) FROM park WHERE state  =  'NY';",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM park WHERE park.state = '[placeholder-type:string]'",
            "ba": "The virtual table counts the total number of parks located in a specific state. The placeholder in the WHERE clause represents the state name.",
            "question": "Show me the number of parks the state of NY has."
        },
        {
            "sample_id": 3696,
            "gold_sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
            "gold_complexity": 8,
            "vt": "SELECT park.state FROM park GROUP BY park.state HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the states where baseball parks are located, specifically those states that have more than a specified number of parks. The placeholder in the HAVING clause represents the minimum count of parks required for a state to be included in the results.",
            "question": "List the names of states that have more than 2 parks."
        },
        {
            "sample_id": 3638,
            "gold_sql": "SELECT count(*) FROM park WHERE state  =  'NY';",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM park WHERE park.state = '[placeholder-type:string]'",
            "ba": "The virtual table counts the total number of parks located in a specific state. The placeholder in the WHERE clause represents the state name.",
            "question": "How many parks are there in the state of NY?"
        },
        {
            "sample_id": 3674,
            "gold_sql": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
            "gold_complexity": 9,
            "vt": "SELECT salary.salary FROM salary WHERE salary.year = [placeholder-type:numeric] ORDER BY salary.salary LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the salaries of players from the 'salary' table for a specific year. The placeholders in the WHERE clause represent the year for which the salary data is requested, and the limit specifies how many salary records to return, ordered by the salary amount.",
            "question": "List the 3 highest salaries of the players in 2001?"
        },
        {
            "sample_id": 3660,
            "gold_sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM postseason JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE team.name = '[placeholder-type:string]' AND postseason.year = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of postseason appearances for a specific team that lost in a given year. It joins the 'postseason' table with the 'team' table to filter results based on the team's name and the year of the postseason.",
            "question": "How many times did Boston Red Stockings lose in 2009 postseason?"
        },
        {
            "sample_id": 3679,
            "gold_sql": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT hall_of_fame.yearid FROM hall_of_fame GROUP BY hall_of_fame.yearid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the years in which players were inducted into the Hall of Fame, grouping the results by year and ordering them based on the number of inductees. The placeholder in the LIMIT clause allows for specifying the maximum number of years to return.",
            "question": "Find the year in which the least people enter hall of fame."
        },
        {
            "sample_id": 3693,
            "gold_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
            "gold_complexity": 9,
            "vt": "SELECT SUM(home_game.games) FROM home_game JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE team.name = '[placeholder-type:string]' AND home_game.year BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total number of home games played by a specific team over a range of years. It joins the 'home_game' table with the 'team' table to filter results based on the team's name and the specified year range.",
            "question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000."
        },
        {
            "sample_id": 3637,
            "gold_sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 14,
            "vt": "SELECT player.name_first, player.name_last, manager_award.player_id FROM player JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY manager_award.player_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of players along with their first and last names who have received manager awards. It aggregates the data by player ID, ensuring that each player is only listed once, and orders the results based on the number of awards received. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Which manager won the most manager award? Give me the manager's first name, last name and id."
        },
        {
            "sample_id": 3650,
            "gold_sql": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
            "gold_complexity": 11,
            "vt": "SELECT team.name, team.team_id, MAX(salary.salary) FROM team JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY team.team_id",
            "ba": "The virtual table displays the names and identifiers of teams along with the maximum salary recorded for players in each team. It aggregates the salary data by team, allowing users to see which team has the highest player salary.",
            "question": "What is the highest salary among each team? List the team name, id and maximum salary."
        },
        {
            "sample_id": 3702,
            "gold_sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT park.park_name FROM home_game JOIN park AS T2 ON T1.park_id = T2.park_id WHERE home_game.year = [placeholder-type:numeric] ORDER BY home_game.attendance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of parks where home games were played in a specific year, ordered by the total attendance of those games. The placeholders represent the year of interest and the limit on the number of parks to display.",
            "question": "Which park had most attendances in 2008?"
        },
        {
            "sample_id": 3700,
            "gold_sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
            "gold_complexity": 8,
            "vt": "SELECT park.city FROM park GROUP BY park.city HAVING COUNT(*) BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table lists the cities where parks are located, grouping them by city and filtering to include only those cities that have a number of parks within a specified range.",
            "question": "Which cities have 2 to 4 parks?"
        },
        {
            "sample_id": 3659,
            "gold_sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
            "gold_complexity": 7,
            "vt": "SELECT MAX(postseason.wins) FROM postseason JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE team.name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the maximum number of wins recorded in the postseason for a specific team. It joins the 'postseason' table with the 'team' table to filter results based on the team's name provided as a placeholder.",
            "question": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?"
        },
        {
            "sample_id": 3666,
            "gold_sql": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*) FROM (SELECT * FROM postseason JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE team.name = '[placeholder-type:string]' UNION SELECT * FROM postseason JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE team.name = '[placeholder-type:string]')",
            "ba": "The virtual table counts the total number of postseason appearances for a specific team, including both wins and losses. It combines data from the 'postseason' table with the 'team' table to filter results based on the team's name, using a UNION to aggregate both winning and losing records.",
            "question": "What is the total number of postseason games that team Boston Red Stockings participated in?"
        },
        {
            "sample_id": 3665,
            "gold_sql": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), postseason.year FROM postseason JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE team.name = '[placeholder-type:string]' GROUP BY postseason.year",
            "ba": "The virtual table provides a count of postseason wins for a specific team across different years. It joins the 'postseason' table with the 'team' table to filter results based on the team's name, and groups the results by year to show how many times the team has won in each postseason year.",
            "question": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons."
        },
        {
            "sample_id": 3654,
            "gold_sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
            "gold_complexity": 10,
            "vt": "SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1, player_award AS T2 WHERE T2.year = 1961",
            "ba": "The virtual table identifies players who received awards in both 1960 and 1961. It selects the first and last names of players from the 'player' table who have entries in the 'player_award' table for the specified years, using an INTERSECT to find common players across both years.",
            "question": "Find the players' first name and last name who won award both in 1960 and in 1961."
        },
        {
            "sample_id": 3648,
            "gold_sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
            "gold_complexity": 8,
            "vt": "SELECT AVG(player.height) FROM player JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE college.name_full = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average height of players who attended a specific college. It joins the 'player' table with the 'player_college' table to link players to their respective colleges, and then joins with the 'college' table to filter by the full name of the college. The placeholder in the WHERE clause represents the name of the college being queried.",
            "question": "What is the average height of the players from the college named 'Yale University'?"
        },
        {
            "sample_id": 3695,
            "gold_sql": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT team.name FROM home_game JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE home_game.year = [placeholder-type:numeric] ORDER BY home_game.attendance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of teams that hosted home games in a specific year, ordered by the total attendance at those games. The placeholders represent the year of the home games and the limit on the number of teams to display.",
            "question": "Find the team that attended the least number of home games in 1980."
        },
        {
            "sample_id": 3673,
            "gold_sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM salary JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE team.name = '[placeholder-type:string]' AND salary.year = [placeholder-type:numeric]",
            "ba": "The virtual table provides the total count of salaries for players from a specific team in a given year. It joins the 'salary' table with the 'team' table to filter results based on the team's name and the year of the salary record.",
            "question": "How many players did Boston Red Stockings have in 2000?"
        },
        {
            "sample_id": 3632,
            "gold_sql": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
            "gold_complexity": 8,
            "vt": "SELECT home_game.year, AVG(home_game.attendance) FROM home_game GROUP BY home_game.year",
            "ba": "The virtual table summarizes the average attendance of home games for each year from the 'home_game' table. It groups the results by year to provide a yearly average attendance figure.",
            "question": "What is the average number of attendance at home games for each year?"
        },
        {
            "sample_id": 3627,
            "gold_sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
            "gold_complexity": 9,
            "vt": "SELECT player.name_first, player.name_last FROM player JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE all_star.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of players from the 'player' table who participated in the All-Star game during a specific year. The placeholder in the WHERE clause represents the year of the All-Star game.",
            "question": "List the first and last name for players who participated in all star game in 1998."
        },
        {
            "sample_id": 3697,
            "gold_sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
            "gold_complexity": 8,
            "vt": "SELECT park.state FROM park GROUP BY park.state HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the states where baseball parks are located, specifically those states that have more than a specified number of parks. The placeholder in the HAVING clause represents the minimum count of parks required for a state to be included in the results.",
            "question": "Which states have more than 2 parks?"
        },
        {
            "sample_id": 3625,
            "gold_sql": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
            "gold_complexity": 7,
            "vt": "SELECT AVG(salary.salary) FROM salary JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE team.name = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average salary of players from a specific team. It joins the 'salary' table with the 'team' table using the team identifier, filtering the results based on the team's name provided as a placeholder.",
            "question": "Compute the average salary of the players in the team called 'Boston Red Stockings'."
        },
        {
            "sample_id": 3653,
            "gold_sql": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT team.name, team.team_id FROM team JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY team.team_id ORDER BY AVG(salary.salary) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and identifiers of teams from the 'team' table, along with their average salaries from the 'salary' table. The results are grouped by team identifier and ordered by the average salary, allowing users to see which teams have the highest average salaries, limited to a specified number of results.",
            "question": "Which team offers the lowest average salary? Give me the name and id of the team."
        },
        {
            "sample_id": 3635,
            "gold_sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
            "gold_complexity": 14,
            "vt": "SELECT team.team_id, team.rank FROM home_game JOIN team AS T2 ON T1.team_id = T2.team_id WHERE home_game.year = [placeholder-type:numeric] GROUP BY home_game.team_id ORDER BY AVG(home_game.attendance) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of team rankings based on their home game attendance for a specific year. It retrieves the team ID and rank from the 'team' table, joining it with the 'home_game' table to filter by the specified year. The results are grouped by team ID and ordered by the average attendance of home games, with a limit on the number of results returned.",
            "question": "Find the id and rank of the team that has the highest average attendance rate in 2014."
        },
        {
            "sample_id": 3699,
            "gold_sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM team_franchise WHERE team_franchise.active = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of active franchises from the 'team_franchise' table based on a specified active status.",
            "question": "Find the number of team franchises that are active (have 'Y' as \"active\" information)."
        },
        {
            "sample_id": 3644,
            "gold_sql": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
            "gold_complexity": 8,
            "vt": "SELECT player.name_first, player.name_last FROM player WHERE player.death_year = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first and last names of players from the 'player' table who have a specific year of death. The placeholder in the WHERE clause represents the year of death.",
            "question": "Find all the players' first name and last name who have empty death record."
        },
        {
            "sample_id": 3623,
            "gold_sql": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT college.name_full, college.college_id FROM college JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY college.college_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of colleges along with their unique identifiers, specifically focusing on the colleges attended by players. It aggregates the data by college, ensuring that each college is represented only once, and orders the results based on the number of players associated with each college. The placeholder in the LIMIT clause allows for specifying the maximum number of colleges to be returned in the result set.",
            "question": "Find the full name and id of the college that has the most baseball players."
        },
        {
            "sample_id": 3683,
            "gold_sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM home_game JOIN park AS T2 ON T1.park_id = T2.park_id WHERE home_game.year = [placeholder-type:numeric] AND park.park_name = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of home games played in a specific year at a particular park. It joins the 'home_game' table with the 'park' table to filter results based on the year and the name of the park.",
            "question": "Count the number of games taken place in park \"Columbia Park\" in 1907."
        },
        {
            "sample_id": 3681,
            "gold_sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM park WHERE park.city = '[placeholder-type:string]'",
            "ba": "The virtual table counts the total number of parks located in a specific city. The placeholder in the WHERE clause represents the name of the city being queried.",
            "question": "How many parks does Atlanta city have?"
        },
        {
            "sample_id": 3684,
            "gold_sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM home_game JOIN park AS T2 ON T1.park_id = T2.park_id WHERE home_game.year = [placeholder-type:numeric] AND park.city = '[placeholder-type:string]'",
            "ba": "The virtual table provides the total count of home games played in a specific year at a particular park located in a specified city. It joins the 'home_game' table with the 'park' table to filter the results based on the year and the city of the park.",
            "question": "How many games were played in city Atlanta in 2000?"
        },
        {
            "sample_id": 3630,
            "gold_sql": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
            "gold_complexity": 8,
            "vt": "SELECT hall_of_fame.yearid, COUNT(*) FROM hall_of_fame GROUP BY hall_of_fame.yearid",
            "ba": "The virtual table summarizes the number of players inducted into the Hall of Fame for each year. It retrieves the year of induction and counts the total number of inductees for that year.",
            "question": "How many players enter hall of fame each year?"
        },
        {
            "sample_id": 3626,
            "gold_sql": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
            "gold_complexity": 9,
            "vt": "SELECT player.name_first, player.name_last FROM player JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE all_star.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of players from the 'player' table who participated in the All-Star game during a specific year. The placeholder in the WHERE clause represents the year of the All-Star game.",
            "question": "What are first and last names of players participating in all star game in 1998?"
        },
        {
            "sample_id": 3680,
            "gold_sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM park WHERE park.city = '[placeholder-type:string]'",
            "ba": "The virtual table counts the total number of parks located in a specific city from the 'park' table. The placeholder in the WHERE clause represents the name of the city being queried.",
            "question": "How many parks are there in Atlanta city?"
        },
        {
            "sample_id": 3698,
            "gold_sql": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM team_franchise WHERE team_franchise.active = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of active franchises from the 'team_franchise' table. The placeholder in the WHERE clause represents the status of the franchise, indicating whether it is currently active or not.",
            "question": "How many team franchises are active, with active value 'Y'?"
        },
        {
            "sample_id": 3634,
            "gold_sql": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
            "gold_complexity": 14,
            "vt": "SELECT team.team_id, team.rank FROM home_game JOIN team AS T2 ON T1.team_id = T2.team_id WHERE home_game.year = [placeholder-type:numeric] GROUP BY home_game.team_id ORDER BY AVG(home_game.attendance) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the team IDs and their ranks from the 'team' table, based on the average attendance of home games for a specific year. It joins the 'home_game' table with the 'team' table to filter and group the results by team ID, allowing users to see which teams had the highest average attendance in a given year, limited to a specified number of results.",
            "question": "In 2014, what are the id and rank of the team that has the largest average number of attendance?"
        },
        {
            "sample_id": 3669,
            "gold_sql": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM postseason WHERE postseason.year = [placeholder-type:numeric] AND postseason.ties = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of postseason events that occurred in a specific year and had a certain number of ties. The placeholders represent the year of the postseason and the number of ties in those events.",
            "question": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason."
        },
        {
            "sample_id": 3636,
            "gold_sql": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 14,
            "vt": "SELECT player.name_first, player.name_last, manager_award.player_id FROM player JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY manager_award.player_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of players along with their first and last names who have received manager awards. It aggregates the data by player ID, ensuring that each player is listed only once, and orders the results based on the number of awards received, limiting the output to a specified number of players.",
            "question": "What are the manager's first name, last name and id who won the most manager award?"
        },
        {
            "sample_id": 3672,
            "gold_sql": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM salary JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE team.name = '[placeholder-type:string]' AND salary.year = [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of salaries for players from a specific team in a given year. It joins the 'salary' table with the 'team' table to filter results based on the team's name and the year of the salary record.",
            "question": "How many players were in the team Boston Red Stockings in 2000?"
        },
        {
            "sample_id": 3658,
            "gold_sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
            "gold_complexity": 7,
            "vt": "SELECT MAX(postseason.wins) FROM postseason JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE team.name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the maximum number of wins recorded in the postseason for a specific team. It joins the 'postseason' table with the 'team' table to filter the results based on the team's name provided as a placeholder.",
            "question": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?"
        },
        {
            "sample_id": 3646,
            "gold_sql": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM player WHERE player.birth_country = '[placeholder-type:string]' AND player.bats = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of players from a specific birth country who bat with a specified hand (left or right). The placeholders in the WHERE clause represent the birth country and batting hand of the players.",
            "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'."
        }
    ],
    "hr_1": [
        {
            "sample_id": 3406,
            "gold_sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
            "gold_complexity": 6,
            "vt": "SELECT * FROM departments WHERE departments.department_name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves all information from the 'departments' table for a specific department identified by its name. The placeholder in the WHERE clause represents the name of the department being queried.",
            "question": "Display all the information about the department Marketing."
        },
        {
            "sample_id": 3509,
            "gold_sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
            "gold_complexity": 13,
            "vt": "SELECT employees.first_name, employees.last_name, employees.salary, employees.department_id, MAX(employees.salary) FROM employees GROUP BY employees.department_id",
            "ba": "The virtual table provides a summary of employees' first names, last names, salaries, and their respective department identifiers from the 'employees' table. It also calculates the maximum salary within each department. The placeholder in the SELECT clause represents the department's identifier, allowing for grouping of employees by their department to find the highest salary in each.",
            "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?"
        },
        {
            "sample_id": 3516,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
            "gold_complexity": 13,
            "vt": "SELECT employees.first_name, employees.last_name, employees.employee_id, countries.country_name FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
            "ba": "The virtual table describes the first and last names, employee ID, and country name of employees from the 'employees' table. It joins the 'departments' table to link employees to their respective departments, the 'locations' table to associate departments with their locations, and the 'countries' table to retrieve the country names where these locations are situated. The placeholders in the query represent the necessary identifiers for these relationships.",
            "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working."
        },
        {
            "sample_id": 3500,
            "gold_sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",
            "gold_complexity": 13,
            "vt": "SELECT employees.employee_id, employees.job_id FROM employees WHERE employees.salary < (SELECT MIN(employees.salary) FROM employees WHERE job_id = 'MK_MAN')",
            "ba": "The virtual table retrieves the employee IDs and job IDs of employees whose salary is less than the minimum salary of a specific job title, identified by the job ID 'MK_MAN'.",
            "question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN."
        },
        {
            "sample_id": 3502,
            "gold_sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
            "gold_complexity": 17,
            "vt": "SELECT employees.employee_id, employees.first_name, employees.last_name, employees.job_id FROM employees WHERE employees.salary > (SELECT MAX(employees.salary) FROM employees WHERE job_id = 'PU_MAN')",
            "ba": "The virtual table provides a list of employee identifiers, first names, last names, and job identifiers from the 'employees' table for those employees whose salary exceeds the maximum salary of a specific job title, identified by the job_id placeholder.",
            "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN."
        },
        {
            "sample_id": 3449,
            "gold_sql": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
            "gold_complexity": 8,
            "vt": "SELECT locations.country_id, COUNT(*) FROM locations GROUP BY locations.country_id",
            "ba": "The virtual table summarizes the count of locations grouped by their associated country identifiers from the 'locations' table. Each entry in the result will represent a unique country along with the number of locations that belong to it.",
            "question": "Give the country id and corresponding count of cities in each country."
        },
        {
            "sample_id": 3455,
            "gold_sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
            "gold_complexity": 9,
            "vt": "SELECT employees.employee_id, countries.country_name FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
            "ba": "The virtual table describes the employee IDs and their corresponding country names from the 'employees' table. It joins the 'departments' table to link employees to their respective departments, the 'locations' table to connect departments to their locations, and the 'countries' table to retrieve the country names associated with those locations.",
            "question": "What are all the employee ids and the names of the countries in which they work?"
        },
        {
            "sample_id": 3492,
            "gold_sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
            "gold_complexity": 14,
            "vt": "SELECT employees.first_name, employees.last_name, employees.hire_date FROM employees WHERE employees.department_id = (SELECT employees.department_id FROM employees WHERE first_name = \"Clara\")",
            "ba": "The virtual table describes the first and last names along with the hire date of employees from the 'employees' table who belong to the same department as a specific employee identified by their first name.",
            "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara."
        },
        {
            "sample_id": 3466,
            "gold_sql": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
            "gold_complexity": 15,
            "vt": "SELECT employees.first_name, employees.last_name, employees.department_id FROM employees WHERE employees.salary IN (SELECT MIN(employees.salary) FROM employees GROUP BY department_id)",
            "ba": "The virtual table describes the first and last names of employees along with their department identifiers from the 'employees' table, specifically targeting those employees who earn the minimum salary within their respective departments. The query utilizes a subquery to determine the minimum salary for each department, ensuring that only those employees with the lowest salary in their department are selected.",
            "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments."
        },
        {
            "sample_id": 3458,
            "gold_sql": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
            "gold_complexity": 7,
            "vt": "SELECT * FROM job_history JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE employees.salary >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a comprehensive view of the job history of employees, including their job details and salary information. It combines data from the 'job_history' and 'employees' tables, allowing for analysis of employees who have a salary above a specified threshold. The placeholder in the WHERE clause represents the minimum salary to filter the results.",
            "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?"
        },
        {
            "sample_id": 3423,
            "gold_sql": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
            "gold_complexity": 8,
            "vt": "SELECT employees.job_id, employees.hire_date FROM employees WHERE employees.hire_date BETWEEN '[placeholder-type:string]' AND '[placeholder-type:string]'",
            "ba": "The virtual table describes the job identifiers and hire dates of employees from the 'employees' table who were hired within a specific date range. The placeholders in the WHERE clause represent the start and end dates for filtering the hire dates.",
            "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?"
        },
        {
            "sample_id": 3414,
            "gold_sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
            "gold_complexity": 6,
            "vt": "SELECT employees.phone_number FROM employees WHERE employees.salary BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the phone numbers of employees from the 'employees' table whose salaries fall within a specified range. The placeholders in the WHERE clause represent the minimum and maximum salary values.",
            "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?"
        },
        {
            "sample_id": 3503,
            "gold_sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
            "gold_complexity": 17,
            "vt": "SELECT employees.employee_id, employees.first_name, employees.last_name, employees.job_id FROM employees WHERE employees.salary > (SELECT MAX(employees.salary) FROM employees WHERE job_id = 'PU_MAN')",
            "ba": "The virtual table provides a list of employee identifiers, first names, last names, and job identifiers from the 'employees' table for those employees whose salary exceeds the maximum salary of a specific job title. The placeholder in the subquery represents the job identifier for which the maximum salary is being compared.",
            "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?"
        },
        {
            "sample_id": 3506,
            "gold_sql": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "gold_complexity": 10,
            "vt": "SELECT * FROM employees WHERE NOT employees.employee_id IN (SELECT employees.employee_id FROM job_history)",
            "ba": "The virtual table retrieves all details of employees from the 'employees' table who do not have any recorded job history in the 'job_history' table. This is determined by checking that their employee_id is not present in the list of employee_ids from the job_history table.",
            "question": "display all the information of those employees who did not have any job in the past."
        },
        {
            "sample_id": 3471,
            "gold_sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
            "gold_complexity": 10,
            "vt": "SELECT employees.employee_id, employees.salary FROM employees WHERE employees.manager_id = (SELECT employees.employee_id FROM employees WHERE first_name = 'Payam')",
            "ba": "The virtual table retrieves the employee ID and salary of employees who report directly to a specific manager identified by their first name, 'Payam'.",
            "question": "What are the employee ids of employees who report to Payam, and what are their salaries?"
        },
        {
            "sample_id": 3495,
            "gold_sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
            "gold_complexity": 16,
            "vt": "SELECT employees.first_name, employees.last_name, employees.hire_date FROM employees WHERE employees.department_id = (SELECT employees.department_id FROM employees WHERE first_name = \"Clara\") AND employees.first_name <> None.\"clara\"",
            "ba": "The virtual table retrieves the first and last names along with the hire date of employees from the 'employees' table who belong to the same department as a specific employee, while excluding that specific employee from the results.",
            "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?"
        },
        {
            "sample_id": 3412,
            "gold_sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
            "gold_complexity": 16,
            "vt": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.salary, employees.department_id FROM employees WHERE NOT employees.first_name LIKE '[placeholder-type:string]' ORDER BY employees.department_id",
            "ba": "The virtual table describes the first and last names, hire date, salary, and department ID of employees from the 'employees' table who do not have a specific first name. The placeholder in the WHERE clause represents the first name to be excluded from the results, and the results are ordered by department ID.",
            "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number."
        },
        {
            "sample_id": 3403,
            "gold_sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
            "gold_complexity": 8,
            "vt": "SELECT employees.first_name, employees.department_id FROM employees WHERE employees.last_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names and department identifiers of employees from the 'employees' table who have a specific last name. The placeholder in the WHERE clause represents the last name of the employee.",
            "question": "What are the first names and department numbers for employees with last name McEwen?"
        },
        {
            "sample_id": 3465,
            "gold_sql": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
            "gold_complexity": 8,
            "vt": "SELECT MIN(employees.salary), employees.department_id FROM employees GROUP BY employees.department_id",
            "ba": "The virtual table provides the minimum salary of employees grouped by their respective departments from the 'employees' table. The placeholder in the SELECT clause represents the minimum salary for each department, while the GROUP BY clause organizes the results by department identifier.",
            "question": "What is the minimum salary in each department?"
        },
        {
            "sample_id": 3515,
            "gold_sql": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
            "gold_complexity": 9,
            "vt": "SELECT departments.department_name, locations.city, locations.state_province FROM departments JOIN locations AS T2 ON T2.location_id = T1.location_id",
            "ba": "The virtual table describes the names of departments along with the corresponding city and state or province of their locations. It retrieves data from the 'departments' table and joins it with the 'locations' table based on the location identifier.",
            "question": "What are the department names, cities, and state provinces for each department?"
        },
        {
            "sample_id": 3488,
            "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
            "gold_complexity": 9,
            "vt": "SELECT * FROM employees WHERE employees.salary BETWEEN (SELECT MIN(employees.salary) FROM employees) AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all details of employees from the 'employees' table whose salary falls within a specified range. The range is defined by the minimum salary of all employees and a placeholder for the maximum salary.",
            "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500."
        },
        {
            "sample_id": 3447,
            "gold_sql": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "gold_complexity": 10,
            "vt": "SELECT employees.department_id, AVG(employees.salary) FROM employees WHERE employees.commission_pct <> None.\"null\" GROUP BY employees.department_id",
            "ba": "The virtual table calculates the average salary of employees from the 'employees' table, grouped by their department. It filters out employees who do not have a commission percentage, ensuring that only those with a valid commission are included in the average salary calculation.",
            "question": "What is the average salary of employees who have a commission percentage that is not null?"
        },
        {
            "sample_id": 3419,
            "gold_sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
            "gold_complexity": 10,
            "vt": "SELECT employees.first_name, employees.last_name, employees.salary FROM employees WHERE employees.commission_pct = None.\"null\"",
            "ba": "The virtual table describes the first and last names along with the salary of employees from the 'employees' table who do not receive any commission. The placeholder in the WHERE clause indicates that the commission percentage is null, meaning these employees do not have a commission assigned.",
            "question": "Return the full names and salaries of employees with null commissions."
        },
        {
            "sample_id": 3517,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
            "gold_complexity": 13,
            "vt": "SELECT employees.first_name, employees.last_name, employees.employee_id, countries.country_name FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
            "ba": "The virtual table describes the first and last names, employee ID, and country name of employees from the 'employees' table. It joins the 'departments' table to link employees to their respective departments, the 'locations' table to associate departments with their locations, and the 'countries' table to retrieve the country names where these locations are situated. The placeholders in the query represent the necessary identifiers for these relationships.",
            "question": "What the full names, ids of each employee and the name of the country they are in?"
        },
        {
            "sample_id": 3468,
            "gold_sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
            "gold_complexity": 9,
            "vt": "SELECT employees.employee_id FROM employees WHERE employees.salary > (SELECT AVG(employees.salary) FROM employees)",
            "ba": "The virtual table identifies employees from the 'employees' table whose salary is above the average salary of all employees. The query uses a subquery to calculate the average salary, and the main query filters employees based on this average.",
            "question": "Find the employee id for all employees who earn more than the average salary."
        },
        {
            "sample_id": 3410,
            "gold_sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
            "gold_complexity": 14,
            "vt": "SELECT employees.first_name, employees.last_name, employees.hire_date, employees.salary, employees.department_id FROM employees WHERE NOT employees.first_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the first and last names, hire date, salary, and department ID of employees from the 'employees' table who do not have a specific first name. The placeholder in the WHERE clause represents the first name that should be excluded from the results.",
            "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M."
        },
        {
            "sample_id": 3439,
            "gold_sql": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
            "gold_complexity": 9,
            "vt": "SELECT employees.email FROM employees WHERE employees.commission_pct = None.\"null\" AND employees.salary BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric] AND employees.department_id = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the email addresses of employees from the 'employees' table who do not receive a commission and whose salaries fall within a specified range. Additionally, it filters the results based on a specific department identifier.",
            "question": "What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?"
        },
        {
            "sample_id": 3504,
            "gold_sql": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT employees.department_id, SUM(employees.salary) FROM employees GROUP BY employees.department_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total salary of employees grouped by their department. It includes only those departments that have a minimum number of employees, as specified by a placeholder for numeric values.",
            "question": "display the department id and the total salary for those departments which contains at least two employees."
        },
        {
            "sample_id": 3499,
            "gold_sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
            "gold_complexity": 21,
            "vt": "SELECT employees.employee_id, employees.first_name, employees.last_name, employees.salary FROM employees WHERE employees.salary > (SELECT AVG(employees.salary) FROM employees) AND employees.department_id IN (SELECT employees.department_id FROM employees WHERE first_name LIKE '%J%')",
            "ba": "The virtual table displays the employee ID, first name, last name, and salary of employees from the 'employees' table who earn more than the average salary of all employees and belong to departments where at least one employee's first name contains the letter 'J'.",
            "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?"
        },
        {
            "sample_id": 3443,
            "gold_sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
            "gold_complexity": 8,
            "vt": "SELECT employees.department_id FROM employees GROUP BY employees.department_id HAVING COUNT(employees.commission_pct) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique department identifiers from the 'employees' table where the count of employees with a commission percentage exceeds a specified number. This allows for identifying departments that have a significant number of employees receiving commissions.",
            "question": "What are the department ids for which more than 10 employees had a commission?"
        },
        {
            "sample_id": 3461,
            "gold_sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
            "gold_complexity": 9,
            "vt": "SELECT jobs.job_title, AVG(employees.salary) FROM employees JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY jobs.job_title",
            "ba": "The virtual table summarizes the average salary of employees for each job title from the 'jobs' table. It joins the 'employees' table to associate each employee with their respective job title, and groups the results by job title to calculate the average salary for each distinct job title.",
            "question": "What is the average salary for each job title?"
        },
        {
            "sample_id": 3475,
            "gold_sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT * FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE employees.employee_id = departments.manager_id",
            "ba": "The virtual table retrieves distinct records of employees along with their corresponding department information. It joins the 'employees' table with the 'departments' table based on the department identifier. The query specifically filters for employees who are also managers of their respective departments, indicated by matching the employee's ID with the manager's ID in the departments table.",
            "question": "What is all the information regarding employees who are managers?"
        },
        {
            "sample_id": 3501,
            "gold_sql": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",
            "gold_complexity": 13,
            "vt": "SELECT employees.employee_id, employees.job_id FROM employees WHERE employees.salary < (SELECT MIN(employees.salary) FROM employees WHERE job_id = 'MK_MAN')",
            "ba": "The virtual table retrieves the employee IDs and job IDs from the 'employees' table for those employees whose salary is less than the minimum salary of a specific job identified by the job ID placeholder. The subquery calculates the minimum salary for the job with ID 'MK_MAN'.",
            "question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?"
        },
        {
            "sample_id": 3463,
            "gold_sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
            "gold_complexity": 13,
            "vt": "SELECT employees.first_name, employees.last_name FROM employees WHERE employees.salary > (SELECT employees.salary FROM employees WHERE employee_id = 163)",
            "ba": "The virtual table describes the first and last names of employees from the 'employees' table who earn more than a specific employee identified by their employee ID. The inner query retrieves the salary of that specific employee, and the outer query filters employees based on this salary comparison.",
            "question": "Provide the full names of employees earning more than the employee with id 163."
        },
        {
            "sample_id": 3469,
            "gold_sql": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
            "gold_complexity": 9,
            "vt": "SELECT employees.employee_id FROM employees WHERE employees.salary > (SELECT AVG(employees.salary) FROM employees)",
            "ba": "The virtual table identifies employees from the 'employees' table whose salary is above the average salary of all employees. The query uses a subquery to calculate the average salary, and the main query filters employees based on this average.",
            "question": "What are the employee ids for employees who make more than the average?"
        },
        {
            "sample_id": 3510,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
            "gold_complexity": 14,
            "vt": "SELECT employees.first_name, employees.last_name, departments.department_name, locations.city, locations.state_province FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id",
            "ba": "The virtual table describes the first and last names of employees along with their department names and the city and state/province of their locations. It combines data from the 'employees', 'departments', and 'locations' tables using JOIN operations to link the relevant identifiers.",
            "question": "display the first and last name, department, city, and state province for each employee."
        },
        {
            "sample_id": 3497,
            "gold_sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
            "gold_complexity": 15,
            "vt": "SELECT employees.employee_id, employees.first_name, employees.last_name FROM employees WHERE employees.department_id IN (SELECT employees.department_id FROM employees WHERE first_name LIKE '%T%')",
            "ba": "The virtual table describes the employee IDs, first names, and last names of employees from the 'employees' table who belong to departments where at least one employee has a first name containing the letter 'T'.",
            "question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?"
        },
        {
            "sample_id": 3489,
            "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
            "gold_complexity": 9,
            "vt": "SELECT * FROM employees WHERE employees.salary BETWEEN (SELECT MIN(employees.salary) FROM employees) AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all details of employees from the 'employees' table whose salary falls within a specified range. The range is defined by the minimum salary of all employees and a placeholder for the maximum salary.",
            "question": "What is all the information regarding employees with salaries above the minimum and under 2500?"
        },
        {
            "sample_id": 3405,
            "gold_sql": "SELECT * FROM employees WHERE department_id  =  \"null\"",
            "gold_complexity": 6,
            "vt": "SELECT * FROM employees WHERE employees.department_id = None.\"null\"",
            "ba": "The virtual table retrieves all information about employees from the 'employees' table who do not belong to any department, indicated by a null value in the department_id column.",
            "question": "What are all the employees without a department number?"
        },
        {
            "sample_id": 3402,
            "gold_sql": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
            "gold_complexity": 8,
            "vt": "SELECT employees.first_name, employees.department_id FROM employees WHERE employees.last_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names and department identifiers of employees from the 'employees' table who have a specific last name. The placeholder in the WHERE clause represents the last name of the employee being queried.",
            "question": "Display the first name, and department number for all employees whose last name is \"McEwen\"."
        },
        {
            "sample_id": 3484,
            "gold_sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
            "gold_complexity": 9,
            "vt": "SELECT employees.employee_id, jobs.job_title FROM employees JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE employees.department_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the employee IDs and job titles of employees from the 'employees' table who are associated with a specific department. The query joins the 'employees' table with the 'jobs' table to retrieve the job title corresponding to each employee's job ID. The placeholder in the WHERE clause represents the department's identifier.",
            "question": "display the employee ID and job name for all those jobs in department 80."
        },
        {
            "sample_id": 3408,
            "gold_sql": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
            "gold_complexity": 6,
            "vt": "SELECT employees.hire_date FROM employees WHERE NOT employees.first_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the hire dates of employees from the 'employees' table, excluding those whose first names match a specified pattern. The placeholder in the WHERE clause represents the first name pattern to be excluded.",
            "question": "when is the hire date for those employees whose first name does not containing the letter M?"
        },
        {
            "sample_id": 3508,
            "gold_sql": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
            "gold_complexity": 13,
            "vt": "SELECT employees.first_name, employees.last_name, employees.salary, employees.department_id, MAX(employees.salary) FROM employees GROUP BY employees.department_id",
            "ba": "The virtual table provides a summary of employees' first names, last names, salaries, and their respective department identifiers from the 'employees' table. It also calculates the maximum salary within each department. The grouping by department_id allows for aggregation of salary data, enabling the identification of the highest-paid employee in each department.",
            "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department."
        },
        {
            "sample_id": 3428,
            "gold_sql": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
            "gold_complexity": 6,
            "vt": "SELECT * FROM employees WHERE employees.hire_date < '[placeholder-type:string]'",
            "ba": "The virtual table retrieves all information about employees from the 'employees' table who were hired before a specific date. The placeholder in the WHERE clause represents the hire date to filter the results accordingly.",
            "question": "display all the details from Employees table for those employees who was hired before 2002-06-21."
        },
        {
            "sample_id": 3440,
            "gold_sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
            "gold_complexity": 8,
            "vt": "SELECT job_history.employee_id, MAX(job_history.end_date) FROM job_history GROUP BY job_history.employee_id",
            "ba": "The virtual table provides a summary of the most recent job end dates for each employee from the 'job_history' table. It selects the employee identifier and the maximum end date, grouping the results by employee to ensure that only the latest job end date is returned for each individual.",
            "question": "display the employee ID for each employee and the date on which he ended his previous job."
        },
        {
            "sample_id": 3496,
            "gold_sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
            "gold_complexity": 15,
            "vt": "SELECT employees.employee_id, employees.first_name, employees.last_name FROM employees WHERE employees.department_id IN (SELECT employees.department_id FROM employees WHERE first_name LIKE '%T%')",
            "ba": "The virtual table describes the employee IDs, first names, and last names of employees from the 'employees' table who belong to departments where at least one employee has a first name containing the letter 'T'. The inner query identifies the relevant department IDs based on the specified condition.",
            "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019."
        },
        {
            "sample_id": 3519,
            "gold_sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
            "gold_complexity": 9,
            "vt": "SELECT departments.department_name, COUNT(*) FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY departments.department_name",
            "ba": "The virtual table summarizes the number of employees in each department by joining the 'employees' table with the 'departments' table. It groups the results by department name to provide a count of employees per department.",
            "question": "What are the department names and how many employees work in each of them?"
        },
        {
            "sample_id": 3480,
            "gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT employees.department_id FROM employees GROUP BY employees.department_id, employees.manager_id HAVING COUNT(employees.employee_id) >= [placeholder-type:numeric]",
            "ba": "The virtual table identifies distinct department IDs from the 'employees' table, grouping them by department and manager. It filters the results to include only those departments that have a specified minimum number of employees.",
            "question": "What are the unique ids of those departments where any manager is managing 4 or more employees."
        },
        {
            "sample_id": 3518,
            "gold_sql": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
            "gold_complexity": 9,
            "vt": "SELECT departments.department_name, COUNT(*) FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY departments.department_name",
            "ba": "The virtual table summarizes the number of employees in each department by joining the 'employees' table with the 'departments' table. It groups the results by department name to provide a count of employees per department.",
            "question": "display the department name and number of employees in each of the department."
        },
        {
            "sample_id": 3426,
            "gold_sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
            "gold_complexity": 8,
            "vt": "SELECT employees.salary, employees.manager_id FROM employees WHERE employees.manager_id <> None.\"null\"",
            "ba": "The virtual table displays the salaries and manager identifiers of employees from the 'employees' table who have a valid manager assigned (i.e., their manager_id is not null). The placeholder in the WHERE clause indicates that we are filtering out employees without a manager.",
            "question": "Find the salary and manager number for those employees who is working under a manager."
        },
        {
            "sample_id": 3416,
            "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
            "gold_complexity": 9,
            "vt": "SELECT * FROM employees WHERE employees.salary BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric] AND employees.commission_pct <> None.\"null\" OR employees.department_id <> [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all employee records from the 'employees' table where the salary falls within a specified range and the commission percentage is not null, or the department ID does not match a specified value.",
            "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40."
        },
        {
            "sample_id": 3417,
            "gold_sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
            "gold_complexity": 9,
            "vt": "SELECT * FROM employees WHERE employees.salary BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric] AND employees.commission_pct <> None.\"null\" OR employees.department_id <> [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all employee records from the 'employees' table where the salary falls within a specified range and the commission percentage is not null, or the department ID does not match a specified value.",
            "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40."
        },
        {
            "sample_id": 3444,
            "gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT employees.department_id FROM employees GROUP BY employees.department_id, employees.manager_id HAVING COUNT(employees.employee_id) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct department IDs from the 'employees' table, grouping them by department and manager. It filters the results to include only those departments that have a count of employees greater than or equal to a specified number.",
            "question": "Find the ids of the departments where any manager is managing 4 or more employees."
        },
        {
            "sample_id": 3494,
            "gold_sql": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
            "gold_complexity": 16,
            "vt": "SELECT employees.first_name, employees.last_name, employees.hire_date FROM employees WHERE employees.department_id = (SELECT employees.department_id FROM employees WHERE first_name = \"Clara\") AND employees.first_name <> None.\"clara\"",
            "ba": "The virtual table retrieves the first and last names along with the hire date of employees from the 'employees' table who belong to the same department as a specific employee, while excluding that specific employee from the results.",
            "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara."
        },
        {
            "sample_id": 3398,
            "gold_sql": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
            "gold_complexity": 7,
            "vt": "SELECT employees.first_name, departments.department_name FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id",
            "ba": "The virtual table describes the first names of employees along with the names of their respective departments. It retrieves data from the 'employees' table and joins it with the 'departments' table based on the department identifier. This allows for a comprehensive view of which employee belongs to which department.",
            "question": "Display the first name and department name for each employee."
        },
        {
            "sample_id": 3456,
            "gold_sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
            "gold_complexity": 9,
            "vt": "SELECT departments.department_name, COUNT(*) FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY departments.department_name",
            "ba": "The virtual table summarizes the number of employees in each department by joining the 'employees' table with the 'departments' table. It groups the results by department name to provide a count of employees per department.",
            "question": "display the department name and number of employees in each of the department."
        },
        {
            "sample_id": 3401,
            "gold_sql": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
            "gold_complexity": 10,
            "vt": "SELECT employees.first_name, employees.last_name, employees.salary FROM employees WHERE employees.salary < [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names along with the salary of employees from the 'employees' table who earn less than a specified amount. The placeholder in the WHERE clause represents the salary threshold.",
            "question": "What are the full names and salaries for any employees earning less than 6000?"
        },
        {
            "sample_id": 3404,
            "gold_sql": "SELECT * FROM employees WHERE department_id  =  \"null\"",
            "gold_complexity": 6,
            "vt": "SELECT * FROM employees WHERE employees.department_id = None.\"null\"",
            "ba": "The virtual table retrieves all information about employees from the 'employees' table who do not belong to any department, indicated by a null value in the department_id column.",
            "question": "Return all the information for all employees without any department number."
        },
        {
            "sample_id": 3434,
            "gold_sql": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
            "gold_complexity": 6,
            "vt": "SELECT jobs.job_title FROM jobs WHERE jobs.min_salary > [placeholder-type:numeric]",
            "ba": "The virtual table describes the job titles from the 'jobs' table where the minimum salary exceeds a specified amount. The placeholder in the WHERE clause represents the minimum salary threshold.",
            "question": "display the job title of jobs which minimum salary is greater than 9000."
        },
        {
            "sample_id": 3477,
            "gold_sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
            "gold_complexity": 6,
            "vt": "SELECT * FROM departments WHERE departments.department_name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves all information from the 'departments' table for a specific department identified by its name. The placeholder in the WHERE clause represents the department's name that the user wants to filter by.",
            "question": "What is all the information about the Marketing department?"
        },
        {
            "sample_id": 3453,
            "gold_sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
            "gold_complexity": 8,
            "vt": "SELECT job_history.employee_id FROM job_history GROUP BY job_history.employee_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers of employees from the 'job_history' table who have held multiple jobs, as indicated by the count of their job history records being greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of job records an employee must have to be included in the results.",
            "question": "What are the employee ids for employees who have held two or more jobs?"
        },
        {
            "sample_id": 3431,
            "gold_sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
            "gold_complexity": 8,
            "vt": "SELECT * FROM employees WHERE employees.first_name LIKE '[placeholder-type:string]' OR employees.first_name LIKE '[placeholder-type:string]' ORDER BY employees.salary",
            "ba": "The virtual table retrieves all columns from the 'employees' table for employees whose first names match either of the two specified patterns. The results are ordered by the employees' salary.",
            "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?"
        },
        {
            "sample_id": 3513,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
            "gold_complexity": 12,
            "vt": "SELECT employees.first_name, employees.last_name, locations.city FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE employees.first_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the first and last names of employees along with the city of their department's location. It retrieves data from the 'employees' table, joining it with the 'departments' table to access department information, and further joining with the 'locations' table to get the city details. The placeholder in the WHERE clause allows for filtering employees based on their first name.",
            "question": "What are the full names and cities of employees who have the letter Z in their first names?"
        },
        {
            "sample_id": 3485,
            "gold_sql": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
            "gold_complexity": 9,
            "vt": "SELECT employees.employee_id, jobs.job_title FROM employees JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE employees.department_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the employee IDs and job titles of employees from the 'employees' table who are associated with a specific department. The query joins the 'employees' table with the 'jobs' table to retrieve the job title corresponding to each employee's job ID. The placeholder in the WHERE clause represents the department's identifier.",
            "question": "what are the employee ids and job titles for employees in department 80?"
        },
        {
            "sample_id": 3430,
            "gold_sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
            "gold_complexity": 8,
            "vt": "SELECT * FROM employees WHERE employees.first_name LIKE '[placeholder-type:string]' OR employees.first_name LIKE '[placeholder-type:string]' ORDER BY employees.salary",
            "ba": "The virtual table retrieves all information about employees from the 'employees' table whose first names match either of the specified patterns. The results are ordered by the employees' salary.",
            "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary."
        },
        {
            "sample_id": 3454,
            "gold_sql": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
            "gold_complexity": 9,
            "vt": "SELECT employees.employee_id, countries.country_name FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id",
            "ba": "The virtual table describes the employee IDs and their corresponding country names from the 'employees' table. It joins the 'departments' table to link employees to their respective departments, then joins the 'locations' table to find the location of each department, and finally joins the 'countries' table to retrieve the country names associated with those locations.",
            "question": "Find employee with ID and name of the country presently where (s)he is working."
        },
        {
            "sample_id": 3473,
            "gold_sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT departments.department_name FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id",
            "ba": "The virtual table lists the unique names of departments from the 'departments' table that employees belong to. It uses a JOIN operation to connect the 'employees' table with the 'departments' table based on the department identifier, ensuring that only distinct department names are returned.",
            "question": "What are the names of departments that have at least one employee."
        },
        {
            "sample_id": 3445,
            "gold_sql": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT employees.department_id FROM employees GROUP BY employees.department_id, employees.manager_id HAVING COUNT(employees.employee_id) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct department identifiers from the 'employees' table. It groups the results by department and manager identifiers, filtering to include only those departments that have a count of employees greater than or equal to a specified number.",
            "question": "What are department ids for departments with managers managing more than 3 employees?"
        },
        {
            "sample_id": 3486,
            "gold_sql": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
            "gold_complexity": 9,
            "vt": "SELECT employees.first_name, employees.job_id FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE departments.department_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names and job identifiers of employees from the 'employees' table who work in a specific department. The query joins the 'employees' table with the 'departments' table to filter results based on the department's name, represented by a placeholder.",
            "question": "What is the first name and job id for all employees in the Finance department?"
        },
        {
            "sample_id": 3460,
            "gold_sql": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
            "gold_complexity": 9,
            "vt": "SELECT jobs.job_title, AVG(employees.salary) FROM employees JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY jobs.job_title",
            "ba": "The virtual table provides the average salary of employees for each job title from the 'jobs' table. It joins the 'employees' table to associate each employee with their respective job title, and groups the results by job title to calculate the average salary for each distinct job title.",
            "question": "display job title and average salary of employees."
        },
        {
            "sample_id": 3498,
            "gold_sql": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
            "gold_complexity": 21,
            "vt": "SELECT employees.employee_id, employees.first_name, employees.last_name, employees.salary FROM employees WHERE employees.salary > (SELECT AVG(employees.salary) FROM employees) AND employees.department_id IN (SELECT employees.department_id FROM employees WHERE first_name LIKE '%J%')",
            "ba": "The virtual table displays the employee ID, first name, last name, and salary of employees from the 'employees' table who earn more than the average salary of all employees and belong to departments where at least one employee's first name contains the letter 'J'.",
            "question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name."
        },
        {
            "sample_id": 3441,
            "gold_sql": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
            "gold_complexity": 8,
            "vt": "SELECT job_history.employee_id, MAX(job_history.end_date) FROM job_history GROUP BY job_history.employee_id",
            "ba": "The virtual table provides a summary of the most recent job end dates for each employee from the 'job_history' table. It selects the employee identifier and the maximum end date, grouping the results by employee to ensure that only the latest job end date is returned for each individual.",
            "question": "What are the employee ids for each employee and final dates of employment at their last job?"
        },
        {
            "sample_id": 3483,
            "gold_sql": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
            "gold_complexity": 8,
            "vt": "SELECT employees.job_id FROM employees GROUP BY employees.job_id HAVING AVG(employees.salary) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the job identifiers from the 'employees' table, grouped by job ID, where the average salary of employees in each job exceeds a specified numeric threshold. The placeholder represents the minimum average salary that needs to be exceeded.",
            "question": "What are the job ids corresponding to jobs with average salary above 8000?"
        },
        {
            "sample_id": 3520,
            "gold_sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
            "gold_complexity": 12,
            "vt": "SELECT employees.first_name, employees.last_name, employees.salary FROM employees JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE locations.city = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first and last names along with the salary of employees from the 'employees' table who work in a specific city. It joins the 'departments' table to link employees to their respective departments and the 'locations' table to filter based on the city. The placeholder in the WHERE clause represents the name of the city.",
            "question": "display the full name (first and last name), and salary of those employees who working in any department located in London."
        }
    ],
    "program_share": [
        {
            "sample_id": 3736,
            "gold_sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(channel.share_in_percent) FROM channel WHERE channel.owner = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total market share percentage of channels owned by a specific owner from the 'channel' table. The placeholder in the WHERE clause represents the owner's name.",
            "question": "What is the total share (in percent) of all the channels owned by CCTV?"
        },
        {
            "sample_id": 3726,
            "gold_sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT channel.owner FROM channel ORDER BY channel.rating_in_percent LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the owners of channels from the 'channel' table, ordered by their viewer rating percentage. The placeholder in the LIMIT clause allows for specifying the number of channel owners to retrieve.",
            "question": "Show me the owner of the channel with the highest rating."
        },
        {
            "sample_id": 3725,
            "gold_sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT channel.owner FROM channel ORDER BY channel.rating_in_percent LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the owners of channels from the 'channel' table, sorted by their viewer rating percentage in descending order. The placeholder in the LIMIT clause allows the user to specify how many channel owners they want to retrieve.",
            "question": "What is the owner of the channel that has the highest rating ratio?"
        },
        {
            "sample_id": 3760,
            "gold_sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT program.name FROM program JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY broadcast.program_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of programs from the 'program' table that are associated with broadcasts. It joins the 'program' table with the 'broadcast' table to correlate programs with their broadcast instances. The results are grouped by program ID to ensure unique program names are returned, and they are ordered by the count of broadcasts for each program. The query limits the output to a specified number of programs using a numeric placeholder.",
            "question": "Which program is broadcast most frequently? Give me the program name."
        },
        {
            "sample_id": 3721,
            "gold_sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
            "gold_complexity": 6,
            "vt": "SELECT channel.name FROM channel WHERE channel.owner <> '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of channels from the 'channel' table that are not owned by a specific individual or organization. The placeholder in the WHERE clause represents the owner's name.",
            "question": "Find the names of channels that are not owned by CCTV."
        },
        {
            "sample_id": 3723,
            "gold_sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
            "gold_complexity": 6,
            "vt": "SELECT channel.name FROM channel ORDER BY channel.rating_in_percent",
            "ba": "The virtual table lists the names of channels from the 'channel' table, ordered by their viewer rating percentage. This allows users to see which channels have the highest ratings.",
            "question": "List all channel names ordered by their rating in percent from big to small."
        },
        {
            "sample_id": 3729,
            "gold_sql": "SELECT name FROM program ORDER BY launch",
            "gold_complexity": 6,
            "vt": "SELECT program.name FROM program ORDER BY program.launch",
            "ba": "The virtual table lists the names of programs from the 'program' table, ordered by their launch date. This allows users to see the programs in chronological order based on when they were launched.",
            "question": "list all the names of programs, ordering by launch time."
        },
        {
            "sample_id": 3744,
            "gold_sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE broadcast.time_of_day = '[placeholder-type:string]'",
            "ba": "The virtual table counts the distinct programs that are broadcasted at a specific time of day from the 'broadcast' table. The placeholder in the WHERE clause represents the time of day for which the count is being requested.",
            "question": "How many distinct programs are broadcast at \"Night\" time?"
        },
        {
            "sample_id": 3749,
            "gold_sql": "SELECT origin FROM program ORDER BY origin",
            "gold_complexity": 6,
            "vt": "SELECT program.origin FROM program ORDER BY program.origin",
            "ba": "The virtual table lists the origins of programs from the 'program' table, sorted by their origin. This allows users to see the different countries or regions where the programs originate from in an organized manner.",
            "question": "List all program origins in the alphabetical order."
        },
        {
            "sample_id": 3754,
            "gold_sql": "SELECT name FROM program WHERE origin != 'Beijing'",
            "gold_complexity": 6,
            "vt": "SELECT program.name FROM program WHERE program.origin <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of programs from the 'program' table that do not originate from a specific country or region. The placeholder in the WHERE clause represents the origin's name that is being excluded.",
            "question": "Which programs' origins are not \"Beijing\"? Give me the program names."
        },
        {
            "sample_id": 3758,
            "gold_sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
            "gold_complexity": 8,
            "vt": "SELECT SUM(channel.rating_in_percent), channel.owner FROM channel GROUP BY channel.owner",
            "ba": "The virtual table summarizes the total viewer ratings for each channel owner from the 'channel' table. It aggregates the viewer ratings by summing them up and groups the results by the owner of the channels.",
            "question": "What is the total rating of channel for each channel owner?"
        },
        {
            "sample_id": 3732,
            "gold_sql": "SELECT name ,  origin ,  OWNER FROM program",
            "gold_complexity": 8,
            "vt": "SELECT program.name, program.origin, program.owner FROM program",
            "ba": "The virtual table describes the names, origins, and owners of programs from the 'program' table.",
            "question": "What are the name, origin and owner of each program?"
        },
        {
            "sample_id": 3722,
            "gold_sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
            "gold_complexity": 6,
            "vt": "SELECT channel.name FROM channel WHERE channel.owner <> '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of channels from the 'channel' table that are not owned by a specific individual or organization. The placeholder in the WHERE clause represents the owner's name.",
            "question": "Which channels are not owned by CCTV? Give me the channel names."
        },
        {
            "sample_id": 3747,
            "gold_sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
            "gold_complexity": 9,
            "vt": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Night\"",
            "ba": "The virtual table identifies the owners of programs that are broadcasted in both the morning and night time slots. It uses an INTERSECT operation to find common owners from two separate queries, each filtering broadcasts by time of day.",
            "question": "find the program owners that have some programs in both morning and night time."
        },
        {
            "sample_id": 3727,
            "gold_sql": "SELECT count(*) FROM program",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM program",
            "ba": "The virtual table provides a count of all programs listed in the 'program' table. This count represents the total number of unique programs available in the database.",
            "question": "how many programs are there?"
        },
        {
            "sample_id": 3731,
            "gold_sql": "SELECT name ,  origin ,  OWNER FROM program",
            "gold_complexity": 8,
            "vt": "SELECT program.name, program.origin, program.owner FROM program",
            "ba": "The virtual table describes the names, origins, and owners of programs from the 'program' table.",
            "question": "List the name, origin and owner of each program."
        },
        {
            "sample_id": 3733,
            "gold_sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT program.name FROM program ORDER BY program.launch LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of programs from the 'program' table, ordered by their launch date. The placeholder in the LIMIT clause indicates the maximum number of program names to return.",
            "question": "find the name of the program that was launched most recently."
        },
        {
            "sample_id": 3748,
            "gold_sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
            "gold_complexity": 9,
            "vt": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Night\"",
            "ba": "The virtual table identifies the owners of programs that are broadcasted in both the morning and night time slots. It uses an INTERSECT operation to find common owners from two separate queries, each filtering broadcasts by time of day.",
            "question": "Who are the owners of the programs that broadcast both in the morning and at night?"
        },
        {
            "sample_id": 3735,
            "gold_sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(channel.share_in_percent) FROM channel WHERE channel.owner = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total market share percentage of channels owned by a specific owner from the 'channel' table. The placeholder in the WHERE clause represents the owner's name.",
            "question": "find the total percentage share of all channels owned by CCTV."
        },
        {
            "sample_id": 3746,
            "gold_sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
            "gold_complexity": 8,
            "vt": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = \"Morning\"",
            "ba": "The virtual table lists the names of programs from the 'program' table that are not broadcasted in the morning. It uses an EXCEPT clause to exclude those programs that have a corresponding entry in the 'broadcast' table for the morning time slot.",
            "question": "Which programs are never broadcasted in the morning? Give me the names of the programs."
        },
        {
            "sample_id": 3753,
            "gold_sql": "SELECT name FROM program WHERE origin != 'Beijing'",
            "gold_complexity": 6,
            "vt": "SELECT program.name FROM program WHERE program.origin <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of programs from the 'program' table that do not originate from a specified country or region. The placeholder in the WHERE clause represents the origin's name that is being excluded.",
            "question": "find the names of programs whose origin is not in Beijing."
        },
        {
            "sample_id": 3734,
            "gold_sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT program.name FROM program ORDER BY program.launch LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of programs from the 'program' table, ordered by their launch date. The placeholder in the LIMIT clause allows the user to specify the maximum number of program names to retrieve.",
            "question": "Which program was launched most recently? Return the program name."
        },
        {
            "sample_id": 3738,
            "gold_sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
            "gold_complexity": 7,
            "vt": "SELECT channel.name FROM channel JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE broadcast.time_of_day = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of channels from the 'channel' table that are broadcasting programs at a specific time of day. The placeholder in the WHERE clause represents the time of day for which the channel names are being queried.",
            "question": "Which channels are broadcast in the morning? Give me the channel names."
        },
        {
            "sample_id": 3757,
            "gold_sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
            "gold_complexity": 8,
            "vt": "SELECT SUM(channel.rating_in_percent), channel.owner FROM channel GROUP BY channel.owner",
            "ba": "The virtual table summarizes the total viewer ratings for each channel owner from the 'channel' table. It aggregates the viewer ratings by summing them up and groups the results by the owner of the channels.",
            "question": "Find the total rating ratio for each channel owner."
        }
    ],
    "party_people": [
        {
            "sample_id": 2070,
            "gold_sql": "SELECT count(*) FROM party_events",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM party_events",
            "ba": "The virtual table provides a count of all party events recorded in the 'party_events' table. This count gives an overview of the total number of events organized by various political parties.",
            "question": "Count the number of party events."
        },
        {
            "sample_id": 2080,
            "gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT party_events.event_name FROM party_events GROUP BY party_events.event_name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of events organized by political parties from the 'party_events' table. It groups the events by their names and filters to show only those events that have occurred more than a specified number of times, represented by a placeholder for numeric values.",
            "question": "Which event names were used more than twice for party events?"
        },
        {
            "sample_id": 2054,
            "gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT party.minister FROM party ORDER BY party.left_office LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the identifiers of ministers from the 'party' table, sorted by the date they left office. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Which minister left office the latest?"
        },
        {
            "sample_id": 2041,
            "gold_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT region.region_name FROM region ORDER BY region.label",
            "ba": "The virtual table lists the unique names of regions from the 'region' table, ordered by their associated labels.",
            "question": "Show all distinct region names ordered by their labels."
        },
        {
            "sample_id": 2079,
            "gold_sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT party_events.event_name FROM party_events GROUP BY party_events.event_name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of events organized by political parties from the 'party_events' table. It groups the events by their names and filters to show only those events that have been organized more than a specified number of times, represented by a placeholder for numeric values.",
            "question": "find the event names that have more than 2 records."
        },
        {
            "sample_id": 2072,
            "gold_sql": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
            "gold_complexity": 9,
            "vt": "SELECT party.party_name, COUNT(*) FROM party_events JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY party_events.party_id",
            "ba": "The virtual table summarizes the number of events organized by each political party from the 'party_events' table. It joins the 'party' table to retrieve the party names and groups the results by party ID to count the total events for each party.",
            "question": "How many events are there for each party?"
        },
        {
            "sample_id": 2077,
            "gold_sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT member.member_name FROM member JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY party_events.member_in_charge_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of members who are in charge of organizing party events. It joins the 'member' table with the 'party_events' table to associate members with their respective events. The results are grouped by the member's ID to count the number of events each member is responsible for, and the output is ordered by this count. A placeholder is included to limit the number of results returned.",
            "question": "What is the name of member in charge of greatest number of events?"
        },
        {
            "sample_id": 2046,
            "gold_sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
            "gold_complexity": 10,
            "vt": "SELECT party.minister, party.took_office, party.left_office FROM party ORDER BY party.left_office",
            "ba": "The virtual table displays the minister, the date when the party took office, and the date when the party left office from the 'party' table. The results are ordered by the date the party left office.",
            "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?"
        },
        {
            "sample_id": 2068,
            "gold_sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"",
            "gold_complexity": 7,
            "vt": "SELECT member.member_name FROM member JOIN party AS T2 ON T1.party_id = T2.party_id WHERE party.party_name <> None.\"progress party\"",
            "ba": "The virtual table describes the names of members from the 'member' table who are associated with political parties that are not named 'progress party'. The query uses a JOIN to connect the 'member' table with the 'party' table based on the party identifier, and it filters out any members belonging to the specified party name.",
            "question": "Which member names corresponding to members who are not in the Progress Party?"
        },
        {
            "sample_id": 2066,
            "gold_sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
            "gold_complexity": 7,
            "vt": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
            "ba": "The virtual table retrieves the names of members who belong to both specified political parties, identified by their unique party IDs. The use of INTERSECT ensures that only members who are part of both parties are included in the result.",
            "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?"
        },
        {
            "sample_id": 2060,
            "gold_sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT party.party_name FROM member JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY member.party_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of political parties from the 'party' table, grouped by the party each member belongs to. It counts the number of members in each party and orders the results based on this count, limiting the output to a specified number of parties.",
            "question": "Return the name of the party with the most members."
        },
        {
            "sample_id": 2069,
            "gold_sql": "SELECT count(*) FROM party_events",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM party_events",
            "ba": "The virtual table provides a count of all party events recorded in the 'party_events' table. This count gives an overview of the total number of events organized by various political parties.",
            "question": "How many party events do we have?"
        },
        {
            "sample_id": 2051,
            "gold_sql": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC",
            "gold_complexity": 8,
            "vt": "SELECT party.minister, party.party_name FROM party ORDER BY party.took_office",
            "ba": "The virtual table lists the ministers and their corresponding political party names from the 'party' table, ordered by the date they took office. This allows users to see which ministers are associated with which parties and the order in which they assumed office.",
            "question": "Show all ministers and parties they belong to in descending order of the time they took office."
        },
        {
            "sample_id": 2065,
            "gold_sql": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1",
            "gold_complexity": 7,
            "vt": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
            "ba": "The virtual table identifies members who belong to both specified political parties by using an INTERSECT operation. It retrieves the names of members from the 'member' table where the 'party_id' matches the first specified party and intersects it with the names of members from the same table where the 'party_id' matches the second specified party.",
            "question": "Show the member names which are in both the party with id 3 and the party with id 1."
        },
        {
            "sample_id": 2042,
            "gold_sql": "SELECT DISTINCT region_name FROM region ORDER BY Label",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT region.region_name FROM region ORDER BY region.label",
            "ba": "The virtual table lists the unique names of regions from the 'region' table, ordered by their associated labels.",
            "question": "What are the different region names, ordered by labels?"
        },
        {
            "sample_id": 2074,
            "gold_sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
            "gold_complexity": 6,
            "vt": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id",
            "ba": "The virtual table lists the names of members from the 'member' table who are not in charge of any events organized by their respective political parties. The query uses an EXCEPT clause to exclude members who are responsible for any party events, ensuring that only those members who are not involved in event management are displayed.",
            "question": "What are the names of members who are not in charge of any events?"
        },
        {
            "sample_id": 2076,
            "gold_sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT party.party_name FROM party_events JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY party_events.party_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of political parties that have organized a number of events equal to or greater than a specified threshold. It joins the 'party_events' table with the 'party' table to associate each event with its corresponding party, and groups the results by party ID to count the number of events per party.",
            "question": "Return the names of parties that have two or more events."
        },
        {
            "sample_id": 2061,
            "gold_sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id",
            "gold_complexity": 7,
            "vt": "SELECT party.party_name, region.region_name FROM party JOIN region AS T2 ON T1.region_id = T2.region_id",
            "ba": "The virtual table describes the names of political parties along with the corresponding regions they operate in. The query joins the 'party' table with the 'region' table based on the region identifier, allowing us to retrieve the party names and their associated region names.",
            "question": "Show all party names and their region names."
        },
        {
            "sample_id": 2053,
            "gold_sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT party.minister FROM party ORDER BY party.left_office LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the identifiers of ministers from the 'party' table, sorted by the date they left office. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Return the minister who left office at the latest time."
        },
        {
            "sample_id": 2045,
            "gold_sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office",
            "gold_complexity": 10,
            "vt": "SELECT party.minister, party.took_office, party.left_office FROM party ORDER BY party.left_office",
            "ba": "The virtual table displays the minister, the date when the party took office, and the date when the party left office from the 'party' table. The results are ordered by the date the party left office.",
            "question": "Show the ministers and the time they took and left office, listed by the time they left office."
        },
        {
            "sample_id": 2063,
            "gold_sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
            "gold_complexity": 10,
            "vt": "SELECT party.party_name FROM party WHERE NOT party.party_id IN (SELECT party.party_id FROM Member)",
            "ba": "The virtual table lists the names of political parties from the 'party' table that do not have any associated members in the 'member' table. The query uses a subquery to filter out parties that have members by checking if their party_id exists in the 'member' table.",
            "question": "Show names of parties that does not have any members."
        },
        {
            "sample_id": 2081,
            "gold_sql": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM region JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE region.region_name = None.\"united kingdom\" AND party_events.event_name = None.\"annaual meeting\"",
            "ba": "The virtual table counts the number of party events that are associated with a specific region and a specific event name. It joins the 'region', 'party', and 'party_events' tables to filter the results based on the region's name and the event's name.",
            "question": "How many Annual Meeting events happened in the United Kingdom region?"
        },
        {
            "sample_id": 2049,
            "gold_sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
            "gold_complexity": 6,
            "vt": "SELECT party.minister FROM party WHERE party.party_name <> '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the identifiers of ministers from the 'party' table for all political parties except the one specified by the placeholder. The placeholder in the WHERE clause represents the name of the political party that should be excluded from the results.",
            "question": "Show all ministers who do not belong to Progress Party."
        },
        {
            "sample_id": 2062,
            "gold_sql": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id",
            "gold_complexity": 7,
            "vt": "SELECT party.party_name, region.region_name FROM party JOIN region AS T2 ON T1.region_id = T2.region_id",
            "ba": "The virtual table describes the names of political parties along with the corresponding regions they operate in. The query joins the 'party' table with the 'region' table based on the region identifier, allowing us to retrieve the party names and their associated region names.",
            "question": "What are the names of parties and their respective regions?"
        },
        {
            "sample_id": 2056,
            "gold_sql": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
            "gold_complexity": 7,
            "vt": "SELECT member.member_name, party.party_name FROM member JOIN party AS T2 ON T1.party_id = T2.party_id",
            "ba": "The virtual table describes the names of members and their associated political parties by joining the 'member' and 'party' tables based on the party identifier.",
            "question": "What are the names of members and their corresponding parties?"
        },
        {
            "sample_id": 2059,
            "gold_sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT party.party_name FROM member JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY member.party_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of political parties from the 'party' table, grouped by the party each member belongs to. It uses a join between the 'member' and 'party' tables to associate members with their respective parties. The results are ordered by the count of members in each party, and a limit is applied to restrict the number of returned party names based on a specified numeric value.",
            "question": "What is the name of party with most number of members?"
        }
    ],
    "browser_web": [
        {
            "sample_id": 1841,
            "gold_sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
            "gold_complexity": 6,
            "vt": "SELECT web_client_accelerator.name FROM web_client_accelerator WHERE web_client_accelerator.name LIKE None.\"%opera%\"",
            "ba": "The virtual table describes the names of web client accelerators from the 'web_client_accelerator' table that have names similar to a specified pattern. The placeholder in the LIKE clause represents the pattern to match against the names of the web client accelerators.",
            "question": "Which accelerator name contains substring \"Opera\"?"
        },
        {
            "sample_id": 1828,
            "gold_sql": "SELECT id ,  name ,  market_share FROM browser",
            "gold_complexity": 8,
            "vt": "SELECT browser.id, browser.name, browser.market_share FROM browser",
            "ba": "The virtual table describes the identifiers, names, and market shares of browsers from the 'browser' table.",
            "question": "List the ids, names and market shares of all browsers."
        },
        {
            "sample_id": 1830,
            "gold_sql": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
            "gold_complexity": 8,
            "vt": "SELECT browser.id, browser.market_share FROM browser WHERE browser.name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the identifiers and market share of browsers from the 'browser' table that match a specific browser name. The placeholder in the WHERE clause represents the name of the browser being queried.",
            "question": "What is the id and market share of the browser Safari?"
        },
        {
            "sample_id": 1832,
            "gold_sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
            "gold_complexity": 10,
            "vt": "SELECT browser.name FROM browser JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE web_client_accelerator.name = '[placeholder-type:string]' AND accelerator_compatible_browser.compatible_since_year > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of browsers that are compatible with a specific web client accelerator and have been compatible since a certain year. The placeholders in the WHERE clause represent the name of the web client accelerator and the year since compatibility.",
            "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?"
        },
        {
            "sample_id": 1835,
            "gold_sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'",
            "gold_complexity": 9,
            "vt": "SELECT accelerator_compatible_browser.compatible_since_year FROM accelerator_compatible_browser JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE web_client_accelerator.name = '[placeholder-type:string]' AND browser.name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the year when a specific browser became compatible with a specified web client accelerator. It joins the 'accelerator_compatible_browser' table with the 'browser' and 'web_client_accelerator' tables to filter results based on the names of the web client accelerator and the browser.",
            "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?"
        },
        {
            "sample_id": 1836,
            "gold_sql": "SELECT count(DISTINCT client) FROM web_client_accelerator",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT client) FROM web_client_accelerator",
            "ba": "The virtual table counts the distinct types of clients associated with web client accelerators from the 'web_client_accelerator' table.",
            "question": "How many different kinds of clients are supported by the web clients accelerators?"
        },
        {
            "sample_id": 1827,
            "gold_sql": "SELECT name FROM browser ORDER BY market_share DESC",
            "gold_complexity": 6,
            "vt": "SELECT browser.name FROM browser ORDER BY browser.market_share",
            "ba": "The virtual table lists the names of browsers from the 'browser' table, ordered by their market share percentage.",
            "question": "List the name of browsers in descending order by market share."
        },
        {
            "sample_id": 1840,
            "gold_sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
            "gold_complexity": 11,
            "vt": "SELECT name, operating_system FROM web_client_accelerator EXCEPT SELECT T1.name, T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'",
            "ba": "The virtual table provides a list of web client accelerators along with their operating systems that are not compatible with the 'Opera' browser. It does this by selecting the names and operating systems from the 'web_client_accelerator' table and excluding those that are found in a join with the 'accelerator_compatible_browser' and 'browser' tables where the browser name is 'Opera'.",
            "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'."
        },
        {
            "sample_id": 1833,
            "gold_sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT web_client_accelerator.id, web_client_accelerator.name FROM web_client_accelerator JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY web_client_accelerator.id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers and names of web client accelerators from the 'web_client_accelerator' table that are compatible with a certain number of browsers. The query joins the 'web_client_accelerator' table with the 'accelerator_compatible_browser' table to filter accelerators based on their compatibility with browsers, using a placeholder to specify the minimum count of compatible browsers.",
            "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?"
        },
        {
            "sample_id": 1826,
            "gold_sql": "SELECT count(*) FROM browser WHERE market_share  >=  5",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM browser WHERE browser.market_share >= [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of browsers from the 'browser' table that have a market share greater than or equal to a specified percentage. The placeholder in the WHERE clause represents the minimum market share percentage.",
            "question": "How many main stream browsers whose market share is at least 5 exist?"
        }
    ],
    "sports_competition": [
        {
            "sample_id": 3344,
            "gold_sql": "SELECT name FROM club ORDER BY Start_year ASC",
            "gold_complexity": 6,
            "vt": "SELECT club.name FROM club ORDER BY club.start_year",
            "ba": "The virtual table lists the names of clubs from the 'club' table, ordered by the year they were established.",
            "question": "List all club names in ascending order of start year."
        },
        {
            "sample_id": 3359,
            "gold_sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",
            "gold_complexity": 8,
            "vt": "SELECT competition.competition_type, COUNT(*) FROM competition GROUP BY competition.competition_type",
            "ba": "The virtual table summarizes the number of competitions by their type from the 'competition' table. It groups the results by the 'competition_type' to provide a count of how many competitions fall under each type.",
            "question": "What are the types of competition and number of competitions for that type?"
        },
        {
            "sample_id": 3347,
            "gold_sql": "SELECT name FROM club ORDER BY name DESC",
            "gold_complexity": 6,
            "vt": "SELECT club.name FROM club ORDER BY club.name",
            "ba": "The virtual table lists the names of all clubs from the 'club' table, sorted in alphabetical order.",
            "question": "What are the names of all the clubs ordered in descending alphabetical order?"
        },
        {
            "sample_id": 3332,
            "gold_sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT club.region FROM club ORDER BY club.region",
            "ba": "The virtual table lists the unique geographical regions where clubs are located, sorted in order of the region names.",
            "question": "List the distinct region of clubs in ascending alphabetical order."
        },
        {
            "sample_id": 3377,
            "gold_sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT competition.country FROM competition WHERE competition.competition_type = '[placeholder-type:string]' GROUP BY competition.country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the countries where competitions of a specific type were held, grouping the results by country and ordering them by the number of competitions in descending order. The placeholders allow users to specify the type of competition and limit the number of results returned.",
            "question": "what is the name of the country that participated in the most tournament competitions?"
        },
        {
            "sample_id": 3335,
            "gold_sql": "SELECT avg(Gold) FROM club_rank",
            "gold_complexity": 4,
            "vt": "SELECT AVG(club_rank.gold) FROM club_rank",
            "ba": "The virtual table calculates the average number of gold medals won by clubs from the 'club_rank' table. This provides insight into the overall performance of clubs in terms of their gold medal achievements.",
            "question": "What is the average number of gold medals for a club?"
        },
        {
            "sample_id": 3364,
            "gold_sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
            "gold_complexity": 10,
            "vt": "SELECT club.name FROM club WHERE NOT club.club_id IN (SELECT club.club_id FROM player)",
            "ba": "The virtual table lists the names of clubs from the 'club' table that do not have any associated players in the 'player' table. The subquery identifies all club IDs that have players, and the main query filters out these clubs from the results.",
            "question": "List the names of clubs that do not have any players."
        },
        {
            "sample_id": 3375,
            "gold_sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), player.position FROM player WHERE player.points < [placeholder-type:numeric] GROUP BY player.position",
            "ba": "The virtual table counts the number of players grouped by their playing position from the 'player' table, where the total points scored by the players are less than a specified value. The placeholder in the WHERE clause represents the threshold for points.",
            "question": "What is the number of players who have points less than 30 for each position?"
        },
        {
            "sample_id": 3339,
            "gold_sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT competition.year FROM competition WHERE competition.competition_type <> None.\"tournament\"",
            "ba": "The virtual table lists the distinct years in which competitions were held, excluding those that are classified as tournaments. The placeholder in the WHERE clause indicates that only non-tournament competition types should be considered.",
            "question": "What are the different years for all competitions that are not of type equal to tournament?"
        },
        {
            "sample_id": 3331,
            "gold_sql": "SELECT count(*) FROM club",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM club",
            "ba": "The virtual table counts the total number of clubs present in the 'club' table.",
            "question": "What is the total number of clubs?"
        },
        {
            "sample_id": 3333,
            "gold_sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT club.region FROM club ORDER BY club.region",
            "ba": "The virtual table lists the unique geographical regions where clubs are located, sorted in order of the region names.",
            "question": "What are the different regions of clubs in ascending alphabetical order?"
        },
        {
            "sample_id": 3351,
            "gold_sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
            "gold_complexity": 7,
            "vt": "SELECT club.name FROM club JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE player.position = None.\"right wing\"",
            "ba": "The virtual table lists the names of clubs from the 'club' table that have players in a specific position. The query joins the 'club' table with the 'player' table to filter clubs based on the player's position, which is specified using a placeholder.",
            "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?"
        },
        {
            "sample_id": 3352,
            "gold_sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(player.points) FROM club JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE club.name = None.\"aib\"",
            "ba": "The virtual table calculates the average points scored by players from a specific club. It joins the 'club' table with the 'player' table based on the club identifier, filtering for a particular club name.",
            "question": "What is the average points of players from club with name \"AIB\"."
        },
        {
            "sample_id": 3355,
            "gold_sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION",
            "gold_complexity": 8,
            "vt": "SELECT player.position, AVG(player.points) FROM player GROUP BY player.position",
            "ba": "The virtual table provides the average points scored by players, categorized by their playing positions. It aggregates data from the 'player' table, grouping the results based on the 'position' column and calculating the average of the 'points' column for each position.",
            "question": "For each position, what is the average number of points for players in that position?"
        },
        {
            "sample_id": 3379,
            "gold_sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'",
            "gold_complexity": 7,
            "vt": "SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament'",
            "ba": "The virtual table identifies countries that have hosted both friendly matches and tournaments. It does this by selecting the country from the 'competition' table where the competition type is 'Friendly' and intersecting it with the selection of countries where the competition type is 'Tournament'.",
            "question": "What are the countries that participated in both friendly and tournament type competitions?"
        },
        {
            "sample_id": 3349,
            "gold_sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
            "gold_complexity": 7,
            "vt": "SELECT club.name, player.player_id FROM club JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
            "ba": "The virtual table describes the names of clubs along with the unique identifiers of players associated with those clubs. It retrieves data from the 'club' table and joins it with the 'player' table based on the club's identifier.",
            "question": "What are the names and players of all the clubs?"
        },
        {
            "sample_id": 3343,
            "gold_sql": "SELECT count(*) FROM club_rank WHERE Total  <  10",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM club_rank WHERE club_rank.total < [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of clubs from the 'club_rank' table that have a total medal count less than a specified value. The placeholder in the WHERE clause represents the numeric threshold for total medals.",
            "question": "What is the total number of clubs that have less than 10 medals in total?"
        },
        {
            "sample_id": 3356,
            "gold_sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
            "gold_complexity": 8,
            "vt": "SELECT player.position FROM player GROUP BY player.name HAVING AVG(player.points) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the playing positions of players from the 'player' table who have an average score of points greater than or equal to a specified numeric value. The query groups the results by player names to calculate the average points for each player.",
            "question": "List the position of players with average number of points scored by players of that position bigger than 20."
        },
        {
            "sample_id": 3334,
            "gold_sql": "SELECT avg(Gold) FROM club_rank",
            "gold_complexity": 4,
            "vt": "SELECT AVG(club_rank.gold) FROM club_rank",
            "ba": "The virtual table calculates the average number of gold medals won by clubs from the 'club_rank' table.",
            "question": "What is the average number of gold medals for clubs?"
        },
        {
            "sample_id": 3336,
            "gold_sql": "SELECT Competition_type ,  Country FROM competition",
            "gold_complexity": 6,
            "vt": "SELECT competition.competition_type, competition.country FROM competition",
            "ba": "The virtual table describes the types of competitions and the countries where they are held from the 'competition' table.",
            "question": "What are the types and countries of competitions?"
        },
        {
            "sample_id": 3354,
            "gold_sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION",
            "gold_complexity": 8,
            "vt": "SELECT player.position, AVG(player.points) FROM player GROUP BY player.position",
            "ba": "The virtual table provides the average points scored by players, categorized by their playing positions. It aggregates data from the 'player' table, grouping the results based on the 'position' column and calculating the average of the 'points' column for each position.",
            "question": "List the position of players and the average number of points of players of each position."
        },
        {
            "sample_id": 3362,
            "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
            "gold_complexity": 8,
            "vt": "SELECT competition.competition_type FROM competition GROUP BY competition.competition_type HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the types of competitions from the 'competition' table that have a count of occurrences less than or equal to a specified number. The placeholder in the HAVING clause represents the maximum count of competitions for each type.",
            "question": "List the types of competition that have at most five competitions of that type."
        },
        {
            "sample_id": 3345,
            "gold_sql": "SELECT name FROM club ORDER BY Start_year ASC",
            "gold_complexity": 6,
            "vt": "SELECT club.name FROM club ORDER BY club.start_year",
            "ba": "The virtual table lists the names of clubs from the 'club' table, ordered by the year they were established.",
            "question": "What are the names of all the clubs starting with the oldest?"
        },
        {
            "sample_id": 3358,
            "gold_sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type",
            "gold_complexity": 8,
            "vt": "SELECT competition.competition_type, COUNT(*) FROM competition GROUP BY competition.competition_type",
            "ba": "The virtual table summarizes the number of competitions by their type from the 'competition' table. It groups the results based on the 'competition_type' to provide a count of how many competitions fall under each type.",
            "question": "List the types of competition and the number of competitions of each type."
        },
        {
            "sample_id": 3363,
            "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5",
            "gold_complexity": 8,
            "vt": "SELECT competition.competition_type FROM competition GROUP BY competition.competition_type HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the types of competitions from the 'competition' table that have a count of occurrences less than or equal to a specified number. The placeholder in the HAVING clause represents the maximum count of competitions for each type.",
            "question": "What are the types of competition that have most 5 competitions for that type?"
        },
        {
            "sample_id": 3369,
            "gold_sql": "SELECT sum(Points) FROM player",
            "gold_complexity": 4,
            "vt": "SELECT SUM(player.points) FROM player",
            "ba": "The virtual table calculates the total points scored by all players from the 'player' table. The query uses the SUM function to aggregate the 'points' column, which represents the total points scored by each player.",
            "question": "What is the total number of points for all players?"
        },
        {
            "sample_id": 3357,
            "gold_sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
            "gold_complexity": 8,
            "vt": "SELECT player.position FROM player GROUP BY player.name HAVING AVG(player.points) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the playing positions of players from the 'player' table who have an average score of points greater than or equal to a specified numeric value. The results are grouped by player names to ensure that the average is calculated for each individual player.",
            "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
        },
        {
            "sample_id": 3361,
            "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT competition.competition_type FROM competition GROUP BY competition.competition_type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of distinct competition types from the 'competition' table, grouped by their type and ordered by the count of occurrences. The placeholder in the LIMIT clause allows the user to specify the maximum number of competition types to retrieve.",
            "question": "What is the most common competition type?"
        },
        {
            "sample_id": 3360,
            "gold_sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT competition.competition_type FROM competition GROUP BY competition.competition_type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique competition types from the 'competition' table, grouped by their type and ordered by the count of occurrences. The placeholder in the LIMIT clause allows the user to specify the maximum number of competition types to retrieve.",
            "question": "List the most common type of competition."
        },
        {
            "sample_id": 3365,
            "gold_sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
            "gold_complexity": 10,
            "vt": "SELECT club.name FROM club WHERE NOT club.club_id IN (SELECT club.club_id FROM player)",
            "ba": "The virtual table lists the names of clubs from the 'club' table that do not have any associated players in the 'player' table. The subquery checks for club IDs in the 'player' table, and the main query filters out those clubs from the results.",
            "question": "What are the names of all clubs that do not have any players?"
        },
        {
            "sample_id": 3341,
            "gold_sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
            "gold_complexity": 5,
            "vt": "SELECT MAX(club_rank.silver), MIN(club_rank.silver) FROM club_rank",
            "ba": "The virtual table provides the maximum and minimum number of silver medals won by clubs from the 'club_rank' table. The placeholders represent the aggregated values of silver medals across all clubs.",
            "question": "What are the maximum and minimum number of silver medals for all the clubs?"
        }
    ],
    "tracking_share_transactions": [
        {
            "sample_id": 5851,
            "gold_sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100",
            "gold_complexity": 7,
            "vt": "SELECT investors.investor_details FROM investors JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE transactions.share_count > [placeholder-type:numeric]",
            "ba": "The virtual table describes the detailed information of investors from the 'investors' table who have made transactions involving a specific number of shares. The placeholder in the WHERE clause represents the minimum share count for filtering the transactions.",
            "question": "Show details of all investors if they make any transaction with share count greater than 100."
        },
        {
            "sample_id": 5841,
            "gold_sql": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",
            "gold_complexity": 6,
            "vt": "SELECT transactions.date_of_transaction, transactions.share_count FROM transactions",
            "ba": "The virtual table provides the date and share count of transactions from the 'transactions' table. The placeholders allow for filtering or additional conditions to be applied later.",
            "question": "Show all date and share count of transactions."
        },
        {
            "sample_id": 5845,
            "gold_sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"",
            "gold_complexity": 6,
            "vt": "SELECT AVG(transactions.amount_of_transaction) FROM transactions WHERE transactions.transaction_type_code = None.\"sale\"",
            "ba": "The virtual table calculates the average amount of transactions from the 'transactions' table where the transaction type is specifically a sale. The placeholder in the WHERE clause represents the transaction type code for sales.",
            "question": "Show the average amount of transactions with type code \"SALE\"."
        },
        {
            "sample_id": 5866,
            "gold_sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id",
            "gold_complexity": 10,
            "vt": "SELECT transactions.investor_id, COUNT(*) FROM transactions WHERE transactions.transaction_type_code = None.\"sale\" GROUP BY transactions.investor_id",
            "ba": "The virtual table summarizes the number of sales transactions for each investor from the 'transactions' table. It groups the results by the investor's identifier and counts the total number of transactions that are classified as sales.",
            "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0."
        },
        {
            "sample_id": 5871,
            "gold_sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT transactions.investor_id, investors.investor_details FROM investors JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY transactions.investor_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of investors and their details from the 'investors' table, along with the number of transactions associated with each investor. It uses a JOIN operation to link the 'investors' table with the 'transactions' table based on the investor's ID. The results are grouped by investor ID to aggregate the transaction counts, and they are ordered by the count of transactions in descending order. The LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Show the id and details of the investor that has the largest number of transactions."
        },
        {
            "sample_id": 5862,
            "gold_sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
            "gold_complexity": 10,
            "vt": "SELECT transactions.investor_id, AVG(transactions.share_count) FROM transactions GROUP BY transactions.investor_id ORDER BY AVG(transactions.share_count)",
            "ba": "The virtual table provides a summary of the average number of shares involved in transactions for each investor. It groups the results by the unique identifier of the investor and orders the output based on the average share count.",
            "question": "Show the average share count of transactions each each investor, ordered by average share count."
        },
        {
            "sample_id": 5850,
            "gold_sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10",
            "gold_complexity": 9,
            "vt": "SELECT ref_transaction_types.transaction_type_description, transactions.date_of_transaction FROM ref_transaction_types JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE transactions.share_count < [placeholder-type:numeric]",
            "ba": "The virtual table describes the transaction types and their corresponding transaction dates from the 'transactions' table, filtered by a condition on the share count. The placeholder in the WHERE clause represents a numeric value for the maximum share count.",
            "question": "Show the transaction type descriptions and dates if the share count is smaller than 10."
        },
        {
            "sample_id": 5858,
            "gold_sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"",
            "gold_complexity": 10,
            "vt": "SELECT lots.lot_details FROM lots JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE transactions.share_count > [placeholder-type:numeric] AND transactions.transaction_type_code = None.\"pur\"",
            "ba": "The virtual table describes the details of lots associated with transactions that have a share count greater than a specified number and are of a specific transaction type, which in this case is 'purchase'. The query joins the 'lots' table with the 'transactions_lots' table to link lots to their respective transactions, and then further joins with the 'transactions' table to apply the necessary filters.",
            "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?"
        },
        {
            "sample_id": 5852,
            "gold_sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT transaction_type_code) FROM transactions",
            "ba": "The virtual table counts the distinct types of transactions recorded in the 'transactions' table. The placeholder in the SELECT clause indicates that the query will return the number of unique transaction types.",
            "question": "How many distinct transaction types are used in the transactions?"
        },
        {
            "sample_id": 5865,
            "gold_sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
            "gold_complexity": 11,
            "vt": "SELECT transactions_lots.lot_id, AVG(transactions.amount_of_transaction) FROM transactions JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY transactions_lots.lot_id ORDER BY AVG(transactions.amount_of_transaction)",
            "ba": "The virtual table provides a summary of the average transaction amounts associated with each lot. It retrieves the lot identifiers from the 'transactions_lots' table and calculates the average amount of transactions linked to those lots by joining the 'transactions' table. The results are grouped by lot identifiers and ordered by the average transaction amount.",
            "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions."
        },
        {
            "sample_id": 5842,
            "gold_sql": "SELECT sum(share_count) FROM TRANSACTIONS",
            "gold_complexity": 4,
            "vt": "SELECT SUM(transactions.share_count) FROM transactions",
            "ba": "The virtual table calculates the total number of shares involved in all transactions from the 'transactions' table. The query uses the SUM function to aggregate the 'share_count' column, providing a single total value for all shares across transactions.",
            "question": "What is the total share of transactions?"
        },
        {
            "sample_id": 5870,
            "gold_sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT ref_transaction_types.transaction_type_description FROM ref_transaction_types JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY ref_transaction_types.transaction_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the transaction type descriptions from the 'ref_transaction_types' table, joined with the 'transactions' table to aggregate the transaction types based on their occurrence. The results are grouped by the transaction type code and ordered by the count of transactions for each type, limiting the output to a specified number of results.",
            "question": "Show the description of the transaction type that occurs most frequently."
        },
        {
            "sample_id": 5863,
            "gold_sql": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
            "gold_complexity": 8,
            "vt": "SELECT transactions.investor_id, AVG(transactions.amount_of_transaction) FROM transactions GROUP BY transactions.investor_id",
            "ba": "The virtual table provides the average transaction amount for each investor from the 'transactions' table. The placeholder in the SELECT clause represents the investor's unique identifier, while the AVG function calculates the average of the monetary amounts involved in the transactions for each investor.",
            "question": "Show the average amount of transactions for different investors."
        },
        {
            "sample_id": 5874,
            "gold_sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
            "gold_complexity": 13,
            "vt": "SELECT transactions.investor_id, investors.investor_details FROM investors JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE transactions.transaction_type_code = None.\"sale\" GROUP BY transactions.investor_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the investor IDs and their corresponding details from the 'investors' table, specifically for those investors who have made a certain number of sales transactions. The query joins the 'investors' table with the 'transactions' table to filter based on the transaction type code for sales. The placeholder in the HAVING clause represents the minimum count of sales transactions required for the investors to be included in the results.",
            "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\"."
        },
        {
            "sample_id": 5875,
            "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100",
            "gold_complexity": 7,
            "vt": "SELECT transactions.date_of_transaction FROM transactions WHERE transactions.share_count >= [placeholder-type:numeric] OR transactions.amount_of_transaction >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates of transactions from the 'transactions' table where the number of shares involved in the transaction is greater than or equal to a specified value, or the monetary amount of the transaction is greater than or equal to another specified value. The placeholders represent these numeric thresholds for filtering the results.",
            "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?"
        },
        {
            "sample_id": 5861,
            "gold_sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
            "gold_complexity": 8,
            "vt": "SELECT transactions.investor_id, AVG(transactions.share_count) FROM transactions GROUP BY transactions.investor_id",
            "ba": "The virtual table provides the average number of shares involved in transactions for each investor from the 'transactions' table. The placeholder in the SELECT clause represents the investor's identifier, while the AVG function calculates the average share count grouped by each investor.",
            "question": "Show the average share count of transactions for different investors."
        },
        {
            "sample_id": 5839,
            "gold_sql": "SELECT DISTINCT lot_details FROM LOTS",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT lots.lot_details FROM lots",
            "ba": "The virtual table provides a distinct list of lot details from the 'lots' table. This allows users to see unique information pertaining to each lot without duplicates.",
            "question": "Show all distinct lot details."
        },
        {
            "sample_id": 5849,
            "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000",
            "gold_complexity": 7,
            "vt": "SELECT transactions.date_of_transaction FROM transactions WHERE transactions.share_count > [placeholder-type:numeric] OR transactions.amount_of_transaction > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates of transactions from the 'transactions' table where the number of shares involved in the transaction exceeds a specified amount or the monetary amount of the transaction exceeds a specified value. The placeholders represent numeric values for filtering the results based on share count and transaction amount.",
            "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000."
        },
        {
            "sample_id": 5856,
            "gold_sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000",
            "gold_complexity": 9,
            "vt": "SELECT sales.sales_details, transactions.date_of_transaction FROM sales JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE transactions.amount_of_transaction < [placeholder-type:numeric]",
            "ba": "The virtual table describes the sales details and the date of transactions from the 'sales' and 'transactions' tables. It filters the results to show only those transactions where the amount involved is less than a specified numeric value. The placeholder in the WHERE clause represents the monetary amount threshold.",
            "question": "What are the sale details and dates of transactions with amount smaller than 3000?"
        },
        {
            "sample_id": 5859,
            "gold_sql": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "gold_complexity": 8,
            "vt": "SELECT transactions.transaction_type_code, AVG(transactions.amount_of_transaction) FROM transactions GROUP BY transactions.transaction_type_code",
            "ba": "The virtual table summarizes the average transaction amounts grouped by their respective transaction types from the 'transactions' table. The placeholder in the SELECT clause represents the transaction type code, while the AVG function calculates the average amount of transactions for each type.",
            "question": "Show the average transaction amount for different transaction types."
        },
        {
            "sample_id": 5854,
            "gold_sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"",
            "gold_complexity": 7,
            "vt": "SELECT lots.lot_details FROM investors JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE investors.investor_details = None.\"l\"",
            "ba": "The virtual table describes the details of lots associated with investors from the 'investors' table. It retrieves the 'lot_details' from the 'lots' table by joining it with the 'investors' table based on the 'investor_id'. The query filters the results based on a specific condition related to the 'investor_details', using a placeholder for string values.",
            "question": "Return the lot details of lots that belong to investors with details \"l\"?"
        },
        {
            "sample_id": 5844,
            "gold_sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"",
            "gold_complexity": 6,
            "vt": "SELECT transactions.date_of_transaction FROM transactions WHERE transactions.transaction_type_code = None.\"sale\"",
            "ba": "The virtual table provides the dates of transactions from the 'transactions' table that are classified as sales. The placeholder in the WHERE clause represents the specific transaction type code for sales.",
            "question": "Show all dates of transactions whose type code is \"SALE\"."
        },
        {
            "sample_id": 5873,
            "gold_sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT transactions.investor_id FROM investors JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY transactions.investor_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of investors from the 'investors' table who have made a certain number of transactions. It joins the 'investors' table with the 'transactions' table to link each investor to their respective transactions. The results are grouped by the investor's ID, and only those investors who have a transaction count greater than or equal to a specified number are included in the output.",
            "question": "Show the ids of the investors who have at least two transactions."
        },
        {
            "sample_id": 5855,
            "gold_sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000",
            "gold_complexity": 7,
            "vt": "SELECT purchases.purchase_details FROM purchases JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE transactions.amount_of_transaction > [placeholder-type:numeric]",
            "ba": "The virtual table describes the details of purchases from the 'purchases' table that are linked to transactions where the amount of the transaction exceeds a specified value. The placeholder in the WHERE clause represents the monetary threshold for filtering transactions.",
            "question": "What are the purchase details of transactions with amount bigger than 10000?"
        }
    ],
    "university_basketball": [
        {
            "sample_id": 994,
            "gold_sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
            "gold_complexity": 9,
            "vt": "SELECT basketball_match.all_games, university.location FROM university JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE basketball_match.team_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the overall record of basketball teams along with their university locations. It combines data from the 'basketball_match' table and the 'university' table, linking them through the school_id. The placeholder in the WHERE clause represents the specific name of the basketball team being queried.",
            "question": "What are the all games score and location of the school called Clemson?"
        },
        {
            "sample_id": 983,
            "gold_sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT university.founded FROM university WHERE university.affiliation <> '[placeholder-type:string]' ORDER BY university.founded LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the founding years of universities from the 'university' table that do not have a specific type of affiliation. The results are ordered by the year of establishment and limited to a specified number of entries.",
            "question": "Find the founded year of the newest non public school."
        },
        {
            "sample_id": 1008,
            "gold_sql": "SELECT count(DISTINCT affiliation) FROM university",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT affiliation) FROM university",
            "ba": "The virtual table counts the distinct types of affiliations among universities from the 'university' table.",
            "question": "Count the number of different affiliation types."
        },
        {
            "sample_id": 997,
            "gold_sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT university.enrollment, university.primary_conference FROM university ORDER BY university.founded LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides information about universities, specifically their enrollment numbers and the primary athletic conference they belong to. The results are ordered by the year the university was founded, and the number of records returned is limited by a placeholder for numeric values.",
            "question": "Show the enrollment and primary_conference of the oldest college."
        },
        {
            "sample_id": 980,
            "gold_sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
            "gold_complexity": 8,
            "vt": "SELECT university.school, university.location FROM university WHERE university.affiliation = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and locations of universities from the 'university' table that have a specific type of affiliation. The placeholder in the WHERE clause represents the affiliation type.",
            "question": "What are the public schools and what are their locations?"
        },
        {
            "sample_id": 1021,
            "gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
            "gold_complexity": 6,
            "vt": "SELECT basketball_match.team_name FROM basketball_match ORDER BY basketball_match.all_home",
            "ba": "The virtual table lists the names of basketball teams from the 'basketball_match' table, ordered by their overall home game record. This allows users to see which teams have performed best in home games based on their records.",
            "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order."
        },
        {
            "sample_id": 992,
            "gold_sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT basketball_match.team_name, basketball_match.acc_regular_season FROM university JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY university.founded LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of basketball teams and their ACC regular season records from the 'basketball_match' table, joined with the 'university' table to associate each team with its respective university. The results are ordered by the year the university was founded, and the number of results returned is limited by a numeric placeholder.",
            "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest."
        },
        {
            "sample_id": 998,
            "gold_sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT university.enrollment, university.primary_conference FROM university ORDER BY university.founded LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides information about universities, specifically their enrollment numbers and the primary athletic conference they belong to. The results are ordered by the year the university was founded, and the number of records returned is limited by a placeholder for numeric values.",
            "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
        },
        {
            "sample_id": 1004,
            "gold_sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM university WHERE NOT basketball_match.school_id IN (SELECT basketball_match.school_id FROM basketball_match)",
            "ba": "The virtual table counts the number of universities that do not have any associated basketball teams in the 'basketball_match' table. It uses a subquery to identify the school_ids of universities that have basketball teams and filters out those from the total count of universities.",
            "question": "Count the number of universities that do not participate in the baketball match."
        },
        {
            "sample_id": 1005,
            "gold_sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
            "gold_complexity": 8,
            "vt": "SELECT university.school FROM university WHERE university.founded > [placeholder-type:numeric] OR university.affiliation = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the names of universities from the 'university' table that were founded after a certain year or have a specific type of affiliation. The placeholders represent the year and the affiliation type respectively.",
            "question": "Find the schools that were either founded after 1850 or public."
        },
        {
            "sample_id": 1003,
            "gold_sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM university WHERE NOT basketball_match.school_id IN (SELECT basketball_match.school_id FROM basketball_match)",
            "ba": "The virtual table counts the number of universities that do not have any associated basketball teams in the 'basketball_match' table. It uses a subquery to identify the school IDs of universities that have basketball teams and filters out those from the total count of universities.",
            "question": "How many schools do not participate in the basketball match?"
        },
        {
            "sample_id": 1007,
            "gold_sql": "SELECT count(DISTINCT affiliation) FROM university",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT affiliation) FROM university",
            "ba": "The virtual table counts the distinct types of affiliations among universities from the 'university' table.",
            "question": "Find how many different affiliation types there are."
        },
        {
            "sample_id": 1000,
            "gold_sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university",
            "gold_complexity": 5,
            "vt": "SELECT SUM(university.enrollment), MIN(university.enrollment) FROM university",
            "ba": "The virtual table summarizes the total and minimum enrollment figures from the 'university' table, providing insights into the student population across different universities.",
            "question": "Return the total and minimum enrollments across all schools."
        },
        {
            "sample_id": 1001,
            "gold_sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
            "gold_complexity": 8,
            "vt": "SELECT SUM(university.enrollment), university.affiliation FROM university GROUP BY university.affiliation",
            "ba": "The virtual table summarizes the total enrollment of universities grouped by their affiliation type. It aggregates the enrollment numbers from the 'university' table and categorizes them based on the different types of affiliations that universities may have.",
            "question": "Find the total student enrollment for different affiliation type schools."
        },
        {
            "sample_id": 995,
            "gold_sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
            "gold_complexity": 6,
            "vt": "SELECT AVG(university.enrollment) FROM university WHERE university.founded < [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average enrollment of universities that were established before a certain year. The placeholder in the WHERE clause represents the year of establishment.",
            "question": "What are the average enrollment size of the universities that are founded before 1850?"
        },
        {
            "sample_id": 1020,
            "gold_sql": "SELECT * FROM basketball_match",
            "gold_complexity": 4,
            "vt": "SELECT * FROM basketball_match",
            "ba": "The virtual table provides a comprehensive view of basketball match data, including team details and their performance records. It combines information from the 'basketball_match' table, which contains records of various teams, and the 'university' table, which provides details about the universities associated with those teams. The query retrieves all columns from the 'basketball_match' table, allowing users to analyze team performance across different metrics.",
            "question": "What is all the information about the basketball match?"
        },
        {
            "sample_id": 1019,
            "gold_sql": "SELECT * FROM basketball_match",
            "gold_complexity": 4,
            "vt": "SELECT * FROM basketball_match",
            "ba": "The virtual table provides a comprehensive view of basketball match data, including team details and their performance records. It combines information from the 'basketball_match' table, which contains records of various teams, and the 'university' table, which provides details about the universities associated with those teams. The query retrieves all columns from the 'basketball_match' table, allowing users to analyze team performance across different metrics.",
            "question": "List all information regarding the basketball match."
        },
        {
            "sample_id": 1016,
            "gold_sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
            "gold_complexity": 10,
            "vt": "SELECT SUM(university.enrollment), university.affiliation FROM university WHERE university.founded > [placeholder-type:numeric] GROUP BY university.affiliation",
            "ba": "The virtual table summarizes the total enrollment of universities grouped by their affiliation for those established after a certain year. The placeholder in the WHERE clause represents the year of establishment.",
            "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?"
        },
        {
            "sample_id": 991,
            "gold_sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT basketball_match.team_name, basketball_match.acc_regular_season FROM university JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY university.founded LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of basketball teams and their ACC regular season records from the 'basketball_match' table, joined with the 'university' table to associate each team with its respective university. The results are ordered by the year the university was founded, and the number of results returned is limited by a numeric placeholder.",
            "question": "What is the team name and acc regular season score of the school that was founded for the longest time?"
        },
        {
            "sample_id": 1017,
            "gold_sql": "SELECT max(Enrollment) FROM university",
            "gold_complexity": 4,
            "vt": "SELECT MAX(university.enrollment) FROM university",
            "ba": "The virtual table retrieves the maximum enrollment number from the 'university' table, which represents the largest total number of students enrolled at any university in the database.",
            "question": "What is the maximum enrollment across all schools?"
        },
        {
            "sample_id": 1018,
            "gold_sql": "SELECT max(Enrollment) FROM university",
            "gold_complexity": 4,
            "vt": "SELECT MAX(university.enrollment) FROM university",
            "ba": "The virtual table retrieves the maximum enrollment number from the 'university' table, which represents the largest total number of students enrolled at any university in the database.",
            "question": "Return the maximum enrollment across all schools."
        },
        {
            "sample_id": 993,
            "gold_sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
            "gold_complexity": 9,
            "vt": "SELECT basketball_match.all_games, university.location FROM university JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE basketball_match.team_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the overall record of basketball teams along with their university locations. It combines data from the 'basketball_match' table and the 'university' table, linking them through the school_id. The placeholder in the WHERE clause represents the specific name of the basketball team being queried.",
            "question": "Find the location and all games score of the school that has Clemson as its team name."
        },
        {
            "sample_id": 985,
            "gold_sql": "SELECT count(DISTINCT school_id) FROM basketball_match",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT school_id) FROM basketball_match",
            "ba": "The virtual table counts the number of distinct schools that have basketball teams represented in the 'basketball_match' table. This is achieved by selecting the unique 'school_id' from the table, which links to the 'university' table through a foreign key relationship.",
            "question": "How many schools are in the basketball match?"
        },
        {
            "sample_id": 1010,
            "gold_sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM university WHERE university.location LIKE None.\"%ny%\"",
            "ba": "The virtual table counts the number of universities located in a specific area, represented by a placeholder for the location string. The query filters the 'university' table based on the 'location' column, looking for matches that contain a specified substring.",
            "question": "How many universities have a location that contains NY?"
        },
        {
            "sample_id": 1022,
            "gold_sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
            "gold_complexity": 6,
            "vt": "SELECT basketball_match.team_name FROM basketball_match ORDER BY basketball_match.all_home",
            "ba": "The virtual table lists the names of basketball teams from the 'basketball_match' table, ordered by their overall home game record. This allows users to see which teams have performed best at home based on their records.",
            "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?"
        },
        {
            "sample_id": 996,
            "gold_sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
            "gold_complexity": 6,
            "vt": "SELECT AVG(university.enrollment) FROM university WHERE university.founded < [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average enrollment of universities that were established before a certain year. The placeholder in the WHERE clause represents the year of establishment.",
            "question": "Return the average enrollment of universities founded before 1850."
        },
        {
            "sample_id": 1006,
            "gold_sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
            "gold_complexity": 8,
            "vt": "SELECT university.school FROM university WHERE university.founded > [placeholder-type:numeric] OR university.affiliation = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the names of universities from the 'university' table that were founded after a certain year or have a specific type of affiliation. The placeholders represent the year and the affiliation type respectively.",
            "question": "What are the schools that were either founded before 1850 or are public?"
        }
    ],
    "college_3": [
        {
            "sample_id": 4690,
            "gold_sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
            "gold_complexity": 8,
            "vt": "SELECT faculty.lname FROM department JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE department.dname = None.\"computer science\"",
            "ba": "The virtual table lists the last names of faculty members from the 'faculty' table who are associated with the 'computer science' department. It joins the 'department' table with the 'faculty' table and the 'member_of' table to filter faculty based on their department affiliation.",
            "question": "Find the last names of faculties who are members of computer science department."
        },
        {
            "sample_id": 4663,
            "gold_sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
            "gold_complexity": 8,
            "vt": "SELECT faculty.fname FROM faculty WHERE faculty.rank = None.\"professor\" ORDER BY faculty.fname",
            "ba": "The virtual table lists the first names of faculty members from the 'faculty' table who hold the rank of 'professor'. The results are ordered alphabetically by the faculty members' first names.",
            "question": "What are the first names for all faculty professors, ordered by first name?"
        },
        {
            "sample_id": 4672,
            "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 12,
            "vt": "SELECT faculty.fname, faculty.lname FROM course JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY course.instructor ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the first and last names of faculty members who are instructors for courses, grouped by the instructor's ID and ordered by the number of courses they teach. The placeholder in the LIMIT clause represents the maximum number of faculty members to be displayed.",
            "question": "What are the first and last names of the instructors who teach the top 3 number of courses?"
        },
        {
            "sample_id": 4675,
            "gold_sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT faculty.building FROM course JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY course.instructor ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the building locations of faculty members who teach courses, grouping the results by instructor and ordering them based on the number of courses they teach. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Give the building that the instructor who teaches the greatest number of courses lives in."
        },
        {
            "sample_id": 4647,
            "gold_sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
            "gold_complexity": 9,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty WHERE faculty.sex = None.\"m\" AND faculty.building = None.\"neb\"",
            "ba": "The virtual table describes the first and last names of faculty members from the 'faculty' table who are male and are located in a specific building. The placeholders in the WHERE clause represent the gender and building name.",
            "question": "What are the full names of faculties with sex M and who live in building NEB?"
        },
        {
            "sample_id": 4686,
            "gold_sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
            "gold_complexity": 9,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE member_of.dno = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of faculty members from the 'faculty' table who are associated with a specific department. The placeholder in the WHERE clause represents the unique identifier for the department.",
            "question": "Find the full names of faculties who are members of department with department number 520."
        },
        {
            "sample_id": 4628,
            "gold_sql": "SELECT count(*) FROM COURSE",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM course",
            "ba": "The virtual table provides a count of all courses available in the 'course' table.",
            "question": "How many courses are there in total?"
        },
        {
            "sample_id": 4684,
            "gold_sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT student.fname FROM enrolled_in, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE gradeconversion.gradepoint >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first names of students who have received a grade point value above a specified threshold. It combines data from the 'enrolled_in' table, which tracks student enrollments and their grades, with the 'gradeconversion' table to filter based on grade points. The placeholder in the WHERE clause represents the minimum grade point value for filtering the results.",
            "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course."
        },
        {
            "sample_id": 4689,
            "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
            "gold_complexity": 9,
            "vt": "SELECT student.fname, student.lname FROM minor_in JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE minor_in.dno = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students who are pursuing a minor in a specific department. The query joins the 'minor_in' table with the 'student' table to retrieve the names of students based on their unique identifiers. The placeholder in the WHERE clause represents the unique identifier for the department offering the minor.",
            "question": "What are the full names of students minoring in department 140?"
        },
        {
            "sample_id": 4651,
            "gold_sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"",
            "gold_complexity": 6,
            "vt": "SELECT department.dname FROM department WHERE department.building = None.\"mergenthaler\"",
            "ba": "The virtual table describes the names of departments located in a specific building from the 'department' table. The placeholder in the WHERE clause represents the name of the building.",
            "question": "What is the name of the department in the Building Mergenthaler?"
        },
        {
            "sample_id": 4635,
            "gold_sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
            "gold_complexity": 6,
            "vt": "SELECT course.cname FROM course WHERE course.days = None.\"mtw\"",
            "ba": "The virtual table lists the names of courses from the 'course' table that are scheduled on specific days of the week. The placeholder in the WHERE clause represents the days of the week for which the courses are being queried.",
            "question": "What are the course names for courses taught on MTW?"
        },
        {
            "sample_id": 4665,
            "gold_sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT department.dname FROM department JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY minor_in.dno ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of departments from the 'department' table that offer minors, grouped by the department identifier. It counts the number of students enrolled in each minor and orders the results based on this count. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to return.",
            "question": "What is the name of the department with the most students minoring in it?"
        },
        {
            "sample_id": 4683,
            "gold_sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
            "gold_complexity": 10,
            "vt": "SELECT student.fname, student.lname, gradeconversion.gradepoint FROM enrolled_in, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID",
            "ba": "The virtual table describes the first and last names of students along with their corresponding grade points from the 'enrolled_in' table, which links students to their enrolled courses and grades. The 'gradeconversion' table is used to convert letter grades into grade points, and the 'student' table provides the names of the students. The placeholders represent the necessary identifiers for the student and their grades.",
            "question": "What are the full names and gradepoints for all enrollments?"
        },
        {
            "sample_id": 4694,
            "gold_sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
            "gold_complexity": 9,
            "vt": "SELECT MAX(gradeconversion.gradepoint), MIN(gradeconversion.gradepoint) FROM enrolled_in, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE student.city_code = None.\"nyc\"",
            "ba": "The virtual table provides the maximum and minimum grade points from the 'gradeconversion' table for students who are enrolled in courses and reside in a specific city. The placeholders represent the city code for filtering the students.",
            "question": "What is the maximum and minimum grade point of students who live in NYC?"
        },
        {
            "sample_id": 4652,
            "gold_sql": "SELECT * FROM COURSE ORDER BY Credits",
            "gold_complexity": 6,
            "vt": "SELECT * FROM course ORDER BY course.credits",
            "ba": "The virtual table lists all courses from the 'course' table, sorted by the number of credits awarded for each course. This allows users to see the courses available and their respective credit values in an organized manner.",
            "question": "List all information about courses sorted by credits in the ascending order."
        },
        {
            "sample_id": 4695,
            "gold_sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
            "gold_complexity": 9,
            "vt": "SELECT MAX(gradeconversion.gradepoint), MIN(gradeconversion.gradepoint) FROM enrolled_in, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE student.city_code = None.\"nyc\"",
            "ba": "The virtual table provides the maximum and minimum grade points from the 'gradeconversion' table for students who are enrolled in courses and reside in a specific city. The placeholders represent the city code for filtering the students.",
            "question": "Give the maximum and minimum gradepoints for students living in NYC?"
        },
        {
            "sample_id": 4634,
            "gold_sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
            "gold_complexity": 6,
            "vt": "SELECT course.cname FROM course WHERE course.days = None.\"mtw\"",
            "ba": "The virtual table lists the names of courses from the 'course' table that are scheduled on specific days of the week. The placeholder in the WHERE clause represents the days on which the courses are held.",
            "question": "Which courses are taught on days MTW?"
        },
        {
            "sample_id": 4655,
            "gold_sql": "SELECT CName FROM COURSE ORDER BY Credits",
            "gold_complexity": 6,
            "vt": "SELECT course.cname FROM course ORDER BY course.credits",
            "ba": "The virtual table lists the names of courses from the 'course' table, sorted by the number of credits each course offers. This allows users to see all available courses in an ordered manner based on their credit value.",
            "question": "What are the course names, ordered by credits?"
        },
        {
            "sample_id": 4658,
            "gold_sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
            "gold_complexity": 8,
            "vt": "SELECT student.lname FROM student WHERE student.sex = None.\"f\" ORDER BY student.age",
            "ba": "The virtual table lists the last names of female students from the 'student' table, ordered by their age. The placeholder in the WHERE clause represents the gender of the students being filtered.",
            "question": "Find the last name of female (sex is F) students in the descending order of age."
        },
        {
            "sample_id": 4654,
            "gold_sql": "SELECT CName FROM COURSE ORDER BY Credits",
            "gold_complexity": 6,
            "vt": "SELECT course.cname FROM course ORDER BY course.credits",
            "ba": "The virtual table lists the names of courses from the 'course' table, sorted by the number of credits each course offers. This allows users to see all available courses in an organized manner based on their credit value.",
            "question": "List the course name of courses sorted by credits."
        },
        {
            "sample_id": 4680,
            "gold_sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"",
            "gold_complexity": 9,
            "vt": "SELECT department.dname, department.room FROM course JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE course.cname = None.\"introduction to computer science\"",
            "ba": "The virtual table describes the name and room of the department offering a specific course from the 'course' table. The query joins the 'course' table with the 'department' table to retrieve the relevant department information based on the course name provided as a placeholder.",
            "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE."
        },
        {
            "sample_id": 4692,
            "gold_sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(gradeconversion.gradepoint) FROM enrolled_in, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE student.lname = None.\"smith\"",
            "ba": "The virtual table calculates the average grade point for students with the last name 'smith' by joining the 'enrolled_in' table with the 'gradeconversion' table to match letter grades with their corresponding grade points, and also joining with the 'student' table to filter by the student's last name.",
            "question": "Find the average grade point of student whose last name is Smith."
        },
        {
            "sample_id": 4631,
            "gold_sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM course WHERE course.credits > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of courses from the 'course' table that have more credits than a specified value. The placeholder in the WHERE clause represents the minimum number of credits to filter the courses.",
            "question": "Count the number of courses with more than 2 credits."
        },
        {
            "sample_id": 4679,
            "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
            "gold_complexity": 9,
            "vt": "SELECT faculty.fname, faculty.lname FROM course JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE course.cname = None.\"computer literacy\"",
            "ba": "The virtual table describes the first and last names of faculty members who teach a specific course. The query joins the 'course' table with the 'faculty' table to retrieve the names of instructors based on the course name provided.",
            "question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?"
        },
        {
            "sample_id": 4642,
            "gold_sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
            "gold_complexity": 5,
            "vt": "SELECT MAX(gradeconversion.gradepoint), MIN(gradeconversion.gradepoint) FROM gradeconversion",
            "ba": "The virtual table provides the maximum and minimum grade point values from the 'gradeconversion' table, which contains the mapping of letter grades to their corresponding grade points.",
            "question": "Find the max and min grade point for all letter grade."
        },
        {
            "sample_id": 4678,
            "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
            "gold_complexity": 9,
            "vt": "SELECT faculty.fname, faculty.lname FROM course JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE course.cname = None.\"computer literacy\"",
            "ba": "The virtual table describes the first and last names of faculty members who teach a specific course, identified by its name. The query joins the 'course' table with the 'faculty' table to retrieve the names of instructors for the specified course.",
            "question": "Find the first name and last name of the instructor of course that has course name"
        },
        {
            "sample_id": 4653,
            "gold_sql": "SELECT * FROM COURSE ORDER BY Credits",
            "gold_complexity": 6,
            "vt": "SELECT * FROM course ORDER BY course.credits",
            "ba": "The virtual table displays all columns from the 'course' table, which contains information about various courses offered, including their unique identifiers, names, credit values, instructors, scheduling details, and associated departments. The results are sorted by the number of credits awarded for each course.",
            "question": "What is all the information about courses, ordered by credits ascending?"
        },
        {
            "sample_id": 4641,
            "gold_sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT StuID) FROM enrolled_in WHERE enrolled_in.grade = None.\"b\"",
            "ba": "The virtual table counts the number of distinct students from the 'enrolled_in' table who have received a specific grade, represented by a placeholder. The query filters the results based on the grade column, which is compared to a placeholder for the letter grade.",
            "question": "How many students have had at least one \"B\" grade?"
        },
        {
            "sample_id": 4646,
            "gold_sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
            "gold_complexity": 9,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty WHERE faculty.sex = None.\"m\" AND faculty.building = None.\"neb\"",
            "ba": "The virtual table describes the first and last names of faculty members from the 'faculty' table who are male and located in a specific building. The placeholders in the WHERE clause represent the gender and building name.",
            "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB."
        },
        {
            "sample_id": 4637,
            "gold_sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM department WHERE department.division = None.\"as\"",
            "ba": "The virtual table counts the number of departments from the 'department' table that belong to a specific division. The placeholder in the WHERE clause represents the division name.",
            "question": "How many departments are in the division AS?"
        },
        {
            "sample_id": 4638,
            "gold_sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
            "gold_complexity": 6,
            "vt": "SELECT department.dphone FROM department WHERE department.room = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the contact phone number of a department from the 'department' table based on a specific room number. The placeholder in the WHERE clause represents the room number of the department.",
            "question": "What are the phones of departments in Room 268?"
        },
        {
            "sample_id": 4661,
            "gold_sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname",
            "gold_complexity": 8,
            "vt": "SELECT faculty.lname FROM faculty WHERE faculty.building = None.\"barton\" ORDER BY faculty.lname",
            "ba": "The virtual table lists the last names of faculty members from the 'faculty' table who are located in a specific building. The placeholder in the WHERE clause represents the name of the building, and the results are ordered alphabetically by last name.",
            "question": "What are the last names of faculty in building Barton, sorted by last name?"
        },
        {
            "sample_id": 4671,
            "gold_sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT faculty.rank FROM faculty GROUP BY faculty.rank ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the ranks of faculty members from the 'faculty' table, grouping them by rank and ordering the results based on the count of faculty members in each rank. The placeholder in the LIMIT clause allows for specifying the maximum number of ranks to return.",
            "question": "What is the least common faculty rank?"
        },
        {
            "sample_id": 4670,
            "gold_sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT faculty.rank FROM faculty GROUP BY faculty.rank ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the ranks of faculty members from the 'faculty' table, grouping them by rank and ordering the results based on the count of faculty members in each rank. The placeholder in the LIMIT clause allows for specifying the maximum number of ranks to return.",
            "question": "Find the rank of the faculty that the fewest faculties belong to."
        },
        {
            "sample_id": 4660,
            "gold_sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname",
            "gold_complexity": 8,
            "vt": "SELECT faculty.lname FROM faculty WHERE faculty.building = None.\"barton\" ORDER BY faculty.lname",
            "ba": "The virtual table lists the last names of faculty members from the 'faculty' table who are located in a specific building. The placeholder in the WHERE clause represents the name of the building, and the results are ordered by the last names of the faculty members.",
            "question": "Find the last names of faculties in building Barton in alphabetic order."
        },
        {
            "sample_id": 4691,
            "gold_sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"",
            "gold_complexity": 8,
            "vt": "SELECT faculty.lname FROM department JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE department.dname = None.\"computer science\"",
            "ba": "The virtual table lists the last names of faculty members from the 'faculty' table who are associated with the 'computer science' department. It joins the 'department' table with the 'faculty' table and the 'member_of' table to filter faculty based on their department affiliation.",
            "question": "What are the last names of faculty who are part of the computer science department?"
        },
        {
            "sample_id": 4682,
            "gold_sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
            "gold_complexity": 10,
            "vt": "SELECT student.fname, student.lname, gradeconversion.gradepoint FROM enrolled_in, GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID",
            "ba": "The virtual table describes the first and last names of students along with their corresponding grade points from the 'enrolled_in' table, which links students to their enrolled courses and grades. The 'gradeconversion' table is used to convert letter grades into grade points, and the 'student' table provides the names of the students. The placeholders represent the necessary identifiers for the student and their grades.",
            "question": "Find the student first and last names and grade points of all enrollments."
        },
        {
            "sample_id": 4645,
            "gold_sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT student.fname FROM student WHERE student.fname LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct first names of students from the 'student' table that match a specific pattern. The placeholder in the LIKE clause represents the pattern to search for in the first names.",
            "question": "What are the first names for students who have an \"a\" in their first name?"
        },
        {
            "sample_id": 4696,
            "gold_sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
            "gold_complexity": 8,
            "vt": "SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4",
            "ba": "The virtual table retrieves the names of courses from the 'COURSE' table that either have 3 credits or have 1 credit and are scheduled at 4 hours. The use of UNION combines the results of both queries to provide a comprehensive list of course names that meet either of the specified criteria.",
            "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours."
        },
        {
            "sample_id": 4677,
            "gold_sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
            "gold_complexity": 9,
            "vt": "SELECT course.cname FROM course JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY enrolled_in.cid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of courses from the 'course' table that have a minimum number of students enrolled. The query joins the 'course' table with the 'enrolled_in' table to count the number of students for each course, and filters the results to only include courses with a specified minimum enrollment count.",
            "question": "Give the names of the courses with at least five enrollments."
        },
        {
            "sample_id": 4629,
            "gold_sql": "SELECT count(*) FROM COURSE",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM course",
            "ba": "The virtual table provides a count of all courses available in the 'course' table.",
            "question": "Count the number of courses."
        },
        {
            "sample_id": 4648,
            "gold_sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
            "gold_complexity": 7,
            "vt": "SELECT faculty.room FROM faculty WHERE faculty.rank = None.\"professor\" AND faculty.building = None.\"neb\"",
            "ba": "The virtual table retrieves the room numbers of faculty members from the 'faculty' table who hold the rank of 'professor' and are located in the 'neb' building. The placeholders in the WHERE clause represent the specific rank and building name.",
            "question": "Find the rooms of faculties with rank professor who live in building NEB."
        },
        {
            "sample_id": 4667,
            "gold_sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
            "gold_complexity": 6,
            "vt": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
            "ba": "The virtual table lists the names of departments from the 'DEPARTMENT' table that do not have any students pursuing a minor in them. It uses an EXCEPT clause to exclude departments that are linked to the 'MINOR_IN' table, ensuring only those without any associated minors are displayed.",
            "question": "What is the name of the department htat has no students minoring in it?"
        },
        {
            "sample_id": 4687,
            "gold_sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
            "gold_complexity": 9,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE member_of.dno = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of faculty members from the 'faculty' table who are associated with a specific department. The placeholder in the WHERE clause represents the unique identifier for the department.",
            "question": "What are the full names of faculty members who are a part of department 520?"
        }
    ],
    "wrestler": [
        {
            "sample_id": 1875,
            "gold_sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT wrestler.location FROM wrestler GROUP BY wrestler.location HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the locations where wrestlers have defended their titles, specifically focusing on those locations that have hosted more than a specified number of wrestlers. The placeholder in the HAVING clause represents the minimum count of wrestlers that must be present in those locations.",
            "question": "Which locations are shared by more than two wrestlers?"
        },
        {
            "sample_id": 1844,
            "gold_sql": "SELECT count(*) FROM wrestler",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM wrestler",
            "ba": "The virtual table counts the total number of wrestlers in the 'wrestler' table.",
            "question": "How many wrestlers are there?"
        },
        {
            "sample_id": 1859,
            "gold_sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC",
            "gold_complexity": 9,
            "vt": "SELECT wrestler.name, elimination.team FROM elimination JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY wrestler.days_held",
            "ba": "The virtual table describes the names of wrestlers along with the teams they were part of during elimination events. It combines data from the 'elimination' table and the 'wrestler' table, linking them through the wrestler's unique identifier. The results are ordered by the total number of days each wrestler held their title, providing insight into their performance and tenure.",
            "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?"
        },
        {
            "sample_id": 1848,
            "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT wrestler.name FROM wrestler ORDER BY wrestler.days_held LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of wrestlers from the 'wrestler' table, ordered by the total number of days they held their title. The query limits the results to a specified number of wrestlers.",
            "question": "What is the name of the wrestler with the fewest days held?"
        },
        {
            "sample_id": 1864,
            "gold_sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
            "gold_complexity": 8,
            "vt": "SELECT elimination.team, COUNT(*) FROM elimination GROUP BY elimination.team",
            "ba": "The virtual table summarizes the number of eliminations that occurred for each team during wrestling events. It retrieves the team identifier from the 'elimination' table and counts the total eliminations associated with each team, grouping the results by team.",
            "question": "Show different teams in eliminations and the number of eliminations from each team."
        },
        {
            "sample_id": 1870,
            "gold_sql": "SELECT Name FROM wrestler WHERE Days_held  <  100",
            "gold_complexity": 6,
            "vt": "SELECT wrestler.name FROM wrestler WHERE wrestler.days_held < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days a title can be held.",
            "question": "What are the names of wrestlers days held less than 100?"
        },
        {
            "sample_id": 1882,
            "gold_sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
            "gold_complexity": 7,
            "vt": "SELECT elimination.time FROM elimination WHERE elimination.eliminated_by = None.\"punk\" OR elimination.eliminated_by = None.\"orton\"",
            "ba": "The virtual table retrieves the time of eliminations from the 'elimination' table where the wrestler who performed the elimination is either 'punk' or 'orton'.",
            "question": "Show the times of elimination by \"Punk\" or \"Orton\"."
        },
        {
            "sample_id": 1847,
            "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
            "gold_complexity": 6,
            "vt": "SELECT wrestler.name FROM wrestler ORDER BY wrestler.days_held",
            "ba": "The virtual table lists the names of wrestlers from the 'wrestler' table, ordered by the total number of days they held their title. This allows users to see which wrestlers have the longest title reigns at a glance.",
            "question": "What are the names of the wrestlers, ordered descending by days held?"
        },
        {
            "sample_id": 1880,
            "gold_sql": "SELECT COUNT (DISTINCT team) FROM elimination",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT team) FROM elimination",
            "ba": "The virtual table counts the distinct teams involved in elimination events from the 'elimination' table.",
            "question": "What is the number of distinct teams that suffer elimination?"
        },
        {
            "sample_id": 1878,
            "gold_sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
            "gold_complexity": 8,
            "vt": "SELECT Team FROM Elimination WHERE Eliminated_By = \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = \"Benjamin\"",
            "ba": "The virtual table identifies teams involved in elimination events where two specific wrestlers, 'Orton' and 'Benjamin', performed the eliminations. It uses an INTERSECT operation to find common teams eliminated by both wrestlers.",
            "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\"."
        },
        {
            "sample_id": 1874,
            "gold_sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT wrestler.location FROM wrestler GROUP BY wrestler.location HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of locations where wrestlers have defended their titles, specifically filtering for locations that have hosted more than a specified number of title defenses. The placeholder in the HAVING clause represents the minimum count of title defenses required for a location to be included in the results.",
            "question": "List the locations that are shared by more than two wrestlers."
        },
        {
            "sample_id": 1868,
            "gold_sql": "SELECT Reign ,  Days_held FROM wrestler",
            "gold_complexity": 6,
            "vt": "SELECT wrestler.reign, wrestler.days_held FROM wrestler",
            "ba": "The virtual table describes the title reign and the total number of days held by wrestlers from the 'wrestler' table.",
            "question": "Show the reign and days held of wrestlers."
        },
        {
            "sample_id": 1871,
            "gold_sql": "SELECT Name FROM wrestler WHERE Days_held  <  100",
            "gold_complexity": 6,
            "vt": "SELECT wrestler.name FROM wrestler WHERE wrestler.days_held < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of wrestlers from the 'wrestler' table who have held their title for fewer days than a specified number. The placeholder in the WHERE clause represents the maximum number of days a title can be held.",
            "question": "Return the names of wrestlers with fewer than 100 days held."
        },
        {
            "sample_id": 1867,
            "gold_sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3",
            "gold_complexity": 8,
            "vt": "SELECT elimination.team FROM elimination GROUP BY elimination.team HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of teams from the 'elimination' table that have eliminated more than a specified number of wrestlers. The placeholder in the HAVING clause represents the minimum count of eliminations required for a team to be included in the results.",
            "question": "Which teams had more than 3 eliminations?"
        },
        {
            "sample_id": 1872,
            "gold_sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT wrestler.reign FROM wrestler GROUP BY wrestler.reign ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the title reigns of wrestlers from the 'wrestler' table, grouping them to count how many wrestlers held each reign. The results are ordered by the count of wrestlers in each reign, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Please show the most common reigns of wrestlers."
        },
        {
            "sample_id": 1850,
            "gold_sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT wrestler.reign FROM wrestler WHERE wrestler.location <> None.\"tokyo , japan\"",
            "ba": "The virtual table retrieves distinct title reigns of wrestlers from the 'wrestler' table, specifically excluding those who defended their titles in Tokyo, Japan. The placeholder in the WHERE clause indicates that the location should not be Tokyo, Japan.",
            "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?"
        },
        {
            "sample_id": 1862,
            "gold_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
            "gold_complexity": 7,
            "vt": "SELECT elimination.time FROM elimination JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE wrestler.days_held > [placeholder-type:numeric]",
            "ba": "The virtual table describes the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days a wrestler must have held their title to be included in the results.",
            "question": "Show times of elimination of wrestlers with days held more than 50."
        },
        {
            "sample_id": 1863,
            "gold_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
            "gold_complexity": 7,
            "vt": "SELECT elimination.time FROM elimination JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE wrestler.days_held > [placeholder-type:numeric]",
            "ba": "The virtual table describes the times of eliminations from the 'elimination' table for wrestlers who have held their title for more than a specified number of days. The placeholder in the WHERE clause represents the minimum number of days a wrestler must have held their title to be included in the results.",
            "question": "What are the times of elimination for wrestlers with over 50 days held?"
        },
        {
            "sample_id": 1852,
            "gold_sql": "SELECT Name ,  LOCATION FROM wrestler",
            "gold_complexity": 6,
            "vt": "SELECT wrestler.name, wrestler.location FROM wrestler",
            "ba": "The virtual table describes the names and locations of wrestlers from the 'wrestler' table.",
            "question": "What are the names and location of the wrestlers?"
        },
        {
            "sample_id": 1849,
            "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT wrestler.name FROM wrestler ORDER BY wrestler.days_held LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of wrestlers from the 'wrestler' table, ordered by the total number of days they held their title. The query limits the results to a specified number of wrestlers.",
            "question": "Return the name of the wrestler who had the lowest number of days held."
        },
        {
            "sample_id": 1846,
            "gold_sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
            "gold_complexity": 6,
            "vt": "SELECT wrestler.name FROM wrestler ORDER BY wrestler.days_held",
            "ba": "The virtual table lists the names of wrestlers from the 'wrestler' table, ordered by the total number of days they held their title. This allows users to see which wrestlers have the longest title reigns at a glance.",
            "question": "List the names of wrestlers in descending order of days held."
        },
        {
            "sample_id": 1854,
            "gold_sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"",
            "gold_complexity": 6,
            "vt": "SELECT elimination.elimination_move FROM elimination WHERE elimination.team = None.\"team orton\"",
            "ba": "The virtual table retrieves the elimination moves from the 'elimination' table for a specific team identified by a placeholder. The query focuses on the elimination moves used during matches involving that team.",
            "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?"
        },
        {
            "sample_id": 1851,
            "gold_sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT wrestler.reign FROM wrestler WHERE wrestler.location <> None.\"tokyo , japan\"",
            "ba": "The virtual table retrieves distinct title reigns of wrestlers from the 'wrestler' table, specifically filtering out those who defended their titles in Tokyo, Japan. The placeholder in the WHERE clause indicates that the location should not be Tokyo, Japan.",
            "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan."
        },
        {
            "sample_id": 1860,
            "gold_sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT elimination.time FROM elimination JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY wrestler.days_held LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the times of eliminations from the 'elimination' table, joining it with the 'wrestler' table to access wrestler details. The results are ordered by the number of days each wrestler held their title, and a limit is applied to restrict the number of records returned based on a specified numeric value.",
            "question": "List the time of elimination of the wrestlers with largest days held."
        }
    ],
    "department_store": [
        {
            "sample_id": 4728,
            "gold_sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
            "gold_complexity": 11,
            "vt": "SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"New\" INTERSECT SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\"",
            "ba": "The virtual table provides a list of customer names and their addresses from the 'customers' table. It retrieves customers who have orders with a status of 'New' and also those with a status of 'Pending'. The use of INTERSECT ensures that only customers who meet both criteria are included in the result.",
            "question": "Find the name and address of the customers who have both New and Pending orders."
        },
        {
            "sample_id": 4771,
            "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT customers.customer_name FROM customers JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE products.product_name = None.\"keyboard\"",
            "ba": "The virtual table lists the distinct names of customers who have ordered a specific product, identified by its name. It involves joining multiple tables: 'customers' to get customer details, 'customer_orders' to link customers with their orders, 'order_items' to identify the products in those orders, and 'products' to filter based on the product name.",
            "question": "What are the distinct names of customers who have purchased a keyboard?"
        },
        {
            "sample_id": 4739,
            "gold_sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
            "gold_complexity": 9,
            "vt": "SELECT products.product_type_code, MAX(products.product_price), MIN(products.product_price) FROM products GROUP BY products.product_type_code",
            "ba": "The virtual table summarizes the product types and their price ranges from the 'products' table. It displays the product type code along with the maximum and minimum prices for each type, allowing users to understand the pricing structure across different product categories.",
            "question": "What are the maximum and minimum product prices for each product type?"
        },
        {
            "sample_id": 4711,
            "gold_sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
            "gold_complexity": 9,
            "vt": "SELECT staff.staff_id, staff.staff_gender FROM staff JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE staff_department_assignments.job_title_code = None.\"department manager\"",
            "ba": "The virtual table describes the staff members' IDs and genders from the 'staff' table who are assigned to a department as department managers. The query joins the 'staff' table with the 'staff_department_assignments' table to filter based on the job title code for department managers.",
            "question": "Return the staff ids and genders for any staff with the title Department Manager."
        },
        {
            "sample_id": 4734,
            "gold_sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
            "gold_complexity": 9,
            "vt": "SELECT department_stores.dept_store_chain_id FROM department_stores GROUP BY department_stores.dept_store_chain_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique identifiers for department store chains from the 'department_stores' table. It groups the results by the department store chain identifier and orders them based on the count of department stores associated with each chain. The query limits the results to a specified number of department store chains.",
            "question": "What are the ids of the two department store chains with the largest number of department stores?"
        },
        {
            "sample_id": 4706,
            "gold_sql": "SELECT count(DISTINCT product_type_code) FROM products",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT product_type_code) FROM products",
            "ba": "The virtual table provides a count of distinct product types available in the 'products' table. This count helps in understanding the variety of products offered.",
            "question": "Find the number of different product types."
        },
        {
            "sample_id": 4731,
            "gold_sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
            "gold_complexity": 13,
            "vt": "SELECT product_suppliers.product_id FROM product_suppliers JOIN products AS T2 ON T1.product_id = T2.product_id WHERE product_suppliers.supplier_id = [placeholder-type:numeric] AND products.product_price > (SELECT AVG(products.product_price) FROM products)",
            "ba": "The virtual table lists the product IDs of products supplied by a specific supplier whose price is above the average price of all products. The query joins the 'product_suppliers' table with the 'products' table to filter based on the supplier's ID and the product's price.",
            "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?"
        },
        {
            "sample_id": 4789,
            "gold_sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT products.product_name FROM products WHERE products.product_type_code = '[placeholder-type:string]' ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of products from the 'products' table that match a specific product type code. The results are ordered by the product price, and a limit is applied to restrict the number of products returned.",
            "question": "What is the name of the hardware product with the greatest price?"
        },
        {
            "sample_id": 4732,
            "gold_sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
            "gold_complexity": 11,
            "vt": "SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\"",
            "ba": "The virtual table identifies department stores that have both a marketing and a managing department. It retrieves the unique identifiers and names of these stores by performing an intersection of two queries that join the 'departments' and 'department_stores' tables based on the department's name.",
            "question": "What is the id and name of the department store that has both marketing and managing department?"
        },
        {
            "sample_id": 4752,
            "gold_sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
            "gold_complexity": 9,
            "vt": "SELECT staff.staff_name, staff.staff_gender FROM staff JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE staff_department_assignments.date_assigned_from LIKE None.\"2016%\"",
            "ba": "The virtual table describes the names and genders of staff members from the 'staff' table who have been assigned to a department starting from a specific year. The query joins the 'staff' table with the 'staff_department_assignments' table to filter staff based on their assignment date.",
            "question": "Return the name and gender of the staff who was assigned in 2016."
        },
        {
            "sample_id": 4725,
            "gold_sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
            "gold_complexity": 11,
            "vt": "SELECT products.product_type_code, products.product_name, products.product_price FROM product_suppliers JOIN products AS T2 ON T1.product_id = T2.product_id WHERE product_suppliers.supplier_id = [placeholder-type:numeric]",
            "ba": "The virtual table provides a view of product details including the type code, name, and price of products supplied by a specific supplier. The placeholder in the WHERE clause represents the unique identifier of the supplier.",
            "question": "Return the product type, name, and price for products supplied by supplier 3."
        },
        {
            "sample_id": 4746,
            "gold_sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT customer_orders.customer_id FROM customer_orders WHERE customer_orders.order_date > (SELECT MIN(customer_orders.order_date) FROM Customer_Orders WHERE order_status_code = \"Cancelled\")",
            "ba": "The virtual table identifies unique customers from the 'customer_orders' table who have placed orders after the earliest cancelled order date. The query filters customer orders based on the order date, ensuring that only those customers who have made orders after a specific point in time are selected.",
            "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled."
        },
        {
            "sample_id": 4747,
            "gold_sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT customer_orders.customer_id FROM customer_orders WHERE customer_orders.order_date > (SELECT MIN(customer_orders.order_date) FROM Customer_Orders WHERE order_status_code = \"Cancelled\")",
            "ba": "The virtual table retrieves a distinct list of customer IDs from the 'customer_orders' table for orders placed after the earliest cancelled order date.",
            "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?"
        },
        {
            "sample_id": 4760,
            "gold_sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
            "gold_complexity": 11,
            "vt": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000",
            "ba": "The virtual table identifies products that have been ordered more than three times or have a total purchase amount exceeding a specified threshold from suppliers. It combines results from two different tables: 'Order_Items' and 'Product_Suppliers'.",
            "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000."
        },
        {
            "sample_id": 4721,
            "gold_sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM department_stores JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE department_store_chain.dept_store_chain_name = None.\"south\"",
            "ba": "The virtual table counts the number of department stores that belong to a specific department store chain. It joins the 'department_stores' table with the 'department_store_chain' table to filter the results based on the name of the department store chain.",
            "question": "Count the number of stores the chain South has."
        },
        {
            "sample_id": 4785,
            "gold_sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_id, customers.customer_name FROM customers WHERE customers.customer_address LIKE None.\"%wy%\" AND customers.payment_method_code <> None.\"credit card\"",
            "ba": "The virtual table describes the customer IDs and names from the 'customers' table who have an address containing a specific substring and do not use a specific payment method. The placeholders in the WHERE clause represent the substring to search for in the address and the payment method to exclude.",
            "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?"
        },
        {
            "sample_id": 4705,
            "gold_sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT products.product_id, products.product_type_code FROM products ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and type codes of products from the 'products' table, ordered by their price. The placeholder in the LIMIT clause allows the user to specify the maximum number of products to retrieve.",
            "question": "Give the id and product type of the product with the lowest price."
        },
        {
            "sample_id": 4724,
            "gold_sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
            "gold_complexity": 11,
            "vt": "SELECT products.product_type_code, products.product_name, products.product_price FROM product_suppliers JOIN products AS T2 ON T1.product_id = T2.product_id WHERE product_suppliers.supplier_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the product type code, product name, and product price from the 'products' table that are supplied by a specific supplier. The placeholder in the WHERE clause represents the unique identifier of the supplier.",
            "question": "Give me the product type, name and price for all the products supplied by supplier id 3."
        },
        {
            "sample_id": 4782,
            "gold_sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
            "gold_complexity": 11,
            "vt": "SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Sales Person\" EXCEPT SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\"",
            "ba": "The virtual table describes the names and genders of staff members who are assigned the job title of 'Sales Person' but not those who are assigned the job title of 'Clerical Staff'. The query uses a JOIN to connect the 'staff' table with the 'staff_department_assignments' table based on the staff ID, and it filters the results based on the job title codes.",
            "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff."
        },
        {
            "sample_id": 4713,
            "gold_sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
            "gold_complexity": 8,
            "vt": "SELECT customers.payment_method_code, COUNT(*) FROM customers GROUP BY customers.payment_method_code",
            "ba": "The virtual table summarizes the number of customers grouped by their payment method. It retrieves the payment method code from the 'customers' table and counts the total number of customers for each unique payment method.",
            "question": "How many customers use each payment method?"
        },
        {
            "sample_id": 4707,
            "gold_sql": "SELECT count(DISTINCT product_type_code) FROM products",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT product_type_code) FROM products",
            "ba": "The virtual table provides a count of distinct product types available in the 'products' table. This count helps in understanding the variety of products offered.",
            "question": "Count the number of distinct product types."
        },
        {
            "sample_id": 4753,
            "gold_sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
            "gold_complexity": 9,
            "vt": "SELECT staff.staff_name, staff.staff_gender FROM staff JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE staff_department_assignments.date_assigned_from LIKE None.\"2016%\"",
            "ba": "The virtual table describes the names and genders of staff members from the 'staff' table who have been assigned to a department starting from a specific year. The query joins the 'staff' table with the 'staff_department_assignments' table to filter based on the assignment date.",
            "question": "What are the names and genders of staff who were assigned in 2016?"
        },
        {
            "sample_id": 4788,
            "gold_sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT products.product_name FROM products WHERE products.product_type_code = '[placeholder-type:string]' ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of products from the 'products' table that match a specific product type code. The results are ordered by the product price, and a limit is applied to control the number of products returned.",
            "question": "Find the name of the most expensive hardware product."
        },
        {
            "sample_id": 4736,
            "gold_sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT staff_department_assignments.department_id FROM staff_department_assignments GROUP BY staff_department_assignments.department_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique department IDs from the 'staff_department_assignments' table, grouping the results by department ID and ordering them based on the count of staff assigned to each department. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to return.",
            "question": "What is the id of the department with the least number of staff?"
        },
        {
            "sample_id": 4743,
            "gold_sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT staff.staff_id, staff.staff_name FROM staff JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY staff_department_assignments.date_assigned_to - staff_department_assignments.date_assigned_from LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of staff members along with their unique identifiers from the 'staff' table. It joins the 'staff' table with the 'staff_department_assignments' table to associate each staff member with their department assignments. The results are ordered by the duration of their assignments, calculated as the difference between the end and start dates of their assignments. The query limits the number of results returned based on a specified numeric placeholder.",
            "question": "What is the id and name of the staff who has been assigned for the least amount of time?"
        },
        {
            "sample_id": 4737,
            "gold_sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT staff_department_assignments.department_id FROM staff_department_assignments GROUP BY staff_department_assignments.department_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique department IDs from the 'staff_department_assignments' table, grouping the results by department ID and ordering them based on the count of staff assigned to each department. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to return.",
            "question": "Return the id of the department with the fewest staff assignments."
        },
        {
            "sample_id": 4719,
            "gold_sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",
            "gold_complexity": 8,
            "vt": "SELECT products.product_type_code, AVG(products.product_price) FROM products GROUP BY products.product_type_code",
            "ba": "The virtual table provides a summary of the average price of products categorized by their type. It aggregates the product prices based on the product type code, allowing users to see how different types of products compare in terms of pricing.",
            "question": "Return the average price for each product type."
        },
        {
            "sample_id": 4709,
            "gold_sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
            "gold_complexity": 7,
            "vt": "SELECT addresses.address_details FROM addresses JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE customer_addresses.customer_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the detailed addresses associated with a specific customer from the 'addresses' table. The placeholder in the WHERE clause represents the unique identifier of the customer whose address details are being queried.",
            "question": "What is the address for the customer with id 10?"
        },
        {
            "sample_id": 4779,
            "gold_sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT products.product_name FROM customer_orders JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY products.product_id HAVING COUNT(DISTINCT T1.customer_id) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct product names from the 'products' table that have been ordered by a minimum number of unique customers. It joins the 'customer_orders' table with 'order_items' to link orders to their respective items, and then further joins with the 'products' table to retrieve product details. The results are grouped by product ID and filtered to include only those products that have been ordered by a specified number of distinct customers.",
            "question": "What are the distinct names of products purchased by at least two different customers?"
        },
        {
            "sample_id": 4764,
            "gold_sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
            "gold_complexity": 10,
            "vt": "SELECT product_suppliers.supplier_id FROM product_suppliers GROUP BY product_suppliers.supplier_id HAVING AVG(product_suppliers.total_amount_purchased) > [placeholder-type:numeric] OR AVG(product_suppliers.total_amount_purchased) < [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers of suppliers from the 'product_suppliers' table. It groups the results by supplier ID and filters the groups based on the average total amount purchased, allowing for suppliers whose average total amount purchased is either greater than or less than specified numeric values.",
            "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000."
        },
        {
            "sample_id": 4722,
            "gold_sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT staff.staff_name, staff_department_assignments.job_title_code FROM staff JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY staff_department_assignments.date_assigned_to LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of staff members along with their job titles from the 'staff' and 'staff_department_assignments' tables. It retrieves the staff names and their corresponding job title codes, joining the two tables based on the staff ID. The results are ordered by the end date of their assignments, and a limit is applied to control the number of records returned.",
            "question": "What is the name and job title of the staff who was assigned the latest?"
        },
        {
            "sample_id": 4712,
            "gold_sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
            "gold_complexity": 8,
            "vt": "SELECT customers.payment_method_code, COUNT(*) FROM customers GROUP BY customers.payment_method_code",
            "ba": "The virtual table summarizes the number of customers grouped by their payment method. It retrieves the payment method code from the 'customers' table and counts the total number of customers for each unique payment method.",
            "question": "For each payment method, return how many customers use it."
        },
        {
            "sample_id": 4757,
            "gold_sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
            "gold_complexity": 10,
            "vt": "SELECT suppliers.supplier_name, suppliers.supplier_phone FROM suppliers JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY addresses.address_details",
            "ba": "The virtual table provides a list of supplier names and their corresponding phone numbers from the 'suppliers' table. It joins the 'suppliers' table with the 'supplier_addresses' table to link suppliers to their addresses, and further joins with the 'addresses' table to access detailed address information. The results are ordered by the address details, allowing users to see suppliers organized by their address descriptions.",
            "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?"
        },
        {
            "sample_id": 4756,
            "gold_sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
            "gold_complexity": 10,
            "vt": "SELECT suppliers.supplier_name, suppliers.supplier_phone FROM suppliers JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY addresses.address_details",
            "ba": "The virtual table provides a list of supplier names and their corresponding phone numbers from the 'suppliers' table. It joins the 'supplier_addresses' table to link suppliers with their addresses, and further joins the 'addresses' table to retrieve detailed address descriptions. The results are ordered by the address details, allowing users to see suppliers organized by their address information.",
            "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses."
        },
        {
            "sample_id": 4703,
            "gold_sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT product_suppliers.product_id FROM product_suppliers ORDER BY product_suppliers.total_amount_purchased LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers of products supplied by suppliers, ordered by the total amount purchased from each supplier. The placeholder in the LIMIT clause allows the user to specify how many product IDs they want to retrieve.",
            "question": "Give the ids of the three products purchased in the largest amounts."
        },
        {
            "sample_id": 4738,
            "gold_sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
            "gold_complexity": 9,
            "vt": "SELECT products.product_type_code, MAX(products.product_price), MIN(products.product_price) FROM products GROUP BY products.product_type_code",
            "ba": "The virtual table summarizes the product types and their price ranges from the 'products' table. It displays the product type code along with the maximum and minimum prices for each type, allowing users to understand the pricing structure across different product categories.",
            "question": "For each product type, return the maximum and minimum price."
        },
        {
            "sample_id": 4720,
            "gold_sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM department_stores JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE department_store_chain.dept_store_chain_name = None.\"south\"",
            "ba": "The virtual table counts the number of department stores that belong to a specific department store chain. It joins the 'department_stores' table with the 'department_store_chain' table to filter the results based on the name of the department store chain.",
            "question": "How many department stores does the store chain South have?"
        },
        {
            "sample_id": 4745,
            "gold_sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
            "gold_complexity": 8,
            "vt": "SELECT products.product_name, products.product_id FROM products WHERE products.product_price BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and IDs of products from the 'products' table that fall within a specified price range. The placeholders in the WHERE clause represent the minimum and maximum price limits.",
            "question": "What are the names and ids of products costing between 600 and 700?"
        },
        {
            "sample_id": 4715,
            "gold_sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT order_items.product_id FROM order_items GROUP BY order_items.product_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique product identifiers from the 'order_items' table, grouping them to count how many times each product has been ordered. The results are then ordered by the count of orders in descending order, and a limit is applied to restrict the number of products returned based on a specified numeric value.",
            "question": "Give the product id for the product that was ordered most frequently."
        },
        {
            "sample_id": 4767,
            "gold_sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT AVG(product_suppliers.total_amount_purchased), AVG(product_suppliers.total_value_purchased) FROM product_suppliers WHERE product_suppliers.supplier_id = (SELECT product_suppliers.supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table calculates the average total amount and average total value of products purchased from the most frequently supplying supplier. It retrieves data from the 'product_suppliers' table, filtering by the supplier ID of the supplier that has supplied the highest number of products.",
            "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products."
        },
        {
            "sample_id": 4742,
            "gold_sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT staff.staff_id, staff.staff_name FROM staff JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY staff_department_assignments.date_assigned_to - staff_department_assignments.date_assigned_from LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and names of staff members from the 'staff' table who are assigned to departments, along with their assignment dates. The results are ordered by the duration of their assignments, and a limit is applied to control the number of records returned.",
            "question": "Find the id and name of the staff who has been assigned for the shortest period."
        },
        {
            "sample_id": 4761,
            "gold_sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
            "gold_complexity": 11,
            "vt": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000",
            "ba": "The virtual table identifies products that have been ordered more than three times or have a total purchase amount exceeding a specified threshold from suppliers. It combines results from two different tables: 'Order_Items' and 'Product_Suppliers'.",
            "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?"
        },
        {
            "sample_id": 4723,
            "gold_sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT staff.staff_name, staff_department_assignments.job_title_code FROM staff JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY staff_department_assignments.date_assigned_to LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of staff members along with their job titles from the 'staff' and 'staff_department_assignments' tables. It joins these two tables based on the staff ID, allowing us to see which staff member is assigned to which job title. The results are ordered by the end date of their assignment, and a limit is applied to control the number of records returned.",
            "question": "Return the name and job title of the staff with the latest date assigned."
        },
        {
            "sample_id": 4755,
            "gold_sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT staff.staff_name FROM staff JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY staff_department_assignments.staff_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of staff members from the 'staff' table who are assigned to one or more departments, filtering for those who have assignments in more than a specified number of departments. The placeholder in the HAVING clause represents the minimum count of department assignments required for a staff member to be included in the results.",
            "question": "What are the names of staff who have been assigned multiple jobs?"
        },
        {
            "sample_id": 4776,
            "gold_sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
            "gold_complexity": 10,
            "vt": "SELECT customer_orders.order_id, customer_orders.customer_id FROM customer_orders WHERE customer_orders.order_status_code = None.\"cancelled\" ORDER BY customer_orders.order_date",
            "ba": "The virtual table provides a list of order IDs and customer IDs from the 'customer_orders' table for orders that are not cancelled. The results are sorted by the date the orders were placed.",
            "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates."
        },
        {
            "sample_id": 4710,
            "gold_sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
            "gold_complexity": 9,
            "vt": "SELECT staff.staff_id, staff.staff_gender FROM staff JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE staff_department_assignments.job_title_code = None.\"department manager\"",
            "ba": "The virtual table describes the staff members who are assigned to a department as department managers. It retrieves the unique identifier and gender of each staff member from the 'staff' table, while filtering the results based on the job title code for department managers in the 'staff_department_assignments' table.",
            "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?"
        },
        {
            "sample_id": 4729,
            "gold_sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
            "gold_complexity": 11,
            "vt": "SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"New\" INTERSECT SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\"",
            "ba": "The virtual table provides a list of customer names and their addresses from the 'customers' table. It retrieves customers who have orders with a status of 'New' and also those with a status of 'Pending'. The use of INTERSECT ensures that only customers who meet both criteria are included in the result.",
            "question": "What are the names and addressed of customers who have both New and Pending orders?"
        },
        {
            "sample_id": 4758,
            "gold_sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
            "gold_complexity": 8,
            "vt": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
            "ba": "The virtual table combines the contact phone numbers of customers and suppliers. It retrieves the 'customer_phone' from the 'customers' table and the 'supplier_phone' from the 'suppliers' table, allowing for a unified view of phone contacts from both entities.",
            "question": "What are the phone numbers of all customers and suppliers."
        },
        {
            "sample_id": 4717,
            "gold_sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT customers.customer_name, customers.customer_phone, customers.customer_email FROM customers JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_orders.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of customer names, phone numbers, and email addresses from the 'customers' table. It joins with the 'customer_orders' table to associate each customer with their orders. The results are grouped by customer ID to aggregate the order counts, and the final output is ordered by the number of orders each customer has placed, limiting the results to a specified number of customers.",
            "question": "Return the name, phone number and email address for the customer with the most orders."
        },
        {
            "sample_id": 4769,
            "gold_sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
            "gold_complexity": 5,
            "vt": "SELECT MAX(customers.customer_code), MIN(customers.customer_code) FROM customers",
            "ba": "The virtual table provides the maximum and minimum customer codes from the 'customers' table. The placeholders represent the values that will be dynamically filled in later.",
            "question": "Return the maximum and minimum customer codes."
        },
        {
            "sample_id": 4733,
            "gold_sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
            "gold_complexity": 11,
            "vt": "SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\"",
            "ba": "The virtual table identifies department stores that have both a marketing and a managing department. It retrieves the unique identifiers and names of these stores by performing an intersection of two queries that join the 'departments' and 'department_stores' tables based on the department's name.",
            "question": "What are the ids and names of department stores with both marketing and managing departments?"
        },
        {
            "sample_id": 4787,
            "gold_sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
            "gold_complexity": 6,
            "vt": "SELECT AVG(products.product_price) FROM products WHERE products.product_type_code = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average price of products from the 'products' table that belong to a specific product type. The placeholder in the WHERE clause represents the product type code.",
            "question": "What is the average price of clothes?"
        }
    ],
    "ship_mission": [
        {
            "sample_id": 3994,
            "gold_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC",
            "gold_complexity": 6,
            "vt": "SELECT ship.name FROM ship ORDER BY ship.tonnage",
            "ba": "The virtual table lists the names of ships from the 'ship' table, ordered by their tonnage. This allows users to see the ships sorted by their weight capacity.",
            "question": "what are the names of the ships ordered by ascending tonnage?"
        },
        {
            "sample_id": 3993,
            "gold_sql": "SELECT Name FROM ship ORDER BY Tonnage ASC",
            "gold_complexity": 6,
            "vt": "SELECT ship.name FROM ship ORDER BY ship.tonnage",
            "ba": "The virtual table lists the names of ships from the 'ship' table, ordered by their tonnage, which indicates the total weight capacity of each ship.",
            "question": "List the name of ships in ascending order of tonnage."
        },
        {
            "sample_id": 4013,
            "gold_sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928",
            "gold_complexity": 7,
            "vt": "SELECT ship.name FROM mission JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE mission.launched_year > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of ships that were involved in missions launched after a specific year. It combines data from the 'mission' table and the 'ship' table using a join on the ship identifier, filtering the results based on the launched year of the missions.",
            "question": "Show names of ships involved in a mission launched after 1928."
        },
        {
            "sample_id": 4002,
            "gold_sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT ship.name FROM ship ORDER BY ship.tonnage LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of ships from the 'ship' table, ordered by their tonnage, and limits the results to a specified number of entries. The placeholder in the LIMIT clause represents the maximum number of ship names to return.",
            "question": "What is the ship with the largest amount of tonnage called?"
        },
        {
            "sample_id": 3997,
            "gold_sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
            "gold_complexity": 6,
            "vt": "SELECT ship.name FROM ship WHERE ship.nationality <> None.\"united states\"",
            "ba": "The virtual table lists the names of ships from the 'ship' table that are not registered or owned by the United States. The placeholder in the WHERE clause indicates that the nationality should be specified, excluding the United States.",
            "question": "List the name of ships whose nationality is not \"United States\"."
        },
        {
            "sample_id": 3998,
            "gold_sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
            "gold_complexity": 6,
            "vt": "SELECT ship.name FROM ship WHERE ship.nationality <> None.\"united states\"",
            "ba": "The virtual table lists the names of ships from the 'ship' table that are not registered or owned by the United States. The placeholder in the WHERE clause indicates that the nationality should not be 'united states'.",
            "question": "What are the names of the ships that are not from the United States?"
        },
        {
            "sample_id": 4017,
            "gold_sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
            "gold_complexity": 10,
            "vt": "SELECT ship.name FROM ship WHERE NOT mission.ship_id IN (SELECT mission.ship_id FROM mission)",
            "ba": "The virtual table lists the names of ships from the 'ship' table that are not associated with any missions in the 'mission' table. The query uses a subquery to identify ship IDs that have missions and filters out those from the main selection.",
            "question": "List the name of ships that are not involved in any mission"
        },
        {
            "sample_id": 4012,
            "gold_sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
            "gold_complexity": 9,
            "vt": "SELECT mission.code, mission.fate, ship.name FROM mission JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
            "ba": "The virtual table describes the mission code, fate, and ship name by joining the 'mission' and 'ship' tables based on the ship identifier. The placeholders represent the specific values for filtering or further querying.",
            "question": "What are the mission codes, fates, and names of the ships involved?"
        },
        {
            "sample_id": 4020,
            "gold_sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000",
            "gold_complexity": 9,
            "vt": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
            "ba": "The virtual table identifies the types of ships from the 'ship' table that have a tonnage greater than 6000 and also those that have a tonnage less than 4000. The intersection of these two sets will yield the types of ships that meet both criteria, which is logically impossible since a ship cannot simultaneously have a tonnage greater than 6000 and less than 4000.",
            "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?"
        },
        {
            "sample_id": 4011,
            "gold_sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
            "gold_complexity": 9,
            "vt": "SELECT mission.code, mission.fate, ship.name FROM mission JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
            "ba": "The virtual table describes the mission code, fate, and ship name by joining the 'mission' and 'ship' tables based on the ship identifier. The placeholders represent the relevant columns from both tables, allowing users to filter or modify the query as needed.",
            "question": "Show codes and fates of missions, and names of ships involved."
        },
        {
            "sample_id": 4009,
            "gold_sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE",
            "gold_complexity": 8,
            "vt": "SELECT ship.type, AVG(ship.tonnage) FROM ship GROUP BY ship.type",
            "ba": "The virtual table provides the average tonnage of ships categorized by their type from the 'ship' table. The query groups the results by the 'type' column, allowing for an aggregated view of the average tonnage for each ship classification.",
            "question": "Show different types of ships and the average tonnage of ships of each type."
        },
        {
            "sample_id": 4006,
            "gold_sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT ship.type FROM ship GROUP BY ship.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different types of ships from the 'ship' table, grouped by their classification. It counts the number of missions associated with each ship type and orders them accordingly. The placeholder in the LIMIT clause allows for specifying the maximum number of ship types to return.",
            "question": "What is the most common type of ships?"
        },
        {
            "sample_id": 4015,
            "gold_sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT mission.fate FROM mission JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE ship.nationality = None.\"united states\"",
            "ba": "The virtual table retrieves distinct outcomes or statuses of missions from the 'mission' table that are associated with ships registered under the nationality 'united states'.",
            "question": "Show the distinct fate of missions that involve ships with nationality \"United States\""
        },
        {
            "sample_id": 4000,
            "gold_sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"",
            "gold_complexity": 7,
            "vt": "SELECT ship.name FROM ship WHERE ship.nationality = None.\"united states\" OR ship.nationality = None.\"united kingdom\"",
            "ba": "The virtual table retrieves the names of ships from the 'ship' table that are registered under either the United States or the United Kingdom. The placeholders in the WHERE clause represent the nationalities of the ships being queried.",
            "question": "What are the names of the ships  that are from either the US or the UK?"
        },
        {
            "sample_id": 4003,
            "gold_sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
            "gold_complexity": 8,
            "vt": "SELECT ship.type, COUNT(*) FROM ship GROUP BY ship.type",
            "ba": "The virtual table summarizes the count of ships categorized by their type from the 'ship' table. The query groups the results by the 'type' column, allowing users to see how many ships belong to each type.",
            "question": "Show different types of ships and the number of ships of each type."
        },
        {
            "sample_id": 4005,
            "gold_sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT ship.type FROM ship GROUP BY ship.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the types of ships from the 'ship' table, grouping them to count how many ships belong to each type. The results are ordered by the count of ships in each type, and a limit is applied to restrict the number of types returned based on a specified numeric value.",
            "question": "Please show the most common type of ships."
        },
        {
            "sample_id": 3992,
            "gold_sql": "SELECT count(*) FROM ship",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ship",
            "ba": "The virtual table counts the total number of ships recorded in the 'ship' table.",
            "question": "What is the number of ships?"
        },
        {
            "sample_id": 3996,
            "gold_sql": "SELECT TYPE ,  Nationality FROM ship",
            "gold_complexity": 6,
            "vt": "SELECT ship.type, ship.nationality FROM ship",
            "ba": "The virtual table describes the type and nationality of ships from the 'ship' table.",
            "question": "What are the types and nationalities of every ship?"
        }
    ],
    "flight_2": [
        {
            "sample_id": 7175,
            "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
            "gold_complexity": 6,
            "vt": "SELECT airlines.abbreviation FROM airlines WHERE airlines.airline = None.\"jetblue airways\"",
            "ba": "The virtual table retrieves the abbreviation of a specific airline from the 'airlines' table based on the airline's name.",
            "question": "Which abbreviation corresponds to Jetblue Airways?"
        },
        {
            "sample_id": 7184,
            "gold_sql": "SELECT count(*) FROM FLIGHTS",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM flights",
            "ba": "The virtual table provides a count of all flights recorded in the 'flights' table. This count represents the total number of flights available in the database.",
            "question": "How many flights do we have?"
        },
        {
            "sample_id": 7210,
            "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM airlines JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE airlines.airline = None.\"united airlines\" AND flights.sourceairport = None.\"ahd\"",
            "ba": "The virtual table counts the number of flights operated by a specific airline from a specific source airport. It joins the 'airlines' table with the 'flights' table based on the airline's unique identifier and filters the results for a particular airline and source airport.",
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?"
        },
        {
            "sample_id": 7209,
            "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM airlines JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE airlines.airline = None.\"united airlines\" AND flights.destairport = None.\"asy\"",
            "ba": "The virtual table counts the number of flights operated by a specific airline to a specific destination airport. It joins the 'airlines' table with the 'flights' table based on the airline's unique identifier and filters the results for a particular airline and destination airport.",
            "question": "Count the number of United Airlines flights arriving in ASY Airport."
        },
        {
            "sample_id": 7221,
            "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT airports.airportcode FROM airports JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY airports.airportcode ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique airport codes from the 'airports' table that are either source or destination airports for flights. The results are grouped by airport code and ordered by the number of flights associated with each airport, limited to a specified number of results.",
            "question": "Give the code of the airport with the least flights."
        },
        {
            "sample_id": 7240,
            "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
            "gold_complexity": 6,
            "vt": "SELECT flights.flightno FROM flights WHERE flights.sourceairport = None.\"apg\"",
            "ba": "The virtual table retrieves the flight numbers from the 'flights' table for flights departing from a specific source airport. The placeholder in the WHERE clause represents the airport code from which the flight is departing.",
            "question": "What are flight numbers of flights departing from Airport \"APG\"?"
        },
        {
            "sample_id": 7218,
            "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT airports.airportcode FROM airports JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY airports.airportcode ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique airport codes from the 'airports' table that are either source or destination airports for flights. The results are grouped by airport code and ordered by the number of flights associated with each airport, limited to a specified number of results.",
            "question": "What is the code of airport that has the highest number of flights?"
        },
        {
            "sample_id": 7206,
            "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM flights JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE airlines.airline = None.\"jetblue airways\"",
            "ba": "The virtual table provides a count of flights operated by a specific airline, in this case, 'jetblue airways'. It joins the 'flights' table with the 'airlines' table to filter the results based on the airline's name.",
            "question": "How many flights does airline 'JetBlue Airways' have?"
        },
        {
            "sample_id": 7172,
            "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
            "gold_complexity": 6,
            "vt": "SELECT airlines.country FROM airlines WHERE airlines.airline = None.\"jetblue airways\"",
            "ba": "The virtual table retrieves the country of a specific airline from the 'airlines' table. The placeholder in the WHERE clause represents the name of the airline being queried.",
            "question": "Which country does Airline \"JetBlue Airways\" belong to?"
        },
        {
            "sample_id": 7228,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
            "gold_complexity": 7,
            "vt": "SELECT airlines.airline FROM airlines JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE flights.destairport = None.\"ahd\"",
            "ba": "The virtual table lists the names of airlines from the 'airlines' table that operate flights arriving at a specific airport. The query joins the 'airlines' table with the 'flights' table based on the airline's unique identifier, filtering for flights that arrive at a specified destination airport using a placeholder.",
            "question": "What are airlines that have flights arriving at airport 'AHD'?"
        },
        {
            "sample_id": 7233,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "ba": "The virtual table lists the airlines that operate flights departing from a specific airport, excluding those that also operate flights from another specified airport. The query uses a JOIN operation to connect the 'airlines' and 'flights' tables based on the airline's unique identifier, filtering the results based on the source airport codes provided.",
            "question": "Which airlines have departures from CVO but not from APG airports?"
        },
        {
            "sample_id": 7236,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
            "gold_complexity": 9,
            "vt": "SELECT airlines.airline FROM airlines JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY airlines.airline HAVING COUNT(*) < [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of airlines from the 'airlines' table that operate fewer flights than a specified number. It joins the 'airlines' table with the 'flights' table based on the airline's unique identifier and groups the results by airline name, applying a condition to filter those with a flight count below a certain threshold.",
            "question": "Find all airlines that have fewer than 200 flights."
        },
        {
            "sample_id": 7249,
            "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM flights JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE airports.city = None.\"aberdeen\" OR airports.city = None.\"abilene\"",
            "ba": "The virtual table counts the number of flights that either depart from or arrive at specific cities, namely 'aberdeen' or 'abilene'. It joins the 'flights' table with the 'airports' table to filter the results based on the city associated with the airports.",
            "question": "How many flights land in Aberdeen or Abilene?"
        },
        {
            "sample_id": 7238,
            "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
            "gold_complexity": 7,
            "vt": "SELECT flights.flightno FROM flights JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE airlines.airline = None.\"united airlines\"",
            "ba": "The virtual table retrieves the flight numbers from the 'flights' table for a specific airline. It joins the 'flights' table with the 'airlines' table to filter the results based on the airline's name. The placeholder in the WHERE clause represents the name of the airline being queried.",
            "question": "What are flight numbers of Airline \"United Airlines\"?"
        },
        {
            "sample_id": 7202,
            "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM flights JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE airports.city = None.\"aberdeen\"",
            "ba": "The virtual table counts the number of flights arriving at a specific airport located in the city of Aberdeen. It joins the 'flights' table with the 'airports' table to filter the results based on the airport code associated with Aberdeen.",
            "question": "How many flights arriving in Aberdeen city?"
        },
        {
            "sample_id": 7195,
            "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "gold_complexity": 6,
            "vt": "SELECT airports.airportname FROM airports WHERE airports.city = None.\"aberdeen\"",
            "ba": "The virtual table describes the names of airports located in a specific city from the 'airports' table. The placeholder in the WHERE clause represents the city name.",
            "question": "What are the names of airports in Aberdeen?"
        },
        {
            "sample_id": 7232,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "ba": "The virtual table lists the airlines that operate flights departing from a specific airport, excluding those that also operate flights from another specified airport. It combines data from the 'airlines' and 'flights' tables using a join on the airline identifier, filtering based on the source airport codes provided.",
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'."
        },
        {
            "sample_id": 7234,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
            "gold_complexity": 9,
            "vt": "SELECT airlines.airline FROM airlines JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY airlines.airline HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of airlines from the 'airlines' table that operate more than a specified number of flights. The query joins the 'airlines' table with the 'flights' table based on the airline's unique identifier and groups the results by airline name, applying a condition to filter those with a flight count exceeding a placeholder for numeric values.",
            "question": "Find all airlines that have at least 10 flights."
        },
        {
            "sample_id": 7244,
            "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "gold_complexity": 7,
            "vt": "SELECT flights.flightno FROM flights JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE airports.city = None.\"aberdeen\"",
            "ba": "The virtual table retrieves the flight numbers from the 'flights' table for flights departing from a specific airport located in the city of Aberdeen. The query joins the 'flights' table with the 'airports' table to filter the results based on the city associated with the airport.",
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?"
        },
        {
            "sample_id": 7185,
            "gold_sql": "SELECT count(*) FROM FLIGHTS",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM flights",
            "ba": "The virtual table provides a count of all flights recorded in the 'flights' table. This count represents the total number of flights available in the database.",
            "question": "Return the number of flights."
        },
        {
            "sample_id": 7239,
            "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
            "gold_complexity": 7,
            "vt": "SELECT flights.flightno FROM flights JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE airlines.airline = None.\"united airlines\"",
            "ba": "The virtual table retrieves the flight numbers from the 'flights' table for a specific airline. It joins the 'flights' table with the 'airlines' table to filter the results based on the airline's name. The placeholder in the WHERE clause represents the name of the airline being queried.",
            "question": "Which flight numbers correspond to United Airlines flights?"
        },
        {
            "sample_id": 7181,
            "gold_sql": "SELECT count(*) FROM AIRLINES",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM airlines",
            "ba": "The virtual table provides a count of all airlines listed in the 'airlines' table. This count represents the total number of unique airlines available in the database.",
            "question": "What is the total number of airlines?"
        },
        {
            "sample_id": 7199,
            "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM flights WHERE flights.destairport = None.\"ato\"",
            "ba": "The virtual table counts the number of flights arriving at a specific airport identified by its code. The placeholder in the WHERE clause represents the airport code for which the count of flights is being queried.",
            "question": "Count the number of flights into ATO."
        },
        {
            "sample_id": 7231,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "ba": "The virtual table identifies airlines that operate flights departing from two specific airports. It uses a join between the 'airlines' and 'flights' tables to find the airlines associated with each flight. The query filters the results to include only those airlines that have flights departing from both specified airports, using an INTERSECT operation to ensure that only common airlines are returned.",
            "question": "Which airlines have departing flights from both APG and CVO airports?"
        },
        {
            "sample_id": 7213,
            "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM flights JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE airports.city = None.\"aberdeen\" AND airlines.airline = None.\"united airlines\"",
            "ba": "The virtual table counts the number of flights operated by a specific airline that arrive at a specific airport located in a particular city. It joins the 'flights' table with the 'airports' table to filter by the destination airport's city and with the 'airlines' table to filter by the airline's name.",
            "question": "Count the number of United Airlines flights that arrive in Aberdeen."
        },
        {
            "sample_id": 7196,
            "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM flights WHERE flights.sourceairport = None.\"apg\"",
            "ba": "The virtual table counts the number of flights departing from a specific airport identified by its code. The placeholder in the WHERE clause represents the airport code from which the flights are sourced.",
            "question": "How many flights depart from 'APG'?"
        },
        {
            "sample_id": 7204,
            "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM flights JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE airports.city = None.\"ashley\" AND airports.city = None.\"aberdeen\"",
            "ba": "The virtual table counts the number of flights from the 'flights' table, joining it with the 'airports' table twice to get information about both the source and destination airports. It filters the results based on the cities associated with the airports, specifically looking for flights that either depart from or arrive at airports located in specified cities.",
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?"
        },
        {
            "sample_id": 7179,
            "gold_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
            "gold_complexity": 8,
            "vt": "SELECT airports.airportcode, airports.airportname FROM airports WHERE airports.city = None.\"anthony\"",
            "ba": "The virtual table describes the airport code and name of airports located in a specific city from the 'airports' table. The placeholder in the WHERE clause represents the unique identifier for the city.",
            "question": "Give the airport code and airport name corresonding to the city Anthony."
        },
        {
            "sample_id": 7192,
            "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
            "gold_complexity": 6,
            "vt": "SELECT airports.airportname FROM airports WHERE airports.airportcode = None.\"ako\"",
            "ba": "The virtual table describes the full name of an airport from the 'airports' table based on a specific airport code. The placeholder in the WHERE clause represents the unique code assigned to the airport.",
            "question": "What is the airport name for airport 'AKO'?"
        },
        {
            "sample_id": 7197,
            "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM flights WHERE flights.sourceairport = None.\"apg\"",
            "ba": "The virtual table counts the number of flights departing from a specific airport identified by its code. The placeholder in the WHERE clause represents the airport code from which the flights are sourced.",
            "question": "Count the number of flights departing from 'APG'."
        },
        {
            "sample_id": 7188,
            "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM airlines WHERE airlines.country = None.\"usa\"",
            "ba": "The virtual table counts the number of airlines based in a specific country from the 'airlines' table. The placeholder in the WHERE clause represents the country name.",
            "question": "How many airlines are from USA?"
        },
        {
            "sample_id": 7220,
            "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT airports.airportcode FROM airports JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY airports.airportcode ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique airport codes from the 'airports' table that are either source or destination airports for flights. The results are grouped by airport code and ordered by the number of flights associated with each airport, limited to a specified number of results.",
            "question": "What is the code of airport that has fewest number of flights?"
        },
        {
            "sample_id": 7200,
            "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM flights JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE airports.city = None.\"aberdeen\"",
            "ba": "The virtual table counts the number of flights departing from a specific airport located in a city, which is identified by its name. It joins the 'flights' table with the 'airports' table to filter the results based on the city of the airport.",
            "question": "How many flights depart from City Aberdeen?"
        },
        {
            "sample_id": 7229,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
            "gold_complexity": 7,
            "vt": "SELECT airlines.airline FROM airlines JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE flights.destairport = None.\"ahd\"",
            "ba": "The virtual table describes the names of airlines from the 'airlines' table that operate flights arriving at a specific airport. The placeholder in the WHERE clause represents the airport code for the destination.",
            "question": "Which airlines have a flight with destination airport AHD?"
        },
        {
            "sample_id": 7212,
            "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM flights JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE airports.city = None.\"aberdeen\" AND airlines.airline = None.\"united airlines\"",
            "ba": "The virtual table counts the number of flights operated by a specific airline that arrive at a particular airport located in a specified city. It joins the 'flights' table with the 'airports' table to filter by the destination airport's city and with the 'airlines' table to filter by the airline's name.",
            "question": "How many United Airlines flights go to City 'Aberdeen'?"
        },
        {
            "sample_id": 7180,
            "gold_sql": "SELECT count(*) FROM AIRLINES",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM airlines",
            "ba": "The virtual table provides a count of all airlines listed in the 'airlines' table.",
            "question": "How many airlines do we have?"
        },
        {
            "sample_id": 7216,
            "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT airports.city FROM airports JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY airports.city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of cities from the 'airports' table where flights are departing from, grouped by city and ordered by the number of flights, with a limit on the number of results returned.",
            "question": "Which city has most number of departing flights?"
        },
        {
            "sample_id": 7251,
            "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "gold_complexity": 13,
            "vt": "SELECT airports.airportname FROM airports WHERE NOT airports.airportcode IN (SELECT flights.sourceairport FROM flights UNION SELECT flights.destairport FROM flights)",
            "ba": "The virtual table lists the names of airports that do not serve as departure or arrival points for any flights. It filters out airports based on their codes, ensuring that only those airports without any associated flights are included.",
            "question": "Which airports do not have departing or arriving flights?"
        },
        {
            "sample_id": 7246,
            "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "gold_complexity": 7,
            "vt": "SELECT flights.flightno FROM flights JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE airports.city = None.\"aberdeen\"",
            "ba": "The virtual table retrieves the flight numbers from the 'flights' table for flights arriving at airports located in a specific city. The query joins the 'flights' table with the 'airports' table to filter based on the city name, using a placeholder for the city.",
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?"
        },
        {
            "sample_id": 7245,
            "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "gold_complexity": 7,
            "vt": "SELECT flights.flightno FROM flights JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE airports.city = None.\"aberdeen\"",
            "ba": "The virtual table retrieves the flight numbers from the 'flights' table for flights departing from a specific airport located in the city of Aberdeen. It joins the 'flights' table with the 'airports' table to filter based on the airport's city.",
            "question": "Give the flight numbers of flights leaving from Aberdeen."
        },
        {
            "sample_id": 7186,
            "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
            "gold_complexity": 6,
            "vt": "SELECT airlines.airline FROM airlines WHERE airlines.abbreviation = None.\"ual\"",
            "ba": "The virtual table describes the name of an airline from the 'airlines' table based on its abbreviation. The placeholder in the WHERE clause represents the abbreviation of the airline.",
            "question": "Which airline has abbreviation 'UAL'?"
        },
        {
            "sample_id": 7182,
            "gold_sql": "SELECT count(*) FROM AIRPORTS",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM airports",
            "ba": "The virtual table provides a count of all airports listed in the 'airports' table.",
            "question": "How many airports do we have?"
        },
        {
            "sample_id": 7176,
            "gold_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
            "gold_complexity": 8,
            "vt": "SELECT airlines.airline, airlines.abbreviation FROM airlines WHERE airlines.country = None.\"usa\"",
            "ba": "The virtual table describes the names and abbreviations of airlines from the 'airlines' table that are based in a specific country. The placeholder in the WHERE clause represents the country's name.",
            "question": "List all airline names and their abbreviations in \"USA\"."
        },
        {
            "sample_id": 7227,
            "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
            "gold_complexity": 7,
            "vt": "SELECT airlines.airline FROM airlines JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE flights.sourceairport = None.\"ahd\"",
            "ba": "The virtual table describes the names of airlines from the 'airlines' table that operate flights departing from a specific airport. The placeholder in the WHERE clause represents the airport code from which the flight is departing.",
            "question": "Which airlines have a flight with source airport AHD?"
        },
        {
            "sample_id": 7208,
            "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM airlines JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE airlines.airline = None.\"united airlines\" AND flights.destairport = None.\"asy\"",
            "ba": "The virtual table counts the number of flights operated by a specific airline to a specific destination. It joins the 'airlines' table with the 'flights' table based on the airline's unique identifier and filters the results for a particular airline and destination airport.",
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?"
        },
        {
            "sample_id": 7214,
            "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT airports.city FROM airports JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY airports.city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique cities from the 'airports' table where flights arrive, grouped by city and ordered by the number of flights arriving at each city. The placeholder in the LIMIT clause allows for specifying the maximum number of cities to return.",
            "question": "Which city has most number of arriving flights?"
        },
        {
            "sample_id": 7198,
            "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM flights WHERE flights.destairport = None.\"ato\"",
            "ba": "The virtual table counts the number of flights arriving at a specific airport identified by its code. The placeholder in the WHERE clause represents the airport code for which the count of flights is being queried.",
            "question": "How many flights have destination ATO?"
        },
        {
            "sample_id": 7248,
            "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM flights JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE airports.city = None.\"aberdeen\" OR airports.city = None.\"abilene\"",
            "ba": "The virtual table counts the number of flights that either depart from or arrive at specific airports located in the cities of Aberdeen or Abilene. It joins the 'flights' table with the 'airports' table to filter the results based on the city names.",
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene."
        }
    ],
    "medicine_enzyme_interaction": [
        {
            "sample_id": 939,
            "gold_sql": "SELECT max(OMIM) FROM enzyme",
            "gold_complexity": 4,
            "vt": "SELECT MAX(enzyme.omim) FROM enzyme",
            "ba": "The virtual table retrieves the maximum Online Mendelian Inheritance in Man (OMIM) identifier from the 'enzyme' table. This identifier is used to reference genetic conditions and their associated genes.",
            "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?"
        },
        {
            "sample_id": 972,
            "gold_sql": "SELECT count(DISTINCT FDA_approved) FROM medicine",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT FDA_approved) FROM medicine",
            "ba": "The virtual table counts the distinct FDA approval statuses of medicines from the 'medicine' table. The placeholder in the COUNT function represents the unique FDA approval statuses.",
            "question": "How many different FDA approval statuses exist for medicines?"
        },
        {
            "sample_id": 946,
            "gold_sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
            "gold_complexity": 8,
            "vt": "SELECT medicine.name, medicine.trade_name FROM medicine WHERE medicine.fda_approved = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and trade names of medicines from the 'medicine' table that are approved by the FDA. The placeholder in the WHERE clause represents the FDA approval status.",
            "question": "What are the names and trade names of the medcines that are FDA approved?"
        },
        {
            "sample_id": 969,
            "gold_sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
            "gold_complexity": 11,
            "vt": "SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'",
            "ba": "The virtual table lists the names and trade names of medicines that do not interact with enzymes producing Protoporphyrinogen IX. It excludes any medicine that is linked to such an enzyme through the medicine_enzyme_interaction table.",
            "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'."
        },
        {
            "sample_id": 933,
            "gold_sql": "SELECT count(*) FROM enzyme",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM enzyme",
            "ba": "The virtual table provides a count of all unique enzymes recorded in the 'enzyme' table. This count helps in understanding the total number of enzymes available in the database.",
            "question": "How many kinds of enzymes are there?"
        },
        {
            "sample_id": 955,
            "gold_sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
            "gold_complexity": 9,
            "vt": "SELECT medicine_enzyme_interaction.interaction_type FROM medicine_enzyme_interaction JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE enzyme.name = '[placeholder-type:string]' AND medicine.name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the types of interactions between specific medicines and enzymes. It retrieves the interaction type from the 'medicine_enzyme_interaction' table by joining it with the 'medicine' and 'enzyme' tables to filter based on the names of the enzyme and medicine provided as placeholders.",
            "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?"
        },
        {
            "sample_id": 953,
            "gold_sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT enzyme.id, enzyme.name FROM enzyme JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE medicine_enzyme_interaction.interaction_type = '[placeholder-type:string]' GROUP BY enzyme.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of enzyme identifiers and their corresponding names from the 'enzyme' table, filtered by a specific type of interaction with medicines. The query joins the 'enzyme' table with the 'medicine_enzyme_interaction' table to find enzymes that interact with medicines in a specified way. The results are grouped by enzyme ID and ordered by the count of interactions, with a limit on the number of results returned.",
            "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?"
        },
        {
            "sample_id": 959,
            "gold_sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM medicine WHERE medicine.fda_approved = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of medicines from the 'medicine' table that have a specific FDA approval status. The placeholder in the WHERE clause represents the FDA approval status of the medicines.",
            "question": "How many medicines have the FDA approval status 'No' ?"
        },
        {
            "sample_id": 950,
            "gold_sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT medicine.id, medicine.name FROM medicine JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY medicine.id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers and names of medicines from the 'medicine' table that are involved in interactions with enzymes, filtered to include only those medicines that have interactions with a specified minimum number of enzymes. The placeholder in the HAVING clause represents the minimum count of interactions required.",
            "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?"
        },
        {
            "sample_id": 948,
            "gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
            "gold_complexity": 9,
            "vt": "SELECT enzyme.name FROM enzyme JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE medicine.name = '[placeholder-type:string]' AND medicine_enzyme_interaction.interaction_type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of enzymes that interact with a specific medicine under a certain interaction type. The placeholders in the WHERE clause represent the medicine's name and the type of interaction.",
            "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?"
        },
        {
            "sample_id": 966,
            "gold_sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT enzyme.name, enzyme.location, enzyme.product FROM enzyme JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE medicine_enzyme_interaction.interaction_type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct names, locations, and products of enzymes from the 'enzyme' table that interact with medicines in a specific way. The placeholder in the WHERE clause represents the type of interaction between the medicine and enzyme.",
            "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?"
        },
        {
            "sample_id": 937,
            "gold_sql": "SELECT name ,  LOCATION FROM enzyme",
            "gold_complexity": 6,
            "vt": "SELECT enzyme.name, enzyme.location FROM enzyme",
            "ba": "The virtual table describes the names and geographical locations of enzymes from the 'enzyme' table.",
            "question": "List the names and the locations that the enzymes can make an effect."
        },
        {
            "sample_id": 944,
            "gold_sql": "SELECT name FROM enzyme WHERE product != 'Heme'",
            "gold_complexity": 6,
            "vt": "SELECT enzyme.name FROM enzyme WHERE enzyme.product <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of enzymes from the 'enzyme' table that produce a product other than a specified value. The placeholder in the WHERE clause represents the product name that is being excluded.",
            "question": "What are the names of enzymes whose product is not 'Heme'?"
        },
        {
            "sample_id": 945,
            "gold_sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
            "gold_complexity": 8,
            "vt": "SELECT medicine.name, medicine.trade_name FROM medicine WHERE medicine.fda_approved = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and trade names of medicines from the 'medicine' table that are approved by the FDA. The placeholder in the WHERE clause represents the FDA approval status.",
            "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?"
        },
        {
            "sample_id": 968,
            "gold_sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
            "gold_complexity": 10,
            "vt": "SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'",
            "ba": "The virtual table describes the names and trade names of medicines that have both inhibitor and activator interactions with enzymes. It combines results from two queries using an INTERSECT to ensure that only medicines that meet both criteria are included.",
            "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?"
        },
        {
            "sample_id": 942,
            "gold_sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
            "gold_complexity": 10,
            "vt": "SELECT enzyme.product, enzyme.chromosome, enzyme.porphyria FROM enzyme WHERE enzyme.location = '[placeholder-type:string]'",
            "ba": "The virtual table describes the product, chromosome location, and porphyria association of enzymes from the 'enzyme' table that are found in a specific geographical location. The placeholder in the WHERE clause represents the geographical location of the enzyme's activity.",
            "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?"
        },
        {
            "sample_id": 940,
            "gold_sql": "SELECT max(OMIM) FROM enzyme",
            "gold_complexity": 4,
            "vt": "SELECT MAX(enzyme.omim) FROM enzyme",
            "ba": "The virtual table retrieves the maximum Online Mendelian Inheritance in Man (OMIM) identifier from the 'enzyme' table. This identifier is used to reference genetic conditions and their associated genes.",
            "question": "What is the maximum OMIM value in the database?"
        },
        {
            "sample_id": 961,
            "gold_sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM enzyme WHERE NOT enzyme.id IN (SELECT medicine_enzyme_interaction.enzyme_id FROM medicine_enzyme_interaction)",
            "ba": "The virtual table counts the number of enzymes from the 'enzyme' table that do not have any recorded interactions with medicines in the 'medicine_enzyme_interaction' table. This is determined by checking which enzyme IDs are not present in the list of enzyme IDs that are associated with any medicine interactions.",
            "question": "How many enzymes do not have any interactions?"
        },
        {
            "sample_id": 958,
            "gold_sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT medicine_enzyme_interaction.interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY medicine_enzyme_interaction.interaction_type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the number of occurrences for each interaction type and orders the results by the count, limiting the output to a specified number of results.",
            "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?"
        },
        {
            "sample_id": 965,
            "gold_sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT enzyme.name, enzyme.location, enzyme.product FROM enzyme JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE medicine_enzyme_interaction.interaction_type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct names, locations, and products of enzymes from the 'enzyme' table that interact with medicines in a specific way. The placeholder in the WHERE clause represents the type of interaction between the medicine and enzyme.",
            "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?"
        },
        {
            "sample_id": 951,
            "gold_sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
            "gold_complexity": 13,
            "vt": "SELECT medicine.id, medicine.name, medicine.fda_approved FROM medicine JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY medicine.id ORDER BY COUNT(*)",
            "ba": "The virtual table provides a list of medicines along with their unique identifiers and FDA approval status. It aggregates the data by counting the number of interactions each medicine has with enzymes, allowing for an ordered view based on the frequency of these interactions.",
            "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with."
        },
        {
            "sample_id": 957,
            "gold_sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT medicine_enzyme_interaction.interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY medicine_enzyme_interaction.interaction_type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of interactions between medicines and enzymes from the 'medicine_enzyme_interaction' table. It counts the number of occurrences for each interaction type and orders the results by the count, limiting the output to a specified number of results.",
            "question": "What is the most common interaction type between enzymes and medicine? And how many are there?"
        },
        {
            "sample_id": 949,
            "gold_sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT medicine.id, medicine.name FROM medicine JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY medicine.id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers and names of medicines from the 'medicine' table that have interactions with enzymes, filtered to include only those medicines that are involved in a specified number of interactions. The placeholder in the HAVING clause represents the minimum count of interactions required.",
            "question": "What are the ids and names of the medicine that can interact with two or more enzymes?"
        },
        {
            "sample_id": 954,
            "gold_sql": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT enzyme.id, enzyme.name FROM enzyme JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE medicine_enzyme_interaction.interaction_type = '[placeholder-type:string]' GROUP BY enzyme.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the identifiers and names of enzymes that interact with medicines based on a specified interaction type. The results are grouped by enzyme ID and ordered by the count of interactions, with a limit on the number of results returned.",
            "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?"
        },
        {
            "sample_id": 964,
            "gold_sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
            "gold_complexity": 11,
            "vt": "SELECT medicine.id, medicine.trade_name FROM medicine JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY medicine.id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers and trade names of medicines that interact with enzymes, filtered to show only those medicines that have interactions with a specified minimum number of enzymes. The placeholder in the HAVING clause represents the minimum count of interactions required.",
            "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?"
        },
        {
            "sample_id": 947,
            "gold_sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
            "gold_complexity": 9,
            "vt": "SELECT enzyme.name FROM enzyme JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE medicine.name = '[placeholder-type:string]' AND medicine_enzyme_interaction.interaction_type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of enzymes that interact with a specific medicine under a certain interaction type. It combines data from the 'enzyme' table, the 'medicine' table, and the 'medicine_enzyme_interaction' table to filter results based on the medicine's name and the type of interaction.",
            "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?"
        }
    ],
    "theme_gallery": [
        {
            "sample_id": 1676,
            "gold_sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
            "gold_complexity": 8,
            "vt": "SELECT AVG(exhibition.ticket_price), MIN(exhibition.ticket_price), MAX(exhibition.ticket_price) FROM exhibition WHERE exhibition.year < [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average, minimum, and maximum ticket prices from the 'exhibition' table for exhibitions that took place before a specified year. The placeholder in the WHERE clause represents the year to filter the exhibitions.",
            "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?"
        },
        {
            "sample_id": 1685,
            "gold_sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM exhibition_record JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE exhibition_record.attendance > [placeholder-type:numeric] OR exhibition.ticket_price < [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of exhibition records from the 'exhibition_record' table, joined with the 'exhibition' table. It filters the results based on two conditions: the attendance of the exhibition must be greater than a specified number, or the ticket price for the exhibition must be less than a specified number. The placeholders represent numeric values for these conditions.",
            "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?"
        },
        {
            "sample_id": 1668,
            "gold_sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
            "gold_complexity": 9,
            "vt": "SELECT artist.name, COUNT(*) FROM exhibition JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY exhibition.artist_id",
            "ba": "The virtual table provides a summary of the names of artists along with the count of their exhibitions from the 'exhibition' and 'artist' tables. It joins these two tables on the artist's unique identifier and groups the results by each artist's ID to count the number of exhibitions they have participated in.",
            "question": "How many exhibitions has each artist had?"
        },
        {
            "sample_id": 1688,
            "gold_sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200",
            "gold_complexity": 10,
            "vt": "SELECT artist.name FROM exhibition_record JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY artist.artist_id HAVING AVG(exhibition_record.attendance) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of artists whose exhibitions have an average attendance greater than a specified number. It combines data from the 'exhibition_record', 'exhibition', and 'artist' tables, filtering based on the average attendance of the exhibitions.",
            "question": "What are the names of artist whose exhibitions draw over 200 attendees on average?"
        },
        {
            "sample_id": 1664,
            "gold_sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM exhibition WHERE exhibition.year >= [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of exhibitions from the 'exhibition' table that occurred in or after a specific year. The placeholder in the WHERE clause represents the year from which to start counting the exhibitions.",
            "question": "Count the number of exhibitions that happened in or after 2005."
        },
        {
            "sample_id": 1667,
            "gold_sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
            "gold_complexity": 9,
            "vt": "SELECT artist.name, COUNT(*) FROM exhibition JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY exhibition.artist_id",
            "ba": "The virtual table provides a summary of the number of exhibitions each artist has participated in, by joining the 'exhibition' and 'artist' tables. It selects the artist's name and counts the number of exhibitions associated with each artist, grouping the results by the artist's identifier.",
            "question": "Show all artist names and the number of exhibitions for each artist."
        },
        {
            "sample_id": 1670,
            "gold_sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT artist.name, artist.country FROM exhibition JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY exhibition.artist_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and countries of artists who participated in exhibitions, grouped by artist. The query counts the number of exhibitions each artist has participated in and orders the results accordingly, limiting the output to a specified number of artists.",
            "question": "Return the name and country corresponding to the artist who has had the most exhibitions."
        },
        {
            "sample_id": 1682,
            "gold_sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
            "gold_complexity": 9,
            "vt": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004",
            "ba": "The virtual table lists the names of artists from the 'artist' table who did not participate in any exhibition that took place in the year 2004. The query uses an EXCEPT clause to exclude those artists who are linked to exhibitions in that specific year.",
            "question": "What are the names of artists who did not have an exhibition in 2004?"
        },
        {
            "sample_id": 1681,
            "gold_sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
            "gold_complexity": 9,
            "vt": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004",
            "ba": "The virtual table lists the names of artists from the 'artist' table who did not participate in any exhibition that took place in the year 2004. The query uses an EXCEPT clause to exclude those artists who are linked to exhibitions in that specific year.",
            "question": "Show all artist names who didn't have an exhibition in 2004."
        },
        {
            "sample_id": 1654,
            "gold_sql": "SELECT DISTINCT country FROM artist",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT artist.country FROM artist",
            "ba": "The virtual table lists the unique countries of artists from the 'artist' table.",
            "question": "Return the different countries for artists."
        },
        {
            "sample_id": 1651,
            "gold_sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join",
            "gold_complexity": 10,
            "vt": "SELECT artist.name, artist.age, artist.country FROM artist ORDER BY artist.year_join",
            "ba": "The virtual table lists the names, ages, and countries of artists from the 'artist' table, ordered by the year they joined the exhibition.",
            "question": "Show all artist name, age, and country ordered by the yeared they joined."
        },
        {
            "sample_id": 1663,
            "gold_sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM exhibition WHERE exhibition.year >= [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of exhibitions from the 'exhibition' table that occurred in or after a specified year. The placeholder in the WHERE clause represents the year from which to start counting the exhibitions.",
            "question": "How many exhibition are there in year 2005 or after?"
        },
        {
            "sample_id": 1683,
            "gold_sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
            "gold_complexity": 10,
            "vt": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500",
            "ba": "The virtual table identifies the themes of exhibitions that had low attendance (less than 100) and high attendance (more than 500) by intersecting the results from two queries. It uses the 'exhibition_record' table to filter the attendance numbers and joins it with the 'exhibition' table to access the corresponding themes.",
            "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500."
        },
        {
            "sample_id": 1684,
            "gold_sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
            "gold_complexity": 10,
            "vt": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500",
            "ba": "The virtual table identifies the themes of exhibitions that had both low and high attendance. It retrieves themes from the 'exhibition' table by joining it with the 'exhibition_record' table based on the exhibition ID. The first part of the query filters for exhibitions with attendance less than a specified number, while the second part filters for those with attendance greater than another specified number. The intersection of these two results gives the themes that meet both conditions.",
            "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?"
        },
        {
            "sample_id": 1656,
            "gold_sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'",
            "gold_complexity": 8,
            "vt": "SELECT artist.name, artist.year_join FROM artist WHERE artist.country <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and the years artists joined the exhibition from the 'artist' table, excluding those from a specific country. The placeholder in the WHERE clause represents the country that should be excluded.",
            "question": "What are the names and year of joining for artists that do not have the country \"United States\"?"
        },
        {
            "sample_id": 1649,
            "gold_sql": "SELECT count(*) FROM artist",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM artist",
            "ba": "The virtual table counts the total number of artists in the 'artist' table.",
            "question": "How many artists do we have?"
        },
        {
            "sample_id": 1657,
            "gold_sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM artist WHERE artist.age > [placeholder-type:numeric] AND artist.year_join > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of artists from the 'artist' table who are older than a specified age and joined the exhibition after a certain year. The placeholders represent the age and year criteria for filtering the artists.",
            "question": "How many artists are above age 46 and joined after 1990?"
        },
        {
            "sample_id": 1665,
            "gold_sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
            "gold_complexity": 8,
            "vt": "SELECT exhibition.theme, exhibition.year FROM exhibition WHERE exhibition.ticket_price < [placeholder-type:numeric]",
            "ba": "The virtual table describes the themes and years of exhibitions from the 'exhibition' table that have a ticket price below a specified amount. The placeholder in the WHERE clause represents the maximum ticket price for filtering the results.",
            "question": "Show theme and year for all exhibitions with ticket prices lower than 15."
        },
        {
            "sample_id": 1673,
            "gold_sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
            "gold_complexity": 12,
            "vt": "SELECT exhibition.theme, artist.name FROM exhibition JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE exhibition.ticket_price > (SELECT AVG(exhibition.ticket_price) FROM exhibition)",
            "ba": "The virtual table describes the themes of exhibitions along with the names of artists who participated in those exhibitions, specifically filtering for exhibitions that have a ticket price higher than the average ticket price across all exhibitions. The query utilizes a JOIN operation to connect the 'exhibition' and 'artist' tables based on the artist's identifier, ensuring that only relevant records are selected based on the specified condition.",
            "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?"
        },
        {
            "sample_id": 1672,
            "gold_sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
            "gold_complexity": 10,
            "vt": "SELECT artist.name FROM artist WHERE NOT artist.artist_id IN (SELECT artist.artist_id FROM exhibition)",
            "ba": "The virtual table lists the names of artists from the 'artist' table who have not participated in any exhibitions. The subquery identifies the artist IDs of those who have been linked to the 'exhibition' table, and the main query filters out these artists from the results.",
            "question": "What are the names of artists that have not had any exhibitions?"
        },
        {
            "sample_id": 1674,
            "gold_sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
            "gold_complexity": 12,
            "vt": "SELECT exhibition.theme, artist.name FROM exhibition JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE exhibition.ticket_price > (SELECT AVG(exhibition.ticket_price) FROM exhibition)",
            "ba": "The virtual table describes the themes of exhibitions along with the names of the artists who participated in those exhibitions, specifically focusing on exhibitions where the ticket price is above the average ticket price across all exhibitions. The query utilizes a JOIN operation to link the 'exhibition' and 'artist' tables based on the artist's identifier, and it includes a subquery to calculate the average ticket price.",
            "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average."
        },
        {
            "sample_id": 1677,
            "gold_sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",
            "gold_complexity": 8,
            "vt": "SELECT exhibition.theme, exhibition.year FROM exhibition ORDER BY exhibition.ticket_price",
            "ba": "The virtual table displays the theme and year of exhibitions from the 'exhibition' table, ordered by the ticket price of each exhibition. This allows users to see the themes and years of exhibitions in relation to their ticket prices.",
            "question": "Show theme and year for all exhibitions in an descending order of ticket price."
        },
        {
            "sample_id": 1660,
            "gold_sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
            "gold_complexity": 7,
            "vt": "SELECT AVG(artist.age), MIN(artist.age) FROM artist WHERE artist.country = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average and minimum age of artists from a specific country. The placeholder in the WHERE clause represents the country of the artists.",
            "question": "Return the average and minimum ages across artists from the United States."
        },
        {
            "sample_id": 1661,
            "gold_sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT artist.name FROM artist ORDER BY artist.year_join LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of artists from the 'artist' table, ordered by the year they joined the exhibition. The placeholder in the LIMIT clause allows for specifying the maximum number of artist names to retrieve.",
            "question": "What is the name of the artist who joined latest?"
        }
    ],
    "shop_membership": [
        {
            "sample_id": 5429,
            "gold_sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018",
            "gold_complexity": 8,
            "vt": "SELECT SUM(purchase.total_pounds) FROM purchase JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE branch.city = '[placeholder-type:string]' AND purchase.year = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the total amount spent by members in a specific branch located in a certain city during a particular year. It aggregates the 'total_pounds' from the 'purchase' table, joining it with the 'branch' table to filter by city. The placeholders represent the city name and the year of the purchase.",
            "question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?"
        },
        {
            "sample_id": 5428,
            "gold_sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
            "gold_complexity": 7,
            "vt": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100",
            "ba": "The virtual table identifies cities where branches are located that do not have more than a specified number of memberships. It does this by selecting all cities from the 'branch' table and excluding those cities where the number of memberships exceeds a certain threshold.",
            "question": "What are the cities that do not have any branches with more than 100 members?"
        },
        {
            "sample_id": 5405,
            "gold_sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city",
            "gold_complexity": 10,
            "vt": "SELECT branch.city, COUNT(*) FROM branch WHERE branch.open_year < [placeholder-type:numeric] GROUP BY branch.city",
            "ba": "The virtual table provides a count of branches that were opened before a specific year, grouped by the city where each branch is located. The placeholder in the WHERE clause represents the year of interest.",
            "question": "Show the city and the number of branches opened before 2010 for each city."
        },
        {
            "sample_id": 5403,
            "gold_sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
            "gold_complexity": 8,
            "vt": "SELECT MIN(branch.membership_amount), MAX(branch.membership_amount) FROM branch WHERE branch.open_year = [placeholder-type:numeric] OR branch.city = '[placeholder-type:string]'",
            "ba": "The virtual table provides the minimum and maximum number of memberships at branches from the 'branch' table, filtered by either the year the branch was opened or the city where the branch is located. The placeholders represent the specific year and city name used for filtering.",
            "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London."
        },
        {
            "sample_id": 5415,
            "gold_sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
            "gold_complexity": 11,
            "vt": "SELECT branch.name, COUNT(*) FROM membership_register_branch JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE membership_register_branch.register_year > [placeholder-type:numeric] GROUP BY branch.branch_id",
            "ba": "The virtual table provides a count of members who registered at each branch after a specified year. It joins the 'membership_register_branch' table with the 'branch' table to access branch names and filter registrations based on the year. The placeholder in the WHERE clause represents the year after which the registrations are counted.",
            "question": "Show all branch names with the number of members in each branch registered after 2015."
        },
        {
            "sample_id": 5400,
            "gold_sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT branch.city FROM branch WHERE branch.membership_amount >= [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct cities from the 'branch' table where the number of memberships at each branch meets or exceeds a specified amount. The placeholder in the WHERE clause represents the minimum number of memberships required for a branch to be included in the results.",
            "question": "What are the different cities that have more than 100 memberships?"
        },
        {
            "sample_id": 5420,
            "gold_sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
            "gold_complexity": 12,
            "vt": "SELECT branch.name, branch.city FROM branch WHERE NOT branch.branch_id IN (SELECT branch.branch_id FROM membership_register_branch)",
            "ba": "The virtual table lists the names and cities of branches from the 'branch' table that do not have any registered members associated with them. The subquery identifies branch IDs that have members registered, and the main query filters out these branches.",
            "question": "What are the names and cities of the branches that do not have any registered members?"
        },
        {
            "sample_id": 5406,
            "gold_sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city",
            "gold_complexity": 10,
            "vt": "SELECT branch.city, COUNT(*) FROM branch WHERE branch.open_year < [placeholder-type:numeric] GROUP BY branch.city",
            "ba": "The virtual table provides a count of branches that were opened before a specific year, grouped by the city in which they are located. The placeholder in the WHERE clause represents the year of interest.",
            "question": "For each city, how many branches opened before 2010?"
        },
        {
            "sample_id": 5425,
            "gold_sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
            "gold_complexity": 8,
            "vt": "SELECT branch.city FROM branch WHERE branch.open_year = [placeholder-type:numeric] AND branch.membership_amount > [placeholder-type:numeric]",
            "ba": "The virtual table describes the cities of branches from the 'branch' table that were opened in a specific year and have a membership amount exceeding a certain number. The placeholders in the WHERE clause represent the year of opening and the minimum membership amount.",
            "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership."
        },
        {
            "sample_id": 5423,
            "gold_sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
            "gold_complexity": 9,
            "vt": "SELECT member.name, member.hometown FROM membership_register_branch JOIN member AS T2 ON T1.member_id = T2.member_id WHERE membership_register_branch.register_year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and hometowns of members who registered at a branch during a specific year. The query joins the 'membership_register_branch' table with the 'member' table to retrieve the relevant member information based on the registration year.",
            "question": "Show the member name and hometown who registered a branch in 2016."
        },
        {
            "sample_id": 5430,
            "gold_sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018",
            "gold_complexity": 8,
            "vt": "SELECT SUM(purchase.total_pounds) FROM purchase JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE branch.city = '[placeholder-type:string]' AND purchase.year = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the total amount spent by members in a specific branch located in a certain city during a specified year. It aggregates the 'total_pounds' from the 'purchase' table, joining it with the 'branch' table to filter by the branch's city. The placeholders represent the city name and the year of the purchase.",
            "question": "How many total pounds were purchased in the year 2018 at all London branches?"
        },
        {
            "sample_id": 5435,
            "gold_sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
            "gold_complexity": 6,
            "vt": "SELECT member.card_number FROM member WHERE member.hometown LIKE None.\"%kentucky%\"",
            "ba": "The virtual table retrieves the membership card numbers of members from the 'member' table who are from a specific hometown. The placeholder in the WHERE clause allows for filtering based on the hometown name, which in this case is related to Kentucky.",
            "question": "list the card number of all members whose hometown address includes word \"Kentucky\"."
        },
        {
            "sample_id": 5398,
            "gold_sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT branch.name FROM branch ORDER BY branch.membership_amount LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of branches from the 'branch' table, ordered by the total number of memberships at each branch. The placeholder in the LIMIT clause allows for specifying the maximum number of branch names to return.",
            "question": "What are the names for the 3 branches that have the most memberships?"
        },
        {
            "sample_id": 5393,
            "gold_sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM branch WHERE branch.membership_amount > (SELECT AVG(branch.membership_amount) FROM branch)",
            "ba": "The virtual table counts the number of branches from the 'branch' table that have a total number of memberships greater than the average number of memberships across all branches. The subquery calculates the average membership amount, and the main query filters branches based on this average.",
            "question": "How many branches where have more than average number of memberships are there?"
        },
        {
            "sample_id": 5421,
            "gold_sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT branch.name, branch.open_year FROM membership_register_branch JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE membership_register_branch.register_year = [placeholder-type:numeric] GROUP BY branch.branch_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and opening years of branches from the 'branch' table where members registered in a specific year. The query groups the results by branch ID and orders them based on the number of registrations, limiting the output to a specified number of branches.",
            "question": "What is the name and open year for the branch with most number of memberships registered in 2016?"
        },
        {
            "sample_id": 5399,
            "gold_sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT branch.city FROM branch WHERE branch.membership_amount >= [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct cities from the 'branch' table where the number of memberships at each branch meets or exceeds a specified amount. The placeholder in the WHERE clause represents the minimum number of memberships required to filter the branches.",
            "question": "Show all distinct city where branches with at least 100 memberships are located."
        },
        {
            "sample_id": 5396,
            "gold_sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year",
            "gold_complexity": 10,
            "vt": "SELECT branch.name, branch.address_road, branch.city FROM branch ORDER BY branch.open_year",
            "ba": "The virtual table lists the names, street addresses, and cities of all branches from the 'branch' table, ordered by the year each branch was opened.",
            "question": "What are the names, address roads, and cities of the branches ordered by opening year?"
        },
        {
            "sample_id": 5414,
            "gold_sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
            "gold_complexity": 10,
            "vt": "SELECT member.name, branch.name FROM membership_register_branch JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY membership_register_branch.register_year",
            "ba": "The virtual table describes the names of members and the names of branches from the 'membership_register_branch' table, which links members to the branches where they registered. It uses JOIN operations to combine data from the 'branch' and 'member' tables based on their respective identifiers. The results are ordered by the year of registration, allowing users to see which members registered at which branches over time.",
            "question": "What are the names of the members and branches at which they are registered sorted by year of registration?"
        },
        {
            "sample_id": 5410,
            "gold_sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
            "gold_complexity": 10,
            "vt": "SELECT member.card_number, member.name, member.hometown FROM member ORDER BY member.level",
            "ba": "The virtual table describes the membership card number, full name, and hometown of members from the 'member' table, ordered by their membership level.",
            "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?"
        },
        {
            "sample_id": 5394,
            "gold_sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM branch WHERE branch.membership_amount > (SELECT AVG(branch.membership_amount) FROM branch)",
            "ba": "The virtual table counts the number of branches from the 'branch' table that have a total number of memberships greater than the average number of memberships across all branches. The subquery calculates the average membership amount, and the main query filters branches based on this average.",
            "question": "What is the number of branches that have more than the average number of memberships?"
        },
        {
            "sample_id": 5422,
            "gold_sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT branch.name, branch.open_year FROM membership_register_branch JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE membership_register_branch.register_year = [placeholder-type:numeric] GROUP BY branch.branch_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and opening years of branches from the 'branch' table where members registered in a specific year. The query joins the 'membership_register_branch' table to filter branches based on the registration year, and it groups the results by branch ID to count the number of registrations per branch. The placeholders represent the registration year and the limit on the number of results returned.",
            "question": "What is the name and opening year for the branch that registered the most members in 2016?"
        },
        {
            "sample_id": 5436,
            "gold_sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
            "gold_complexity": 6,
            "vt": "SELECT member.card_number FROM member WHERE member.hometown LIKE None.\"%kentucky%\"",
            "ba": "The virtual table retrieves the membership card numbers of members from the 'member' table who are from a specific hometown. The placeholder in the WHERE clause allows for filtering based on the hometown name, which in this case is related to Kentucky.",
            "question": "What are the card numbers of members from Kentucky?"
        },
        {
            "sample_id": 5413,
            "gold_sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
            "gold_complexity": 10,
            "vt": "SELECT member.name, branch.name FROM membership_register_branch JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY membership_register_branch.register_year",
            "ba": "The virtual table describes the names of members and the names of branches where they registered, ordered by the year of registration. The query combines data from the 'membership_register_branch', 'branch', and 'member' tables to provide a comprehensive view of member registrations at different branches.",
            "question": "Show all member names and registered branch names sorted by register year."
        },
        {
            "sample_id": 5432,
            "gold_sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM purchase JOIN member AS T2 ON T1.member_id = T2.member_id WHERE member.level = [placeholder-type:numeric]",
            "ba": "The virtual table counts the total number of purchases made by members from the 'purchase' table, joining it with the 'member' table to filter based on the membership level. The placeholder in the WHERE clause represents the specific membership level being queried.",
            "question": "What are the total purchases for members rated at level 6?"
        },
        {
            "sample_id": 5404,
            "gold_sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
            "gold_complexity": 8,
            "vt": "SELECT MIN(branch.membership_amount), MAX(branch.membership_amount) FROM branch WHERE branch.open_year = [placeholder-type:numeric] OR branch.city = '[placeholder-type:string]'",
            "ba": "The virtual table provides the minimum and maximum number of memberships at branches from the 'branch' table, filtered by either the year the branch was opened or the city where the branch is located. The placeholders represent the specific year and city name used for filtering.",
            "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?"
        },
        {
            "sample_id": 5424,
            "gold_sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
            "gold_complexity": 9,
            "vt": "SELECT member.name, member.hometown FROM membership_register_branch JOIN member AS T2 ON T1.member_id = T2.member_id WHERE membership_register_branch.register_year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and hometowns of members who registered at a branch during a specific year. It combines data from the 'membership_register_branch' and 'member' tables, linking them through the member's unique identifier. The placeholder in the WHERE clause represents the year of registration.",
            "question": "What are the member names and hometowns of those who registered at a branch in 2016?"
        }
    ],
    "icfp_1": [
        {
            "sample_id": 2877,
            "gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT papers.title FROM papers JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"google\"",
            "ba": "The virtual table retrieves distinct titles of papers from the 'papers' table that are associated with authors from a specific institution. The query joins the 'papers' table with the 'authorship' table to link papers to their authors and then further joins with the 'inst' table to filter by the institution's name.",
            "question": "Find all the papers published by the institution \"Google\"."
        },
        {
            "sample_id": 2912,
            "gold_sql": "SELECT fname FROM authors ORDER BY fname",
            "gold_complexity": 6,
            "vt": "SELECT authors.fname FROM authors ORDER BY authors.fname",
            "ba": "The virtual table lists the first names of authors from the 'authors' table, sorted in alphabetical order. This allows users to see all authors' first names in a structured manner.",
            "question": "Sort the first names of all the authors in alphabetical order."
        },
        {
            "sample_id": 2908,
            "gold_sql": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
            "gold_complexity": 6,
            "vt": "SELECT authors.fname FROM authors WHERE authors.lname = None.\"ueno\"",
            "ba": "The virtual table describes the first names of authors from the 'authors' table whose last name matches a specific value. The placeholder in the WHERE clause represents the last name of the author.",
            "question": "Which authors have last name \"Ueno\"? List their first names."
        },
        {
            "sample_id": 2884,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
            "gold_complexity": 9,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE authors.fname = None.\"olin\" AND authors.lname = None.\"shivers\"",
            "ba": "The virtual table describes the titles of papers authored by a specific author identified by their first and last names. It involves joining the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filtering based on the author's first and last names using placeholders.",
            "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles."
        },
        {
            "sample_id": 2875,
            "gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT papers.title FROM papers JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"indiana university\"",
            "ba": "The virtual table describes the distinct titles of papers authored by individuals affiliated with a specific institution. The query joins the 'papers' table with the 'authorship' table to link papers to their authors and their respective institutions. It filters the results based on the institution's name, represented by a placeholder.",
            "question": "What are the papers published under the institution \"Indiana University\"?"
        },
        {
            "sample_id": 2886,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
            "gold_complexity": 9,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE authors.fname = None.\"stephanie\" AND authors.lname = None.\"weirich\"",
            "ba": "The virtual table describes the titles of papers authored by a specific author identified by their first and last name. It involves joining the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filtering based on the author's first and last name.",
            "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote."
        },
        {
            "sample_id": 2916,
            "gold_sql": "SELECT fname ,  lname FROM authors ORDER BY lname",
            "gold_complexity": 8,
            "vt": "SELECT authors.fname, authors.lname FROM authors ORDER BY authors.lname",
            "ba": "The virtual table lists the first and last names of authors from the 'authors' table, sorted by their last names.",
            "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names."
        },
        {
            "sample_id": 2852,
            "gold_sql": "SELECT count(*) FROM authors",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM authors",
            "ba": "The virtual table counts the total number of authors from the 'authors' table.",
            "question": "Count the number of authors."
        },
        {
            "sample_id": 2858,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
            "gold_complexity": 9,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE authors.fname = None.\"jeremy\" AND authors.lname = None.\"gibbons\"",
            "ba": "The virtual table retrieves the titles of papers authored by a specific author identified by their first and last names from the 'authors' table. It joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then joins with the 'papers' table to access the paper titles. The placeholders in the WHERE clause represent the author's first and last names.",
            "question": "Find the titles of all the papers written by \"Jeremy Gibbons\""
        },
        {
            "sample_id": 2906,
            "gold_sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
            "gold_complexity": 10,
            "vt": "SELECT papers.title FROM authorship JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE authorship.authorder = (SELECT MAX(authorship.authorder) FROM authorship)",
            "ba": "The virtual table retrieves the titles of papers from the 'papers' table that are associated with the authorship records. It specifically looks for the paper authored by the last author in the list, determined by the maximum 'authorder' value in the authorship table.",
            "question": "Which paper has the most authors? Give me the paper title."
        },
        {
            "sample_id": 2882,
            "gold_sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT t1.title) FROM papers JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"university of pennsylvania\"",
            "ba": "The virtual table counts the distinct titles of papers authored by individuals affiliated with a specific institution. It joins the 'papers' table with the 'authorship' table to link papers to their authors and their respective institutions. The query filters results based on the institution's name, which is represented as a placeholder.",
            "question": "How many papers are written by authors from the institution \"University of Pennsylvania\"?"
        },
        {
            "sample_id": 2878,
            "gold_sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT papers.title FROM papers JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"google\"",
            "ba": "The virtual table retrieves distinct titles of papers authored by individuals affiliated with a specific institution. It joins the 'papers' table with the 'authorship' table to link papers to their authors and then further joins with the 'inst' table to filter based on the institution's name.",
            "question": "Which papers were written by authors from the institution \"Google\"?"
        },
        {
            "sample_id": 2896,
            "gold_sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT inst.name FROM inst JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY inst.name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of institutions that have authored papers, grouped by institution name and ordered by the count of papers associated with each institution. The placeholder in the LIMIT clause allows for specifying the maximum number of institutions to return.",
            "question": "Which institution has the most papers? Find the name of the institution."
        },
        {
            "sample_id": 2872,
            "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
            "gold_complexity": 8,
            "vt": "SELECT authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE papers.title = None.\"binders unbound\"",
            "ba": "The virtual table describes the last names of authors who have authored a specific paper titled 'binders unbound'. It retrieves this information by joining the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filtering based on the paper's title.",
            "question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name."
        },
        {
            "sample_id": 2888,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
            "gold_complexity": 11,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE inst.country = None.\"usa\" AND authorship.authorder = [placeholder-type:numeric] AND authors.lname = None.\"turon\"",
            "ba": "The virtual table describes the titles of papers authored by individuals from a specific institution located in the USA, where the authors have a specific order in the authorship list and a last name matching a given value.",
            "question": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\"."
        },
        {
            "sample_id": 2901,
            "gold_sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"",
            "gold_complexity": 8,
            "vt": "SELECT authors.fname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE papers.title LIKE None.\"%functional%\"",
            "ba": "The virtual table describes the first names of authors from the 'authors' table who have authored papers with titles that contain a specific keyword. The query joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filters the results based on the title of the papers using a placeholder for string values.",
            "question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\"."
        },
        {
            "sample_id": 2894,
            "gold_sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT inst.country FROM inst JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY inst.country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries where institutions are located, based on the authorship of papers. It counts the number of papers associated with each country and limits the results to a specified number of countries.",
            "question": "Find the country that the most papers are affiliated with."
        },
        {
            "sample_id": 2873,
            "gold_sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
            "gold_complexity": 10,
            "vt": "SELECT authors.fname, authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE papers.title = None.\"nameless ,  painless\"",
            "ba": "The virtual table describes the first and last names of authors from the 'authors' table who have authored a specific paper. The query joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filters the results based on the title of the paper using a placeholder for string values.",
            "question": "Find the first and last name of the author(s) who wrote the paper \"Nameless, Painless\"."
        },
        {
            "sample_id": 2862,
            "gold_sql": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE authors.fname = None.\"atsushi\" AND authors.lname = None.\"ohori\"",
            "ba": "The virtual table counts the number of papers authored by a specific author identified by their first and last name from the 'authors' table. It joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then counts the total number of papers associated with that author.",
            "question": "How many papers are \"Atsushi Ohori\" the author of?"
        },
        {
            "sample_id": 2914,
            "gold_sql": "SELECT lname FROM authors ORDER BY lname",
            "gold_complexity": 6,
            "vt": "SELECT authors.lname FROM authors ORDER BY authors.lname",
            "ba": "The virtual table lists the last names of all authors from the 'authors' table, sorted in alphabetical order. This allows users to easily view and identify authors based on their last names.",
            "question": "Give me a list of all the last names of authors sorted in alphabetical order"
        },
        {
            "sample_id": 2913,
            "gold_sql": "SELECT lname FROM authors ORDER BY lname",
            "gold_complexity": 6,
            "vt": "SELECT authors.lname FROM authors ORDER BY authors.lname",
            "ba": "The virtual table lists the last names of all authors from the 'authors' table, sorted in alphabetical order. This allows users to easily view and identify authors based on their last names.",
            "question": "Retrieve all the last names of authors in alphabetical order."
        },
        {
            "sample_id": 2883,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
            "gold_complexity": 9,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE authors.fname = None.\"olin\" AND authors.lname = None.\"shivers\"",
            "ba": "The virtual table describes the titles of papers authored by a specific author identified by their first and last names. It retrieves data from the 'papers' table and joins it with the 'authorship' and 'authors' tables to filter the results based on the author's name.",
            "question": "Find the papers which have \"Olin Shivers\" as an author."
        },
        {
            "sample_id": 2881,
            "gold_sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT t1.title) FROM papers JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"university of pennsylvania\"",
            "ba": "The virtual table counts the distinct titles of papers authored by individuals affiliated with a specific institution. It joins the 'papers' table with the 'authorship' table to link papers to their authors and their respective institutions. The query filters results based on the institution's name, which is represented as a placeholder.",
            "question": "Find the number of papers published by the institution \"University of Pennsylvania\"."
        },
        {
            "sample_id": 2874,
            "gold_sql": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
            "gold_complexity": 10,
            "vt": "SELECT authors.fname, authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE papers.title = None.\"nameless ,  painless\"",
            "ba": "The virtual table describes the first and last names of authors from the 'authors' table who have authored a specific paper. The query joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filters the results based on the title of the paper using a placeholder for string values.",
            "question": "What are the first and last name of the author who published the paper titled \"Nameless, Painless\"?"
        },
        {
            "sample_id": 2851,
            "gold_sql": "SELECT count(*) FROM authors",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM authors",
            "ba": "The virtual table counts the total number of authors from the 'authors' table.",
            "question": "How many authors are there?"
        },
        {
            "sample_id": 2903,
            "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
            "gold_complexity": 8,
            "vt": "SELECT authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE papers.title LIKE None.\"%monadic%\"",
            "ba": "The virtual table describes the last names of authors from the 'authors' table who have authored papers with titles that contain the term 'monadic'. The query joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filters the results based on the title of the papers using a placeholder for string values.",
            "question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\"."
        },
        {
            "sample_id": 2868,
            "gold_sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT authors.fname, authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"university of oxford\"",
            "ba": "The virtual table describes the distinct first and last names of authors who are affiliated with a specific institution, in this case, the 'university of oxford'. The query joins the 'authors' table with the 'authorship' table to link authors to their respective institutions, and then further joins with the 'inst' table to filter by the institution's name.",
            "question": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\"."
        },
        {
            "sample_id": 2911,
            "gold_sql": "SELECT fname FROM authors ORDER BY fname",
            "gold_complexity": 6,
            "vt": "SELECT authors.fname FROM authors ORDER BY authors.fname",
            "ba": "The virtual table lists the first names of authors from the 'authors' table, sorted in alphabetical order. This allows users to see the names of authors without any filtering conditions.",
            "question": "Find the first names of all the authors ordered in alphabetical order."
        },
        {
            "sample_id": 2857,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
            "gold_complexity": 9,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE authors.fname = None.\"jeremy\" AND authors.lname = None.\"gibbons\"",
            "ba": "The virtual table retrieves the titles of papers authored by a specific author identified by their first and last names from the 'authors' table. It joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then joins with the 'papers' table to access the paper titles. The placeholders in the WHERE clause represent the author's first and last names.",
            "question": "What are the titles of papers published by \"Jeremy Gibbons\"?"
        },
        {
            "sample_id": 2904,
            "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Monadic%\"",
            "gold_complexity": 8,
            "vt": "SELECT authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE papers.title LIKE None.\"%monadic%\"",
            "ba": "The virtual table describes the last names of authors from the 'authors' table who have authored papers with titles that contain the term 'monadic'. The query joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and then filters the results based on the title of the papers using a placeholder for string values.",
            "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names."
        },
        {
            "sample_id": 2854,
            "gold_sql": "SELECT count(*) FROM inst",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM inst",
            "ba": "The virtual table counts the total number of institutions from the 'inst' table.",
            "question": "Count the number of institutions."
        },
        {
            "sample_id": 2891,
            "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY authors.fname, authors.lname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the last names of authors from the 'authors' table who have authored papers, along with a count of their contributions. It joins the 'authors' table with the 'authorship' table to link authors to their respective papers, and groups the results by first and last names of the authors. The results are ordered by the number of papers each author has contributed to, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "What is the last name of the author that has published the most papers?"
        },
        {
            "sample_id": 2915,
            "gold_sql": "SELECT fname ,  lname FROM authors ORDER BY lname",
            "gold_complexity": 8,
            "vt": "SELECT authors.fname, authors.lname FROM authors ORDER BY authors.lname",
            "ba": "The virtual table lists the first and last names of authors from the 'authors' table, sorted by their last names.",
            "question": "Retrieve all the first and last names of authors in the alphabetical order of last names."
        },
        {
            "sample_id": 2890,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"Japan\" AND t2.authorder  =  1 AND t1.lname  =  \"Ohori\"",
            "gold_complexity": 11,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE inst.country = None.\"japan\" AND authorship.authorder = [placeholder-type:numeric] AND authors.lname = None.\"ohori\"",
            "ba": "The virtual table describes the titles of papers authored by individuals from a specific institution located in Japan, where the author's last name is 'Ohori' and the author is in a specific order of authorship.",
            "question": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers."
        },
        {
            "sample_id": 2905,
            "gold_sql": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
            "gold_complexity": 10,
            "vt": "SELECT papers.title FROM authorship JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE authorship.authorder = (SELECT MAX(authorship.authorder) FROM authorship)",
            "ba": "The virtual table retrieves the titles of papers from the 'papers' table that are associated with the authorship records. It specifically looks for the paper where the author is listed last in the order of authors, as indicated by the maximum value of 'authorder'.",
            "question": "Retrieve the title of the paper that has the largest number of authors."
        },
        {
            "sample_id": 2871,
            "gold_sql": "SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Binders Unbound\"",
            "gold_complexity": 8,
            "vt": "SELECT authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE papers.title = None.\"binders unbound\"",
            "ba": "The virtual table describes the last names of authors who have authored a specific paper titled 'binders unbound'. It retrieves data from the 'authors' table and joins it with the 'authorship' table to link authors to their respective papers. The placeholder in the WHERE clause represents the title of the paper being queried.",
            "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?"
        },
        {
            "sample_id": 2870,
            "gold_sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT authors.fname, authors.lname FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"google\"",
            "ba": "The virtual table describes the distinct first and last names of authors who are associated with a specific institution. The query joins the 'authors' table with the 'authorship' table to link authors to their respective papers and institutions, and then filters the results based on the institution's name.",
            "question": "Find the first names and last names of the authors whose institution affiliation is \"Google\"."
        },
        {
            "sample_id": 2887,
            "gold_sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  \"USA\" AND t2.authorder  =  2 AND t1.lname  =  \"Turon\"",
            "gold_complexity": 11,
            "vt": "SELECT papers.title FROM authors JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE inst.country = None.\"usa\" AND authorship.authorder = [placeholder-type:numeric] AND authors.lname = None.\"turon\"",
            "ba": "The virtual table describes the titles of papers authored by individuals from a specific institution located in the USA, where the author's last name is 'Turon' and the author is in a specific order of authorship.",
            "question": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?"
        },
        {
            "sample_id": 2879,
            "gold_sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT t1.title) FROM papers JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE inst.name = None.\"tokohu university\"",
            "ba": "The virtual table counts the distinct titles of papers authored by individuals affiliated with a specific institution. It joins the 'papers' table with the 'authorship' table to link papers to their authors and then further joins with the 'inst' table to filter by the institution's name.",
            "question": "How many papers are published by the institution \"Tokohu University\"?"
        }
    ],
    "battle_death": [
        {
            "sample_id": 7499,
            "gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
            "gold_complexity": 6,
            "vt": "SELECT death.note FROM death WHERE death.note LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves notes related to deaths from the 'death' table that match a specific pattern. The placeholder in the LIKE clause allows for flexible searching of notes based on user input.",
            "question": "What are the notes of the death events which has substring 'East'?"
        },
        {
            "sample_id": 7485,
            "gold_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
            "gold_complexity": 8,
            "vt": "SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name",
            "ba": "The virtual table lists the names and tonnage of ships from the 'ship' table, ordered alphabetically by the ship's name.",
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names."
        },
        {
            "sample_id": 7486,
            "gold_sql": "SELECT name ,  date FROM battle",
            "gold_complexity": 6,
            "vt": "SELECT battle.name, battle.date FROM battle",
            "ba": "The virtual table describes the names and dates of battles from the 'battle' table. The query retrieves the name and date of each battle recorded in the database.",
            "question": "List the name, date and result of each battle."
        },
        {
            "sample_id": 7495,
            "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT RESULT) FROM battle",
            "ba": "The virtual table counts the distinct outcomes of battles from the 'battle' table. This provides insight into the variety of results that occurred during the battles.",
            "question": "How many different results are there for the battles?"
        },
        {
            "sample_id": 7492,
            "gold_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
            "gold_complexity": 12,
            "vt": "SELECT battle.id, battle.name FROM battle JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY battle.id HAVING SUM(death.killed) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of battles where the total number of individuals killed exceeds a specified threshold. It retrieves the unique identifiers and names of battles from the 'battle' table, while joining with the 'ship' table to filter battles that resulted in ship losses, and further joining with the 'death' table to aggregate the number of casualties caused by those ships.",
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total."
        },
        {
            "sample_id": 7491,
            "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE ship.ship_type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the unique identifiers and names of battles from the 'battle' table that involved ships of a specific type. The query joins the 'battle' and 'ship' tables based on the relationship where a ship is lost in a battle, filtering the results to only include ships of a specified type.",
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?"
        },
        {
            "sample_id": 7490,
            "gold_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "gold_complexity": 8,
            "vt": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and results of battles from the 'battle' table where the Bulgarian commander is not equal to a specified name. The placeholder in the WHERE clause represents the name of the Bulgarian commander.",
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'"
        },
        {
            "sample_id": 7484,
            "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM ship WHERE ship.disposition_of_ship = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of ships from the 'ship' table that have a specific disposition status. The placeholder in the WHERE clause represents the condition of the ship, such as whether it is active, decommissioned, or under repair.",
            "question": "How many ships ended up being 'Captured'?"
        },
        {
            "sample_id": 7488,
            "gold_sql": "SELECT avg(injured) FROM death",
            "gold_complexity": 4,
            "vt": "SELECT AVG(death.injured) FROM death",
            "ba": "The virtual table calculates the average number of individuals injured in battles recorded in the 'death' table. It does not filter by any specific battle or ship, providing a general overview of injuries across all records.",
            "question": "What is the average number of injuries caused each time?"
        }
    ],
    "school_finance": [
        {
            "sample_id": 1908,
            "gold_sql": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount > 8.5 GROUP BY school_id HAVING COUNT(*) > 1)",
            "ba": "The virtual table counts the number of schools that have received more than a specified amount in donations, specifically those schools that have received multiple donations above that amount. It does this by first selecting records from the 'endowment' table where the donation amount exceeds a certain threshold, grouping the results by school, and then filtering to include only those schools with more than one qualifying donation.",
            "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5."
        },
        {
            "sample_id": 1900,
            "gold_sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM budget WHERE budget.budgeted > [placeholder-type:numeric] AND budget.year <= [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of budget records from the 'budget' table where the budgeted amount exceeds a specified threshold and the fiscal year is less than or equal to a given year. The placeholders represent the numeric values for the budgeted amount and the year.",
            "question": "How many budgets are above 3000 in year 2001 or before?"
        },
        {
            "sample_id": 1884,
            "gold_sql": "SELECT count(*) FROM school",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM school",
            "ba": "The virtual table provides a count of all schools listed in the 'school' table, which includes various attributes such as school ID, name, location, mascot, enrollment, and class designations.",
            "question": "How many schools are there?"
        },
        {
            "sample_id": 1891,
            "gold_sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school",
            "gold_complexity": 6,
            "vt": "SELECT AVG(school.enrollment), MAX(school.enrollment), MIN(school.enrollment) FROM school",
            "ba": "The virtual table calculates the average, maximum, and minimum enrollment figures from the 'school' table, which contains information about various schools including their enrollment numbers.",
            "question": "Show the average, maximum, minimum enrollment of all schools."
        },
        {
            "sample_id": 1888,
            "gold_sql": "SELECT sum(enrollment) ,  avg(enrollment) FROM school",
            "gold_complexity": 5,
            "vt": "SELECT SUM(school.enrollment), AVG(school.enrollment) FROM school",
            "ba": "The virtual table summarizes the total and average enrollment of students from the 'school' table.",
            "question": "What are the total and average enrollment of all schools?"
        },
        {
            "sample_id": 1907,
            "gold_sql": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT school.school_name FROM endowment JOIN school AS T2 ON T1.school_id = T2.school_id WHERE endowment.amount > [placeholder-type:numeric] GROUP BY endowment.school_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of schools that have received endowments exceeding a specified amount. It joins the 'endowment' table with the 'school' table to associate each endowment with its corresponding school. The results are grouped by school, and only those schools that have received more than a specified number of endowments are included.",
            "question": "Find the names of schools that have more than one donator with donation amount above 8.5."
        },
        {
            "sample_id": 1898,
            "gold_sql": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
            "gold_complexity": 7,
            "vt": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9",
            "ba": "The virtual table lists the names of donors from the 'endowment' table who have donated an amount greater than or equal to 9. It does this by selecting all donor names and excluding those who donated less than 9.",
            "question": "Show the names of all the donors except those whose donation amount less than 9."
        },
        {
            "sample_id": 1896,
            "gold_sql": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
            "gold_complexity": 9,
            "vt": "SELECT school.school_name FROM endowment JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY endowment.school_id HAVING SUM(endowment.amount) <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of schools from the 'school' table that have received a total endowment amount less than or equal to a specified value. It joins the 'endowment' table with the 'school' table based on the school_id, groups the results by school_id, and filters the groups based on the total sum of endowment amounts.",
            "question": "List all the names of schools with an endowment amount smaller than or equal to 10."
        },
        {
            "sample_id": 1902,
            "gold_sql": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
            "gold_complexity": 11,
            "vt": "SELECT school.school_name, budget.budgeted, budget.invested FROM budget JOIN school AS T2 ON T1.school_id = T2.school_id WHERE budget.year >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of schools along with their budgeted and invested amounts from the 'budget' table, filtered by fiscal years that are greater than or equal to a specified year. The placeholder in the WHERE clause represents the fiscal year.",
            "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after."
        },
        {
            "sample_id": 1904,
            "gold_sql": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM budget WHERE budget.budgeted < budget.invested",
            "ba": "The virtual table counts the number of budget records from the 'budget' table where the budgeted amount is less than the invested amount. This indicates how many schools have invested more than they had budgeted for.",
            "question": "How many budget record has a budget amount smaller than the invested amount?"
        },
        {
            "sample_id": 1909,
            "gold_sql": "SELECT T1.School_name ,  T1.Mascot ,  T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id  =  T2.school_id WHERE Budgeted  >  6000 OR YEAR  <  2003 ORDER BY T2.total_budget_percent_invested ,  T2.total_budget_percent_budgeted",
            "gold_complexity": 17,
            "vt": "SELECT school.school_name, school.mascot, school.ihsaa_football_class FROM school JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE budget.budgeted > [placeholder-type:numeric] OR budget.year < [placeholder-type:numeric] ORDER BY budget.total_budget_percent_invested, budget.total_budget_percent_budgeted",
            "ba": "The virtual table describes the names, mascots, and football class designations of schools from the 'school' table that have either a budgeted amount greater than a specified value or belong to a fiscal year that is less than a specified year. The results are ordered by the percentage of the total budget that has been invested and the percentage of the total budget that is budgeted.",
            "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget."
        },
        {
            "sample_id": 1901,
            "gold_sql": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM budget WHERE budget.budgeted > [placeholder-type:numeric] AND budget.year <= [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of budget records from the 'budget' table where the budgeted amount exceeds a specified threshold and the fiscal year is less than or equal to a specified year. The placeholders represent the numeric values for the budgeted amount and the year.",
            "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000"
        },
        {
            "sample_id": 1890,
            "gold_sql": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT school.school_name FROM school ORDER BY school.enrollment LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of schools from the 'school' table, ordered by the number of students enrolled. The placeholder in the LIMIT clause indicates the maximum number of school names to return.",
            "question": "List the name of the school with the smallest enrollment."
        },
        {
            "sample_id": 1895,
            "gold_sql": "SELECT school_name FROM school WHERE school_id NOT IN (SELECT school_id FROM endowment)",
            "gold_complexity": 10,
            "vt": "SELECT school.school_name FROM school WHERE NOT school.school_id IN (SELECT school.school_id FROM endowment)",
            "ba": "The virtual table lists the names of schools from the 'school' table that do not have any associated endowment records. The query uses a subquery to filter out schools that have received donations, ensuring that only those without endowments are displayed.",
            "question": "List the names of the schools without any endowment."
        },
        {
            "sample_id": 1906,
            "gold_sql": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
            "gold_complexity": 11,
            "vt": "SELECT school.school_name FROM budget JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY school.school_name HAVING SUM(budget.budgeted) > [placeholder-type:numeric] OR SUM(endowment.amount) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of schools that have either a total budgeted amount exceeding a specified value or total endowment amounts exceeding a specified value. It combines data from the 'budget', 'school', and 'endowment' tables, grouping by school name to aggregate the budgeted and endowment amounts.",
            "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10."
        }
    ],
    "swimming": [
        {
            "sample_id": 5598,
            "gold_sql": "SELECT count(*) FROM stadium",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM stadium",
            "ba": "The virtual table counts the total number of stadiums recorded in the 'stadium' table.",
            "question": "How many stadiums are there?"
        },
        {
            "sample_id": 5616,
            "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT swimmer.name FROM swimmer JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY record.swimmer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of swimmers who have set records, grouped by the swimmer's identifier. The results are ordered by the count of records each swimmer has achieved, and a placeholder is used to limit the number of results returned.",
            "question": "Find the name of the swimmer who has the most records."
        },
        {
            "sample_id": 5595,
            "gold_sql": "SELECT count(*) FROM event",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM event",
            "ba": "The virtual table counts the total number of events recorded in the 'event' table.",
            "question": "How many events are there?"
        },
        {
            "sample_id": 5615,
            "gold_sql": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
            "gold_complexity": 10,
            "vt": "SELECT stadium.name FROM stadium WHERE NOT stadium.id IN (SELECT event.stadium_id FROM event)",
            "ba": "The virtual table lists the names of stadiums from the 'stadium' table that do not host any events. The query uses a subquery to filter out stadiums that are referenced in the 'event' table, ensuring only those without associated events are displayed.",
            "question": "Find the names of stadiums which have never had any event."
        },
        {
            "sample_id": 5603,
            "gold_sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000",
            "gold_complexity": 9,
            "vt": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
            "ba": "The virtual table identifies countries that have stadiums with both a capacity greater than 60,000 and a capacity less than 50,000. This is achieved by selecting the 'country' column from the 'stadium' table and using the INTERSECT operator to find common countries that meet both conditions.",
            "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?"
        },
        {
            "sample_id": 5609,
            "gold_sql": "SELECT count(DISTINCT nationality) FROM swimmer",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT nationality) FROM swimmer",
            "ba": "The virtual table counts the distinct nationalities represented by swimmers in the 'swimmer' table.",
            "question": "How many different countries are all the swimmers from?"
        },
        {
            "sample_id": 5624,
            "gold_sql": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
            "gold_complexity": 6,
            "vt": "SELECT AVG(stadium.capacity) FROM stadium WHERE stadium.opening_year = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average capacity of stadiums that were opened in a specific year. The placeholder in the WHERE clause represents the year of opening for the stadiums.",
            "question": "What is the average capacity of the stadiums that were opened in year 2005?"
        },
        {
            "sample_id": 5614,
            "gold_sql": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'",
            "gold_complexity": 9,
            "vt": "SELECT stadium.name, stadium.capacity FROM stadium JOIN event AS t2 ON t1.id = t2.stadium_id WHERE event.name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and capacities of stadiums from the 'stadium' table that are associated with a specific event. The placeholder in the WHERE clause represents the name of the event being queried.",
            "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened."
        },
        {
            "sample_id": 5617,
            "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT swimmer.name FROM swimmer JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY record.swimmer_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of swimmers who have achieved a certain number of records. It joins the 'swimmer' table with the 'record' table to associate swimmers with their records, and groups the results by swimmer ID. The HAVING clause filters the results to include only those swimmers who have achieved a specified minimum number of records.",
            "question": "Find the name of the swimmer who has at least 2 records."
        },
        {
            "sample_id": 5608,
            "gold_sql": "SELECT name FROM swimmer ORDER BY meter_100",
            "gold_complexity": 6,
            "vt": "SELECT swimmer.name FROM swimmer ORDER BY swimmer.meter_100",
            "ba": "The virtual table lists the names of swimmers from the 'swimmer' table, ordered by their performance time in the 100 meter swim event. This allows for easy identification of the fastest swimmers based on their recorded times.",
            "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order."
        },
        {
            "sample_id": 5605,
            "gold_sql": "SELECT country ,  count(*) FROM stadium GROUP BY country",
            "gold_complexity": 8,
            "vt": "SELECT stadium.country, COUNT(*) FROM stadium GROUP BY stadium.country",
            "ba": "The virtual table summarizes the number of stadiums located in each country from the 'stadium' table. The placeholder in the SELECT clause represents the country of the stadium, and the COUNT function is used to count the total number of stadiums per country.",
            "question": "How many stadiums does each country have?"
        },
        {
            "sample_id": 5596,
            "gold_sql": "SELECT name FROM event ORDER BY YEAR DESC",
            "gold_complexity": 6,
            "vt": "SELECT event.name FROM event ORDER BY event.year",
            "ba": "The virtual table lists the names of events from the 'event' table, ordered by the year in which they are held.",
            "question": "List all the event names by year from the most recent to the oldest."
        },
        {
            "sample_id": 5621,
            "gold_sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
            "gold_complexity": 9,
            "vt": "SELECT stadium.name FROM swimmer JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE swimmer.nationality = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of stadiums where swimmers from a specific nationality have set records. It combines data from the 'swimmer', 'record', 'event', and 'stadium' tables to filter the results based on the swimmer's nationality.",
            "question": "Find the names of stadiums that some Australian swimmers have been to."
        },
        {
            "sample_id": 5619,
            "gold_sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
            "gold_complexity": 10,
            "vt": "SELECT swimmer.name FROM swimmer WHERE NOT swimmer.id IN (SELECT record.swimmer_id FROM record)",
            "ba": "The virtual table lists the names of swimmers from the 'swimmer' table who have not set any records in the 'record' table. The subquery identifies all swimmer IDs that have achieved records, and the main query filters out these IDs to find those who have not participated in any events resulting in a record.",
            "question": "Find the names of the swimmers who have no record."
        },
        {
            "sample_id": 5607,
            "gold_sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM stadium WHERE stadium.country <> '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of stadiums located in countries other than the specified country. The placeholder in the WHERE clause represents the country that should be excluded from the count.",
            "question": "How many stadiums are not in country \"Russia\"?"
        },
        {
            "sample_id": 5611,
            "gold_sql": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
            "gold_complexity": 8,
            "vt": "SELECT swimmer.meter_200, swimmer.meter_300 FROM swimmer WHERE swimmer.nationality = '[placeholder-type:string]'",
            "ba": "The virtual table describes the performance times for the 200 meter and 300 meter swims from the 'swimmer' table for swimmers of a specific nationality. The placeholder in the WHERE clause represents the nationality of the swimmer.",
            "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\"."
        },
        {
            "sample_id": 5599,
            "gold_sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT stadium.name FROM stadium ORDER BY stadium.capacity LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of stadiums from the 'stadium' table, ordered by their capacity. The placeholder in the LIMIT clause allows the user to specify the maximum number of stadium names to retrieve.",
            "question": "Find the name of the stadium that has the maximum capacity."
        },
        {
            "sample_id": 5620,
            "gold_sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
            "gold_complexity": 8,
            "vt": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'",
            "ba": "The virtual table identifies swimmers who have both won and lost events. It does this by selecting the names of swimmers from the 'swimmer' table who have records of winning and intersecting that with the names of swimmers who have records of losing. The use of the INTERSECT operator ensures that only those swimmers who appear in both categories are returned.",
            "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record."
        }
    ],
    "college_2": [
        {
            "sample_id": 1359,
            "gold_sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
            "gold_complexity": 10,
            "vt": "SELECT department.dept_name, department.budget FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department)",
            "ba": "The virtual table displays the names and budgets of academic departments from the 'department' table that have a budget greater than the average budget of all departments. The query uses a subquery to calculate the average budget, and the placeholder in the WHERE clause represents this condition.",
            "question": "What are the names and budgets of departments with budgets greater than the average?"
        },
        {
            "sample_id": 1485,
            "gold_sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT ID) FROM teaches WHERE teaches.semester = '[placeholder-type:string]' AND teaches.year = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of distinct instructors who are teaching courses in a specific semester and year. The placeholders represent the semester and year for which the count is required.",
            "question": "How many instructors teach a course in the Spring of 2010?"
        },
        {
            "sample_id": 1454,
            "gold_sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(DISTINCT T2.id), COUNT(DISTINCT T3.id), instructor.dept_name FROM department JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY instructor.dept_name",
            "ba": "The virtual table provides a summary of the number of distinct students and instructors associated with each academic department. It aggregates the data from the 'department', 'student', and 'instructor' tables, counting unique student IDs and instructor IDs for each department. The results are grouped by the department name, allowing for an overview of departmental engagement in terms of students and faculty.",
            "question": "Find the total number of students and total number of instructors for each department."
        },
        {
            "sample_id": 1461,
            "gold_sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
            "gold_complexity": 8,
            "vt": "SELECT student.name FROM course JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE course.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of students enrolled in courses offered by a specific academic department. The query joins the 'course' table with the 'takes' table to find which students are taking which courses, and then it filters the results based on the department name provided as a placeholder.",
            "question": "What are the names of students who have taken Statistics courses?"
        },
        {
            "sample_id": 1458,
            "gold_sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
            "gold_complexity": 12,
            "vt": "SELECT instructor.name, instructor.salary FROM instructor WHERE instructor.salary < (SELECT AVG(instructor.salary) FROM instructor WHERE dept_name = 'Physics')",
            "ba": "The virtual table displays the names and salaries of instructors from the 'instructor' table whose salaries are below the average salary of instructors in the 'Physics' department. The inner query calculates the average salary for the specified department, and the outer query filters instructors based on this average.",
            "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department."
        },
        {
            "sample_id": 1327,
            "gold_sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
            "gold_complexity": 11,
            "vt": "SELECT department.dept_name, department.building FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department)",
            "ba": "The virtual table displays the names and buildings of academic departments that have a budget exceeding the average budget of all departments. The query filters departments based on their budget compared to the average budget calculated from all departments.",
            "question": "Give the name and building of the departments with greater than average budget."
        },
        {
            "sample_id": 1487,
            "gold_sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
            "gold_complexity": 10,
            "vt": "SELECT instructor.dept_name, AVG(instructor.salary) FROM instructor GROUP BY instructor.dept_name HAVING AVG(instructor.salary) > [placeholder-type:numeric]",
            "ba": "The virtual table provides the average salary of instructors grouped by their respective departments. It filters the results to only include departments where the average salary exceeds a specified numeric threshold.",
            "question": "What are the names and average salaries for departments with average salary higher than 42000?"
        },
        {
            "sample_id": 1389,
            "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT instructor.name FROM instructor JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY advisor.i_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of instructors who are advising more than a specified number of students. It joins the 'instructor' table with the 'advisor' table to count the number of students each instructor is advising, filtering the results to only include those instructors who have a count greater than a placeholder value.",
            "question": "What are the names of instructors who advise more than one student?"
        },
        {
            "sample_id": 1482,
            "gold_sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT instructor.salary FROM instructor WHERE instructor.salary < (SELECT MAX(instructor.salary) FROM instructor)",
            "ba": "The virtual table displays the distinct salaries of instructors from the 'instructor' table who earn less than the maximum salary among all instructors. The query uses a subquery to determine the maximum salary, ensuring that only those instructors with salaries below this threshold are included in the results.",
            "question": "Find the salaries of all distinct instructors that are less than the largest salary."
        },
        {
            "sample_id": 1373,
            "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT course.dept_name FROM course GROUP BY course.dept_name ORDER BY SUM(course.credits) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of academic departments from the 'course' table, grouping them by department name and ordering them based on the total credits of the courses offered by each department. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to be returned.",
            "question": "What is the name of the department with the most credits?"
        },
        {
            "sample_id": 1484,
            "gold_sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT ID) FROM teaches WHERE teaches.semester = '[placeholder-type:string]' AND teaches.year = [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of distinct instructors who are teaching courses during a specific semester and year. The placeholders allow users to specify the semester and year for which they want to retrieve the count of instructors.",
            "question": "Find the total number of instructors who teach a course in the Spring 2010 semester."
        },
        {
            "sample_id": 1405,
            "gold_sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT section.year FROM section GROUP BY section.year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic years in which sections are offered, grouped by year. The result is ordered by the number of sections available in each year, and a placeholder is used to limit the number of years returned.",
            "question": "Which year had the greatest number of courses?"
        },
        {
            "sample_id": 1379,
            "gold_sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
            "gold_complexity": 8,
            "vt": "SELECT department.dept_name, department.building FROM department ORDER BY department.budget",
            "ba": "The virtual table describes the names and buildings of academic departments from the 'department' table, ordered by their allocated budget. This allows users to see which departments are located in which buildings, sorted by financial resources.",
            "question": "What are the names and buildings of the deparments, sorted by budget descending?"
        },
        {
            "sample_id": 1403,
            "gold_sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), section.semester, section.year FROM section GROUP BY section.semester, section.year",
            "ba": "The virtual table summarizes the number of sections offered in each semester and year from the 'section' table. It groups the results by semester and year to provide a count of sections for each unique combination.",
            "question": "How many courses are provided in each semester and year?"
        },
        {
            "sample_id": 1415,
            "gold_sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
            "gold_complexity": 7,
            "vt": "SELECT advisor.i_id FROM advisor JOIN student AS T2 ON T1.s_id = T2.id WHERE student.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the identifiers of instructors who are acting as advisors for students enrolled in a specific department. It joins the 'advisor' table with the 'student' table to filter the results based on the department name provided as a placeholder.",
            "question": "Give id of the instructor who advises students in the History department."
        },
        {
            "sample_id": 1417,
            "gold_sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
            "gold_complexity": 10,
            "vt": "SELECT instructor.name, instructor.salary FROM advisor JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE student.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and salaries of instructors who are advising students from a specific department. The placeholders in the WHERE clause represent the department's name.",
            "question": "What are the names and salaries of instructors who advises students in the History department?"
        },
        {
            "sample_id": 1412,
            "gold_sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT takes.semester, takes.year FROM takes GROUP BY takes.semester, takes.year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the semesters and years in which courses were taken by students, grouping the results by semester and year. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return based on the count of courses taken.",
            "question": "Find the semester and year which has the least number of student taking any class."
        },
        {
            "sample_id": 1490,
            "gold_sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
            "gold_complexity": 11,
            "vt": "SELECT instructor.name FROM instructor WHERE instructor.salary > (SELECT MAX(instructor.salary) FROM instructor WHERE dept_name = 'Biology')",
            "ba": "The virtual table lists the names of instructors from the 'instructor' table who have a salary greater than the maximum salary of instructors in the 'Biology' department.",
            "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department."
        },
        {
            "sample_id": 1429,
            "gold_sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
            "gold_complexity": 9,
            "vt": "SELECT course.title FROM course JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE section.building = '[placeholder-type:string]' AND section.semester = '[placeholder-type:string]' AND section.year = [placeholder-type:numeric]",
            "ba": "The virtual table lists the titles of courses offered in a specific building during a particular semester and year. The placeholders represent the building name, semester, and academic year.",
            "question": "Give the title of the course offered in Chandler during the Fall of 2010."
        },
        {
            "sample_id": 1369,
            "gold_sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.name FROM student JOIN takes AS T2 ON T1.id = T2.id WHERE takes.year = [placeholder-type:numeric] OR takes.year = [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of students who have taken courses in either of the specified academic years. It joins the 'student' table with the 'takes' table to filter students based on their enrollment in courses during those years.",
            "question": "What are the names of the students who took classes in 2009 or 2010?"
        },
        {
            "sample_id": 1381,
            "gold_sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT instructor.name FROM instructor ORDER BY instructor.salary LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of instructors from the 'instructor' table, ordered by their salary in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of instructor names to be returned.",
            "question": "Give the name of the highest paid instructor."
        },
        {
            "sample_id": 1476,
            "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
            "ba": "The virtual table retrieves a list of course identifiers from the 'section' table for two specific semesters: Fall 2009 and Spring 2010. It combines the results from both semesters using a UNION operation, ensuring that the final output contains unique course identifiers from both queries.",
            "question": "Find courses that ran in Fall 2009 or in Spring 2010."
        },
        {
            "sample_id": 1440,
            "gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
            "gold_complexity": 10,
            "vt": "SELECT instructor.name FROM instructor WHERE NOT instructor.id IN (SELECT instructor.id FROM teaches)",
            "ba": "The virtual table lists the names of instructors from the 'instructor' table who are not currently teaching any courses. The subquery identifies instructors who are teaching by checking their IDs in the 'teaches' table, and the main query selects those instructors whose IDs are not found in that list.",
            "question": "Find the name of instructors who didn't teach any courses?"
        },
        {
            "sample_id": 1392,
            "gold_sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), classroom.building FROM classroom WHERE classroom.capacity > [placeholder-type:numeric] GROUP BY classroom.building",
            "ba": "The virtual table summarizes the number of classrooms with a capacity greater than a specified value, grouped by the building they are located in. The placeholder in the WHERE clause represents the minimum capacity threshold.",
            "question": "Find the number of rooms with more than 50 capacity for each building."
        },
        {
            "sample_id": 1445,
            "gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
            "gold_complexity": 12,
            "vt": "SELECT instructor.name FROM instructor WHERE NOT instructor.id IN (SELECT instructor.id FROM teaches WHERE semester = 'Spring')",
            "ba": "The virtual table lists the names of instructors who are not teaching any courses during the Spring semester. It filters the instructors from the 'instructor' table by excluding those whose IDs are found in the 'teaches' table for the specified semester.",
            "question": "What are the names of instructors who didn't teach courses in the Spring?"
        },
        {
            "sample_id": 1326,
            "gold_sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
            "gold_complexity": 11,
            "vt": "SELECT department.dept_name, department.building FROM department WHERE department.budget > (SELECT AVG(department.budget) FROM department)",
            "ba": "The virtual table lists the names and buildings of academic departments that have a budget greater than the average budget of all departments.",
            "question": "What is the name and building of the departments whose budget is more than the average budget?"
        },
        {
            "sample_id": 1386,
            "gold_sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
            "gold_complexity": 12,
            "vt": "SELECT course.title, instructor.name FROM course JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE teaches.year = [placeholder-type:numeric] ORDER BY course.title",
            "ba": "The virtual table describes the titles of courses along with the names of instructors who teach them, filtered by a specific academic year. The placeholders in the WHERE clause represent the year for which the data is being queried.",
            "question": "list in alphabetic order all course names and their instructors' names in year 2008."
        },
        {
            "sample_id": 1323,
            "gold_sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT classroom.building FROM classroom WHERE classroom.capacity > [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique buildings from the 'classroom' table that have a capacity greater than a specified number of students. The placeholder in the WHERE clause represents the minimum capacity requirement.",
            "question": "What are the distinct buildings with capacities of greater than 50?"
        },
        {
            "sample_id": 1334,
            "gold_sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM classroom WHERE classroom.building = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of classrooms located in a specific building from the 'classroom' table. The placeholder in the WHERE clause represents the name of the building.",
            "question": "How many rooms does the Lamberton building have?"
        },
        {
            "sample_id": 1349,
            "gold_sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
            "gold_complexity": 10,
            "vt": "SELECT course.title FROM course WHERE NOT course.course_id IN (SELECT course.course_id FROM prereq)",
            "ba": "The virtual table lists the titles of courses from the 'course' table that do not have any prerequisites associated with them. The subquery identifies all course IDs that have prerequisites, and the main query filters out these courses to show only those without prerequisites.",
            "question": "What are the titles of courses without prerequisites?"
        },
        {
            "sample_id": 1388,
            "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT instructor.name FROM instructor JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY advisor.i_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of instructors who are advising more than a specified number of students. It joins the 'instructor' table with the 'advisor' table to count the number of students each instructor is advising, filtering the results to only include those instructors who have a count greater than a placeholder value.",
            "question": "Find the name of instructors who are advising more than one student."
        },
        {
            "sample_id": 1468,
            "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
            "gold_complexity": 7,
            "vt": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches AS T2 ON T1.ID = T2.ID",
            "ba": "The virtual table describes the names of instructors along with the course identifiers for the courses they teach. It retrieves data from the 'instructor' table and joins it with the 'teaches' table to associate each instructor with their respective courses.",
            "question": "Find the names of all instructors who have taught some course and the course_id."
        },
        {
            "sample_id": 1460,
            "gold_sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
            "gold_complexity": 8,
            "vt": "SELECT student.name FROM course JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE course.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of students enrolled in courses offered by a specific academic department. The query joins the 'course' table with the 'takes' table to find which students are taking those courses, and filters the results based on the department's name.",
            "question": "Find the name of students who took some course offered by Statistics department."
        },
        {
            "sample_id": 1384,
            "gold_sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
            "gold_complexity": 8,
            "vt": "SELECT student.name, student.dept_name FROM student ORDER BY student.tot_cred",
            "ba": "The virtual table describes the names and department affiliations of students from the 'student' table, ordered by the total credits they have earned. This allows for an overview of students sorted by their academic progress.",
            "question": "Find the name of the students and their department names sorted by their total credits in ascending order."
        },
        {
            "sample_id": 1400,
            "gold_sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
            "gold_complexity": 12,
            "vt": "SELECT MIN(instructor.salary), instructor.dept_name FROM instructor GROUP BY instructor.dept_name HAVING AVG(instructor.salary) > (SELECT AVG(instructor.salary) FROM instructor)",
            "ba": "The virtual table provides the minimum salary of instructors grouped by their respective departments. It filters the results to only include departments where the average salary of instructors exceeds the overall average salary of all instructors.",
            "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors."
        },
        {
            "sample_id": 1472,
            "gold_sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
            "gold_complexity": 6,
            "vt": "SELECT instructor.name FROM instructor WHERE instructor.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the names of instructors from the 'instructor' table that match a specified pattern. The placeholder in the LIKE clause allows for flexible searching of instructor names based on user input.",
            "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d."
        },
        {
            "sample_id": 1411,
            "gold_sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), student.dept_name FROM student GROUP BY student.dept_name",
            "ba": "The virtual table summarizes the number of students in each academic department by counting the total number of students grouped by their respective department names from the 'student' table.",
            "question": "How many students are in each department?"
        },
        {
            "sample_id": 1471,
            "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
            "gold_complexity": 9,
            "vt": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches AS T2 ON T1.ID = T2.ID WHERE instructor.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of instructors and the courses they teach from the 'instructor' and 'teaches' tables. The placeholder in the WHERE clause represents the department's name, allowing users to filter instructors based on their department.",
            "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?"
        },
        {
            "sample_id": 1409,
            "gold_sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student.dept_name FROM student GROUP BY student.dept_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic departments from the 'student' table, grouping the results by department name and ordering them based on the number of students in each department. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to be returned.",
            "question": "What is the name of the deparment with the highest enrollment?"
        },
        {
            "sample_id": 1351,
            "gold_sql": "SELECT COUNT (DISTINCT id) FROM teaches",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT id) FROM teaches",
            "ba": "The virtual table counts the number of distinct instructors who are teaching courses in the database. It utilizes the 'teaches' table, which links instructors to the courses they teach, ensuring that each instructor is only counted once regardless of how many courses they are teaching.",
            "question": "Count the number of distinct instructors who have taught a course."
        },
        {
            "sample_id": 1465,
            "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
            "gold_complexity": 6,
            "vt": "SELECT instructor.name FROM instructor WHERE instructor.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of instructors from the 'instructor' table who belong to a specific department. The placeholder in the WHERE clause represents the department's name.",
            "question": "What are the names of all instructors in the Comp. Sci. department?"
        },
        {
            "sample_id": 1339,
            "gold_sql": "SELECT count(DISTINCT dept_name) FROM course",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT dept_name) FROM course",
            "ba": "The virtual table counts the distinct academic departments that offer courses in the 'course' table.",
            "question": "Count the number of departments which offer courses."
        },
        {
            "sample_id": 1481,
            "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
            "ba": "The virtual table identifies the unique course identifiers from the 'section' table that were offered in the Fall semester of a specific year, excluding those that were also offered in the Spring semester of the following year. This allows for the identification of courses that were not available in the Spring semester after being offered in the Fall.",
            "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?"
        },
        {
            "sample_id": 1470,
            "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
            "gold_complexity": 9,
            "vt": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches AS T2 ON T1.ID = T2.ID WHERE instructor.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of instructors and the courses they teach from the 'instructor' and 'teaches' tables. The placeholder in the WHERE clause represents the department's name, allowing users to filter instructors based on their department.",
            "question": "Find the names of all instructors in the Art department who have taught some course and the course_id."
        },
        {
            "sample_id": 1483,
            "gold_sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT instructor.salary FROM instructor WHERE instructor.salary < (SELECT MAX(instructor.salary) FROM instructor)",
            "ba": "The virtual table displays the distinct salaries of instructors from the 'instructor' table who earn less than the maximum salary among all instructors. The placeholder in the WHERE clause represents a condition to filter salaries below the highest salary recorded.",
            "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?"
        },
        {
            "sample_id": 1330,
            "gold_sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT department.dept_name, department.building FROM department ORDER BY department.budget LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic departments along with their respective building locations. The results are ordered by the department's budget, and the number of departments returned is limited by a specified numeric value.",
            "question": "Find the name and building of the department with the highest budget."
        },
        {
            "sample_id": 1371,
            "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT course.dept_name FROM course GROUP BY course.dept_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of academic departments from the 'course' table, grouping the results by department name and ordering them by the number of courses offered in each department. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to be returned.",
            "question": "What are the names of the 3 departments with the most courses?"
        },
        {
            "sample_id": 1426,
            "gold_sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
            "gold_complexity": 13,
            "vt": "SELECT student.name FROM student WHERE student.id IN (SELECT student.id FROM takes WHERE semester = 'Fall' AND YEAR = 2003)",
            "ba": "The virtual table lists the names of students who are enrolled in courses during the Fall semester of the year 2003. It filters the students based on their IDs, which are obtained from a subquery that selects students from the 'takes' table for the specified semester and year.",
            "question": "Find the names of students who have taken any course in the fall semester of year 2003."
        },
        {
            "sample_id": 1335,
            "gold_sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM classroom WHERE classroom.building = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of classrooms located in a specific building from the 'classroom' table. The placeholder in the WHERE clause represents the name of the building.",
            "question": "Count the number of classrooms in Lamberton."
        },
        {
            "sample_id": 1431,
            "gold_sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
            "gold_complexity": 8,
            "vt": "SELECT instructor.name FROM instructor JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE course.title = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of instructors who teach a specific course identified by its title. It retrieves data from the 'instructor' table and joins it with the 'teaches' table to link instructors with the courses they teach, and further joins with the 'course' table to filter by the course title.",
            "question": "What are the names of instructors who have taught C Programming courses?"
        },
        {
            "sample_id": 1433,
            "gold_sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
            "gold_complexity": 10,
            "vt": "SELECT instructor.name, instructor.salary FROM advisor JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE student.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and salaries of instructors who are advising students from a specific department. The query joins the 'advisor' table with the 'instructor' table to get the instructor details and with the 'student' table to filter by the department of the students. The placeholder in the WHERE clause represents the department's name.",
            "question": "What are the names and salaries of instructors who advise students in the Math department?"
        },
        {
            "sample_id": 1435,
            "gold_sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
            "gold_complexity": 10,
            "vt": "SELECT instructor.name FROM advisor JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE student.dept_name = '[placeholder-type:string]' ORDER BY student.tot_cred",
            "ba": "The virtual table lists the names of instructors who are advisors to students from a specific department. The results are ordered by the total credits earned by the students.",
            "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student."
        },
        {
            "sample_id": 1399,
            "gold_sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
            "gold_complexity": 8,
            "vt": "SELECT SUM(course.credits), course.dept_name FROM course GROUP BY course.dept_name",
            "ba": "The virtual table summarizes the total number of credits offered by each academic department from the 'course' table. It groups the results by the department name, allowing users to see how many credits are associated with courses in each department.",
            "question": "How many total credits are offered by each department?"
        },
        {
            "sample_id": 1344,
            "gold_sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
            "gold_complexity": 13,
            "vt": "SELECT course.title, course.credits, course.dept_name FROM course JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY prereq.course_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles and credits of courses from the 'course' table that have more than a specified number of prerequisites. The placeholder in the HAVING clause represents the minimum count of prerequisites required for the courses.",
            "question": "Find the title, credit, and department name of courses that have more than one prerequisites?"
        },
        {
            "sample_id": 1398,
            "gold_sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
            "gold_complexity": 8,
            "vt": "SELECT SUM(course.credits), course.dept_name FROM course GROUP BY course.dept_name",
            "ba": "The virtual table summarizes the total number of credits offered by each academic department from the 'course' table. It groups the results by the department name, allowing users to see how many credits are associated with courses in each department.",
            "question": "Find the total credits of courses provided by different department."
        },
        {
            "sample_id": 1328,
            "gold_sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
            "gold_complexity": 8,
            "vt": "SELECT classroom.building, classroom.room_number FROM classroom WHERE classroom.capacity BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the buildings and room numbers of classrooms that can accommodate a specific range of students. The placeholders in the WHERE clause represent the minimum and maximum capacity of students that the classrooms can hold.",
            "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings."
        },
        {
            "sample_id": 1337,
            "gold_sql": "SELECT count(DISTINCT s_id) FROM advisor",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT s_id) FROM advisor",
            "ba": "The virtual table counts the number of distinct students who have an advisor assigned to them from the 'advisor' table. The placeholder in the COUNT function represents the unique student identifiers.",
            "question": "Count the number of students who have advisors."
        },
        {
            "sample_id": 1331,
            "gold_sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT department.dept_name, department.building FROM department ORDER BY department.budget LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic departments along with their respective building locations. The results are ordered by the department's budget, and the number of departments returned is limited by a specified numeric value.",
            "question": "What is the department name and corresponding building for the department with the greatest budget?"
        },
        {
            "sample_id": 1353,
            "gold_sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(department.budget) FROM department WHERE department.dept_name = '[placeholder-type:string]' OR department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total budget allocated to specific academic departments from the 'department' table. The placeholders in the WHERE clause represent the names of the departments for which the budget is being summed up.",
            "question": "What is the sum of budgets of the Marketing and Finance departments?"
        },
        {
            "sample_id": 1418,
            "gold_sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
            "gold_complexity": 6,
            "vt": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
            "ba": "The virtual table lists all course IDs from the 'course' table that do not have any prerequisites associated with them. This is achieved by selecting course IDs from the 'course' table and excluding those that appear in the 'prereq' table, effectively identifying courses that can be taken without prior course requirements.",
            "question": "Find the id of the courses that do not have any prerequisite?"
        },
        {
            "sample_id": 1457,
            "gold_sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
            "gold_complexity": 14,
            "vt": "SELECT student.name FROM student JOIN takes AS T2 ON T1.id = T2.id WHERE takes.course_id IN (SELECT prereq.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')",
            "ba": "The virtual table describes the names of students who are enrolled in courses that have prerequisites for a specific course titled 'International Finance'. It involves joining the 'student' table with the 'takes' table to filter students based on their course enrollments, and a subquery is used to identify the prerequisite courses associated with 'International Finance'.",
            "question": "What are the names of students who have taken the prerequisite for the course International Finance?"
        },
        {
            "sample_id": 1366,
            "gold_sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010",
            "ba": "The virtual table identifies instructors who taught courses in the Fall semester of 2009 but did not teach any courses in the Spring semester of 2010. It uses the 'teaches' table to filter instructors based on the specified semesters and years.",
            "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010."
        },
        {
            "sample_id": 1477,
            "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
            "ba": "The virtual table retrieves a list of course identifiers from the 'section' table for two specific semesters: Fall 2009 and Spring 2010. It combines the results from both semesters using a UNION operation, ensuring that the final output contains unique course identifiers from both queries.",
            "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?"
        },
        {
            "sample_id": 1478,
            "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
            "ba": "The virtual table identifies the unique course identifiers that were offered in both the Fall semester of 2009 and the Spring semester of 2010. It uses an INTERSECT operation to find common course IDs from two separate queries, each filtering sections by semester and year.",
            "question": "Find courses that ran in Fall 2009 and in Spring 2010."
        },
        {
            "sample_id": 1401,
            "gold_sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
            "gold_complexity": 12,
            "vt": "SELECT MIN(instructor.salary), instructor.dept_name FROM instructor GROUP BY instructor.dept_name HAVING AVG(instructor.salary) > (SELECT AVG(instructor.salary) FROM instructor)",
            "ba": "The virtual table provides the minimum salary of instructors grouped by their respective departments. It filters the results to only include departments where the average salary of instructors exceeds the overall average salary of all instructors.",
            "question": "What is the lowest salary in departments with average salary greater than the overall average."
        },
        {
            "sample_id": 1336,
            "gold_sql": "SELECT count(DISTINCT s_id) FROM advisor",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT s_id) FROM advisor",
            "ba": "The virtual table counts the number of distinct students who have an advisor from the 'advisor' table. The placeholder in the COUNT function represents the unique student identifiers.",
            "question": "How many students have advisors?"
        },
        {
            "sample_id": 1393,
            "gold_sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), classroom.building FROM classroom WHERE classroom.capacity > [placeholder-type:numeric] GROUP BY classroom.building",
            "ba": "The virtual table summarizes the number of classrooms in each building that can accommodate more than a specified number of students. The placeholder in the WHERE clause represents the minimum capacity required for the classrooms.",
            "question": "How many rooms in each building have a capacity of over 50?"
        },
        {
            "sample_id": 1414,
            "gold_sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
            "gold_complexity": 7,
            "vt": "SELECT advisor.i_id FROM advisor JOIN student AS T2 ON T1.s_id = T2.id WHERE student.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the identifiers of instructors who are acting as advisors for students enrolled in a specific department. It joins the 'advisor' table with the 'student' table to filter the results based on the department of the students.",
            "question": "What is the id of the instructor who advises of all students from History department?"
        },
        {
            "sample_id": 1448,
            "gold_sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT AVG(instructor.salary), COUNT(*) FROM instructor JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY department.budget LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average salary of instructors and counts the total number of instructors from the 'instructor' table, while joining with the 'department' table to ensure that the data is grouped by department. The results are ordered by the department's budget, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget."
        },
        {
            "sample_id": 1329,
            "gold_sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
            "gold_complexity": 8,
            "vt": "SELECT classroom.building, classroom.room_number FROM classroom WHERE classroom.capacity BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the buildings and room numbers of classrooms that can accommodate a specific range of students. The placeholders in the WHERE clause represent the minimum and maximum capacity of students that the classrooms can hold.",
            "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?"
        },
        {
            "sample_id": 1424,
            "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
            "gold_complexity": 13,
            "vt": "SELECT course.title FROM course WHERE course.course_id IN (SELECT prereq.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry')",
            "ba": "The virtual table lists the titles of courses that have 'Differential Geometry' as a prerequisite. It retrieves this information by first identifying the course ID of 'Differential Geometry' and then finding all courses that require it as a prerequisite.",
            "question": "Find the title of course whose prerequisite is course Differential Geometry."
        },
        {
            "sample_id": 1469,
            "gold_sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
            "gold_complexity": 7,
            "vt": "SELECT instructor.name, teaches.course_id FROM instructor JOIN teaches AS T2 ON T1.ID = T2.ID",
            "ba": "The virtual table describes the names of instructors along with the course identifiers for the courses they teach. It retrieves data from the 'instructor' table and joins it with the 'teaches' table to associate each instructor with their respective courses.",
            "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?"
        },
        {
            "sample_id": 1368,
            "gold_sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.name FROM student JOIN takes AS T2 ON T1.id = T2.id WHERE takes.year = [placeholder-type:numeric] OR takes.year = [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of students who have taken courses in either of the specified academic years. It joins the 'student' table with the 'takes' table to filter students based on their course enrollment in the given years.",
            "question": "Find the name of students who took any class in the years of 2009 and 2010."
        },
        {
            "sample_id": 1456,
            "gold_sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
            "gold_complexity": 14,
            "vt": "SELECT student.name FROM student JOIN takes AS T2 ON T1.id = T2.id WHERE takes.course_id IN (SELECT prereq.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance')",
            "ba": "The virtual table lists the names of students who are enrolled in courses that have prerequisites for a specific course titled 'International Finance'. It involves joining the 'student' table with the 'takes' table to find students who have taken courses that are prerequisites for the specified course.",
            "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance."
        },
        {
            "sample_id": 1466,
            "gold_sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
            "gold_complexity": 8,
            "vt": "SELECT instructor.name FROM instructor WHERE instructor.dept_name = '[placeholder-type:string]' AND instructor.salary > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of instructors from the 'instructor' table who belong to a specific department and have a salary greater than a specified amount. The placeholders in the WHERE clause represent the department's name and the salary threshold.",
            "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000."
        },
        {
            "sample_id": 1395,
            "gold_sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
            "gold_complexity": 9,
            "vt": "SELECT MAX(classroom.capacity), AVG(classroom.capacity), classroom.building FROM classroom GROUP BY classroom.building",
            "ba": "The virtual table summarizes the maximum and average capacities of classrooms grouped by their respective buildings. It provides insights into the space available for students in different buildings.",
            "question": "What are the greatest and average capacity for rooms in each building?"
        },
        {
            "sample_id": 1416,
            "gold_sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
            "gold_complexity": 10,
            "vt": "SELECT instructor.name, instructor.salary FROM advisor JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE student.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and salaries of instructors who are advising students from a specific department. The query joins the 'advisor' table with the 'instructor' table to get the instructor details and with the 'student' table to filter by the department of the students. The placeholder in the WHERE clause represents the department's name.",
            "question": "Find the name and salary of the instructors who are advisors of any student from History department?"
        },
        {
            "sample_id": 1413,
            "gold_sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT takes.semester, takes.year FROM takes GROUP BY takes.semester, takes.year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the semesters and years in which courses were taken by students, grouping the results by semester and year. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return based on the count of courses taken.",
            "question": "Which semeseter and year had the fewest students?"
        },
        {
            "sample_id": 1370,
            "gold_sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT course.dept_name FROM course GROUP BY course.dept_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of academic departments that offer courses, grouped by department name. It orders the departments based on the number of courses they offer and limits the results to a specified number of departments.",
            "question": "Find the names of the top 3 departments that provide the largest amount of courses?"
        },
        {
            "sample_id": 1442,
            "gold_sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
            "gold_complexity": 6,
            "vt": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
            "ba": "The virtual table identifies instructors who are not currently teaching any courses. It retrieves the unique identifiers of all instructors from the 'instructor' table and excludes those who are listed in the 'teaches' table, which contains information about instructors assigned to specific courses and sections.",
            "question": "Find the id of instructors who didn't teach any courses?"
        },
        {
            "sample_id": 1480,
            "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
            "ba": "The virtual table identifies the unique course identifiers from the 'section' table that were offered in the Fall semester of a specific year, excluding those that were offered in the Spring semester of the following year. This allows for the identification of courses that were available in one semester but not in another.",
            "question": "Find courses that ran in Fall 2009 but not in Spring 2010."
        },
        {
            "sample_id": 1340,
            "gold_sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT course_id) FROM course WHERE course.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of distinct courses offered by a specific academic department. The placeholder in the WHERE clause represents the name of the department.",
            "question": "How many different courses offered by Physics department?"
        },
        {
            "sample_id": 1462,
            "gold_sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
            "gold_complexity": 15,
            "vt": "SELECT section.building, section.room_number, section.semester, section.year FROM course JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE course.dept_name = '[placeholder-type:string]' ORDER BY course.title",
            "ba": "The virtual table describes the building and room number of sections offered for courses in a specific department, along with the semester and year they are taught. The placeholder in the WHERE clause represents the department's name, allowing users to filter results based on their department of interest.",
            "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles."
        },
        {
            "sample_id": 1453,
            "gold_sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
            "gold_complexity": 13,
            "vt": "SELECT student.name FROM student WHERE NOT student.id IN (SELECT takes.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology')",
            "ba": "The virtual table lists the names of students who are not enrolled in any courses offered by the Biology department. It does this by selecting from the 'student' table and excluding those students whose IDs appear in a subquery that retrieves IDs of students taking courses from the Biology department.",
            "question": "What are the names of students who haven't taken any Biology courses?"
        },
        {
            "sample_id": 1365,
            "gold_sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
            "gold_complexity": 7,
            "vt": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
            "ba": "The virtual table lists the titles of courses offered by the 'course' table that belong to the 'Statistics' department but excludes those that are also offered by the 'Psychology' department. The query uses the EXCEPT operator to filter out any overlapping course titles between the two departments.",
            "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?"
        },
        {
            "sample_id": 1324,
            "gold_sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM classroom WHERE classroom.building <> '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of classrooms located in buildings other than a specified building. The placeholder in the WHERE clause represents the name of the building to be excluded from the count.",
            "question": "Count the number of rooms that are not in the Lamberton building."
        },
        {
            "sample_id": 1356,
            "gold_sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM classroom WHERE classroom.building = '[placeholder-type:string]' AND classroom.capacity < [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of classrooms located in a specific building that have a capacity less than a specified number of students. The placeholders represent the building name and the maximum capacity limit.",
            "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?"
        },
        {
            "sample_id": 1441,
            "gold_sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
            "gold_complexity": 10,
            "vt": "SELECT instructor.name FROM instructor WHERE NOT instructor.id IN (SELECT instructor.id FROM teaches)",
            "ba": "The virtual table lists the names of instructors from the 'instructor' table who are not currently teaching any courses. The subquery identifies instructors who are teaching by checking their IDs in the 'teaches' table, and the main query selects those instructors whose IDs are not found in that list.",
            "question": "What are the names of instructors who didn't teach?"
        },
        {
            "sample_id": 1346,
            "gold_sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM course WHERE NOT course.course_id IN (SELECT course.course_id FROM prereq)",
            "ba": "The virtual table counts the number of courses from the 'course' table that do not have any prerequisites associated with them. The subquery identifies all course IDs that have prerequisites, and the main query counts those courses that are not included in that list.",
            "question": "How many courses that do not have prerequisite?"
        },
        {
            "sample_id": 1479,
            "gold_sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
            "gold_complexity": 8,
            "vt": "SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010",
            "ba": "The virtual table identifies the unique course identifiers from the 'section' table that were offered in both the Fall semester of 2009 and the Spring semester of 2010. It uses an INTERSECT operation to find common course IDs between the two specified semesters.",
            "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?"
        },
        {
            "sample_id": 1364,
            "gold_sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
            "gold_complexity": 7,
            "vt": "SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology'",
            "ba": "The virtual table lists the titles of courses offered by the 'course' table that belong to the 'Statistics' department but excludes those that are also offered by the 'Psychology' department. The query uses the EXCEPT operator to filter out any overlapping course titles between the two departments.",
            "question": "Find the title of course that is provided by Statistics but not Psychology departments."
        },
        {
            "sample_id": 1382,
            "gold_sql": "SELECT * FROM instructor ORDER BY salary",
            "gold_complexity": 6,
            "vt": "SELECT * FROM instructor ORDER BY instructor.salary",
            "ba": "The virtual table displays all information from the 'instructor' table, sorted by the annual salary of each instructor in ascending order. This allows users to view the details of instructors while prioritizing their salary information.",
            "question": "List the information of all instructors ordered by their salary in ascending order."
        },
        {
            "sample_id": 1410,
            "gold_sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), student.dept_name FROM student GROUP BY student.dept_name",
            "ba": "The virtual table summarizes the number of students in each academic department by counting the total number of students grouped by their respective department names from the 'student' table.",
            "question": "Find the total number of students in each department."
        },
        {
            "sample_id": 1322,
            "gold_sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT classroom.building FROM classroom WHERE classroom.capacity > [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique buildings from the 'classroom' table that have a capacity greater than a specified number of students. The placeholder in the WHERE clause represents the minimum capacity requirement.",
            "question": "Find the buildings which have rooms with capacity more than 50."
        },
        {
            "sample_id": 1489,
            "gold_sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
            "gold_complexity": 11,
            "vt": "SELECT instructor.name FROM instructor WHERE instructor.salary > (SELECT MIN(instructor.salary) FROM instructor WHERE dept_name = 'Biology')",
            "ba": "The virtual table lists the names of instructors from the 'instructor' table whose salaries are greater than the minimum salary of instructors in the 'Biology' department.",
            "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?"
        },
        {
            "sample_id": 1446,
            "gold_sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT instructor.dept_name FROM instructor GROUP BY instructor.dept_name ORDER BY AVG(instructor.salary) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of academic departments from the 'instructor' table, grouping the results by department name. It orders the departments based on the average salary of instructors within each department and limits the number of results returned based on a specified numeric value.",
            "question": "Find the name of the department which has the highest average salary of professors."
        },
        {
            "sample_id": 1423,
            "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
            "gold_complexity": 13,
            "vt": "SELECT course.title FROM course WHERE course.course_id IN (SELECT prereq.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
            "ba": "The virtual table lists the titles of courses that are prerequisites for a specific course identified by its title, 'International Finance'. It retrieves this information by first identifying the prerequisite course IDs associated with 'International Finance' and then selecting the titles of those prerequisite courses.",
            "question": "Give the title of the prerequisite to the course International Finance."
        },
        {
            "sample_id": 1422,
            "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
            "gold_complexity": 13,
            "vt": "SELECT course.title FROM course WHERE course.course_id IN (SELECT prereq.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance')",
            "ba": "The virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. It retrieves the course titles from the 'course' table where the course ID matches those found in the 'prereq' table, which links prerequisite courses to their respective courses.",
            "question": "What is the title of the prerequisite class of International Finance course?"
        },
        {
            "sample_id": 1387,
            "gold_sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
            "gold_complexity": 12,
            "vt": "SELECT course.title, instructor.name FROM course JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE teaches.year = [placeholder-type:numeric] ORDER BY course.title",
            "ba": "The virtual table describes the titles of courses along with the names of instructors who teach them, filtered by a specific academic year. The placeholders in the WHERE clause represent the year for which the courses are being queried.",
            "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title."
        },
        {
            "sample_id": 1450,
            "gold_sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
            "gold_complexity": 13,
            "vt": "SELECT course.title, course.credits FROM classroom JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE classroom.capacity = (SELECT MAX(classroom.capacity) FROM classroom)",
            "ba": "The virtual table describes the titles and credits of courses offered in the classroom with the maximum capacity. It joins the 'classroom' table with the 'section' table to find sections held in classrooms based on building and room number, and then joins with the 'course' table to retrieve course details.",
            "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?"
        },
        {
            "sample_id": 1394,
            "gold_sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
            "gold_complexity": 9,
            "vt": "SELECT MAX(classroom.capacity), AVG(classroom.capacity), classroom.building FROM classroom GROUP BY classroom.building",
            "ba": "The virtual table summarizes the maximum and average capacities of classrooms grouped by their respective buildings. It provides insights into the space available for students in different buildings.",
            "question": "Find the maximum and average capacity among rooms in each building."
        },
        {
            "sample_id": 1437,
            "gold_sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
            "gold_complexity": 13,
            "vt": "SELECT course.title FROM course WHERE course.course_id IN (SELECT prereq.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing')",
            "ba": "The virtual table lists the titles of courses that are prerequisites for a specific course identified by its title. It retrieves the course titles from the 'course' table where the course ID matches those found in the 'prereq' table, which links prerequisite courses to their respective courses.",
            "question": "What is the title of the course that is a prerequisite for Mobile Computing?"
        }
    ],
    "course_teach": [
        {
            "sample_id": 7400,
            "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT teacher.name FROM course_arrange JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY teacher.name HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of teachers who are assigned to teach multiple courses. It retrieves the names from the 'teacher' table and uses a join with the 'course_arrange' table to link teachers to their respective courses. The query groups the results by teacher names and filters to include only those teachers who are associated with a number of courses that meets or exceeds a specified threshold.",
            "question": "Show names of teachers that teach at least two courses."
        },
        {
            "sample_id": 7390,
            "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the hometowns of teachers from the 'teacher' table, grouping the results by hometown and filtering to include only those hometowns that have a count of teachers greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of teachers required from each hometown.",
            "question": "Show the hometowns shared by at least two teachers."
        },
        {
            "sample_id": 7382,
            "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
            "gold_complexity": 6,
            "vt": "SELECT teacher.name FROM teacher WHERE teacher.age = [placeholder-type:numeric] OR teacher.age = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of teachers from the 'teacher' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the teachers being queried.",
            "question": "Show the name of teachers aged either 32 or 33?"
        },
        {
            "sample_id": 7388,
            "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the hometowns of teachers from the 'teacher' table, grouping the results by hometown and ordering them based on the count of teachers from each hometown. The placeholder in the LIMIT clause allows for specifying the maximum number of hometowns to return.",
            "question": "List the most common hometown of teachers."
        },
        {
            "sample_id": 7377,
            "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
            "gold_complexity": 6,
            "vt": "SELECT teacher.name FROM teacher ORDER BY teacher.age",
            "ba": "The virtual table lists the names of teachers from the 'teacher' table, ordered by their age. This allows users to see the names of teachers in a sequence from the youngest to the oldest.",
            "question": "What are the names of the teachers ordered by ascending age?"
        },
        {
            "sample_id": 7380,
            "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
            "gold_complexity": 6,
            "vt": "SELECT teacher.name FROM teacher WHERE teacher.hometown <> None.\"little lever urban district\"",
            "ba": "The virtual table describes the names of teachers from the 'teacher' table who do not belong to a specific hometown. The placeholder in the WHERE clause represents the hometown that is being excluded.",
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' ."
        },
        {
            "sample_id": 7394,
            "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
            "gold_complexity": 10,
            "vt": "SELECT teacher.name, course.course FROM course_arrange JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY teacher.name",
            "ba": "The virtual table describes the names of teachers along with the courses they are assigned to, by joining the 'course_arrange', 'course', and 'teacher' tables. The results are ordered by the teacher's name.",
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."
        },
        {
            "sample_id": 7384,
            "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT teacher.hometown FROM teacher ORDER BY teacher.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the hometowns of teachers from the 'teacher' table, ordered by their age, and limits the results to a specified number of entries.",
            "question": "What is the hometown of the youngest teacher?"
        },
        {
            "sample_id": 7393,
            "gold_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
            "gold_complexity": 8,
            "vt": "SELECT teacher.name, course.course FROM course_arrange JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "ba": "The virtual table describes the names of teachers along with the courses they are assigned to, by joining the 'course_arrange', 'course', and 'teacher' tables. The placeholders represent the identifiers for the courses and teachers involved in the arrangement.",
            "question": "What is the name of each teacher and what course they teach?"
        },
        {
            "sample_id": 7401,
            "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT teacher.name FROM course_arrange JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY teacher.name HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of teachers who are assigned to courses, filtered by the number of courses they teach. The placeholder in the HAVING clause represents the minimum number of courses a teacher must be associated with to be included in the results.",
            "question": "What are the names of the teachers who teach at least two courses?"
        },
        {
            "sample_id": 7398,
            "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
            "gold_complexity": 9,
            "vt": "SELECT teacher.name, COUNT(*) FROM course_arrange JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY teacher.name",
            "ba": "The virtual table provides a summary of the names of teachers along with the count of courses they are assigned to, by joining the 'course_arrange' table with the 'teacher' table. The result is grouped by the teacher's name to aggregate the number of courses for each teacher.",
            "question": "Show names of teachers and the number of courses they teach."
        },
        {
            "sample_id": 7376,
            "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
            "gold_complexity": 6,
            "vt": "SELECT teacher.name FROM teacher ORDER BY teacher.age",
            "ba": "The virtual table lists the names of teachers from the 'teacher' table, ordered by their age. This allows users to see the names of teachers in a sequence from the youngest to the oldest.",
            "question": "List the names of teachers in ascending order of age."
        },
        {
            "sample_id": 7386,
            "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
            "gold_complexity": 8,
            "vt": "SELECT teacher.hometown, COUNT(*) FROM teacher GROUP BY teacher.hometown",
            "ba": "The virtual table provides a count of teachers grouped by their hometowns from the 'teacher' table. The placeholder in the SELECT clause represents the hometown of the teachers, and the COUNT function is used to aggregate the number of teachers from each hometown.",
            "question": "Show different hometown of teachers and the number of teachers from each hometown."
        },
        {
            "sample_id": 7379,
            "gold_sql": "SELECT Age ,  Hometown FROM teacher",
            "gold_complexity": 6,
            "vt": "SELECT teacher.age, teacher.hometown FROM teacher",
            "ba": "The virtual table provides the age and hometown of teachers from the 'teacher' table.",
            "question": "What is the age and hometown of every teacher?"
        },
        {
            "sample_id": 7387,
            "gold_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
            "gold_complexity": 8,
            "vt": "SELECT teacher.hometown, COUNT(*) FROM teacher GROUP BY teacher.hometown",
            "ba": "The virtual table provides a count of teachers grouped by their hometowns from the 'teacher' table. The placeholder in the SELECT statement allows for the aggregation of teacher data based on their respective hometowns.",
            "question": "For each hometown, how many teachers are there?"
        },
        {
            "sample_id": 7383,
            "gold_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
            "gold_complexity": 6,
            "vt": "SELECT teacher.name FROM teacher WHERE teacher.age = [placeholder-type:numeric] OR teacher.age = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of teachers from the 'teacher' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the teachers being queried.",
            "question": "What are the names of the teachers who are aged either 32 or 33?"
        },
        {
            "sample_id": 7402,
            "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "gold_complexity": 10,
            "vt": "SELECT teacher.name FROM teacher WHERE NOT teacher.teacher_id IN (SELECT teacher.teacher_id FROM course_arrange)",
            "ba": "The virtual table lists the names of teachers from the 'teacher' table who are not assigned to any course in the 'course_arrange' table. The query uses a subquery to filter out teachers that have an entry in the 'course_arrange' table, ensuring only those without assignments are displayed.",
            "question": "List the names of teachers who have not been arranged to teach courses."
        },
        {
            "sample_id": 7397,
            "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
            "gold_complexity": 8,
            "vt": "SELECT teacher.name FROM course_arrange JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE course.course = None.\"math\"",
            "ba": "The virtual table describes the names of teachers who are assigned to teach a specific course from the 'course' table. The query joins the 'course_arrange' table with the 'course' and 'teacher' tables to filter the results based on the course title. The placeholder in the WHERE clause represents the name of the course being queried.",
            "question": "What are the names of the people who teach math courses?"
        }
    ],
    "poker_player": [
        {
            "sample_id": 7665,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY poker_player.earnings",
            "ba": "The virtual table retrieves the names of individuals from the 'people' table who are also poker players, sorted by their total earnings in tournaments. The join operation links the 'people' table with the 'poker_player' table using the 'people_id' as the common identifier, ensuring that only those who have participated in poker tournaments are included in the results.",
            "question": "Return the names of poker players sorted by their earnings descending."
        },
        {
            "sample_id": 7671,
            "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT people.nationality FROM people GROUP BY people.nationality HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the nationalities of individuals from the 'people' table, grouping them by nationality and filtering to include only those nationalities that have a count of individuals greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of individuals required for a nationality to be included in the results.",
            "question": "Return the nationalities for which there are two or more people."
        },
        {
            "sample_id": 7664,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY poker_player.earnings",
            "ba": "The virtual table provides a list of names of poker players from the 'people' table, joined with their corresponding poker player details from the 'poker_player' table. The results are ordered by the players' total monetary winnings, allowing users to see the names of players ranked by their earnings in tournaments.",
            "question": "What are the names of poker players in descending order of earnings?"
        },
        {
            "sample_id": 7678,
            "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Nationality) FROM people",
            "ba": "The virtual table counts the distinct nationalities of individuals from the 'people' table.",
            "question": "How many distinct nationalities are there?"
        },
        {
            "sample_id": 7659,
            "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT people.birth_date FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY poker_player.earnings LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the birth dates of individuals from the 'people' table who are also poker players, sorted by their earnings in descending order. The query limits the results to a specified number of entries, represented by a placeholder for numeric values.",
            "question": "Return the birth date of the poker player with the lowest earnings."
        },
        {
            "sample_id": 7673,
            "gold_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
            "gold_complexity": 8,
            "vt": "SELECT people.name, people.birth_date FROM people ORDER BY people.name",
            "ba": "The virtual table displays the names and birth dates of individuals from the 'people' table, sorted in alphabetical order by name.",
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?"
        },
        {
            "sample_id": 7667,
            "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
            "gold_complexity": 8,
            "vt": "SELECT people.nationality, COUNT(*) FROM people GROUP BY people.nationality",
            "ba": "The virtual table summarizes the count of individuals grouped by their nationality from the 'people' table. The placeholder in the SELECT clause represents the nationality code, while the COUNT function aggregates the number of people for each nationality.",
            "question": "How many people are there of each nationality?"
        },
        {
            "sample_id": 7654,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE poker_player.earnings > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are poker players and have earnings exceeding a specified amount. The query joins the 'people' table with the 'poker_player' table based on the common 'people_id' to filter out those players with earnings above the given threshold.",
            "question": "What are the names of poker players whose earnings is higher than 300000?"
        },
        {
            "sample_id": 7679,
            "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Nationality) FROM people",
            "ba": "The virtual table counts the distinct nationalities of individuals from the 'people' table.",
            "question": "Count the number of different nationalities."
        },
        {
            "sample_id": 7661,
            "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT poker_player.money_rank FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY people.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the money rank of poker players from the 'poker_player' table, joining it with the 'people' table to access player details. The results are ordered by the height of the players, and a limit is applied to restrict the number of records returned based on a specified numeric value.",
            "question": "Return the money rank of the poker player with the greatest height."
        },
        {
            "sample_id": 7642,
            "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "gold_complexity": 6,
            "vt": "SELECT poker_player.earnings FROM poker_player ORDER BY poker_player.earnings",
            "ba": "The virtual table displays the total monetary winnings of poker players from the 'poker_player' table, sorted in ascending order based on their earnings. This allows users to see the earnings of all players, providing insight into their financial success in tournaments.",
            "question": "List the earnings of poker players in descending order."
        },
        {
            "sample_id": 7677,
            "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "gold_complexity": 10,
            "vt": "SELECT people.name FROM people WHERE NOT poker_player.people_id IN (SELECT poker_player.people_id FROM poker_player)",
            "ba": "The virtual table lists the names of individuals from the 'people' table who are not associated with any poker player in the 'poker_player' table. This is determined by checking for the absence of their 'people_id' in the 'poker_player' table.",
            "question": "What are the names of people who do not play poker?"
        },
        {
            "sample_id": 7657,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY poker_player.final_table_made",
            "ba": "The virtual table retrieves the names of individuals from the 'people' table who are also poker players, joining the 'poker_player' table to access their tournament performance details. The results are ordered based on whether the player reached the final table in tournaments, with a placeholder for sorting criteria.",
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?"
        },
        {
            "sample_id": 7641,
            "gold_sql": "SELECT count(*) FROM poker_player",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM poker_player",
            "ba": "The virtual table provides a count of all poker players from the 'poker_player' table, which includes unique identifiers and various performance metrics related to poker tournaments.",
            "question": "Count the number of poker players."
        },
        {
            "sample_id": 7666,
            "gold_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
            "gold_complexity": 8,
            "vt": "SELECT people.nationality, COUNT(*) FROM people GROUP BY people.nationality",
            "ba": "The virtual table summarizes the count of individuals grouped by their nationality from the 'people' table. The placeholder in the SELECT clause represents the nationality code, while the COUNT function aggregates the number of people for each nationality.",
            "question": "What are different nationalities of people and the corresponding number of people from each nation?"
        },
        {
            "sample_id": 7647,
            "gold_sql": "SELECT avg(Earnings) FROM poker_player",
            "gold_complexity": 4,
            "vt": "SELECT AVG(poker_player.earnings) FROM poker_player",
            "ba": "The virtual table calculates the average earnings of poker players from the 'poker_player' table. It provides a summary of the total monetary winnings across all players, represented by a placeholder for the average value.",
            "question": "Return the average earnings across all poker players."
        },
        {
            "sample_id": 7675,
            "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people WHERE people.nationality <> None.\"russia\"",
            "ba": "The virtual table lists the names of individuals from the 'people' table who do not have a nationality code corresponding to Russia. The placeholder in the WHERE clause represents the nationality code that is being filtered out.",
            "question": "What are the names of people who are not from Russia?"
        },
        {
            "sample_id": 7662,
            "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
            "gold_complexity": 7,
            "vt": "SELECT AVG(poker_player.earnings) FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE people.height > [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average earnings of poker players from the 'poker_player' table who are taller than a specified height. It joins the 'people' table to access the height information of each player.",
            "question": "What is the average earnings of poker players with height higher than 200?"
        },
        {
            "sample_id": 7674,
            "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people WHERE people.nationality <> None.\"russia\"",
            "ba": "The virtual table lists the names of individuals from the 'people' table who do not have a nationality code corresponding to Russia. The placeholder in the WHERE clause represents the nationality code that is being excluded.",
            "question": "Show names of people whose nationality is not \"Russia\"."
        },
        {
            "sample_id": 7655,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE poker_player.earnings > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are poker players and have earnings exceeding a specified amount. The query joins the 'people' table with the 'poker_player' table based on the common 'people_id' to filter out those players with earnings above the given threshold.",
            "question": "Give the names of poker players who have earnings above 300000."
        },
        {
            "sample_id": 7646,
            "gold_sql": "SELECT avg(Earnings) FROM poker_player",
            "gold_complexity": 4,
            "vt": "SELECT AVG(poker_player.earnings) FROM poker_player",
            "ba": "The virtual table calculates the average earnings of poker players from the 'poker_player' table. It aggregates the 'earnings' column to provide a summary statistic of the total monetary winnings across all players.",
            "question": "What is the average earnings of poker players?"
        },
        {
            "sample_id": 7668,
            "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT people.nationality FROM people GROUP BY people.nationality ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the distinct nationalities of players from the 'people' table, grouping them to count how many players belong to each nationality. The results are ordered by the count of players in each nationality, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "What is the most common nationality of people?"
        },
        {
            "sample_id": 7645,
            "gold_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
            "gold_complexity": 6,
            "vt": "SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player",
            "ba": "The virtual table describes the final table status and the best finish position of poker players from the 'poker_player' table. This information is useful for analyzing player performance in tournaments.",
            "question": "What are the final tables made and best finishes for all poker players?"
        },
        {
            "sample_id": 7649,
            "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT poker_player.money_rank FROM poker_player ORDER BY poker_player.earnings LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the money rank of poker players from the 'poker_player' table, ordered by their total earnings. The placeholder in the LIMIT clause allows for specifying the number of results to return.",
            "question": "Return the money rank of the player with the greatest earnings."
        }
    ],
    "race_track": [
        {
            "sample_id": 766,
            "gold_sql": "SELECT name ,  CLASS ,  date FROM race",
            "gold_complexity": 8,
            "vt": "SELECT race.name, race.class, race.date FROM race",
            "ba": "The virtual table describes the name, class, and date of races from the 'race' table. The query does not filter any specific conditions, allowing for a comprehensive view of all scheduled races.",
            "question": "What are the names, classes, and dates for all races?"
        },
        {
            "sample_id": 756,
            "gold_sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
            "gold_complexity": 6,
            "vt": "SELECT MIN(track.seating), MAX(track.seating), AVG(track.seating) FROM track",
            "ba": "The virtual table provides aggregate seating information from the 'track' table, including the minimum, maximum, and average seating capacities of all tracks.",
            "question": "Return the minimum, maximum, and average seating across all tracks."
        },
        {
            "sample_id": 784,
            "gold_sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
            "gold_complexity": 9,
            "vt": "SELECT race.name, race.date, track.name FROM race JOIN track AS T2 ON T1.track_id = T2.track_id",
            "ba": "The virtual table describes the names and dates of races along with the names of the tracks where they are held. It combines data from the 'race' table and the 'track' table using a join on the track identifier.",
            "question": "What are the names and dates of races, and the names of the tracks where they are held?"
        },
        {
            "sample_id": 788,
            "gold_sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
            "gold_complexity": 9,
            "vt": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
            "ba": "The virtual table identifies the locations of racing tracks that have a seating capacity greater than 90,000 and less than 70,000. The use of INTERSECT indicates that it is looking for locations that meet both conditions, which is logically impossible since no track can simultaneously have a seating capacity greater than 90,000 and less than 70,000.",
            "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?"
        },
        {
            "sample_id": 776,
            "gold_sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
            "gold_complexity": 10,
            "vt": "SELECT race.name FROM track WHERE NOT race.track_id IN (SELECT race.track_id FROM race)",
            "ba": "The virtual table lists the names of race events from the 'race' table that are not associated with any track in the 'track' table. The query uses a subquery to filter out tracks that have races scheduled, ensuring only races without a corresponding track are displayed.",
            "question": "Return the names of tracks that have no had any races."
        },
        {
            "sample_id": 757,
            "gold_sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
            "gold_complexity": 13,
            "vt": "SELECT track.name, track.location, track.year_opened FROM track WHERE track.seating > (SELECT AVG(track.seating) FROM track)",
            "ba": "The virtual table provides information about racing tracks that have a seating capacity greater than the average seating capacity of all tracks. It selects the name, location, and year opened of these tracks.",
            "question": "Show the name, location, open year for all tracks with a seating higher than the average."
        },
        {
            "sample_id": 781,
            "gold_sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT track.name FROM race JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY race.track_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of racing tracks associated with races, grouping the results by track to count the number of races held at each track. The results are ordered by the count of races in descending order, and a limit is applied to restrict the number of tracks returned.",
            "question": "Show the name of track with most number of races."
        },
        {
            "sample_id": 752,
            "gold_sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
            "gold_complexity": 10,
            "vt": "SELECT track.name, track.seating FROM track WHERE track.year_opened > [placeholder-type:numeric] ORDER BY track.seating",
            "ba": "The virtual table provides information about racing tracks, specifically their names and seating capacities, from the 'track' table. It filters the results to include only those tracks that were opened after a certain year, represented by a placeholder for numeric values. The results are ordered by the seating capacity of the tracks.",
            "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?"
        },
        {
            "sample_id": 785,
            "gold_sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
            "gold_complexity": 11,
            "vt": "SELECT track.name, track.location FROM race JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY race.track_id HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and locations of racing tracks associated with races, filtered by the number of races held on each track. The placeholder in the HAVING clause represents the minimum count of races that must be held on a track to be included in the results.",
            "question": "Show the name and location of track with 1 race."
        },
        {
            "sample_id": 769,
            "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT race.class FROM race GROUP BY race.class ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the classifications of races from the 'race' table, grouping them to count how many races fall under each classification. The result is ordered by the number of races in each classification, and a placeholder is used to limit the number of classifications returned.",
            "question": "What is the race class with most number of races."
        },
        {
            "sample_id": 773,
            "gold_sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
            "gold_complexity": 11,
            "vt": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT'",
            "ba": "The virtual table lists the names of racing tracks that do not host any 'GT' class races. It does this by selecting all track names from the 'track' table and excluding those that are associated with 'GT' class races in the 'race' table.",
            "question": "What are the names for tracks without a race in class 'GT'."
        },
        {
            "sample_id": 782,
            "gold_sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT track.name FROM race JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY race.track_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of racing tracks associated with races, grouping the results by track to count the number of races held at each track. The results are ordered by the count of races in descending order, and a limit is applied to restrict the number of tracks returned.",
            "question": "What is the name of the track that has had the greatest number of races?"
        },
        {
            "sample_id": 770,
            "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT race.class FROM race GROUP BY race.class ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the classifications of races from the 'race' table, grouping them to count how many races fall under each classification. The result is ordered by the number of races in each classification, and a placeholder is used to limit the number of classifications returned.",
            "question": "Give the class of races that is most common."
        },
        {
            "sample_id": 775,
            "gold_sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
            "gold_complexity": 10,
            "vt": "SELECT race.name FROM track WHERE NOT race.track_id IN (SELECT race.track_id FROM race)",
            "ba": "The virtual table lists the names of race events from the 'race' table that do not have a corresponding track in the 'track' table. The query uses a subquery to filter out tracks that are associated with any race.",
            "question": "Show all track names that have had no races."
        },
        {
            "sample_id": 761,
            "gold_sql": "SELECT count(*) FROM race",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM race",
            "ba": "The virtual table provides a count of all race events recorded in the 'race' table.",
            "question": "How many races are there?"
        },
        {
            "sample_id": 762,
            "gold_sql": "SELECT count(*) FROM race",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM race",
            "ba": "The virtual table provides a count of all race events from the 'race' table.",
            "question": "Count the number of races."
        },
        {
            "sample_id": 787,
            "gold_sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000",
            "gold_complexity": 9,
            "vt": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
            "ba": "The virtual table identifies the locations of racing tracks that have a seating capacity greater than 90,000 and less than 70,000. The use of INTERSECT ensures that only locations meeting both conditions are returned.",
            "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats."
        },
        {
            "sample_id": 751,
            "gold_sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
            "gold_complexity": 10,
            "vt": "SELECT track.name, track.seating FROM track WHERE track.year_opened > [placeholder-type:numeric] ORDER BY track.seating",
            "ba": "The virtual table describes the names and seating capacities of racing tracks from the 'track' table that were opened after a specific year. The placeholder in the WHERE clause represents the year after which the tracks are considered.",
            "question": "Show names and seatings, ordered by seating for all tracks opened after 2000."
        },
        {
            "sample_id": 786,
            "gold_sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
            "gold_complexity": 11,
            "vt": "SELECT track.name, track.location FROM race JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY race.track_id HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and locations of racing tracks associated with races, filtered by the number of races held on each track. The placeholder in the HAVING clause represents the minimum count of races that must be held on a track to be included in the results.",
            "question": "What are the names and locations of tracks that have had exactly 1 race?"
        },
        {
            "sample_id": 780,
            "gold_sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
            "gold_complexity": 9,
            "vt": "SELECT track.name, COUNT(*) FROM race JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY race.track_id",
            "ba": "The virtual table provides a summary of the racing events held at different tracks, showing the name of each track along with the total number of races scheduled at that track. The query joins the 'race' and 'track' tables based on the track identifier, allowing us to aggregate the number of races per track.",
            "question": "What are the names of different tracks, and how many races has each had?"
        },
        {
            "sample_id": 758,
            "gold_sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)",
            "gold_complexity": 13,
            "vt": "SELECT track.name, track.location, track.year_opened FROM track WHERE track.seating > (SELECT AVG(track.seating) FROM track)",
            "ba": "The virtual table provides information about racing tracks that have a seating capacity greater than the average seating capacity of all tracks. It includes the name, location, and year opened for each qualifying track.",
            "question": "What are the names, locations, and years of opening for tracks with seating higher than average?"
        },
        {
            "sample_id": 764,
            "gold_sql": "SELECT DISTINCT CLASS FROM race",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT race.class FROM race",
            "ba": "The virtual table provides a distinct list of race classifications from the 'race' table. It does not filter by any specific criteria, allowing users to see all unique race classes available.",
            "question": "Return the different classes of races."
        },
        {
            "sample_id": 749,
            "gold_sql": "SELECT name ,  LOCATION FROM track",
            "gold_complexity": 6,
            "vt": "SELECT track.name, track.location FROM track",
            "ba": "The virtual table describes the names and locations of racing tracks from the 'track' table.",
            "question": "Show the name and location for all tracks."
        },
        {
            "sample_id": 771,
            "gold_sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT race.class FROM race GROUP BY race.class HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the classifications of races from the 'race' table, specifically focusing on those classifications that have a count of races greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of races required for each classification.",
            "question": "List the race class with at least two races."
        },
        {
            "sample_id": 768,
            "gold_sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
            "gold_complexity": 8,
            "vt": "SELECT race.class, COUNT(*) FROM race GROUP BY race.class",
            "ba": "The virtual table summarizes the number of races for each classification from the 'race' table. It groups the results by the 'class' column, allowing users to see how many races fall under each classification type.",
            "question": "What are the different classes of races, and how many races correspond to each?"
        }
    ],
    "scientist_1": [
        {
            "sample_id": 6490,
            "gold_sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), projects.name FROM projects JOIN assignedto AS T2 ON T1.code = T2.project WHERE projects.hours > [placeholder-type:numeric] GROUP BY projects.name",
            "ba": "The virtual table provides a count of scientists assigned to each project from the 'projects' table, where the total hours allocated for the project exceed a specified threshold. The results are grouped by the project name.",
            "question": "Find the number of scientists involved for the projects that require more than 300 hours."
        },
        {
            "sample_id": 6499,
            "gold_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
            "gold_complexity": 10,
            "vt": "SELECT projects.name FROM projects WHERE NOT projects.code IN (SELECT assignedto.project FROM AssignedTo)",
            "ba": "The virtual table lists the names of projects from the 'projects' table that have not been assigned to any scientist. The query uses a subquery to filter out project codes that are present in the 'assignedto' table, ensuring only unassigned projects are displayed.",
            "question": "What are the names of projects that have not been assigned?"
        },
        {
            "sample_id": 6471,
            "gold_sql": "SELECT avg(hours) FROM projects",
            "gold_complexity": 4,
            "vt": "SELECT AVG(projects.hours) FROM projects",
            "ba": "The virtual table calculates the average total hours allocated for all projects from the 'projects' table.",
            "question": "What is the average hours across all projects?"
        },
        {
            "sample_id": 6466,
            "gold_sql": "SELECT count(DISTINCT scientist) FROM assignedto",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT scientist) FROM assignedto",
            "ba": "The virtual table counts the number of distinct scientists assigned to any project from the 'assignedto' table.",
            "question": "How many different scientists are assigned to any project?"
        },
        {
            "sample_id": 6468,
            "gold_sql": "SELECT count(DISTINCT name) FROM projects",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT name) FROM projects",
            "ba": "The virtual table counts the distinct names of projects from the 'projects' table.",
            "question": "Find the number of distinct projects."
        },
        {
            "sample_id": 6483,
            "gold_sql": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 300",
            "gold_complexity": 6,
            "vt": "SELECT projects.name FROM projects WHERE projects.hours BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of projects from the 'projects' table that have a total allocated hours falling within a specified range. The placeholders in the WHERE clause represent the minimum and maximum hours for filtering the projects.",
            "question": "What are the names of projects that require between 100 and 300 hours?"
        },
        {
            "sample_id": 6473,
            "gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT projects.name FROM projects ORDER BY projects.hours LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of projects from the 'projects' table, ordered by the total hours allocated for each project. The placeholder in the LIMIT clause represents the maximum number of project names to be returned.",
            "question": "What is the name of the project with the most hours?"
        },
        {
            "sample_id": 6485,
            "gold_sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'",
            "gold_complexity": 9,
            "vt": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
            "ba": "The virtual table identifies the names of scientists who are assigned to both projects titled 'Matter of Time' and 'A Puzzling Parallax'. It utilizes joins to connect the 'assignedto', 'projects', and 'scientists' tables based on their relationships, filtering for the specific project names.",
            "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?"
        },
        {
            "sample_id": 6503,
            "gold_sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM scientists WHERE NOT scientists.ssn IN (SELECT assignedto.scientist FROM AssignedTo)",
            "ba": "The virtual table counts the number of scientists from the 'scientists' table who are not assigned to any project. It uses a subquery to check against the 'assignedto' table to find scientists' SSNs that are currently assigned to projects.",
            "question": "How many scientists do not have any projects assigned to them?"
        },
        {
            "sample_id": 6476,
            "gold_sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT projects.name, projects.hours FROM projects JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY assignedto.project ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and total hours of projects from the 'projects' table that are assigned to scientists. It joins the 'projects' table with the 'assignedto' table to associate projects with their assigned scientists, groups the results by project code, and orders them based on the number of scientists assigned to each project. The placeholder in the LIMIT clause represents the maximum number of projects to return.",
            "question": "Find the name and hours of project that has the most number of scientists."
        },
        {
            "sample_id": 6465,
            "gold_sql": "SELECT sum(hours) FROM projects",
            "gold_complexity": 4,
            "vt": "SELECT SUM(projects.hours) FROM projects",
            "ba": "The virtual table calculates the total hours allocated for all projects from the 'projects' table.",
            "question": "What is the total number of hours for all projects?"
        },
        {
            "sample_id": 6477,
            "gold_sql": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT projects.name, projects.hours FROM projects JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY assignedto.project ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and total hours allocated for projects from the 'projects' table, which are associated with scientists through the 'assignedto' table. The query groups the results by project code and orders them based on the number of scientists assigned to each project, limiting the output to a specified number of projects.",
            "question": "What is the name and hours for the project which has the most scientists assigned to it?"
        },
        {
            "sample_id": 6498,
            "gold_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
            "gold_complexity": 10,
            "vt": "SELECT projects.name FROM projects WHERE NOT projects.code IN (SELECT assignedto.project FROM AssignedTo)",
            "ba": "The virtual table lists the names of projects from the 'projects' table that have not been assigned to any scientist. The query uses a subquery to filter out project codes that are present in the 'assignedto' table, ensuring only unassigned projects are displayed.",
            "question": "Select the project names which are not assigned yet."
        },
        {
            "sample_id": 6496,
            "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
            "gold_complexity": 5,
            "vt": "SELECT scientists.name FROM assignedto JOIN scientists AS T2 ON T1.scientist = T2.ssn",
            "ba": "The virtual table describes the names of scientists who are assigned to various projects. It retrieves the names from the 'scientists' table by joining it with the 'assignedto' table based on the social security number of the scientists.",
            "question": "Find the name of scientists who are assigned to some project."
        },
        {
            "sample_id": 6480,
            "gold_sql": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'",
            "gold_complexity": 8,
            "vt": "SELECT SUM(projects.hours) FROM assignedto JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE scientists.name = '[placeholder-type:string]' OR scientists.name = '[placeholder-type:string]'",
            "ba": "The virtual table summarizes the total hours allocated for projects assigned to scientists with specific names. It combines data from the 'assignedto', 'projects', and 'scientists' tables, filtering based on the names of the scientists provided as placeholders.",
            "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to."
        },
        {
            "sample_id": 6462,
            "gold_sql": "SELECT count(*) FROM scientists",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM scientists",
            "ba": "The virtual table counts the total number of scientists in the 'scientists' table.",
            "question": "Find the total number of scientists."
        },
        {
            "sample_id": 6491,
            "gold_sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), projects.name FROM projects JOIN assignedto AS T2 ON T1.code = T2.project WHERE projects.hours > [placeholder-type:numeric] GROUP BY projects.name",
            "ba": "The virtual table provides a count of scientists assigned to each project from the 'projects' table, where the total hours allocated for the project exceed a specified threshold. The results are grouped by the project name.",
            "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?"
        },
        {
            "sample_id": 6464,
            "gold_sql": "SELECT sum(hours) FROM projects",
            "gold_complexity": 4,
            "vt": "SELECT SUM(projects.hours) FROM projects",
            "ba": "The virtual table calculates the total hours allocated for all projects from the 'projects' table.",
            "question": "Find the total hours of all projects."
        },
        {
            "sample_id": 6469,
            "gold_sql": "SELECT count(DISTINCT name) FROM projects",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT name) FROM projects",
            "ba": "The virtual table counts the distinct names of projects from the 'projects' table.",
            "question": "How many different projects are there?"
        },
        {
            "sample_id": 6494,
            "gold_sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
            "gold_complexity": 14,
            "vt": "SELECT scientists.ssn, scientists.name FROM assignedto JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE projects.hours = (SELECT MAX(projects.hours) FROM projects)",
            "ba": "The virtual table provides a list of scientists along with their social security numbers who are assigned to the project that has the maximum total hours allocated. It combines data from the 'assignedto', 'projects', and 'scientists' tables to achieve this.",
            "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours."
        },
        {
            "sample_id": 6475,
            "gold_sql": "SELECT name FROM projects WHERE hours  >  (SELECT avg(hours) FROM projects)",
            "gold_complexity": 9,
            "vt": "SELECT projects.name FROM projects WHERE projects.hours > (SELECT AVG(projects.hours) FROM projects)",
            "ba": "The virtual table lists the names of projects from the 'projects' table that have a total allocated hours greater than the average hours of all projects.",
            "question": "What are the names of projects that have taken longer than the average number of hours for all projects?"
        },
        {
            "sample_id": 6506,
            "gold_sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
            "gold_complexity": 14,
            "vt": "SELECT scientists.name, projects.name, projects.hours FROM scientists JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY projects.name, scientists.name",
            "ba": "The virtual table describes the names of scientists along with the names and total hours allocated for their respective projects. It combines data from the 'scientists', 'projects', and 'assignedto' tables, linking them through their relationships. The results are ordered by project name and scientist name.",
            "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name."
        },
        {
            "sample_id": 6500,
            "gold_sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
            "gold_complexity": 10,
            "vt": "SELECT scientists.name FROM scientists WHERE NOT scientists.ssn IN (SELECT assignedto.scientist FROM AssignedTo)",
            "ba": "The virtual table describes the names of scientists from the 'scientists' table who are not assigned to any projects. The subquery in the WHERE clause checks for scientists' SSNs that are present in the 'assignedto' table, which links scientists to their respective projects.",
            "question": "Find the name of scientists who are not assigned to any project."
        },
        {
            "sample_id": 6504,
            "gold_sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
            "gold_complexity": 14,
            "vt": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MAX(hours) FROM projects)",
            "ba": "The virtual table lists the names of scientists who are not assigned to the project that has the maximum allocated hours.",
            "question": "Find the names of scientists who are not working on the project with the highest hours."
        },
        {
            "sample_id": 6495,
            "gold_sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
            "gold_complexity": 14,
            "vt": "SELECT scientists.ssn, scientists.name FROM assignedto JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE projects.hours = (SELECT MAX(projects.hours) FROM projects)",
            "ba": "The virtual table describes the social security numbers and names of scientists who are assigned to the project that has the maximum total hours allocated. It involves joining the 'assignedto' table with the 'projects' table to access project details and then joining with the 'scientists' table to retrieve the corresponding scientist information.",
            "question": "What are the SSN and names of scientists working on the project with the most hours?"
        },
        {
            "sample_id": 6493,
            "gold_sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), scientists.name FROM scientists JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY scientists.name",
            "ba": "The virtual table provides a count of the number of projects each scientist is assigned to, along with their names. It combines data from the 'scientists' and 'assignedto' tables, grouping the results by the scientist's name to aggregate the project counts.",
            "question": "What are the names of the scientists, and how many projects are each of them working on?"
        },
        {
            "sample_id": 6472,
            "gold_sql": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT projects.name FROM projects ORDER BY projects.hours LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of projects from the 'projects' table, ordered by the total hours allocated to each project. The placeholder in the LIMIT clause allows for specifying the maximum number of project names to retrieve.",
            "question": "Find the name of project that continues for the longest time."
        },
        {
            "sample_id": 6507,
            "gold_sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
            "gold_complexity": 14,
            "vt": "SELECT scientists.name, projects.name, projects.hours FROM scientists JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY projects.name, scientists.name",
            "ba": "The virtual table describes the names of scientists along with the names and total hours allocated for their respective projects. It combines data from the 'scientists', 'projects', and 'assignedto' tables, linking them through their relationships. The results are ordered by the project name and the scientist's name.",
            "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name."
        }
    ],
    "activity_1": [
        {
            "sample_id": 6742,
            "gold_sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
            "gold_complexity": 10,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE student.fname = None.\"linda\" AND student.lname = None.\"smith\"",
            "ba": "The virtual table describes the first and last names of faculty members who are advisors to a specific student identified by their first and last names. The placeholders in the WHERE clause represent the student's first and last names.",
            "question": "What are the first name and last name of Linda Smith's advisor?"
        },
        {
            "sample_id": 6761,
            "gold_sql": "SELECT count(*) FROM Activity",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM activity",
            "ba": "The virtual table provides a count of all activities recorded in the 'activity' table. This count represents the total number of unique activities available.",
            "question": "Find the number of activities available."
        },
        {
            "sample_id": 6735,
            "gold_sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
            "gold_complexity": 8,
            "vt": "SELECT faculty.rank, COUNT(*) FROM faculty GROUP BY faculty.rank",
            "ba": "The virtual table summarizes the number of faculty members grouped by their academic rank from the 'faculty' table. The query counts the total number of faculty members for each distinct rank, providing insights into the distribution of ranks within the faculty.",
            "question": "How many faculty members do we have for each faculty rank?"
        },
        {
            "sample_id": 6746,
            "gold_sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
            "gold_complexity": 10,
            "vt": "SELECT student.fname, student.lname FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE faculty.fname = None.\"michael\" AND faculty.lname = None.\"goodrich\"",
            "ba": "The virtual table describes the first and last names of students who are advised by a specific faculty member. The query joins the 'faculty' table with the 'student' table based on the advisor relationship, filtering for a faculty member with a specific first and last name.",
            "question": "Show first name and last name for all the students advised by Michael Goodrich."
        },
        {
            "sample_id": 6719,
            "gold_sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
            "gold_complexity": 6,
            "vt": "SELECT faculty.facid FROM faculty WHERE faculty.sex = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the unique identifiers of faculty members from the 'faculty' table based on their gender. The placeholder in the WHERE clause represents the gender of the faculty members being queried.",
            "question": "What are the faculty ids of all the male faculty members?"
        },
        {
            "sample_id": 6733,
            "gold_sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
            "gold_complexity": 10,
            "vt": "SELECT faculty.building FROM faculty WHERE faculty.rank = None.\"professor\" GROUP BY faculty.building HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the buildings where faculty members with the rank of 'professor' are located. It groups the results by building and filters to include only those buildings that have a count of professors greater than or equal to a specified number.",
            "question": "In which buildings are there at least ten professors?"
        },
        {
            "sample_id": 6750,
            "gold_sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
            "gold_complexity": 9,
            "vt": "SELECT faculty.rank, COUNT(*) FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY faculty.rank",
            "ba": "The virtual table summarizes the ranks of faculty members and the count of students they advise. It joins the 'faculty' table with the 'student' table based on the advisor relationship, grouping the results by faculty rank to show how many students are associated with each rank.",
            "question": "Show all the faculty ranks and the number of students advised by each rank."
        },
        {
            "sample_id": 6717,
            "gold_sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'",
            "gold_complexity": 10,
            "vt": "SELECT faculty.fname, faculty.lname, faculty.phone FROM faculty WHERE faculty.sex = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names, last names, and phone numbers of faculty members from the 'faculty' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the faculty members.",
            "question": "What are the first name, last name, and phone number of all the female faculty members?"
        },
        {
            "sample_id": 6726,
            "gold_sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
            "gold_complexity": 8,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty WHERE faculty.rank = None.\"instructor\"",
            "ba": "The virtual table describes the first and last names of faculty members from the 'faculty' table who hold the rank of instructor. The placeholder in the WHERE clause represents the specific rank of the faculty member.",
            "question": "Show the first name and last name for all the instructors."
        },
        {
            "sample_id": 6716,
            "gold_sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'",
            "gold_complexity": 10,
            "vt": "SELECT faculty.fname, faculty.lname, faculty.phone FROM faculty WHERE faculty.sex = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names, last names, and phone numbers of faculty members from the 'faculty' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the faculty members.",
            "question": "Show the first name, last name, and phone number for all female faculty members."
        },
        {
            "sample_id": 6758,
            "gold_sql": "SELECT activity_name FROM Activity",
            "gold_complexity": 4,
            "vt": "SELECT activity.activity_name FROM activity",
            "ba": "The virtual table describes the names of activities from the 'activity' table. There are no conditions or filters applied, so it retrieves all activity names available in the database.",
            "question": "What activities do we have?"
        },
        {
            "sample_id": 6760,
            "gold_sql": "SELECT count(*) FROM Activity",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM activity",
            "ba": "The virtual table provides a count of all activities recorded in the 'activity' table. This count gives an overview of the total number of distinct activities available.",
            "question": "How many activities do we have?"
        },
        {
            "sample_id": 6713,
            "gold_sql": "SELECT DISTINCT building FROM Faculty",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT faculty.building FROM faculty",
            "ba": "The virtual table retrieves a list of unique buildings where faculty members have their offices from the 'faculty' table.",
            "question": "What buildings have faculty offices?"
        },
        {
            "sample_id": 6782,
            "gold_sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
            "gold_complexity": 8,
            "vt": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20",
            "ba": "The virtual table identifies students who are participating in activities and are also under the age of 20. It combines data from the 'participates_in' table, which links students to activities, and the 'student' table, which contains student details including their age.",
            "question": "Show the ids for all the students who participate in an activity and are under 20."
        },
        {
            "sample_id": 6752,
            "gold_sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY faculty.facid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of faculty members who serve as advisors to students. It retrieves this information by joining the 'faculty' table with the 'student' table based on the advisor relationship. The results are grouped by faculty ID and ordered by the count of students they advise, with a limit on the number of faculty members returned.",
            "question": "What are the first and last name of the faculty who has the most students?"
        },
        {
            "sample_id": 6772,
            "gold_sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
            "gold_complexity": 13,
            "vt": "SELECT faculty.fname, faculty.lname, COUNT(*), faculty.facid FROM faculty JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY faculty.facid",
            "ba": "The virtual table provides a summary of faculty members who participate in various activities, displaying their first names, last names, and the count of activities they are involved in. It aggregates the data by faculty ID to ensure each faculty member is listed only once, along with the total number of activities they participate in.",
            "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in."
        },
        {
            "sample_id": 6711,
            "gold_sql": "SELECT DISTINCT rank FROM Faculty",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT faculty.rank FROM faculty",
            "ba": "The virtual table retrieves the distinct academic ranks of faculty members from the 'faculty' table.",
            "question": "Find the list of distinct ranks for faculty."
        },
        {
            "sample_id": 6744,
            "gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
            "gold_complexity": 7,
            "vt": "SELECT student.stuid FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE faculty.rank = None.\"professor\"",
            "ba": "The virtual table retrieves the unique identifiers of students whose academic advisor is a faculty member with the rank of 'professor'.",
            "question": "Show the ids of students whose advisors are professors."
        },
        {
            "sample_id": 6786,
            "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT activity.activity_name FROM activity JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY activity.actid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of activities from the 'activity' table, showing how many students participate in each activity. It joins the 'activity' table with the 'participates_in' table to count the number of participants for each activity, grouping the results by activity ID and ordering them by the count of participants. The placeholder represents the limit on the number of activities to display.",
            "question": "What is the name of the activity with the most students?"
        },
        {
            "sample_id": 6787,
            "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT activity.activity_name FROM activity JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY activity.actid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of activities from the 'activity' table, showing how many students participate in each activity. It joins the 'activity' table with the 'participates_in' table to count the number of participants for each activity, grouping the results by activity ID and ordering them by the count of participants. The placeholder in the LIMIT clause allows for specifying the maximum number of activities to return.",
            "question": "Find the name of the activity that has the largest number of student participants."
        },
        {
            "sample_id": 6718,
            "gold_sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
            "gold_complexity": 6,
            "vt": "SELECT faculty.facid FROM faculty WHERE faculty.sex = '[placeholder-type:string]'",
            "ba": "The virtual table lists the unique identifiers of faculty members from the 'faculty' table who match a specific gender. The placeholder in the WHERE clause represents the gender of the faculty members.",
            "question": "Show ids for all the male faculty."
        },
        {
            "sample_id": 6776,
            "gold_sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY faculty.facid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of faculty members' first and last names who participate in various activities. It joins the 'faculty' table with the 'faculty_participates_in' table to gather the necessary information. The results are grouped by faculty ID to ensure unique entries and ordered by the count of activities they participate in, limiting the output to a specified number of faculty members.",
            "question": "What is the first and last name of the faculty participating in the most activities?"
        },
        {
            "sample_id": 6753,
            "gold_sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY faculty.facid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of faculty members who serve as academic advisors to students. The query joins the 'faculty' table with the 'student' table based on the advisor relationship, grouping the results by faculty ID and ordering them by the number of students they advise, with a limit on the number of results returned.",
            "question": "Give me the the first and last name of the faculty who advises the most students."
        },
        {
            "sample_id": 6723,
            "gold_sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"",
            "gold_complexity": 11,
            "vt": "SELECT faculty.phone, faculty.room, faculty.building FROM faculty WHERE faculty.fname = None.\"jerry\" AND faculty.lname = None.\"prince\"",
            "ba": "The virtual table retrieves the contact information and office location of a specific faculty member from the 'faculty' table based on their first and last names. The placeholders in the WHERE clause represent the first and last names of the faculty member being queried.",
            "question": "What are the phone, room, and building of the faculty member called Jerry Prince?"
        },
        {
            "sample_id": 6793,
            "gold_sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
            "gold_complexity": 9,
            "vt": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
            "ba": "The virtual table identifies faculty members who participate in both 'Canoeing' and 'Kayaking' activities. It does this by joining the 'Faculty', 'Faculty_participates_in', and 'activity' tables to filter faculty names based on their participation in these specific activities.",
            "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?"
        },
        {
            "sample_id": 6774,
            "gold_sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
            "gold_complexity": 9,
            "vt": "SELECT activity.activity_name, COUNT(*) FROM activity JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY activity.actid",
            "ba": "The virtual table summarizes the number of faculty members participating in each activity from the 'activity' table. It joins the 'activity' table with the 'faculty_participates_in' table to count the number of faculty members associated with each activity, grouping the results by activity identifier.",
            "question": "Show all the activity names and the number of faculty involved in each activity."
        },
        {
            "sample_id": 6729,
            "gold_sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
            "gold_complexity": 8,
            "vt": "SELECT faculty.building, COUNT(*) FROM faculty GROUP BY faculty.building",
            "ba": "The virtual table summarizes the number of faculty members located in each building. It retrieves the building information from the 'faculty' table and counts the total number of faculty members associated with each building, grouping the results by the building name.",
            "question": "How many faculty members does each building have? List the result with the name of the building."
        },
        {
            "sample_id": 6740,
            "gold_sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
            "gold_complexity": 10,
            "vt": "SELECT faculty.sex, COUNT(*) FROM faculty WHERE faculty.rank = None.\"asstprof\" GROUP BY faculty.sex",
            "ba": "The virtual table summarizes the number of faculty members grouped by gender who hold the rank of assistant professor. The placeholder in the WHERE clause represents the specific rank of the faculty member.",
            "question": "Show the number of male and female assistant professors."
        },
        {
            "sample_id": 6765,
            "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
            "gold_complexity": 6,
            "vt": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
            "ba": "The virtual table identifies faculty members from the 'Faculty' table who are not participating in any activities listed in the 'Faculty_participates_in' table. The query uses the EXCEPT clause to exclude those faculty IDs that are present in the participation table.",
            "question": "Which faculty do not participate in any activity? Find their faculty ids."
        },
        {
            "sample_id": 6728,
            "gold_sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
            "gold_complexity": 8,
            "vt": "SELECT faculty.building, COUNT(*) FROM faculty GROUP BY faculty.building",
            "ba": "The virtual table summarizes the number of faculty members located in each building. It retrieves the building information from the 'faculty' table and counts the total number of faculty members associated with each building, grouping the results by the building name.",
            "question": "Show all the buildings along with the number of faculty members the buildings have."
        },
        {
            "sample_id": 6727,
            "gold_sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
            "gold_complexity": 8,
            "vt": "SELECT faculty.fname, faculty.lname FROM faculty WHERE faculty.rank = None.\"instructor\"",
            "ba": "The virtual table describes the first and last names of faculty members from the 'faculty' table who hold the rank of instructor. The placeholder in the WHERE clause represents the rank of the faculty member.",
            "question": "What are the first name and last name of all the instructors?"
        },
        {
            "sample_id": 6780,
            "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
            "gold_complexity": 6,
            "vt": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
            "ba": "The virtual table identifies students who are not participating in any activities by selecting their unique identifiers from the 'Student' table and excluding those who are listed in the 'Participates_in' table.",
            "question": "Show the ids of the students who don't participate in any activity."
        },
        {
            "sample_id": 6764,
            "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
            "gold_complexity": 6,
            "vt": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
            "ba": "The virtual table identifies faculty members who are not participating in any activities. It does this by selecting the unique identifiers of all faculty members from the 'Faculty' table and excluding those who are listed in the 'Faculty_participates_in' table, which records faculty participation in activities.",
            "question": "Show the ids of the faculty who don't participate in any activity."
        },
        {
            "sample_id": 6749,
            "gold_sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
            "gold_complexity": 9,
            "vt": "SELECT faculty.facid, COUNT(*) FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY faculty.facid",
            "ba": "The virtual table provides a count of students assigned to each faculty member based on their advisor relationship. It joins the 'faculty' table with the 'student' table, using the advisor identifier to link students to their respective faculty advisors. The result is grouped by the faculty member's unique identifier, allowing us to see how many students each faculty member advises.",
            "question": "What are the faculty id and the number of students each faculty has?"
        },
        {
            "sample_id": 6767,
            "gold_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
            "gold_complexity": 8,
            "vt": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
            "ba": "The virtual table identifies faculty members who are also academic advisors for students. It does this by selecting the unique identifiers of faculty members from the 'Faculty_participates_in' table and intersecting that with the list of advisors from the 'Student' table. The intersection ensures that only those faculty members who are advisors to students are included in the result.",
            "question": "What are ids of the faculty members who not only participate in an activity but also advise a student."
        },
        {
            "sample_id": 6784,
            "gold_sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT student.fname, student.lname FROM student JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY student.stuid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who participate in various activities. The query joins the 'student' table with the 'participates_in' table to associate students with their activities, groups the results by student ID, and orders them based on the count of activities they participate in. The placeholder in the LIMIT clause represents the maximum number of results to return.",
            "question": "What is the first and last name of the student participating in the most activities?"
        },
        {
            "sample_id": 6709,
            "gold_sql": "SELECT count(*) FROM Faculty",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM faculty",
            "ba": "The virtual table provides a count of all faculty members from the 'faculty' table.",
            "question": "What is the total number of faculty members?"
        },
        {
            "sample_id": 6779,
            "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT activity.activity_name FROM activity JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY activity.actid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of activities from the 'activity' table that have been participated in by faculty members. It joins the 'activity' table with the 'faculty_participates_in' table to count the number of faculty members participating in each activity. The results are grouped by activity ID and ordered by the count of participants, limiting the output to a specified number of activities.",
            "question": "Which activity has the most faculty members participating in? Find the activity name."
        },
        {
            "sample_id": 6775,
            "gold_sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
            "gold_complexity": 9,
            "vt": "SELECT activity.activity_name, COUNT(*) FROM activity JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY activity.actid",
            "ba": "The virtual table summarizes the number of faculty members participating in each activity from the 'activity' table. It joins the 'activity' table with the 'faculty_participates_in' table to count the number of faculty members associated with each activity, grouping the results by activity identifier.",
            "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members."
        },
        {
            "sample_id": 6762,
            "gold_sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT FacID) FROM faculty_participates_in",
            "ba": "The virtual table provides the count of distinct faculty members who participate in various activities from the 'faculty_participates_in' table. This count helps in understanding the level of faculty engagement in activities.",
            "question": "How many faculty members participate in an activity?"
        },
        {
            "sample_id": 6745,
            "gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
            "gold_complexity": 7,
            "vt": "SELECT student.stuid FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE faculty.rank = None.\"professor\"",
            "ba": "The virtual table retrieves the unique identifiers of students whose academic advisor is a faculty member with the rank of 'professor'. It joins the 'faculty' table with the 'student' table based on the advisor relationship.",
            "question": "Which students have professors as their advisors? Find their student ids."
        },
        {
            "sample_id": 6732,
            "gold_sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
            "gold_complexity": 10,
            "vt": "SELECT faculty.building FROM faculty WHERE faculty.rank = None.\"professor\" GROUP BY faculty.building HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the buildings where faculty members with the rank of 'professor' are located. It groups the results by building and filters to include only those buildings that have a count of professors greater than or equal to a specified number.",
            "question": "Show all the buildings that have at least 10 professors."
        },
        {
            "sample_id": 6785,
            "gold_sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT student.fname, student.lname FROM student JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY student.stuid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who participate in various activities. It joins the 'student' table with the 'participates_in' table to associate students with their activities, groups the results by student ID, and orders them based on the count of activities they participate in. The placeholder in the LIMIT clause represents the maximum number of students to be returned.",
            "question": "Tell me the first and last name of the student who has the most activities."
        },
        {
            "sample_id": 6792,
            "gold_sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
            "gold_complexity": 9,
            "vt": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
            "ba": "The virtual table identifies faculty members who participate in both 'Canoeing' and 'Kayaking' activities. It does this by joining the 'Faculty', 'Faculty_participates_in', and 'activity' tables to filter faculty names based on their participation in these specific activities.",
            "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking."
        },
        {
            "sample_id": 6714,
            "gold_sql": "SELECT rank ,  Fname ,  Lname FROM Faculty",
            "gold_complexity": 8,
            "vt": "SELECT faculty.rank, faculty.fname, faculty.lname FROM faculty",
            "ba": "The virtual table describes the ranks and names of faculty members from the 'faculty' table. The query selects the 'rank', 'fname', and 'lname' columns to provide information about faculty members' academic ranks along with their first and last names.",
            "question": "Show the rank, first name, and last name for all the faculty."
        },
        {
            "sample_id": 6725,
            "gold_sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM faculty WHERE faculty.rank = None.\"professor\" AND faculty.building = None.\"neb\"",
            "ba": "The virtual table counts the number of faculty members from the 'faculty' table who hold the rank of 'professor' and are located in the 'neb' building. The placeholders in the WHERE clause represent the specific rank and building name.",
            "question": "Count the number of Professors who have office in building NEB."
        },
        {
            "sample_id": 6763,
            "gold_sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT FacID) FROM faculty_participates_in",
            "ba": "The virtual table counts the number of distinct faculty members who participate in various activities from the 'faculty_participates_in' table.",
            "question": "Give me the number of faculty members who participate in an activity"
        },
        {
            "sample_id": 6736,
            "gold_sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
            "gold_complexity": 12,
            "vt": "SELECT faculty.rank, faculty.sex, COUNT(*) FROM faculty GROUP BY faculty.rank, faculty.sex",
            "ba": "The virtual table summarizes the count of faculty members grouped by their academic rank and gender from the 'faculty' table.",
            "question": "Show all the ranks and the number of male and female faculty for each rank."
        },
        {
            "sample_id": 6795,
            "gold_sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
            "gold_complexity": 8,
            "vt": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'",
            "ba": "The virtual table identifies students who participate in both 'Canoeing' and 'Kayaking' activities. It does this by selecting student IDs from the 'participates_in' table, joining it with the 'activity' table to filter based on the activity names. The use of INTERSECT ensures that only those students who are involved in both activities are returned.",
            "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids."
        },
        {
            "sample_id": 6751,
            "gold_sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
            "gold_complexity": 9,
            "vt": "SELECT faculty.rank, COUNT(*) FROM faculty JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY faculty.rank",
            "ba": "The virtual table summarizes the number of students advised by faculty members, grouped by the academic rank of the faculty. It joins the 'faculty' table with the 'student' table based on the advisor relationship, allowing us to count how many students each rank of faculty advises.",
            "question": "How many students are advised by each rank of faculty? List the rank and the number of students."
        },
        {
            "sample_id": 6778,
            "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT activity.activity_name FROM activity JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY activity.actid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of activities from the 'activity' table that have been participated in by faculty members. It joins the 'activity' table with the 'faculty_participates_in' table to count the number of faculty members participating in each activity. The results are grouped by activity ID and ordered by the count of participants, with a limit on the number of activities returned based on a specified numeric placeholder.",
            "question": "What is the name of the activity that has the most faculty members involved in?"
        },
        {
            "sample_id": 6773,
            "gold_sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
            "gold_complexity": 13,
            "vt": "SELECT faculty.fname, faculty.lname, COUNT(*), faculty.facid FROM faculty JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY faculty.facid",
            "ba": "The virtual table provides a summary of faculty members who participate in various activities, displaying their first and last names along with the count of activities they are involved in. The query joins the 'faculty' table with the 'faculty_participates_in' table to aggregate the number of activities per faculty member, identified by their unique faculty ID.",
            "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in."
        }
    ],
    "voter_1": [
        {
            "sample_id": 7680,
            "gold_sql": "SELECT count(*) FROM area_code_state",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM area_code_state",
            "ba": "The virtual table counts the total number of entries in the 'area_code_state' table, which contains information about telephone area codes and their corresponding states.",
            "question": "How many states are there?"
        },
        {
            "sample_id": 7691,
            "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT area_code_state.area_code FROM area_code_state JOIN votes AS T2 ON T1.state = T2.state GROUP BY area_code_state.area_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the area codes associated with states from the 'area_code_state' table. It joins this table with the 'votes' table to correlate the votes cast from each state. The results are grouped by area code and ordered by the count of votes, allowing for a limit on the number of area codes returned.",
            "question": "What is the area code in which the most voters voted?"
        },
        {
            "sample_id": 7694,
            "gold_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
            "gold_complexity": 6,
            "vt": "SELECT contestants.contestant_name FROM contestants WHERE contestants.contestant_name LIKE None.\"%al%\"",
            "ba": "The virtual table describes the names of contestants from the 'contestants' table whose names contain a specific substring. The placeholder in the LIKE clause represents the substring to search for within the contestant names.",
            "question": "Return the names of the contestants whose names contain the substring 'Al' ."
        },
        {
            "sample_id": 7687,
            "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT contestants.contestant_number, contestants.contestant_name FROM contestants JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY contestants.contestant_number HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of contestants along with their unique identifiers from the 'contestants' table. It joins the 'contestants' table with the 'votes' table to aggregate the votes received by each contestant. The results are grouped by the contestant's number, and only those contestants who have received a number of votes greater than or equal to a specified threshold are included in the output. The placeholder in the HAVING clause represents the minimum number of votes required for a contestant to be listed.",
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?"
        },
        {
            "sample_id": 7690,
            "gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM contestants WHERE NOT contestants.contestant_number IN (SELECT contestants.contestant_number FROM votes)",
            "ba": "The virtual table counts the number of contestants who have not received any votes in the contest. It does this by selecting from the 'contestants' table and excluding those contestant numbers that appear in the 'votes' table.",
            "question": "How many contestants did not get voted?"
        },
        {
            "sample_id": 7681,
            "gold_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
            "gold_complexity": 8,
            "vt": "SELECT contestants.contestant_number, contestants.contestant_name FROM contestants ORDER BY contestants.contestant_name",
            "ba": "The virtual table lists the contestant numbers and names from the 'contestants' table, ordered alphabetically by the contestant's name.",
            "question": "List the contestant numbers and names, ordered by contestant name descending."
        },
        {
            "sample_id": 7684,
            "gold_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
            "gold_complexity": 6,
            "vt": "SELECT MAX(votes.created) FROM votes WHERE votes.state = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the most recent vote timestamp from the 'votes' table for a specific state. The placeholder in the WHERE clause represents the state from which the votes are being filtered.",
            "question": "What is last date created of votes from the state 'CA'?"
        },
        {
            "sample_id": 7693,
            "gold_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
            "gold_complexity": 9,
            "vt": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "ba": "The virtual table retrieves the area codes associated with the states from which two specific contestants, 'Tabatha Gehling' and 'Kelly Clauss', received votes. It uses joins to connect the contestants with their votes and the corresponding area codes based on the state.",
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'."
        },
        {
            "sample_id": 7689,
            "gold_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM votes WHERE votes.state = '[placeholder-type:string]' OR votes.state = '[placeholder-type:string]'",
            "ba": "The virtual table counts the total number of votes cast from specific states. The placeholders in the WHERE clause represent the names of the states being queried.",
            "question": "What are the number of votes from state 'NY' or 'CA'?"
        }
    ],
    "store_product": [
        {
            "sample_id": 4909,
            "gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
            "gold_complexity": 8,
            "vt": "SELECT store.store_name FROM store JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE district.district_name = None.\"khanewal district\"",
            "ba": "The virtual table lists the names of stores located in a specific district. It retrieves data from the 'store' table and joins it with the 'store_district' table to associate stores with their respective districts. Additionally, it joins with the 'district' table to filter the results based on the district's name.",
            "question": "Find the names of all stores in Khanewal District."
        },
        {
            "sample_id": 4936,
            "gold_sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
            "gold_complexity": 10,
            "vt": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"Village Store\"",
            "ba": "The virtual table identifies the names of districts that have both 'City Mall' and 'Village Store' types of stores. It does this by joining the 'store', 'store_district', and 'district' tables to filter the districts based on the store types. The use of INTERSECT ensures that only districts with both types of stores are returned.",
            "question": "What are the names of the districts that have both mall and village store style shops?"
        },
        {
            "sample_id": 4902,
            "gold_sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT district.district_name FROM district ORDER BY district.city_population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of districts from the 'district' table, ordered by the population of the cities within those districts. The placeholder in the LIMIT clause allows for specifying the maximum number of district names to return.",
            "question": "What is the name of the district with the most residents?"
        },
        {
            "sample_id": 4918,
            "gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT district.headquartered_city FROM store JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY district.headquartered_city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of cities where the headquarters of districts are located, based on the stores associated with those districts. It groups the results by the city names and orders them by the count of stores in each city, limiting the output to a specified number of results.",
            "question": "What is the city with the most number of flagship stores?"
        },
        {
            "sample_id": 4927,
            "gold_sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
            "gold_complexity": 6,
            "vt": "SELECT product.product FROM product WHERE product.product LIKE None.\"%scanner%\"",
            "ba": "The virtual table lists the names or descriptions of products from the 'product' table that match a specific search term related to scanners. The placeholder in the LIKE clause allows for flexible input to find products containing the term 'scanner'.",
            "question": "Find all the product whose name contains the word \"Scanner\"."
        },
        {
            "sample_id": 4930,
            "gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT product.max_page_size FROM product GROUP BY product.max_page_size ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the maximum page sizes of products from the 'product' table, grouping the results by the maximum page size and ordering them based on the count of occurrences. The placeholder in the LIMIT clause allows for specifying the number of results to return.",
            "question": "What is the most common maximum page size?"
        },
        {
            "sample_id": 4901,
            "gold_sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT district.district_name FROM district ORDER BY district.city_population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of districts from the 'district' table, ordered by the population of the cities within those districts. The placeholder in the LIMIT clause allows for specifying the maximum number of district names to retrieve.",
            "question": "Which district has the largest population?"
        },
        {
            "sample_id": 4935,
            "gold_sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
            "gold_complexity": 10,
            "vt": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = \"Village Store\"",
            "ba": "The virtual table identifies the district names where stores of both types, 'City Mall' and 'Village Store', are located. It uses joins to connect the 'store', 'store_district', and 'district' tables, filtering for the specific store types and finding common districts between them.",
            "question": "Find the names of districts where have both city mall and village store type stores."
        },
        {
            "sample_id": 4895,
            "gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
            "gold_complexity": 8,
            "vt": "SELECT product.max_page_size FROM product GROUP BY product.max_page_size HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the maximum page sizes of products from the 'product' table, grouping the results by the maximum page size. It filters the results to only include those maximum page sizes that are associated with more than a specified number of products.",
            "question": "Find the list of page size which have more than 3 product listed"
        },
        {
            "sample_id": 4896,
            "gold_sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
            "gold_complexity": 8,
            "vt": "SELECT product.max_page_size FROM product GROUP BY product.max_page_size HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the maximum page sizes of products from the 'product' table, grouping the results by the maximum page size. It filters the results to only include those maximum page sizes that are associated with more than a specified number of products, indicated by a placeholder for numeric values.",
            "question": "What is the maximum page size for everything that has more than 3 products listed?"
        },
        {
            "sample_id": 4926,
            "gold_sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
            "gold_complexity": 8,
            "vt": "SELECT product.product FROM product WHERE product.max_page_size = None.\"a4\" OR product.pages_per_minute_color < [placeholder-type:numeric]",
            "ba": "The virtual table lists the names or descriptions of products from the 'product' table that either have a maximum page size of 'a4' or have a print speed in pages per minute for color output that is less than a specified numeric value. The placeholder in the WHERE clause represents the numeric threshold for print speed.",
            "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?"
        },
        {
            "sample_id": 4912,
            "gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT store.store_name FROM store JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district.district_id = (SELECT district.district_id FROM district ORDER BY city_population DESC LIMIT 1)",
            "ba": "The virtual table lists the names of stores located in the district with the highest city population. It retrieves store names from the 'store' table and joins it with the 'store_district' table to filter stores based on their associated district. The district is determined by a subquery that selects the district with the maximum city population.",
            "question": "What are the names of all the stores in the largest district by population?"
        },
        {
            "sample_id": 4911,
            "gold_sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT store.store_name FROM store JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district.district_id = (SELECT district.district_id FROM district ORDER BY city_population DESC LIMIT 1)",
            "ba": "The virtual table lists the names of stores located in the district with the highest city population. It retrieves store names from the 'store' table and joins it with the 'store_district' table to filter stores based on their associated district. The district is determined by a subquery that selects the district with the largest city population.",
            "question": "Find all the stores in the district with the most population."
        },
        {
            "sample_id": 4932,
            "gold_sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT product.product FROM product WHERE product.product <> (SELECT product.max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table lists the names or descriptions of products from the 'product' table that do not match the most common maximum page size among all products. The subquery identifies the maximum page size that appears most frequently, and the main query filters out products with that specific maximum page size.",
            "question": "What are the names of all products that are not the most frequently-used maximum page size?"
        },
        {
            "sample_id": 4903,
            "gold_sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT district.district_name FROM district ORDER BY district.city_area LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of districts from the 'district' table, ordered by the total area of the cities within those districts. The query limits the results to a specified number of districts.",
            "question": "Which district has the least area?"
        },
        {
            "sample_id": 4928,
            "gold_sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
            "gold_complexity": 6,
            "vt": "SELECT product.product FROM product WHERE product.product LIKE None.\"%scanner%\"",
            "ba": "The virtual table lists the names or descriptions of products from the 'product' table that contain the term 'scanner'. The placeholder in the LIKE clause allows for flexible searching of product names or descriptions that match a specific pattern.",
            "question": "What are all of the products whose name includes the substring \"Scanner\"?"
        },
        {
            "sample_id": 4894,
            "gold_sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT district.district_name FROM district ORDER BY district.city_area",
            "ba": "The virtual table lists the unique names of districts from the 'district' table, ordered by the total area of the city within each district.",
            "question": "What are the different district names in order of descending city area?"
        },
        {
            "sample_id": 4921,
            "gold_sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"",
            "gold_complexity": 8,
            "vt": "SELECT product.product FROM product JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE store.store_name = None.\"miramichi\"",
            "ba": "The virtual table describes the names of products available in a specific store. It retrieves product names from the 'product' table by joining it with the 'store_product' table to link products to stores, and then further joins with the 'store' table to filter by the store's name. The placeholder in the WHERE clause represents the name of the store.",
            "question": "What products are available at store named \"Miramichi\"?"
        },
        {
            "sample_id": 4919,
            "gold_sql": "SELECT avg(pages_per_minute_color) FROM product",
            "gold_complexity": 4,
            "vt": "SELECT AVG(product.pages_per_minute_color) FROM product",
            "ba": "The virtual table calculates the average print speed in pages per minute for color output from the 'product' table. This provides insight into the performance of products based on their printing capabilities.",
            "question": "What is the average pages per minute color?"
        },
        {
            "sample_id": 4905,
            "gold_sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT SUM(district.city_population) FROM district ORDER BY district.city_area LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table calculates the total population of all cities within the districts from the 'district' table. The result is ordered by the area of the cities, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Find the total population of the top 3 districts with the largest area."
        },
        {
            "sample_id": 4915,
            "gold_sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
            "gold_complexity": 10,
            "vt": "SELECT district.headquartered_city, COUNT(*) FROM store JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY district.headquartered_city",
            "ba": "The virtual table summarizes the number of stores located in each city where the district's headquarters is situated. It retrieves the city names from the 'district' table and counts the total number of stores associated with each city. The query joins the 'store' table with the 'store_district' table to link stores to their respective districts, and then it groups the results by the city names to provide a count for each city.",
            "question": "Find the number of stores in each city."
        },
        {
            "sample_id": 4899,
            "gold_sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
            "gold_complexity": 7,
            "vt": "SELECT district.district_name FROM district WHERE district.city_area > [placeholder-type:numeric] OR district.city_population > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of districts from the 'district' table where the area of the city exceeds a specified size or the population of the city surpasses a certain number. The placeholders in the WHERE clause represent the criteria for city area and population.",
            "question": "Find the name all districts with city area greater than 10 or population larger than 100000"
        },
        {
            "sample_id": 4933,
            "gold_sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
            "gold_complexity": 9,
            "vt": "SELECT SUM(district.city_population) FROM district WHERE district.city_area > (SELECT AVG(district.city_area) FROM district)",
            "ba": "The virtual table calculates the total population of cities in districts where the area of the city exceeds the average area of all districts. The query uses a subquery to find the average city area and filters the districts accordingly.",
            "question": "Find the total population of the districts where the area is bigger than the average city area."
        },
        {
            "sample_id": 4922,
            "gold_sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"",
            "gold_complexity": 8,
            "vt": "SELECT product.product FROM product JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE store.store_name = None.\"miramichi\"",
            "ba": "The virtual table describes the names of products available in a specific store. It retrieves product names from the 'product' table by joining it with the 'store_product' table to link products to stores, and then further joins with the 'store' table to filter by the store's name. The placeholder in the WHERE clause represents the name of the store.",
            "question": "What products are sold at the store named Miramichi?"
        },
        {
            "sample_id": 4923,
            "gold_sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
            "gold_complexity": 8,
            "vt": "SELECT product.product FROM product WHERE product.max_page_size = None.\"a4\" AND product.pages_per_minute_color < [placeholder-type:numeric]",
            "ba": "The virtual table lists the names or descriptions of products from the 'product' table that have a maximum page size of 'a4' and a print speed in pages per minute for color output that is less than a specified numeric value. The placeholder in the WHERE clause represents the numeric threshold for print speed.",
            "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5."
        },
        {
            "sample_id": 4917,
            "gold_sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT district.headquartered_city FROM store JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY district.headquartered_city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of cities where the headquarters of districts are located, based on the stores associated with those districts. It groups the results by the city names and orders them by the count of stores in each city, limiting the output to a specified number of results.",
            "question": "Find the city with the most number of stores."
        }
    ],
    "tracking_orders": [
        {
            "sample_id": 6935,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
            "gold_complexity": 13,
            "vt": "SELECT customers.customer_name FROM customers, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE products.product_name = None.\"food\" GROUP BY customers.customer_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers who have ordered a specific product, in this case, food. It aggregates the results to show only those customers who have placed a certain number of orders for that product.",
            "question": "What are the names of the customers who bought product \"food\" at least once?"
        },
        {
            "sample_id": 6887,
            "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customers.customer_name FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE orders.order_status = None.\"packing\"",
            "ba": "The virtual table describes the distinct names of customers from the 'customers' table who have orders with a specific status. The query joins the 'customers' table with the 'orders' table to filter based on the order status, using a placeholder for the order status value.",
            "question": "Which customers have orders with status \"Packing\"? Give me the customer names."
        },
        {
            "sample_id": 6890,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_name FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of customers from the 'customers' table who have placed orders. It joins the 'customers' table with the 'orders' table based on the customer ID, groups the results by customer ID to count the number of orders each customer has made, and orders the results by the count of orders. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to return.",
            "question": "What is the name of the customer who has the most orders?"
        },
        {
            "sample_id": 6914,
            "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
            "gold_complexity": 6,
            "vt": "SELECT shipments.order_id FROM shipments WHERE shipments.shipment_date > None.\"2000-01-01\"",
            "ba": "The virtual table retrieves the order IDs from the 'shipments' table for shipments that were sent after a specific date. The placeholder in the WHERE clause represents the cutoff date for filtering shipments.",
            "question": "Find the ids of orders which are shipped after 2000-01-01."
        },
        {
            "sample_id": 6886,
            "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customers.customer_name FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE orders.order_status = None.\"packing\"",
            "ba": "The virtual table lists the distinct names of customers from the 'customers' table who have orders with a specific status. The query joins the 'customers' table with the 'orders' table to filter based on the order status, which is represented by a placeholder.",
            "question": "List the name of all the distinct customers who have orders with status \"Packing\"."
        },
        {
            "sample_id": 6905,
            "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
            "ba": "The virtual table identifies customers who have orders that are both 'On Road' and 'Shipped'. It does this by performing an intersection of two queries that join the 'customers' table with the 'orders' table based on the customer ID, filtering for the respective order statuses.",
            "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids."
        },
        {
            "sample_id": 6903,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
            "ba": "The virtual table identifies customers who have orders that are both 'On Road' and 'Shipped'. It does this by joining the 'customers' table with the 'orders' table based on the customer ID, and then filtering the results based on the order status. The use of INTERSECT ensures that only customers with orders in both statuses are returned.",
            "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names."
        },
        {
            "sample_id": 6881,
            "gold_sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT orders.order_id, orders.customer_id FROM orders ORDER BY orders.date_order_placed LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of order IDs and their corresponding customer IDs from the 'orders' table, sorted by the date the orders were placed. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "Find the order id and customer id associated with the oldest order."
        },
        {
            "sample_id": 6915,
            "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
            "gold_complexity": 6,
            "vt": "SELECT shipments.order_id FROM shipments WHERE shipments.shipment_date > None.\"2000-01-01\"",
            "ba": "The virtual table retrieves the order IDs from the 'shipments' table for shipments that were sent after a specific date. The placeholder in the WHERE clause represents the date from which to filter the shipments.",
            "question": "Which orders have shipment after 2000-01-01? Give me the order ids."
        },
        {
            "sample_id": 6885,
            "gold_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11",
            "gold_complexity": 6,
            "vt": "SELECT order_items.order_item_id FROM order_items WHERE order_items.product_id = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of order items from the 'order_items' table that are associated with a specific product. The placeholder in the WHERE clause represents the product's identifier.",
            "question": "Find all the order items whose product id is 11. What are the order item ids?"
        },
        {
            "sample_id": 6910,
            "gold_sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), products.product_id FROM orders, order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY products.product_id",
            "ba": "The virtual table provides a count of order items grouped by product ID from the 'products' table. It joins the 'orders' and 'order_items' tables to associate each order with its items, and then links to the 'products' table to retrieve product information. The result shows how many times each product has been ordered.",
            "question": "List the count and id of each product in all the orders."
        },
        {
            "sample_id": 6893,
            "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_id FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique customer identifiers from the 'customers' table, joining it with the 'orders' table to associate customers with their orders. It groups the results by customer ID and orders them based on the count of orders each customer has placed, limiting the output to a specified number of customers.",
            "question": "Find the id of the customer who made the most orders."
        },
        {
            "sample_id": 6904,
            "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
            "ba": "The virtual table identifies customers who have orders that are both 'On Road' and 'Shipped'. It does this by performing an intersection of two queries that join the 'customers' table with the 'orders' table based on the customer ID, filtering for each respective order status.",
            "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\"."
        },
        {
            "sample_id": 6922,
            "gold_sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT orders.order_id FROM orders JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY orders.order_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique order IDs from the 'orders' table. It joins the 'order_items' table to associate each order with its corresponding items. The results are grouped by order ID to ensure uniqueness, and they are ordered by the count of items associated with each order. The query limits the output to a specified number of results, represented by a placeholder for numeric values.",
            "question": "What is the id of the order which has the most items?"
        },
        {
            "sample_id": 6925,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_name FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of customer names from the 'customers' table. It joins the 'customers' table with the 'orders' table to associate each customer with their orders. The results are grouped by customer ID to ensure each customer appears only once, and they are ordered by the count of their associated orders. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to return.",
            "question": "Find the name of the customer who made the most orders."
        },
        {
            "sample_id": 6927,
            "gold_sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
            "gold_complexity": 8,
            "vt": "SELECT invoices.invoice_number FROM invoices WHERE invoices.invoice_date < None.\"1989-09-03\" OR invoices.invoice_date > None.\"2007-12-25\"",
            "ba": "The virtual table retrieves the invoice numbers from the 'invoices' table that were issued either before a specific date or after another specific date. The placeholders in the WHERE clause represent the dates for filtering the invoices.",
            "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?"
        },
        {
            "sample_id": 6924,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_name FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who have placed orders. It joins the 'customers' table with the 'orders' table based on the customer ID, groups the results by customer ID to count the number of orders each customer has made, and orders the results by the count of orders in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to return.",
            "question": "What is the name of the customer who has the largest number of orders?"
        },
        {
            "sample_id": 6919,
            "gold_sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT products.product_name FROM products ORDER BY products.product_name",
            "ba": "The virtual table lists the unique names of products from the 'products' table, sorted in alphabetical order. This allows users to see all available products without duplicates.",
            "question": "Sort all the distinct products in alphabetical order."
        },
        {
            "sample_id": 6882,
            "gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
            "gold_complexity": 6,
            "vt": "SELECT shipments.order_id FROM shipments WHERE shipments.shipment_tracking_number = None.\"3452\"",
            "ba": "The virtual table retrieves the order IDs from the 'shipments' table based on a specific shipment tracking number. The placeholder in the WHERE clause represents the tracking number of the shipment.",
            "question": "Find the id of the order whose shipment tracking number is \"3452\"."
        },
        {
            "sample_id": 6883,
            "gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
            "gold_complexity": 6,
            "vt": "SELECT shipments.order_id FROM shipments WHERE shipments.shipment_tracking_number = None.\"3452\"",
            "ba": "The virtual table retrieves the order IDs from the 'shipments' table based on a specific shipment tracking number. The placeholder in the WHERE clause represents the tracking number of the shipment.",
            "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order."
        },
        {
            "sample_id": 6898,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_name FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE orders.date_order_placed >= None.\"2009-01-01\" AND orders.date_order_placed <= None.\"2010-01-01\"",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who have placed orders within a specific date range. The query joins the 'customers' table with the 'orders' table based on the customer ID, and filters the results to include only those orders placed between two specified dates.",
            "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01."
        },
        {
            "sample_id": 6936,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
            "gold_complexity": 14,
            "vt": "SELECT customers.customer_name FROM customers, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE order_items.order_item_status = None.\"cancel\" AND products.product_name = None.\"food\" GROUP BY customers.customer_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers who have placed orders for a specific product type, in this case, food, and whose order items are not canceled. The query aggregates the results to show only those customers who have placed a minimum number of such orders, as indicated by the numeric placeholder.",
            "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\")."
        },
        {
            "sample_id": 6923,
            "gold_sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT orders.order_id FROM orders JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY orders.order_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique order IDs from the 'orders' table. It joins the 'orders' table with the 'order_items' table to count the number of items associated with each order. The results are grouped by order ID and ordered by the count of items in descending order, limiting the output to a specified number of results.",
            "question": "Which order deals with the most items? Return the order id."
        },
        {
            "sample_id": 6918,
            "gold_sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT products.product_name FROM products ORDER BY products.product_name",
            "ba": "The virtual table lists the unique product names from the 'products' table, sorted in alphabetical order. This allows users to see all available products without duplicates.",
            "question": "List the names of all distinct products in alphabetical order."
        },
        {
            "sample_id": 6909,
            "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
            "gold_complexity": 7,
            "vt": "SELECT orders.date_order_placed FROM orders JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE shipments.invoice_number = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates when orders were placed from the 'orders' table, specifically for those orders that have associated shipments. The query joins the 'orders' table with the 'shipments' table based on the order identifier, filtering the results to include only those shipments linked to a specific invoice number, represented by a placeholder for numeric values.",
            "question": "On what day was the order with invoice number 10 placed?"
        },
        {
            "sample_id": 6879,
            "gold_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT orders.order_id FROM orders ORDER BY orders.date_order_placed LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers of orders from the 'orders' table, sorted by the date they were placed. The placeholder in the LIMIT clause allows for specifying the maximum number of order IDs to retrieve.",
            "question": "Find the id of the order made most recently."
        },
        {
            "sample_id": 6889,
            "gold_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customers.customer_details FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE orders.order_status = None.\"on road\"",
            "ba": "The virtual table retrieves distinct customer details from the 'customers' table for customers who have orders with a specific status. It joins the 'customers' table with the 'orders' table based on the customer ID, filtering the results to include only those orders that are currently 'on road'.",
            "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?"
        },
        {
            "sample_id": 6932,
            "gold_sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_name FROM orders JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers.customer_id HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of customers from the 'customers' table who have placed a limited number of orders. The query joins the 'orders' table with the 'customers' table based on the customer ID, groups the results by customer ID, and filters the groups to include only those customers who have placed a number of orders less than or equal to a specified limit.",
            "question": "Find the name of the customers who have at most two orders."
        },
        {
            "sample_id": 6934,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
            "gold_complexity": 13,
            "vt": "SELECT customers.customer_name FROM customers, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE products.product_name = None.\"food\" GROUP BY customers.customer_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers who have ordered a specific product, in this case, food. It aggregates the results to show only those customers who have placed a certain number of orders for that product.",
            "question": "List the names of the customers who have once bought product \"food\"."
        },
        {
            "sample_id": 6913,
            "gold_sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
            "gold_complexity": 10,
            "vt": "SELECT products.product_name, COUNT(*) FROM orders, order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY products.product_id",
            "ba": "The virtual table provides a summary of the product names along with the count of how many times each product has been ordered. It combines data from the 'orders', 'order_items', and 'products' tables, linking them through their respective identifiers. The result is grouped by product ID to aggregate the order counts for each product.",
            "question": "For each product, show its name and the number of times it was ordered."
        },
        {
            "sample_id": 6937,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
            "gold_complexity": 14,
            "vt": "SELECT customers.customer_name FROM customers, orders AS T2, order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE order_items.order_item_status = None.\"cancel\" AND products.product_name = None.\"food\" GROUP BY customers.customer_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers who have placed orders for food products, specifically filtering out any canceled order items. It aggregates the results to show only those customers who have ordered a minimum number of food items, as indicated by the numeric placeholder.",
            "question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?"
        },
        {
            "sample_id": 6880,
            "gold_sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT orders.order_id, orders.customer_id FROM orders ORDER BY orders.date_order_placed LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the order IDs and customer IDs from the 'orders' table, sorted by the date the orders were placed. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "what are the order id and customer id of the oldest order?"
        },
        {
            "sample_id": 6928,
            "gold_sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT invoices.invoice_details FROM invoices WHERE invoices.invoice_date < None.\"1989-09-03\" OR invoices.invoice_date > None.\"2007-12-25\"",
            "ba": "The virtual table retrieves distinct invoice details from the 'invoices' table for invoices issued before a specific date or after another specific date. The placeholders in the WHERE clause represent the cutoff dates for filtering the invoices.",
            "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25."
        },
        {
            "sample_id": 6892,
            "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_id FROM customers JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique customer identifiers from the 'customers' table, joining it with the 'orders' table to associate customers with their orders. The results are grouped by customer ID and ordered by the count of orders each customer has placed, limiting the output to a specified number of customers.",
            "question": "What is the customer id of the customer who has the most orders?"
        }
    ],
    "restaurant_1": [
        {
            "sample_id": 2823,
            "gold_sql": "SELECT count(*) FROM Student WHERE Advisor =  1121;",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM student WHERE student.advisor = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of students from the 'student' table who have a specific academic advisor. The placeholder in the WHERE clause represents the advisor's identifier.",
            "question": "Advisor 1121 has how many students?"
        },
        {
            "sample_id": 2813,
            "gold_sql": "SELECT ResName FROM Restaurant;",
            "gold_complexity": 4,
            "vt": "SELECT restaurant.resname FROM restaurant",
            "ba": "The virtual table lists the names of restaurants from the 'restaurant' table.",
            "question": "Show me all the restaurants."
        },
        {
            "sample_id": 2830,
            "gold_sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";",
            "gold_complexity": 8,
            "vt": "SELECT SUM(visits_restaurant.spent) FROM student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE student.fname = None.\"linda\" AND student.lname = None.\"smith\"",
            "ba": "The virtual table calculates the total amount of money spent by a specific student on restaurant visits. It joins the 'student' table with the 'visits_restaurant' table based on the student's unique identifier. The query filters the results to include only the records for a student with the first name 'linda' and last name 'smith'.",
            "question": "How long does student Linda Smith spend on the restaurant in total?"
        },
        {
            "sample_id": 2824,
            "gold_sql": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;",
            "gold_complexity": 11,
            "vt": "SELECT student.advisor, COUNT(*) FROM student GROUP BY student.advisor ORDER BY COUNT(student.advisor) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of students assigned to each academic advisor from the 'student' table. It groups the results by the advisor's name and orders them based on the count of students, allowing for a limit on the number of advisors displayed.",
            "question": "Which Advisor has most of students? List advisor and the number of students."
        },
        {
            "sample_id": 2821,
            "gold_sql": "SELECT Fname , Lname FROM Student WHERE Major  =  600;",
            "gold_complexity": 8,
            "vt": "SELECT student.fname, student.lname FROM student WHERE student.major = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major of the students.",
            "question": "List all students' first names and last names who majored in 600."
        },
        {
            "sample_id": 2833,
            "gold_sql": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT restaurant.resname, SUM(visits_restaurant.spent) FROM visits_restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY restaurant.resid ORDER BY SUM(visits_restaurant.spent) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total amount spent by students at each restaurant, displaying the restaurant name and the total spending. It aggregates the spending data from the 'visits_restaurant' table and joins it with the 'restaurant' table to get the restaurant names. The results are grouped by restaurant identifier and ordered by the total spending, with a limit on the number of results returned.",
            "question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total."
        },
        {
            "sample_id": 2831,
            "gold_sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE student.fname = None.\"linda\" AND student.lname = None.\"smith\" AND restaurant.resname = None.\"subway\"",
            "ba": "The virtual table counts the number of visits made by a specific student to a particular restaurant. It joins the 'student', 'visits_restaurant', and 'restaurant' tables to gather the necessary information. The placeholders in the WHERE clause represent the student's first name, last name, and the restaurant's name.",
            "question": "How many times has the student Linda Smith visited Subway?"
        },
        {
            "sample_id": 2819,
            "gold_sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
            "gold_complexity": 7,
            "vt": "SELECT student.age FROM student WHERE student.fname = None.\"linda\" AND student.lname = None.\"smith\"",
            "ba": "The virtual table retrieves the age of a specific student from the 'student' table based on their first and last names. The placeholders represent the first and last names of the student being queried.",
            "question": "What is the age of student Linda Smith?"
        },
        {
            "sample_id": 2834,
            "gold_sql": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT student.fname, student.lname FROM student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY student.stuid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students who have visited restaurants, grouped by each student. The query counts the number of visits for each student and orders the results, limiting the output to a specified number of students.",
            "question": "Which student visited restaurant most often? List student's first name and last name."
        },
        {
            "sample_id": 2825,
            "gold_sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
            "gold_complexity": 11,
            "vt": "SELECT student.major, COUNT(*) FROM student GROUP BY student.major ORDER BY COUNT(student.major) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of students in each major from the 'student' table. It groups the results by the 'major' column and counts the number of students in each group. The results are ordered by the count of students in descending order, and a placeholder is used to limit the number of results returned.",
            "question": "Which major has least number of students? List the major and the number of students."
        },
        {
            "sample_id": 2822,
            "gold_sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
            "gold_complexity": 7,
            "vt": "SELECT student.city_code FROM student WHERE student.fname = None.\"linda\" AND student.lname = None.\"smith\"",
            "ba": "The virtual table retrieves the city code of a student from the 'student' table based on their first and last name. The placeholders in the WHERE clause represent the specific first and last names of the student being queried.",
            "question": "Which city does student Linda Smith live in?"
        },
        {
            "sample_id": 2820,
            "gold_sql": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
            "gold_complexity": 7,
            "vt": "SELECT student.sex FROM student WHERE student.fname = None.\"linda\" AND student.lname = None.\"smith\"",
            "ba": "The virtual table retrieves the gender of a specific student from the 'student' table based on their first and last names. The placeholders represent the first and last names of the student being queried.",
            "question": "What is the gender of the student Linda Smith?"
        },
        {
            "sample_id": 2818,
            "gold_sql": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT restaurant.resname, restaurant.rating FROM restaurant ORDER BY restaurant.rating LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and ratings of restaurants from the 'restaurant' table, ordered by their rating in descending order, with a limit on the number of results returned.",
            "question": "Which restaurants have highest rating? List the restaurant name and its rating."
        }
    ],
    "assets_maintenance": [
        {
            "sample_id": 3141,
            "gold_sql": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT skills.skill_id, skills.skill_description FROM skills JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY skills.skill_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of skills along with their descriptions that are required to fix various faults. It aggregates the skills from the 'skills' table and joins it with the 'skills_required_to_fix' table to identify which skills are associated with fixing faults. The results are grouped by skill ID and ordered by the count of occurrences, allowing the user to limit the number of skills returned based on a specified numeric value.",
            "question": "Which skill is used in fixing the most number of faults? List the skill id and description."
        },
        {
            "sample_id": 3149,
            "gold_sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
            "gold_complexity": 10,
            "vt": "SELECT assets.asset_model FROM assets WHERE NOT assets.asset_id IN (SELECT assets.asset_id FROM Fault_Log)",
            "ba": "The virtual table lists the models of assets from the 'assets' table that do not have any associated fault logs. This is determined by checking for asset IDs that are not present in the 'Fault_Log' table, indicating that these assets have not recorded any faults.",
            "question": "Which assets did not incur any fault log? List the asset model."
        },
        {
            "sample_id": 3126,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
            "gold_complexity": 12,
            "vt": "SELECT maintenance_engineers.first_name, maintenance_engineers.last_name, maintenance_engineers.other_details, skills.skill_description FROM maintenance_engineers JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
            "ba": "The virtual table describes the first names, last names, and additional details of maintenance engineers along with the descriptions of the skills they possess. The data is retrieved by joining the 'maintenance_engineers' table with the 'engineer_skills' table to link engineers to their skills, and then further joining with the 'skills' table to get detailed descriptions of those skills.",
            "question": "List all every engineer's first name, last name, details and coresponding skill description."
        },
        {
            "sample_id": 3128,
            "gold_sql": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
            "gold_complexity": 9,
            "vt": "SELECT parts.part_name, COUNT(*) FROM parts JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY parts.part_name",
            "ba": "The virtual table provides a summary of the parts used in assets by listing each part's name along with the count of how many times each part is associated with assets. This is achieved by joining the 'parts' table with the 'asset_parts' table, which links parts to their respective assets, and then grouping the results by the part name to aggregate the counts.",
            "question": "How many assets can each parts be used in? List the part name and the number."
        },
        {
            "sample_id": 3132,
            "gold_sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT fault_log_parts.fault_status FROM fault_log_parts",
            "ba": "The virtual table provides a distinct list of fault statuses associated with parts from the 'fault_log_parts' table. This table links fault log entries to specific part faults, allowing users to see the various statuses recorded for each part fault.",
            "question": "How many fault status codes are recorded in the fault log parts table?"
        },
        {
            "sample_id": 3140,
            "gold_sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT fault_log.fault_log_entry_id, fault_log.fault_description, fault_log.fault_log_entry_datetime FROM fault_log JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_log.fault_log_entry_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of fault log entries, including their unique identifiers, descriptions, and the date and time they were logged. It aggregates the fault log entries by their identifiers and counts the associated parts for each entry, allowing users to see the most common faults based on the number of parts linked to them. The placeholder in the LIMIT clause represents the maximum number of entries to return.",
            "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time."
        },
        {
            "sample_id": 3130,
            "gold_sql": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), fault_log.fault_log_entry_id FROM fault_log JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_log.fault_log_entry_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of engineer visits associated with each fault log entry from the 'fault_log' table. It joins the 'fault_log' table with the 'engineer_visits' table to aggregate the number of visits per fault log entry, grouping the results by the fault log entry ID. The results are ordered by the count of visits, and a limit is applied to restrict the number of entries returned.",
            "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id."
        },
        {
            "sample_id": 3122,
            "gold_sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",
            "gold_complexity": 13,
            "vt": "SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2 UNION SELECT T3.company_id, T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING COUNT(*) >= 2",
            "ba": "The virtual table lists the unique identifiers and names of third-party companies that are associated with maintenance engineers and maintenance contracts. It retrieves companies that have at least two maintenance engineers or two maintenance contracts, ensuring that only companies with significant involvement in maintenance activities are included.",
            "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name."
        },
        {
            "sample_id": 3131,
            "gold_sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT maintenance_engineers.last_name FROM maintenance_engineers",
            "ba": "The virtual table lists the unique last names of maintenance engineers from the 'maintenance_engineers' table.",
            "question": "What are all the distinct last names of all the engineers?"
        },
        {
            "sample_id": 3147,
            "gold_sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT staff.gender FROM staff GROUP BY staff.gender ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the gender distribution among staff members from the 'staff' table. It groups the results by gender and orders them based on the count of staff in each gender category, limiting the output to a specified number of results.",
            "question": "Which gender makes up the majority of the staff?"
        },
        {
            "sample_id": 3135,
            "gold_sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT assets.asset_acquired_date FROM assets ORDER BY assets.asset_acquired_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of asset acquisition dates from the 'assets' table, ordered chronologically. The placeholder in the LIMIT clause allows the user to specify the number of records to retrieve.",
            "question": "When was the first asset acquired?"
        },
        {
            "sample_id": 3123,
            "gold_sql": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",
            "gold_complexity": 9,
            "vt": "SELECT T1.staff_name, T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name, T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id",
            "ba": "The virtual table provides a list of staff members who have recorded faults but have not been contacted for engineer visits. It combines data from the 'Staff' and 'Fault_Log' tables to identify staff who logged faults, and then excludes those who were involved in engineer visits by using an EXCEPT clause.",
            "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?"
        },
        {
            "sample_id": 3145,
            "gold_sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT third_party_companies.company_name FROM third_party_companies JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY maintenance_contracts.contract_start_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of third-party companies that are associated with maintenance contracts, ordered by the start date of those contracts. The placeholder in the LIMIT clause allows the user to specify how many company names to retrieve.",
            "question": "Which company started the earliest the maintenance contract? Show the company name."
        },
        {
            "sample_id": 3124,
            "gold_sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT maintenance_engineers.engineer_id, maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers, Engineer_Visits AS T2 GROUP BY maintenance_engineers.engineer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of maintenance engineers along with their unique identifiers and names. It aggregates the data based on the number of visits each engineer has made, ensuring that only distinct engineers are displayed. The results are ordered by the count of visits, allowing for easy identification of the most active engineers. The placeholder in the LIMIT clause allows users to specify the maximum number of engineers to retrieve.",
            "question": "Which engineer has visited the most times? Show the engineer id, first name and last name."
        },
        {
            "sample_id": 3125,
            "gold_sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
            "gold_complexity": 11,
            "vt": "SELECT parts.part_name, parts.part_id FROM parts JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY parts.part_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and identifiers of parts from the 'parts' table that are associated with multiple faults. The query uses a JOIN to connect the 'parts' table with the 'part_faults' table, grouping the results by part identifier and filtering to include only those parts that are linked to more than a specified number of faults.",
            "question": "Which parts have more than 2 faults? Show the part name and id."
        },
        {
            "sample_id": 3143,
            "gold_sql": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
            "gold_complexity": 10,
            "vt": "SELECT assets.asset_make, assets.asset_model, assets.asset_details FROM assets ORDER BY assets.asset_disposed_date",
            "ba": "The virtual table describes the make, model, and details of assets from the 'assets' table, ordered by the date when the assets were disposed of. This allows users to view the relevant information about assets in a structured manner, focusing on those that have been disposed of.",
            "question": "List the all the assets make, model, details by the disposed date ascendingly."
        },
        {
            "sample_id": 3129,
            "gold_sql": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
            "gold_complexity": 7,
            "vt": "SELECT fault_log.fault_description, fault_log_parts.fault_status FROM fault_log JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
            "ba": "The virtual table describes the fault descriptions and their current statuses from the 'fault_log' and 'fault_log_parts' tables. It joins these two tables based on the fault log entry identifier, allowing users to see detailed information about faults and their associated statuses.",
            "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?"
        },
        {
            "sample_id": 3136,
            "gold_sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT parts.part_id, parts.part_name FROM parts JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY parts.part_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique parts along with their identifiers from the 'parts' table. It joins the 'parts' table with the 'part_faults' table to associate parts with their respective faults, and further joins with the 'skills_required_to_fix' table to identify the skills needed to address those faults. The results are grouped by part identifiers and ordered by the count of associated faults, allowing for a limit on the number of results returned.",
            "question": "Which part fault requires the most number of skills to fix? List part id and name."
        }
    ],
    "body_builder": [
        {
            "sample_id": 1162,
            "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM body_builder JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY body_builder.total",
            "ba": "The virtual table describes the names of bodybuilders from the 'body_builder' table, joined with the 'people' table to retrieve the associated person's name. The results are ordered by the total weight lifted across all events, represented by a placeholder for sorting.",
            "question": "What are the names of body builders in descending order of total scores?"
        },
        {
            "sample_id": 1151,
            "gold_sql": "SELECT Total FROM body_builder ORDER BY Total ASC",
            "gold_complexity": 6,
            "vt": "SELECT body_builder.total FROM body_builder ORDER BY body_builder.total",
            "ba": "The virtual table displays the total weight lifted by bodybuilders from the 'body_builder' table, sorted in ascending order. This allows users to see the performance of bodybuilders based on their total lifts.",
            "question": "List the total scores of body builders in ascending order."
        },
        {
            "sample_id": 1165,
            "gold_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT people.birth_place FROM people GROUP BY people.birth_place HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of birthplaces from the 'people' table, grouped by each unique birthplace. It filters the results to include only those birthplaces that have a count of individuals greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of people from each birthplace that should be included in the results.",
            "question": "What are the birth places that are shared by at least two people?"
        },
        {
            "sample_id": 1170,
            "gold_sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM people WHERE NOT body_builder.people_id IN (SELECT body_builder.people_id FROM body_builder)",
            "ba": "The virtual table counts the number of people from the 'people' table who are not associated with any bodybuilder in the 'body_builder' table. The placeholder in the query represents the condition to filter out those who have participated in body building events.",
            "question": "How many persons are not body builders?"
        },
        {
            "sample_id": 1161,
            "gold_sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200",
            "gold_complexity": 7,
            "vt": "SELECT AVG(body_builder.total) FROM body_builder JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE people.height > [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average total weight lifted by bodybuilders from the 'body_builder' table, filtered by the height of the individuals in the 'people' table. The placeholder in the WHERE clause represents the minimum height requirement for the individuals being considered.",
            "question": "What is the average total score of body builders with height bigger than 200?"
        },
        {
            "sample_id": 1167,
            "gold_sql": "SELECT * FROM body_builder",
            "gold_complexity": 4,
            "vt": "SELECT * FROM body_builder",
            "ba": "The virtual table retrieves all information from the 'body_builder' table, which includes unique identifiers, weights lifted in various events, and links to the associated person.",
            "question": "Show all information about each body builder."
        },
        {
            "sample_id": 1159,
            "gold_sql": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT people.birth_date, people.birth_place FROM body_builder JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY body_builder.total LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the birth date and birth place of bodybuilders from the 'body_builder' and 'people' tables. It joins these tables on the 'people_id' to associate each bodybuilder with their personal information. The results are ordered by the total weight lifted across all events, and a limit is applied to restrict the number of records returned.",
            "question": "What are the birth date and birth place of the body builder with the highest total points?"
        },
        {
            "sample_id": 1172,
            "gold_sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";",
            "gold_complexity": 7,
            "vt": "SELECT body_builder.total FROM body_builder JOIN people AS T2 ON T1.people_id = T2.people_id WHERE people.birth_date LIKE None.\"%january%\"",
            "ba": "The virtual table describes the total weight lifted by bodybuilders from the 'body_builder' table, filtered by the birth date of the associated person from the 'people' table. The placeholder in the WHERE clause is used to specify a birth date condition that matches individuals born in January.",
            "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?"
        },
        {
            "sample_id": 1152,
            "gold_sql": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC",
            "gold_complexity": 8,
            "vt": "SELECT body_builder.snatch, body_builder.clean_jerk FROM body_builder ORDER BY body_builder.snatch",
            "ba": "The virtual table describes the snatch and clean jerk weights lifted by bodybuilders from the 'body_builder' table, ordered by the snatch weight. The query retrieves the respective weights for each bodybuilder without filtering by any specific criteria.",
            "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score."
        },
        {
            "sample_id": 1166,
            "gold_sql": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
            "gold_complexity": 8,
            "vt": "SELECT people.height, people.weight FROM people ORDER BY people.height",
            "ba": "The virtual table provides the height and weight of individuals from the 'people' table, sorted by height in ascending order.",
            "question": "List the height and weight of people in descending order of height."
        },
        {
            "sample_id": 1164,
            "gold_sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT people.birth_place FROM people GROUP BY people.birth_place ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique birthplaces from the 'people' table, grouped by the birthplace and ordered by the count of individuals from each place. The placeholder in the LIMIT clause allows for specifying the maximum number of unique birthplaces to return.",
            "question": "What is the most common birth place of people?"
        },
        {
            "sample_id": 1169,
            "gold_sql": "SELECT count(DISTINCT Birth_Place) FROM people",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Birth_Place) FROM people",
            "ba": "The virtual table counts the distinct birthplaces from the 'people' table.",
            "question": "How many distinct birth places are there?"
        },
        {
            "sample_id": 1171,
            "gold_sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;",
            "gold_complexity": 8,
            "vt": "SELECT people.weight FROM body_builder JOIN people AS T2 ON T1.people_id = T2.people_id WHERE body_builder.snatch > [placeholder-type:numeric] OR people.height > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the weights of individuals from the 'people' table who are associated with bodybuilders in the 'body_builder' table. It filters the results based on two conditions: either the weight lifted in the snatch event exceeds a specified numeric value or the height of the individuals exceeds another specified numeric value.",
            "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200."
        },
        {
            "sample_id": 1156,
            "gold_sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
            "gold_complexity": 5,
            "vt": "SELECT people.name FROM body_builder JOIN people AS T2 ON T1.People_ID = T2.People_ID",
            "ba": "The virtual table describes the names of individuals who are bodybuilders by joining the 'body_builder' and 'people' tables. The join is performed on the 'people_id' field, which links the bodybuilder data to the corresponding personal information.",
            "question": "What are the names of body builders?"
        }
    ],
    "cinema": [
        {
            "sample_id": 1939,
            "gold_sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT cinema.name, cinema.location FROM cinema ORDER BY cinema.capacity LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of cinema names and their locations from the 'cinema' table, ordered by their seating capacity. The placeholder in the LIMIT clause allows the user to specify the maximum number of cinemas to retrieve.",
            "question": "What are the name and location of the cinema with the largest capacity?"
        },
        {
            "sample_id": 1930,
            "gold_sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
            "gold_complexity": 7,
            "vt": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800",
            "ba": "The virtual table lists the geographical locations of cinemas that have a seating capacity of 800 or less. It excludes locations of cinemas that can accommodate more than 800 seats.",
            "question": "Show all the locations where no cinema has capacity over 800."
        },
        {
            "sample_id": 1937,
            "gold_sql": "SELECT DISTINCT LOCATION FROM cinema",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT cinema.location FROM cinema",
            "ba": "The virtual table lists the unique geographical locations of cinemas from the 'cinema' table.",
            "question": "Find the distinct locations that has a cinema."
        },
        {
            "sample_id": 1957,
            "gold_sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT cinema.location FROM cinema WHERE cinema.capacity > [placeholder-type:numeric] GROUP BY cinema.location HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the geographical locations of cinemas that have a seating capacity greater than a specified number and have more than a certain number of films scheduled. The placeholders in the query represent the minimum capacity and the minimum count of films respectively.",
            "question": "In which locations are there more than one movie theater with capacity above 300?"
        },
        {
            "sample_id": 1958,
            "gold_sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM film WHERE film.title LIKE None.\"%dummy%\"",
            "ba": "The virtual table counts the number of films from the 'film' table that have titles matching a specific pattern. The placeholder in the LIKE clause represents a substring that can be used to filter the film titles.",
            "question": "How many films have the word 'Dummy' in their titles?"
        },
        {
            "sample_id": 1940,
            "gold_sql": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
            "gold_complexity": 8,
            "vt": "SELECT AVG(cinema.capacity), MIN(cinema.capacity), MAX(cinema.capacity) FROM cinema WHERE cinema.openning_year >= [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average, minimum, and maximum seating capacity of cinemas that were opened in a specific year or later. The placeholder in the WHERE clause represents the year from which to consider the cinemas.",
            "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later."
        },
        {
            "sample_id": 1942,
            "gold_sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT cinema.location FROM cinema WHERE cinema.openning_year >= [placeholder-type:numeric] GROUP BY cinema.location ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the locations of cinemas that opened in or after a specified year. It groups the results by location and orders them based on the number of cinemas in each location, limiting the output to a specified number of locations.",
            "question": "What is the location with the most cinemas opened in year 2010 or later?"
        },
        {
            "sample_id": 1952,
            "gold_sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
            "gold_complexity": 9,
            "vt": "SELECT film.title, MAX(schedule.price) FROM schedule JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY schedule.film_id",
            "ba": "The virtual table provides the titles of films along with the maximum ticket price for each film from the 'schedule' table. It joins the 'schedule' table with the 'film' table to correlate film titles with their respective showing schedules, and groups the results by film identifier to ensure that the maximum price is calculated for each film.",
            "question": "Give me the title and highest price for each film."
        },
        {
            "sample_id": 1932,
            "gold_sql": "SELECT count(*) FROM cinema",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM cinema",
            "ba": "The virtual table counts the total number of cinemas available in the 'cinema' table.",
            "question": "How many cinema do we have?"
        },
        {
            "sample_id": 1936,
            "gold_sql": "SELECT DISTINCT LOCATION FROM cinema",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT cinema.location FROM cinema",
            "ba": "The virtual table lists the unique geographical locations of cinemas from the 'cinema' table.",
            "question": "What are all the locations with a cinema?"
        },
        {
            "sample_id": 1935,
            "gold_sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
            "gold_complexity": 11,
            "vt": "SELECT cinema.name, cinema.location FROM cinema WHERE cinema.capacity > (SELECT AVG(cinema.capacity) FROM cinema)",
            "ba": "The virtual table describes the names and locations of cinemas from the 'cinema' table that have a seating capacity greater than the average capacity of all cinemas. The query uses a subquery to calculate the average capacity, and the placeholder in the WHERE clause represents the condition for filtering cinemas based on their capacity.",
            "question": "Show the cinema name and location for cinemas with capacity above average."
        },
        {
            "sample_id": 1944,
            "gold_sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT cinema.location FROM cinema WHERE cinema.capacity > [placeholder-type:numeric] GROUP BY cinema.location HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the locations of cinemas from the 'cinema' table that have a seating capacity greater than a specified number. It groups the results by location and ensures that only those locations with a count of cinemas meeting the capacity criteria are included in the final output.",
            "question": "Which locations have 2 or more cinemas with capacity over 300?"
        },
        {
            "sample_id": 1943,
            "gold_sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT cinema.location FROM cinema WHERE cinema.capacity > [placeholder-type:numeric] GROUP BY cinema.location HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the locations of cinemas that have a seating capacity greater than a specified number and have shown at least a certain number of films. The placeholders represent the minimum capacity and the minimum count of films shown.",
            "question": "Show all the locations with at least two cinemas with capacity above 300."
        },
        {
            "sample_id": 1959,
            "gold_sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM film WHERE film.title LIKE None.\"%dummy%\"",
            "ba": "The virtual table counts the number of films from the 'film' table that have titles matching a specific pattern. The placeholder in the LIKE clause allows for dynamic input of the title pattern to search for films that contain certain keywords.",
            "question": "Count the number of films whose title contains the word 'Dummy'."
        },
        {
            "sample_id": 1951,
            "gold_sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
            "gold_complexity": 9,
            "vt": "SELECT film.title, MAX(schedule.price) FROM schedule JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY schedule.film_id",
            "ba": "The virtual table describes the titles of films along with the maximum ticket price for each film from the 'schedule' table. It joins the 'schedule' table with the 'film' table to retrieve the film titles and groups the results by film identifier to find the highest ticket price for each film.",
            "question": "What are the title and maximum price of each film?"
        },
        {
            "sample_id": 1945,
            "gold_sql": "SELECT title ,  directed_by FROM film",
            "gold_complexity": 6,
            "vt": "SELECT film.title, film.directed_by FROM film",
            "ba": "The virtual table describes the titles and directors of films from the 'film' table.",
            "question": "Show the title and director for all films."
        },
        {
            "sample_id": 1931,
            "gold_sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
            "gold_complexity": 7,
            "vt": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
            "ba": "The virtual table identifies the geographical locations of cinemas that opened in both 2010 and 2011. It uses an INTERSECT operation to find common locations between the two years.",
            "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011."
        },
        {
            "sample_id": 1954,
            "gold_sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
            "gold_complexity": 12,
            "vt": "SELECT film.title, film.directed_by FROM film WHERE NOT film.film_id IN (SELECT film.film_id FROM schedule)",
            "ba": "The virtual table describes the titles and directors of films from the 'film' table that are not currently scheduled for showing in any cinema. The subquery filters out films that have entries in the 'schedule' table, ensuring only those films that are not being shown are selected.",
            "question": "What are the title and director of the films without any schedule?"
        }
    ],
    "flight_company": [
        {
            "sample_id": 6374,
            "gold_sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
            "gold_complexity": 10,
            "vt": "SELECT airport.id, COUNT(*) FROM operate_company JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY airport.id",
            "ba": "The virtual table summarizes the number of flights operated by each airport, linking the 'operate_company' and 'flight' tables through the operating company ID and the airport ID. It counts the total flights associated with each airport, providing insights into airport activity.",
            "question": "How many companies operates airlines in each airport?"
        },
        {
            "sample_id": 6369,
            "gold_sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT flight.pilot FROM airport JOIN flight AS T2 ON T1.id = T2.airport_id WHERE airport.country = '[placeholder-type:string]' OR airport.name = '[placeholder-type:string]'",
            "ba": "The virtual table lists distinct pilots who operate flights departing from or arriving at airports located in a specific country or with a specific name. The placeholders in the WHERE clause represent the country and airport name criteria.",
            "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?"
        },
        {
            "sample_id": 6372,
            "gold_sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
            "gold_complexity": 8,
            "vt": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services'",
            "ba": "The virtual table identifies pilots who operate flights for companies engaged in both cargo and catering services. It does this by joining the 'operate_company' and 'flight' tables based on the company ID, filtering for companies with specific principal activities, and using an INTERSECT to find common pilots.",
            "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities."
        },
        {
            "sample_id": 6371,
            "gold_sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM airport WHERE NOT airport.id IN (SELECT flight.airport_id FROM flight WHERE pilot = 'Thompson')",
            "ba": "The virtual table counts the number of airports from the 'airport' table that do not have any flights operated by a specific pilot. The subquery retrieves the airport IDs associated with flights operated by the pilot named 'Thompson', and the main query counts all airports whose IDs are not in that list.",
            "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?"
        },
        {
            "sample_id": 6363,
            "gold_sql": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'",
            "gold_complexity": 6,
            "vt": "SELECT AVG(flight.velocity) FROM flight WHERE flight.pilot = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average speed of flights operated by a specific pilot from the 'flight' table. The placeholder in the WHERE clause represents the name of the pilot whose flights are being analyzed.",
            "question": "What is the velocity of the pilot named 'Thompson'?"
        },
        {
            "sample_id": 6365,
            "gold_sql": "SELECT name FROM airport WHERE country != 'Iceland'",
            "gold_complexity": 6,
            "vt": "SELECT airport.name FROM airport WHERE airport.country <> '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of airports from the 'airport' table that are located in countries other than a specified country. The placeholder in the WHERE clause represents the country to be excluded.",
            "question": "What are the names of the airports which are not in the country 'Iceland'?"
        },
        {
            "sample_id": 6364,
            "gold_sql": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
            "gold_complexity": 7,
            "vt": "SELECT operate_company.name, operate_company.type FROM operate_company JOIN flight AS t2 ON T1.id = T2.company_id",
            "ba": "The virtual table describes the names and types of operating companies that are associated with flights. It retrieves data from the 'operate_company' table and joins it with the 'flight' table based on the company identifier, allowing users to see which companies operate specific flights.",
            "question": "What are the names and types of the companies that have ever operated a flight?"
        },
        {
            "sample_id": 6368,
            "gold_sql": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT airport.id, airport.name, airport.iata FROM airport JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY flight.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of airports along with their unique identifiers, official names, and IATA codes. It retrieves data from the 'airport' table and joins it with the 'flight' table to associate flights with their respective airports. The results are grouped by flight identifiers to aggregate the data, and the output is ordered based on the count of flights associated with each airport, limiting the results to a specified number.",
            "question": "What is the id, name and IATA code of the airport that had most number of flights?"
        },
        {
            "sample_id": 6361,
            "gold_sql": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
            "gold_complexity": 12,
            "vt": "SELECT airport.id, airport.country, airport.city, airport.name FROM airport ORDER BY airport.name",
            "ba": "The virtual table lists the unique identifiers, countries, cities, and official names of all airports from the 'airport' table, sorted by the airport's name.",
            "question": "List the id, country, city and name of the airports ordered alphabetically by the name."
        },
        {
            "sample_id": 6360,
            "gold_sql": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC",
            "gold_complexity": 10,
            "vt": "SELECT flight.vehicle_flight_number, flight.date, flight.pilot FROM flight ORDER BY flight.altitude",
            "ba": "The virtual table describes the flight details including the flight number, scheduled date, and pilot's name from the 'flight' table, ordered by the altitude of the flight.",
            "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude."
        },
        {
            "sample_id": 6375,
            "gold_sql": "SELECT count(*) ,  country FROM airport GROUP BY country",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), airport.country FROM airport GROUP BY airport.country",
            "ba": "The virtual table provides a count of airports grouped by their respective countries from the 'airport' table. The placeholder in the SELECT clause represents the total number of airports in each country.",
            "question": "how many airports are there in each country?"
        }
    ],
    "solvency_ii": [
        {
            "sample_id": 4589,
            "gold_sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
            "gold_complexity": 11,
            "vt": "SELECT products.product_name FROM products JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY products.product_name HAVING COUNT(*) >= [placeholder-type:numeric] ORDER BY products.product_name",
            "ba": "The virtual table lists the names of products from the 'products' table that are associated with events in the 'products_in_events' table. It groups the results by product name and filters to include only those products that are linked to a specified minimum number of events, represented by a numeric placeholder. The results are ordered alphabetically by product name.",
            "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name."
        },
        {
            "sample_id": 4580,
            "gold_sql": "SELECT avg(Product_Price) FROM Products",
            "gold_complexity": 4,
            "vt": "SELECT AVG(products.product_price) FROM products",
            "ba": "The virtual table calculates the average price of products from the 'products' table. The placeholder in the SELECT clause represents the product price, which is aggregated to find the average value.",
            "question": "What is the average price for products?"
        },
        {
            "sample_id": 4585,
            "gold_sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000",
            "gold_complexity": 9,
            "vt": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
            "ba": "The virtual table identifies product types from the 'Products' table that have prices both greater than 4500 and less than 3000. The use of INTERSECT indicates that we are looking for product types that meet both conditions simultaneously, which is logically impossible, thus resulting in an empty set.",
            "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000."
        },
        {
            "sample_id": 4584,
            "gold_sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT products.product_type_code FROM products GROUP BY products.product_type_code HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the distinct product types from the 'products' table that have a count greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of products required for each type.",
            "question": "Show the product type codes that have at least two products."
        },
        {
            "sample_id": 4577,
            "gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
            "gold_complexity": 6,
            "vt": "SELECT products.product_name FROM products ORDER BY products.product_price",
            "ba": "The virtual table lists the names of products from the 'products' table, ordered by their price in ascending order. This allows users to see the product names sorted by how much they cost, providing a clear view of the pricing structure.",
            "question": "List the name of products in ascending order of price."
        },
        {
            "sample_id": 4587,
            "gold_sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
            "gold_complexity": 11,
            "vt": "SELECT products.product_name, COUNT(*) FROM products JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY products.product_name ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the count of each product's occurrences in events from the 'products' table. It joins the 'products' table with the 'products_in_events' table to associate products with their respective events. The results are grouped by product name and ordered by the count of occurrences, allowing users to see which products are most frequently involved in events.",
            "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order."
        },
        {
            "sample_id": 4578,
            "gold_sql": "SELECT Product_Name ,  Product_Type_Code FROM Products",
            "gold_complexity": 6,
            "vt": "SELECT products.product_name, products.product_type_code FROM products",
            "ba": "The virtual table describes the names and types of products from the 'products' table. The query selects the 'product_name' and 'product_type_code' columns, which provide information about each product's name and its corresponding type code.",
            "question": "What are the names and type codes of products?"
        },
        {
            "sample_id": 4590,
            "gold_sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
            "gold_complexity": 10,
            "vt": "SELECT products.product_name FROM products WHERE NOT products.product_id IN (SELECT products.product_id FROM Products_in_Events)",
            "ba": "The virtual table lists the names of products from the 'products' table that are not associated with any events in the 'products_in_events' table. The query uses a subquery to filter out product IDs that are linked to events, ensuring only those products that are not involved in any events are selected.",
            "question": "List the names of products that are not in any event."
        },
        {
            "sample_id": 4576,
            "gold_sql": "SELECT count(*) FROM Products",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM products",
            "ba": "The virtual table counts the total number of products available in the 'products' table.",
            "question": "How many products are there?"
        }
    ],
    "journal_committee": [
        {
            "sample_id": 666,
            "gold_sql": "SELECT avg(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID  =  T2.journal_ID WHERE T2.work_type  =  'Photo'",
            "gold_complexity": 7,
            "vt": "SELECT AVG(journal.sales) FROM journal JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE journal_committee.work_type = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average sales figures from the 'journal' table for journal entries that are associated with a specific type of work or contribution made by the committee. The placeholder in the WHERE clause represents the type of work being queried.",
            "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?"
        },
        {
            "sample_id": 650,
            "gold_sql": "SELECT Name FROM editor ORDER BY Age ASC",
            "gold_complexity": 6,
            "vt": "SELECT editor.name FROM editor ORDER BY editor.age",
            "ba": "The virtual table lists the names of editors from the 'editor' table, ordered by their age. This allows users to see the names of editors in a sequence based on how old they are, from youngest to oldest.",
            "question": "List the names of editors in ascending order of age."
        },
        {
            "sample_id": 661,
            "gold_sql": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID WHERE T3.Sales  >  3000",
            "gold_complexity": 8,
            "vt": "SELECT editor.name FROM journal_committee JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE journal.sales > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of editors from the 'editor' table who are involved in committees related to journal entries with sales figures exceeding a specified amount. The query joins the 'journal_committee' table with the 'editor' and 'journal' tables to filter based on the sales condition.",
            "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000."
        },
        {
            "sample_id": 656,
            "gold_sql": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT editor.age FROM editor GROUP BY editor.age ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the ages of editors from the 'editor' table, grouping the results by age and ordering them based on the count of editors for each age. The placeholder in the LIMIT clause allows for specifying the maximum number of age groups to return.",
            "question": "Please show the most common age of editors."
        },
        {
            "sample_id": 655,
            "gold_sql": "SELECT Age ,  COUNT(*) FROM editor GROUP BY Age",
            "gold_complexity": 8,
            "vt": "SELECT editor.age, COUNT(*) FROM editor GROUP BY editor.age",
            "ba": "The virtual table provides the ages of editors from the 'editor' table along with a count of how many editors fall into each age group. The query groups the results by the age of the editors, allowing for an analysis of the distribution of editor ages.",
            "question": "What are the different ages of editors? Show each age along with the number of editors of that age."
        },
        {
            "sample_id": 657,
            "gold_sql": "SELECT DISTINCT Theme FROM journal",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT journal.theme FROM journal",
            "ba": "The virtual table retrieves distinct themes from the 'journal' table, which represents the main topics of various journal entries.",
            "question": "Show the distinct themes of journals."
        },
        {
            "sample_id": 652,
            "gold_sql": "SELECT Name FROM editor WHERE Age  >  25",
            "gold_complexity": 6,
            "vt": "SELECT editor.name FROM editor WHERE editor.age > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of editors from the 'editor' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.",
            "question": "List the names of editors who are older than 25."
        },
        {
            "sample_id": 651,
            "gold_sql": "SELECT Name ,  Age FROM editor",
            "gold_complexity": 6,
            "vt": "SELECT editor.name, editor.age FROM editor",
            "ba": "The virtual table describes the names and ages of editors from the 'editor' table. There are no filtering conditions applied, so it retrieves all editors' information.",
            "question": "What are the names and ages of editors?"
        },
        {
            "sample_id": 659,
            "gold_sql": "SELECT T2.Name ,  T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID  =  T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID  =  T3.Journal_ID",
            "gold_complexity": 8,
            "vt": "SELECT editor.name, journal.theme FROM journal_committee JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
            "ba": "The virtual table describes the names of editors and the themes of journal entries associated with the journal committee. It combines data from the 'editor', 'journal', and 'journal_committee' tables, linking them through their respective identifiers.",
            "question": "For each journal_committee, find the editor name and the journal theme."
        },
        {
            "sample_id": 662,
            "gold_sql": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
            "gold_complexity": 11,
            "vt": "SELECT editor.editor_id, editor.name, COUNT(*) FROM editor JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY editor.editor_id",
            "ba": "The virtual table provides a summary of editors and their contributions to journal committees. It retrieves the unique identifier and name of each editor, along with a count of their contributions, by joining the 'editor' table with the 'journal_committee' table based on the editor's ID. The results are grouped by the editor's ID to aggregate the contributions.",
            "question": "Show the id, name of each editor and the number of journal committees they are on."
        }
    ],
    "book_2": [
        {
            "sample_id": 225,
            "gold_sql": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT publication.publisher FROM publication GROUP BY publication.publisher HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of publishers from the 'publication' table that have published more than a specified number of publications. The placeholder in the HAVING clause represents the minimum count of publications required to be included in the results.",
            "question": "Show publishers that have more than one publication."
        },
        {
            "sample_id": 230,
            "gold_sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000",
            "gold_complexity": 9,
            "vt": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000",
            "ba": "The virtual table retrieves the names of publishers from the 'publication' table that have publications priced above a certain threshold and also below another threshold. The use of INTERSECT ensures that only publishers meeting both price conditions are included in the results.",
            "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000."
        },
        {
            "sample_id": 226,
            "gold_sql": "SELECT Publisher ,  COUNT(*) FROM publication GROUP BY Publisher",
            "gold_complexity": 8,
            "vt": "SELECT publication.publisher, COUNT(*) FROM publication GROUP BY publication.publisher",
            "ba": "The virtual table summarizes the number of publications by each publisher from the 'publication' table. It retrieves the publisher's name and counts the total number of publications associated with each publisher, grouping the results by the publisher's name.",
            "question": "Show different publishers together with the number of publications they have."
        },
        {
            "sample_id": 233,
            "gold_sql": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"",
            "gold_complexity": 7,
            "vt": "SELECT publication.price FROM publication WHERE publication.publisher = None.\"person\" OR publication.publisher = None.\"wiley\"",
            "ba": "The virtual table describes the retail prices of publications from the 'publication' table that are published by either 'person' or 'wiley'. The placeholders in the WHERE clause represent the names of the publishers.",
            "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\""
        },
        {
            "sample_id": 221,
            "gold_sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT publication.publication_date FROM publication ORDER BY publication.price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the publication dates of books from the 'publication' table, ordered by their retail price. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "List the publication dates of publications with 3 lowest prices."
        },
        {
            "sample_id": 213,
            "gold_sql": "SELECT count(*) FROM book",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM book",
            "ba": "The virtual table counts the total number of books in the 'book' table.",
            "question": "How many books are there?"
        },
        {
            "sample_id": 219,
            "gold_sql": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT publication.publisher FROM publication WHERE publication.price > [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct names of publishers from the 'publication' table for publications that have a retail price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum price threshold.",
            "question": "What are the distinct publishers of publications with price higher than 5000000?"
        },
        {
            "sample_id": 215,
            "gold_sql": "SELECT Title FROM book ORDER BY Issues ASC",
            "gold_complexity": 6,
            "vt": "SELECT book.title FROM book ORDER BY book.issues",
            "ba": "The virtual table lists the titles of books from the 'book' table, ordered by the number of issues or editions each book has.",
            "question": "List the titles of the books in ascending order of issues."
        },
        {
            "sample_id": 222,
            "gold_sql": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
            "gold_complexity": 7,
            "vt": "SELECT book.title, publication.publication_date FROM book JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID",
            "ba": "The virtual table describes the titles of books along with their publication dates from the 'book' and 'publication' tables. The join operation links the two tables based on the book_id, allowing us to retrieve relevant information about each book's publication.",
            "question": "Show the title and publication dates of books."
        },
        {
            "sample_id": 228,
            "gold_sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT book.writer FROM book GROUP BY book.writer HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the identifiers of writers from the 'book' table who have authored more than a specified number of books. The placeholder in the HAVING clause represents the minimum count of books that a writer must have authored to be included in the results.",
            "question": "List the writers who have written more than one book."
        },
        {
            "sample_id": 214,
            "gold_sql": "SELECT Writer FROM book ORDER BY Writer ASC",
            "gold_complexity": 6,
            "vt": "SELECT book.writer FROM book ORDER BY book.writer",
            "ba": "The virtual table retrieves the writer identifiers from the 'book' table, ordering the results by the writer's identifier.",
            "question": "List the writers of the books in ascending alphabetical order."
        },
        {
            "sample_id": 231,
            "gold_sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Publication_Date) FROM publication",
            "ba": "The virtual table counts the distinct publication dates from the 'publication' table, which indicates how many unique dates books were published.",
            "question": "What is the number of distinct publication dates?"
        }
    ],
    "customers_campaigns_ecommerce": [
        {
            "sample_id": 4625,
            "gold_sql": "SELECT DISTINCT address_type_code FROM customer_addresses",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT customer_addresses.address_type_code FROM customer_addresses",
            "ba": "The virtual table retrieves distinct address type codes from the 'customer_addresses' table, which links customers to their respective premises and indicates the type of address (e.g., billing, shipping).",
            "question": "What are the distinct address type codes for all customer addresses?"
        },
        {
            "sample_id": 4615,
            "gold_sql": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",
            "gold_complexity": 8,
            "vt": "SELECT premises.premises_type, premises.premise_details FROM premises ORDER BY premises.premises_type",
            "ba": "The virtual table describes the types and details of premises from the 'premises' table, sorted by the type of premise. This allows users to view a categorized list of premises along with their descriptions.",
            "question": "Find the types and details for all premises and order by the premise type."
        },
        {
            "sample_id": 4614,
            "gold_sql": "SELECT DISTINCT premises_type FROM premises",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT premises.premises_type FROM premises",
            "ba": "The virtual table lists the unique types of premises from the 'premises' table.",
            "question": "What are all the distinct premise types?"
        },
        {
            "sample_id": 4623,
            "gold_sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
            "gold_complexity": 10,
            "vt": "SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'",
            "ba": "The virtual table describes the names and payment methods of customers who have both placed an order and not responded to a mailshot campaign. It combines results from two queries using an INTERSECT operation to find customers who meet both criteria.",
            "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome."
        },
        {
            "sample_id": 4626,
            "gold_sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
            "gold_complexity": 8,
            "vt": "SELECT customer_orders.order_shipping_charges, customer_orders.customer_id FROM customer_orders WHERE customer_orders.order_status_code = '[placeholder-type:string]' OR customer_orders.order_status_code = '[placeholder-type:string]'",
            "ba": "The virtual table displays the shipping charges and customer identifiers from the 'customer_orders' table for orders that have a specific status. The placeholders in the WHERE clause represent the order statuses being queried.",
            "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid."
        },
        {
            "sample_id": 4618,
            "gold_sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
            "gold_complexity": 12,
            "vt": "SELECT customers.customer_name, customers.customer_phone FROM customers WHERE NOT customers.customer_id IN (SELECT customers.customer_id FROM mailshot_customers)",
            "ba": "The virtual table provides a list of customer names and their phone numbers from the 'customers' table who have not received any mailshot campaigns. The query filters out customers by checking their IDs against those present in the 'mailshot_customers' table.",
            "question": "Show the name and phone of the customer without any mailshot."
        },
        {
            "sample_id": 4624,
            "gold_sql": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",
            "gold_complexity": 7,
            "vt": "SELECT premises.premises_type, customer_addresses.address_type_code FROM customer_addresses JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
            "ba": "The virtual table describes the types of premises and their associated address types from the 'customer_addresses' and 'premises' tables. The join operation links the two tables based on the premise identifier, allowing for a comprehensive view of the premises type alongside the address type code.",
            "question": "Show the premise type and address type code for all customer addresses."
        },
        {
            "sample_id": 4613,
            "gold_sql": "SELECT count(*) FROM premises",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM premises",
            "ba": "The virtual table provides a count of all unique premises recorded in the 'premises' table. This count helps in understanding the total number of premises available, regardless of their type or details.",
            "question": "How many premises are there?"
        },
        {
            "sample_id": 4620,
            "gold_sql": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code",
            "gold_complexity": 8,
            "vt": "SELECT mailshot_customers.outcome_code, COUNT(*) FROM mailshot_customers GROUP BY mailshot_customers.outcome_code",
            "ba": "The virtual table summarizes the outcomes of mailshot campaigns by counting the number of customers associated with each outcome code. It aggregates the data from the 'mailshot_customers' table, providing insights into the effectiveness of different mailshot campaigns based on customer responses.",
            "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code."
        }
    ],
    "singer": [
        {
            "sample_id": 8012,
            "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
            "gold_complexity": 7,
            "vt": "SELECT song.title, singer.name FROM singer JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "ba": "The virtual table describes the titles of songs along with the names of the singers who performed them. It combines data from the 'singer' and 'song' tables using a join on the singer's unique identifier, allowing for a comprehensive view of which singer performed which song.",
            "question": "What are the song titles and singer names?"
        },
        {
            "sample_id": 8014,
            "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT singer.name FROM singer JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE song.sales > [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct names of singers from the 'singer' table who have songs with sales exceeding a specified amount. The query joins the 'singer' and 'song' tables based on the singer's identifier, filtering the results based on the sales figures of the songs.",
            "question": "what are the different names of the singers that have sales more than 300000?"
        },
        {
            "sample_id": 8013,
            "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT singer.name FROM singer JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE song.sales > [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct names of singers from the 'singer' table who have songs with sales exceeding a specified amount. The query joins the 'singer' and 'song' tables based on the singer's identifier, filtering the results based on the sales figures of the songs.",
            "question": "Show distinct names of singers that have songs with sales more than 300000."
        },
        {
            "sample_id": 8009,
            "gold_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "gold_complexity": 8,
            "vt": "SELECT singer.citizenship, MAX(singer.net_worth_millions) FROM singer GROUP BY singer.citizenship",
            "ba": "The virtual table summarizes the maximum net worth of singers grouped by their country of citizenship. It retrieves the citizenship of each singer and the highest estimated net worth among singers from the same country.",
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship."
        },
        {
            "sample_id": 8011,
            "gold_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
            "gold_complexity": 7,
            "vt": "SELECT song.title, singer.name FROM singer JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "ba": "The virtual table describes the titles of songs along with the names of the singers who performed them. It combines data from the 'singer' and 'song' tables using a join on the singer's unique identifier, allowing for a comprehensive view of which singer performed which song.",
            "question": "Show titles of songs and names of singers."
        },
        {
            "sample_id": 8000,
            "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
            "gold_complexity": 6,
            "vt": "SELECT singer.name FROM singer WHERE singer.citizenship <> None.\"france\"",
            "ba": "The virtual table describes the names of singers from the 'singer' table who are not citizens of France. The placeholder in the WHERE clause represents the citizenship condition.",
            "question": "What are the names of the singers who are not French citizens?"
        },
        {
            "sample_id": 7996,
            "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "gold_complexity": 6,
            "vt": "SELECT singer.name FROM singer ORDER BY singer.net_worth_millions",
            "ba": "The virtual table lists the names of singers from the 'singer' table, ordered by their estimated net worth in millions. This allows users to see which singers have the highest net worth at a glance.",
            "question": "What are the names of singers ordered by ascending net worth?"
        },
        {
            "sample_id": 8020,
            "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "gold_complexity": 10,
            "vt": "SELECT singer.name FROM singer WHERE NOT singer.singer_id IN (SELECT singer.singer_id FROM song)",
            "ba": "The virtual table lists the names of singers from the 'singer' table who have not released any songs. The subquery identifies singers who have songs by checking the 'singer_id' in the 'song' table, and the main query filters out those singers from the results.",
            "question": "What is the sname of every sing that does not have any song?"
        },
        {
            "sample_id": 8021,
            "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
            "gold_complexity": 9,
            "vt": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "ba": "The virtual table identifies the citizenship of singers who were born before 1945 and also after 1955. It uses an INTERSECT operation to find common citizenships between these two groups of singers.",
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955."
        },
        {
            "sample_id": 8017,
            "gold_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
            "gold_complexity": 9,
            "vt": "SELECT singer.name, SUM(song.sales) FROM singer JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY singer.name",
            "ba": "The virtual table summarizes the total sales figures for each singer by joining the 'singer' and 'song' tables. It displays the singer's name alongside the sum of their song sales, grouped by the singer's name.",
            "question": "Show the names of singers and the total sales of their songs."
        },
        {
            "sample_id": 7999,
            "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
            "gold_complexity": 6,
            "vt": "SELECT singer.name FROM singer WHERE singer.citizenship <> None.\"france\"",
            "ba": "The virtual table describes the names of singers from the 'singer' table who are not citizens of France. The placeholder in the WHERE clause represents the citizenship condition.",
            "question": "List the name of singers whose citizenship is not \"France\"."
        },
        {
            "sample_id": 7997,
            "gold_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
            "gold_complexity": 6,
            "vt": "SELECT singer.birth_year, singer.citizenship FROM singer",
            "ba": "The virtual table describes the birth year and citizenship of singers from the 'singer' table.",
            "question": "What are the birth year and citizenship of singers?"
        },
        {
            "sample_id": 8003,
            "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT singer.name FROM singer ORDER BY singer.net_worth_millions LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of singers from the 'singer' table, ordered by their estimated net worth in millions. The placeholder in the LIMIT clause allows for specifying the number of singer names to retrieve.",
            "question": "What is the name of the singer with the largest net worth?"
        },
        {
            "sample_id": 8001,
            "gold_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
            "gold_complexity": 6,
            "vt": "SELECT singer.name FROM singer WHERE singer.birth_year = [placeholder-type:numeric] OR singer.birth_year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of singers from the 'singer' table who were born in either of two specified years. The placeholders in the WHERE clause represent the birth years of interest.",
            "question": "Show the name of singers whose birth year is either 1948 or 1949?"
        },
        {
            "sample_id": 8005,
            "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
            "gold_complexity": 8,
            "vt": "SELECT singer.citizenship, COUNT(*) FROM singer GROUP BY singer.citizenship",
            "ba": "The virtual table summarizes the number of singers from each country of citizenship by grouping the data from the 'singer' table based on the 'citizenship' column. The result will show the citizenship and the count of singers associated with each citizenship.",
            "question": "Show different citizenship of singers and the number of singers of each citizenship."
        },
        {
            "sample_id": 8006,
            "gold_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
            "gold_complexity": 8,
            "vt": "SELECT singer.citizenship, COUNT(*) FROM singer GROUP BY singer.citizenship",
            "ba": "The virtual table summarizes the number of singers from each country of citizenship by grouping the data based on the 'citizenship' column from the 'singer' table.",
            "question": "For each citizenship, how many singers are from that country?"
        },
        {
            "sample_id": 8016,
            "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT singer.name FROM singer JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY singer.name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of singers from the 'singer' table who have more than a specified number of songs associated with them. The query joins the 'singer' and 'song' tables on the singer's ID, groups the results by singer's name, and filters the groups to include only those with a count of songs greater than a placeholder for numeric values.",
            "question": "What are the names of the singers that have more than one songs?"
        },
        {
            "sample_id": 7994,
            "gold_sql": "SELECT count(*) FROM singer",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM singer",
            "ba": "The virtual table counts the total number of singers in the 'singer' table.",
            "question": "What is the count of singers?"
        }
    ],
    "apartment_rentals": [
        {
            "sample_id": 1202,
            "gold_sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
            "gold_complexity": 8,
            "vt": "SELECT apartment_buildings.building_address, apartment_buildings.building_phone FROM apartment_buildings WHERE apartment_buildings.building_manager = None.\"brenden\"",
            "ba": "The virtual table describes the building address and phone number of apartment buildings managed by a specific manager. The placeholder in the WHERE clause represents the name of the building manager.",
            "question": "Show the addresses and phones of all the buildings managed by \"Brenden\"."
        },
        {
            "sample_id": 1234,
            "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
            "gold_complexity": 7,
            "vt": "SELECT apartment_bookings.booking_start_date, apartment_bookings.booking_start_date FROM apartment_bookings JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE guests.gender_code = None.\"female\"",
            "ba": "The virtual table describes the booking start dates of apartments from the 'apartment_bookings' table for guests who are female. The query joins the 'apartment_bookings' table with the 'guests' table to filter the results based on the gender of the guests.",
            "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\"."
        },
        {
            "sample_id": 1239,
            "gold_sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
            "gold_complexity": 7,
            "vt": "SELECT apartment_facilities.facility_code FROM apartment_facilities JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartments.bedroom_count > [placeholder-type:numeric]",
            "ba": "The virtual table describes the facility codes of apartments that have a specific number of bedrooms. It retrieves data from the 'apartment_facilities' table and joins it with the 'apartments' table to filter apartments based on their bedroom count. The placeholder in the WHERE clause represents the minimum number of bedrooms required.",
            "question": "What are the facility codes of the apartments with more than four bedrooms?"
        },
        {
            "sample_id": 1243,
            "gold_sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
            "gold_complexity": 7,
            "vt": "SELECT SUM(apartments.room_count) FROM apartment_buildings JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE apartment_buildings.building_short_name = None.\"columbus square\"",
            "ba": "The virtual table calculates the total number of rooms across all apartments located in a specific apartment building identified by its abbreviated name. It joins the 'apartment_buildings' table with the 'apartments' table to access the relevant data, and uses a placeholder for the building's short name to filter the results accordingly.",
            "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?"
        },
        {
            "sample_id": 1210,
            "gold_sql": "SELECT apt_number ,  room_count FROM Apartments",
            "gold_complexity": 6,
            "vt": "SELECT apartments.apt_number, apartments.room_count FROM apartments",
            "ba": "The virtual table describes the apartment numbers and total room counts of apartments from the 'apartments' table.",
            "question": "Return the apartment number and the number of rooms for each apartment."
        },
        {
            "sample_id": 1205,
            "gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
            "gold_complexity": 6,
            "vt": "SELECT apartment_buildings.building_full_name FROM apartment_buildings WHERE apartment_buildings.building_full_name LIKE None.\"%court%\"",
            "ba": "The virtual table describes the full names of apartment buildings from the 'apartment_buildings' table that contain the word 'court' in their name. The placeholder in the WHERE clause represents a pattern to search for within the building names.",
            "question": "Find all the building full names containing the word \"court\"."
        },
        {
            "sample_id": 1199,
            "gold_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT apartment_buildings.building_description FROM apartment_buildings",
            "ba": "The virtual table provides a distinct list of building descriptions from the 'apartment_buildings' table. This allows users to see unique descriptions of all apartment buildings without duplicates.",
            "question": "Give me a list of all the distinct building descriptions."
        },
        {
            "sample_id": 1265,
            "gold_sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
            "gold_complexity": 9,
            "vt": "SELECT apartments.apt_type_code, MAX(apartments.room_count), MIN(apartments.room_count) FROM apartments GROUP BY apartments.apt_type_code",
            "ba": "The virtual table summarizes the apartment types and their corresponding room counts from the 'apartments' table. It provides the maximum and minimum number of rooms for each type of apartment, identified by the apartment type code.",
            "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type."
        },
        {
            "sample_id": 1229,
            "gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT apartments.apt_number FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartment_bookings.booking_status_code = None.\"confirmed\"",
            "ba": "The virtual table lists the distinct apartment numbers from the 'apartments' table that are linked to confirmed bookings in the 'apartment_bookings' table. The placeholder in the WHERE clause represents the booking status code, specifically filtering for confirmed bookings.",
            "question": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers."
        },
        {
            "sample_id": 1237,
            "gold_sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
            "gold_complexity": 9,
            "vt": "SELECT guests.guest_first_name, guests.guest_last_name FROM apartment_bookings JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE apartment_bookings.booking_status_code = None.\"confirmed\"",
            "ba": "The virtual table describes the first and last names of guests who have made confirmed bookings for apartments. It retrieves this information by joining the 'apartment_bookings' table with the 'guests' table based on the guest's unique identifier. The placeholder in the WHERE clause represents the booking status, specifically filtering for confirmed bookings.",
            "question": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names."
        },
        {
            "sample_id": 1204,
            "gold_sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
            "gold_complexity": 6,
            "vt": "SELECT apartment_buildings.building_full_name FROM apartment_buildings WHERE apartment_buildings.building_full_name LIKE None.\"%court%\"",
            "ba": "The virtual table retrieves the full names of apartment buildings from the 'apartment_buildings' table that contain the word 'court' in their name. The placeholder in the LIKE clause allows for flexible searching of building names that match a specific pattern.",
            "question": "What are the building full names that contain the word \"court\"?"
        },
        {
            "sample_id": 1260,
            "gold_sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT apartments.apt_type_code FROM apartments GROUP BY apartments.apt_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different types of apartments available in the 'apartments' table. It groups the apartments by their type code and orders them based on the count of each type, allowing users to see the most common apartment types up to a specified limit.",
            "question": "Show the most common apartment type code."
        },
        {
            "sample_id": 1248,
            "gold_sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "gold_complexity": 8,
            "vt": "SELECT apartment_bookings.booking_status_code, COUNT(*) FROM apartment_bookings GROUP BY apartment_bookings.booking_status_code",
            "ba": "The virtual table summarizes the count of apartment bookings grouped by their status codes from the 'apartment_bookings' table. Each status code represents a different state of the booking, such as confirmed, canceled, or pending.",
            "question": "Show the booking status code and the corresponding number of bookings."
        },
        {
            "sample_id": 1228,
            "gold_sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT apartments.apt_number FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartment_bookings.booking_status_code = None.\"confirmed\"",
            "ba": "The virtual table lists the distinct apartment numbers from the 'apartments' table that are linked to confirmed bookings in the 'apartment_bookings' table. The placeholder in the WHERE clause represents the booking status code, specifically filtering for confirmed bookings.",
            "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\"."
        },
        {
            "sample_id": 1241,
            "gold_sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
            "gold_complexity": 7,
            "vt": "SELECT SUM(apartments.room_count) FROM apartment_facilities JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartment_facilities.facility_code = None.\"gym\"",
            "ba": "The virtual table calculates the total number of rooms in apartments that have a specific facility, in this case, a gym. It joins the 'apartment_facilities' table with the 'apartments' table to filter apartments that include the gym facility, and then sums up the 'room_count' for those apartments.",
            "question": "Find the total number of rooms in the apartments that have facility code \"Gym\"."
        },
        {
            "sample_id": 1271,
            "gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
            "gold_complexity": 9,
            "vt": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
            "ba": "The virtual table identifies the apartment numbers that have both confirmed and provisional bookings. It does this by joining the 'Apartment_Bookings' table with the 'Apartments' table based on the apartment ID. The query uses an INTERSECT operation to find common apartment numbers from two separate selections: one for confirmed bookings and another for provisional bookings.",
            "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers."
        },
        {
            "sample_id": 1214,
            "gold_sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
            "gold_complexity": 6,
            "vt": "SELECT apartments.apt_number FROM apartments WHERE apartments.apt_type_code = None.\"flat\"",
            "ba": "The virtual table lists the apartment numbers from the 'apartments' table that are classified as flats. The placeholder in the WHERE clause represents the type code for flats.",
            "question": "Return the apartment numbers of the apartments with type code \"Flat\"."
        },
        {
            "sample_id": 1270,
            "gold_sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
            "gold_complexity": 9,
            "vt": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = \"Provisional\"",
            "ba": "The virtual table identifies apartment numbers from the 'Apartments' table that have both confirmed and provisional bookings. It uses an intersection to find common apartment numbers that meet both booking status criteria.",
            "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\""
        },
        {
            "sample_id": 1217,
            "gold_sql": "SELECT guest_first_name ,  guest_last_name FROM Guests",
            "gold_complexity": 6,
            "vt": "SELECT guests.guest_first_name, guests.guest_last_name FROM guests",
            "ba": "The virtual table describes the first and last names of guests from the 'guests' table.",
            "question": "What are the first names and last names of all the guests?"
        },
        {
            "sample_id": 1198,
            "gold_sql": "SELECT DISTINCT building_description FROM Apartment_Buildings",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT apartment_buildings.building_description FROM apartment_buildings",
            "ba": "The virtual table provides a distinct list of building descriptions from the 'apartment_buildings' table. This allows users to see unique descriptions of all apartment buildings without duplicates.",
            "question": "Show all distinct building descriptions."
        },
        {
            "sample_id": 1208,
            "gold_sql": "SELECT avg(bedroom_count) FROM Apartments",
            "gold_complexity": 4,
            "vt": "SELECT AVG(apartments.bedroom_count) FROM apartments",
            "ba": "The virtual table calculates the average number of bedrooms across all apartments listed in the 'apartments' table.",
            "question": "What is the average number of bedrooms of all apartments?"
        },
        {
            "sample_id": 1220,
            "gold_sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
            "gold_complexity": 7,
            "vt": "SELECT apartments.apt_number, apartment_bookings.booking_start_date, apartment_bookings.booking_start_date FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id",
            "ba": "The virtual table provides information about apartment bookings, specifically the apartment number and the start date of the booking. It combines data from the 'apartment_bookings' and 'apartments' tables, linking them through the apartment identifier. The placeholders represent the specific apartment and booking details.",
            "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings."
        },
        {
            "sample_id": 1247,
            "gold_sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
            "gold_complexity": 9,
            "vt": "SELECT apartments.apt_type_code, apartments.apt_number FROM apartment_buildings JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE apartment_buildings.building_manager = None.\"kyle\"",
            "ba": "The virtual table describes the type and number of apartments from the 'apartments' table that are located in buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.",
            "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?"
        },
        {
            "sample_id": 1224,
            "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
            "gold_complexity": 7,
            "vt": "SELECT apartment_bookings.booking_start_date, apartment_bookings.booking_start_date FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartments.bedroom_count > [placeholder-type:numeric]",
            "ba": "The virtual table describes the start dates of apartment bookings from the 'apartment_bookings' table for apartments that have a specified number of bedrooms. The placeholder in the WHERE clause represents the minimum number of bedrooms required.",
            "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?"
        },
        {
            "sample_id": 1218,
            "gold_sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
            "gold_complexity": 6,
            "vt": "SELECT guests.date_of_birth FROM guests WHERE guests.gender_code = None.\"male\"",
            "ba": "The virtual table retrieves the birth dates of guests from the 'guests' table who are identified as male. The placeholder in the WHERE clause represents the gender code for male guests.",
            "question": "Return the date of birth for all the guests with gender code \"Male\"."
        },
        {
            "sample_id": 1236,
            "gold_sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
            "gold_complexity": 9,
            "vt": "SELECT guests.guest_first_name, guests.guest_last_name FROM apartment_bookings JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE apartment_bookings.booking_status_code = None.\"confirmed\"",
            "ba": "The virtual table describes the first and last names of guests who have made confirmed bookings for apartments. It retrieves this information by joining the 'apartment_bookings' table with the 'guests' table based on the guest's unique identifier. The placeholder in the WHERE clause represents the booking status, specifically filtering for confirmed bookings.",
            "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\"."
        },
        {
            "sample_id": 1235,
            "gold_sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"",
            "gold_complexity": 7,
            "vt": "SELECT apartment_bookings.booking_start_date, apartment_bookings.booking_start_date FROM apartment_bookings JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE guests.gender_code = None.\"female\"",
            "ba": "The virtual table describes the booking start dates of apartments from the 'apartment_bookings' table for guests who are identified as female. The query joins the 'apartment_bookings' table with the 'guests' table to filter the results based on the gender of the guests.",
            "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?"
        },
        {
            "sample_id": 1200,
            "gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
            "gold_complexity": 6,
            "vt": "SELECT apartment_buildings.building_short_name FROM apartment_buildings WHERE apartment_buildings.building_manager = None.\"emma\"",
            "ba": "The virtual table describes the abbreviated names of apartment buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.",
            "question": "Show the short names of the buildings managed by \"Emma\"."
        },
        {
            "sample_id": 1245,
            "gold_sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
            "gold_complexity": 7,
            "vt": "SELECT apartment_buildings.building_address FROM apartment_buildings JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE apartments.bathroom_count > [placeholder-type:numeric]",
            "ba": "The virtual table provides the physical addresses of apartment buildings from the 'apartment_buildings' table that have apartments with a specified number of bathrooms. The query joins the 'apartment_buildings' table with the 'apartments' table to filter based on the bathroom count, using a placeholder for the numeric value representing the minimum number of bathrooms.",
            "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings."
        },
        {
            "sample_id": 1252,
            "gold_sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT apartments.apt_number FROM apartments ORDER BY apartments.bedroom_count LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the apartment numbers from the 'apartments' table, ordered by the number of bedrooms in each apartment. The placeholder in the LIMIT clause allows the user to specify how many apartment numbers they want to retrieve.",
            "question": "Return the apartment number with the largest number of bedrooms."
        },
        {
            "sample_id": 1251,
            "gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
            "gold_complexity": 6,
            "vt": "SELECT apartments.apt_number FROM apartments ORDER BY apartments.room_count",
            "ba": "The virtual table lists the apartment numbers from the 'apartments' table, ordered by the total number of rooms in each apartment. This allows users to see the apartments sorted by their size.",
            "question": "Sort the apartment numbers in ascending order of room count."
        },
        {
            "sample_id": 1216,
            "gold_sql": "SELECT guest_first_name ,  guest_last_name FROM Guests",
            "gold_complexity": 6,
            "vt": "SELECT guests.guest_first_name, guests.guest_last_name FROM guests",
            "ba": "The virtual table describes the first and last names of guests from the 'guests' table.",
            "question": "Return the first names and last names of all guests"
        },
        {
            "sample_id": 1226,
            "gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
            "gold_complexity": 7,
            "vt": "SELECT apartment_bookings.booking_status_code FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartments.apt_number = None.\"suite 634\"",
            "ba": "The virtual table retrieves the booking status code for a specific apartment identified by its apartment number from the 'apartment_bookings' table. It joins the 'apartment_bookings' table with the 'apartments' table to link the booking information with the corresponding apartment details. The placeholder in the WHERE clause represents the apartment number being queried.",
            "question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?"
        },
        {
            "sample_id": 1227,
            "gold_sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
            "gold_complexity": 7,
            "vt": "SELECT apartment_bookings.booking_status_code FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartments.apt_number = None.\"suite 634\"",
            "ba": "The virtual table retrieves the booking status code for a specific apartment identified by its apartment number from the 'apartment_bookings' table. It joins the 'apartment_bookings' table with the 'apartments' table to link the booking information with the corresponding apartment details. The placeholder in the WHERE clause represents the apartment number being queried.",
            "question": "Tell me the booking status code for the apartment with number \"Suite 634\"."
        },
        {
            "sample_id": 1246,
            "gold_sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"",
            "gold_complexity": 9,
            "vt": "SELECT apartments.apt_type_code, apartments.apt_number FROM apartment_buildings JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE apartment_buildings.building_manager = None.\"kyle\"",
            "ba": "The virtual table provides a list of apartment types and their corresponding numbers from the 'apartments' table, filtered by the building manager's name from the 'apartment_buildings' table. The placeholder in the WHERE clause represents the name of the building manager.",
            "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\"."
        },
        {
            "sample_id": 1230,
            "gold_sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(apartments.room_count) FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartment_bookings.booking_status_code = None.\"provisional\"",
            "ba": "The virtual table calculates the average number of rooms in apartments that have provisional bookings. It joins the 'apartment_bookings' table with the 'apartments' table to access the room count for each apartment linked to a provisional booking status.",
            "question": "Show the average room count of the apartments that have booking status code \"Provisional\"."
        },
        {
            "sample_id": 1203,
            "gold_sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
            "gold_complexity": 8,
            "vt": "SELECT apartment_buildings.building_address, apartment_buildings.building_phone FROM apartment_buildings WHERE apartment_buildings.building_manager = None.\"brenden\"",
            "ba": "The virtual table provides the address and contact phone number of apartment buildings managed by a specific individual. The placeholder in the WHERE clause represents the name of the building manager.",
            "question": "What are the address and phone number of the buildings managed by \"Brenden\"?"
        },
        {
            "sample_id": 1267,
            "gold_sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT guests.gender_code, COUNT(*) FROM guests GROUP BY guests.gender_code ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the count of guests grouped by their gender from the 'guests' table. The placeholder in the SELECT statement represents the gender code of the guests, and the result is ordered by the count of guests in ascending order.",
            "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts."
        },
        {
            "sample_id": 1196,
            "gold_sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
            "gold_complexity": 6,
            "vt": "SELECT apartment_bookings.booking_start_date, apartment_bookings.booking_end_date FROM apartment_bookings",
            "ba": "The virtual table displays the start and end dates of apartment bookings from the 'apartment_bookings' table. The query is designed to retrieve information about when specific apartments are booked, which can be useful for managing availability and scheduling.",
            "question": "Show the start dates and end dates of all the apartment bookings."
        },
        {
            "sample_id": 1232,
            "gold_sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id",
            "gold_complexity": 7,
            "vt": "SELECT guests.guest_first_name, apartment_bookings.booking_start_date, apartment_bookings.booking_start_date FROM apartment_bookings JOIN Guests AS T2 ON T1.guest_id = T2.guest_id",
            "ba": "The virtual table describes the first names of guests along with their booking start dates from the 'apartment_bookings' table. It joins the 'apartment_bookings' table with the 'guests' table to retrieve the guest's first name associated with each booking. The placeholders represent the relevant identifiers for the guests and their bookings.",
            "question": "Show the guest first names, start dates, and end dates of all the apartment bookings."
        },
        {
            "sample_id": 1250,
            "gold_sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
            "gold_complexity": 6,
            "vt": "SELECT apartments.apt_number FROM apartments ORDER BY apartments.room_count",
            "ba": "The virtual table lists the apartment numbers from the 'apartments' table, ordered by the total number of rooms in each apartment. This allows users to see the apartments sorted by their size.",
            "question": "Return all the apartment numbers sorted by the room count in ascending order."
        },
        {
            "sample_id": 1201,
            "gold_sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"",
            "gold_complexity": 6,
            "vt": "SELECT apartment_buildings.building_short_name FROM apartment_buildings WHERE apartment_buildings.building_manager = None.\"emma\"",
            "ba": "The virtual table describes the abbreviated names of apartment buildings managed by a specific building manager. The placeholder in the WHERE clause represents the name of the building manager.",
            "question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings."
        },
        {
            "sample_id": 1259,
            "gold_sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT apartments.apt_type_code, apartments.bathroom_count, apartments.bedroom_count FROM apartments GROUP BY apartments.apt_type_code ORDER BY SUM(apartments.room_count) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of apartments available in the 'apartments' table, displaying the apartment type code, number of bathrooms, and number of bedrooms. It groups the results by apartment type code and orders them based on the total number of rooms in descending order, limiting the output to a specified number of results.",
            "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms."
        },
        {
            "sample_id": 1197,
            "gold_sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
            "gold_complexity": 6,
            "vt": "SELECT apartment_bookings.booking_start_date, apartment_bookings.booking_end_date FROM apartment_bookings",
            "ba": "The virtual table provides information about the start and end dates of apartment bookings from the 'apartment_bookings' table. The placeholders in the SELECT statement can be modified to filter or join with other tables as needed.",
            "question": "What are the start date and end date of each apartment booking?"
        },
        {
            "sample_id": 1231,
            "gold_sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(apartments.room_count) FROM apartment_bookings JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE apartment_bookings.booking_status_code = None.\"provisional\"",
            "ba": "The virtual table calculates the average number of rooms in apartments that have provisional bookings. It joins the 'apartment_bookings' table with the 'apartments' table to access the room count for each apartment linked to a provisional booking status.",
            "question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?"
        },
        {
            "sample_id": 1258,
            "gold_sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT apartments.apt_type_code, apartments.bathroom_count, apartments.bedroom_count FROM apartments GROUP BY apartments.apt_type_code ORDER BY SUM(apartments.room_count) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of apartments available in the 'apartments' table, displaying the apartment type code, number of bathrooms, and number of bedrooms. It groups the results by apartment type code and orders them based on the total number of rooms in descending order, limiting the output to a specified number of results.",
            "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms."
        },
        {
            "sample_id": 1269,
            "gold_sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM apartments WHERE NOT apartments.apt_id IN (SELECT apartments.apt_id FROM Apartment_Facilities)",
            "ba": "The virtual table counts the number of apartments from the 'apartments' table that do not have any associated facilities listed in the 'apartment_facilities' table. The subquery identifies all apartment IDs that have facilities, and the main query counts those apartments that are not included in that list.",
            "question": "Find the number of apartments that have no facility."
        },
        {
            "sample_id": 1195,
            "gold_sql": "SELECT count(*) FROM Apartment_Bookings",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM apartment_bookings",
            "ba": "The virtual table provides a count of all apartment bookings recorded in the 'apartment_bookings' table. This count represents the total number of bookings made, regardless of their status or associated guests.",
            "question": "Count the total number of apartment bookings."
        }
    ],
    "musical": [
        {
            "sample_id": 247,
            "gold_sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
            "gold_complexity": 6,
            "vt": "SELECT musical.name FROM musical WHERE musical.nominee = None.\"bob fosse\"",
            "ba": "The virtual table describes the titles of musicals from the 'musical' table where a specific nominee is associated with the musical. The placeholder in the WHERE clause represents the name of the nominee.",
            "question": "Return the names of musicals who have the nominee Bob Fosse."
        },
        {
            "sample_id": 273,
            "gold_sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
            "gold_complexity": 7,
            "vt": "SELECT musical.nominee FROM musical WHERE musical.award = None.\"tony award\" OR musical.award = None.\"cleavant derricks\"",
            "ba": "The virtual table lists the nominees for specific awards from the 'musical' table. The query filters the results to include only those musicals that are associated with either the 'tony award' or 'cleavant derricks'.",
            "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?"
        },
        {
            "sample_id": 250,
            "gold_sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
            "gold_complexity": 7,
            "vt": "SELECT actor.name, musical.name FROM actor JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
            "ba": "The virtual table describes the names of actors and the titles of musicals they are associated with. It combines data from the 'actor' and 'musical' tables using a join on the musical identifier, allowing for a comprehensive view of which actors performed in which musicals.",
            "question": "Show names of actors and names of musicals they are in."
        },
        {
            "sample_id": 246,
            "gold_sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
            "gold_complexity": 6,
            "vt": "SELECT musical.name FROM musical WHERE musical.nominee = None.\"bob fosse\"",
            "ba": "The virtual table describes the titles of musicals from the 'musical' table where a specific nominee is associated with the musical. The placeholder in the WHERE clause represents the name of the nominee.",
            "question": "What are the names of musicals with nominee \"Bob Fosse\"?"
        },
        {
            "sample_id": 238,
            "gold_sql": "SELECT Character ,  Duration FROM actor",
            "gold_complexity": 6,
            "vt": "SELECT actor.character, actor.duration FROM actor",
            "ba": "The virtual table describes the characters and their performance durations from the 'actor' table.",
            "question": "What are the characters and duration of actors?"
        },
        {
            "sample_id": 248,
            "gold_sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT musical.nominee FROM musical WHERE musical.award <> None.\"tony award\"",
            "ba": "The virtual table lists the distinct nominees from the 'musical' table who have been nominated for awards other than the 'tony award'.",
            "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?"
        },
        {
            "sample_id": 239,
            "gold_sql": "SELECT Character ,  Duration FROM actor",
            "gold_complexity": 6,
            "vt": "SELECT actor.character, actor.duration FROM actor",
            "ba": "The virtual table describes the characters and their performance durations from the 'actor' table. The query retrieves the character names played by actors along with the duration of their performances.",
            "question": "Return the characters and durations for each actor."
        },
        {
            "sample_id": 255,
            "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
            "gold_complexity": 7,
            "vt": "SELECT actor.name FROM actor JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY musical.year",
            "ba": "The virtual table describes the names of actors from the 'actor' table who are linked to specific musicals in the 'musical' table. The results are ordered by the year of the musical's release.",
            "question": "What are the names of actors ordered descending by the year in which their musical was awarded?"
        },
        {
            "sample_id": 261,
            "gold_sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
            "gold_complexity": 8,
            "vt": "SELECT musical.nominee, COUNT(*) FROM musical GROUP BY musical.nominee",
            "ba": "The virtual table summarizes the nominees for awards associated with musicals, counting how many times each nominee appears in the 'musical' table.",
            "question": "How many musicals has each nominee been nominated for?"
        },
        {
            "sample_id": 235,
            "gold_sql": "SELECT count(*) FROM actor",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM actor",
            "ba": "The virtual table provides a count of all actors from the 'actor' table, which includes details about each actor's performance in various musicals.",
            "question": "Count the number of actors."
        },
        {
            "sample_id": 254,
            "gold_sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC",
            "gold_complexity": 7,
            "vt": "SELECT actor.name FROM actor JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY musical.year",
            "ba": "The virtual table describes the names of actors from the 'actor' table who are linked to specific musicals in the 'musical' table. The results are ordered by the year of the musical's release.",
            "question": "Show names of actors in descending order of the year their musical is awarded."
        },
        {
            "sample_id": 237,
            "gold_sql": "SELECT Name FROM actor ORDER BY Name ASC",
            "gold_complexity": 6,
            "vt": "SELECT actor.name FROM actor ORDER BY actor.name",
            "ba": "The virtual table lists the names of actors from the 'actor' table, sorted in alphabetical order.",
            "question": "What are the names of actors, ordered alphabetically?"
        },
        {
            "sample_id": 260,
            "gold_sql": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
            "gold_complexity": 8,
            "vt": "SELECT musical.nominee, COUNT(*) FROM musical GROUP BY musical.nominee",
            "ba": "The virtual table summarizes the number of nominations received by each nominee from the 'musical' table. It groups the results by the nominee's name, allowing for a count of nominations per individual.",
            "question": "Show different nominees and the number of musicals they have been nominated."
        },
        {
            "sample_id": 265,
            "gold_sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT musical.result FROM musical GROUP BY musical.result ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the outcomes of nominations for musicals by grouping the results and counting the occurrences of each result type. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return.",
            "question": "Return the most frequent result across all musicals."
        },
        {
            "sample_id": 245,
            "gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT actor.duration FROM actor ORDER BY actor.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Return the duration of the actor with the greatest age."
        },
        {
            "sample_id": 257,
            "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
            "gold_complexity": 9,
            "vt": "SELECT musical.name, COUNT(*) FROM actor JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY actor.musical_id",
            "ba": "The virtual table summarizes the count of actors associated with each musical from the 'musical' table. It joins the 'actor' table with the 'musical' table based on the musical identifier, grouping the results by each musical to provide a count of actors for each one.",
            "question": "How many actors have appeared in each musical?"
        },
        {
            "sample_id": 266,
            "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT musical.nominee FROM musical GROUP BY musical.nominee HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.",
            "question": "List the nominees that have been nominated more than two musicals."
        },
        {
            "sample_id": 243,
            "gold_sql": "SELECT Character FROM actor ORDER BY age DESC",
            "gold_complexity": 6,
            "vt": "SELECT actor.character FROM actor ORDER BY actor.age",
            "ba": "The virtual table lists the characters played by actors from the 'actor' table, ordered by the age of the actors at the time of their performance. The placeholder in the ORDER BY clause represents the age of the actors.",
            "question": "Return the characters for actors, ordered by age descending."
        },
        {
            "sample_id": 256,
            "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
            "gold_complexity": 9,
            "vt": "SELECT musical.name, COUNT(*) FROM actor JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY actor.musical_id",
            "ba": "The virtual table summarizes the titles of musicals along with the count of actors associated with each musical. It joins the 'actor' table with the 'musical' table based on the musical identifier, grouping the results by each musical to provide a count of actors for each title.",
            "question": "Show names of musicals and the number of actors who have appeared in the musicals."
        },
        {
            "sample_id": 244,
            "gold_sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT actor.duration FROM actor ORDER BY actor.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the duration of performances by actors from the 'actor' table, ordered by the age of the actors at the time of their performances. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the duration of the oldest actor?"
        },
        {
            "sample_id": 267,
            "gold_sql": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT musical.nominee FROM musical GROUP BY musical.nominee HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of nominees from the 'musical' table who have received more than a specified number of nominations. The placeholder in the HAVING clause represents the minimum count of nominations required to be included in the results.",
            "question": "Who are the nominees who have been nominated more than two times?"
        },
        {
            "sample_id": 258,
            "gold_sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
            "gold_complexity": 9,
            "vt": "SELECT musical.name FROM actor JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY actor.musical_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles of musicals from the 'musical' table that have a certain number of actors associated with them. The placeholder in the HAVING clause represents the minimum count of actors required for the musical to be included in the results.",
            "question": "Show names of musicals which have at least three actors."
        },
        {
            "sample_id": 251,
            "gold_sql": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
            "gold_complexity": 7,
            "vt": "SELECT actor.name, musical.name FROM actor JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
            "ba": "The virtual table describes the names of actors and the titles of musicals they are associated with. It combines data from the 'actor' and 'musical' tables using a join on the musical identifier, allowing us to see which actors performed in which musicals.",
            "question": "What are the names of actors and the musicals that they are in?"
        },
        {
            "sample_id": 272,
            "gold_sql": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
            "gold_complexity": 7,
            "vt": "SELECT musical.nominee FROM musical WHERE musical.award = None.\"tony award\" OR musical.award = None.\"cleavant derricks\"",
            "ba": "The virtual table describes the nominees for specific awards from the 'musical' table. The placeholders in the WHERE clause represent the names of the awards being queried.",
            "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\"."
        }
    ],
    "voter_2": [
        {
            "sample_id": 5468,
            "gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT student.fname FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE",
            "ba": "The virtual table describes the distinct first names of students who have voted for a class senator. It retrieves data from the 'student' table and joins it with the 'voting_record' table based on the condition that the student's unique identifier matches the class senator vote in the voting record.",
            "question": "What are the distinct first names of the students who have class president votes?"
        },
        {
            "sample_id": 5499,
            "gold_sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
            "gold_complexity": 8,
            "vt": "SELECT voting_record.election_cycle, COUNT(*) FROM voting_record GROUP BY voting_record.election_cycle",
            "ba": "The virtual table summarizes the number of voting records for each election cycle from the 'voting_record' table. It groups the results by the 'election_cycle' column, allowing users to see how many votes were cast in each cycle.",
            "question": "For each election cycle, report the number of voting records."
        },
        {
            "sample_id": 5494,
            "gold_sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",
            "gold_complexity": 8,
            "vt": "SELECT student.advisor, COUNT(*) FROM student GROUP BY student.advisor",
            "ba": "The virtual table summarizes the number of students assigned to each academic advisor from the 'student' table. The placeholder in the SELECT clause represents the advisor's name, and the COUNT function is used to count the total number of students for each advisor.",
            "question": "How many students does each advisor have?"
        },
        {
            "sample_id": 5497,
            "gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
            "gold_complexity": 8,
            "vt": "SELECT student.major FROM student GROUP BY student.major HAVING COUNT(*) < [placeholder-type:numeric]",
            "ba": "The virtual table lists the fields of study (majors) from the 'student' table that have fewer students enrolled than a specified number. The placeholder in the HAVING clause represents the maximum number of students allowed for each major.",
            "question": "Report all majors that have less than 3 students."
        },
        {
            "sample_id": 5490,
            "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"2192\"",
            "ba": "The virtual table identifies distinct last names of students who voted for a specific presidential candidate, excluding those who have a specific academic advisor. It combines data from the 'student' and 'voting_record' tables based on the unique student identifier, ensuring that only students who participated in the presidential voting are considered, while filtering out those with the specified advisor.",
            "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?"
        },
        {
            "sample_id": 5472,
            "gold_sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.advisor FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE voting_record.election_cycle = None.\"spring\"",
            "ba": "The virtual table retrieves a distinct list of academic advisors from the 'student' table for students who voted for a specific treasurer in the 'voting_record' table during the spring election cycle.",
            "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?"
        },
        {
            "sample_id": 5450,
            "gold_sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"",
            "gold_complexity": 6,
            "vt": "SELECT student.major FROM student WHERE student.sex = None.\"m\"",
            "ba": "The virtual table describes the majors of students from the 'student' table who are male. The placeholder in the WHERE clause represents the gender of the students being filtered.",
            "question": "List the major of each male student."
        },
        {
            "sample_id": 5506,
            "gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student.city_code FROM student GROUP BY student.city_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique city codes from the 'student' table, grouping the results by city code and ordering them based on the number of students residing in each city. The placeholder in the LIMIT clause allows for specifying the maximum number of city codes to return.",
            "question": "Return the code of the city that has the most students."
        },
        {
            "sample_id": 5453,
            "gold_sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
            "gold_complexity": 7,
            "vt": "SELECT MAX(student.age), MIN(student.age) FROM student WHERE student.major = [placeholder-type:numeric]",
            "ba": "The virtual table provides the maximum and minimum ages of students from the 'student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major of study.",
            "question": "What are the maximum and minimum age of students with major 600?"
        },
        {
            "sample_id": 5460,
            "gold_sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT voting_record.president_vote FROM voting_record WHERE voting_record.registration_date = None.\"08/30/2015\"",
            "ba": "The virtual table retrieves distinct presidential votes from the 'voting_record' table for students who registered to vote on a specific date. The placeholder in the WHERE clause represents the registration date.",
            "question": "Show all the distinct president votes made on 08/30/2015."
        },
        {
            "sample_id": 5442,
            "gold_sql": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT President_Vote) FROM voting_record",
            "ba": "The virtual table counts the distinct votes cast for presidential candidates from the 'voting_record' table.",
            "question": "How many distinct president votes are recorded?"
        },
        {
            "sample_id": 5487,
            "gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = \"PIT\"",
            "ba": "The virtual table identifies distinct first names of students who voted for the vice president, excluding those who reside in a specific city represented by the city code 'PIT'.",
            "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT."
        },
        {
            "sample_id": 5467,
            "gold_sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT student.fname FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE",
            "ba": "The virtual table describes the distinct first names of students who have voted for the class senator from the 'student' table. The query joins the 'student' table with the 'voting_record' table based on the student ID, specifically filtering for those who cast a vote for the class senator.",
            "question": "Find the distinct first names of the students who have class senator votes."
        },
        {
            "sample_id": 5452,
            "gold_sql": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"",
            "gold_complexity": 6,
            "vt": "SELECT AVG(student.age) FROM student WHERE student.sex = None.\"f\"",
            "ba": "The virtual table calculates the average age of students from the 'student' table who are female. The placeholder in the WHERE clause represents the gender of the students being filtered.",
            "question": "Find the average age of female students."
        },
        {
            "sample_id": 5455,
            "gold_sql": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"",
            "gold_complexity": 6,
            "vt": "SELECT student.advisor FROM student WHERE student.city_code = None.\"bal\"",
            "ba": "The virtual table describes the academic advisors of students from the 'student' table who reside in a specific city, identified by the city code. The placeholder in the WHERE clause represents the city code.",
            "question": "Who are the advisors for students that live in a city with city code \"BAL\"?"
        },
        {
            "sample_id": 5491,
            "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\"",
            "ba": "The virtual table identifies distinct last names of students who have voted for a specific presidential candidate and also have a specific academic advisor. It combines data from the 'student' and 'voting_record' tables using a join on the student ID and filters based on the advisor's ID.",
            "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741."
        },
        {
            "sample_id": 5477,
            "gold_sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT student.fname, student.lname FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE student.age = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who have voted for a specific vice presidential candidate. The query joins the 'student' table with the 'voting_record' table based on the student's unique identifier and filters the results by the age of the students using a placeholder for numeric values.",
            "question": "Find the first and last name of all the students of age 18 who have vice president votes."
        },
        {
            "sample_id": 5480,
            "gold_sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE student.sex = None.\"m\" AND voting_record.election_cycle = None.\"fall\"",
            "ba": "The virtual table counts the number of male students who voted in the fall election cycle and also served as class senators. It joins the 'student' table with the 'voting_record' table based on the student ID, filtering for male students and a specific election cycle.",
            "question": "Count the number of male students who had class senator votes in the fall election cycle."
        },
        {
            "sample_id": 5479,
            "gold_sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE student.sex = None.\"m\" AND voting_record.election_cycle = None.\"fall\"",
            "ba": "The virtual table counts the number of male students who voted in the fall election cycle and participated in the class senator voting from the 'student' and 'voting_record' tables.",
            "question": "How many male (sex is M) students have class senator votes in the fall election cycle?"
        },
        {
            "sample_id": 5470,
            "gold_sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.age FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE voting_record.election_cycle = None.\"fall\"",
            "ba": "The virtual table retrieves distinct ages of students who voted for a specific candidate in the election cycle identified as 'fall'. The query joins the 'student' table with the 'voting_record' table based on the student's unique identifier and filters the results based on the election cycle.",
            "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?"
        },
        {
            "sample_id": 5456,
            "gold_sql": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"",
            "gold_complexity": 6,
            "vt": "SELECT student.advisor FROM student WHERE student.city_code = None.\"bal\"",
            "ba": "The virtual table describes the academic advisors of students from the 'student' table who reside in a specific city, identified by the city code. The placeholder in the WHERE clause represents the city code for filtering the results.",
            "question": "Show the advisors of the students whose city of residence has city code \"BAL\"."
        },
        {
            "sample_id": 5475,
            "gold_sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT student.fname, student.lname FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE student.sex = None.\"f\"",
            "ba": "The virtual table describes the first and last names of female students from the 'student' table who have voted for a presidential candidate. The query joins the 'student' table with the 'voting_record' table based on the student's unique identifier and filters the results to include only female students.",
            "question": "Find the first and last names of all the female (sex is F) students who have president votes."
        },
        {
            "sample_id": 5507,
            "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT student.advisor FROM student GROUP BY student.advisor HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic advisors from the 'student' table, grouped by advisor name. It filters the results to include only those advisors who have more than a specified number of students assigned to them, indicated by a placeholder for numeric values.",
            "question": "Report the distinct advisors who have more than 2 students."
        },
        {
            "sample_id": 5496,
            "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT student.advisor FROM student GROUP BY student.advisor HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic advisors from the 'student' table, grouped by advisor name. It filters the results to include only those advisors who have more than a specified number of students assigned to them, indicated by a placeholder for numeric values.",
            "question": "Which advisors have more than two students?"
        },
        {
            "sample_id": 5443,
            "gold_sql": "SELECT max(Age) FROM STUDENT",
            "gold_complexity": 4,
            "vt": "SELECT MAX(student.age) FROM student",
            "ba": "The virtual table retrieves the maximum age of students from the 'student' table.",
            "question": "Find the maximum age of all the students."
        },
        {
            "sample_id": 5489,
            "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"2192\"",
            "ba": "The virtual table identifies distinct last names of students who voted for a specific presidential candidate, excluding those who have a particular academic advisor. It combines data from the 'student' and 'voting_record' tables based on the student ID and filters out students associated with a specified advisor.",
            "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192."
        },
        {
            "sample_id": 5469,
            "gold_sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.age FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE voting_record.election_cycle = None.\"fall\"",
            "ba": "The virtual table retrieves the distinct ages of students who voted for a specific candidate in the election cycle identified as 'fall'. The query joins the 'student' table with the 'voting_record' table based on the unique student identifier, ensuring that only those students who participated in the voting for the secretary candidate are included.",
            "question": "Find the distinct ages of students who have secretary votes in the fall election cycle."
        },
        {
            "sample_id": 5493,
            "gold_sql": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",
            "gold_complexity": 8,
            "vt": "SELECT student.advisor, COUNT(*) FROM student GROUP BY student.advisor",
            "ba": "The virtual table summarizes the number of students assigned to each academic advisor from the 'student' table. The query groups the results by the advisor's name, allowing us to see how many students each advisor is responsible for.",
            "question": "For each advisor, report the total number of students advised by him or her."
        },
        {
            "sample_id": 5478,
            "gold_sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT student.fname, student.lname FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE student.age = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first and last names of students from the 'student' table who have voted for a specific vice presidential candidate. The placeholder in the WHERE clause represents the age of the students.",
            "question": "What are the first names and last names of the students who are 18 years old and have vice president votes."
        },
        {
            "sample_id": 5484,
            "gold_sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.age) FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE student.city_code = None.\"nyc\" AND voting_record.election_cycle = None.\"spring\"",
            "ba": "The virtual table calculates the average age of students from the 'student' table who reside in a specific city and participated in a particular election cycle. The placeholders represent the city code and the election cycle.",
            "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?"
        },
        {
            "sample_id": 5498,
            "gold_sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
            "gold_complexity": 8,
            "vt": "SELECT student.major FROM student GROUP BY student.major HAVING COUNT(*) < [placeholder-type:numeric]",
            "ba": "The virtual table lists the fields of study (majors) from the 'student' table that have fewer students enrolled than a specified number. The placeholder in the HAVING clause represents the maximum number of students allowed for each major.",
            "question": "What are the majors only less than three students are studying?"
        },
        {
            "sample_id": 5449,
            "gold_sql": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"",
            "gold_complexity": 6,
            "vt": "SELECT student.major FROM student WHERE student.sex = None.\"m\"",
            "ba": "The virtual table describes the majors of students from the 'student' table who are male. The placeholder in the WHERE clause represents the gender of the students being filtered.",
            "question": "What are the majors of male (sex is M) students?"
        },
        {
            "sample_id": 5462,
            "gold_sql": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT voting_record.registration_date, voting_record.election_cycle FROM voting_record",
            "ba": "The virtual table provides a distinct list of registration dates and election cycles from the 'voting_record' table, which contains records of students' voting activities.",
            "question": "What are the distinct registration dates and the election cycles?"
        },
        {
            "sample_id": 5448,
            "gold_sql": "SELECT Fname FROM STUDENT WHERE Age  >  22",
            "gold_complexity": 6,
            "vt": "SELECT student.fname FROM student WHERE student.age > [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of students from the 'student' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.",
            "question": "What are the first names of all the students aged above 22?"
        },
        {
            "sample_id": 5495,
            "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT student.advisor FROM student GROUP BY student.advisor HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of academic advisors from the 'student' table, grouping the results by advisor name. It filters the results to include only those advisors who have more than a specified number of students assigned to them, indicated by a placeholder for numeric values.",
            "question": "Report all advisors that advise more than 2 students."
        },
        {
            "sample_id": 5501,
            "gold_sql": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student.major FROM student GROUP BY student.major ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique majors from the 'student' table, grouped by the field of study. It orders the results based on the number of students enrolled in each major and limits the output to a specified number of results.",
            "question": "Which major has the most students?"
        },
        {
            "sample_id": 5466,
            "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT student.lname FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE",
            "ba": "The virtual table retrieves the distinct last names of students who have voted for their class president. It joins the 'student' table with the 'voting_record' table based on the unique student identifier, ensuring that only those students who participated in the voting for class president are included in the results.",
            "question": "What are the distinct last names of the students who have class president votes?"
        },
        {
            "sample_id": 5437,
            "gold_sql": "SELECT count(*) FROM STUDENT",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM student",
            "ba": "The virtual table counts the total number of students from the 'student' table.",
            "question": "Find the number of students in total."
        },
        {
            "sample_id": 5438,
            "gold_sql": "SELECT count(*) FROM STUDENT",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM student",
            "ba": "The virtual table counts the total number of students from the 'student' table.",
            "question": "How many students are there in total?"
        },
        {
            "sample_id": 5445,
            "gold_sql": "SELECT LName FROM STUDENT WHERE Major  =  50",
            "gold_complexity": 6,
            "vt": "SELECT student.lname FROM student WHERE student.major = [placeholder-type:numeric]",
            "ba": "The virtual table describes the last names of students from the 'student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major of study.",
            "question": "Find the last names of students with major 50."
        },
        {
            "sample_id": 5505,
            "gold_sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student.city_code FROM student GROUP BY student.city_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique city codes from the 'student' table, grouping the results by city code and ordering them based on the number of students residing in each city. The placeholder in the LIMIT clause allows for specifying the maximum number of city codes to return.",
            "question": "What is the city_code of the city that the most students live in?"
        },
        {
            "sample_id": 5465,
            "gold_sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT student.lname FROM student JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE",
            "ba": "The virtual table lists the distinct last names of students who have voted for the class president. It retrieves data from the 'student' table and joins it with the 'voting_record' table based on the condition that the student's unique identifier matches the class president vote in the voting record.",
            "question": "Find the distinct last names of the students who have class president votes."
        },
        {
            "sample_id": 5508,
            "gold_sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT student.advisor FROM student GROUP BY student.advisor HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic advisors from the 'student' table, showing only those advisors who have more than a specified number of students assigned to them. The placeholder in the HAVING clause represents the minimum count of students required for an advisor to be included in the results.",
            "question": "Which advisors are advising more than 2 students?"
        }
    ],
    "soccer_1": [
        {
            "sample_id": 1303,
            "gold_sql": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
            "gold_complexity": 10,
            "vt": "SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85",
            "ba": "The virtual table identifies players who meet specific physical and skill criteria. It selects the API identifiers of players from the 'Player' table who are at least 180 cm tall and intersects this with those from the 'Player_Attributes' table who have an overall skill rating greater than 85. The use of the INTERSECT operator ensures that only players satisfying both conditions are returned.",
            "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85."
        },
        {
            "sample_id": 1302,
            "gold_sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
            "gold_complexity": 10,
            "vt": "SELECT player_attributes.preferred_foot, COUNT(*) FROM player_attributes WHERE player_attributes.overall_rating > [placeholder-type:numeric] GROUP BY player_attributes.preferred_foot",
            "ba": "The virtual table summarizes the preferred foot of players from the 'player_attributes' table, counting how many players have an overall rating above a specified threshold. The placeholder in the WHERE clause represents the minimum overall rating to filter the players.",
            "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?"
        },
        {
            "sample_id": 1299,
            "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT player.player_name FROM player JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE player_attributes.crossing > [placeholder-type:numeric] AND player_attributes.preferred_foot = None.\"right\"",
            "ba": "The virtual table lists the distinct names of players from the 'player' table who have a crossing ability greater than a specified numeric value and prefer to use their right foot. The query joins the 'player' table with the 'player_attributes' table to access the relevant attributes of each player.",
            "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot."
        },
        {
            "sample_id": 1300,
            "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT player.player_name FROM player JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE player_attributes.preferred_foot = None.\"left\" AND player_attributes.overall_rating >= [placeholder-type:numeric] AND player_attributes.overall_rating <= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of players from the 'player' table who have a preferred foot of 'left' and whose overall skill rating falls within a specified range. The placeholders in the WHERE clause represent the minimum and maximum values for the overall rating.",
            "question": "List the names of all left-footed players who have overall rating between 85 and 90."
        },
        {
            "sample_id": 1293,
            "gold_sql": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
            "gold_complexity": 7,
            "vt": "SELECT country.name, league.name FROM country JOIN League AS T2 ON T1.id = T2.country_id",
            "ba": "The virtual table describes the names of countries and their corresponding leagues from the 'country' and 'league' tables. The join operation links the two tables based on the country identifier, allowing for the retrieval of league names associated with each country.",
            "question": "List all country and league names."
        },
        {
            "sample_id": 1305,
            "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY overall_rating DESC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT player.player_name FROM player JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY player_attributes.overall_rating LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of players from the 'player' table, joining with the 'player_attributes' table to access their overall ratings. The results are ordered by the overall rating in descending order, and a limit is applied to restrict the number of players returned based on a specified numeric value.",
            "question": "Who are the top 3 players in terms of overall rating?"
        },
        {
            "sample_id": 1298,
            "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT player.player_name FROM player JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE player_attributes.dribbling = (SELECT MAX(player_attributes.overall_rating) FROM Player_Attributes)",
            "ba": "The virtual table describes the names of players from the 'player' table who have the highest overall skill rating among all players based on their dribbling ability. The query uses a subquery to find the maximum overall rating from the 'player_attributes' table and filters the results accordingly.",
            "question": "What are the names of players who have the best dribbling?"
        },
        {
            "sample_id": 1304,
            "gold_sql": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
            "gold_complexity": 12,
            "vt": "SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = \"left\"",
            "ba": "The virtual table identifies players who have a height between 180 and 190 centimeters and prefer to use their left foot. It combines data from the 'Player' table, filtering by height, and intersects it with data from the 'Player_Attributes' table, filtering by preferred foot.",
            "question": "List all of the ids for left-footed players with a height between 180cm and 190cm."
        }
    ],
    "train_station": [
        {
            "sample_id": 6606,
            "gold_sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
            "gold_complexity": 8,
            "vt": "SELECT station.name, train.name FROM train_station JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id",
            "ba": "The virtual table describes the names of stations and the names of trains that stop at those stations. It combines data from the 'station' and 'train' tables through the 'train_station' linking table, which connects specific trains to their respective stations.",
            "question": "show the train name and station name for each train."
        },
        {
            "sample_id": 6595,
            "gold_sql": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'",
            "gold_complexity": 8,
            "vt": "SELECT station.name, station.total_passengers FROM station WHERE station.location <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and total number of passengers from the 'station' table, excluding stations located in a specific geographical area. The placeholder in the WHERE clause represents the location to be excluded.",
            "question": "Show the names and total passengers for all train stations not in London."
        },
        {
            "sample_id": 6611,
            "gold_sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
            "gold_complexity": 10,
            "vt": "SELECT station.name FROM station WHERE NOT station.station_id IN (SELECT station.station_id FROM train_station)",
            "ba": "The virtual table lists the names of stations from the 'station' table that do not have any associated trains in the 'train_station' table. The subquery identifies all station IDs that are linked to trains, and the main query filters out these stations from the results.",
            "question": "Show station names without any trains."
        },
        {
            "sample_id": 6599,
            "gold_sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT station.location FROM station WHERE station.number_of_platforms >= [placeholder-type:numeric] AND station.total_passengers > [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct geographical locations of stations from the 'station' table that have a specified minimum number of platforms and a total number of passengers exceeding a certain threshold. The placeholders in the WHERE clause represent numeric values for the minimum number of platforms and total passengers.",
            "question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers."
        },
        {
            "sample_id": 6608,
            "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT station.name FROM train_station JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY train_station.station_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of stations that are linked to trains, showing the most frequently used stations based on the number of train arrivals. The placeholder in the LIMIT clause represents the maximum number of station names to return.",
            "question": "Show the station name with greatest number of trains."
        },
        {
            "sample_id": 6613,
            "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")",
            "gold_complexity": 13,
            "vt": "SELECT train.name FROM train_station JOIN train AS T2 ON T1.train_id = T2.train_id WHERE NOT train_station.station_id IN (SELECT station.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = \"London\")",
            "ba": "The virtual table lists the names of trains that do not stop at any station located in London. It achieves this by joining the 'train_station' table with the 'train' table to get the train names, while filtering out any train IDs that are associated with stations in London.",
            "question": "Find the names of the trains that do not pass any station located in London."
        },
        {
            "sample_id": 6594,
            "gold_sql": "SELECT DISTINCT LOCATION FROM station",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT station.location FROM station",
            "ba": "The virtual table provides a unique list of geographical locations of all stations from the 'station' table.",
            "question": "What are all locations of train stations?"
        },
        {
            "sample_id": 6597,
            "gold_sql": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'",
            "gold_complexity": 7,
            "vt": "SELECT AVG(station.total_passengers), MAX(station.total_passengers) FROM station WHERE station.location = '[placeholder-type:string]' OR station.location = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average and maximum total number of passengers from the 'station' table for stations located in specific geographical areas. The placeholders in the WHERE clause represent the locations being queried.",
            "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?"
        },
        {
            "sample_id": 6602,
            "gold_sql": "SELECT name ,  TIME ,  service FROM train",
            "gold_complexity": 8,
            "vt": "SELECT train.name, train.time, train.service FROM train",
            "ba": "The virtual table describes the names, scheduled times, and types of services provided by trains from the 'train' table.",
            "question": "Show the name, time, and service for all trains."
        },
        {
            "sample_id": 6607,
            "gold_sql": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",
            "gold_complexity": 12,
            "vt": "SELECT train.name, train.time FROM train_station JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE station.location = '[placeholder-type:string]' ORDER BY train.time",
            "ba": "The virtual table describes the names and scheduled times of trains that stop at a specific station based on its geographical location. The placeholders in the WHERE clause represent the location of the station.",
            "question": "Show all train names and times in stations in London in descending order by train time."
        },
        {
            "sample_id": 6601,
            "gold_sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT station.location FROM station GROUP BY station.location ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique geographical locations of stations from the 'station' table, grouped by location. It orders the results based on the count of stations in each location and limits the output to a specified number of locations.",
            "question": "Show the location with most number of train stations."
        },
        {
            "sample_id": 6600,
            "gold_sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
            "gold_complexity": 7,
            "vt": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15",
            "ba": "The virtual table lists the geographical locations of stations that have fewer than 15 platforms. It does this by selecting all locations from the 'station' table and excluding those locations where the number of platforms is 15 or more.",
            "question": "Show all locations which don't have a train station with at least 15 platforms."
        },
        {
            "sample_id": 6593,
            "gold_sql": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
            "gold_complexity": 8,
            "vt": "SELECT station.name, station.location, station.number_of_platforms FROM station",
            "ba": "The virtual table describes the names, locations, and number of platforms of stations from the 'station' table.",
            "question": "Show the name, location, and number of platforms for all stations."
        }
    ],
    "local_govt_and_lot": [
        {
            "sample_id": 4846,
            "gold_sql": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Status_of_Thing_Code) FROM timed_status_of_things",
            "ba": "The virtual table provides a count of distinct status codes for things tracked in the 'timed_status_of_things' table. This allows users to understand how many unique statuses are recorded for various items over time.",
            "question": "How many different status codes of things are there?"
        },
        {
            "sample_id": 4839,
            "gold_sql": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT services.service_id, services.service_details, COUNT(*) FROM services JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY services.service_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the services provided to residents, displaying the service ID and details along with the count of residents receiving each service. The results are grouped by service ID and ordered by the count of residents, with a limit on the number of results returned.",
            "question": "What is the maximum number that a certain service is provided? List the service id, details and number."
        },
        {
            "sample_id": 4837,
            "gold_sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT services.service_type_code FROM services JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE organizations.organization_details = '[placeholder-type:string]'",
            "ba": "The virtual table lists distinct service type codes from the 'services' table that are provided by organizations with specific details. The placeholder in the WHERE clause represents the organization's details.",
            "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?"
        },
        {
            "sample_id": 4842,
            "gold_sql": "SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 9,
            "vt": "SELECT customer_events.date_moved_in, customers.customer_id, customers.customer_details FROM customers JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table describes the date when a customer moved into a property, along with the unique identifier and detailed information about the customer. It combines data from the 'customers' table and the 'customer_events' table based on the customer ID.",
            "question": "What is each customer's move in date, and the corresponding customer id and details?"
        },
        {
            "sample_id": 4850,
            "gold_sql": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
            "gold_complexity": 8,
            "vt": "SELECT customer_events.customer_event_id, customer_events.date_moved_in, customer_events.property_id FROM customer_events",
            "ba": "The virtual table describes the unique identifiers and relevant dates for customer events from the 'customer_events' table. The placeholders represent specific customer event details that can be filtered or modified as needed.",
            "question": "List the customer event id and the corresponding move in date and property id."
        },
        {
            "sample_id": 4836,
            "gold_sql": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
            "gold_complexity": 9,
            "vt": "SELECT properties.property_id, COUNT(*) FROM properties JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY properties.property_id",
            "ba": "The virtual table summarizes the number of residents associated with each property from the 'properties' table. It retrieves the unique property identifiers and counts how many residents live in each property, grouping the results by property ID.",
            "question": "How many residents does each property have? List property id and resident count."
        },
        {
            "sample_id": 4838,
            "gold_sql": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
            "gold_complexity": 13,
            "vt": "SELECT residents.resident_id, residents.other_details, COUNT(*) FROM residents JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY residents.resident_id ORDER BY COUNT(*)",
            "ba": "The virtual table provides a summary of residents along with their details and the count of services they are receiving. It aggregates the data by resident ID, allowing users to see how many services each resident is associated with, sorted in ascending order of the service count.",
            "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count."
        },
        {
            "sample_id": 4844,
            "gold_sql": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT things.thing_id, things.type_of_thing_code FROM timed_status_of_things JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE timed_status_of_things.status_of_thing_code = '[placeholder-type:string]' OR timed_status_of_things.date_and_date < '[placeholder-type:string]'",
            "ba": "The virtual table provides a distinct list of items (things) along with their type codes from the 'things' table, filtered based on the status of the items or the date when their status was recorded. The placeholders represent the specific status code and date criteria for filtering the results.",
            "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'"
        },
        {
            "sample_id": 4843,
            "gold_sql": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
            "gold_complexity": 11,
            "vt": "SELECT customer_events.customer_event_id, customer_events.property_id FROM customer_events JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY customer_events.customer_event_id HAVING COUNT(*) BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of customer events and their associated properties from the 'customer_events' table. It joins with the 'customer_event_notes' table to aggregate notes related to each customer event. The results are grouped by the unique identifier of the customer event, and a filter is applied to include only those events that have a count of associated notes within a specified numeric range.",
            "question": "Which events have the number of notes between one and three? List the event id and the property id."
        },
        {
            "sample_id": 4849,
            "gold_sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
            "gold_complexity": 6,
            "vt": "SELECT residents.other_details FROM residents WHERE residents.other_details LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the additional information about residents from the 'residents' table that matches a specific pattern. The placeholder in the WHERE clause represents the criteria for filtering the resident details based on a string pattern.",
            "question": "What are the resident details containing the substring 'Miss'?"
        }
    ],
    "pilot_record": [
        {
            "sample_id": 2091,
            "gold_sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
            "gold_complexity": 9,
            "vt": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
            "ba": "The virtual table identifies the positions of pilots who joined the team before the year 2000 and compares them with the positions of pilots who joined after the year 2005. The use of INTERSECT ensures that only the positions common to both groups are returned.",
            "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000."
        },
        {
            "sample_id": 2086,
            "gold_sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT pilot.position FROM pilot WHERE pilot.age > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct positions of pilots from the 'pilot' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.",
            "question": "List the distinct positions of pilots older than 30."
        },
        {
            "sample_id": 2093,
            "gold_sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank",
            "gold_complexity": 10,
            "vt": "SELECT pilot.pilot_name, aircraft.fleet_series FROM pilot_record JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY pilot.rank",
            "ba": "The virtual table describes the names of pilots along with the fleet series of the aircraft they have flown. It combines data from the 'pilot', 'aircraft', and 'pilot_record' tables, linking them through their respective identifiers. The results are ordered by the rank of the pilots.",
            "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot."
        },
        {
            "sample_id": 2096,
            "gold_sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT pilot.pilot_name, COUNT(*) FROM pilot_record JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY pilot.pilot_name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the names of pilots along with the count of their flight records from the 'pilot_record' table. It joins the 'pilot' table to associate each record with the corresponding pilot's name. The results are grouped by pilot names, and only those pilots who have more than a specified number of flight records are included in the output.",
            "question": "Show names of pilots that have more than one record."
        },
        {
            "sample_id": 2095,
            "gold_sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
            "gold_complexity": 9,
            "vt": "SELECT pilot.pilot_name, COUNT(*) FROM pilot_record JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY pilot.pilot_name",
            "ba": "The virtual table summarizes the names of pilots along with the count of their flight records from the 'pilot_record' table. It joins the 'pilot' table to associate each record with the corresponding pilot's name. The result is grouped by pilot names to provide a count of flights for each pilot.",
            "question": "Show the names of pilots and the number of records they have."
        },
        {
            "sample_id": 2090,
            "gold_sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT pilot.nationality FROM pilot GROUP BY pilot.nationality ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique nationalities of pilots from the 'pilot' table, grouped by nationality. It orders the results based on the count of pilots from each nationality and limits the output to a specified number of entries.",
            "question": "Show the most common nationality of pilots."
        },
        {
            "sample_id": 2085,
            "gold_sql": "SELECT POSITION ,  Team FROM pilot",
            "gold_complexity": 6,
            "vt": "SELECT pilot.position, pilot.team FROM pilot",
            "ba": "The virtual table describes the positions and teams of pilots from the 'pilot' table. The query selects the 'position' and 'team' columns, which provide information about each pilot's current role and the organization they are associated with.",
            "question": "What are the positions and teams of pilots?"
        },
        {
            "sample_id": 2094,
            "gold_sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34",
            "gold_complexity": 8,
            "vt": "SELECT aircraft.fleet_series FROM pilot_record JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE pilot.age < [placeholder-type:numeric]",
            "ba": "The virtual table describes the fleet series of aircraft that have been flown by pilots under a certain age. It combines data from the 'pilot_record', 'aircraft', and 'pilot' tables, filtering the results based on the age of the pilots.",
            "question": "Show the fleet series of the aircrafts flied by pilots younger than 34"
        },
        {
            "sample_id": 2092,
            "gold_sql": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID",
            "gold_complexity": 8,
            "vt": "SELECT pilot.pilot_name, aircraft.model FROM pilot_record JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID",
            "ba": "The virtual table describes the names of pilots and the models of aircraft they have flown. It combines data from the 'pilot', 'aircraft', and 'pilot_record' tables, linking pilots to their respective flight records and the aircraft they operated.",
            "question": "Show the names of pilots and models of aircrafts they have flied with."
        }
    ],
    "farm": [
        {
            "sample_id": 16,
            "gold_sql": "SELECT count(*) FROM farm",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM farm",
            "ba": "The virtual table provides the total count of farms recorded in the 'farm' table.",
            "question": "How many farms are there?"
        },
        {
            "sample_id": 21,
            "gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
            "gold_complexity": 6,
            "vt": "SELECT farm_competition.hosts FROM farm_competition WHERE farm_competition.theme <> '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of hosts for competitions from the 'farm_competition' table, excluding those competitions that have a specific theme. The placeholder in the WHERE clause represents the theme that should not be included.",
            "question": "Return the hosts of competitions for which the theme is not Aliens?"
        },
        {
            "sample_id": 50,
            "gold_sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
            "gold_complexity": 9,
            "vt": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
            "ba": "The virtual table retrieves the status of cities from the 'city' table that have a population greater than a specified number and also those with a population less than another specified number. The use of INTERSECT ensures that only the statuses common to both conditions are returned.",
            "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500."
        },
        {
            "sample_id": 29,
            "gold_sql": "SELECT count(DISTINCT Status) FROM city",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Status) FROM city",
            "ba": "The virtual table counts the distinct statuses of cities from the 'city' table. The placeholder in the SELECT clause represents the unique statuses that can be found in the city records.",
            "question": "Count the number of different statuses."
        },
        {
            "sample_id": 51,
            "gold_sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500",
            "gold_complexity": 9,
            "vt": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
            "ba": "The virtual table identifies the status of cities based on their population. It retrieves the status of cities with a population greater than a specified number and intersects it with the status of cities with a population less than another specified number. This allows for the comparison of city statuses that fall into both population categories.",
            "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?"
        },
        {
            "sample_id": 23,
            "gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
            "gold_complexity": 6,
            "vt": "SELECT farm_competition.theme FROM farm_competition ORDER BY farm_competition.year",
            "ba": "The virtual table lists the themes of competitions from the 'farm_competition' table, ordered by the year in which each competition took place. This allows users to see the progression of themes over the years.",
            "question": "Return the themes of farm competitions, sorted by year ascending."
        },
        {
            "sample_id": 53,
            "gold_sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
            "gold_complexity": 8,
            "vt": "SELECT city.official_name FROM city WHERE city.population > [placeholder-type:numeric] OR city.population < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the official names of cities from the 'city' table where the population is either greater than or less than specified numeric values. The placeholders represent the population thresholds for filtering the results.",
            "question": "What are the official names of cities that have population over 1500 or less than 500?"
        },
        {
            "sample_id": 41,
            "gold_sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
            "gold_complexity": 7,
            "vt": "SELECT farm_competition.theme FROM city JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE city.population > [placeholder-type:numeric]",
            "ba": "The virtual table describes the themes of competitions hosted in cities with a population greater than a specified number. It retrieves data from the 'farm_competition' table and joins it with the 'city' table based on the host city identifier. The placeholder in the WHERE clause represents the minimum population threshold for filtering the cities.",
            "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?"
        },
        {
            "sample_id": 26,
            "gold_sql": "SELECT max(Cows) ,  min(Cows) FROM farm",
            "gold_complexity": 5,
            "vt": "SELECT MAX(farm.cows), MIN(farm.cows) FROM farm",
            "ba": "The virtual table provides the maximum and minimum number of cows recorded on farms from the 'farm' table.",
            "question": "What are the maximum and minimum number of cows across all farms."
        },
        {
            "sample_id": 28,
            "gold_sql": "SELECT count(DISTINCT Status) FROM city",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Status) FROM city",
            "ba": "The virtual table counts the distinct statuses of cities from the 'city' table. The placeholder in the COUNT function represents the unique statuses that can be present in the city records.",
            "question": "How many different statuses do cities have?"
        },
        {
            "sample_id": 38,
            "gold_sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT city.status FROM city JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY farm_competition.host_city_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the status of cities that have hosted competitions, grouping the results by each host city and ordering them based on the number of competitions hosted. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Show the status of the city that has hosted the greatest number of competitions."
        },
        {
            "sample_id": 19,
            "gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
            "gold_complexity": 6,
            "vt": "SELECT farm.total_horses FROM farm ORDER BY farm.total_horses",
            "ba": "The virtual table provides a list of total horses present on each farm from the 'farm' table, ordered by the number of horses in ascending order.",
            "question": "What is the total horses record for each farm, sorted ascending?"
        },
        {
            "sample_id": 52,
            "gold_sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
            "gold_complexity": 8,
            "vt": "SELECT city.official_name FROM city WHERE city.population > [placeholder-type:numeric] OR city.population < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the official names of cities from the 'city' table where the population is either greater than or less than specified numeric values. The placeholders represent the population thresholds for filtering the cities.",
            "question": "Find the official names of cities with population bigger than 1500 or smaller than 500."
        },
        {
            "sample_id": 47,
            "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT city.status FROM city GROUP BY city.status ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the current status of cities by grouping them based on their status and counting the occurrences of each status. The result is ordered by the count of cities in each status, and the number of statuses returned is limited by a numeric placeholder.",
            "question": "What is the most common status across all cities?"
        },
        {
            "sample_id": 24,
            "gold_sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
            "gold_complexity": 6,
            "vt": "SELECT AVG(farm.working_horses) FROM farm WHERE farm.total_horses > [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average number of working horses from the 'farm' table for farms that have a total number of horses exceeding a specified threshold. The placeholder in the WHERE clause represents the minimum number of total horses required to be considered for the average calculation.",
            "question": "What is the average number of working horses of farms with more than 5000 total number of horses?"
        },
        {
            "sample_id": 33,
            "gold_sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT city.official_name, city.status FROM city ORDER BY city.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the official names and statuses of cities from the 'city' table, ordered by their population. The placeholder in the LIMIT clause represents the maximum number of cities to return.",
            "question": "What is the official name and status of the city with the most residents?"
        },
        {
            "sample_id": 22,
            "gold_sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
            "gold_complexity": 6,
            "vt": "SELECT farm_competition.theme FROM farm_competition ORDER BY farm_competition.year",
            "ba": "The virtual table lists the themes of competitions from the 'farm_competition' table, ordered by the year in which each competition took place. This allows users to see the progression of themes over the years.",
            "question": "What are the themes of farm competitions sorted by year in ascending order?"
        },
        {
            "sample_id": 20,
            "gold_sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
            "gold_complexity": 6,
            "vt": "SELECT farm_competition.hosts FROM farm_competition WHERE farm_competition.theme <> '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of hosts for competitions from the 'farm_competition' table, excluding those competitions that have a specific theme. The placeholder in the WHERE clause represents the theme that should not be included.",
            "question": "What are the hosts of competitions whose theme is not \"Aliens\"?"
        },
        {
            "sample_id": 18,
            "gold_sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
            "gold_complexity": 6,
            "vt": "SELECT farm.total_horses FROM farm ORDER BY farm.total_horses",
            "ba": "The virtual table displays the total number of horses present on each farm from the 'farm' table, sorted in ascending order based on the total number of horses.",
            "question": "List the total number of horses on farms in ascending order."
        },
        {
            "sample_id": 35,
            "gold_sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
            "gold_complexity": 7,
            "vt": "SELECT farm_competition.year, city.official_name FROM city JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
            "ba": "The virtual table describes the years of competitions along with the official names of the cities that hosted them. It combines data from the 'farm_competition' table and the 'city' table, linking them through the host city identifier.",
            "question": "Give the years and official names of the cities of each competition."
        },
        {
            "sample_id": 46,
            "gold_sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT city.status FROM city GROUP BY city.status ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the current status of cities by grouping them based on their status and counting the occurrences of each status. The result is ordered by the count of cities in each status, and the number of statuses returned is limited by a numeric placeholder.",
            "question": "List the most common type of Status across cities."
        },
        {
            "sample_id": 34,
            "gold_sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
            "gold_complexity": 7,
            "vt": "SELECT farm_competition.year, city.official_name FROM city JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID",
            "ba": "The virtual table describes the years of competitions along with the official names of the cities that hosted them. It combines data from the 'farm_competition' and 'city' tables, linking them through the host city identifier.",
            "question": "Show the years and the official names of the host cities of competitions."
        },
        {
            "sample_id": 54,
            "gold_sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
            "gold_complexity": 6,
            "vt": "SELECT city.census_ranking FROM city WHERE city.status <> None.\"village\"",
            "ba": "The virtual table retrieves the census ranking of cities from the 'city' table, specifically filtering out those cities that have a status of 'village'. The placeholder in the WHERE clause indicates that we are excluding cities with a specific status.",
            "question": "Show the census ranking of cities whose status are not \"Village\"."
        },
        {
            "sample_id": 30,
            "gold_sql": "SELECT Official_Name FROM city ORDER BY Population DESC",
            "gold_complexity": 6,
            "vt": "SELECT city.official_name FROM city ORDER BY city.population",
            "ba": "The virtual table lists the official names of cities from the 'city' table, ordered by their population size.",
            "question": "List official names of cities in descending order of population."
        }
    ],
    "world_1": [
        {
            "sample_id": 7793,
            "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "gold_complexity": 9,
            "vt": "SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries along with their surface areas, sorted in ascending order of surface area. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to retrieve.",
            "question": "What are the names and areas of countries with the top 5 largest area?"
        },
        {
            "sample_id": 7758,
            "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
            "gold_complexity": 13,
            "vt": "SELECT AVG(country.lifeexpectancy) FROM country WHERE NOT country.name IN (SELECT country.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "ba": "The virtual table calculates the average life expectancy of countries that do not have English as an official language. It does this by first identifying countries where English is not an official language through a subquery that joins the 'country' and 'countrylanguage' tables.",
            "question": "Give the mean life expectancy of countries in which English is not the official language."
        },
        {
            "sample_id": 7738,
            "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(*) FROM (SELECT country.name FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE countrylanguage.language = None.\"english\" INTERSECT SELECT country.name FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE countrylanguage.language = None.\"dutch\")",
            "ba": "The virtual table counts the number of countries that have both English and Dutch as spoken languages. It does this by performing an intersection of two subqueries: one that selects country names where English is spoken and another that selects country names where Dutch is spoken. The result is a count of countries that meet both criteria.",
            "question": "What is the number of nations that use English and Dutch?"
        },
        {
            "sample_id": 7740,
            "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "ba": "The virtual table identifies countries that have both English and French as spoken languages. It does this by performing an intersection of two queries: the first query selects country names where English is spoken, and the second query selects country names where French is spoken. The intersection ensures that only countries that meet both language criteria are included in the final result.",
            "question": "Give the names of nations that speak both English and French."
        },
        {
            "sample_id": 7705,
            "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT countrylanguage.language FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.name = None.\"aruba\" ORDER BY countrylanguage.percentage LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the languages spoken in a specific country, along with their percentage of speakers. It retrieves the language names from the 'countrylanguage' table by joining it with the 'country' table based on the country code. The query filters results to include only the languages spoken in a specified country, and it orders the results by the percentage of speakers, limiting the output to a specified number of results.",
            "question": "Which language is the most popular in Aruba?"
        },
        {
            "sample_id": 7752,
            "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
            "gold_complexity": 10,
            "vt": "SELECT countrylanguage.language FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.governmentform = None.\"republic\" GROUP BY countrylanguage.language HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the languages spoken in countries that have a republican form of government. It retrieves the language names from the 'countrylanguage' table, joining it with the 'country' table to filter based on the government form. The query groups the results by language and includes a condition to count the number of occurrences, using a placeholder for numeric values to specify the count.",
            "question": "What languages are only used by a single country with a republic government?"
        },
        {
            "sample_id": 7803,
            "gold_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
            "gold_complexity": 10,
            "vt": "SELECT SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.continent = None.\"north america\" AND country.surfacearea > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total population and average surface area of countries located in North America that have a surface area greater than a specified value. The placeholders represent the numeric value for the surface area filter.",
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?"
        },
        {
            "sample_id": 7743,
            "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE countrylanguage.language = None.\"chinese\"",
            "ba": "The virtual table counts the distinct continents from the 'country' table where the language spoken is Chinese. It joins the 'country' table with the 'countrylanguage' table to filter the results based on the specified language.",
            "question": "What is the number of distinct continents where Chinese is spoken?"
        },
        {
            "sample_id": 7749,
            "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT countrylanguage.language FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.continent = None.\"asia\" GROUP BY countrylanguage.language ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the languages spoken in countries located in the continent of Asia. It retrieves the language names from the 'countrylanguage' table, joining it with the 'country' table to filter by the continent. The results are grouped by language and ordered by the count of occurrences, with a limit on the number of results returned.",
            "question": "Which language is the most popular on the Asian continent?"
        },
        {
            "sample_id": 7759,
            "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
            "gold_complexity": 12,
            "vt": "SELECT SUM(country.population) FROM country WHERE NOT country.name IN (SELECT country.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "ba": "The virtual table calculates the total population of countries that do not have English as an official language. It does this by summing the population from the 'country' table, while excluding those countries that are identified in a subquery. The subquery joins the 'country' and 'countrylanguage' tables to find countries where English is listed as an official language.",
            "question": "What is the total number of people living in the nations that do not use English?"
        },
        {
            "sample_id": 7707,
            "gold_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
            "gold_complexity": 8,
            "vt": "SELECT country.population, country.lifeexpectancy FROM country WHERE country.name = None.\"brazil\"",
            "ba": "The virtual table describes the population and life expectancy of a specific country from the 'country' table. The placeholder in the WHERE clause represents the name of the country being queried.",
            "question": "What are the population and life expectancies in Brazil?"
        },
        {
            "sample_id": 7731,
            "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.name = None.\"afghanistan\" AND countrylanguage.isofficial = None.\"t\"",
            "ba": "The virtual table counts the number of official languages spoken in Afghanistan by joining the 'country' and 'countrylanguage' tables. It filters the results to include only those languages that are marked as official.",
            "question": "How many official languages does Afghanistan have?"
        },
        {
            "sample_id": 7732,
            "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.name = None.\"afghanistan\" AND countrylanguage.isofficial = None.\"t\"",
            "ba": "The virtual table counts the number of official languages spoken in Afghanistan by joining the 'country' and 'countrylanguage' tables. It filters the results to include only those languages that are marked as official.",
            "question": "How many official languages are spoken in Afghanistan?"
        },
        {
            "sample_id": 7710,
            "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
            "gold_complexity": 8,
            "vt": "SELECT country.population, country.region FROM country WHERE country.name = None.\"angola\"",
            "ba": "The virtual table describes the population and region of a specific country from the 'country' table. The placeholder in the WHERE clause represents the name of the country being queried.",
            "question": "What region does Angola belong to and what is its population?"
        },
        {
            "sample_id": 7744,
            "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE countrylanguage.language = None.\"chinese\"",
            "ba": "The virtual table counts the distinct continents from the 'country' table where the language spoken is Chinese. It joins the 'country' table with the 'countrylanguage' table to filter the results based on the specified language.",
            "question": "How many continents speak Chinese?"
        },
        {
            "sample_id": 7813,
            "gold_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
            "gold_complexity": 10,
            "vt": "SELECT countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage WHERE countrylanguage.language = None.\"spanish\" GROUP BY countrylanguage.countrycode",
            "ba": "The virtual table provides a summary of the country codes and the maximum percentage of the population that speaks Spanish in each country. It aggregates the data from the 'countrylanguage' table, filtering for the Spanish language and grouping the results by country code.",
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?"
        },
        {
            "sample_id": 7699,
            "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
            "gold_complexity": 6,
            "vt": "SELECT SUM(country.surfacearea) FROM country WHERE country.region = None.\"caribbean\"",
            "ba": "The virtual table calculates the total surface area of countries located in the Caribbean region by summing the 'surfacearea' column from the 'country' table. The placeholder in the WHERE clause represents the specific region being queried.",
            "question": "What is the total surface area of the countries in the Caribbean region?"
        },
        {
            "sample_id": 7720,
            "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
            "gold_complexity": 7,
            "vt": "SELECT SUM(country.surfacearea) FROM country WHERE country.continent = None.\"asia\" OR country.continent = None.\"europe\"",
            "ba": "The virtual table calculates the total surface area of countries located in either Asia or Europe by summing the 'surfacearea' column from the 'country' table. The query uses placeholders to specify the continents of interest.",
            "question": "Give the total surface area covered by countries in Asia or Europe."
        },
        {
            "sample_id": 7697,
            "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM country WHERE country.governmentform = None.\"republic\"",
            "ba": "The virtual table counts the number of countries from the 'country' table that have a specific type of government, which is a republic. The placeholder in the WHERE clause represents the government form being queried.",
            "question": "How many countries have a republic as their form of government?"
        },
        {
            "sample_id": 7746,
            "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT country.region FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE countrylanguage.language = None.\"english\" OR countrylanguage.language = None.\"dutch\"",
            "ba": "The virtual table retrieves distinct regions from the 'country' table where the countries have English or Dutch as one of their spoken languages. It uses a join with the 'countrylanguage' table to filter based on the specified languages.",
            "question": "Which regions speak Dutch or English?"
        },
        {
            "sample_id": 7727,
            "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE country.continent = None.\"africa\"",
            "ba": "The virtual table counts the distinct types of government forms present in countries located in Africa. The placeholder in the WHERE clause represents the continent's name, which is set to 'Africa'.",
            "question": "How many type of governments are in Africa?"
        },
        {
            "sample_id": 7810,
            "gold_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "gold_complexity": 10,
            "vt": "SELECT countrylanguage.language, countrylanguage.countrycode, MAX(countrylanguage.percentage) FROM countrylanguage GROUP BY countrylanguage.countrycode",
            "ba": "The virtual table provides a summary of the languages spoken in each country along with the country code and the highest percentage of speakers for those languages. It aggregates the data from the 'countrylanguage' table, grouping by the country code to find the maximum percentage of speakers for each language in that country.",
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?"
        },
        {
            "sample_id": 7750,
            "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT countrylanguage.language FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.continent = None.\"asia\" GROUP BY countrylanguage.language ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the languages spoken in countries located in the continent of Asia. It retrieves the language names from the 'countrylanguage' table, joining it with the 'country' table to filter for countries in Asia. The results are grouped by language and ordered by the count of occurrences, with a limit on the number of results returned.",
            "question": "What is the language that is used by the largest number of Asian nations?"
        },
        {
            "sample_id": 7798,
            "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT country.name FROM country ORDER BY country.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of countries from the 'country' table, ordered by their population in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of country names to retrieve.",
            "question": "Return the names of the 3 countries with the fewest people."
        },
        {
            "sample_id": 7700,
            "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
            "gold_complexity": 6,
            "vt": "SELECT SUM(country.surfacearea) FROM country WHERE country.region = None.\"caribbean\"",
            "ba": "The virtual table calculates the total surface area of countries located in the Caribbean region by summing the 'surfacearea' column from the 'country' table. The placeholder in the WHERE clause represents the specific region being queried.",
            "question": "How much surface area do the countires in the Carribean cover together?"
        },
        {
            "sample_id": 7728,
            "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE country.continent = None.\"africa\"",
            "ba": "The virtual table counts the distinct types of government forms present in countries located in Africa. The placeholder in the WHERE clause represents the continent's name.",
            "question": "How many different forms of governments are there in Africa?"
        },
        {
            "sample_id": 7778,
            "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
            "gold_complexity": 16,
            "vt": "SELECT DISTINCT city.name FROM country JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE country.continent = '[placeholder-type:string]' AND NOT country.name IN (SELECT country.name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "ba": "The virtual table lists the distinct names of cities from the 'city' table that are located in countries on a specified continent. It filters out countries where English is an official language, ensuring that only cities from countries where English is not an official language are included.",
            "question": "What are the names of cities in Europe for which English is not the official language?"
        },
        {
            "sample_id": 7802,
            "gold_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
            "gold_complexity": 7,
            "vt": "SELECT country.name FROM country WHERE country.continent = None.\"europe\" AND country.population = None.\"80000\"",
            "ba": "The virtual table describes the names of countries from the 'country' table that are located in a specific continent and have a certain population. The placeholders in the WHERE clause represent the continent and population values.",
            "question": "Give the names of countries that are in Europe and have a population equal to 80000."
        },
        {
            "sample_id": 7792,
            "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
            "gold_complexity": 12,
            "vt": "SELECT SUM(country.population), AVG(country.lifeexpectancy), country.continent FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total population and average life expectancy of countries grouped by continent. It filters the results to only include continents where the average life expectancy is below a specified numeric threshold.",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?"
        },
        {
            "sample_id": 7805,
            "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "gold_complexity": 6,
            "vt": "SELECT city.name FROM city WHERE city.population BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of cities from the 'city' table that have a population within a specified range. The placeholders in the BETWEEN clause represent the lower and upper limits of the population range.",
            "question": "What are the cities whose population is between 160000 and 900000?"
        },
        {
            "sample_id": 7725,
            "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage",
            "ba": "The virtual table provides the count of distinct languages spoken across different countries from the 'countrylanguage' table. The query uses the COUNT function to aggregate the unique languages, ensuring that each language is only counted once regardless of how many countries it is spoken in.",
            "question": "How many unique languages are spoken in the world?"
        },
        {
            "sample_id": 7735,
            "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT country.continent FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY country.continent ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the continents from the 'country' table, joining it with the 'countrylanguage' table to count the number of languages spoken in each continent. The results are grouped by continent and ordered by the count of languages, limiting the output to a specified number of continents.",
            "question": "Which continent has the most diverse languages?"
        },
        {
            "sample_id": 7702,
            "gold_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
            "gold_complexity": 6,
            "vt": "SELECT country.continent FROM country WHERE country.name = None.\"anguilla\"",
            "ba": "The virtual table describes the continent of a specific country from the 'country' table. The placeholder in the WHERE clause represents the name of the country for which we want to find the continent.",
            "question": "What is the continent name which Anguilla belongs to?"
        },
        {
            "sample_id": 7808,
            "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT countrylanguage.language FROM countrylanguage GROUP BY countrylanguage.language ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct languages spoken in various countries, grouped by language and ordered by the number of countries that speak each language. The placeholder in the LIMIT clause allows the user to specify the maximum number of languages to retrieve.",
            "question": "Give the language that is spoken in the most countries."
        },
        {
            "sample_id": 7772,
            "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
            "gold_complexity": 7,
            "vt": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "ba": "The virtual table identifies the country codes of countries that have languages spoken other than English. It does this by selecting all country codes from the 'countrylanguage' table and excluding those that have English as a language.",
            "question": "Return the country codes for countries that do not speak English."
        },
        {
            "sample_id": 7780,
            "gold_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT city.name FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE countrylanguage.isofficial = '[placeholder-type:string]' AND countrylanguage.language = '[placeholder-type:string]' AND country.continent = None.\"asia\"",
            "ba": "The virtual table lists the distinct names of cities from the 'city' table that are located in countries where a specific language is spoken officially. The query joins the 'country' table to filter by continent and the 'countrylanguage' table to check for official languages, using placeholders for the official language status and the language name.",
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language."
        },
        {
            "sample_id": 7766,
            "gold_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
            "gold_complexity": 11,
            "vt": "SELECT country.name FROM country WHERE country.surfacearea > (SELECT MIN(country.surfacearea) FROM country WHERE Continent = \"Europe\")",
            "ba": "The virtual table lists the names of countries from the 'country' table that have a surface area greater than the minimum surface area of countries located in Europe. The query uses a subquery to find the minimum surface area in Europe, and the placeholder represents this value.",
            "question": "Which countries have greater area than that of any country in Europe?"
        },
        {
            "sample_id": 7747,
            "gold_sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
            "gold_complexity": 10,
            "vt": "SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"english\" AND isofficial = \"t\" UNION SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = \"dutch\" AND isofficial = \"t\"",
            "ba": "The virtual table lists the names of countries where English or Dutch is an official language. It combines results from two queries using a UNION operation, ensuring that only countries with the specified languages marked as official are included.",
            "question": "What are the countries where either English or Dutch is the official language ?"
        },
        {
            "sample_id": 7737,
            "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(*) FROM (SELECT country.name FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE countrylanguage.language = None.\"english\" INTERSECT SELECT country.name FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE countrylanguage.language = None.\"dutch\")",
            "ba": "The virtual table counts the number of countries that have both English and Dutch as spoken languages. It does this by performing an intersection of two subqueries that select country names from the 'country' table joined with the 'countrylanguage' table, filtering for each language respectively.",
            "question": "How many countries speak both English and Dutch?"
        },
        {
            "sample_id": 7784,
            "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT country.name, country.population, country.headofstate FROM country ORDER BY country.surfacearea LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries along with their populations and heads of state, sorted by the surface area of each country. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to retrieve.",
            "question": "Give the name, population, and head of state for the country that has the largest area."
        },
        {
            "sample_id": 7748,
            "gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
            "gold_complexity": 10,
            "vt": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
            "ba": "The virtual table provides a comprehensive view of countries that have English or Dutch as their official languages. It combines data from the 'country' and 'countrylanguage' tables, filtering for countries where the specified languages are officially recognized.",
            "question": "Which countries have either English or Dutch as an official language?"
        },
        {
            "sample_id": 7782,
            "gold_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT country.name, country.surfacearea, country.indepyear FROM country ORDER BY country.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries along with their surface area and the year they gained independence. The results are ordered by the population of the countries, and the number of results returned is limited by a placeholder for numeric values.",
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population."
        },
        {
            "sample_id": 7755,
            "gold_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = None.\"asia\" ORDER BY country.surfacearea LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries along with their populations and life expectancies from the 'country' table, specifically for countries located in the continent of Asia. The results are ordered by the surface area of the countries, and a limit is applied to the number of results returned.",
            "question": "Find the name, population and expected life length of asian country with the largest area?"
        },
        {
            "sample_id": 7704,
            "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
            "gold_complexity": 7,
            "vt": "SELECT country.region FROM country JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE city.name = None.\"kabul\"",
            "ba": "The virtual table retrieves the region of a country by joining the 'country' and 'city' tables. It filters the results based on the name of the city, specifically looking for the city named 'Kabul'.",
            "question": "What region is Kabul in?"
        },
        {
            "sample_id": 7742,
            "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
            "gold_complexity": 10,
            "vt": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "ba": "The virtual table lists the names of countries that have both English and French as official languages. It does this by joining the 'country' table with the 'countrylanguage' table based on the country code, filtering for countries where English is an official language and where French is also an official language.",
            "question": "Give the names of countries with English and French as official languages."
        },
        {
            "sample_id": 7769,
            "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
            "gold_complexity": 12,
            "vt": "SELECT country.name FROM country WHERE country.continent = None.\"asia\" AND country.population > (SELECT MAX(country.population) FROM country WHERE Continent = \"Africa\")",
            "ba": "The virtual table lists the names of countries from the 'country' table that are located in Asia and have a population greater than the maximum population of any country in Africa. The placeholders represent the continent and population criteria.",
            "question": "Which Asian countries have a population that is larger than any country in Africa?"
        },
        {
            "sample_id": 7715,
            "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
            "gold_complexity": 8,
            "vt": "SELECT SUM(country.population), MAX(country.gnp) FROM country WHERE country.continent = None.\"asia\"",
            "ba": "The virtual table summarizes the total population and the maximum Gross National Product (GNP) of countries located in a specific continent. The placeholders in the query allow for the specification of the continent of interest.",
            "question": "What is the total population and maximum GNP in Asia?"
        },
        {
            "sample_id": 7791,
            "gold_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
            "gold_complexity": 12,
            "vt": "SELECT SUM(country.population), AVG(country.lifeexpectancy), country.continent FROM country GROUP BY country.continent HAVING AVG(country.lifeexpectancy) < [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total population and average life expectancy of countries grouped by continent. It filters the results to only include continents where the average life expectancy is below a specified numeric threshold.",
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?"
        },
        {
            "sample_id": 7797,
            "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT country.name FROM country ORDER BY country.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of countries from the 'country' table, ordered by their population in ascending order. The placeholder in the LIMIT clause allows the user to specify how many country names they want to retrieve.",
            "question": "What are the names of the nations with the 3 lowest populations?"
        },
        {
            "sample_id": 7774,
            "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language <> None.\"english\"",
            "ba": "The virtual table retrieves distinct country codes from the 'countrylanguage' table where the language is not English. This allows us to identify countries that have languages other than English spoken within their population.",
            "question": "Give the country codes for countries in which people speak langauges that are not English."
        },
        {
            "sample_id": 7779,
            "gold_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT city.name FROM country JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN city AS t3 ON t1.code = t3.countrycode WHERE countrylanguage.isofficial = '[placeholder-type:string]' AND countrylanguage.language = '[placeholder-type:string]' AND country.continent = None.\"asia\"",
            "ba": "The virtual table lists the distinct names of cities from the 'city' table that are located in countries where a specific language is spoken officially. The query joins the 'country' table to filter by continent and the 'countrylanguage' table to check for official languages, using placeholders for the language and its official status.",
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?"
        },
        {
            "sample_id": 7789,
            "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
            "gold_complexity": 10,
            "vt": "SELECT SUM(country.population), country.governmentform FROM country GROUP BY country.governmentform HAVING AVG(country.lifeexpectancy) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total population of countries grouped by their government form, filtering for those with an average life expectancy above a specified threshold. The placeholder in the HAVING clause represents the minimum average life expectancy required.",
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72."
        },
        {
            "sample_id": 7794,
            "gold_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "gold_complexity": 9,
            "vt": "SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries along with their surface areas, sorted in ascending order of surface area. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to retrieve.",
            "question": "Return the names and surface areas of the 5 largest countries."
        },
        {
            "sample_id": 7716,
            "gold_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
            "gold_complexity": 8,
            "vt": "SELECT SUM(country.population), MAX(country.gnp) FROM country WHERE country.continent = None.\"asia\"",
            "ba": "The virtual table summarizes the total population and the maximum Gross National Product (GNP) of countries located in a specific continent. The placeholder in the WHERE clause represents the continent's name.",
            "question": "How many people live in Asia, and what is the largest GNP among them?"
        },
        {
            "sample_id": 7729,
            "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(countrylanguage.language) FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.name = None.\"aruba\"",
            "ba": "The virtual table counts the number of languages spoken in a specific country by joining the 'country' and 'countrylanguage' tables. It filters the results based on the name of the country, which is represented by a placeholder.",
            "question": "What is the total number of languages used in Aruba?"
        },
        {
            "sample_id": 7768,
            "gold_sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
            "gold_complexity": 12,
            "vt": "SELECT country.name FROM country WHERE country.continent = None.\"africa\" AND country.population < (SELECT MIN(country.population) FROM country WHERE Continent = \"Asia\")",
            "ba": "The virtual table lists the names of countries from the 'country' table that are located in Africa and have a population smaller than the smallest population of any country in Asia. The placeholders in the WHERE clause represent the continent and population criteria.",
            "question": "Which African countries have a smaller population than that of any country in Asia?"
        },
        {
            "sample_id": 7722,
            "gold_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
            "gold_complexity": 6,
            "vt": "SELECT SUM(city.population) FROM city WHERE city.district = None.\"gelderland\"",
            "ba": "The virtual table calculates the total population of cities located in a specific district. The placeholder in the WHERE clause represents the name of the district being queried.",
            "question": "What is the total population of Gelderland district?"
        },
        {
            "sample_id": 7790,
            "gold_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
            "gold_complexity": 10,
            "vt": "SELECT SUM(country.population), country.governmentform FROM country GROUP BY country.governmentform HAVING AVG(country.lifeexpectancy) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total population of countries grouped by their government form, filtering for those with an average life expectancy above a specified numeric value. The placeholder in the HAVING clause represents the threshold for average life expectancy.",
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?"
        },
        {
            "sample_id": 7703,
            "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
            "gold_complexity": 7,
            "vt": "SELECT country.region FROM country JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE city.name = None.\"kabul\"",
            "ba": "The virtual table retrieves the region of a country by joining the 'country' and 'city' tables. It filters the results based on the name of the city, specifically looking for the city named 'Kabul'.",
            "question": "Which region is the city Kabul located in?"
        },
        {
            "sample_id": 7754,
            "gold_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT city.name, city.population FROM city JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE countrylanguage.language = None.\"english\" ORDER BY city.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and populations of cities from the 'city' table that have English as one of their spoken languages. The query joins the 'city' table with the 'countrylanguage' table to filter cities based on the specified language. The result is ordered by population, and a limit is applied to restrict the number of returned records.",
            "question": "What is the most populace city that speaks English?"
        },
        {
            "sample_id": 7726,
            "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage",
            "ba": "The virtual table provides the count of distinct languages spoken across different countries from the 'countrylanguage' table. The query uses the COUNT function to aggregate the unique languages, ensuring that each language is only counted once regardless of how many countries it is spoken in.",
            "question": "What is the number of distinct languages used around the world?"
        },
        {
            "sample_id": 7709,
            "gold_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
            "gold_complexity": 8,
            "vt": "SELECT country.population, country.region FROM country WHERE country.name = None.\"angola\"",
            "ba": "The virtual table provides the population and region of a specific country from the 'country' table. The placeholder in the WHERE clause represents the name of the country being queried.",
            "question": "What are the region and population of Angola?"
        },
        {
            "sample_id": 7695,
            "gold_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
            "gold_complexity": 6,
            "vt": "SELECT country.name FROM country WHERE country.indepyear > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of countries from the 'country' table that gained independence after a specific year. The placeholder in the WHERE clause represents the year of independence.",
            "question": "What are the names of all the countries that became independent after 1950?"
        },
        {
            "sample_id": 7761,
            "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
            "gold_complexity": 8,
            "vt": "SELECT countrylanguage.language FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.headofstate = None.\"beatrix\" AND countrylanguage.isofficial = None.\"t\"",
            "ba": "The virtual table describes the languages spoken in countries where the head of state is a specific individual and the language is recognized as an official language. It retrieves the language names from the 'countrylanguage' table, joining it with the 'country' table to filter based on the head of state and the official status of the language.",
            "question": "What is the official language spoken in the country whose head of state is Beatrix?"
        },
        {
            "sample_id": 7717,
            "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(country.lifeexpectancy) FROM country WHERE country.continent = None.\"africa\" AND country.governmentform = None.\"republic\"",
            "ba": "The virtual table calculates the average life expectancy of countries located in Africa that have a republican form of government. The placeholders in the WHERE clause represent the continent and government form criteria.",
            "question": "What is the average life expectancy in African countries that are republics?"
        },
        {
            "sample_id": 7783,
            "gold_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT country.name, country.population, country.headofstate FROM country ORDER BY country.surfacearea LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries along with their population and the name of their head of state, sorted by the surface area of the countries. The placeholder in the LIMIT clause allows the user to specify how many records they want to retrieve.",
            "question": "What are the population, name and leader of the country with the largest area?"
        },
        {
            "sample_id": 7788,
            "gold_sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(*), city.district FROM city WHERE city.population > (SELECT AVG(city.population) FROM city) GROUP BY city.district",
            "ba": "The virtual table provides a count of cities grouped by their districts, specifically for those cities that have a population greater than the average population of all cities. The query uses a subquery to calculate the average population and filters the results accordingly.",
            "question": "How many cities in each district have a population that is above the average population across all cities?"
        },
        {
            "sample_id": 7706,
            "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT countrylanguage.language FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.name = None.\"aruba\" ORDER BY countrylanguage.percentage LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the languages spoken in a specific country, along with their respective percentages of speakers. It joins the 'country' table with the 'countrylanguage' table to filter languages based on the country's name. The result is ordered by the percentage of speakers, and a limit is applied to restrict the number of results returned.",
            "question": "What language is predominantly spoken in Aruba?"
        },
        {
            "sample_id": 7751,
            "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
            "gold_complexity": 10,
            "vt": "SELECT countrylanguage.language FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE country.governmentform = None.\"republic\" GROUP BY countrylanguage.language HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the languages spoken in countries that have a republican form of government. It joins the 'country' table with the 'countrylanguage' table based on the country code, filtering for countries where the government form is 'republic'. The results are grouped by language, and only those languages spoken in a specified number of countries are included, as indicated by the numeric placeholder.",
            "question": "Which languages are spoken by only one country in republic governments?"
        },
        {
            "sample_id": 7799,
            "gold_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM country WHERE country.continent = None.\"asia\"",
            "ba": "The virtual table counts the number of countries from the 'country' table that are located in a specific continent. The placeholder in the WHERE clause represents the continent's name, which in this case is 'Asia'.",
            "question": "how many countries are in Asia?"
        },
        {
            "sample_id": 7712,
            "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
            "gold_complexity": 6,
            "vt": "SELECT AVG(country.lifeexpectancy) FROM country WHERE country.region = None.\"central africa\"",
            "ba": "The virtual table calculates the average life expectancy of countries located in the 'central africa' region from the 'country' table. The placeholder in the WHERE clause represents the specific region of interest.",
            "question": "How long is the people\u2019s average life expectancy in Central Africa?"
        },
        {
            "sample_id": 7785,
            "gold_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(countrylanguage.language), country.name FROM country JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY country.name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of languages spoken in each country from the 'country' and 'countrylanguage' tables. It groups the results by country name and filters to show only those countries where the number of languages exceeds a specified threshold.",
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages."
        }
    ],
    "sakila_1": [
        {
            "sample_id": 2925,
            "gold_sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
            "gold_complexity": 8,
            "vt": "SELECT address.phone, address.postal_code FROM address WHERE address.address = '[placeholder-type:string]'",
            "ba": "The virtual table describes the phone number and postal code of an address from the 'address' table that matches a specific primary address line. The placeholder in the WHERE clause represents the primary address line being queried.",
            "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?"
        },
        {
            "sample_id": 2943,
            "gold_sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT film.title, film.film_id, film.description FROM film_actor JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY film.film_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a list of film titles, their unique identifiers, and descriptions from the 'film' table. It aggregates data from the 'film_actor' table to count the number of actors associated with each film, grouping the results by film ID. The results are ordered by the count of actors, allowing users to see which films have the most actors associated with them. The placeholder in the LIMIT clause allows users to specify how many results they want to retrieve.",
            "question": "Which film has the most number of actors or actresses? List the film name, film id and description."
        },
        {
            "sample_id": 2968,
            "gold_sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
            "gold_complexity": 7,
            "vt": "SELECT address.address FROM store JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store.store_id = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the primary address of a specific store from the 'store' and 'address' tables. The placeholder in the WHERE clause represents the unique identifier of the store.",
            "question": "Return the address of store 1."
        },
        {
            "sample_id": 2992,
            "gold_sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT customer.store_id FROM customer GROUP BY customer.store_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique store identifiers from the 'customer' table, grouping the results by store ID. It orders the stores based on the number of customers associated with each store and limits the output to a specified number of stores.",
            "question": "Return the id of the store with the most customers."
        },
        {
            "sample_id": 2946,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT actor.first_name, actor.last_name, actor.actor_id FROM film_actor JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY actor.actor_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents the first names, last names, and unique identifiers of actors from the 'actor' table who are associated with films. It aggregates the data by counting the number of films each actor has appeared in, allowing for a ranking of actors based on their film appearances. The results are ordered by the count of films in descending order, and a placeholder is used to limit the number of results returned.",
            "question": "Return the full name and id of the actor or actress who starred in the greatest number of films."
        },
        {
            "sample_id": 2977,
            "gold_sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
            "gold_complexity": 6,
            "vt": "SELECT film.title FROM film WHERE film.special_features LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the titles of films from the 'film' table that have specific special features. The placeholder in the WHERE clause represents the special features being searched for.",
            "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?"
        },
        {
            "sample_id": 2985,
            "gold_sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
            "gold_complexity": 10,
            "vt": "SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200",
            "ba": "The virtual table lists the titles of films from the 'film' table that either have a length greater than 100 minutes or are rated 'PG', excluding those films that have a replacement cost greater than 200.",
            "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles."
        },
        {
            "sample_id": 2959,
            "gold_sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT film.title, film.film_id FROM film JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY film.film_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a list of film titles along with their unique identifiers from the 'film' table. It joins the 'film' table with the 'inventory' table to count the number of inventory items associated with each film. The results are grouped by the film's unique identifier and ordered by the count of inventory items, allowing users to see which films have the most inventory items available. The placeholder in the LIMIT clause represents the maximum number of results to return.",
            "question": "Which film has the most copies in the inventory? List both title and id."
        },
        {
            "sample_id": 2962,
            "gold_sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT film.title, inventory.inventory_id FROM film JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY inventory.inventory_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of film titles along with their corresponding inventory IDs. It retrieves data from the 'film' and 'inventory' tables, linking them through the film ID. Additionally, it joins the 'rental' table to count how many times each inventory item has been rented. The results are grouped by inventory ID and ordered by the count of rentals, limiting the output to a specified number of records.",
            "question": "Return the title and inventory id of the film that is rented most often."
        },
        {
            "sample_id": 2927,
            "gold_sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT city.city, COUNT(*), address.city_id FROM address JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY address.city_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of addresses associated with each city from the 'address' and 'city' tables. It counts the total addresses per city and groups the results by city identifier, allowing for an ordered list of cities based on the number of addresses. The placeholder in the LIMIT clause represents the maximum number of cities to display.",
            "question": "Which city has the most addresses? List the city name, number of addresses, and city id."
        },
        {
            "sample_id": 2924,
            "gold_sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT address.district FROM address GROUP BY address.district HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the districts from the 'address' table that have a count of addresses greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of addresses required for a district to be included in the results.",
            "question": "Give the districts which have two or more addresses."
        },
        {
            "sample_id": 2945,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT actor.first_name, actor.last_name, actor.actor_id FROM film_actor JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY actor.actor_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of actors along with their unique identifiers, showing the first and last names of actors who have appeared in films. The results are grouped by actor ID to ensure each actor is listed only once, and they are ordered by the number of films they have acted in, with a limit on the number of results returned.",
            "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id."
        },
        {
            "sample_id": 2997,
            "gold_sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
            "gold_complexity": 12,
            "vt": "SELECT customer.first_name FROM customer WHERE NOT customer.customer_id IN (SELECT customer.customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01')",
            "ba": "The virtual table lists the first names of customers from the 'customer' table who have not made any rentals after a specific date. The query uses a subquery to filter out customers who have rental records with a rental date greater than the specified date.",
            "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?"
        },
        {
            "sample_id": 2929,
            "gold_sql": "SELECT count(*) FROM address WHERE district  =  'California'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM address WHERE address.district = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of addresses in a specific district from the 'address' table. The placeholder in the WHERE clause represents the district name.",
            "question": "How many addresses are in the district of California?"
        },
        {
            "sample_id": 2971,
            "gold_sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
            "gold_complexity": 7,
            "vt": "SELECT language.name FROM film JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE film.title = '[placeholder-type:string]'",
            "ba": "The virtual table displays the names of languages associated with films from the 'film' table based on a specific film title. The placeholder in the WHERE clause represents the title of the film being queried.",
            "question": "Which language does the film AIRPORT POLLOCK use? List the language name."
        },
        {
            "sample_id": 2955,
            "gold_sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
            "gold_complexity": 8,
            "vt": "SELECT category.name FROM category JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE film.title = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of categories from the 'category' table that are associated with films in the 'film' table. It uses a join with the 'film_category' table to link categories to their respective films. The placeholder in the WHERE clause represents the title of the film for which the categories are being queried.",
            "question": "What is the genre name of the film HUNGER ROOF?"
        },
        {
            "sample_id": 2993,
            "gold_sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT payment.amount FROM payment ORDER BY payment.amount LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the payment amounts from the 'payment' table, sorted in ascending order. The placeholder in the LIMIT clause allows the user to specify the number of payment records to retrieve.",
            "question": "What is the largest payment amount?"
        },
        {
            "sample_id": 2998,
            "gold_sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
            "gold_complexity": 12,
            "vt": "SELECT customer.first_name FROM customer WHERE NOT customer.customer_id IN (SELECT customer.customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01')",
            "ba": "The virtual table lists the first names of customers from the 'customer' table who have not made any rentals after a specific date. The query uses a subquery to filter out customers who have rented items after the given date.",
            "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'."
        },
        {
            "sample_id": 2969,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT staff.first_name, staff.last_name, staff.staff_id FROM staff JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY staff.staff_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents the first and last names of staff members along with their unique identifiers from the 'staff' table. It joins the 'staff' table with the 'payment' table to aggregate payment records associated with each staff member. The results are grouped by staff ID to count the number of payments processed by each staff member, and the output is ordered by this count. A placeholder is included to limit the number of results returned based on a specified numeric value.",
            "question": "Which staff handled least number of payments? List the full name and the id."
        },
        {
            "sample_id": 2970,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT staff.first_name, staff.last_name, staff.staff_id FROM staff JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY staff.staff_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of staff members along with their first names, last names, and unique identifiers. It aggregates the payment records associated with each staff member, grouping the results by staff ID and ordering them based on the number of payments processed. The placeholder in the LIMIT clause allows for specifying the maximum number of staff members to be returned.",
            "question": "Give the full name and staff id of the staff who has handled the fewest payments."
        },
        {
            "sample_id": 2932,
            "gold_sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
            "gold_complexity": 14,
            "vt": "SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING COUNT(*) < 3",
            "ba": "The virtual table provides a list of film titles and their identifiers from the 'film' table that have a rental rate of 0.99. Additionally, it intersects this list with another selection that retrieves titles and identifiers of films that are available in the inventory but have less than three copies available. This allows users to find films that are both affordably priced for rental and have limited availability in the inventory.",
            "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?"
        },
        {
            "sample_id": 2952,
            "gold_sql": "SELECT sum(amount) FROM payment",
            "gold_complexity": 4,
            "vt": "SELECT SUM(payment.amount) FROM payment",
            "ba": "The virtual table calculates the total amount of payments made by customers from the 'payment' table. It aggregates the 'amount' column to provide a sum of all payment transactions.",
            "question": "Return the sum of all payment amounts."
        },
        {
            "sample_id": 2951,
            "gold_sql": "SELECT sum(amount) FROM payment",
            "gold_complexity": 4,
            "vt": "SELECT SUM(payment.amount) FROM payment",
            "ba": "The virtual table calculates the total amount of payments made by customers from the 'payment' table. It uses the SUM function to aggregate the 'amount' column, which represents the monetary value of each payment.",
            "question": "What is the total amount of all payments?"
        },
        {
            "sample_id": 2979,
            "gold_sql": "SELECT count(*) FROM inventory WHERE store_id  =  1",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM inventory WHERE inventory.store_id = [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of inventory items available in a specific store. The placeholder in the WHERE clause represents the unique identifier for the store.",
            "question": "How many items in inventory does store 1 have?"
        },
        {
            "sample_id": 2963,
            "gold_sql": "SELECT count(DISTINCT language_id) FROM film",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT language_id) FROM film",
            "ba": "The virtual table counts the distinct languages used in the films from the 'film' table. The placeholder in the COUNT function represents the unique language identifiers associated with the films.",
            "question": "How many languages are in these films?"
        },
        {
            "sample_id": 2926,
            "gold_sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
            "gold_complexity": 8,
            "vt": "SELECT address.phone, address.postal_code FROM address WHERE address.address = '[placeholder-type:string]'",
            "ba": "The virtual table describes the phone number and postal code of an address from the 'address' table that matches a specific primary address line. The placeholder in the WHERE clause represents the primary address line being queried.",
            "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'."
        },
        {
            "sample_id": 2917,
            "gold_sql": "SELECT count(DISTINCT last_name) FROM actor",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT last_name) FROM actor",
            "ba": "The virtual table counts the distinct last names of actors from the 'actor' table. This provides insight into the diversity of last names among the actors.",
            "question": "How many different last names do the actors and actresses have?"
        },
        {
            "sample_id": 2987,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customer.first_name, customer.last_name FROM customer JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY rental.rental_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers who have made rentals, sorted by the date of rental. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What is the first name and the last name of the customer who made the earliest rental?"
        },
        {
            "sample_id": 2947,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
            "gold_complexity": 11,
            "vt": "SELECT actor.first_name, actor.last_name FROM film_actor JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY actor.actor_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of actors from the 'actor' table who have appeared in more than a specified number of films. The query uses a JOIN operation to connect the 'film_actor' table with the 'actor' table based on the actor's identifier. It groups the results by actor and filters them to include only those actors who have been in a number of films greater than a specified threshold.",
            "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name."
        },
        {
            "sample_id": 2978,
            "gold_sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
            "gold_complexity": 6,
            "vt": "SELECT film.title FROM film WHERE film.special_features LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the titles of films from the 'film' table that have specific special features. The placeholder in the WHERE clause represents the special features being searched for.",
            "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section."
        },
        {
            "sample_id": 2922,
            "gold_sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT actor.first_name, actor.last_name FROM actor GROUP BY actor.first_name, actor.last_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of actors from the 'actor' table, grouped by their names. The results are ordered by the count of occurrences of each name, and a limit is applied to restrict the number of results returned.",
            "question": "Return the most common full name among all actors."
        },
        {
            "sample_id": 2918,
            "gold_sql": "SELECT count(DISTINCT last_name) FROM actor",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT last_name) FROM actor",
            "ba": "The virtual table counts the number of unique last names from the 'actor' table.",
            "question": "Count the number of different last names actors have."
        },
        {
            "sample_id": 2954,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT customer.first_name, customer.last_name, customer.customer_id FROM customer JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer.customer_id ORDER BY SUM(payment.amount) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents the first and last names of customers along with their unique identifiers from the 'customer' table. It joins the 'customer' table with the 'payment' table to aggregate payment amounts for each customer. The results are grouped by customer ID and ordered by the total payment amount in descending order, allowing for a limit on the number of records returned based on a specified numeric placeholder.",
            "question": "What is the full name and id of the customer who has the lowest total amount of payment?"
        },
        {
            "sample_id": 2956,
            "gold_sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
            "gold_complexity": 8,
            "vt": "SELECT category.name FROM category JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE film.title = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of categories from the 'category' table that are associated with films in the 'film' table. It uses a join with the 'film_category' table to link categories to their respective films. The placeholder in the WHERE clause represents the title of the film for which the categories are being queried.",
            "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs."
        },
        {
            "sample_id": 2944,
            "gold_sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT film.title, film.film_id, film.description FROM film_actor JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY film.film_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of film titles, their unique identifiers, and descriptions from the 'film' table. It aggregates data from the 'film_actor' table to count the number of actors associated with each film, grouping the results by film ID. The results are ordered by the count of actors, allowing users to see which films have the most actors associated with them. The placeholder in the LIMIT clause allows users to specify how many results they want to retrieve.",
            "question": "What are the title, id, and description of the movie with the greatest number of actors?"
        },
        {
            "sample_id": 2950,
            "gold_sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT inventory.store_id FROM inventory GROUP BY inventory.store_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique store identifiers from the 'inventory' table, grouped by store. It orders the results based on the count of inventory items associated with each store and limits the output to a specified number of stores.",
            "question": "What is the id of the store that has the most items in inventory?"
        },
        {
            "sample_id": 2967,
            "gold_sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
            "gold_complexity": 7,
            "vt": "SELECT address.address FROM store JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store.store_id = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the primary address of a specific store from the 'store' and 'address' tables. The placeholder in the WHERE clause represents the unique identifier of the store.",
            "question": "Where is store 1 located?"
        },
        {
            "sample_id": 2933,
            "gold_sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM city JOIN country AS T2 ON T1.country_id = T2.country_id WHERE country.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of cities associated with a specific country from the 'city' and 'country' tables. The placeholder in the WHERE clause represents the name of the country for which the city count is being requested.",
            "question": "How many cities are in Australia?"
        },
        {
            "sample_id": 2980,
            "gold_sql": "SELECT count(*) FROM inventory WHERE store_id  =  1",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM inventory WHERE inventory.store_id = [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of all inventory items available in a specific store. The placeholder in the WHERE clause represents the unique identifier for the store.",
            "question": "Count the number of items store 1 has in stock."
        },
        {
            "sample_id": 2938,
            "gold_sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
            "gold_complexity": 10,
            "vt": "SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa'",
            "ba": "The virtual table provides a list of payment dates from the 'payment' table where the payment amount exceeds a specified value. Additionally, it includes payment dates for transactions processed by a staff member with a specific first name, using a join between the 'payment' and 'staff' tables.",
            "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?"
        },
        {
            "sample_id": 2990,
            "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT staff.first_name, staff.last_name FROM staff JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE customer.first_name = '[placeholder-type:string]' AND customer.last_name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the distinct first and last names of staff members who have processed rentals for customers with specific first and last names. It joins the 'staff' table with the 'rental' table to link staff to their rental transactions, and then further joins the 'customer' table to filter based on the customer's name.",
            "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental."
        },
        {
            "sample_id": 2982,
            "gold_sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT payment.payment_date FROM payment ORDER BY payment.payment_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the payment dates from the 'payment' table, ordered chronologically. The placeholder in the LIMIT clause allows the user to specify the maximum number of payment dates to retrieve.",
            "question": "What was the date of the earliest payment?"
        },
        {
            "sample_id": 2920,
            "gold_sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT actor.first_name FROM actor GROUP BY actor.first_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the first names of actors from the 'actor' table, grouped by their first names. It orders the results based on the count of occurrences of each first name and limits the output to a specified number of results.",
            "question": "Return the most common first name among all actors."
        },
        {
            "sample_id": 2991,
            "gold_sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT customer.store_id FROM customer GROUP BY customer.store_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique store identifiers from the 'customer' table, grouped by the store each customer is associated with. It orders the results based on the number of customers per store and limits the output to a specified number of stores.",
            "question": "Which store has most the customers?"
        },
        {
            "sample_id": 2957,
            "gold_sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
            "gold_complexity": 11,
            "vt": "SELECT category.name, film_category.category_id, COUNT(*) FROM film_category JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY film_category.category_id",
            "ba": "The virtual table provides a summary of the number of films associated with each category from the 'film_category' table. It joins the 'film_category' table with the 'category' table to retrieve the category names and counts the number of films in each category. The results are grouped by category ID to show the total count of films for each category.",
            "question": "How many films are there in each category? List the genre name, genre id and the count."
        },
        {
            "sample_id": 2928,
            "gold_sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT city.city, COUNT(*), address.city_id FROM address JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY address.city_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of addresses associated with each city from the 'address' and 'city' tables. It counts the total addresses per city and groups the results by city identifier, allowing for an ordered list of cities based on the number of addresses. The placeholder in the LIMIT clause represents the maximum number of cities to display.",
            "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?"
        },
        {
            "sample_id": 2975,
            "gold_sql": "SELECT count(DISTINCT rating) FROM film",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT rating) FROM film",
            "ba": "The virtual table counts the distinct ratings of films from the 'film' table. The placeholder in the COUNT function indicates that the query is interested in the unique values of the 'rating' column.",
            "question": "How many kinds of different ratings are listed?"
        },
        {
            "sample_id": 2941,
            "gold_sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT film.title, film.rental_rate FROM film ORDER BY film.rental_rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the titles and rental rates of films from the 'film' table, sorted by rental rate in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return.",
            "question": "Which film has the highest rental rate? And what is the rate?"
        },
        {
            "sample_id": 2935,
            "gold_sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
            "gold_complexity": 9,
            "vt": "SELECT country.country FROM city JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY country.country_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of countries from the 'country' table that are associated with cities in the 'city' table. It groups the results by country and filters to include only those countries that have a specified minimum number of associated cities, represented by a numeric placeholder.",
            "question": "Which countries have at least 3 cities?"
        }
    ],
    "roller_coaster": [
        {
            "sample_id": 6210,
            "gold_sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
            "gold_complexity": 9,
            "vt": "SELECT country.name, AVG(roller_coaster.speed) FROM country JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY country.name",
            "ba": "The virtual table provides the average speed of roller coasters grouped by the country they are located in. It combines data from the 'roller_coaster' table and the 'country' table, linking them through the country identifier. The result will show each country's name alongside the average speed of its roller coasters.",
            "question": "Show the names of countries and the average speed of roller coasters from each country."
        },
        {
            "sample_id": 6203,
            "gold_sql": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status",
            "gold_complexity": 8,
            "vt": "SELECT roller_coaster.status, COUNT(*) FROM roller_coaster GROUP BY roller_coaster.status",
            "ba": "The virtual table summarizes the operational status of roller coasters from the 'roller_coaster' table, providing a count of how many roller coasters fall under each status category. The query groups the results by the 'status' column, allowing users to see the distribution of roller coasters based on their current operational status.",
            "question": "Show the different statuses and the numbers of roller coasters for each status."
        },
        {
            "sample_id": 6207,
            "gold_sql": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID",
            "gold_complexity": 7,
            "vt": "SELECT roller_coaster.name, country.name FROM country JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID",
            "ba": "The virtual table describes the names of roller coasters along with the names of the countries where they are located. It combines data from the 'roller_coaster' and 'country' tables using a join on the country identifier.",
            "question": "Show the names of roller coasters and names of country they are in."
        },
        {
            "sample_id": 6197,
            "gold_sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
            "gold_complexity": 6,
            "vt": "SELECT roller_coaster.name FROM roller_coaster ORDER BY roller_coaster.length",
            "ba": "The virtual table lists the names of roller coasters from the 'roller_coaster' table, ordered by their track length in meters. This allows users to see which roller coasters are the longest at a glance.",
            "question": "List the names of roller coasters by ascending order of length."
        },
        {
            "sample_id": 6200,
            "gold_sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
            "gold_complexity": 7,
            "vt": "SELECT roller_coaster.status FROM roller_coaster WHERE roller_coaster.length > [placeholder-type:numeric] OR roller_coaster.height > [placeholder-type:numeric]",
            "ba": "The virtual table provides the operational status of roller coasters from the 'roller_coaster' table that exceed a specified length or height. The placeholders in the WHERE clause represent the minimum length and height criteria for filtering the results.",
            "question": "Show the statuses of roller coasters longer than 3300 or higher than 100."
        },
        {
            "sample_id": 6198,
            "gold_sql": "SELECT LENGTH ,  Height FROM roller_coaster",
            "gold_complexity": 6,
            "vt": "SELECT roller_coaster.length, roller_coaster.height FROM roller_coaster",
            "ba": "The virtual table provides the length and height of roller coasters from the 'roller_coaster' table.",
            "question": "What are the lengths and heights of roller coasters?"
        },
        {
            "sample_id": 6204,
            "gold_sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT roller_coaster.status FROM roller_coaster GROUP BY roller_coaster.status ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the operational statuses of roller coasters from the 'roller_coaster' table. It groups the results by the 'status' column and orders them based on the count of roller coasters in each status, limiting the output to a specified number of statuses.",
            "question": "Please show the most common status of roller coasters."
        },
        {
            "sample_id": 6199,
            "gold_sql": "SELECT Name FROM country WHERE Languages != \"German\"",
            "gold_complexity": 6,
            "vt": "SELECT country.name FROM country WHERE country.languages <> None.\"german\"",
            "ba": "The virtual table lists the names of countries from the 'country' table where the number of official languages is not equal to a specific value. The placeholder in the WHERE clause represents the number of languages that should not be equal to the specified value.",
            "question": "List the names of countries whose language is not \"German\"."
        },
        {
            "sample_id": 6206,
            "gold_sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT roller_coaster.park FROM roller_coaster ORDER BY roller_coaster.speed LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the amusement parks where roller coasters are located, sorted by the maximum speed of the roller coasters. The placeholder in the LIMIT clause allows the user to specify the number of parks to retrieve.",
            "question": "Show the park of the roller coaster with the highest speed."
        },
        {
            "sample_id": 6201,
            "gold_sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT roller_coaster.speed FROM roller_coaster ORDER BY roller_coaster.length LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the maximum speed of roller coasters from the 'roller_coaster' table, ordered by the length of the roller coaster track. The query limits the results to a specified number of entries.",
            "question": "What are the speeds of the longest roller coaster?"
        }
    ],
    "workshop_paper": [
        {
            "sample_id": 5812,
            "gold_sql": "SELECT Author ,  College FROM submission",
            "gold_complexity": 6,
            "vt": "SELECT submission.author, submission.college FROM submission",
            "ba": "The virtual table describes the authors and their associated colleges from the 'submission' table. The query is designed to retrieve the author identifiers and college identifiers for all submissions made.",
            "question": "For each submission, show the author and their affiliated college."
        },
        {
            "sample_id": 5835,
            "gold_sql": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
            "gold_complexity": 10,
            "vt": "SELECT submission.author FROM submission WHERE NOT submission.submission_id IN (SELECT submission.submission_id FROM acceptance)",
            "ba": "The virtual table lists the authors of submissions from the 'submission' table that have not been accepted in any workshop. The query uses a subquery to filter out submission IDs that are present in the 'acceptance' table, indicating those submissions have been evaluated.",
            "question": "List the authors who do not have submission to any workshop."
        },
        {
            "sample_id": 5823,
            "gold_sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80",
            "gold_complexity": 9,
            "vt": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80",
            "ba": "The virtual table identifies colleges associated with submissions that have scores greater than 90 and also those with scores less than 80. The intersection of these two sets will yield colleges that have submissions in both score categories.",
            "question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80."
        },
        {
            "sample_id": 5828,
            "gold_sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT acceptance.result FROM acceptance JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY submission.scores LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the results of submission evaluations from the 'acceptance' table, showing whether each submission was accepted or rejected. It joins the 'acceptance' table with the 'submission' table to access the scores associated with each submission, and it orders the results based on these scores. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Which submission received the highest score in acceptance result. Show me the result."
        },
        {
            "sample_id": 5832,
            "gold_sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT submission.author FROM acceptance JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY submission.author HAVING COUNT(DISTINCT T1.workshop_id) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the authors of submissions that have been evaluated in multiple workshops. The placeholder in the HAVING clause represents the minimum number of distinct workshops that the authors must have submissions evaluated in.",
            "question": "Which authors have submitted to more than one workshop?"
        },
        {
            "sample_id": 5822,
            "gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT submission.college FROM submission GROUP BY submission.college ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of colleges from which submissions have been made, grouped by college and ordered by the number of submissions. The placeholder in the LIMIT clause allows for specifying the maximum number of colleges to return.",
            "question": "Which college has the most authors with submissions?"
        },
        {
            "sample_id": 5819,
            "gold_sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College",
            "gold_complexity": 8,
            "vt": "SELECT submission.college, COUNT(*) FROM submission GROUP BY submission.college",
            "ba": "The virtual table summarizes the number of submissions from each college by counting the submissions grouped by the college identifier from the 'submission' table.",
            "question": "Show different colleges along with the number of authors of submission from each college."
        },
        {
            "sample_id": 5829,
            "gold_sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
            "gold_complexity": 10,
            "vt": "SELECT submission.author, COUNT(DISTINCT T1.workshop_id) FROM acceptance JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY submission.author",
            "ba": "The virtual table provides a count of distinct workshops associated with each author based on their submissions. It joins the 'acceptance' table with the 'submission' table to link submissions to their respective authors, and groups the results by author to aggregate the number of unique workshops they have submissions evaluated for.",
            "question": "Show each author and the number of workshops they submitted to."
        },
        {
            "sample_id": 5820,
            "gold_sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College",
            "gold_complexity": 8,
            "vt": "SELECT submission.college, COUNT(*) FROM submission GROUP BY submission.college",
            "ba": "The virtual table summarizes the number of submissions from each college by counting the submissions grouped by the college identifier from the 'submission' table.",
            "question": "For each college, return the college name and the count of authors with submissions from that college."
        },
        {
            "sample_id": 5821,
            "gold_sql": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT submission.college FROM submission GROUP BY submission.college ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the colleges associated with submissions from the 'submission' table, grouping them to count the number of submissions per college. The result is ordered by the count of submissions, and a limit is applied to restrict the number of colleges returned based on a specified numeric value.",
            "question": "Show the most common college of authors of submissions."
        },
        {
            "sample_id": 5817,
            "gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT submission.author FROM submission ORDER BY submission.scores LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the authors of submissions from the 'submission' table, ordered by their scores. The placeholder in the LIMIT clause indicates the maximum number of authors to return.",
            "question": "What is the author of the submission with the highest score?"
        },
        {
            "sample_id": 5811,
            "gold_sql": "SELECT Author ,  College FROM submission",
            "gold_complexity": 6,
            "vt": "SELECT submission.author, submission.college FROM submission",
            "ba": "The virtual table describes the authors and their associated colleges from the 'submission' table. The query is designed to retrieve the author identifiers and college identifiers for all submissions made.",
            "question": "What are the authors of submissions and their colleges?"
        },
        {
            "sample_id": 5833,
            "gold_sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
            "gold_complexity": 8,
            "vt": "SELECT workshop.date, workshop.venue FROM workshop ORDER BY workshop.venue",
            "ba": "The virtual table displays the date and venue of workshops from the 'workshop' table, sorted by the venue location.",
            "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue."
        },
        {
            "sample_id": 5807,
            "gold_sql": "SELECT count(*) FROM submission",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM submission",
            "ba": "The virtual table counts the total number of submissions recorded in the 'submission' table.",
            "question": "How many submissions are there?"
        },
        {
            "sample_id": 5814,
            "gold_sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"",
            "gold_complexity": 7,
            "vt": "SELECT submission.author FROM submission WHERE submission.college = None.\"florida\" OR submission.college = None.\"temple\"",
            "ba": "The virtual table retrieves the authors of submissions from the 'submission' table that are associated with either the 'florida' or 'temple' college. The placeholders in the WHERE clause represent the college names being filtered.",
            "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?"
        },
        {
            "sample_id": 5818,
            "gold_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT submission.author FROM submission ORDER BY submission.scores LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the authors of submissions from the 'submission' table, ordered by their scores. The placeholder in the LIMIT clause indicates the maximum number of authors to retrieve.",
            "question": "Find the author who achieved the highest score in a submission."
        },
        {
            "sample_id": 5824,
            "gold_sql": "SELECT College FROM submission WHERE Scores  >  90 INTERSECT SELECT College FROM submission WHERE Scores  <  80",
            "gold_complexity": 9,
            "vt": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80",
            "ba": "The virtual table identifies colleges associated with submissions that have scores greater than 90 and those with scores less than 80. The intersection of these two sets will yield colleges that have submissions in both score categories.",
            "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?"
        },
        {
            "sample_id": 5826,
            "gold_sql": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
            "gold_complexity": 7,
            "vt": "SELECT submission.author, acceptance.result FROM acceptance JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "ba": "The virtual table describes the authors of submissions along with the evaluation results from the 'acceptance' table. It joins the 'acceptance' table with the 'submission' table to link each submission to its corresponding author. The placeholders represent the necessary identifiers for submissions and their evaluation results.",
            "question": "For each submission, find its author and acceptance result."
        }
    ],
    "phone_market": [
        {
            "sample_id": 1987,
            "gold_sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
            "gold_complexity": 8,
            "vt": "SELECT phone.name, market.district FROM phone_market JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID",
            "ba": "The virtual table describes the names of phone models along with the districts where they are sold. It combines data from the 'phone', 'market', and 'phone_market' tables to provide a comprehensive view of phone availability in different market districts.",
            "question": "Show the names of phones and the districts of markets they are on."
        },
        {
            "sample_id": 1988,
            "gold_sql": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
            "gold_complexity": 10,
            "vt": "SELECT phone.name, market.district FROM phone_market JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY market.ranking",
            "ba": "The virtual table provides a list of phone models along with their associated market districts, ordered by the market's performance ranking. It combines data from the 'phone', 'market', and 'phone_market' tables to achieve this.",
            "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market."
        },
        {
            "sample_id": 1982,
            "gold_sql": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
            "gold_complexity": 7,
            "vt": "SELECT phone.name FROM phone WHERE phone.carrier = None.\"sprint\" OR phone.carrier = None.\"tmobile\"",
            "ba": "The virtual table lists the names of phone models from the 'phone' table that are associated with specific mobile carriers. The query filters the results to include only those phones that are either from 'sprint' or 'tmobile'.",
            "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\"."
        },
        {
            "sample_id": 1980,
            "gold_sql": "SELECT Memory_in_G ,  Carrier FROM phone",
            "gold_complexity": 6,
            "vt": "SELECT phone.memory_in_g, phone.carrier FROM phone",
            "ba": "The virtual table describes the memory and carrier information of phones from the 'phone' table.",
            "question": "What are the memories and carriers of phones?"
        },
        {
            "sample_id": 1978,
            "gold_sql": "SELECT count(*) FROM phone",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM phone",
            "ba": "The virtual table provides a count of all phone models available in the 'phone' table.",
            "question": "How many phones are there?"
        },
        {
            "sample_id": 1989,
            "gold_sql": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50",
            "gold_complexity": 8,
            "vt": "SELECT phone.name FROM phone_market JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE market.num_of_shops > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of phone models available in markets that have a specified number of shops. It combines data from the 'phone', 'market', and 'phone_market' tables to filter the results based on the number of shops in each market.",
            "question": "Show the names of phones that are on market with number of shops greater than 50."
        },
        {
            "sample_id": 1979,
            "gold_sql": "SELECT Name FROM phone ORDER BY Price ASC",
            "gold_complexity": 6,
            "vt": "SELECT phone.name FROM phone ORDER BY phone.price",
            "ba": "The virtual table lists the names of phone models from the 'phone' table, ordered by their retail price. This allows users to see the available phone models sorted from the least expensive to the most expensive.",
            "question": "List the names of phones in ascending order of price."
        },
        {
            "sample_id": 1981,
            "gold_sql": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT phone.carrier FROM phone WHERE phone.memory_in_g > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct mobile carriers from the 'phone' table for phone models that have more memory than a specified amount in gigabytes. The placeholder in the WHERE clause represents the minimum memory requirement.",
            "question": "List the distinct carriers of phones with memories bigger than 32."
        },
        {
            "sample_id": 1991,
            "gold_sql": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
            "gold_complexity": 11,
            "vt": "SELECT phone.name FROM phone_market JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY phone.name HAVING SUM(phone_market.num_of_stock) >= [placeholder-type:numeric] ORDER BY SUM(phone_market.num_of_stock)",
            "ba": "The virtual table describes the names of phone models that are available in markets where the total stock of each phone model meets or exceeds a specified quantity. The query aggregates the stock numbers from the 'phone_market' table, joining it with the 'phone' table to retrieve the corresponding phone names. The results are grouped by phone name and ordered by the total stock available.",
            "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks."
        }
    ],
    "club_1": [
        {
            "sample_id": 4250,
            "gold_sql": "SELECT DISTINCT fname FROM student",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT student.fname FROM student",
            "ba": "The virtual table describes the distinct first names of students from the 'student' table.",
            "question": "Find each student's first name."
        },
        {
            "sample_id": 4247,
            "gold_sql": "SELECT count(*) FROM student",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM student",
            "ba": "The virtual table provides a count of all students from the 'student' table.",
            "question": "How many students are there?"
        },
        {
            "sample_id": 4296,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"bootup baltimore\" AND student.age < [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of students who are members of a specific club and are below a certain age. It joins the 'club', 'member_of_club', and 'student' tables to filter the results based on the club's name and the students' age.",
            "question": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18."
        },
        {
            "sample_id": 4249,
            "gold_sql": "SELECT DISTINCT fname FROM student",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT student.fname FROM student",
            "ba": "The virtual table lists the distinct first names of students from the 'student' table.",
            "question": "What are the first names of all the students?"
        },
        {
            "sample_id": 4302,
            "gold_sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(DISTINCT t1.clubname) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.fname = None.\"eric\" AND student.lname = None.\"tai\"",
            "ba": "The virtual table counts the distinct number of clubs that a specific student, identified by their first and last name, is a member of. It involves joining the 'club', 'member_of_club', and 'student' tables to filter the results based on the student's name.",
            "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member."
        },
        {
            "sample_id": 4299,
            "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.city_code = None.\"hou\"",
            "ba": "The virtual table lists the unique names of clubs from the 'club' table that students from a specific city are members of. The query joins the 'club' table with the 'member_of_club' table to find the clubs that students belong to, and then further joins with the 'student' table to filter based on the city code. The placeholder in the WHERE clause represents the city code for which we want to find club memberships.",
            "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\"."
        },
        {
            "sample_id": 4275,
            "gold_sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"",
            "gold_complexity": 6,
            "vt": "SELECT club.clubdesc FROM club WHERE club.clubname = None.\"pen and paper gaming\"",
            "ba": "The virtual table describes the description of a specific club from the 'club' table based on the club's name. The placeholder in the WHERE clause represents the name of the club being queried.",
            "question": "Find the description of the club \"Pen and Paper Gaming\"."
        },
        {
            "sample_id": 4269,
            "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.major = None.\"600\" GROUP BY club.clubname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of clubs from the 'club' table that students with a specific major are members of. It joins the 'club' table with the 'member_of_club' table to find the relevant memberships and then joins with the 'student' table to filter by the specified major. The results are grouped by club name and ordered by the number of members, with a limit on the number of clubs returned.",
            "question": "Which club has the most members majoring in \"600\"?"
        },
        {
            "sample_id": 4261,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.fname = None.\"tracy\" AND student.lname = None.\"kim\"",
            "ba": "The virtual table counts the number of clubs that a specific student, identified by their first name and last name, is a member of. It joins the 'club' table with the 'member_of_club' table to link students to their respective clubs, and then further joins with the 'student' table to filter by the student's name.",
            "question": "Find the number of clubs where \"Tracy Kim\" is a member."
        },
        {
            "sample_id": 4268,
            "gold_sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
            "gold_complexity": 11,
            "vt": "SELECT student.fname, student.lname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"bootup baltimore\" AND student.major = None.\"600\"",
            "ba": "The virtual table describes the first and last names of students who are members of a specific club and are enrolled in a particular major. The placeholders in the WHERE clause represent the club's name and the student's major.",
            "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names."
        },
        {
            "sample_id": 4260,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.fname = None.\"linda\" AND student.lname = None.\"smith\"",
            "ba": "The virtual table counts the number of clubs that a specific student, identified by their first and last name, is a member of. It joins the 'club' table with the 'member_of_club' table to link students to their respective clubs, and then further joins with the 'student' table to filter by the student's name.",
            "question": "How many clubs does \"Linda Smith\" have membership for?"
        },
        {
            "sample_id": 4285,
            "gold_sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM club WHERE club.clublocation = None.\"hhh\"",
            "ba": "The virtual table counts the number of clubs from the 'club' table that meet at a specific location. The placeholder in the WHERE clause represents the location of the clubs.",
            "question": "How many clubs are located at \"HHH\"?"
        },
        {
            "sample_id": 4256,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"tennis club\"",
            "ba": "The virtual table counts the number of members in a specific club, which is identified by its name. It joins the 'club' table with the 'member_of_club' table to link students to their respective clubs, and then further joins with the 'student' table to access student information. The placeholder in the WHERE clause represents the name of the club being queried.",
            "question": "Count the members of the club \"Tennis Club\"."
        },
        {
            "sample_id": 4297,
            "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.city_code = None.\"bal\"",
            "ba": "The virtual table lists the unique names of clubs from the 'club' table that students from a specific city are members of. The query joins the 'club' table with the 'member_of_club' table to find which students belong to which clubs, and then further joins with the 'student' table to filter based on the city code.",
            "question": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\"."
        },
        {
            "sample_id": 4300,
            "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.city_code = None.\"hou\"",
            "ba": "The virtual table lists the distinct names of clubs from the 'club' table that students from a specific city are members of. The query joins the 'club' table with the 'member_of_club' table to find which students belong to which clubs, and then further joins with the 'student' table to filter based on the city code of the students. The placeholder in the WHERE clause represents the city code.",
            "question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs."
        },
        {
            "sample_id": 4288,
            "gold_sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
            "gold_complexity": 11,
            "vt": "SELECT student.fname, student.lname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"bootup baltimore\" AND member_of_club.position = None.\"president\"",
            "ba": "The virtual table describes the first and last names of students who are presidents of a specific club. It retrieves data from the 'student' table, joining it with the 'member_of_club' table to filter by the club's name and the student's position within that club.",
            "question": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name."
        },
        {
            "sample_id": 4277,
            "gold_sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"",
            "gold_complexity": 6,
            "vt": "SELECT club.clublocation FROM club WHERE club.clubname = None.\"tennis club\"",
            "ba": "The virtual table describes the location of a specific club from the 'club' table based on its name. The placeholder in the WHERE clause represents the name of the club being queried.",
            "question": "What is the location of the club named \"Tennis Club\"?"
        },
        {
            "sample_id": 4287,
            "gold_sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
            "gold_complexity": 11,
            "vt": "SELECT student.fname, student.lname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"bootup baltimore\" AND member_of_club.position = None.\"president\"",
            "ba": "The virtual table describes the first and last names of students who are presidents of a specific club. It retrieves data from the 'student' table, joining it with the 'member_of_club' table to filter by the club's name and the student's position within that club.",
            "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?"
        },
        {
            "sample_id": 4311,
            "gold_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.age) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"tennis club\"",
            "ba": "The virtual table calculates the average age of students who are members of a specific club, in this case, the 'tennis club'. It joins the 'club', 'member_of_club', and 'student' tables to gather the necessary data, filtering by the club's name.",
            "question": "Retrieve the average age of members of the club \"Tennis Club\"."
        },
        {
            "sample_id": 4281,
            "gold_sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"",
            "gold_complexity": 6,
            "vt": "SELECT club.clublocation FROM club WHERE club.clubname = None.\"hopkins student enterprises\"",
            "ba": "The virtual table describes the location of a specific club from the 'club' table based on its name. The placeholder in the WHERE clause represents the name of the club being queried.",
            "question": "Where is the club \"Hopkins Student Enterprises\" located?"
        },
        {
            "sample_id": 4258,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"pen and paper gaming\"",
            "ba": "The virtual table counts the number of students who are members of a specific club, identified by its name. It joins the 'club' table with the 'member_of_club' table to link students to their respective clubs, and then further joins with the 'student' table to access student information. The placeholder in the WHERE clause represents the name of the club being queried.",
            "question": "How many people have membership in the club \"Pen and Paper Gaming\"?"
        },
        {
            "sample_id": 4254,
            "gold_sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
            "gold_complexity": 8,
            "vt": "SELECT student.lname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"hopkins student enterprises\"",
            "ba": "The virtual table describes the last names of students who are members of a specific club, identified by its name. It involves joining the 'club', 'member_of_club', and 'student' tables to filter the results based on the club's name.",
            "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\"."
        },
        {
            "sample_id": 4310,
            "gold_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.age) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"hopkins student enterprises\"",
            "ba": "The virtual table calculates the average age of students who are members of a specific club, identified by its name. It involves joining three tables: 'club', 'member_of_club', and 'student'. The 'club' table provides information about the clubs, while 'member_of_club' links students to their respective clubs. The 'student' table contains details about the students, including their ages. The placeholder in the WHERE clause represents the name of the club for which the average age of members is being calculated.",
            "question": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?"
        },
        {
            "sample_id": 4307,
            "gold_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.age) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"bootup baltimore\"",
            "ba": "The virtual table calculates the average age of students who are members of a specific club, identified by its name. It involves joining three tables: 'club', 'member_of_club', and 'student'. The 'club' table provides the club's details, the 'member_of_club' table links students to their respective clubs, and the 'student' table contains information about the students, including their ages. The placeholder in the WHERE clause represents the name of the club for which the average age is being calculated.",
            "question": "What is the average age of the members of the club \"Bootup Baltimore\"?"
        },
        {
            "sample_id": 4245,
            "gold_sql": "SELECT clubname FROM club",
            "gold_complexity": 4,
            "vt": "SELECT club.clubname FROM club",
            "ba": "The virtual table lists the names of clubs from the 'club' table.",
            "question": "What are the names of all clubs?"
        },
        {
            "sample_id": 4292,
            "gold_sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT t2.position) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE club.clubname = None.\"bootup baltimore\"",
            "ba": "The virtual table counts the distinct positions held by members in a specific club from the 'club' and 'member_of_club' tables. It joins these tables based on the club identifier and filters the results to only include the specified club name.",
            "question": "Count the number of different positions in the club \"Bootup Baltimore\"."
        },
        {
            "sample_id": 4270,
            "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.major = None.\"600\" GROUP BY club.clubname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of clubs from the 'club' table that students with a specific major are members of. It joins the 'club' table with the 'member_of_club' table to find the relevant memberships and then joins with the 'student' table to filter by the specified major. The results are grouped by club name and ordered by the count of members, with a limit on the number of clubs returned.",
            "question": "Find the club which has the largest number of members majoring in \"600\"."
        },
        {
            "sample_id": 4262,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.fname = None.\"tracy\" AND student.lname = None.\"kim\"",
            "ba": "The virtual table counts the number of clubs that a specific student, identified by their first name and last name, is a member of. It joins the 'club' table with the 'member_of_club' table to link students to their respective clubs, and then further joins with the 'student' table to filter by the student's name.",
            "question": "For how many clubs is \"Tracy Kim\" a member?"
        },
        {
            "sample_id": 4272,
            "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.sex = None.\"f\" GROUP BY club.clubname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of clubs from the 'club' table that have female members. It joins the 'club' table with the 'member_of_club' table to associate students with their respective clubs, and then further joins with the 'student' table to filter based on the gender of the students. The results are grouped by club name and ordered by the count of female members in each club, with a limit on the number of clubs returned.",
            "question": "Which club has the most female students as their members? Give me the name of the club."
        },
        {
            "sample_id": 4291,
            "gold_sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT t2.position) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE club.clubname = None.\"bootup baltimore\"",
            "ba": "The virtual table counts the distinct positions held by students in a specific club from the 'club' and 'member_of_club' tables. It joins these tables on the club identifier and filters the results based on the club's name.",
            "question": "How many different roles are there in the club \"Bootup Baltimore\"?"
        },
        {
            "sample_id": 4255,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"tennis club\"",
            "ba": "The virtual table provides a count of students who are members of a specific club, in this case, the 'tennis club'. It joins the 'club' table with the 'member_of_club' table to link students to their respective clubs, and then further joins with the 'student' table to access student information. The placeholder in the WHERE clause represents the name of the club being queried.",
            "question": "How many members does the club \"Tennis Club\" has?"
        },
        {
            "sample_id": 4306,
            "gold_sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.advisor = [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of clubs that students are members of, filtered by the advisor's identifier. It combines data from the 'club', 'member_of_club', and 'student' tables to achieve this.",
            "question": "Which clubs have one or more members whose advisor is \"1121\"?"
        },
        {
            "sample_id": 4271,
            "gold_sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT club.clubname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE student.sex = None.\"f\" GROUP BY club.clubname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of clubs that have female members, grouped by club name and ordered by the number of female members in each club. The placeholder in the LIMIT clause allows for specifying the maximum number of clubs to return.",
            "question": "Find the name of the club that has the most female students."
        },
        {
            "sample_id": 4286,
            "gold_sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM club WHERE club.clublocation = None.\"hhh\"",
            "ba": "The virtual table counts the number of clubs from the 'club' table that meet at a specific location. The placeholder in the WHERE clause represents the location of the clubs.",
            "question": "Count the number of clubs located at \"HHH\"."
        },
        {
            "sample_id": 4265,
            "gold_sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
            "gold_complexity": 11,
            "vt": "SELECT student.fname, student.lname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"hopkins student enterprises\" AND student.sex = None.\"m\"",
            "ba": "The virtual table describes the first and last names of male students who are members of a specific club, 'hopkins student enterprises'. It retrieves data from the 'student' table and joins it with the 'member_of_club' and 'club' tables to filter based on the club's name and the student's gender.",
            "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name."
        },
        {
            "sample_id": 4295,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"bootup baltimore\" AND student.age < [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of students who are members of a specific club and are below a certain age. It joins the 'club', 'member_of_club', and 'student' tables to filter the results based on the club's name and the students' age.",
            "question": "How many members of club \"Bootup Baltimore\" are younger than 18?"
        },
        {
            "sample_id": 4248,
            "gold_sql": "SELECT count(*) FROM student",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM student",
            "ba": "The virtual table provides a count of all students from the 'student' table.",
            "question": "Count the total number of students."
        },
        {
            "sample_id": 4308,
            "gold_sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.age) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"bootup baltimore\"",
            "ba": "The virtual table calculates the average age of students who are members of a specific club. It joins the 'club' table with the 'member_of_club' table to link students to their respective clubs, and then further joins with the 'student' table to access the age of each student. The placeholder in the WHERE clause represents the name of the club for which the average age is being calculated.",
            "question": "Find the average age of the members in the club \"Bootup Baltimore\"."
        },
        {
            "sample_id": 4257,
            "gold_sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"pen and paper gaming\"",
            "ba": "The virtual table provides a count of students who are members of a specific club, identified by its name. It combines data from the 'club', 'member_of_club', and 'student' tables to achieve this.",
            "question": "Find the number of members of club \"Pen and Paper Gaming\"."
        },
        {
            "sample_id": 4282,
            "gold_sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"",
            "gold_complexity": 6,
            "vt": "SELECT club.clublocation FROM club WHERE club.clubname = None.\"hopkins student enterprises\"",
            "ba": "The virtual table retrieves the location of a specific club from the 'club' table based on the club's name. The placeholder in the WHERE clause represents the name of the club being queried.",
            "question": "Tell me the location of the club \"Hopkins Student Enterprises\"."
        },
        {
            "sample_id": 4244,
            "gold_sql": "SELECT count(*) FROM club",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM club",
            "ba": "The virtual table provides a count of all clubs available in the 'club' table.",
            "question": "Count the total number of clubs."
        },
        {
            "sample_id": 4266,
            "gold_sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
            "gold_complexity": 11,
            "vt": "SELECT student.fname, student.lname FROM club JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE club.clubname = None.\"hopkins student enterprises\" AND student.sex = None.\"m\"",
            "ba": "The virtual table describes the first and last names of male students who are members of a specific club, 'hopkins student enterprises'. It retrieves data from the 'student' table and joins it with the 'member_of_club' and 'club' tables to filter based on the club's name and the student's gender.",
            "question": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?"
        }
    ],
    "flight_1": [
        {
            "sample_id": 426,
            "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
            "gold_complexity": 8,
            "vt": "SELECT employee.name FROM employee JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE aircraft.name = None.\"boeing 737-800\"",
            "ba": "The virtual table describes the names of employees who hold a certificate for a specific aircraft model, in this case, the 'Boeing 737-800'. It involves joining the 'employee' table with the 'certificate' table to link employees to their certifications, and then joining with the 'aircraft' table to filter by the aircraft model.",
            "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?"
        },
        {
            "sample_id": 371,
            "gold_sql": "SELECT avg(salary) ,  max(salary) FROM Employee",
            "gold_complexity": 5,
            "vt": "SELECT AVG(employee.salary), MAX(employee.salary) FROM employee",
            "ba": "The virtual table calculates the average and maximum annual salary of employees from the 'employee' table.",
            "question": "What is average and maximum salary of all employees."
        },
        {
            "sample_id": 353,
            "gold_sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
            "gold_complexity": 6,
            "vt": "SELECT MIN(aircraft.distance), AVG(aircraft.distance), MAX(aircraft.distance) FROM aircraft",
            "ba": "The virtual table provides statistical information about the distances that various aircraft can travel. It calculates the minimum, average, and maximum distances from the 'aircraft' table, which contains details about each aircraft's capabilities.",
            "question": "What is the minimum, average, and maximum distance of all aircrafts."
        },
        {
            "sample_id": 431,
            "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT aircraft.name FROM certificate JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY certificate.aid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of aircraft that have been certified by employees. It joins the 'certificate' table with the 'aircraft' table based on the aircraft ID, groups the results by aircraft ID, and orders them by the count of certifications. The placeholder in the LIMIT clause allows for specifying the maximum number of aircraft names to return.",
            "question": "Show the name of aircraft which fewest people have its certificate."
        },
        {
            "sample_id": 361,
            "gold_sql": "SELECT count(*) FROM Employee",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM employee",
            "ba": "The virtual table counts the total number of employees from the 'employee' table.",
            "question": "How many employees do we have?"
        },
        {
            "sample_id": 416,
            "gold_sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
            "gold_complexity": 9,
            "vt": "SELECT aircraft.name, COUNT(*) FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY flight.aid",
            "ba": "The virtual table provides a summary of the aircraft names along with the count of flights associated with each aircraft from the 'flight' and 'aircraft' tables. The query joins these two tables on the aircraft ID and groups the results by the aircraft ID to count the number of flights for each aircraft.",
            "question": "What is the name of each aircraft and how many flights does each one complete?"
        },
        {
            "sample_id": 411,
            "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
            "gold_complexity": 7,
            "vt": "SELECT aircraft.name FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE flight.flno = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of aircraft associated with a specific flight number from the 'flight' table. The query joins the 'flight' table with the 'aircraft' table using the aircraft ID to retrieve the relevant aircraft name. The placeholder in the WHERE clause represents the flight number.",
            "question": "What is the aircraft name for the flight with number 99"
        },
        {
            "sample_id": 410,
            "gold_sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT flight.destination FROM flight GROUP BY flight.destination ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique flight destinations from the 'flight' table, grouping them to count how many flights go to each destination. The results are ordered by the number of flights in descending order, and a limit is applied to restrict the number of destinations returned based on a specified numeric value.",
            "question": "What destination has the fewest number of flights?"
        },
        {
            "sample_id": 373,
            "gold_sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT employee.eid, employee.name FROM employee ORDER BY employee.salary LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and names of employees from the 'employee' table, ordered by their annual salary. The placeholder in the LIMIT clause allows for specifying the maximum number of employee records to retrieve.",
            "question": "Show the id and name of the employee with maximum salary."
        },
        {
            "sample_id": 415,
            "gold_sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
            "gold_complexity": 9,
            "vt": "SELECT aircraft.name, COUNT(*) FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY flight.aid",
            "ba": "The virtual table provides a summary of the aircraft names along with the count of flights associated with each aircraft from the 'flight' and 'aircraft' tables. The query joins these two tables on the aircraft ID and groups the results by the aircraft ID to count the number of flights for each aircraft.",
            "question": "Show aircraft names and number of flights for each aircraft."
        },
        {
            "sample_id": 413,
            "gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
            "gold_complexity": 7,
            "vt": "SELECT flight.flno FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE aircraft.name = None.\"airbus a340-300\"",
            "ba": "The virtual table lists the flight numbers of flights that are operated by a specific aircraft model, in this case, the 'airbus a340-300'. It joins the 'flight' table with the 'aircraft' table to filter the results based on the aircraft's name.",
            "question": "Show all flight numbers with aircraft Airbus A340-300."
        },
        {
            "sample_id": 436,
            "gold_sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT employee.name, employee.salary FROM employee JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY employee.eid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and salaries of employees who hold certificates for operating aircraft. It retrieves this information by joining the 'employee' table with the 'certificate' table, grouping the results by employee ID to aggregate the number of certificates held by each employee, and ordering the results based on the count of certificates. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the salaray and name of the employee that is certified to fly the most planes?"
        },
        {
            "sample_id": 383,
            "gold_sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
            "gold_complexity": 10,
            "vt": "SELECT flight.flno, flight.origin, flight.destination FROM flight ORDER BY flight.origin",
            "ba": "The virtual table lists the flight number, origin, and destination of all flights from the 'flight' table, sorted by the origin of each flight.",
            "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities."
        },
        {
            "sample_id": 433,
            "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
            "gold_complexity": 11,
            "vt": "SELECT aircraft.name FROM certificate JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE aircraft.distance > [placeholder-type:numeric] GROUP BY certificate.aid ORDER BY COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of aircraft that have been certified for operation by employees, filtered by the maximum distance they can travel. The results are grouped by aircraft ID and ordered based on the count of certifications that meet a specified threshold.",
            "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate."
        },
        {
            "sample_id": 407,
            "gold_sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT flight.origin FROM flight GROUP BY flight.origin ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique origins of flights from the 'flight' table, grouped by the origin location. It orders the results based on the count of flights from each origin and limits the output to a specified number of origins.",
            "question": "Which origin has most number of flights?"
        },
        {
            "sample_id": 391,
            "gold_sql": "SELECT flno FROM Flight WHERE distance  >  2000",
            "gold_complexity": 6,
            "vt": "SELECT flight.flno FROM flight WHERE flight.distance > [placeholder-type:numeric]",
            "ba": "The virtual table lists the flight numbers from the 'flight' table where the distance of the flight exceeds a specified value. The placeholder in the WHERE clause represents the minimum distance to filter the results.",
            "question": "Show flight number for all flights with more than 2000 distance."
        },
        {
            "sample_id": 352,
            "gold_sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
            "gold_complexity": 8,
            "vt": "SELECT aircraft.name, aircraft.distance FROM aircraft WHERE aircraft.aid = [placeholder-type:numeric]",
            "ba": "The virtual table provides information about aircraft, specifically their names and maximum travel distances. The placeholder in the WHERE clause allows for filtering by a specific aircraft ID.",
            "question": "What is the name and distance for the aircraft that has an id of 12?"
        },
        {
            "sample_id": 401,
            "gold_sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(flight.distance), AVG(flight.price) FROM flight WHERE flight.origin = None.\"los angeles\"",
            "ba": "The virtual table calculates the average distance and average price of flights originating from a specific location. The placeholder in the WHERE clause represents the origin city of the flights.",
            "question": "What is the average distance and average price for flights from Los Angeles."
        },
        {
            "sample_id": 403,
            "gold_sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
            "gold_complexity": 8,
            "vt": "SELECT flight.origin, COUNT(*) FROM flight GROUP BY flight.origin",
            "ba": "The virtual table summarizes the number of flights originating from each location by grouping the results based on the 'origin' column from the 'flight' table. The placeholder in the COUNT function represents the count of flights for each origin.",
            "question": "Show all origins and the number of flights from each origin."
        },
        {
            "sample_id": 386,
            "gold_sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
            "gold_complexity": 6,
            "vt": "SELECT flight.flno FROM flight WHERE flight.origin = None.\"los angeles\"",
            "ba": "The virtual table describes the flight numbers of flights originating from a specific location. The placeholder in the WHERE clause represents the origin city of the flight.",
            "question": "What are the numbers of all flights coming from Los Angeles?"
        },
        {
            "sample_id": 345,
            "gold_sql": "SELECT name ,  distance FROM Aircraft",
            "gold_complexity": 6,
            "vt": "SELECT aircraft.name, aircraft.distance FROM aircraft",
            "ba": "The virtual table provides information about aircraft, specifically their names and maximum travel distances. This data is sourced from the 'aircraft' table, which contains details about each aircraft's unique identifier, model name, and distance capabilities.",
            "question": "Show name and distance for all aircrafts."
        },
        {
            "sample_id": 404,
            "gold_sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
            "gold_complexity": 8,
            "vt": "SELECT flight.origin, COUNT(*) FROM flight GROUP BY flight.origin",
            "ba": "The virtual table summarizes the number of flights originating from each location in the 'flight' table. The query groups the results by the 'origin' column, allowing us to see how many flights depart from each unique origin.",
            "question": "For each origin, how many flights came from there?"
        },
        {
            "sample_id": 424,
            "gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
            "gold_complexity": 8,
            "vt": "SELECT aircraft.name FROM employee JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE employee.name = None.\"john williams\"",
            "ba": "The virtual table retrieves the names of aircraft associated with a specific employee who holds a certification for those aircraft. It involves joining the 'employee', 'certificate', and 'aircraft' tables based on their relationships, specifically linking employee IDs and aircraft IDs.",
            "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?"
        },
        {
            "sample_id": 423,
            "gold_sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
            "gold_complexity": 8,
            "vt": "SELECT aircraft.name FROM employee JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE employee.name = None.\"john williams\"",
            "ba": "The virtual table retrieves the names of aircraft that are associated with a specific employee who holds a certification for those aircraft. It involves joining the 'employee', 'certificate', and 'aircraft' tables based on their relationships, specifically linking employee IDs and aircraft IDs.",
            "question": "Show names for all aircrafts of which John Williams has certificates."
        },
        {
            "sample_id": 398,
            "gold_sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT flight.flno, flight.distance FROM flight ORDER BY flight.price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the flight number and distance of flights from the 'flight' table, ordered by the price of the tickets. The placeholder in the LIMIT clause indicates the maximum number of results to return.",
            "question": "What is the flight number and its distance for the one with the maximum price?"
        },
        {
            "sample_id": 346,
            "gold_sql": "SELECT name ,  distance FROM Aircraft",
            "gold_complexity": 6,
            "vt": "SELECT aircraft.name, aircraft.distance FROM aircraft",
            "ba": "The virtual table provides information about aircraft, specifically their names and maximum travel distances. This data is sourced from the 'aircraft' table, which contains details about each aircraft's unique identifier, model name, and distance capabilities.",
            "question": "What are the names and distances for all airplanes?"
        },
        {
            "sample_id": 399,
            "gold_sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT flight.flno FROM flight ORDER BY flight.distance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the flight numbers from the 'flight' table, ordered by the distance of each flight. The placeholder in the LIMIT clause allows the user to specify how many flight numbers they want to retrieve.",
            "question": "Show the flight number of flights with three lowest distances."
        },
        {
            "sample_id": 347,
            "gold_sql": "SELECT aid FROM Aircraft WHERE distance  >  1000",
            "gold_complexity": 6,
            "vt": "SELECT aircraft.aid FROM aircraft WHERE aircraft.distance > [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers of aircraft from the 'aircraft' table that can travel a distance greater than a specified value. The placeholder in the WHERE clause represents the minimum distance requirement for the aircraft.",
            "question": "Show ids for all aircrafts with more than 1000 distance."
        },
        {
            "sample_id": 372,
            "gold_sql": "SELECT avg(salary) ,  max(salary) FROM Employee",
            "gold_complexity": 5,
            "vt": "SELECT AVG(employee.salary), MAX(employee.salary) FROM employee",
            "ba": "The virtual table calculates the average and maximum annual salary of employees from the 'employee' table.",
            "question": "What is the average and largest salary of all employees?"
        },
        {
            "sample_id": 422,
            "gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
            "gold_complexity": 6,
            "vt": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
            "ba": "The virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. It uses the EXCEPT clause to exclude those employees whose IDs are found in the 'Certificate' table, effectively listing only those without certifications.",
            "question": "What are the ids of all employees that don't have certificates?"
        },
        {
            "sample_id": 406,
            "gold_sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
            "gold_complexity": 8,
            "vt": "SELECT flight.destination, COUNT(*) FROM flight GROUP BY flight.destination",
            "ba": "The virtual table summarizes the number of flights arriving at each destination from the 'flight' table. It groups the results by the destination column to provide a count of flights for each unique destination.",
            "question": "What are the destinations and number of flights to each one?"
        },
        {
            "sample_id": 363,
            "gold_sql": "SELECT name ,  salary FROM Employee ORDER BY salary",
            "gold_complexity": 8,
            "vt": "SELECT employee.name, employee.salary FROM employee ORDER BY employee.salary",
            "ba": "The virtual table lists the names and salaries of all employees from the 'employee' table, sorted in ascending order by their salary. This allows for an easy comparison of employee salaries.",
            "question": "Show name and salary for all employees sorted by salary."
        },
        {
            "sample_id": 394,
            "gold_sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(flight.price) FROM flight WHERE flight.origin = None.\"los angeles\" AND flight.destination = None.\"honolulu\"",
            "ba": "The virtual table calculates the average ticket price for flights originating from Los Angeles to Honolulu. It uses the 'flight' table to access the price information and applies a filter based on the specified origin and destination.",
            "question": "What is the average price for flights from LA to Honolulu?"
        },
        {
            "sample_id": 412,
            "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
            "gold_complexity": 7,
            "vt": "SELECT aircraft.name FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE flight.flno = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of aircraft associated with a specific flight number from the 'flight' table. The query joins the 'flight' table with the 'aircraft' table using the aircraft ID to retrieve the relevant aircraft name. The placeholder in the WHERE clause represents the flight number being queried.",
            "question": "What is the name of the aircraft that was on flight number 99?"
        },
        {
            "sample_id": 393,
            "gold_sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(flight.price) FROM flight WHERE flight.origin = None.\"los angeles\" AND flight.destination = None.\"honolulu\"",
            "ba": "The virtual table calculates the average ticket price for flights originating from Los Angeles to Honolulu. It uses the 'flight' table to filter flights based on their origin and destination, and it computes the average price of those flights.",
            "question": "What is the average price for flights from Los Angeles to Honolulu."
        },
        {
            "sample_id": 437,
            "gold_sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT employee.name FROM employee JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE aircraft.distance > [placeholder-type:numeric] GROUP BY employee.eid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of employees who hold certificates for aircraft that can travel a distance greater than a specified value. The results are grouped by employee ID and ordered by the count of certificates held, with a limit on the number of results returned.",
            "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?"
        },
        {
            "sample_id": 380,
            "gold_sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
            "gold_complexity": 8,
            "vt": "SELECT employee.eid, employee.salary FROM employee WHERE employee.name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the unique identifier and annual salary of employees from the 'employee' table based on a specific employee's name. The placeholder in the WHERE clause represents the name of the employee being queried.",
            "question": "What is the id and salary of the employee named Mark Young?"
        },
        {
            "sample_id": 382,
            "gold_sql": "SELECT count(*) FROM Flight",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM flight",
            "ba": "The virtual table provides a count of all flights recorded in the 'flight' table. This count gives an overview of the total number of flights available in the database.",
            "question": "What is the number of flights?"
        },
        {
            "sample_id": 432,
            "gold_sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT aircraft.name FROM certificate JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY certificate.aid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of aircraft that have been certified by employees. It joins the 'certificate' table with the 'aircraft' table based on the aircraft ID, groups the results by aircraft ID, and orders them by the count of certifications. The placeholder in the LIMIT clause allows for specifying the maximum number of aircraft names to return.",
            "question": "What are the names of the aircraft that the least people are certified to fly?"
        },
        {
            "sample_id": 364,
            "gold_sql": "SELECT name ,  salary FROM Employee ORDER BY salary",
            "gold_complexity": 8,
            "vt": "SELECT employee.name, employee.salary FROM employee ORDER BY employee.salary",
            "ba": "The virtual table lists the names and salaries of all employees from the 'employee' table, sorted in ascending order based on their salary.",
            "question": "What is the name and salary of all employees in order of salary?"
        },
        {
            "sample_id": 418,
            "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
            "gold_complexity": 9,
            "vt": "SELECT aircraft.name FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY flight.aid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of aircraft that have been used for flights, specifically those that have been utilized in a number of flights equal to or greater than a specified threshold. The query joins the 'flight' table with the 'aircraft' table based on the aircraft ID, groups the results by aircraft ID, and filters the groups to include only those with a count of flights meeting the numeric condition.",
            "question": "What are the names for all aircrafts with at least 2 flights?"
        },
        {
            "sample_id": 419,
            "gold_sql": "SELECT count(DISTINCT eid) FROM Certificate",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT eid) FROM certificate",
            "ba": "The virtual table counts the number of distinct employees who hold certificates related to aircraft. It retrieves this information from the 'certificate' table, which links employee IDs to aircraft IDs.",
            "question": "How many employees have certificate."
        },
        {
            "sample_id": 414,
            "gold_sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
            "gold_complexity": 7,
            "vt": "SELECT flight.flno FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE aircraft.name = None.\"airbus a340-300\"",
            "ba": "The virtual table lists the flight numbers of flights that are operated by a specific aircraft model, in this case, the 'airbus a340-300'. It joins the 'flight' table with the 'aircraft' table to filter the results based on the aircraft's name.",
            "question": "What are the flight numbers for the aircraft Airbus A340-300?"
        },
        {
            "sample_id": 376,
            "gold_sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT employee.name FROM employee ORDER BY employee.salary LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of employees from the 'employee' table, ordered by their annual salary in ascending order. The placeholder in the LIMIT clause allows for specifying the maximum number of employee names to retrieve.",
            "question": "What is the name of the 3 employees who get paid the least?"
        },
        {
            "sample_id": 370,
            "gold_sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
            "gold_complexity": 8,
            "vt": "SELECT employee.name, employee.salary FROM employee WHERE employee.eid = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and salaries of employees from the 'employee' table based on a specific employee ID. The placeholder in the WHERE clause represents the unique identifier for the employee.",
            "question": "What is the name and salary of the employee with the id 242518965?"
        },
        {
            "sample_id": 357,
            "gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT aircraft.name FROM aircraft ORDER BY aircraft.distance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of aircraft from the 'aircraft' table, ordered by their maximum travel distance. The placeholder allows for limiting the number of results returned based on a specified numeric value.",
            "question": "Show the name of aircrafts with top three lowest distances."
        },
        {
            "sample_id": 417,
            "gold_sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
            "gold_complexity": 9,
            "vt": "SELECT aircraft.name FROM flight JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY flight.aid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of aircraft that have been used for flights, specifically those that have been utilized in a number of flights equal to or greater than a specified threshold. The query joins the 'flight' table with the 'aircraft' table based on the aircraft ID, groups the results by aircraft ID, and filters the groups to include only those with a count of flights meeting or exceeding the placeholder value.",
            "question": "Show names for all aircraft with at least two flights."
        },
        {
            "sample_id": 354,
            "gold_sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
            "gold_complexity": 6,
            "vt": "SELECT MIN(aircraft.distance), AVG(aircraft.distance), MAX(aircraft.distance) FROM aircraft",
            "ba": "The virtual table provides statistical information about the distances that various aircraft can travel. It calculates the minimum, average, and maximum distances from the 'aircraft' table, which contains details about each aircraft's capabilities.",
            "question": "Return the minimum, average and maximum distances traveled across all aircrafts."
        },
        {
            "sample_id": 356,
            "gold_sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT aircraft.aid, aircraft.name FROM aircraft ORDER BY aircraft.distance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and names of aircraft from the 'aircraft' table, ordered by their maximum travel distance. The placeholder in the LIMIT clause allows for specifying the number of aircraft to retrieve.",
            "question": "What is the id and name of the aircraft that can cover the maximum distance?"
        },
        {
            "sample_id": 358,
            "gold_sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT aircraft.name FROM aircraft ORDER BY aircraft.distance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of aircraft from the 'aircraft' table, ordered by their maximum travel distance. The placeholder allows for limiting the number of results returned based on a specified numeric value.",
            "question": "What are the aircrafts with top 3 shortest lengthes? List their names."
        },
        {
            "sample_id": 421,
            "gold_sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
            "gold_complexity": 6,
            "vt": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
            "ba": "The virtual table identifies employees from the 'Employee' table who do not hold any certificates related to aircraft. The query uses the EXCEPT clause to exclude those employees who are present in the 'Certificate' table, effectively listing only those without any certifications.",
            "question": "Show ids for all employees who don't have a certificate."
        },
        {
            "sample_id": 350,
            "gold_sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM aircraft WHERE aircraft.distance BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of aircraft from the 'aircraft' table that can travel a distance within a specified range. The placeholders represent the minimum and maximum distances for filtering the aircraft.",
            "question": "What is the count of aircrafts that have a distance between 1000 and 5000?"
        },
        {
            "sample_id": 343,
            "gold_sql": "SELECT count(*) FROM Aircraft",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM aircraft",
            "ba": "The virtual table provides a count of all aircraft entries in the 'aircraft' table, which includes unique identifiers and details about each aircraft.",
            "question": "How many aircrafts do we have?"
        },
        {
            "sample_id": 362,
            "gold_sql": "SELECT count(*) FROM Employee",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM employee",
            "ba": "The virtual table counts the total number of employees from the 'employee' table.",
            "question": "What is the number of employees?"
        },
        {
            "sample_id": 387,
            "gold_sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
            "gold_complexity": 6,
            "vt": "SELECT flight.origin FROM flight WHERE flight.destination = None.\"honolulu\"",
            "ba": "The virtual table describes the origins of flights from the 'flight' table that are destined for a specific location. The placeholder in the WHERE clause represents the destination city.",
            "question": "Show origins of all flights with destination Honolulu."
        },
        {
            "sample_id": 378,
            "gold_sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
            "gold_complexity": 9,
            "vt": "SELECT employee.name FROM employee WHERE employee.salary > (SELECT AVG(employee.salary) FROM Employee)",
            "ba": "The virtual table lists the names of employees from the 'employee' table who earn more than the average salary of all employees.",
            "question": "What are the names of all employees who have a salary higher than average?"
        },
        {
            "sample_id": 349,
            "gold_sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM aircraft WHERE aircraft.distance BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of aircraft from the 'aircraft' table that can travel a distance within a specified range. The placeholders represent the minimum and maximum distances.",
            "question": "How many aircrafts have distance between 1000 and 5000?"
        }
    ],
    "school_player": [
        {
            "sample_id": 4872,
            "gold_sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
            "gold_complexity": 7,
            "vt": "SELECT player.team, school.location FROM player JOIN school AS T2 ON T1.School_ID = T2.School_ID",
            "ba": "The virtual table describes the teams of players along with the geographical locations of their respective schools. The query joins the 'player' table with the 'school' table to retrieve the team information and location based on the school each player is associated with.",
            "question": "What are the team and the location of school each player belongs to?"
        },
        {
            "sample_id": 4861,
            "gold_sql": "SELECT avg(Enrollment) FROM school",
            "gold_complexity": 4,
            "vt": "SELECT AVG(school.enrollment) FROM school",
            "ba": "The virtual table calculates the average enrollment of all schools from the 'school' table. It provides a summary of student enrollment across different schools.",
            "question": "What is the average enrollment of schools?"
        },
        {
            "sample_id": 4881,
            "gold_sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT school.denomination, COUNT(*) FROM school GROUP BY school.denomination ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the number of schools grouped by their religious affiliation, if any. It counts the total number of schools for each denomination and orders the results by the count in ascending order.",
            "question": "Please show different denominations and the corresponding number of schools in descending order."
        },
        {
            "sample_id": 4884,
            "gold_sql": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT school.school_colors FROM school ORDER BY school.enrollment LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the official colors representing schools from the 'school' table, ordered by the total number of students enrolled in each school. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "What is the school color of the school with the largest enrollment?"
        },
        {
            "sample_id": 4892,
            "gold_sql": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT school.denomination FROM school GROUP BY school.denomination HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the religious affiliations of schools from the 'school' table, grouping them by denomination. It filters the results to include only those denominations that are associated with more than a specified number of schools, represented by a numeric placeholder.",
            "question": "What are the denomination more than one school have?"
        },
        {
            "sample_id": 4877,
            "gold_sql": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID",
            "gold_complexity": 7,
            "vt": "SELECT school.location, school_details.nickname FROM school JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
            "ba": "The virtual table describes the geographical location and commonly used nickname of schools from the 'school' table, by joining it with the 'school_details' table based on the school identifier. The placeholders represent the necessary identifiers for the join operation.",
            "question": "Show locations and nicknames of schools."
        },
        {
            "sample_id": 4860,
            "gold_sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
            "gold_complexity": 6,
            "vt": "SELECT school.enrollment FROM school WHERE school.denomination <> None.\"catholic\"",
            "ba": "The virtual table provides the total number of students enrolled in schools from the 'school' table that do not have a religious affiliation of 'catholic'. The placeholder in the WHERE clause indicates that the query is filtering out schools based on their denomination.",
            "question": "List the enrollment for each school that does not have \"Catholic\" as denomination."
        },
        {
            "sample_id": 4879,
            "gold_sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
            "gold_complexity": 8,
            "vt": "SELECT school.denomination, COUNT(*) FROM school GROUP BY school.denomination",
            "ba": "The virtual table summarizes the number of schools grouped by their religious affiliation from the 'school' table. The placeholder in the COUNT function represents the count of schools for each denomination.",
            "question": "Please show different denominations and the corresponding number of schools."
        },
        {
            "sample_id": 4857,
            "gold_sql": "SELECT LOCATION FROM school ORDER BY Founded DESC",
            "gold_complexity": 6,
            "vt": "SELECT school.location FROM school ORDER BY school.founded",
            "ba": "The virtual table provides the geographical locations of schools from the 'school' table, sorted by the year each school was established. This allows users to see where schools are located in relation to their founding dates.",
            "question": "List the locations of schools in descending order of founded year."
        },
        {
            "sample_id": 4887,
            "gold_sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
            "gold_complexity": 9,
            "vt": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
            "ba": "The virtual table identifies the denominations of schools that were established before 1890 and after 1900, showing the intersection of these two groups.",
            "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900"
        },
        {
            "sample_id": 4890,
            "gold_sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
            "gold_complexity": 6,
            "vt": "SELECT school_details.nickname FROM school_details WHERE school_details.division <> None.\"division 1\"",
            "ba": "The virtual table retrieves the nicknames of schools from the 'school_details' table that are not classified under a specific division, indicated by a placeholder for the division value.",
            "question": "What are the nicknames of schools whose division is not 1?"
        },
        {
            "sample_id": 4873,
            "gold_sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT school.location FROM player JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY player.school_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the geographical locations of schools that have a significant number of players associated with them. The query joins the 'player' table with the 'school' table to link players to their respective schools, and it groups the results by school ID. The HAVING clause filters the results to include only those schools that have more than a specified number of players.",
            "question": "Show the locations of schools that have more than 1 player."
        },
        {
            "sample_id": 4859,
            "gold_sql": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
            "gold_complexity": 6,
            "vt": "SELECT school.enrollment FROM school WHERE school.denomination <> None.\"catholic\"",
            "ba": "The virtual table provides the total number of students enrolled in schools that do not have a Catholic religious affiliation. The placeholder in the WHERE clause indicates that the query is filtering out schools with a specific denomination.",
            "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?"
        },
        {
            "sample_id": 4856,
            "gold_sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
            "gold_complexity": 6,
            "vt": "SELECT school.location FROM school ORDER BY school.enrollment",
            "ba": "The virtual table provides the geographical locations of schools from the 'school' table, ordered by the total number of students enrolled in each school. This allows users to see where schools are located in relation to their enrollment figures.",
            "question": "What is the list of school locations sorted in ascending order of school enrollment?"
        },
        {
            "sample_id": 4889,
            "gold_sql": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
            "gold_complexity": 6,
            "vt": "SELECT school_details.nickname FROM school_details WHERE school_details.division <> None.\"division 1\"",
            "ba": "The virtual table retrieves the nicknames of schools from the 'school_details' table that are not classified under a specific division, indicated by a placeholder for the division value.",
            "question": "Show the nicknames of schools that are not in division 1."
        },
        {
            "sample_id": 4880,
            "gold_sql": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
            "gold_complexity": 8,
            "vt": "SELECT school.denomination, COUNT(*) FROM school GROUP BY school.denomination",
            "ba": "The virtual table summarizes the number of schools grouped by their religious affiliation, if any, from the 'school' table. The query counts the total number of schools for each unique denomination.",
            "question": "For each denomination, return the denomination and the count of schools with that denomination."
        },
        {
            "sample_id": 4866,
            "gold_sql": "SELECT count(DISTINCT POSITION) FROM player",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT POSITION) FROM player",
            "ba": "The virtual table counts the distinct positions held by players across all schools in the 'player' table. This provides insight into the variety of player positions available within the school sports teams.",
            "question": "Count the number of distinct player positions."
        },
        {
            "sample_id": 4865,
            "gold_sql": "SELECT count(DISTINCT POSITION) FROM player",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT POSITION) FROM player",
            "ba": "The virtual table counts the distinct positions held by players across all teams in the 'player' table. This provides insight into the variety of player positions available.",
            "question": "How many different positions of players are there?"
        },
        {
            "sample_id": 4853,
            "gold_sql": "SELECT count(*) FROM school",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM school",
            "ba": "The virtual table provides a count of all schools listed in the 'school' table, which includes various attributes such as school name, location, and enrollment details.",
            "question": "How many schools are there?"
        },
        {
            "sample_id": 4874,
            "gold_sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT school.location FROM player JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY player.school_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the geographical locations of schools that have a significant number of players associated with them. The query joins the 'player' table with the 'school' table to link players to their respective schools, groups the results by school, and filters to include only those schools that have more than a specified number of players.",
            "question": "Which schools have more than 1 player? Give me the school locations."
        },
        {
            "sample_id": 4876,
            "gold_sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT school.denomination FROM player JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY player.school_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the religious affiliations of schools based on the players associated with them. It groups the results by the school identifier and orders them by the number of players linked to each school, limiting the output to a specified number of results.",
            "question": "What is the denomination of the school the most players belong to?"
        },
        {
            "sample_id": 4855,
            "gold_sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
            "gold_complexity": 6,
            "vt": "SELECT school.location FROM school ORDER BY school.enrollment",
            "ba": "The virtual table provides the geographical locations of schools from the 'school' table, ordered by the total number of students enrolled in each school. This allows users to see where schools are located in relation to their enrollment figures.",
            "question": "List the locations of schools in ascending order of enrollment."
        },
        {
            "sample_id": 4888,
            "gold_sql": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
            "gold_complexity": 9,
            "vt": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
            "ba": "The virtual table identifies the denominations of schools that were established before 1890 and after 1900, providing a comparison of religious affiliations across different time periods.",
            "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?"
        },
        {
            "sample_id": 4858,
            "gold_sql": "SELECT LOCATION FROM school ORDER BY Founded DESC",
            "gold_complexity": 6,
            "vt": "SELECT school.location FROM school ORDER BY school.founded",
            "ba": "The virtual table provides the geographical locations of schools from the 'school' table, ordered by the year each school was established. This allows users to see where schools are located in relation to their founding dates.",
            "question": "What is the list of school locations sorted in descending order of school foundation year?"
        }
    ],
    "school_bus": [
        {
            "sample_id": 6353,
            "gold_sql": "SELECT max(years_working) ,  min(years_working) ,  avg(years_working) FROM school_bus",
            "gold_complexity": 6,
            "vt": "SELECT MAX(school_bus.years_working), MIN(school_bus.years_working), AVG(school_bus.years_working) FROM school_bus",
            "ba": "The virtual table provides statistical information about the years of service of drivers associated with school buses. It calculates the maximum, minimum, and average years that drivers have worked with the school bus system.",
            "question": "What is the maximum, minimum and average years spent working on a school bus?"
        },
        {
            "sample_id": 6341,
            "gold_sql": "SELECT count(*) FROM driver",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM driver",
            "ba": "The virtual table counts the total number of drivers from the 'driver' table.",
            "question": "How many drivers are there?"
        },
        {
            "sample_id": 6355,
            "gold_sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
            "gold_complexity": 9,
            "vt": "SELECT school.type, COUNT(*) FROM school_bus JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY school.type",
            "ba": "The virtual table summarizes the number of school buses associated with each type of school from the 'school' table. It joins the 'school_bus' table with the 'school' table based on the school_id, allowing us to group the results by the type of school.",
            "question": "Show the type of school and the number of buses for each type."
        },
        {
            "sample_id": 6348,
            "gold_sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT driver.home_city FROM driver WHERE driver.age > [placeholder-type:numeric] GROUP BY driver.home_city HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the home cities of drivers from the 'driver' table who are older than a specified age. The results are grouped by home city, and only those cities with a certain number of drivers are included in the final output. The placeholders represent the age threshold and the minimum count of drivers required for a city to be included.",
            "question": "Show home city where at least two drivers older than 40 are from."
        },
        {
            "sample_id": 6343,
            "gold_sql": "SELECT party ,  count(*) FROM driver GROUP BY party",
            "gold_complexity": 8,
            "vt": "SELECT driver.party, COUNT(*) FROM driver GROUP BY driver.party",
            "ba": "The virtual table summarizes the number of drivers associated with each political party from the 'driver' table. The placeholder in the SELECT clause represents the political party affiliation of the drivers, and the COUNT function is used to aggregate the total number of drivers for each party.",
            "question": "Show the party and the number of drivers in each party."
        },
        {
            "sample_id": 6350,
            "gold_sql": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
            "gold_complexity": 10,
            "vt": "SELECT driver.name FROM driver WHERE NOT driver.driver_id IN (SELECT driver.driver_id FROM school_bus)",
            "ba": "The virtual table describes the names of drivers from the 'driver' table who are not currently assigned to any school bus. The subquery identifies all driver IDs that are linked to the 'school_bus' table, and the main query filters out these drivers from the results.",
            "question": "Show the names of the drivers without a school bus."
        },
        {
            "sample_id": 6352,
            "gold_sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
            "gold_complexity": 8,
            "vt": "SELECT school.school, driver.name FROM school_bus JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
            "ba": "The virtual table describes the names of drivers and the associated schools they work with, by joining the 'school_bus', 'school', and 'driver' tables. The placeholders represent the necessary identifiers for the school and driver.",
            "question": "Show the school name and driver name for all school buses."
        },
        {
            "sample_id": 6342,
            "gold_sql": "SELECT name ,  home_city ,  age FROM driver",
            "gold_complexity": 8,
            "vt": "SELECT driver.name, driver.home_city, driver.age FROM driver",
            "ba": "The virtual table describes the names, home cities, and ages of drivers from the 'driver' table.",
            "question": "Show the name, home city, and age for all drivers."
        },
        {
            "sample_id": 6357,
            "gold_sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40",
            "gold_complexity": 8,
            "vt": "SELECT driver.name FROM driver WHERE driver.home_city = '[placeholder-type:string]' AND driver.age < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of drivers from the 'driver' table who reside in a specific home city and are younger than a specified age. The placeholders in the WHERE clause represent the home city and the age limit.",
            "question": "List names for drivers from Hartford city and younger than 40."
        },
        {
            "sample_id": 6345,
            "gold_sql": "SELECT DISTINCT home_city FROM driver",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT driver.home_city FROM driver",
            "ba": "The virtual table lists the unique home cities of drivers from the 'driver' table.",
            "question": "Show all different home cities."
        }
    ],
    "e_learning": [
        {
            "sample_id": 3761,
            "gold_sql": "SELECT count(*) FROM COURSES",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM courses",
            "ba": "The virtual table provides a count of all courses available in the 'courses' table. This count gives an overview of the total number of courses offered without specifying any particular course details.",
            "question": "How many courses are there in total?"
        },
        {
            "sample_id": 3782,
            "gold_sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
            "gold_complexity": 6,
            "vt": "SELECT students.login_name FROM students WHERE students.family_name = None.\"ward\"",
            "ba": "The virtual table retrieves the login names of students from the 'students' table who have a specific family name. The placeholder in the WHERE clause represents the family name of the student.",
            "question": "Return the login names of the students whose family name is \"Ward\"."
        },
        {
            "sample_id": 3839,
            "gold_sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
            "gold_complexity": 6,
            "vt": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
            "ba": "The virtual table identifies the common login names used by both authors/tutors and students in the system. It utilizes the INTERSECT operator to find the intersection of login names from the 'course_authors_and_tutors' and 'students' tables.",
            "question": "Find the common login name of course authors and students."
        },
        {
            "sample_id": 3792,
            "gold_sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name",
            "gold_complexity": 8,
            "vt": "SELECT students.personal_name, students.family_name FROM students ORDER BY students.family_name",
            "ba": "The virtual table lists the first and last names of all students from the 'students' table, sorted by their last names. This allows for an organized view of student names.",
            "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name."
        },
        {
            "sample_id": 3814,
            "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT courses.course_name FROM courses JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of courses from the 'courses' table, showing how many students are enrolled in each course. It joins the 'courses' table with the 'student_course_enrolment' table to count the number of enrollments for each course. The results are grouped by course name and ordered by the number of enrollments, with a limit on the number of courses returned based on a specified numeric placeholder.",
            "question": "Which course is enrolled in by the most students? Give me the course name."
        },
        {
            "sample_id": 3837,
            "gold_sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM students WHERE NOT students.student_id IN (SELECT students.student_id FROM Student_Course_Enrolment)",
            "ba": "The virtual table counts the number of students who are not enrolled in any courses. It does this by selecting from the 'students' table and checking against the 'student_course_enrolment' table to find students whose IDs do not appear in the enrolment records.",
            "question": "How many students did not have any course enrollment?"
        },
        {
            "sample_id": 3774,
            "gold_sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT student_id) FROM student_course_enrolment",
            "ba": "The virtual table provides a count of distinct students who have enrolled in courses from the 'student_course_enrolment' table. This count helps in understanding the number of unique students participating in the courses offered.",
            "question": "Find the number of distinct students enrolled in courses."
        },
        {
            "sample_id": 3823,
            "gold_sql": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
            "gold_complexity": 7,
            "vt": "SELECT student_course_enrolment.date_of_completion FROM student_course_enrolment JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE student_tests_taken.test_result = None.\"fail\"",
            "ba": "The virtual table provides the completion dates of courses for students who have failed a test. It retrieves data from the 'student_course_enrolment' table and joins it with the 'student_tests_taken' table to filter out students based on their test results.",
            "question": "What are the completion dates of all the tests that have result \"Fail\"?"
        },
        {
            "sample_id": 3832,
            "gold_sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT student_course_enrolment.student_id, students.personal_name FROM student_course_enrolment JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY student_course_enrolment.student_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of student IDs along with their personal names from the 'student_course_enrolment' table. It joins with the 'students' table to retrieve the personal names of students who have enrolled in courses. The results are grouped by student ID, and only those students who have enrolled in a specified number of courses or more are included, as indicated by the placeholder for numeric values.",
            "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name."
        },
        {
            "sample_id": 3820,
            "gold_sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
            "gold_complexity": 9,
            "vt": "SELECT courses.course_name, COUNT(*) FROM courses JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_name",
            "ba": "The virtual table provides a summary of the courses offered, specifically listing each course's name along with the total number of students enrolled in each course. It aggregates the data by counting the number of enrollments for each course name.",
            "question": "List the name and the number of enrolled student for each course."
        },
        {
            "sample_id": 3830,
            "gold_sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT student_course_enrolment.student_id, students.login_name FROM student_course_enrolment JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY student_course_enrolment.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of student IDs along with their corresponding login names from the 'students' table. It aggregates the data by student ID from the 'student_course_enrolment' table, ensuring that each student is represented only once. The results are ordered by the number of courses each student is enrolled in, and a limit is applied to restrict the number of records returned based on a specified numeric value.",
            "question": "What are the student ID and login name of the student who are enrolled in the most courses?"
        },
        {
            "sample_id": 3795,
            "gold_sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"",
            "gold_complexity": 7,
            "vt": "SELECT course_authors_and_tutors.login_name FROM course_authors_and_tutors JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE courses.course_name = None.\"advanced database\"",
            "ba": "The virtual table retrieves the login names of authors or tutors from the 'course_authors_and_tutors' table who are associated with a specific course. The query joins the 'course_authors_and_tutors' table with the 'courses' table based on the author ID, allowing us to filter by the course name.",
            "question": "Find the login name of the course author that teaches the course with name \"advanced database\"."
        },
        {
            "sample_id": 3790,
            "gold_sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "gold_complexity": 6,
            "vt": "SELECT * FROM course_authors_and_tutors ORDER BY course_authors_and_tutors.personal_name",
            "ba": "The virtual table retrieves all information from the 'course_authors_and_tutors' table, which includes details about authors and tutors such as their unique identifier, role, login credentials, personal names, and gender. The results are ordered by the personal name of the authors and tutors.",
            "question": "Sort the information about course authors and tutors in alphabetical order of the personal name."
        },
        {
            "sample_id": 3762,
            "gold_sql": "SELECT count(*) FROM COURSES",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM courses",
            "ba": "The virtual table provides a count of all courses available in the 'courses' table.",
            "question": "Find the total number of courses offered."
        },
        {
            "sample_id": 3791,
            "gold_sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name",
            "gold_complexity": 8,
            "vt": "SELECT students.personal_name, students.family_name FROM students ORDER BY students.family_name",
            "ba": "The virtual table lists the first and last names of all students from the 'students' table, sorted by their last names. This allows for an organized view of student names, making it easier to find individuals based on their family names.",
            "question": "List the personal names and family names of all the students in alphabetical order of family name."
        },
        {
            "sample_id": 3763,
            "gold_sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"",
            "gold_complexity": 6,
            "vt": "SELECT courses.course_description FROM courses WHERE courses.course_name = None.\"database\"",
            "ba": "The virtual table describes the detailed description of a specific course from the 'courses' table based on the course name provided. The placeholder in the WHERE clause represents the name of the course being queried.",
            "question": "What are the descriptions of the courses with name \"database\"?"
        },
        {
            "sample_id": 3806,
            "gold_sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
            "gold_complexity": 9,
            "vt": "SELECT courses.course_name, courses.course_description FROM courses JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE subjects.subject_name = None.\"computer science\"",
            "ba": "The virtual table describes the course names and descriptions from the 'courses' table that are associated with a specific subject name. The query joins the 'courses' table with the 'subjects' table to filter courses based on the subject name provided as a placeholder.",
            "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?"
        },
        {
            "sample_id": 3767,
            "gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
            "gold_complexity": 4,
            "vt": "SELECT course_authors_and_tutors.address_line_1 FROM course_authors_and_tutors",
            "ba": "The virtual table retrieves the primary address line of authors or tutors from the 'course_authors_and_tutors' table. The placeholder allows for filtering based on specific criteria if needed.",
            "question": "List the addresses of all the course authors or tutors."
        },
        {
            "sample_id": 3776,
            "gold_sql": "SELECT count(course_id) FROM Student_Course_Enrolment",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(student_course_enrolment.course_id) FROM student_course_enrolment",
            "ba": "The virtual table counts the number of courses that students are enrolled in from the 'student_course_enrolment' table. This provides a total number of course registrations without specifying any particular course or student.",
            "question": "Find the number of distinct courses that have enrolled students."
        },
        {
            "sample_id": 3836,
            "gold_sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id",
            "gold_complexity": 6,
            "vt": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
            "ba": "The virtual table provides a list of first names of students who have not enrolled in any courses. It does this by selecting the 'personal_name' from the 'students' table and excluding those who are found in the 'student_course_enrolment' table, indicating they have registered for at least one course.",
            "question": "Which students not enrolled in any course? Find their personal names."
        },
        {
            "sample_id": 3821,
            "gold_sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
            "gold_complexity": 7,
            "vt": "SELECT student_course_enrolment.date_of_enrolment FROM student_course_enrolment JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE student_tests_taken.test_result = None.\"pass\"",
            "ba": "The virtual table retrieves the enrollment dates of students from the 'student_course_enrolment' table who have not passed their tests, as indicated by a specific condition on the 'test_result' column in the 'student_tests_taken' table.",
            "question": "What are the enrollment dates of all the tests that have result \"Pass\"?"
        },
        {
            "sample_id": 3802,
            "gold_sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT course_authors_and_tutors.address_line_1, courses.author_id FROM course_authors_and_tutors JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY courses.author_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides the primary address line and unique identifier of authors from the 'course_authors_and_tutors' table who have authored a certain number of courses. The placeholder in the HAVING clause represents the minimum count of courses an author must have written to be included in the results.",
            "question": "Which course authors teach two or more courses? Give me their addresses and author IDs."
        },
        {
            "sample_id": 3765,
            "gold_sql": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
            "gold_complexity": 6,
            "vt": "SELECT course_authors_and_tutors.address_line_1 FROM course_authors_and_tutors WHERE course_authors_and_tutors.personal_name = None.\"cathrine\"",
            "ba": "The virtual table retrieves the primary address line of authors or tutors from the 'course_authors_and_tutors' table based on the specified first name. The placeholder in the WHERE clause represents the first name of the author or tutor.",
            "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\""
        },
        {
            "sample_id": 3812,
            "gold_sql": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
            "gold_complexity": 7,
            "vt": "SELECT student_course_enrolment.date_of_enrolment FROM courses JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE courses.course_name = None.\"spanish\"",
            "ba": "The virtual table retrieves the enrollment date of students from the 'student_course_enrolment' table for a specific course identified by its name in the 'courses' table. The placeholder in the WHERE clause represents the name of the course being queried.",
            "question": "Find the the date of enrollment of the \"Spanish\" course."
        },
        {
            "sample_id": 3807,
            "gold_sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id",
            "gold_complexity": 11,
            "vt": "SELECT courses.subject_id, subjects.subject_name, COUNT(*) FROM courses JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY courses.subject_id",
            "ba": "The virtual table summarizes the number of courses associated with each subject by joining the 'courses' and 'subjects' tables. It retrieves the subject ID and subject name, along with a count of how many courses are linked to each subject.",
            "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject."
        },
        {
            "sample_id": 3816,
            "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
            "gold_complexity": 9,
            "vt": "SELECT courses.course_name FROM courses JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_name HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of courses from the 'courses' table that have a specific number of students enrolled. The query joins the 'courses' table with the 'student_course_enrolment' table to count the number of enrollments for each course. The placeholder in the HAVING clause represents the required count of students enrolled in those courses.",
            "question": "Find the names of the courses that have just one student enrollment."
        },
        {
            "sample_id": 3780,
            "gold_sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM student_tests_taken WHERE student_tests_taken.test_result = None.\"fail\"",
            "ba": "The virtual table counts the number of tests taken by students that resulted in a failure from the 'student_tests_taken' table. The placeholder in the WHERE clause indicates the condition for filtering the test results.",
            "question": "Count the number of tests with \"Fail\" result."
        },
        {
            "sample_id": 3799,
            "gold_sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT course_authors_and_tutors.personal_name, course_authors_and_tutors.family_name, courses.author_id FROM course_authors_and_tutors JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY courses.author_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of authors or tutors along with their first and last names from the 'course_authors_and_tutors' table. It joins with the 'courses' table to associate each author with the courses they have authored. The results are grouped by the author's ID to count the number of courses each author has, and the output is ordered by this count. A placeholder is included to limit the number of results returned based on a specified numeric value.",
            "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses."
        },
        {
            "sample_id": 3826,
            "gold_sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
            "gold_complexity": 9,
            "vt": "SELECT student_course_enrolment.date_of_enrolment, student_course_enrolment.date_of_completion FROM student_course_enrolment JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE students.personal_name = None.\"karson\"",
            "ba": "The virtual table provides information about the enrollment dates of students in courses. It retrieves the enrollment date and completion date from the 'student_course_enrolment' table, joining it with the 'students' table to filter results based on the student's first name. The placeholder in the WHERE clause represents the specific student's first name.",
            "question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?"
        },
        {
            "sample_id": 3803,
            "gold_sql": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"",
            "gold_complexity": 7,
            "vt": "SELECT courses.course_name FROM course_authors_and_tutors JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE course_authors_and_tutors.personal_name = None.\"julio\"",
            "ba": "The virtual table describes the names of courses authored by a specific individual from the 'course_authors_and_tutors' table. The placeholder in the WHERE clause represents the first name of the author or tutor.",
            "question": "Find the names of courses taught by the tutor who has personal name \"Julio\"."
        },
        {
            "sample_id": 3819,
            "gold_sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
            "gold_complexity": 9,
            "vt": "SELECT courses.course_name, COUNT(*) FROM courses JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_name",
            "ba": "The virtual table summarizes the number of students enrolled in each course from the 'courses' table. It joins the 'courses' table with the 'student_course_enrolment' table to count the total enrollments for each course, grouping the results by course name.",
            "question": "What is the name of each course and the corresponding number of student enrollment?"
        },
        {
            "sample_id": 3822,
            "gold_sql": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
            "gold_complexity": 7,
            "vt": "SELECT student_course_enrolment.date_of_enrolment FROM student_course_enrolment JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE student_tests_taken.test_result = None.\"pass\"",
            "ba": "The virtual table retrieves the enrollment dates of students from the 'student_course_enrolment' table who have not passed their tests, as indicated by a specific condition on the 'test_result' column in the 'student_tests_taken' table.",
            "question": "Find the enrollment date for all the tests that have \"Pass\" result."
        },
        {
            "sample_id": 3815,
            "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
            "gold_complexity": 9,
            "vt": "SELECT courses.course_name FROM courses JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_name HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of courses from the 'courses' table that have a specific number of students enrolled. It joins the 'courses' table with the 'student_course_enrolment' table to count the number of enrollments for each course. The placeholder in the HAVING clause represents the required count of students enrolled in those courses.",
            "question": "What are the names of the courses that have exactly 1 student enrollment?"
        },
        {
            "sample_id": 3834,
            "gold_sql": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
            "gold_complexity": 11,
            "vt": "SELECT student_course_enrolment.student_id, students.middle_name FROM student_course_enrolment JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY student_course_enrolment.student_id HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of student IDs along with their middle names from the 'student_course_enrolment' table. It joins with the 'students' table to retrieve the middle names of students who have enrolled in courses. The results are grouped by student ID, and only those students who have enrolled in a number of courses less than or equal to a specified limit are included in the output.",
            "question": "What are the student IDs and middle names of the students enrolled in at most two courses?"
        },
        {
            "sample_id": 3784,
            "gold_sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"",
            "gold_complexity": 7,
            "vt": "SELECT students.date_of_latest_logon FROM students WHERE students.family_name = None.\"jaskolski\" OR students.family_name = None.\"langosh\"",
            "ba": "The virtual table retrieves the most recent login dates of students from the 'students' table who have a specific family name. The placeholders in the WHERE clause represent the family names of the students being queried.",
            "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\"."
        },
        {
            "sample_id": 3805,
            "gold_sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
            "gold_complexity": 9,
            "vt": "SELECT courses.course_name, courses.course_description FROM courses JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE subjects.subject_name = None.\"computer science\"",
            "ba": "The virtual table describes the course names and descriptions from the 'courses' table that are associated with a specific subject name. The query joins the 'courses' table with the 'subjects' table to filter courses based on the subject name provided as a placeholder.",
            "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\"."
        },
        {
            "sample_id": 3838,
            "gold_sql": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM students WHERE NOT students.student_id IN (SELECT students.student_id FROM Student_Course_Enrolment)",
            "ba": "The virtual table counts the number of students who are not enrolled in any courses. It does this by selecting from the 'students' table and checking against the 'student_course_enrolment' table to find students whose IDs do not appear in the enrolment records.",
            "question": "Count the number of students who did not enroll in any course."
        },
        {
            "sample_id": 3842,
            "gold_sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
            "gold_complexity": 6,
            "vt": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
            "ba": "The virtual table identifies individuals who are both authors/tutors and students by selecting their first names from both the 'course_authors_and_tutors' and 'students' tables. The use of INTERSECT ensures that only those names that appear in both tables are returned.",
            "question": "What are the personal names used both by some course authors and some students?"
        },
        {
            "sample_id": 3800,
            "gold_sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT course_authors_and_tutors.personal_name, course_authors_and_tutors.family_name, courses.author_id FROM course_authors_and_tutors JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY courses.author_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of authors or tutors along with their first and last names from the 'course_authors_and_tutors' table, specifically focusing on those who have authored courses. It joins the 'courses' table to associate each author with their respective courses, grouping the results by author ID to count the number of courses each author has contributed to. The results are ordered by the count of courses in descending order, and a placeholder is included to limit the number of results returned.",
            "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?"
        },
        {
            "sample_id": 3781,
            "gold_sql": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
            "gold_complexity": 6,
            "vt": "SELECT students.login_name FROM students WHERE students.family_name = None.\"ward\"",
            "ba": "The virtual table retrieves the login names of students from the 'students' table who have a specific family name. The placeholder in the WHERE clause represents the family name of the student.",
            "question": "What are the login names of the students with family name \"Ward\"?"
        },
        {
            "sample_id": 3813,
            "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT courses.course_name FROM courses JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of courses from the 'courses' table, which are grouped by course name. It joins with the 'student_course_enrolment' table to count how many students are enrolled in each course. The results are ordered by the number of enrollments, and a limit is applied to restrict the number of courses returned based on a specified numeric value.",
            "question": "What is the name of the course that has the most student enrollment?"
        },
        {
            "sample_id": 3770,
            "gold_sql": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
            "gold_complexity": 6,
            "vt": "SELECT course_authors_and_tutors.login_name, course_authors_and_tutors.family_name FROM course_authors_and_tutors",
            "ba": "The virtual table describes the login names and family names of authors and tutors from the 'course_authors_and_tutors' table.",
            "question": "What are the login names and family names of course author and tutors?"
        },
        {
            "sample_id": 3785,
            "gold_sql": "SELECT COUNT(*) FROM Students WHERE personal_name LIKE \"%son%\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM students WHERE students.personal_name LIKE None.\"%son%\"",
            "ba": "The virtual table counts the number of students from the 'students' table whose first name contains a specific substring. The placeholder in the LIKE clause represents the substring to search for in the first names of students.",
            "question": "How many students have personal names that contain the word \"son\"?"
        },
        {
            "sample_id": 3828,
            "gold_sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
            "gold_complexity": 10,
            "vt": "SELECT student_course_enrolment.date_of_enrolment, student_course_enrolment.date_of_completion FROM student_course_enrolment JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE students.family_name = None.\"zieme\" AND students.personal_name = None.\"bernie\"",
            "ba": "The virtual table provides information about the enrollment dates of students in courses. It retrieves the enrollment date and completion date from the 'student_course_enrolment' table, joining it with the 'students' table to filter results based on the student's family name and personal name. The placeholders represent the specific names of the student being queried.",
            "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?"
        },
        {
            "sample_id": 3793,
            "gold_sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT student_tests_taken.test_result, COUNT(*) FROM student_tests_taken GROUP BY student_tests_taken.test_result ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the results of tests taken by students, showing the count of each unique test result. It aggregates the data from the 'student_tests_taken' table, grouping the results by the 'test_result' column and ordering them by the count of occurrences.",
            "question": "List each test result and its count in descending order of count."
        },
        {
            "sample_id": 3831,
            "gold_sql": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT student_course_enrolment.student_id, students.personal_name FROM student_course_enrolment JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY student_course_enrolment.student_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of student IDs along with their personal names from the 'students' table, specifically for those students who have enrolled in a course. The query joins the 'student_course_enrolment' table with the 'students' table to retrieve the necessary information. The results are grouped by student ID, and only those students who have enrolled in a number of courses greater than or equal to a specified threshold are included, as indicated by the placeholder.",
            "question": "Find the student ID and personal name of the student with at least two enrollments."
        },
        {
            "sample_id": 3841,
            "gold_sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
            "gold_complexity": 6,
            "vt": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
            "ba": "The virtual table identifies individuals who are both authors/tutors and students by selecting their first names from both the 'course_authors_and_tutors' and 'students' tables. The use of INTERSECT ensures that only those names that appear in both tables are returned.",
            "question": "Find the common personal name of course authors and students."
        },
        {
            "sample_id": 3783,
            "gold_sql": "SELECT date_of_latest_logon FROM Students WHERE family_name  =  \"Jaskolski\" OR family_name  =  \"Langosh\"",
            "gold_complexity": 7,
            "vt": "SELECT students.date_of_latest_logon FROM students WHERE students.family_name = None.\"jaskolski\" OR students.family_name = None.\"langosh\"",
            "ba": "The virtual table retrieves the most recent login date of students from the 'students' table who have a specific family name. The placeholders in the WHERE clause represent the family names of the students being queried.",
            "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?"
        },
        {
            "sample_id": 3777,
            "gold_sql": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
            "gold_complexity": 6,
            "vt": "SELECT student_tests_taken.date_test_taken FROM student_tests_taken WHERE student_tests_taken.test_result = None.\"pass\"",
            "ba": "The virtual table retrieves the dates when students took tests from the 'student_tests_taken' table, specifically filtering for those tests that did not result in a passing grade. The placeholder in the WHERE clause indicates the test result status being queried.",
            "question": "Find the dates of the tests taken with result \"Pass\"."
        }
    ],
    "city_record": [
        {
            "sample_id": 6261,
            "gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT hosting_city.host_city FROM hosting_city ORDER BY hosting_city.year LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of cities that hosted matches, ordered by the year of hosting. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is id of the city that hosted events in the most recent year?"
        },
        {
            "sample_id": 6262,
            "gold_sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT hosting_city.host_city FROM hosting_city ORDER BY hosting_city.year LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of cities that hosted matches, ordered by the year of the match. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Find the city that hosted some events in the most recent year. What is the id of this city?"
        },
        {
            "sample_id": 6290,
            "gold_sql": "SELECT city FROM city WHERE regional_population  >  10000000",
            "gold_complexity": 6,
            "vt": "SELECT city.city FROM city WHERE city.regional_population > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of cities from the 'city' table that have a regional population greater than a specified number. The placeholder in the WHERE clause represents the population threshold.",
            "question": "Which cities have regional population above 10000000?"
        },
        {
            "sample_id": 6264,
            "gold_sql": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
            "gold_complexity": 6,
            "vt": "SELECT match.match_id FROM match WHERE match.competition = None.\"1994 fifa world cup qualification\"",
            "ba": "The virtual table retrieves the unique identifiers of matches from the 'match' table that are part of a specific competition. The placeholder in the WHERE clause represents the name of the competition.",
            "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?"
        },
        {
            "sample_id": 6289,
            "gold_sql": "SELECT city FROM city WHERE regional_population  >  10000000",
            "gold_complexity": 6,
            "vt": "SELECT city.city FROM city WHERE city.regional_population > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of cities from the 'city' table that have a regional population exceeding a specified numeric value. The placeholder in the WHERE clause represents the population threshold.",
            "question": "Please give me a list of cities whose regional population is over 10000000."
        },
        {
            "sample_id": 6278,
            "gold_sql": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT city.city, city.gdp FROM city ORDER BY city.gdp LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and GDPs of cities from the 'city' table, ordered by their GDP in ascending order, with a limit on the number of results returned.",
            "question": "What is the city with the smallest GDP? Return the city and its GDP."
        },
        {
            "sample_id": 6268,
            "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT city.city FROM city JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY hosting_city.host_city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of cities that have hosted matches, grouped by the city name and ordered by the number of matches hosted. The placeholder in the LIMIT clause allows for specifying the maximum number of cities to return.",
            "question": "Find the city that hosted the most events."
        },
        {
            "sample_id": 6284,
            "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
            "gold_complexity": 9,
            "vt": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city",
            "ba": "The virtual table identifies cities based on temperature and hosting data. It selects cities where the average temperature in March is less than that in July, and also identifies cities that have hosted matches.",
            "question": "Which cities have lower temperature in March than in July and have been once host cities?"
        },
        {
            "sample_id": 6272,
            "gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
            "gold_complexity": 7,
            "vt": "SELECT temperature.jan FROM city JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE city.city = None.\"shanghai\"",
            "ba": "The virtual table retrieves the average temperature in January for a specific city from the 'city' and 'temperature' tables. The placeholder in the WHERE clause represents the name of the city being queried.",
            "question": "What is the temperature of \"Shanghai\" city in January?"
        },
        {
            "sample_id": 6266,
            "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
            "gold_complexity": 7,
            "vt": "SELECT city.city FROM city JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE hosting_city.year > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of cities from the 'city' table that hosted matches in a specific year. The placeholder in the WHERE clause represents the year after which the matches were hosted.",
            "question": "Which cities served as a host city after 2010?"
        },
        {
            "sample_id": 6298,
            "gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT city.gdp FROM city ORDER BY city.regional_population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the Gross Domestic Product (GDP) of cities from the 'city' table, ordered by their regional population. The result is limited to a specified number of entries.",
            "question": "Find the GDP of the city with the largest regional population."
        },
        {
            "sample_id": 6280,
            "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT city.city FROM city JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY temperature.feb LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of cities from the 'city' table that are associated with temperature data, specifically ordering them by the average temperature in February. The query limits the results to a specified number of cities.",
            "question": "In February, which city marks the highest temperature?"
        },
        {
            "sample_id": 6296,
            "gold_sql": "SELECT venue FROM MATCH ORDER BY date DESC",
            "gold_complexity": 6,
            "vt": "SELECT match.venue FROM match ORDER BY match.date",
            "ba": "The virtual table lists the venues of matches from the 'match' table, ordered by the date of each match. This allows users to see where matches were held in chronological order.",
            "question": "What are the venues of all the matches? Sort them in the descending order of match date."
        },
        {
            "sample_id": 6263,
            "gold_sql": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
            "gold_complexity": 6,
            "vt": "SELECT match.match_id FROM match WHERE match.competition = None.\"1994 fifa world cup qualification\"",
            "ba": "The virtual table retrieves the unique identifiers of matches from the 'match' table that are part of a specific competition. The placeholder in the WHERE clause represents the name of the competition.",
            "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?"
        },
        {
            "sample_id": 6271,
            "gold_sql": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
            "gold_complexity": 7,
            "vt": "SELECT temperature.jan FROM city JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE city.city = None.\"shanghai\"",
            "ba": "The virtual table retrieves the average temperature in January for a specific city from the 'city' and 'temperature' tables. The placeholder in the WHERE clause represents the name of the city being queried.",
            "question": "Give me the temperature of Shanghai in January."
        },
        {
            "sample_id": 6287,
            "gold_sql": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
            "gold_complexity": 9,
            "vt": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city",
            "ba": "The virtual table lists the names of cities based on specific temperature conditions and hosting criteria. It retrieves cities where the average temperature in February is greater than in June, and also includes cities that have hosted matches.",
            "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?"
        },
        {
            "sample_id": 6294,
            "gold_sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), match.competition FROM match GROUP BY match.competition",
            "ba": "The virtual table provides a count of matches grouped by their respective competitions from the 'match' table. The placeholder in the SELECT statement represents the total number of matches for each competition.",
            "question": "For each competition, count the number of matches."
        },
        {
            "sample_id": 6275,
            "gold_sql": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT city.city FROM city ORDER BY city.regional_population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of cities from the 'city' table, ordered by their regional population. The placeholder in the LIMIT clause allows the user to specify the maximum number of cities to retrieve.",
            "question": "Which three cities have the largest regional population?"
        },
        {
            "sample_id": 6267,
            "gold_sql": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT city.city FROM city JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY hosting_city.host_city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of cities that have hosted matches, grouped by the city name and ordered by the number of matches hosted. The placeholder in the LIMIT clause allows for specifying the maximum number of cities to return.",
            "question": "Which city has hosted the most events?"
        },
        {
            "sample_id": 6293,
            "gold_sql": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), match.competition FROM match GROUP BY match.competition",
            "ba": "The virtual table provides a count of matches grouped by their respective competitions from the 'match' table. The placeholder in the SELECT clause represents the total number of matches for each competition.",
            "question": "Find the number of matches in different competitions."
        },
        {
            "sample_id": 6299,
            "gold_sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT t1.gdp, t1.regional_population FROM city JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.host_city HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides the GDP and regional population of cities that have hosted matches, filtering for those cities that have hosted more than a specified number of matches. The placeholders in the HAVING clause represent the minimum count of matches a city must have hosted to be included in the results.",
            "question": "What are the GDP and population of the city that already served as a host more than once?"
        },
        {
            "sample_id": 6270,
            "gold_sql": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
            "gold_complexity": 9,
            "vt": "SELECT match.venue FROM city JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE city.city = None.\"nanjing ( jiangsu )\" AND match.competition = None.\"1994 fifa world cup qualification\"",
            "ba": "The virtual table retrieves the venue identifiers for matches hosted in a specific city during a particular competition. It joins the 'city' table with the 'hosting_city' table to find matches hosted in the specified city, and then joins with the 'match' table to filter by the competition.",
            "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\"."
        },
        {
            "sample_id": 6300,
            "gold_sql": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT t1.gdp, t1.regional_population FROM city JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.host_city HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides the GDP and regional population of cities that have hosted matches, filtering for those cities that have hosted more than a specified number of matches. The placeholders in the HAVING clause represent the minimum count of matches required for a city to be included in the results.",
            "question": "Which cities have served as host cities more than once? Return me their GDP and population."
        },
        {
            "sample_id": 6297,
            "gold_sql": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT city.gdp FROM city ORDER BY city.regional_population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the Gross Domestic Product (GDP) of cities from the 'city' table, ordered by their regional population. The result is limited to a specified number of entries.",
            "question": "what is the GDP of the city with the largest population."
        }
    ],
    "concert_singer": [
        {
            "sample_id": 7029,
            "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
            "gold_complexity": 9,
            "vt": "SELECT singer.name, COUNT(*) FROM singer_in_concert JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY singer.singer_id",
            "ba": "The virtual table provides a count of performances by each singer from the 'singer' table who has participated in concerts. It joins the 'singer_in_concert' table to link singers with their respective concerts, and groups the results by each singer's unique identifier to aggregate the number of performances.",
            "question": "What are the names of the singers and number of concerts for each person?"
        },
        {
            "sample_id": 7028,
            "gold_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
            "gold_complexity": 9,
            "vt": "SELECT singer.name, COUNT(*) FROM singer_in_concert JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY singer.singer_id",
            "ba": "The virtual table provides a count of performances by each singer from the 'singer' table who has participated in concerts. It joins the 'singer_in_concert' table with the 'singer' table to associate singers with their respective performances, grouping the results by each singer's unique identifier.",
            "question": "List singer names and number of concerts for each singer."
        },
        {
            "sample_id": 7027,
            "gold_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
            "gold_complexity": 11,
            "vt": "SELECT concert.concert_name, concert.theme, COUNT(*) FROM singer_in_concert JOIN concert AS t2 ON t1.concert_id = t2.concert_id GROUP BY concert.concert_id",
            "ba": "The virtual table summarizes concert events by displaying the concert name, theme, and the total number of singers performing in each concert. It aggregates data from the 'singer_in_concert' table, joining it with the 'concert' table to link singers to their respective concerts. The results are grouped by concert ID to count the number of singers for each concert.",
            "question": "What are the names , themes , and number of singers for every concert ?"
        },
        {
            "sample_id": 7008,
            "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "gold_complexity": 8,
            "vt": "SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the locations and names of stadiums from the 'stadium' table that have a capacity within a specified range. The placeholders in the WHERE clause represent the minimum and maximum capacity values.",
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?"
        },
        {
            "sample_id": 6997,
            "gold_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
            "gold_complexity": 8,
            "vt": "SELECT AVG(singer.age), MIN(singer.age), MAX(singer.age) FROM singer WHERE singer.country = '[placeholder-type:string]'",
            "ba": "The virtual table provides the average, minimum, and maximum ages of singers from a specific country. The placeholder in the WHERE clause represents the country of origin of the singers.",
            "question": "What is the average, minimum, and maximum age of all singers from France?"
        },
        {
            "sample_id": 7005,
            "gold_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
            "gold_complexity": 9,
            "vt": "SELECT singer.song_name FROM singer WHERE singer.age > (SELECT AVG(singer.age) FROM singer)",
            "ba": "The virtual table retrieves the titles of songs performed by singers who are older than the average age of all singers in the database. The query uses a subquery to calculate the average age of singers and filters the results accordingly.",
            "question": "List all song names by singers above the average age."
        },
        {
            "sample_id": 7016,
            "gold_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
            "gold_complexity": 9,
            "vt": "SELECT stadium.name, COUNT(*) FROM concert JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY concert.stadium_id",
            "ba": "The virtual table provides a count of concerts held at each stadium, displaying the name of the stadium alongside the total number of concerts. The query joins the 'concert' table with the 'stadium' table to associate each concert with its respective stadium, and groups the results by stadium to aggregate the concert counts.",
            "question": "For each stadium, how many concerts play there?"
        },
        {
            "sample_id": 7018,
            "gold_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
            "gold_complexity": 14,
            "vt": "SELECT stadium.name, stadium.capacity FROM concert JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE concert.year > [placeholder-type:numeric] GROUP BY stadium.stadium_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and capacities of stadiums that hosted concerts in a specific year or later. The query joins the 'concert' and 'stadium' tables to filter concerts based on the year, grouping the results by stadium to count the number of concerts held at each stadium. The placeholders represent the year and the limit on the number of results returned.",
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?"
        },
        {
            "sample_id": 7014,
            "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM concert WHERE concert.year = [placeholder-type:numeric] OR concert.year = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of concerts held in specific years from the 'concert' table. The placeholders represent the years for which the concert count is being queried.",
            "question": "How many concerts occurred in 2014 or 2015?"
        },
        {
            "sample_id": 7017,
            "gold_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT stadium.name, stadium.capacity FROM concert JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE concert.year >= [placeholder-type:numeric] GROUP BY stadium.stadium_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and capacities of stadiums that host concerts, filtered by the year of the concert. The placeholders represent the minimum year of the concert and the limit on the number of results returned.",
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after."
        },
        {
            "sample_id": 7032,
            "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
            "gold_complexity": 8,
            "vt": "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and countries of singers from the 'singer' table who have performed a specific song. The placeholder in the WHERE clause represents the title of the song being searched for.",
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?"
        },
        {
            "sample_id": 7003,
            "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
            "gold_complexity": 8,
            "vt": "SELECT singer.country, COUNT(*) FROM singer GROUP BY singer.country",
            "ba": "The virtual table summarizes the number of singers from each country by grouping the data from the 'singer' table based on the 'country' column. The result will show the country of origin and the count of singers associated with each country.",
            "question": "Show all countries and the number of singers in each country."
        },
        {
            "sample_id": 7001,
            "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT singer.country FROM singer WHERE singer.age > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct countries of singers from the 'singer' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.",
            "question": "What are all distinct countries where singers above age 20 are from?"
        },
        {
            "sample_id": 7000,
            "gold_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT singer.song_name, singer.song_release_year FROM singer ORDER BY singer.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the song names and their release years from the 'singer' table, ordered by the age of the singers. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "What are the names and release years for all the songs of the youngest singer?"
        },
        {
            "sample_id": 7004,
            "gold_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
            "gold_complexity": 8,
            "vt": "SELECT singer.country, COUNT(*) FROM singer GROUP BY singer.country",
            "ba": "The virtual table summarizes the number of singers from each country by grouping the data from the 'singer' table based on the 'country' column. The result will show each country alongside the count of singers originating from that country.",
            "question": "How many singers are from each country?"
        },
        {
            "sample_id": 7030,
            "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
            "gold_complexity": 8,
            "vt": "SELECT singer.name FROM singer_in_concert JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE concert.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of singers who performed in concerts held in a specific year. It combines data from the 'singer_in_concert', 'singer', and 'concert' tables, filtering the results based on the year of the concert.",
            "question": "List all singer names in concerts in year 2014."
        },
        {
            "sample_id": 7022,
            "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "gold_complexity": 10,
            "vt": "SELECT stadium.name FROM stadium WHERE NOT stadium.stadium_id IN (SELECT stadium.stadium_id FROM concert)",
            "ba": "The virtual table lists the names of stadiums from the 'stadium' table that are not associated with any concert events. The subquery identifies stadiums that have hosted concerts, and the main query filters out these stadiums to show only those that have not been used for concerts.",
            "question": "What are the names of the stadiums without any concerts?"
        },
        {
            "sample_id": 7007,
            "gold_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "gold_complexity": 8,
            "vt": "SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the locations and names of stadiums from the 'stadium' table that have a capacity within a specified range. The placeholders in the WHERE clause represent the minimum and maximum capacity values.",
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000."
        },
        {
            "sample_id": 7011,
            "gold_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT stadium.name, stadium.capacity FROM stadium ORDER BY stadium.average LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and capacities of stadiums from the 'stadium' table, ordered by their average attendance. The placeholder in the LIMIT clause represents the maximum number of stadiums to display.",
            "question": "What is the name and capacity for the stadium with highest average attendance?"
        },
        {
            "sample_id": 7019,
            "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of concert years from the 'concert' table, grouped by year and ordered by the number of concerts held in each year. The placeholder allows the user to specify a limit on the number of years returned.",
            "question": "Which year has most number of concerts?"
        },
        {
            "sample_id": 7033,
            "gold_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
            "gold_complexity": 8,
            "vt": "SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and countries of singers from the 'singer' table who have performed a specific song. The placeholder in the WHERE clause represents the title of the song being searched for.",
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?"
        },
        {
            "sample_id": 7009,
            "gold_sql": "select max(capacity), average from stadium",
            "gold_complexity": 6,
            "vt": "SELECT MAX(stadium.capacity), stadium.average FROM stadium",
            "ba": "The virtual table provides the maximum capacity of stadiums along with their average attendance. The placeholder in the SELECT clause allows for the retrieval of these metrics from the 'stadium' table.",
            "question": "What is the maximum capacity and the average of all stadiums ?"
        },
        {
            "sample_id": 7013,
            "gold_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM concert WHERE concert.year = [placeholder-type:numeric] OR concert.year = [placeholder-type:numeric]",
            "ba": "The virtual table counts the total number of concerts held in specific years from the 'concert' table. The placeholders represent the years for which the concert count is being queried.",
            "question": "How many concerts are there in year 2014 or 2015?"
        },
        {
            "sample_id": 6996,
            "gold_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
            "gold_complexity": 10,
            "vt": "SELECT singer.name, singer.country, singer.age FROM singer ORDER BY singer.age",
            "ba": "The virtual table lists the names, countries of origin, and current ages of singers from the 'singer' table, ordered by their age.",
            "question": "What are the names, countries, and ages for every singer in descending order of age?"
        },
        {
            "sample_id": 6994,
            "gold_sql": "SELECT count(*) FROM singer",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM singer",
            "ba": "The virtual table provides a count of all singers from the 'singer' table, which includes various attributes such as their unique identifier, name, country of origin, song title, release year, age, and gender indication.",
            "question": "What is the total number of singers?"
        },
        {
            "sample_id": 7020,
            "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT concert.year FROM concert GROUP BY concert.year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of concert years from the 'concert' table, grouped by year and ordered by the number of concerts held in each year. The placeholder allows the user to specify a limit on the number of years returned.",
            "question": "What is the year that had the most concerts?"
        },
        {
            "sample_id": 7002,
            "gold_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT singer.country FROM singer WHERE singer.age > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct countries of singers from the 'singer' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.",
            "question": "What are  the different countries with singers above age 20?"
        }
    ],
    "customer_deliveries": [
        {
            "sample_id": 2847,
            "gold_sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT customers.payment_method FROM customers GROUP BY customers.payment_method ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the different payment methods used by customers from the 'customers' table. It groups the results by payment method and orders them based on the count of customers using each method, limiting the output to a specified number of results.",
            "question": "Find the payment method that is used most frequently."
        },
        {
            "sample_id": 2844,
            "gold_sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
            "gold_complexity": 10,
            "vt": "SELECT addresses.state_province_county FROM addresses WHERE NOT addresses.address_id IN (SELECT employees.employee_address_id FROM Employees)",
            "ba": "The virtual table lists the state, province, or county from the 'addresses' table for addresses that are not associated with any employee.",
            "question": "Find the states which do not have any employee in their record."
        },
        {
            "sample_id": 2837,
            "gold_sql": "SELECT count(*) FROM customers",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all customers from the 'customers' table, which includes unique identifiers and various details about each customer.",
            "question": "Find the number of customers in total."
        },
        {
            "sample_id": 2842,
            "gold_sql": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'",
            "gold_complexity": 8,
            "vt": "SELECT customers.customer_email, customers.customer_name FROM customers WHERE customers.payment_method = '[placeholder-type:string]'",
            "ba": "The virtual table describes the email addresses and names of customers from the 'customers' table who use a specific payment method. The placeholder in the WHERE clause represents the payment method used by the customers.",
            "question": "List the names and emails of customers who payed by Visa card."
        },
        {
            "sample_id": 2846,
            "gold_sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
            "gold_complexity": 7,
            "vt": "SELECT customers.customer_name FROM customers ORDER BY customers.date_became_customer LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of customers from the 'customers' table, ordered by the date they became customers. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to retrieve.",
            "question": "Find the name of the first 5 customers."
        },
        {
            "sample_id": 2849,
            "gold_sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT delivery_routes.route_name FROM delivery_routes JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY delivery_routes.route_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of delivery routes from the 'delivery_routes' table. It joins with the 'delivery_route_locations' table to associate each route with its locations. The results are grouped by the route ID to ensure unique route names and ordered by the count of locations associated with each route. The query limits the output to a specified number of routes.",
            "question": "Find the name of route that has the highest number of deliveries."
        },
        {
            "sample_id": 2845,
            "gold_sql": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_name, customers.customer_phone, customers.customer_email FROM customers ORDER BY customers.date_became_customer",
            "ba": "The virtual table describes the names, phone numbers, and email addresses of customers from the 'customers' table, ordered by the date they became customers. This allows for an overview of customer contact information based on their registration date.",
            "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers."
        },
        {
            "sample_id": 2839,
            "gold_sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
            "gold_complexity": 6,
            "vt": "SELECT trucks.truck_details FROM trucks ORDER BY trucks.truck_licence_number",
            "ba": "The virtual table displays the detailed information of trucks from the 'trucks' table, ordered by their license numbers. This allows users to view the specifics of each truck in a sorted manner based on their license number.",
            "question": "Show the details of all trucks in the order of their license number."
        },
        {
            "sample_id": 2840,
            "gold_sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT products.product_name FROM products ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of products from the 'products' table, ordered by their price in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of product names to retrieve.",
            "question": "Find the name of the most expensive product."
        }
    ],
    "hospital_1": [
        {
            "sample_id": 3892,
            "gold_sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT department.name FROM department GROUP BY department.departmentid ORDER BY COUNT(department.departmentid) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of departments from the 'department' table, grouping them by their unique identifier. It orders the results based on the count of each department's identifier and limits the output to a specified number of departments.",
            "question": "Find the department with the most employees."
        },
        {
            "sample_id": 3925,
            "gold_sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), block.blockfloor FROM block JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY block.blockfloor",
            "ba": "The virtual table provides a count of occurrences grouped by the blocked floor status from the 'block' table, while also joining with the 'room' table to ensure that the block codes match. This allows for an aggregated view of how many rooms are affected by each blocked floor status.",
            "question": "Find the number of rooms located on each block floor."
        },
        {
            "sample_id": 3987,
            "gold_sql": "SELECT count(*) FROM appointment",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM appointment",
            "ba": "The virtual table provides a count of all appointments recorded in the 'appointment' table. This count helps in understanding the total number of appointments scheduled without filtering by any specific criteria.",
            "question": "How many appointments are there?"
        },
        {
            "sample_id": 3939,
            "gold_sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
            "gold_complexity": 6,
            "vt": "SELECT physician.name FROM physician WHERE physician.position LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of physicians from the 'physician' table who hold a specific job title or role. The placeholder in the WHERE clause represents the job title being queried.",
            "question": "Find the name of physicians whose position title contains the word 'senior'."
        },
        {
            "sample_id": 3936,
            "gold_sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT physician.name, physician.position FROM physician JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE medication.brand = None.\"x\"",
            "ba": "The virtual table describes the distinct names and positions of physicians who have prescribed a specific medication brand. The query joins the 'physician' table with the 'prescribes' table to link physicians with their prescriptions, and further joins the 'medication' table to filter by the specified medication brand.",
            "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians."
        },
        {
            "sample_id": 3973,
            "gold_sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
            "gold_complexity": 14,
            "vt": "SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
            "ba": "The virtual table retrieves the names of medical procedures that have a cost greater than a specified amount, and also includes the names of procedures that a specific physician, identified by their name, is trained in.",
            "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in."
        },
        {
            "sample_id": 3957,
            "gold_sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
            "gold_complexity": 7,
            "vt": "SELECT on_call.nurse FROM on_call WHERE on_call.blockfloor = [placeholder-type:numeric] AND on_call.blockcode = [placeholder-type:numeric]",
            "ba": "The virtual table describes the identifiers of nurses who are on call, filtered by specific block floor and block code statuses. The placeholders in the WHERE clause represent the numeric values for the blocked floor and blocked code.",
            "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names."
        },
        {
            "sample_id": 3982,
            "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
            "gold_complexity": 8,
            "vt": "SELECT physician.name FROM physician JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE department.name = '[placeholder-type:string]' OR department.name = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of physicians who are affiliated with specific departments. It retrieves data from the 'physician' table and joins it with the 'affiliated_with' table to link physicians to their respective departments. Additionally, it joins with the 'department' table to filter the results based on the names of the departments specified in the query.",
            "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names."
        },
        {
            "sample_id": 3920,
            "gold_sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT nurse.name FROM nurse JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY nurse.employeeid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of nurses who have prepared patients for appointments, grouped by their unique identifiers. The results are ordered by the number of appointments each nurse has prepared for, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Find the name of the nurse who has the largest number of appointments."
        },
        {
            "sample_id": 3904,
            "gold_sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
            "gold_complexity": 5,
            "vt": "SELECT physician.name FROM appointment JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
            "ba": "The virtual table describes the names of physicians who are conducting appointments. It retrieves the physician's name from the 'physician' table by joining it with the 'appointment' table based on the physician's identifier.",
            "question": "What are the names of all the physicians who took appointments."
        },
        {
            "sample_id": 3891,
            "gold_sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT department.name FROM department GROUP BY department.departmentid ORDER BY COUNT(department.departmentid) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of departments from the 'department' table, grouping them by their unique identifier. It orders the results based on the count of each department's identifier and limits the output to a specified number of results.",
            "question": "Which department has the largest number of employees?"
        },
        {
            "sample_id": 3934,
            "gold_sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT physician.name FROM physician JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE medication.name = None.\"thesisin\"",
            "ba": "The virtual table lists the distinct names of physicians who have prescribed a specific medication. It joins the 'physician' table with the 'prescribes' table to find the relevant physicians and then further joins with the 'medication' table to filter by the medication name.",
            "question": "List the names of all the physicians who prescribe Thesisin as medication."
        },
        {
            "sample_id": 3959,
            "gold_sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",
            "gold_complexity": 6,
            "vt": "SELECT MAX(procedures.cost), MIN(procedures.cost), AVG(procedures.cost) FROM procedures",
            "ba": "The virtual table provides statistical information about the costs of medical procedures from the 'procedures' table. It calculates the maximum, minimum, and average costs associated with the procedures, allowing users to understand the cost range and average expense for medical treatments.",
            "question": "What are the highest cost, lowest cost and average cost of procedures?"
        },
        {
            "sample_id": 3962,
            "gold_sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC",
            "gold_complexity": 8,
            "vt": "SELECT procedures.name, procedures.cost FROM procedures ORDER BY procedures.cost",
            "ba": "The virtual table lists the names and costs of medical procedures from the 'procedures' table, sorted by the cost of each procedure.",
            "question": "Sort the list of names and costs of all procedures in the descending order of cost."
        },
        {
            "sample_id": 3928,
            "gold_sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), block.blockcode FROM block JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY block.blockcode",
            "ba": "The virtual table provides a count of occurrences grouped by the block code from the 'block' table, while joining with the 'room' table to correlate the blocked floor and block code statuses.",
            "question": "How many rooms are located for each block code?"
        },
        {
            "sample_id": 3967,
            "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT physician.name FROM physician JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY procedures.cost LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of physicians who are trained in specific medical procedures, ordered by the cost of those procedures. The query joins the 'physician' table with the 'trained_in' table to find which physicians are trained in which procedures, and then it joins with the 'procedures' table to access the cost of those procedures. The result is limited to a specified number of entries.",
            "question": "Find the physician who was trained in the most expensive procedure?"
        },
        {
            "sample_id": 3988,
            "gold_sql": "SELECT count(*) FROM appointment",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM appointment",
            "ba": "The virtual table provides a count of all appointments recorded in the 'appointment' table. This count helps in understanding the total number of appointments scheduled without filtering by any specific criteria.",
            "question": "Count how many appointments have been made in total."
        },
        {
            "sample_id": 3911,
            "gold_sql": "SELECT count(patient) FROM stay WHERE room  =  112",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(stay.patient) FROM stay WHERE stay.room = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of patients currently staying in a specific room from the 'stay' table. The placeholder in the WHERE clause represents the room number being queried.",
            "question": "How many patients stay in room 112?"
        },
        {
            "sample_id": 3921,
            "gold_sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
            "gold_complexity": 9,
            "vt": "SELECT physician.name, COUNT(*) FROM physician JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY physician.employeeid",
            "ba": "The virtual table provides a summary of physicians and the number of patients assigned to each physician as their primary care provider (PCP). It joins the 'physician' table with the 'patient' table based on the physician's employee ID and the patient's PCP identifier, grouping the results by physician to count the number of patients associated with each one.",
            "question": "How many patients do each physician take care of? List their names and number of patients they take care of."
        },
        {
            "sample_id": 3909,
            "gold_sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT patient.name FROM patient JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY appointment.start LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of patients from the 'patient' table who have appointments. It joins the 'patient' table with the 'appointment' table based on the patient's social security number, and orders the results by the start time of the appointments. The placeholder in the LIMIT clause represents the maximum number of patient names to return.",
            "question": "What is the name of the patient who made the most recent appointment?"
        },
        {
            "sample_id": 3976,
            "gold_sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
            "gold_complexity": 14,
            "vt": "SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = \"John Wen\"",
            "ba": "The virtual table lists the names of medical procedures from the 'procedures' table that have a cost greater than a specified amount, excluding those procedures that a specific physician, identified by their name, is trained in.",
            "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?"
        },
        {
            "sample_id": 3940,
            "gold_sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
            "gold_complexity": 6,
            "vt": "SELECT physician.name FROM physician WHERE physician.position LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of physicians from the 'physician' table who hold a specific job title or role. The placeholder in the WHERE clause represents the job title being queried.",
            "question": "What are the names of the physicians who have 'senior' in their titles."
        },
        {
            "sample_id": 3900,
            "gold_sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT patient.name, patient.phone FROM appointment JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY appointment.patient HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and phone numbers of patients who have more than a specified number of appointments. It retrieves data from the 'appointment' table and joins it with the 'patient' table to access patient details, filtering the results based on the count of appointments for each patient.",
            "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients."
        },
        {
            "sample_id": 3981,
            "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
            "gold_complexity": 8,
            "vt": "SELECT physician.name FROM physician JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE department.name = '[placeholder-type:string]' OR department.name = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of physicians who are affiliated with specific departments. It retrieves data from the 'physician' table and joins it with the 'affiliated_with' table to link physicians to their respective departments. Additionally, it joins the 'department' table to filter the results based on the names of the departments provided as placeholders.",
            "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department."
        },
        {
            "sample_id": 3958,
            "gold_sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
            "gold_complexity": 7,
            "vt": "SELECT on_call.nurse FROM on_call WHERE on_call.blockfloor = [placeholder-type:numeric] AND on_call.blockcode = [placeholder-type:numeric]",
            "ba": "The virtual table lists the identifiers of nurses who are on call, filtered by specific block floor and block code statuses. The placeholders represent the numeric values for the blocked floor and blocked code.",
            "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1."
        },
        {
            "sample_id": 3990,
            "gold_sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT nurse.name FROM nurse JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse",
            "ba": "The virtual table lists the distinct names of nurses who are currently on call. It retrieves data from the 'nurse' table and joins it with the 'on_call' table to filter out the nurses that are marked as on call.",
            "question": "What are the distinct names of nurses on call?"
        },
        {
            "sample_id": 3954,
            "gold_sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
            "gold_complexity": 8,
            "vt": "SELECT affiliated_with.physician, affiliated_with.department FROM affiliated_with WHERE affiliated_with.primaryaffiliation = [placeholder-type:numeric]",
            "ba": "The virtual table describes the identifiers of physicians and their associated departments from the 'affiliated_with' table, filtered by whether the affiliation is marked as primary. The placeholder in the WHERE clause represents the primary affiliation status.",
            "question": "What are each physician's employee id and department id primarily affiliated."
        },
        {
            "sample_id": 3942,
            "gold_sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT undergoes.patient FROM undergoes ORDER BY undergoes.dateundergoes LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the patients who have undergone procedures, sorted by the date of the procedures performed. The placeholder in the LIMIT clause allows for specifying the maximum number of patients to retrieve.",
            "question": "Which patient is undergoing the most recent treatment?"
        },
        {
            "sample_id": 3956,
            "gold_sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT department.name FROM affiliated_with JOIN department AS T2 ON T1.department = T2.departmentid WHERE affiliated_with.primaryaffiliation = [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of departments from the 'department' table that are associated with physicians in the 'affiliated_with' table, filtered by whether the affiliation is marked as primary. The placeholder in the WHERE clause represents the primary affiliation status.",
            "question": "What are the names of departments that have primarily affiliated physicians."
        },
        {
            "sample_id": 3953,
            "gold_sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
            "gold_complexity": 8,
            "vt": "SELECT affiliated_with.physician, affiliated_with.department FROM affiliated_with WHERE affiliated_with.primaryaffiliation = [placeholder-type:numeric]",
            "ba": "The virtual table describes the identifiers of physicians and their associated departments from the 'affiliated_with' table, filtered by whether the affiliation is marked as primary. The placeholder in the WHERE clause represents the primary affiliation status.",
            "question": "List the physicians' employee ids together with their primary affiliation departments' ids."
        },
        {
            "sample_id": 3970,
            "gold_sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(procedures.cost) FROM physician JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE physician.name = None.\"john wen\"",
            "ba": "The virtual table calculates the average cost of medical procedures that a specific physician, identified by their name, is trained to perform. It involves joining the 'physician' table with the 'trained_in' table to link physicians with their respective treatments, and then joining with the 'procedures' table to access the cost of those treatments.",
            "question": "Compute the mean price of procedures physician John Wen was trained in."
        },
        {
            "sample_id": 3908,
            "gold_sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
            "gold_complexity": 10,
            "vt": "SELECT physician.name, department.name FROM physician JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE affiliated_with.primaryaffiliation = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of physicians along with the names of the departments they are primarily affiliated with. The query joins the 'physician' table with the 'affiliated_with' table to link physicians to their departments, filtering for those with a primary affiliation indicated by a placeholder.",
            "question": "What are the name and primarily affiliated department name of each physician?"
        },
        {
            "sample_id": 3910,
            "gold_sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT patient.name FROM patient JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY appointment.start LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of patients from the 'patient' table who have scheduled appointments. It joins the 'patient' table with the 'appointment' table based on the patient's social security number, ensuring that only patients with appointments are included. The results are ordered by the start time of the appointments, and a limit is applied to restrict the number of results returned.",
            "question": "Find the name of the patient who made the appointment with the most recent start date."
        },
        {
            "sample_id": 3983,
            "gold_sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
            "gold_complexity": 9,
            "vt": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'",
            "ba": "The virtual table lists the names of patients who have not been prescribed a specific medication, 'Procrastin-X'. It does this by selecting all patient names and excluding those who have a record in the 'Prescribes' table for that medication.",
            "question": "Find the names of patients who are not using the medication of Procrastin-X."
        },
        {
            "sample_id": 3895,
            "gold_sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT physician.name, physician.position FROM department JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY department.departmentid ORDER BY COUNT(department.departmentid) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and positions of physicians who are heads of departments. It retrieves this information by joining the 'department' table with the 'physician' table based on the head of the department. The results are grouped by department and ordered by the count of departments, limiting the output to a specified number of records.",
            "question": "what is the name and position of the head whose department has least number of employees?"
        },
        {
            "sample_id": 3951,
            "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT physician.name FROM physician JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY prescribes.dose LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of physicians from the 'physician' table who have prescribed medications, ordered by the dosage of the medications they prescribed. The placeholder in the LIMIT clause allows for specifying the maximum number of physician names to return.",
            "question": "What are the names of the physician who prescribed the highest dose?"
        },
        {
            "sample_id": 3929,
            "gold_sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT room.blockcode FROM room WHERE room.unavailable = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct block codes from the 'room' table where the room is marked as unavailable. The placeholder in the WHERE clause represents the status indicating whether the room is unavailable or not.",
            "question": "What are the unique block codes that have available rooms?"
        },
        {
            "sample_id": 3952,
            "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT physician.name FROM physician JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY prescribes.dose LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of physicians from the 'physician' table who have prescribed medications, ordered by the dosage of the medications they prescribed. The placeholder in the LIMIT clause allows for specifying the maximum number of physician names to return.",
            "question": "Find the physician who prescribed the highest dose. What is his or her name?"
        },
        {
            "sample_id": 3916,
            "gold_sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
            "gold_complexity": 9,
            "vt": "SELECT medication.name FROM stay JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE stay.room = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of medications prescribed to patients who are currently staying in a specific room. It joins the 'stay' table with the 'patient' table to identify patients in that room, then joins with the 'prescribes' table to find the medications prescribed to those patients, and finally joins with the 'medication' table to retrieve the names of those medications. The placeholder in the WHERE clause represents the room number.",
            "question": "What is the name of the medication used for the patient staying in room 111?"
        },
        {
            "sample_id": 3946,
            "gold_sql": "SELECT DISTINCT name FROM nurse ORDER BY name",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT nurse.name FROM nurse ORDER BY nurse.name",
            "ba": "The virtual table lists the unique names of nurses from the 'nurse' table, sorted in alphabetical order. This allows users to see all the distinct names of nurses available in the database.",
            "question": "What is the alphabetically ordered list of all the distinct names of nurses?"
        },
        {
            "sample_id": 3905,
            "gold_sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
            "gold_complexity": 7,
            "vt": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
            "ba": "The virtual table lists the names of physicians who do not have any scheduled appointments. It retrieves the names from the 'physician' table and excludes those who are present in the 'appointment' table by performing a join operation.",
            "question": "List the name of physicians who never took any appointment."
        },
        {
            "sample_id": 3903,
            "gold_sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
            "gold_complexity": 5,
            "vt": "SELECT physician.name FROM appointment JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
            "ba": "The virtual table describes the names of physicians who are conducting appointments. It retrieves the physician's name from the 'physician' table by joining it with the 'appointment' table based on the physician's identifier.",
            "question": "List the name of physicians who took some appointment."
        },
        {
            "sample_id": 3979,
            "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
            "gold_complexity": 9,
            "vt": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry'",
            "ba": "The virtual table lists the names of physicians who are affiliated with both the 'Surgery' and 'Psychiatry' departments. It uses an INTERSECT operation to find common physicians in both departments.",
            "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments."
        },
        {
            "sample_id": 3972,
            "gold_sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
            "gold_complexity": 8,
            "vt": "SELECT procedures.name FROM physician JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE physician.name = None.\"john wen\"",
            "ba": "The virtual table describes the names of medical procedures that a specific physician is trained in. It retrieves this information by joining the 'physician' table with the 'trained_in' table to link physicians to their treatments, and then further joining with the 'procedures' table to get the names of those procedures. The placeholder in the WHERE clause represents the physician's name.",
            "question": "What are the names of procedures physician John Wen was trained in?"
        },
        {
            "sample_id": 3968,
            "gold_sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT physician.name FROM physician JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY procedures.cost LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of physicians who are trained in specific medical procedures, ordered by the cost of those procedures. The query joins the 'physician' table with the 'trained_in' table to find which physicians are trained in which procedures, and then it joins with the 'procedures' table to access the cost of each procedure. The result is limited to a specified number of entries.",
            "question": "Which physician was trained in the procedure that costs the most."
        },
        {
            "sample_id": 3938,
            "gold_sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), medication.name FROM medication JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY medication.brand",
            "ba": "The virtual table summarizes the count of prescribed medications grouped by their brand names from the 'medication' table. It joins the 'medication' table with the 'prescribes' table to correlate the medication codes with the prescriptions made.",
            "question": "How many medications are prescribed for each brand?"
        },
        {
            "sample_id": 3931,
            "gold_sql": "SELECT count(DISTINCT roomtype) FROM room",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT roomtype) FROM room",
            "ba": "The virtual table counts the distinct types of rooms available in the 'room' table.",
            "question": "How many different types of rooms are there?"
        },
        {
            "sample_id": 3986,
            "gold_sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(*) FROM patient WHERE NOT patient.ssn IN (SELECT prescribes.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X')",
            "ba": "The virtual table counts the number of patients who have not been prescribed a specific medication, identified by its name. It does this by checking the 'patient' table against a subquery that retrieves patients who have received the medication 'Procrastin-X' from the 'prescribes' table, which is joined with the 'medication' table to filter by medication name.",
            "question": "How many patients are not using Procrastin-X as medication?"
        },
        {
            "sample_id": 3893,
            "gold_sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT department.head FROM department GROUP BY department.departmentid ORDER BY COUNT(department.departmentid) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the heads of departments from the 'department' table, grouping the results by department identifier. It orders the groups by the count of department identifiers and limits the results to a specified number of entries.",
            "question": "What is the employee id of the head whose department has the least number of employees?"
        },
        {
            "sample_id": 3930,
            "gold_sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT room.blockcode FROM room WHERE room.unavailable = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct block codes from the 'room' table where the room is marked as unavailable. The placeholder in the WHERE clause represents the status indicating whether the room is unavailable or not.",
            "question": "Tell me the distinct block codes where some rooms are available."
        },
        {
            "sample_id": 3894,
            "gold_sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT department.head FROM department GROUP BY department.departmentid ORDER BY COUNT(department.departmentid) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the heads of departments from the 'department' table, grouping the results by department identifier. It orders the groups by the count of department identifiers and limits the results to a specified number of entries.",
            "question": "Tell me the employee id of the head of the department with the least employees."
        },
        {
            "sample_id": 3912,
            "gold_sql": "SELECT count(patient) FROM stay WHERE room  =  112",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(stay.patient) FROM stay WHERE stay.room = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of patients currently staying in a specific room from the 'stay' table. The placeholder in the WHERE clause represents the room number being queried.",
            "question": "Count the number of patients who stayed in room 112."
        },
        {
            "sample_id": 3935,
            "gold_sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT physician.name, physician.position FROM physician JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE medication.brand = None.\"x\"",
            "ba": "The virtual table describes the distinct names and positions of physicians who have prescribed a specific medication brand. The placeholders in the WHERE clause represent the brand name of the medication.",
            "question": "Find the name and position of physicians who prescribe some medication whose brand is X?"
        },
        {
            "sample_id": 3961,
            "gold_sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC",
            "gold_complexity": 8,
            "vt": "SELECT procedures.name, procedures.cost FROM procedures ORDER BY procedures.cost",
            "ba": "The virtual table lists the names and costs of medical procedures from the 'procedures' table, sorted by the cost of each procedure.",
            "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest."
        },
        {
            "sample_id": 3964,
            "gold_sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT procedures.name FROM procedures ORDER BY procedures.cost LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of medical procedures from the 'procedures' table, ordered by their associated costs. The placeholder in the LIMIT clause allows the user to specify the maximum number of procedure names to retrieve.",
            "question": "What are the three most costly procedures?"
        },
        {
            "sample_id": 3913,
            "gold_sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(patient.ssn) FROM patient JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE physician.name = None.\"john dorian\"",
            "ba": "The virtual table counts the number of patients who have been prescribed medication by a specific physician. It joins the 'patient' table with the 'prescribes' table to link patients with their prescriptions, and then further joins with the 'physician' table to filter by the physician's name.",
            "question": "How many patients' prescriptions are made by physician John Dorian?"
        },
        {
            "sample_id": 3963,
            "gold_sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT procedures.name FROM procedures ORDER BY procedures.cost LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of medical procedures from the 'procedures' table, ordered by their associated costs. The placeholder in the LIMIT clause allows the user to specify the maximum number of procedure names to retrieve.",
            "question": "Find the three most expensive procedures."
        },
        {
            "sample_id": 3898,
            "gold_sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
            "gold_complexity": 5,
            "vt": "SELECT patient.name FROM appointment JOIN patient AS T2 ON T1.patient = T2.ssn",
            "ba": "The virtual table describes the names of patients from the 'patient' table who have appointments scheduled. It uses a JOIN operation to connect the 'appointment' table with the 'patient' table based on the patient's Social Security Number (ssn).",
            "question": "List the names of patients who have made appointments."
        },
        {
            "sample_id": 3901,
            "gold_sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT appointment.appointmentid FROM appointment ORDER BY appointment.start LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers of appointments from the 'appointment' table, ordered by their start time. The placeholder in the LIMIT clause allows for specifying the maximum number of appointments to retrieve.",
            "question": "Find the id of the appointment with the most recent start date?"
        },
        {
            "sample_id": 3922,
            "gold_sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
            "gold_complexity": 9,
            "vt": "SELECT physician.name, COUNT(*) FROM physician JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY physician.employeeid",
            "ba": "The virtual table provides a summary of physicians and the number of patients assigned to each physician as their primary care provider (PCP). It joins the 'physician' table with the 'patient' table to count how many patients are linked to each physician based on the PCP identifier.",
            "question": "Return the name of each physician and the number of patients he or she treats."
        }
    ],
    "loan_1": [
        {
            "sample_id": 3027,
            "gold_sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(customer.acc_bal) FROM customer WHERE customer.state = '[placeholder-type:string]' OR customer.state = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total account balance of customers from the 'customer' table who reside in either of two specified states. The placeholders in the WHERE clause represent the names of the states being queried.",
            "question": "Find the total account balance of each customer from Utah or Texas."
        },
        {
            "sample_id": 3057,
            "gold_sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
            "gold_complexity": 11,
            "vt": "SELECT customer.cust_name, customer.acc_type FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY customer.cust_name HAVING SUM(loan.amount) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and account types of customers from the 'customer' table who have taken loans, with a condition that the total amount of loans they have taken exceeds a specified value. The query joins the 'customer' table with the 'loan' table based on the customer ID, groups the results by customer name, and filters the groups based on the sum of loan amounts using a placeholder for numeric values.",
            "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000."
        },
        {
            "sample_id": 3064,
            "gold_sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT bank.bname FROM bank JOIN loan AS T2 ON T1.branch_id = T2.branch_id",
            "ba": "The virtual table lists the unique names of bank branches that have issued loans. It retrieves data from the 'bank' table and joins it with the 'loan' table based on the branch identifier, ensuring that only branches associated with loans are included in the results.",
            "question": "What are the names of the different banks that have provided loans?"
        },
        {
            "sample_id": 3028,
            "gold_sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(customer.acc_bal) FROM customer WHERE customer.state = '[placeholder-type:string]' OR customer.state = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total account balance of customers from the 'customer' table who reside in either of two specified states. The placeholders in the WHERE clause represent the names of the states being queried.",
            "question": "What are the total account balances for each customer from Utah or Texas?"
        },
        {
            "sample_id": 3067,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
            "gold_complexity": 7,
            "vt": "SELECT customer.cust_name FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan.amount > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers from the 'customer' table who have taken out loans exceeding a specified amount. The query joins the 'customer' table with the 'loan' table based on the customer ID, ensuring that only those customers who have loans are considered. The placeholder in the WHERE clause represents the minimum loan amount that is being queried.",
            "question": "Find the the name of the customers who have a loan with amount more than 3000."
        },
        {
            "sample_id": 3053,
            "gold_sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
            "gold_complexity": 9,
            "vt": "SELECT SUM(loan.amount), bank.bname FROM bank JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY bank.bname",
            "ba": "The virtual table summarizes the total loan amounts issued by each bank branch. It combines data from the 'bank' and 'loan' tables, grouping the results by the branch name to provide a clear overview of the total loans per branch.",
            "question": "Find the total amount of loans offered by each bank branch."
        },
        {
            "sample_id": 3046,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customer.cust_name FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY customer.cust_name ORDER BY SUM(loan.amount) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers from the 'customer' table who have taken loans, grouped by their names and ordered by the total loan amount they have taken. The placeholder in the LIMIT clause represents the maximum number of customer names to return.",
            "question": "What is the name of the customer who has greatest total loan amount?"
        },
        {
            "sample_id": 3055,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT customer.cust_name FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY customer.cust_name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers from the 'customer' table who have taken more than a specified number of loans. The query joins the 'customer' table with the 'loan' table based on the customer ID, groups the results by customer name, and filters those groups to include only customers with a loan count exceeding a placeholder value.",
            "question": "Find the name of customers who have more than one loan."
        },
        {
            "sample_id": 3048,
            "gold_sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT bank.state FROM bank GROUP BY bank.state ORDER BY SUM(bank.no_of_customers) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of states from the 'bank' table, grouped by state and ordered by the total number of customers in each state. The placeholder in the LIMIT clause allows for specifying the maximum number of states to return.",
            "question": "Which state has the greatest total number of bank customers?"
        },
        {
            "sample_id": 3069,
            "gold_sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
            "gold_complexity": 9,
            "vt": "SELECT bank.bname, bank.city FROM bank JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE loan.loan_type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and cities of bank branches that have issued loans of a specific type. The query joins the 'bank' and 'loan' tables based on the branch identifier, filtering the results to only include branches that have issued loans matching the specified loan type.",
            "question": "Find the city and name of bank branches that provide business loans."
        },
        {
            "sample_id": 3036,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
            "gold_complexity": 8,
            "vt": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'",
            "ba": "The virtual table identifies customers who have taken both 'Mortgages' and 'Auto' loans from the bank. It does this by joining the 'customer' and 'loan' tables on the customer ID, filtering for each loan type, and then finding the intersection of the two sets of customer names.",
            "question": "What are the names of customers who have taken both Mortgage and Auto loans?"
        },
        {
            "sample_id": 3002,
            "gold_sql": "SELECT sum(no_of_customers) FROM bank",
            "gold_complexity": 4,
            "vt": "SELECT SUM(bank.no_of_customers) FROM bank",
            "ba": "The virtual table calculates the total number of customers across all bank branches from the 'bank' table. The placeholder in the SUM function represents the total count of customers associated with each branch.",
            "question": "What is the total number of customers across banks?"
        },
        {
            "sample_id": 3015,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
            "gold_complexity": 9,
            "vt": "SELECT customer.cust_name FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY customer.cust_name ORDER BY SUM(loan.amount)",
            "ba": "The virtual table describes the names of customers from the 'customer' table who have taken loans, grouped by their names and ordered by the total amount of loans they have taken. The placeholder in the JOIN clause represents the relationship between customers and their loans.",
            "question": "List the name of all different customers who have some loan sorted by their total loan amount."
        },
        {
            "sample_id": 3049,
            "gold_sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
            "gold_complexity": 10,
            "vt": "SELECT AVG(customer.acc_bal), customer.acc_type FROM customer WHERE customer.credit_score < [placeholder-type:numeric] GROUP BY customer.acc_type",
            "ba": "The virtual table calculates the average account balance of customers from the 'customer' table, grouped by account type, for those customers whose credit score is below a specified threshold. The placeholder in the WHERE clause represents the credit score limit.",
            "question": "For each account type, find the average account balance of customers with credit score lower than 50."
        },
        {
            "sample_id": 3029,
            "gold_sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
            "gold_complexity": 7,
            "vt": "SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'",
            "ba": "The virtual table identifies customers who hold both saving and checking accounts in the 'customer' table. It uses an INTERSECT operation to find common customer names between two separate queries, one filtering for saving account holders and the other for checking account holders.",
            "question": "Find the name of customers who have both saving and checking account types."
        },
        {
            "sample_id": 3039,
            "gold_sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT bank.bname FROM bank ORDER BY bank.no_of_customers LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of bank branches from the 'bank' table, ordered by the total number of customers associated with each branch. The placeholder in the LIMIT clause allows for specifying the maximum number of branch names to retrieve.",
            "question": "Find the branch name of the bank that has the most number of customers."
        },
        {
            "sample_id": 3045,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customer.cust_name FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY customer.cust_name ORDER BY SUM(loan.amount) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers from the 'customer' table who have taken loans, grouped by their names and ordered by the total loan amount they have taken. The placeholder in the LIMIT clause represents the maximum number of customer names to return.",
            "question": "Find the name of customer who has the highest amount of loans."
        },
        {
            "sample_id": 3020,
            "gold_sql": "SELECT count(DISTINCT city) FROM bank",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT city) FROM bank",
            "ba": "The virtual table counts the distinct cities from the 'bank' table, which represents the different locations where bank branches are situated.",
            "question": "In how many different cities are banks located?"
        },
        {
            "sample_id": 3071,
            "gold_sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
            "gold_complexity": 8,
            "vt": "SELECT bank.bname FROM loan JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE customer.credit_score < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of bank branches from the 'bank' table where customers with a credit score below a specified threshold have taken loans. The query joins the 'loan' table with the 'bank' table to identify the branches associated with the loans and further joins with the 'customer' table to filter based on the credit score of the customers.",
            "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100."
        },
        {
            "sample_id": 2999,
            "gold_sql": "SELECT count(*) FROM bank",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM bank",
            "ba": "The virtual table provides the total number of bank branches recorded in the 'bank' table.",
            "question": "How many bank branches are there?"
        },
        {
            "sample_id": 3076,
            "gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(customer.credit_score) FROM customer WHERE customer.cust_id IN (SELECT customer.cust_id FROM loan)",
            "ba": "The virtual table calculates the average credit score of customers who have taken out loans. It retrieves the credit scores from the 'customer' table, filtering for those customers whose IDs are present in the 'loan' table, indicating they have an active loan.",
            "question": "What is the average credit score for customers who have taken a loan?"
        },
        {
            "sample_id": 3051,
            "gold_sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
            "gold_complexity": 10,
            "vt": "SELECT SUM(customer.acc_bal), customer.state FROM customer WHERE customer.credit_score > [placeholder-type:numeric] GROUP BY customer.state",
            "ba": "The virtual table summarizes the total account balance of customers grouped by their state from the 'customer' table, filtering for those with a credit score above a specified threshold. The placeholder in the WHERE clause represents the minimum credit score required.",
            "question": "For each state, find the total account balance of customers whose credit score is above 100."
        },
        {
            "sample_id": 3044,
            "gold_sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT customer.cust_name, customer.acc_type, customer.acc_bal FROM customer ORDER BY customer.credit_score LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names, account types, and balances of customers from the 'customer' table, ordered by their credit scores. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?"
        },
        {
            "sample_id": 3032,
            "gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
            "gold_complexity": 7,
            "vt": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving'",
            "ba": "The virtual table lists the names of customers from the 'customer' table who do not have a savings account. The query uses the EXCEPT clause to exclude customers with an account type of 'saving'.",
            "question": "What are the names of customers who do not have saving accounts?"
        },
        {
            "sample_id": 3068,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
            "gold_complexity": 7,
            "vt": "SELECT customer.cust_name FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan.amount > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers from the 'customer' table who have taken out loans exceeding a specified amount. The query joins the 'customer' table with the 'loan' table based on the customer ID, ensuring that only those customers who have loans are considered. The placeholder in the WHERE clause represents the minimum loan amount that is being queried.",
            "question": "What are the names of customers who have a loan of more than 3000 in amount?"
        },
        {
            "sample_id": 3011,
            "gold_sql": "SELECT bname FROM bank WHERE state  =  'New York'",
            "gold_complexity": 6,
            "vt": "SELECT bank.bname FROM bank WHERE bank.state = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of bank branches from the 'bank' table that are located in a specific state. The placeholder in the WHERE clause represents the state name.",
            "question": "Find the branch names of banks in the New York state."
        },
        {
            "sample_id": 3059,
            "gold_sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT bank.bname FROM bank JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY bank.bname ORDER BY SUM(loan.amount) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of bank branches from the 'bank' table, which are joined with the 'loan' table to aggregate the total loan amounts issued by each branch. The results are grouped by branch name and ordered by the sum of loan amounts in descending order, with a limit on the number of branches returned based on a specified numeric placeholder.",
            "question": "Find the name of bank branch that provided the greatest total amount of loans."
        },
        {
            "sample_id": 3014,
            "gold_sql": "SELECT cust_name FROM customer ORDER BY acc_bal",
            "gold_complexity": 6,
            "vt": "SELECT customer.cust_name FROM customer ORDER BY customer.acc_bal",
            "ba": "The virtual table lists the names of customers from the 'customer' table, ordered by their account balance in ascending order.",
            "question": "What are the names of all customers, ordered by account balance?"
        },
        {
            "sample_id": 3075,
            "gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(customer.credit_score) FROM customer WHERE customer.cust_id IN (SELECT customer.cust_id FROM loan)",
            "ba": "The virtual table calculates the average credit score of customers who have taken out loans from any bank branch. It filters the customers based on their unique identifiers that are present in the loan table, ensuring that only those customers who have an associated loan are considered in the average calculation.",
            "question": "Find the average credit score of the customers who have some loan."
        },
        {
            "sample_id": 3077,
            "gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(customer.credit_score) FROM customer WHERE NOT customer.cust_id IN (SELECT customer.cust_id FROM loan)",
            "ba": "The virtual table calculates the average credit score of customers from the 'customer' table who do not have any loans. The subquery identifies customers who have taken loans, and the main query computes the average credit score for those customers who are not in that list.",
            "question": "Find the average credit score of the customers who do not have any loan."
        },
        {
            "sample_id": 3043,
            "gold_sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT customer.cust_name, customer.acc_type, customer.acc_bal FROM customer ORDER BY customer.credit_score LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names, account types, and balances of customers from the 'customer' table, ordered by their credit scores. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "Find the name, account type, and account balance of the customer who has the highest credit score."
        },
        {
            "sample_id": 3052,
            "gold_sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
            "gold_complexity": 10,
            "vt": "SELECT SUM(customer.acc_bal), customer.state FROM customer WHERE customer.credit_score > [placeholder-type:numeric] GROUP BY customer.state",
            "ba": "The virtual table summarizes the total account balance of customers grouped by their state, filtering for those with a credit score above a specified threshold. The placeholder in the WHERE clause represents the minimum credit score required.",
            "question": "What is the total account balance for customers with a credit score of above 100 for the different states?"
        },
        {
            "sample_id": 3073,
            "gold_sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
            "gold_complexity": 7,
            "vt": "SELECT SUM(loan.amount) FROM bank JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE bank.state = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total amount of loans issued by bank branches located in a specific state. It joins the 'bank' and 'loan' tables on the branch identifier to aggregate the loan amounts for branches in the specified state.",
            "question": "Find the total amount of loans provided by bank branches in the state of New York."
        },
        {
            "sample_id": 3016,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
            "gold_complexity": 9,
            "vt": "SELECT customer.cust_name FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY customer.cust_name ORDER BY SUM(loan.amount)",
            "ba": "The virtual table describes the names of customers from the 'customer' table who have taken loans, grouped by their names and ordered by the total amount of loans they have taken. The query joins the 'customer' table with the 'loan' table to aggregate the loan amounts for each customer.",
            "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?"
        },
        {
            "sample_id": 3070,
            "gold_sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
            "gold_complexity": 9,
            "vt": "SELECT bank.bname, bank.city FROM bank JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE loan.loan_type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and cities of bank branches that have issued loans of a specific type. The query joins the 'bank' table with the 'loan' table based on the branch identifier, filtering the results to only include loans of the specified type.",
            "question": "What are the names and cities of bank branches that offer loans for business?"
        },
        {
            "sample_id": 3007,
            "gold_sql": "SELECT avg(no_of_customers) FROM bank",
            "gold_complexity": 4,
            "vt": "SELECT AVG(bank.no_of_customers) FROM bank",
            "ba": "The virtual table calculates the average number of customers across all bank branches from the 'bank' table. The placeholder in the SELECT clause represents the average value of the 'no_of_customers' column.",
            "question": "Find the average number of customers cross all banks."
        },
        {
            "sample_id": 3078,
            "gold_sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(customer.credit_score) FROM customer WHERE NOT customer.cust_id IN (SELECT customer.cust_id FROM loan)",
            "ba": "The virtual table calculates the average credit score of customers from the 'customer' table who do not have any loans. The subquery identifies customers who have taken loans, and the main query computes the average credit score for those customers who are not in that list.",
            "question": "What is the average credit score for customers who have never taken a loan?"
        },
        {
            "sample_id": 3074,
            "gold_sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
            "gold_complexity": 7,
            "vt": "SELECT SUM(loan.amount) FROM bank JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE bank.state = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total amount of loans issued by bank branches located in a specific state. It joins the 'bank' and 'loan' tables on the branch identifier to aggregate the loan amounts for branches in the specified state.",
            "question": "What is the total amount of money loaned by banks in New York state?"
        },
        {
            "sample_id": 3035,
            "gold_sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
            "gold_complexity": 8,
            "vt": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'",
            "ba": "The virtual table identifies customers who have taken both 'Mortgages' and 'Auto' loans from the bank. It does this by joining the 'customer' and 'loan' tables on the customer ID, filtering for each loan type, and then finding the intersection of the two sets of customer names.",
            "question": "Find the name of customers who have loans of both Mortgages and Auto."
        },
        {
            "sample_id": 3034,
            "gold_sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
            "gold_complexity": 8,
            "vt": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages'",
            "ba": "The virtual table describes the names of customers from the 'customer' table who do not have any mortgages. It uses an EXCEPT clause to exclude those customers who are identified in the 'loan' table as having taken out a mortgage loan.",
            "question": "What are the names of customers who have not taken a Mortage loan?"
        },
        {
            "sample_id": 3065,
            "gold_sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customer.cust_name, customer.credit_score FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "ba": "The virtual table describes the distinct names and credit scores of customers who have taken loans from the bank. It retrieves this information by joining the 'customer' table with the 'loan' table based on the customer identifier, ensuring that only unique customer names and their corresponding credit scores are displayed.",
            "question": "Find the name and credit score of the customers who have some loans."
        },
        {
            "sample_id": 3022,
            "gold_sql": "SELECT count(DISTINCT state) FROM bank",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT state) FROM bank",
            "ba": "The virtual table counts the distinct states from the 'bank' table, which represents the different states where bank branches are located.",
            "question": "In how many different states are banks located?"
        },
        {
            "sample_id": 3058,
            "gold_sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
            "gold_complexity": 11,
            "vt": "SELECT customer.cust_name, customer.acc_type FROM customer JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY customer.cust_name HAVING SUM(loan.amount) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and account types of customers from the 'customer' table who have taken loans, with a condition that the total amount of loans they have taken exceeds a specified value. The query joins the 'customer' table with the 'loan' table based on the customer ID, groups the results by customer name, and filters the groups based on the sum of loan amounts using a placeholder for numeric values.",
            "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?"
        },
        {
            "sample_id": 3008,
            "gold_sql": "SELECT avg(no_of_customers) FROM bank",
            "gold_complexity": 4,
            "vt": "SELECT AVG(bank.no_of_customers) FROM bank",
            "ba": "The virtual table calculates the average number of customers across all bank branches from the 'bank' table. The placeholder in the SELECT clause represents the average value of the 'no_of_customers' column.",
            "question": "What is the average number of bank customers?"
        },
        {
            "sample_id": 3010,
            "gold_sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
            "gold_complexity": 8,
            "vt": "SELECT bank.city, bank.state FROM bank WHERE bank.bname = '[placeholder-type:string]'",
            "ba": "The virtual table describes the city and state of a bank branch from the 'bank' table based on the specified branch name. The placeholder in the WHERE clause represents the name of the bank branch.",
            "question": "What city and state is the bank with the name morningside in?"
        },
        {
            "sample_id": 3009,
            "gold_sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
            "gold_complexity": 8,
            "vt": "SELECT bank.city, bank.state FROM bank WHERE bank.bname = '[placeholder-type:string]'",
            "ba": "The virtual table describes the city and state of a bank branch from the 'bank' table based on the specified branch name. The placeholder in the WHERE clause represents the name of the bank branch.",
            "question": "Find the city and state of the bank branch named morningside."
        },
        {
            "sample_id": 3003,
            "gold_sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(bank.no_of_customers) FROM bank WHERE bank.city = '[placeholder-type:string]'",
            "ba": "The virtual table summarizes the total number of customers from all bank branches located in a specific city. The placeholder in the WHERE clause represents the name of the city for which the customer count is being queried.",
            "question": "Find the number of customers in the banks at New York City."
        },
        {
            "sample_id": 3017,
            "gold_sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
            "gold_complexity": 10,
            "vt": "SELECT customer.state, customer.acc_type, customer.credit_score FROM customer WHERE customer.no_of_loans = [placeholder-type:numeric]",
            "ba": "The virtual table describes the states, account types, and credit scores of customers from the 'customer' table who have taken a specific number of loans. The placeholder in the WHERE clause represents the number of loans taken by the customers.",
            "question": "Find the state, account type, and credit score of the customer whose number of loan is 0."
        }
    ],
    "network_2": [
        {
            "sample_id": 4395,
            "gold_sql": "SELECT avg(age) FROM Person",
            "gold_complexity": 4,
            "vt": "SELECT AVG(person.age) FROM person",
            "ba": "The virtual table calculates the average age of individuals from the 'person' table.",
            "question": "What is the average age for all person?"
        },
        {
            "sample_id": 4408,
            "gold_sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
            "gold_complexity": 7,
            "vt": "SELECT person.age FROM person WHERE person.job = '[placeholder-type:string]' AND person.name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the age of a person from the 'person' table based on their job title and name. The placeholders in the WHERE clause represent the specific job title and the person's name.",
            "question": "What is the age of the doctor named Zach?"
        },
        {
            "sample_id": 4463,
            "gold_sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
            "gold_complexity": 13,
            "vt": "SELECT person.age FROM person JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE personfriend.name = '[placeholder-type:string]' AND personfriend.year = (SELECT MAX(personfriend.year) FROM PersonFriend WHERE name = 'Zach')",
            "ba": "The virtual table retrieves the age of a person from the 'person' table who is a friend of another specified person, filtering by the year when the friendship was established. The query also ensures that it only considers the most recent year of friendship for a specific individual.",
            "question": "What is the age of the friend of Zach with longest year relationship?"
        },
        {
            "sample_id": 4426,
            "gold_sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*) FROM person WHERE person.age > (SELECT MAX(person.age) FROM person WHERE job = 'engineer')",
            "ba": "The virtual table counts the number of persons from the 'person' table whose age is greater than the maximum age of persons with the job title 'engineer'.",
            "question": "How many people are older than every engineer?"
        },
        {
            "sample_id": 4432,
            "gold_sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
            "gold_complexity": 8,
            "vt": "SELECT person.name FROM person WHERE person.gender = '[placeholder-type:string]' ORDER BY person.age",
            "ba": "The virtual table describes the names of individuals from the 'person' table filtered by a specific gender. The results are ordered by the age of the individuals.",
            "question": "What is the name and age of every male? Order the results by age."
        },
        {
            "sample_id": 4476,
            "gold_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT personfriend.name FROM personfriend JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE person.name = '[placeholder-type:string]' AND personfriend.name <> '[placeholder-type:string]'",
            "ba": "The virtual table identifies distinct names of friends of a specific person from the 'personfriend' table, while ensuring that the person's own name is excluded from the results. It involves joining the 'personfriend' table with the 'person' table to access additional details about the person and their friends.",
            "question": "What are the names of all of Alice's friends of friends?"
        },
        {
            "sample_id": 4411,
            "gold_sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM person WHERE person.age > [placeholder-type:numeric] AND person.job = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of persons from the 'person' table who are older than a specified age and have a specific job title. The placeholders represent the age threshold and the job title.",
            "question": "How many people whose age is greater 30 and job is engineer?"
        },
        {
            "sample_id": 4397,
            "gold_sql": "SELECT count(DISTINCT city) FROM Person",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT city) FROM person",
            "ba": "The virtual table counts the distinct cities from the 'person' table, providing insight into the number of unique locations where individuals reside.",
            "question": "How many different cities are they from?"
        },
        {
            "sample_id": 4468,
            "gold_sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
            "gold_complexity": 16,
            "vt": "SELECT person.name, person.age, person.job FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE personfriend.friend = '[placeholder-type:string]' AND personfriend.year = (SELECT MAX(personfriend.year) FROM PersonFriend WHERE friend = 'Alice')",
            "ba": "The virtual table describes the names, ages, and job titles of persons from the 'person' table who have a specific friend and whose friendship was established in the most recent year with that friend. The placeholders in the WHERE clause represent the friend's name and the year of friendship.",
            "question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?"
        },
        {
            "sample_id": 4401,
            "gold_sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
            "gold_complexity": 9,
            "vt": "SELECT person.name FROM person WHERE person.age = (SELECT MAX(person.age) FROM person)",
            "ba": "The virtual table identifies the name of the oldest person from the 'person' table. It uses a subquery to find the maximum age from the same table, ensuring that only the name of the person with that age is selected.",
            "question": "Who is the oldest person?"
        },
        {
            "sample_id": 4413,
            "gold_sql": "SELECT avg(age) ,  gender FROM Person GROUP BY gender",
            "gold_complexity": 8,
            "vt": "SELECT AVG(person.age), person.gender FROM person GROUP BY person.gender",
            "ba": "The virtual table calculates the average age of individuals grouped by their gender from the 'person' table.",
            "question": "What is the average age for each gender?"
        },
        {
            "sample_id": 4402,
            "gold_sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
            "gold_complexity": 9,
            "vt": "SELECT person.name FROM person WHERE person.age = (SELECT MAX(person.age) FROM person)",
            "ba": "The virtual table identifies the name of the oldest person from the 'person' table. It uses a subquery to find the maximum age from the same table, ensuring that only the name of the person with that age is selected.",
            "question": "What is the name of the person who is the oldest?"
        },
        {
            "sample_id": 4403,
            "gold_sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
            "gold_complexity": 10,
            "vt": "SELECT person.name FROM person WHERE person.job = '[placeholder-type:string]' AND person.age = (SELECT MAX(person.age) FROM person WHERE job = 'student')",
            "ba": "The virtual table retrieves the names of individuals from the 'person' table who have a specific job title and are of the same age as the oldest student. The query uses a subquery to find the maximum age of individuals with the job title 'student'.",
            "question": "Who is the oldest person whose job is student?"
        },
        {
            "sample_id": 4423,
            "gold_sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
            "gold_complexity": 13,
            "vt": "SELECT person.name FROM person WHERE person.age > (SELECT MIN(person.age) FROM person WHERE job = 'engineer') ORDER BY person.age",
            "ba": "The virtual table retrieves the names of individuals from the 'person' table who are older than the youngest engineer, sorted by their age.",
            "question": "Find the name of people whose age is greater than any engineer sorted by their age."
        },
        {
            "sample_id": 4404,
            "gold_sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
            "gold_complexity": 10,
            "vt": "SELECT person.name FROM person WHERE person.job = '[placeholder-type:string]' AND person.age = (SELECT MAX(person.age) FROM person WHERE job = 'student')",
            "ba": "The virtual table retrieves the names of individuals from the 'person' table who have a specific job title and are of a certain age. Additionally, it includes a subquery that finds the maximum age of individuals whose job is 'student'.",
            "question": "What is the name of the oldest student?"
        },
        {
            "sample_id": 4475,
            "gold_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT personfriend.name FROM personfriend JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE person.name = '[placeholder-type:string]' AND personfriend.name <> '[placeholder-type:string]'",
            "ba": "The virtual table identifies distinct names of friends of a specific person from the 'personfriend' table, while ensuring that the person's own name is excluded from the results. It involves joining the 'personfriend' table with the 'person' table to access additional details about the person and their friends.",
            "question": "Find Alice's friends of friends."
        },
        {
            "sample_id": 4449,
            "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
            "gold_complexity": 8,
            "vt": "SELECT person.name FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE personfriend.friend = '[placeholder-type:string]' AND person.gender = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of persons from the 'person' table who have a specific friend and belong to a specific gender. The placeholders in the WHERE clause represent the friend's name and the gender of the person.",
            "question": "Find the names of females who are friends with Zach"
        },
        {
            "sample_id": 4441,
            "gold_sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
            "gold_complexity": 10,
            "vt": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'",
            "ba": "The virtual table lists the names of individuals from the 'person' table who are not friends with any students. It does this by selecting all names from the 'person' table and excluding those who are friends with individuals whose job is 'student'.",
            "question": "Find the name of the person who has no student friends."
        },
        {
            "sample_id": 4427,
            "gold_sql": "SELECT name ,  job FROM Person ORDER BY name",
            "gold_complexity": 8,
            "vt": "SELECT person.name, person.job FROM person ORDER BY person.name",
            "ba": "The virtual table describes the names and job titles of individuals from the 'person' table, sorted alphabetically by their names.",
            "question": "list the name, job title of all people ordered by their names."
        },
        {
            "sample_id": 4457,
            "gold_sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT personfriend.name FROM person JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE person.age < (SELECT AVG(person.age) FROM person)",
            "ba": "The virtual table identifies distinct names of friends from the 'personfriend' table who are younger than the average age of all persons in the 'person' table. It uses a JOIN operation to connect the two tables based on the friendship relationship, filtering for those whose age is below the calculated average.",
            "question": "Who has friends that are younger than the average age?"
        },
        {
            "sample_id": 4422,
            "gold_sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), person.gender FROM person WHERE person.age < [placeholder-type:numeric] GROUP BY person.gender",
            "ba": "The virtual table provides a count of individuals grouped by gender from the 'person' table, specifically for those whose age is below a certain threshold. The placeholder in the WHERE clause represents the age limit.",
            "question": "How many people are under 40 for each gender?"
        },
        {
            "sample_id": 4444,
            "gold_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
            "gold_complexity": 8,
            "vt": "SELECT personfriend.name FROM personfriend GROUP BY personfriend.name HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of individuals from the 'personfriend' table who have a specific number of friends. The placeholder in the HAVING clause represents the count of friends that is being queried.",
            "question": "What are the names of everybody who has exactly one friend?"
        },
        {
            "sample_id": 4443,
            "gold_sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
            "gold_complexity": 8,
            "vt": "SELECT personfriend.name FROM personfriend GROUP BY personfriend.name HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of individuals from the 'personfriend' table who have a specific number of friends. The placeholder in the HAVING clause represents the count of friends that is being queried.",
            "question": "Find the person who has exactly one friend."
        },
        {
            "sample_id": 4445,
            "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
            "gold_complexity": 7,
            "vt": "SELECT personfriend.friend FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE person.name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the friends of a specific person from the 'personfriend' table. It retrieves the names of friends associated with the specified person's name. The placeholder in the WHERE clause represents the name of the person whose friends are being queried.",
            "question": "Who are the friends of Bob?"
        },
        {
            "sample_id": 4430,
            "gold_sql": "SELECT name FROM Person ORDER BY age DESC",
            "gold_complexity": 6,
            "vt": "SELECT person.name FROM person ORDER BY person.age",
            "ba": "The virtual table lists the names of individuals from the 'person' table, sorted by their age in ascending order.",
            "question": "What are the names of everybody sorted by age in descending order?"
        },
        {
            "sample_id": 4394,
            "gold_sql": "SELECT count(*) FROM Person WHERE gender  =  'female'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM person WHERE person.gender = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of individuals from the 'person' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender being queried.",
            "question": "How many females are in the network?"
        },
        {
            "sample_id": 4421,
            "gold_sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), person.gender FROM person WHERE person.age < [placeholder-type:numeric] GROUP BY person.gender",
            "ba": "The virtual table provides a count of individuals grouped by gender from the 'person' table, specifically for those whose age is below a certain threshold. The placeholder in the WHERE clause represents the age limit.",
            "question": "Find the number of people who is under 40 for each gender."
        },
        {
            "sample_id": 4436,
            "gold_sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT person.name, person.age FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE personfriend.friend = '[placeholder-type:string]' OR personfriend.friend = '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct names and ages of persons from the 'person' table who have specific friends listed in the 'personfriend' table. The placeholders in the WHERE clause represent the names of the friends being queried.",
            "question": "What are the different names and ages of every friend of either Dan or alice?"
        },
        {
            "sample_id": 4451,
            "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
            "gold_complexity": 8,
            "vt": "SELECT personfriend.friend FROM person JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE personfriend.name = '[placeholder-type:string]' AND person.gender = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the names of friends from the 'personfriend' table for a specific person, while also filtering based on the person's gender from the 'person' table. The placeholders represent the person's name and gender.",
            "question": "Find the female friends of Alice."
        },
        {
            "sample_id": 4391,
            "gold_sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(personfriend.friend) FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE person.name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of friends for a specific person from the 'person' and 'personfriend' tables. The placeholder in the WHERE clause represents the name of the person whose friends are being counted.",
            "question": "How many friends does Dan have?"
        },
        {
            "sample_id": 4399,
            "gold_sql": "SELECT count(DISTINCT job) FROM Person",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT job) FROM person",
            "ba": "The virtual table counts the distinct job titles from the 'person' table.",
            "question": "How many type of jobs do they have?"
        },
        {
            "sample_id": 4465,
            "gold_sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
            "gold_complexity": 10,
            "vt": "SELECT personfriend.name FROM personfriend WHERE personfriend.friend = '[placeholder-type:string]' AND personfriend.year = (SELECT MIN(personfriend.year) FROM PersonFriend WHERE friend = 'Alice')",
            "ba": "The virtual table retrieves the names of individuals from the 'personfriend' table who have a specific friend and whose friendship was established in the earliest year recorded for that friend.",
            "question": "Find the name of persons who are friends with Alice for the shortest years."
        },
        {
            "sample_id": 4440,
            "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
            "gold_complexity": 15,
            "vt": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
            "ba": "The virtual table identifies the names of individuals from the 'person' table who have friends that are older than 40 years, excluding those who have friends younger than 30 years. It utilizes a join between the 'person' and 'personfriend' tables to establish the relationship between individuals and their friends, while applying conditions to filter based on age.",
            "question": "What are the names of the people who are older 40 but no friends under age 30?"
        },
        {
            "sample_id": 4405,
            "gold_sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
            "gold_complexity": 10,
            "vt": "SELECT person.name FROM person WHERE person.gender = '[placeholder-type:string]' AND person.age = (SELECT MIN(person.age) FROM person WHERE gender = 'male')",
            "ba": "The virtual table retrieves the names of individuals from the 'person' table who are of a specific gender and are the youngest among males.",
            "question": "Who is the youngest male?"
        },
        {
            "sample_id": 4466,
            "gold_sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
            "gold_complexity": 10,
            "vt": "SELECT personfriend.name FROM personfriend WHERE personfriend.friend = '[placeholder-type:string]' AND personfriend.year = (SELECT MIN(personfriend.year) FROM PersonFriend WHERE friend = 'Alice')",
            "ba": "The virtual table retrieves the names of individuals from the 'personfriend' table who have a specific friend and whose friendship was established in the earliest year recorded for that friend.",
            "question": "What are the names of all people who are friends with Alice for the shortest amount of time?"
        },
        {
            "sample_id": 4467,
            "gold_sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
            "gold_complexity": 16,
            "vt": "SELECT person.name, person.age, person.job FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE personfriend.friend = '[placeholder-type:string]' AND personfriend.year = (SELECT MAX(personfriend.year) FROM PersonFriend WHERE friend = 'Alice')",
            "ba": "The virtual table describes the names, ages, and job titles of persons from the 'person' table who have a specific friend and whose friendship was established in the most recent year with that friend. The placeholders in the WHERE clause represent the friend's name and the year of friendship.",
            "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years."
        },
        {
            "sample_id": 4446,
            "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
            "gold_complexity": 7,
            "vt": "SELECT personfriend.friend FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE person.name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the friends of a specific person from the 'personfriend' table. It retrieves the names of friends associated with the specified person's name, using a join to connect the 'person' and 'personfriend' tables.",
            "question": "Who are Bob's friends?"
        },
        {
            "sample_id": 4454,
            "gold_sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
            "gold_complexity": 9,
            "vt": "SELECT personfriend.friend FROM person JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE personfriend.name = '[placeholder-type:string]' AND person.gender = '[placeholder-type:string]' AND person.job = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the names of friends from the 'personfriend' table for a specific person, while also filtering based on the person's gender and job title from the 'person' table. The placeholders represent the person's name, gender, and job title.",
            "question": "Who are the friends of Alice that are doctors?"
        },
        {
            "sample_id": 4420,
            "gold_sql": "SELECT min(age) ,  job FROM Person GROUP BY job",
            "gold_complexity": 8,
            "vt": "SELECT MIN(person.age), person.job FROM person GROUP BY person.job",
            "ba": "The virtual table provides the minimum age of individuals grouped by their job titles from the 'person' table. This allows for an analysis of the youngest individuals in each occupation.",
            "question": "How old is the youngest person for each job?"
        },
        {
            "sample_id": 4450,
            "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
            "gold_complexity": 8,
            "vt": "SELECT person.name FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE personfriend.friend = '[placeholder-type:string]' AND person.gender = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of persons from the 'person' table who have a specific friend and belong to a certain gender. The placeholders in the WHERE clause represent the friend's name and the gender of the person.",
            "question": "What are the names of all females who are friends with Zach?"
        },
        {
            "sample_id": 4462,
            "gold_sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
            "gold_complexity": 10,
            "vt": "SELECT personfriend.friend FROM personfriend WHERE personfriend.name = '[placeholder-type:string]' AND personfriend.year = (SELECT MAX(personfriend.year) FROM PersonFriend WHERE name = 'Zach')",
            "ba": "The virtual table retrieves the names of friends from the 'personfriend' table for a specific person, filtered by the year when the friendship was established. The query also includes a subquery to find the most recent year of friendship for a person named 'Zach'.",
            "question": "Which friend of Zach has the longest-lasting friendship?"
        },
        {
            "sample_id": 4435,
            "gold_sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT person.name, person.age FROM person JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE personfriend.friend = '[placeholder-type:string]' OR personfriend.friend = '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct names and ages of persons from the 'person' table who have specific friends listed in the 'personfriend' table. The placeholders in the WHERE clause represent the names of the friends being queried.",
            "question": "Find the name and age of the person who is a friend of Dan or Alice."
        },
        {
            "sample_id": 4409,
            "gold_sql": "SELECT name FROM Person WHERE age  <  30",
            "gold_complexity": 6,
            "vt": "SELECT person.name FROM person WHERE person.age < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of persons from the 'person' table who are younger than a specified age. The placeholder in the WHERE clause represents the age limit.",
            "question": "Who is the person whose age is below 30?"
        },
        {
            "sample_id": 4434,
            "gold_sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
            "gold_complexity": 10,
            "vt": "SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'",
            "ba": "The virtual table identifies individuals who are friends with both 'Dan' and 'Alice' by intersecting the results of two queries. Each query selects the name and age of persons who have a friendship with either 'Dan' or 'Alice'. The join operation connects the 'person' table with the 'personfriend' table based on the person's name, ensuring that only those who have established friendships with both specified friends are included in the final result.",
            "question": "What are the names and ages of every person who is a friend of both Dan and Alice?"
        },
        {
            "sample_id": 4438,
            "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
            "gold_complexity": 15,
            "vt": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
            "ba": "The virtual table identifies individuals from the 'Person' table who have friends that fall into two distinct age categories: those older than 40 and those younger than 30. It uses an intersection to find names that appear in both groups, indicating that these individuals have friends across both age ranges.",
            "question": "What are the names of every person who has a friend over 40 and under 30?"
        },
        {
            "sample_id": 4460,
            "gold_sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
            "gold_complexity": 14,
            "vt": "SELECT DISTINCT personfriend.name, personfriend.friend, person.age FROM person JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE person.age > (SELECT AVG(person.age) FROM person)",
            "ba": "The virtual table provides a list of distinct names of persons along with their friends and ages from the 'person' and 'personfriend' tables. It filters the results to include only those persons whose age is greater than the average age of all persons in the 'person' table.",
            "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
        },
        {
            "sample_id": 4442,
            "gold_sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
            "gold_complexity": 10,
            "vt": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student'",
            "ba": "The virtual table lists the names of individuals from the 'person' table who are not friends with any students. It does this by selecting all names from the 'person' table and excluding those who are friends with individuals whose job title is 'student'.",
            "question": "What are the names of the people who have no friends who are students?"
        },
        {
            "sample_id": 4410,
            "gold_sql": "SELECT name FROM Person WHERE age  <  30",
            "gold_complexity": 6,
            "vt": "SELECT person.name FROM person WHERE person.age < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of individuals from the 'person' table who are younger than a specified age. The placeholder in the WHERE clause represents the age limit.",
            "question": "What is the name of the person whose age is below 30?"
        },
        {
            "sample_id": 4473,
            "gold_sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(DISTINCT name) FROM personfriend WHERE NOT personfriend.friend IN (SELECT person.name FROM person WHERE city = 'Austin')",
            "ba": "The virtual table counts the number of distinct individuals from the 'personfriend' table who have friends that do not reside in Austin. It uses a subquery to filter out friends based on their city of residence.",
            "question": "What is the total number of people who has no friend living in the city of Austin."
        },
        {
            "sample_id": 4437,
            "gold_sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
            "gold_complexity": 15,
            "vt": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
            "ba": "The virtual table identifies individuals from the 'Person' table who have friends that fall into two distinct age categories: those older than 40 and those younger than 30. It uses an intersection to find names that appear in both groups, indicating that these individuals have friends across these age ranges.",
            "question": "Find the name of the person who has friends with age above 40 and under age 30?"
        },
        {
            "sample_id": 4470,
            "gold_sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
            "gold_complexity": 6,
            "vt": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
            "ba": "The virtual table lists the names of individuals from the 'person' table who do not have any recorded friendships in the 'personfriend' table. This is achieved by selecting all names from the 'person' table and excluding those names that appear in the 'personfriend' table as friends.",
            "question": "What are the names of all people who do not have friends?"
        }
    ],
    "customers_and_addresses": [
        {
            "sample_id": 6121,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT customers.customer_name FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY customer_orders.order_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who have placed orders, sorted by the date of their orders. The result is limited to a specified number of customer names.",
            "question": "Find the name of the customer who made an order most recently."
        },
        {
            "sample_id": 6091,
            "gold_sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customer_contact_channels.channel_code FROM customers JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE customers.customer_name = None.\"tillman ernser\"",
            "ba": "The virtual table retrieves distinct contact channel codes associated with a specific customer from the 'customers' and 'customer_contact_channels' tables. The placeholder in the WHERE clause represents the customer's name.",
            "question": "Find the contact channel code that was used by the customer named \"Tillman Ernser\"."
        },
        {
            "sample_id": 6081,
            "gold_sql": "SELECT DISTINCT city FROM addresses",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT addresses.city FROM addresses",
            "ba": "The virtual table lists all unique cities from the 'addresses' table.",
            "question": "List all the distinct cities"
        },
        {
            "sample_id": 6088,
            "gold_sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
            "gold_complexity": 8,
            "vt": "SELECT customer_contact_channels.channel_code FROM customer_contact_channels GROUP BY customer_contact_channels.channel_code HAVING COUNT(customer_contact_channels.customer_id) < [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique contact channels used by customers from the 'customer_contact_channels' table. It filters the channels to show only those that have been used by fewer customers than a specified number, represented by a placeholder.",
            "question": "List all the contact channel codes that were used less than 5 times."
        },
        {
            "sample_id": 6052,
            "gold_sql": "SELECT avg(order_quantity) FROM order_items",
            "gold_complexity": 4,
            "vt": "SELECT AVG(order_items.order_quantity) FROM order_items",
            "ba": "The virtual table calculates the average quantity of products ordered from the 'order_items' table. This provides insight into the typical order size for products.",
            "question": "What is the average amount of items ordered in each order?"
        },
        {
            "sample_id": 6057,
            "gold_sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
            "gold_complexity": 6,
            "vt": "SELECT customers.date_became_customer FROM customers WHERE customers.customer_id BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the registration dates of customers from the 'customers' table whose customer IDs fall within a specified numeric range. The placeholders represent the lower and upper bounds of the customer IDs.",
            "question": "What are the dates when customers with ids between 10 and 20 became customers?"
        },
        {
            "sample_id": 6049,
            "gold_sql": "SELECT customer_name FROM customers",
            "gold_complexity": 4,
            "vt": "SELECT customers.customer_name FROM customers",
            "ba": "The virtual table lists the names of customers from the 'customers' table.",
            "question": "What are the names of all the customers?"
        },
        {
            "sample_id": 6112,
            "gold_sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM customer_orders WHERE customer_orders.order_details = None.\"second time\"",
            "ba": "The virtual table counts the number of orders from the 'customer_orders' table where the order details match a specific condition. The placeholder in the WHERE clause represents the criteria for filtering the order details.",
            "question": "How many orders have detail \"Second time\"?"
        },
        {
            "sample_id": 6125,
            "gold_sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT products.product_details, products.product_id FROM order_items JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY order_items.product_id ORDER BY SUM(order_items.order_quantity) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of product details and their identifiers from the 'products' table, specifically focusing on the products that have been ordered. It aggregates the order quantities from the 'order_items' table, allowing for an analysis of which products are most frequently ordered. The results are grouped by product ID and sorted by the total quantity ordered, with a limit on the number of results returned based on a specified numeric placeholder.",
            "question": "What are the name and ID of the product bought the most."
        },
        {
            "sample_id": 6077,
            "gold_sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
            "gold_complexity": 11,
            "vt": "SELECT addresses.city FROM addresses WHERE NOT addresses.city IN (SELECT DISTINCT addresses.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)",
            "ba": "The virtual table lists the cities from the 'addresses' table that are not associated with any customers. It filters out cities that have been linked to customers through their addresses.",
            "question": "What are the cities no customers live in?"
        },
        {
            "sample_id": 6101,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
            "gold_complexity": 12,
            "vt": "SELECT customers.customer_name FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE order_items.order_quantity = (SELECT MAX(order_items.order_quantity) FROM order_items)",
            "ba": "The virtual table retrieves the names of customers who have placed the highest quantity of a specific product order. It joins the 'customers' table with 'customer_orders' to link customers to their orders, and then further joins with 'order_items' to access the order details, specifically focusing on the quantity of products ordered. The query includes a subquery to determine the maximum order quantity from the 'order_items' table, ensuring that only customers with the highest order quantity are selected.",
            "question": "Find the name of the customer who made the order of the largest amount of goods."
        },
        {
            "sample_id": 6126,
            "gold_sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
            "gold_complexity": 10,
            "vt": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"",
            "ba": "The virtual table retrieves detailed descriptions of addresses from the 'addresses' table that are located in specific cities and states. It combines results from two different locations using a UNION operation, allowing for a consolidated view of addresses from both specified cities and states.",
            "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona."
        },
        {
            "sample_id": 6064,
            "gold_sql": "SELECT DISTINCT product_details FROM products",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT products.product_details FROM products",
            "ba": "The virtual table retrieves distinct product specifications from the 'products' table. The placeholder represents the unique product details that can be filtered or modified as needed.",
            "question": "What are the details of all products?"
        },
        {
            "sample_id": 6068,
            "gold_sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
            "gold_complexity": 7,
            "vt": "SELECT products.product_details FROM products WHERE products.product_details LIKE None.\"%latte%\" OR products.product_details LIKE None.\"%americano%\"",
            "ba": "The virtual table retrieves product specifications from the 'products' table that contain specific keywords related to coffee types. The placeholders in the WHERE clause represent the keywords to search for within the product details.",
            "question": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\""
        },
        {
            "sample_id": 6114,
            "gold_sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_name, customer_orders.order_date FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE customer_orders.order_status = None.\"delivered\"",
            "ba": "The virtual table describes the names of customers along with the dates of their orders from the 'customers' and 'customer_orders' tables. It filters the results to show only those orders that have a status of 'delivered'.",
            "question": "Find the customer name and date of the orders that have the status \"Delivered\"."
        },
        {
            "sample_id": 6092,
            "gold_sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
            "gold_complexity": 7,
            "vt": "SELECT MAX(customer_contact_channels.active_to_date) FROM customers JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE customers.customer_name = None.\"tillman ernser\"",
            "ba": "The virtual table retrieves the most recent deactivation date of a customer's contact channel from the 'customer_contact_channels' table, based on the customer's name from the 'customers' table. The placeholder in the WHERE clause represents the specific customer's name.",
            "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?"
        },
        {
            "sample_id": 6050,
            "gold_sql": "SELECT count(*) FROM customers",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all unique customers from the 'customers' table.",
            "question": "How many customers are there?"
        },
        {
            "sample_id": 6117,
            "gold_sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
            "gold_complexity": 7,
            "vt": "SELECT SUM(order_items.order_quantity) FROM customer_orders JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE customer_orders.order_status = None.\"cancelled\"",
            "ba": "The virtual table summarizes the total quantity of products ordered by customers from the 'customer_orders' and 'order_items' tables, specifically filtering for orders that have a status of 'cancelled'. The placeholder in the WHERE clause represents the order status being queried.",
            "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status."
        },
        {
            "sample_id": 6061,
            "gold_sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT customers.customer_name FROM customers WHERE customers.payment_method = (SELECT customers.payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who use the most popular payment method. The subquery identifies the most frequently used payment method by grouping customers based on their payment method and counting the occurrences, ordering them in descending order, and limiting the result to the top one.",
            "question": "Find the name of the customers who use the most frequently used payment method."
        },
        {
            "sample_id": 6106,
            "gold_sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT t3.product_id) FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE customers.customer_name = None.\"rodrick heaney\"",
            "ba": "The virtual table counts the distinct products ordered by a specific customer from the 'customers' table. It joins the 'customer_orders' table to link customers to their orders and the 'order_items' table to identify the products associated with those orders. The placeholder in the WHERE clause represents the customer's name.",
            "question": "How many types of products have Rodrick Heaney bought in total?"
        },
        {
            "sample_id": 6104,
            "gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT customers.payment_method FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY customers.customer_name ORDER BY SUM(order_items.order_quantity) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the preferred payment methods of customers from the 'customers' table. It joins with the 'customer_orders' table to link customers to their orders and further joins with the 'order_items' table to aggregate the total quantity of items ordered by each customer. The results are grouped by customer names and ordered by the total quantity of ordered items, limiting the output to a specified number of records.",
            "question": "What is the payment method of the customer that has purchased the least quantity of items?"
        },
        {
            "sample_id": 6113,
            "gold_sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM customer_orders WHERE customer_orders.order_details = None.\"second time\"",
            "ba": "The virtual table counts the number of orders from the 'customer_orders' table where the order details match a specific condition. The placeholder in the WHERE clause represents the criteria for filtering the order details.",
            "question": "Tell me the number of orders with \"Second time\" as order detail."
        },
        {
            "sample_id": 6078,
            "gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT addresses.city FROM customers JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY addresses.city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of cities from the 'addresses' table where customers are associated with addresses. It joins the 'customers' table with 'customer_addresses' to link customers to their addresses, and then joins with the 'addresses' table to access city information. The results are grouped by city and ordered by the count of customers in each city, limiting the output to a specified number of cities.",
            "question": "Which city has the most customers living in?"
        },
        {
            "sample_id": 6062,
            "gold_sql": "SELECT DISTINCT payment_method FROM customers",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT customers.payment_method FROM customers",
            "ba": "The virtual table lists the distinct payment methods used by customers from the 'customers' table. This allows for an overview of the various payment options preferred by customers.",
            "question": "What are all the payment methods?"
        },
        {
            "sample_id": 6080,
            "gold_sql": "SELECT DISTINCT city FROM addresses",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT addresses.city FROM addresses",
            "ba": "The virtual table lists all unique cities from the 'addresses' table.",
            "question": "Retrieve the list of all cities."
        },
        {
            "sample_id": 6065,
            "gold_sql": "SELECT DISTINCT product_details FROM products",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT products.product_details FROM products",
            "ba": "The virtual table retrieves distinct product specifications from the 'products' table. The placeholder represents the unique product details that can be filtered or modified as needed.",
            "question": "Return the the details of all products."
        },
        {
            "sample_id": 6076,
            "gold_sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
            "gold_complexity": 11,
            "vt": "SELECT addresses.city FROM addresses WHERE NOT addresses.city IN (SELECT DISTINCT addresses.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id)",
            "ba": "The virtual table lists the cities from the 'addresses' table that are not associated with any customers. It filters out cities that have been linked to customers through their addresses.",
            "question": "Find the list of cities that no customer is living in."
        },
        {
            "sample_id": 6107,
            "gold_sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT t3.product_id) FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE customers.customer_name = None.\"rodrick heaney\"",
            "ba": "The virtual table counts the distinct products ordered by a specific customer from the 'customers' table. It joins the 'customer_orders' table to link customers to their orders and the 'order_items' table to identify the products associated with those orders. The placeholder in the WHERE clause represents the customer's name.",
            "question": "Find the number of distinct products Rodrick Heaney has bought so far."
        },
        {
            "sample_id": 6131,
            "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
            "gold_complexity": 10,
            "vt": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte'",
            "ba": "The virtual table lists the names of customers from the 'customers' table who have not ordered a specific product, identified by its details. The query uses an EXCEPT clause to exclude those customers who have placed orders for the product with the specified details.",
            "question": "What are names of customers who never ordered product Latte."
        },
        {
            "sample_id": 6127,
            "gold_sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
            "gold_complexity": 10,
            "vt": "SELECT address_content FROM addresses WHERE city = \"East Julianaside\" AND state_province_county = \"Texas\" UNION SELECT address_content FROM addresses WHERE city = \"Gleasonmouth\" AND state_province_county = \"Arizona\"",
            "ba": "The virtual table retrieves address details from the 'addresses' table for specific cities and states. It combines results for two different cities, 'East Julianaside' in 'Texas' and 'Gleasonmouth' in 'Arizona', using a UNION to ensure all relevant addresses are included.",
            "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona."
        },
        {
            "sample_id": 6069,
            "gold_sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
            "gold_complexity": 7,
            "vt": "SELECT products.product_details FROM products WHERE products.product_details LIKE None.\"%latte%\" OR products.product_details LIKE None.\"%americano%\"",
            "ba": "The virtual table retrieves product specifications from the 'products' table that contain specific keywords related to coffee types, such as 'latte' or 'americano'. The placeholders in the LIKE clause allow for flexible searching of product details that match these criteria.",
            "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail."
        },
        {
            "sample_id": 6105,
            "gold_sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT customers.payment_method FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY customers.customer_name ORDER BY SUM(order_items.order_quantity) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the preferred payment methods of customers from the 'customers' table. It joins with the 'customer_orders' table to link customers to their orders and further joins with the 'order_items' table to aggregate the order quantities. The results are grouped by customer names and ordered by the total quantity of items ordered, limiting the output to a specified number of records.",
            "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total."
        },
        {
            "sample_id": 6083,
            "gold_sql": "SELECT city FROM addresses WHERE zip_postcode  =  255",
            "gold_complexity": 6,
            "vt": "SELECT addresses.city FROM addresses WHERE addresses.zip_postcode = [placeholder-type:numeric]",
            "ba": "The virtual table describes the cities associated with addresses from the 'addresses' table that match a specific postal code. The placeholder in the WHERE clause represents the postal code being queried.",
            "question": "Which city is post code 255 located in?"
        },
        {
            "sample_id": 6123,
            "gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT products.product_details FROM order_items JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY order_items.product_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the product specifications from the 'products' table based on the products ordered in the 'order_items' table. It groups the results by product ID to aggregate the data and orders the results by the count of orders for each product, limiting the output to a specified number of results.",
            "question": "What is the most frequently ordered product? Tell me the detail of the product"
        },
        {
            "sample_id": 6079,
            "gold_sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT addresses.city FROM customers JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY addresses.city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of cities from the 'addresses' table where customers are associated with addresses. It joins the 'customers' table with 'customer_addresses' to link customers to their addresses, and then joins with the 'addresses' table to access city information. The results are grouped by city and ordered by the count of customers in each city, limiting the output to a specified number of cities.",
            "question": "Find the city where the most customers live."
        },
        {
            "sample_id": 6097,
            "gold_sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT customer_contact_channels.channel_code, customer_contact_channels.contact_number FROM customer_contact_channels WHERE customer_contact_channels.active_to_date - customer_contact_channels.active_from_date = (SELECT customer_contact_channels.active_to_date - customer_contact_channels.active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the channel code and contact number from the 'customer_contact_channels' table for the contact channel that has been active for the longest duration. The query calculates the duration of activity for each contact channel and selects the one with the maximum duration.",
            "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest."
        },
        {
            "sample_id": 6095,
            "gold_sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
            "gold_complexity": 5,
            "vt": "SELECT AVG(customer_contact_channels.active_to_date - customer_contact_channels.active_from_date) FROM customer_contact_channels",
            "ba": "The virtual table calculates the average duration for which contact channels have been active for customers. It does this by subtracting the 'active_from_date' from the 'active_to_date' for each contact channel and then averaging these durations.",
            "question": "Compute the average active time span of contact channels."
        },
        {
            "sample_id": 6100,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
            "gold_complexity": 12,
            "vt": "SELECT customers.customer_name FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE order_items.order_quantity = (SELECT MAX(order_items.order_quantity) FROM order_items)",
            "ba": "The virtual table retrieves the names of customers who have placed the highest quantity of a specific product order. It involves joining the 'customers' table with the 'customer_orders' table to link customers to their orders, and then further joining with the 'order_items' table to access the quantity of products ordered. The query filters for the maximum order quantity using a subquery.",
            "question": "What is the name of the customer that made the order with the largest quantity?"
        },
        {
            "sample_id": 6060,
            "gold_sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT customers.customer_name FROM customers WHERE customers.payment_method = (SELECT customers.payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who use the most popular payment method. The subquery identifies the most frequently used payment method by grouping the customers based on their payment methods and counting the occurrences, ordering them in descending order, and limiting the result to the top one.",
            "question": "What are the names of customers using the most popular payment method?"
        },
        {
            "sample_id": 6063,
            "gold_sql": "SELECT DISTINCT payment_method FROM customers",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT customers.payment_method FROM customers",
            "ba": "The virtual table lists the distinct payment methods used by customers from the 'customers' table. This allows for an overview of the various payment options preferred by customers without duplication.",
            "question": "Return all the distinct payment methods used by customers."
        },
        {
            "sample_id": 6071,
            "gold_sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
            "gold_complexity": 8,
            "vt": "SELECT addresses.address_content FROM customers JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE customers.customer_name = None.\"maudie kertzmann\"",
            "ba": "The virtual table describes the detailed address content associated with a specific customer from the 'customers' table. It retrieves the address information by joining the 'customer_addresses' and 'addresses' tables based on the customer ID and address ID. The placeholder in the WHERE clause represents the customer's name.",
            "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\"."
        },
        {
            "sample_id": 6084,
            "gold_sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
            "gold_complexity": 8,
            "vt": "SELECT addresses.state_province_county, addresses.country FROM addresses WHERE addresses.zip_postcode LIKE None.\"4%\"",
            "ba": "The virtual table describes the state, province, or county and country of addresses from the 'addresses' table that match a specific postal code pattern. The placeholder in the WHERE clause represents the postal code format to filter the results.",
            "question": "Find the state and country of all cities with post code starting with 4."
        },
        {
            "sample_id": 6110,
            "gold_sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT customer_id) FROM customer_orders WHERE customer_orders.order_status = None.\"cancelled\"",
            "ba": "The virtual table counts the distinct number of customers who have placed orders that are not cancelled from the 'customer_orders' table. The placeholder in the WHERE clause represents the order status that is being filtered out, specifically for cancelled orders.",
            "question": "How many customers have at least one order with status \"Cancelled\"?"
        },
        {
            "sample_id": 6108,
            "gold_sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
            "gold_complexity": 8,
            "vt": "SELECT SUM(order_items.order_quantity) FROM customers JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE customers.customer_name = None.\"rodrick heaney\"",
            "ba": "The virtual table summarizes the total quantity of products ordered by a specific customer from the 'customers', 'customer_orders', and 'order_items' tables. The placeholder in the WHERE clause represents the customer's name.",
            "question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?"
        },
        {
            "sample_id": 6134,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
            "gold_complexity": 10,
            "vt": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano'",
            "ba": "The virtual table identifies customers who have ordered both 'Latte' and 'Americano' products. It does this by joining multiple tables: 'customers', 'customer_orders', 'order_items', and 'products'. The query uses an INTERSECT operation to find common customer names from two separate queries, each filtering for one of the specified products.",
            "question": "Find the names of customers who ordered both products Latte and Americano."
        },
        {
            "sample_id": 6122,
            "gold_sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT products.product_details FROM order_items JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY order_items.product_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the product specifications from the 'products' table based on the products ordered in the 'order_items' table. It groups the results by product ID to aggregate the data and orders the results by the count of orders for each product, limiting the output to a specified number of results.",
            "question": "Which product has been ordered most number of times?"
        },
        {
            "sample_id": 6072,
            "gold_sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM customers JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE addresses.city = None.\"lake geovannyton\"",
            "ba": "The virtual table counts the number of customers who have addresses in a specific city. It joins the 'customers' table with the 'customer_addresses' table to link customers to their addresses, and then further joins with the 'addresses' table to filter based on the city name. The placeholder in the WHERE clause represents the city name being queried.",
            "question": "How many customers are living in city \"Lake Geovannyton\"?"
        },
        {
            "sample_id": 6051,
            "gold_sql": "SELECT count(*) FROM customers",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all unique customers from the 'customers' table.",
            "question": "Return the total number of distinct customers."
        },
        {
            "sample_id": 6129,
            "gold_sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
            "gold_complexity": 6,
            "vt": "SELECT customers.customer_name FROM customers WHERE customers.payment_method <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of customers from the 'customers' table who do not use a specific payment method. The placeholder in the WHERE clause represents the payment method that is being excluded.",
            "question": "What is the name of customers who do not use Cash as payment method."
        },
        {
            "sample_id": 6116,
            "gold_sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
            "gold_complexity": 7,
            "vt": "SELECT SUM(order_items.order_quantity) FROM customer_orders JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE customer_orders.order_status = None.\"cancelled\"",
            "ba": "The virtual table calculates the total quantity of products ordered by customers from the 'customer_orders' and 'order_items' tables. It filters the results to include only those orders that are not cancelled, using a placeholder for the order status.",
            "question": "What is the total number of products that are in orders with status \"Cancelled\"?"
        },
        {
            "sample_id": 6054,
            "gold_sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"",
            "gold_complexity": 6,
            "vt": "SELECT customers.customer_name FROM customers WHERE customers.payment_method = None.\"cash\"",
            "ba": "The virtual table describes the names of customers from the 'customers' table who prefer a specific payment method. The placeholder in the WHERE clause represents the payment method being queried.",
            "question": "What are the names of customers who use payment method \"Cash\"?"
        },
        {
            "sample_id": 6094,
            "gold_sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
            "gold_complexity": 5,
            "vt": "SELECT AVG(customer_contact_channels.active_to_date - customer_contact_channels.active_from_date) FROM customer_contact_channels",
            "ba": "The virtual table calculates the average duration for which contact channels have been active for customers. It uses the 'customer_contact_channels' table to find the difference between the 'active_to_date' and 'active_from_date' for each channel, and then computes the average of these durations.",
            "question": "What is the average time span of contact channels in the database?"
        }
    ],
    "customers_and_products_contacts": [
        {
            "sample_id": 5657,
            "gold_sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
            "gold_complexity": 12,
            "vt": "SELECT customers.customer_name, addresses.city, customer_address_history.date_from, customer_address_history.date_to FROM customer_address_history JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id",
            "ba": "The virtual table describes the names of customers along with the cities of their addresses and the date range of their address history. It combines data from the 'customer_address_history', 'customers', and 'addresses' tables, linking them through customer and address identifiers.",
            "question": "Show the customer name, customer address city, date from, and date to for each customer address history."
        },
        {
            "sample_id": 5652,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'",
            "gold_complexity": 8,
            "vt": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part'",
            "ba": "The virtual table identifies customers who have completed orders and also have orders that are in progress. It retrieves the names of these customers by joining the 'customers' table with the 'customer_orders' table based on the customer ID. The query uses an INTERSECT operation to find customers who meet both conditions: having at least one completed order and at least one order that is in progress.",
            "question": "Show the names of customers who have both an order in completed status and an order in part status."
        },
        {
            "sample_id": 5655,
            "gold_sql": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products",
            "gold_complexity": 6,
            "vt": "SELECT MIN(products.product_price), MAX(products.product_price), AVG(products.product_price) FROM products",
            "ba": "The virtual table provides the minimum, maximum, and average prices of products from the 'products' table. It aggregates the product prices to give insights into the pricing range and average cost of products available.",
            "question": "Show the minimum, maximum, average price for all products."
        },
        {
            "sample_id": 5647,
            "gold_sql": "SELECT DISTINCT city FROM addresses",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT addresses.city FROM addresses",
            "ba": "The virtual table lists all unique cities from the 'addresses' table.",
            "question": "Show all distinct cities in the address record."
        },
        {
            "sample_id": 5649,
            "gold_sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
            "gold_complexity": 12,
            "vt": "SELECT customers.customer_name, customers.customer_phone FROM customers WHERE NOT customers.customer_id IN (SELECT customers.customer_id FROM customer_address_history)",
            "ba": "The virtual table describes the names and phone numbers of customers from the 'customers' table who do not have any associated address history. The subquery filters out customers that have entries in the 'customer_address_history' table, ensuring that only those without an address history are selected.",
            "question": "Show names and phones of customers who do not have address information."
        },
        {
            "sample_id": 5660,
            "gold_sql": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500",
            "gold_complexity": 10,
            "vt": "SELECT products.product_type_code, products.product_name FROM products WHERE products.product_price > [placeholder-type:numeric] OR products.product_price < [placeholder-type:numeric]",
            "ba": "The virtual table describes the product type codes and names of products from the 'products' table that have a price either greater than or less than a specified value. The placeholders in the WHERE clause represent the price thresholds for filtering the products.",
            "question": "Show the product type and name for the products with price higher than 1000 or lower than 500."
        },
        {
            "sample_id": 5659,
            "gold_sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT customers.customer_name, customers.customer_phone FROM customers JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY customers.customer_id ORDER BY SUM(order_items.order_quantity) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of customer names and their associated phone numbers from the 'customers' table. It joins the 'customer_orders' table to link customers with their orders and the 'order_items' table to aggregate the total quantity of items ordered by each customer. The results are grouped by customer ID and ordered by the total quantity of ordered items, limiting the output to a specified number of customers.",
            "question": "What are the name and phone of the customer with the most ordered product quantity?"
        },
        {
            "sample_id": 5658,
            "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_name FROM customers JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE customers.payment_method_code = '[placeholder-type:string]' GROUP BY customers.customer_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who have made more than a specified number of orders using a specific payment method. The query joins the 'customers' table with the 'customer_orders' table to count the number of orders associated with each customer, filtering by the payment method and grouping by customer ID.",
            "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders."
        },
        {
            "sample_id": 5656,
            "gold_sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM products WHERE products.product_price > (SELECT AVG(products.product_price) FROM products)",
            "ba": "The virtual table counts the number of products from the 'products' table that have a price greater than the average price of all products. The subquery calculates the average product price, and the main query filters products based on this average using a comparison operator.",
            "question": "How many products have a price higher than the average?"
        }
    ],
    "cre_Drama_Workshop_Groups": [
        {
            "sample_id": 5156,
            "gold_sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
            "gold_complexity": 7,
            "vt": "SELECT drama_workshop_groups.store_name FROM bookings JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE bookings.status_code = None.\"stop\"",
            "ba": "The virtual table lists the names of stores associated with drama workshop groups from the 'bookings' table, filtered by a specific status code indicating that the booking is not stopped.",
            "question": "Which workshop groups have bookings with status code \"stop\"? Give me the names."
        },
        {
            "sample_id": 5159,
            "gold_sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
            "gold_complexity": 6,
            "vt": "SELECT AVG(invoices.order_quantity) FROM invoices WHERE invoices.payment_method_code = None.\"mastercard\"",
            "ba": "The virtual table calculates the average quantity of orders from the 'invoices' table where the payment method used is 'mastercard'.",
            "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?"
        },
        {
            "sample_id": 5109,
            "gold_sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
            "gold_complexity": 8,
            "vt": "SELECT invoices.payment_method_code, COUNT(*) FROM invoices GROUP BY invoices.payment_method_code",
            "ba": "The virtual table summarizes the count of invoices grouped by their payment method codes from the 'invoices' table. Each unique payment method code is represented along with the total number of invoices associated with that payment method.",
            "question": "Show all payment method codes and the number of orders for each code."
        },
        {
            "sample_id": 5160,
            "gold_sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
            "gold_complexity": 6,
            "vt": "SELECT AVG(invoices.order_quantity) FROM invoices WHERE invoices.payment_method_code = None.\"mastercard\"",
            "ba": "The virtual table calculates the average quantity of orders from the 'invoices' table where the payment method used is 'mastercard'.",
            "question": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\"."
        },
        {
            "sample_id": 5103,
            "gold_sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT products.product_name FROM products ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of products from the 'products' table, ordered by their price in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of product names to retrieve.",
            "question": "What is the name of the most expensive product?"
        },
        {
            "sample_id": 5123,
            "gold_sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT ref_service_types.service_type_description, ref_service_types.service_type_code FROM ref_service_types JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY ref_service_types.service_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of service types and their corresponding codes from the 'ref_service_types' table. It joins with the 'Services' table to ensure that only service types associated with existing services are included. The results are grouped by the service type code to aggregate the data, and they are ordered by the count of services associated with each type. A placeholder is used to limit the number of results returned.",
            "question": "What is the description and code of the type of service that is performed the most often?"
        },
        {
            "sample_id": 5136,
            "gold_sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
            "gold_complexity": 7,
            "vt": "SELECT order_items.other_item_details FROM order_items JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE products.product_price > [placeholder-type:numeric]",
            "ba": "The virtual table displays additional details about order items from the 'order_items' table, specifically filtering for products that have a price greater than a specified amount. The query joins the 'order_items' table with the 'products' table to access the product price, using a placeholder for the numeric value to allow for dynamic querying.",
            "question": "Find the order detail for the products with price above 2000."
        },
        {
            "sample_id": 5120,
            "gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100",
            "gold_complexity": 7,
            "vt": "SELECT ref_service_types.service_type_description FROM ref_service_types JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE services.product_price > [placeholder-type:numeric]",
            "ba": "The virtual table describes the service type descriptions from the 'ref_service_types' table that are associated with services having a product price greater than a specified amount. The placeholder in the WHERE clause represents the minimum product price to filter the results.",
            "question": "Give me the descriptions of the service types that cost more than 100."
        },
        {
            "sample_id": 5091,
            "gold_sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"",
            "gold_complexity": 8,
            "vt": "SELECT customers.customer_phone, customers.customer_email_address FROM customers WHERE customers.customer_name = None.\"harold\"",
            "ba": "The virtual table describes the phone number and email address of customers from the 'customers' table who have a specific name. The placeholder in the WHERE clause represents the customer's name.",
            "question": "What are the phone and email for customer Harold?"
        },
        {
            "sample_id": 5130,
            "gold_sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
            "gold_complexity": 8,
            "vt": "SELECT products.product_name, AVG(products.product_price) FROM products GROUP BY products.product_name",
            "ba": "The virtual table provides a summary of product names along with their average prices from the 'products' table. The query groups the results by product name to calculate the average price for each unique product.",
            "question": "For each distinct product name, show its average product price."
        },
        {
            "sample_id": 5145,
            "gold_sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
            "gold_complexity": 7,
            "vt": "SELECT drama_workshop_groups.store_email_address FROM addresses JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE addresses.state_county = None.\"alaska\"",
            "ba": "The virtual table retrieves the email addresses of stores associated with drama workshop groups located in a specific state or county. The query joins the 'addresses' table with the 'drama_workshop_groups' table to filter the results based on the state or county specified.",
            "question": "What are the email addresses of the drama workshop groups with address in Alaska state?"
        },
        {
            "sample_id": 5158,
            "gold_sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
            "gold_complexity": 7,
            "vt": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID",
            "ba": "The virtual table lists the names of clients who have not made any bookings. It retrieves client names from the 'Clients' table and excludes those who appear in the 'Bookings' table by performing an EXCEPT operation.",
            "question": "What are the names of the clients who do not have any booking?"
        },
        {
            "sample_id": 5083,
            "gold_sql": "SELECT count(*) FROM BOOKINGS",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM bookings",
            "ba": "The virtual table provides a count of all bookings made in the 'bookings' table. This count represents the total number of booking records available, which can be useful for understanding the volume of bookings processed.",
            "question": "How many bookings do we have?"
        },
        {
            "sample_id": 5089,
            "gold_sql": "SELECT count(*) FROM CUSTOMERS",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all unique customers from the 'customers' table.",
            "question": "How many customers do we have?"
        },
        {
            "sample_id": 5143,
            "gold_sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
            "gold_complexity": 7,
            "vt": "SELECT drama_workshop_groups.store_name FROM addresses JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE addresses.city_town = None.\"feliciaberg\"",
            "ba": "The virtual table retrieves the names of store locations associated with drama workshop groups from the 'drama_workshop_groups' table, filtered by a specific city or town from the 'addresses' table. The placeholder in the WHERE clause represents the name of the city or town.",
            "question": "What are the names of the drama workshop groups with address in Feliciaberg city?"
        },
        {
            "sample_id": 5151,
            "gold_sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
            "gold_complexity": 7,
            "vt": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID",
            "ba": "The virtual table lists the cities or towns from the 'Addresses' table associated with customers, excluding those that are also associated with performers. This is achieved by performing a join between the 'Addresses' and 'Customers' tables to get the relevant cities, and then using an EXCEPT clause to remove any cities that are linked to performers.",
            "question": "Show all cities where at least one customer lives in but no performer lives in."
        },
        {
            "sample_id": 5098,
            "gold_sql": "SELECT DISTINCT payment_method_code FROM INVOICES",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT invoices.payment_method_code FROM invoices",
            "ba": "The virtual table lists unique payment method codes from the 'invoices' table, which are used to identify the different payment methods associated with invoices.",
            "question": "Show me the distinct payment method codes from the invoice record."
        },
        {
            "sample_id": 5162,
            "gold_sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT invoices.product_id FROM invoices GROUP BY invoices.product_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique product identifiers from the 'invoices' table, grouping them to count how many times each product appears in the invoices. The results are ordered by the count of occurrences, allowing the user to limit the output to a specified number of products.",
            "question": "Find the id of the product ordered the most often on invoices."
        },
        {
            "sample_id": 5142,
            "gold_sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Currency_Code) FROM drama_workshop_groups",
            "ba": "The virtual table counts the distinct currency codes used in the 'drama_workshop_groups' table, which represents various workshop groups. This helps in understanding the diversity of currencies associated with different workshop groups.",
            "question": "Find the number of distinct currency codes used in drama workshop groups."
        },
        {
            "sample_id": 5107,
            "gold_sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
            "gold_complexity": 6,
            "vt": "SELECT performers.customer_phone FROM performers WHERE performers.customer_name = None.\"ashley\"",
            "ba": "The virtual table describes the phone numbers of performers from the 'performers' table who have a specific name. The placeholder in the WHERE clause represents the performer's name.",
            "question": "What is the phone number of the performer Ashley?"
        },
        {
            "sample_id": 5161,
            "gold_sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT invoices.product_id FROM invoices GROUP BY invoices.product_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique product identifiers from the 'invoices' table, grouping them to count how many times each product appears in the invoices. The results are ordered by the count of occurrences, and a limit is applied to restrict the number of returned product identifiers based on a specified numeric value.",
            "question": "What is the product ID of the most frequently ordered item on invoices?"
        },
        {
            "sample_id": 5149,
            "gold_sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT drama_workshop_groups.marketing_region_code FROM drama_workshop_groups GROUP BY drama_workshop_groups.marketing_region_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique marketing region codes from the 'drama_workshop_groups' table, grouping the results by marketing region code and ordering them based on the count of workshop groups in each region. The placeholder in the LIMIT clause allows for specifying the maximum number of unique marketing regions to return.",
            "question": "What is the marketing region code that has the most drama workshop groups?"
        },
        {
            "sample_id": 5088,
            "gold_sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
            "gold_complexity": 6,
            "vt": "SELECT bookings.planned_delivery_date, bookings.actual_delivery_date FROM bookings",
            "ba": "The virtual table displays the planned and actual delivery dates of bookings from the 'bookings' table. The placeholders in the SELECT statement allow for further filtering or modification based on specific criteria related to the bookings.",
            "question": "What are the planned delivery date and actual delivery date for each booking?"
        },
        {
            "sample_id": 5087,
            "gold_sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
            "gold_complexity": 6,
            "vt": "SELECT bookings.planned_delivery_date, bookings.actual_delivery_date FROM bookings",
            "ba": "The virtual table displays the planned and actual delivery dates of bookings from the 'bookings' table. The placeholders in the SELECT statement allow for further filtering or modification based on specific criteria related to the bookings.",
            "question": "Show all the planned delivery dates and actual delivery dates of bookings."
        },
        {
            "sample_id": 5096,
            "gold_sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
            "gold_complexity": 6,
            "vt": "SELECT MIN(invoices.order_quantity), AVG(invoices.order_quantity), MAX(invoices.order_quantity) FROM invoices",
            "ba": "The virtual table provides aggregate statistics on the quantity of products ordered in invoices. It calculates the minimum, average, and maximum order quantities from the 'invoices' table.",
            "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices."
        },
        {
            "sample_id": 5133,
            "gold_sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
            "gold_complexity": 7,
            "vt": "SELECT SUM(order_items.order_quantity) FROM order_items JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE products.product_name = None.\"photo\"",
            "ba": "The virtual table summarizes the total quantity of a specific product ordered from the 'order_items' table, which is linked to the 'products' table. The placeholder in the WHERE clause represents the name of the product being queried.",
            "question": "What are the total order quantities of photo products?"
        },
        {
            "sample_id": 5129,
            "gold_sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
            "gold_complexity": 8,
            "vt": "SELECT products.product_name, AVG(products.product_price) FROM products GROUP BY products.product_name",
            "ba": "The virtual table provides a summary of product names along with their average prices from the 'products' table. The query groups the results by product name to calculate the average price for each unique product.",
            "question": "What are the different product names? What is the average product price for each of them?"
        },
        {
            "sample_id": 5084,
            "gold_sql": "SELECT count(*) FROM BOOKINGS",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM bookings",
            "ba": "The virtual table provides a count of all bookings made in the 'bookings' table. This count represents the total number of booking records available, which can be useful for understanding the volume of bookings processed.",
            "question": "Count the total number of bookings made."
        },
        {
            "sample_id": 5127,
            "gold_sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"",
            "gold_complexity": 9,
            "vt": "SELECT drama_workshop_groups.store_phone, drama_workshop_groups.store_email_address FROM drama_workshop_groups JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE services.product_name = None.\"film\"",
            "ba": "The virtual table describes the store's phone number and email address associated with drama workshop groups that offer a specific service related to films. The placeholder in the WHERE clause represents the product name, which is used to filter the results based on the service being offered.",
            "question": "What are the names of workshop groups in which services with product name \"film\" are performed?"
        },
        {
            "sample_id": 5163,
            "gold_sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'",
            "gold_complexity": 8,
            "vt": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'",
            "ba": "The virtual table retrieves the descriptions of service types that are associated with two specific products: 'photo' and 'film'. It uses an intersection to find common service types linked to both products.",
            "question": "What is the description of the service type which offers both the photo product and the film product?"
        },
        {
            "sample_id": 5115,
            "gold_sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
            "gold_complexity": 7,
            "vt": "SELECT addresses.state_county FROM addresses JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE stores.marketing_region_code = None.\"ca\"",
            "ba": "The virtual table retrieves the state or county information from the 'addresses' table for stores located in a specific marketing region. The query joins the 'addresses' table with the 'stores' table based on the address identifier, filtering the results to include only those stores that belong to a specified marketing region code.",
            "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?"
        },
        {
            "sample_id": 5117,
            "gold_sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"",
            "gold_complexity": 7,
            "vt": "SELECT marketing_regions.marketing_region_name FROM marketing_regions JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE stores.store_name = None.\"rob dinning\"",
            "ba": "The virtual table retrieves the names of marketing regions associated with stores. It joins the 'marketing_regions' table with the 'stores' table based on the marketing region code. The query filters the results to include only those stores that match a specific store name.",
            "question": "What is the name of the marketing region that the store Rob Dinning belongs to?"
        },
        {
            "sample_id": 5106,
            "gold_sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
            "gold_complexity": 6,
            "vt": "SELECT products.product_name FROM products ORDER BY products.product_price",
            "ba": "The virtual table lists the names of products from the 'products' table, sorted by their price in ascending order. This allows users to see the product names in relation to their prices, making it easier to identify cheaper or more expensive options.",
            "question": "Sort the names of products in ascending order of their price."
        },
        {
            "sample_id": 5100,
            "gold_sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"",
            "gold_complexity": 6,
            "vt": "SELECT marketing_regions.marketing_region_descriptrion FROM marketing_regions WHERE marketing_regions.marketing_region_name = None.\"china\"",
            "ba": "The virtual table describes the marketing region's description from the 'marketing_regions' table for a specific marketing region name. The placeholder in the WHERE clause represents the name of the marketing region being queried.",
            "question": "Find the marketing region description of China?"
        },
        {
            "sample_id": 5113,
            "gold_sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
            "gold_complexity": 7,
            "vt": "SELECT addresses.city_town FROM addresses JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE stores.store_name = None.\"fja filming\"",
            "ba": "The virtual table retrieves the city or town of addresses linked to stores that match a specific store name. The placeholder in the WHERE clause represents the name of the store being queried.",
            "question": "Which city is the address of the store named \"FJA Filming\" located in?"
        },
        {
            "sample_id": 5086,
            "gold_sql": "SELECT Order_Date FROM BOOKINGS",
            "gold_complexity": 4,
            "vt": "SELECT bookings.order_date FROM bookings",
            "ba": "The virtual table provides the order dates of bookings from the 'bookings' table. The placeholder in the SELECT clause allows for further filtering or selection of specific booking records based on additional criteria that may be applied later.",
            "question": "What is the order date of each booking?"
        },
        {
            "sample_id": 5104,
            "gold_sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT products.product_name FROM products ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of products from the 'products' table, ordered by their price in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of product names to retrieve.",
            "question": "Tell me the name of the most pricy product."
        },
        {
            "sample_id": 5108,
            "gold_sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
            "gold_complexity": 6,
            "vt": "SELECT performers.customer_phone FROM performers WHERE performers.customer_name = None.\"ashley\"",
            "ba": "The virtual table describes the phone numbers of performers from the 'performers' table who have a specific name. The placeholder in the WHERE clause represents the performer's name.",
            "question": "Find the phone number of performer \"Ashley\"."
        },
        {
            "sample_id": 5141,
            "gold_sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Currency_Code) FROM drama_workshop_groups",
            "ba": "The virtual table counts the distinct currency codes used in the 'drama_workshop_groups' table, which represents various workshop groups and their associated currency information.",
            "question": "How many distinct currency codes are there for all drama workshop groups?"
        },
        {
            "sample_id": 5125,
            "gold_sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
            "gold_complexity": 7,
            "vt": "SELECT drama_workshop_groups.store_phone, drama_workshop_groups.store_email_address FROM drama_workshop_groups JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
            "ba": "The virtual table describes the store's phone number and email address associated with drama workshop groups that offer specific services. The join operation links the 'drama_workshop_groups' table with the 'services' table based on the workshop group identifier, allowing for the retrieval of contact information for stores related to those groups.",
            "question": "What are the phones and emails of workshop groups in which services are performed?"
        },
        {
            "sample_id": 5147,
            "gold_sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
            "gold_complexity": 9,
            "vt": "SELECT addresses.city_town, COUNT(*) FROM addresses JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY addresses.city_town",
            "ba": "The virtual table summarizes the number of drama workshop groups located in each city or town by joining the 'addresses' table with the 'drama_workshop_groups' table. It groups the results by the city or town, providing a count of workshop groups for each location.",
            "question": "Show all cities along with the number of drama workshop groups in each city."
        },
        {
            "sample_id": 5095,
            "gold_sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
            "gold_complexity": 6,
            "vt": "SELECT MIN(invoices.order_quantity), AVG(invoices.order_quantity), MAX(invoices.order_quantity) FROM invoices",
            "ba": "The virtual table summarizes the order quantities from the 'invoices' table by calculating the minimum, average, and maximum order quantities. This provides insights into the range and average of products ordered across all invoices.",
            "question": "Show the minimum, average, maximum order quantity of all invoices."
        },
        {
            "sample_id": 5118,
            "gold_sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"",
            "gold_complexity": 7,
            "vt": "SELECT marketing_regions.marketing_region_name FROM marketing_regions JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE stores.store_name = None.\"rob dinning\"",
            "ba": "The virtual table retrieves the names of marketing regions associated with stores. It joins the 'marketing_regions' table with the 'stores' table based on the marketing region code. The query filters the results to find the marketing region name for a specific store identified by its name.",
            "question": "Return the name of the marketing region the store Rob Dinning is located in."
        },
        {
            "sample_id": 5110,
            "gold_sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
            "gold_complexity": 8,
            "vt": "SELECT invoices.payment_method_code, COUNT(*) FROM invoices GROUP BY invoices.payment_method_code",
            "ba": "The virtual table summarizes the count of invoices grouped by their payment method codes from the 'invoices' table. Each unique payment method code is represented along with the total number of invoices associated with that payment method.",
            "question": "List the distinct payment method codes with the number of orders made"
        },
        {
            "sample_id": 5121,
            "gold_sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
            "gold_complexity": 11,
            "vt": "SELECT ref_service_types.service_type_description, services.service_type_code, COUNT(*) FROM ref_service_types JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY services.service_type_code",
            "ba": "The virtual table summarizes the count of services grouped by their service type descriptions from the 'ref_service_types' and 'services' tables. It provides insights into how many services are associated with each type of service, allowing for analysis of service distribution across different categories.",
            "question": "What is the description, code and the corresponding count of each service type?"
        },
        {
            "sample_id": 5148,
            "gold_sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
            "gold_complexity": 9,
            "vt": "SELECT addresses.city_town, COUNT(*) FROM addresses JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY addresses.city_town",
            "ba": "The virtual table summarizes the number of drama workshop groups located in each city or town by joining the 'addresses' table with the 'drama_workshop_groups' table. It groups the results by the city or town to provide a count of workshop groups per location.",
            "question": "How many drama workshop groups are there in each city? Return both the city and the count."
        },
        {
            "sample_id": 5112,
            "gold_sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT invoices.payment_method_code FROM invoices GROUP BY invoices.payment_method_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique payment method codes from the 'invoices' table, grouped by the payment method code and ordered by the count of invoices associated with each payment method. The placeholder in the LIMIT clause allows for specifying the maximum number of payment methods to return.",
            "question": "Find the payment method that is used the most often in all the invoices. Give me its code."
        },
        {
            "sample_id": 5157,
            "gold_sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
            "gold_complexity": 7,
            "vt": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID",
            "ba": "The virtual table provides a list of customer names from the 'Clients' table who have not made any bookings. It does this by selecting all customer names from 'Clients' and excluding those who appear in the 'Bookings' table, effectively identifying clients without any associated bookings.",
            "question": "Show the names of all the clients with no booking."
        },
        {
            "sample_id": 5138,
            "gold_sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
            "gold_complexity": 7,
            "vt": "SELECT customer_orders.actual_delivery_date FROM customer_orders JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE order_items.order_quantity = [placeholder-type:numeric]",
            "ba": "The virtual table provides the actual delivery dates of customer orders from the 'customer_orders' table, filtered by the quantity of items ordered. The placeholder in the WHERE clause represents the specific quantity of items that the user is interested in.",
            "question": "List the actual delivery date for all the orders with quantity 1"
        }
    ],
    "college_1": [
        {
            "sample_id": 3170,
            "gold_sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
            "gold_complexity": 10,
            "vt": "SELECT employee.emp_fname, employee.emp_lname FROM professor JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE department.dept_name = None.\"biology\"",
            "ba": "The virtual table describes the first and last names of professors from the 'professor' table who belong to a specific department. The query joins the 'professor' table with the 'department' table to filter professors based on the department's name, using a placeholder for the department name.",
            "question": "What is the first and last name of the professor in biology department?"
        },
        {
            "sample_id": 3202,
            "gold_sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), department.school_code FROM department JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY department.school_code",
            "ba": "The virtual table provides a count of professors grouped by the school code associated with their respective departments. It joins the 'department' table with the 'professor' table to relate professors to their departments, and then aggregates the data by school code.",
            "question": "What is the number of professors for different school?"
        },
        {
            "sample_id": 3231,
            "gold_sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
            "gold_complexity": 9,
            "vt": "SELECT SUM(course.crs_credit), course.dept_code FROM course JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY course.dept_code",
            "ba": "The virtual table summarizes the total credit hours for courses grouped by their respective department codes. It combines data from the 'course' and 'class' tables, where the course code in the 'course' table matches the course code in the 'class' table. The result will show the total credit hours for each department offering courses.",
            "question": "What are the total number of credits offered by each department?"
        },
        {
            "sample_id": 3303,
            "gold_sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
            "gold_complexity": 7,
            "vt": "SELECT employee.emp_fname, class.crs_code FROM class JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
            "ba": "The virtual table describes the first names of professors and the course codes they teach from the 'class' and 'employee' tables. The join condition links the professor's identifier in the 'class' table to the corresponding employee in the 'employee' table.",
            "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?"
        },
        {
            "sample_id": 3270,
            "gold_sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
            "gold_complexity": 10,
            "vt": "SELECT employee.emp_lname, professor.prof_office FROM employee JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the last names of employees and their corresponding office locations from the 'employee' and 'professor' tables. It joins these tables through the professor's department code to filter results based on a specific department name provided as a placeholder.",
            "question": "What is the last name and office of the professor from the history department?"
        },
        {
            "sample_id": 3247,
            "gold_sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT department.dept_name FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY course.dept_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of departments that offer courses, based on the classes that students are enrolled in. It aggregates the data by department code and orders the results by the number of classes offered, limiting the output to a specified number of departments.",
            "question": "What is the name of the department with the most students enrolled?"
        },
        {
            "sample_id": 3291,
            "gold_sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
            "gold_complexity": 11,
            "vt": "SELECT student.stu_gpa, student.stu_phone, student.stu_fname FROM student ORDER BY student.stu_gpa LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the GPA, phone number, and first name of students from the 'student' table, ordered by their GPA. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?"
        },
        {
            "sample_id": 3318,
            "gold_sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
            "gold_complexity": 8,
            "vt": "SELECT student.stu_lname FROM student JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll.enroll_grade = '[placeholder-type:string]' AND enroll.class_code = [placeholder-type:numeric]",
            "ba": "The virtual table describes the last names of students who have received a specific grade in a particular class. It retrieves data from the 'student' table and joins it with the 'enroll' table to filter based on the grade and class code provided by placeholders.",
            "question": "What is the last name of the student who got a grade A in the class with code 10018."
        },
        {
            "sample_id": 3196,
            "gold_sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), class.class_room FROM class GROUP BY class.class_room HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of classes held in each classroom from the 'class' table. It groups the results by the classroom and filters to show only those classrooms that have a specified minimum number of classes scheduled.",
            "question": "Find the number of classes offered for all class rooms that held at least 2 classes."
        },
        {
            "sample_id": 3245,
            "gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of classes offered in a specific department. It joins the 'class' table with the 'enroll' table to link classes with student enrollments, then joins the 'course' table to associate each class with its corresponding course, and finally joins the 'department' table to filter by the department name. The placeholder in the WHERE clause represents the name of the department for which the class count is being queried.",
            "question": "How many students are enrolled in some classes that are taught by an accounting professor?"
        },
        {
            "sample_id": 3223,
            "gold_sql": "SELECT count(DISTINCT crs_code) FROM CLASS",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT crs_code) FROM class",
            "ba": "The virtual table counts the number of distinct courses offered in the 'class' table. Each course is identified by its unique course code, 'crs_code'. This query provides insight into the variety of courses available without duplicating any course entries.",
            "question": "What are the number of different course codes?"
        },
        {
            "sample_id": 3207,
            "gold_sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT department.school_code FROM department JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY department.school_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the school codes from the 'department' table, joining it with the 'professor' table to associate professors with their respective departments. It groups the results by school code and orders them based on the count of professors in each department, limiting the output to a specified number of results.",
            "question": "Which school has the fewest professors?"
        },
        {
            "sample_id": 3301,
            "gold_sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",
            "gold_complexity": 11,
            "vt": "SELECT employee.emp_fname, professor.prof_office FROM employee JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE department.dept_name = '[placeholder-type:string]' AND professor.prof_high_degree = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of employees and the office locations of professors from the 'employee' and 'professor' tables. It filters the results based on the department name and the highest degree obtained by the professor, both represented by placeholders for string values.",
            "question": "What are the first names and office of the professors who are in the history department and have a Ph.D?"
        },
        {
            "sample_id": 3269,
            "gold_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
            "gold_complexity": 10,
            "vt": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num",
            "ba": "The virtual table describes the first names of employees who are professors in the 'History' department but are not currently assigned to teach any classes. It combines data from the 'employee', 'professor', and 'department' tables to filter for professors in the specified department, and uses an EXCEPT clause to exclude those who are teaching classes.",
            "question": "What are the first names of all history professors who do not teach?"
        },
        {
            "sample_id": 3208,
            "gold_sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), professor.dept_code FROM professor WHERE professor.prof_high_degree = '[placeholder-type:string]' GROUP BY professor.dept_code",
            "ba": "The virtual table summarizes the number of professors in each department who hold a specific highest degree. It groups the results by department code, allowing for an overview of the distribution of professors based on their highest degree attained.",
            "question": "Find the number of professors with a Ph.D. degree in each department."
        },
        {
            "sample_id": 3321,
            "gold_sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
            "gold_complexity": 12,
            "vt": "SELECT employee.emp_fname, professor.prof_office FROM professor JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE department.dept_name = '[placeholder-type:string]' AND professor.prof_high_degree <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of employees and the office locations of professors from the 'professor' table, joined with the 'employee' table to get employee details and the 'department' table to filter by department name. The placeholders in the WHERE clause represent the department's name and the professor's highest degree obtained.",
            "question": "What are the first names and offices of history professors who don't have Ph.D.s?"
        },
        {
            "sample_id": 3266,
            "gold_sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num",
            "gold_complexity": 8,
            "vt": "SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num",
            "ba": "The virtual table describes the first names of employees from the 'employee' table who hold the job code 'PROF' (indicating they are professors) but are not currently assigned to teach any classes. The query uses an EXCEPT clause to exclude those professors who are linked to any class in the 'class' table.",
            "question": "What are the first names of the professors who do not teach a class."
        },
        {
            "sample_id": 3178,
            "gold_sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
            "gold_complexity": 8,
            "vt": "SELECT course.crs_credit, course.crs_description FROM course WHERE course.crs_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the credit hours and content description of a specific course from the 'course' table. The placeholder in the WHERE clause represents the unique course code.",
            "question": "How many credits does course CIS-220 have, and what its description?"
        },
        {
            "sample_id": 3288,
            "gold_sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.stu_gpa) FROM enroll JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE class.crs_code = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average GPA of students enrolled in classes associated with a specific course code. It joins the 'enroll' table with the 'student' table to access student GPA data and further joins the 'class' table to filter by the course code. The placeholder in the WHERE clause represents the course code for which the average GPA is being calculated.",
            "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?"
        },
        {
            "sample_id": 3175,
            "gold_sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM employee JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE employee.emp_lname = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of employees who are professors and have a specific last name. It joins the 'employee' table with the 'class' table to find professors based on their unique identifier, and filters the results by the last name of the employee.",
            "question": "How many classes does the professor whose last name is Graztevski teach?"
        },
        {
            "sample_id": 3221,
            "gold_sql": "SELECT count(DISTINCT class_code) FROM CLASS",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT class_code) FROM class",
            "ba": "The virtual table counts the number of distinct classes available in the 'class' table.",
            "question": "How many unique classes are offered?"
        },
        {
            "sample_id": 3197,
            "gold_sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), class.class_room FROM class GROUP BY class.class_room HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of classes held in each classroom from the 'class' table. It groups the results by the classroom and filters to show only those classrooms that have a specified minimum number of classes scheduled.",
            "question": "For each classroom with at least 2 classes, how many classes are offered?"
        },
        {
            "sample_id": 3309,
            "gold_sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
            "gold_complexity": 14,
            "vt": "SELECT employee.emp_fname, professor.prof_office, course.crs_description, department.dept_name FROM class JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code",
            "ba": "The virtual table describes the first names of employees, their office locations, course descriptions, and department names by joining multiple tables. It retrieves data from the 'class', 'employee', 'course', 'professor', and 'department' tables to provide a comprehensive view of the classes taught by professors, including their associated courses and departments.",
            "question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?"
        },
        {
            "sample_id": 3216,
            "gold_sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT department.dept_name, AVG(student.stu_gpa) FROM student JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY student.dept_code ORDER BY AVG(student.stu_gpa) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the average GPA of students grouped by their respective departments. It retrieves the department name from the 'department' table and calculates the average GPA from the 'student' table. The results are ordered by the average GPA in ascending order, and a limit is applied to restrict the number of results returned.",
            "question": "What is the name and the average gpa of department whose students have the highest average gpa?"
        },
        {
            "sample_id": 3182,
            "gold_sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT dept_address) FROM department WHERE department.school_code = '[placeholder-type:string]'",
            "ba": "The virtual table counts the distinct physical addresses of departments from the 'department' table that belong to a specific school. The placeholder in the WHERE clause represents the school code.",
            "question": "How many different locations does the school with code BUS has?"
        },
        {
            "sample_id": 3183,
            "gold_sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT dept_address) FROM department WHERE department.school_code = '[placeholder-type:string]'",
            "ba": "The virtual table counts the distinct addresses of departments from the 'department' table that belong to a specific school. The placeholder in the WHERE clause represents the school code.",
            "question": "What are the different locations of the school with the code BUS?"
        },
        {
            "sample_id": 3320,
            "gold_sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
            "gold_complexity": 12,
            "vt": "SELECT employee.emp_fname, professor.prof_office FROM professor JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE department.dept_name = '[placeholder-type:string]' AND professor.prof_high_degree <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of employees and the office locations of professors from the 'professor' table, joined with the 'employee' table to get employee details and the 'department' table to filter by department name. The placeholders in the WHERE clause represent the department's name and the professor's highest degree obtained.",
            "question": "Find the first name and office of history professor who did not get a Ph.D. degree."
        },
        {
            "sample_id": 3214,
            "gold_sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
            "gold_complexity": 10,
            "vt": "SELECT MAX(student.stu_gpa), AVG(student.stu_gpa), MIN(student.stu_gpa), student.dept_code FROM student GROUP BY student.dept_code",
            "ba": "The virtual table summarizes the academic performance of students by calculating the maximum, average, and minimum GPA for each department. It groups the results by the department code, allowing for a comparison of student performance across different departments.",
            "question": "Find the max, average, and minimum gpa of all students in each department."
        },
        {
            "sample_id": 3250,
            "gold_sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
            "gold_complexity": 6,
            "vt": "SELECT class.class_code FROM class WHERE class.class_room = '[placeholder-type:string]'",
            "ba": "The virtual table describes the unique class codes from the 'class' table that are held in a specific classroom. The placeholder in the WHERE clause represents the room where the class is conducted.",
            "question": "List the codes of all courses that take place in room KLR209."
        },
        {
            "sample_id": 3171,
            "gold_sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
            "gold_complexity": 10,
            "vt": "SELECT employee.emp_fname, employee.emp_lname FROM professor JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE department.dept_name = None.\"biology\"",
            "ba": "The virtual table describes the first and last names of professors from the 'professor' table who belong to a specific department. The query joins the 'professor' table with the 'department' table to filter professors based on the department's name, using a placeholder for the department name.",
            "question": "What are the first and last name of all biology professors?"
        },
        {
            "sample_id": 3188,
            "gold_sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT dept_name), department.school_code FROM department GROUP BY department.school_code",
            "ba": "The virtual table provides a count of distinct department names grouped by the school code from the 'department' table. This allows for an overview of how many unique departments exist within each school.",
            "question": "Find the number of departments in each school."
        },
        {
            "sample_id": 3268,
            "gold_sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
            "gold_complexity": 10,
            "vt": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num",
            "ba": "The virtual table describes the first names of employees who are professors in the 'History' department but are not currently assigned to teach any classes. It combines data from the 'employee', 'professor', and 'department' tables to filter for professors in the specified department, and uses an EXCEPT clause to exclude those who are teaching classes.",
            "question": "What is the first names of the professors from the history department who do not teach a class."
        },
        {
            "sample_id": 3166,
            "gold_sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM professor JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE department.dept_name = None.\"accounting\"",
            "ba": "The virtual table counts the number of professors associated with the 'accounting' department by joining the 'professor' and 'department' tables on the department code. The placeholder in the WHERE clause represents the department's name.",
            "question": "Find the number of professors in accounting department."
        },
        {
            "sample_id": 3192,
            "gold_sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), class.crs_code FROM class GROUP BY class.crs_code",
            "ba": "The virtual table summarizes the number of classes offered for each course by counting the entries in the 'class' table and grouping the results by the course code. This allows users to see how many classes are associated with each specific course.",
            "question": "How many sections does each course has?"
        },
        {
            "sample_id": 3199,
            "gold_sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), course.dept_code FROM class JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY course.dept_code",
            "ba": "The virtual table summarizes the number of classes offered by each department by counting the total classes and grouping them by department code. It joins the 'class' table with the 'course' table to associate each class with its corresponding course and department.",
            "question": "How many classes are held in each department?"
        },
        {
            "sample_id": 3189,
            "gold_sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT dept_name), department.school_code FROM department GROUP BY department.school_code",
            "ba": "The virtual table provides a count of distinct department names grouped by the school code from the 'department' table. This allows for an overview of how many unique departments exist within each school.",
            "question": "How many departments are in each school?"
        },
        {
            "sample_id": 3314,
            "gold_sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
            "gold_complexity": 11,
            "vt": "SELECT employee.emp_fname, class.class_room FROM class JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of employees and the rooms where classes are held, specifically for classes taught by professors from a certain department. The placeholders in the WHERE clause represent the department's name.",
            "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room."
        },
        {
            "sample_id": 3326,
            "gold_sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
            "gold_complexity": 7,
            "vt": "SELECT department.dept_name FROM course JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE course.crs_description LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of departments that offer courses matching a specific description. It retrieves the department name from the 'department' table by joining it with the 'course' table based on the department code. The placeholder in the WHERE clause allows for filtering courses based on their description.",
            "question": "Find the name of department that offers the class whose description has the word \"Statistics\"."
        },
        {
            "sample_id": 3168,
            "gold_sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT PROF_NUM) FROM class WHERE class.crs_code = None.\"acct-211\"",
            "ba": "The virtual table counts the distinct number of professors teaching a specific course identified by its course code from the 'class' table.",
            "question": "How many professors are teaching class with code ACCT-211?"
        },
        {
            "sample_id": 3328,
            "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'",
            "gold_complexity": 10,
            "vt": "SELECT student.stu_fname FROM student JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE class.crs_code = '[placeholder-type:string]' AND student.stu_lname LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of students who are enrolled in classes associated with a specific course code and whose last names match a certain pattern. The placeholders in the WHERE clause represent the course code and the last name pattern.",
            "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?"
        },
        {
            "sample_id": 3252,
            "gold_sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
            "gold_complexity": 8,
            "vt": "SELECT employee.emp_fname FROM employee WHERE employee.emp_jobcode = '[placeholder-type:string]' ORDER BY employee.emp_dob",
            "ba": "The virtual table describes the first names of employees from the 'employee' table who hold a specific job code. The results are ordered by the employees' date of birth. The placeholder in the WHERE clause represents the job code of the employees.",
            "question": "List the first name of all employees with job code PROF ordered by their date of birth."
        },
        {
            "sample_id": 3225,
            "gold_sql": "SELECT count(DISTINCT dept_name) FROM department",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT dept_name) FROM department",
            "ba": "The virtual table counts the distinct department names from the 'department' table.",
            "question": "How many different departments are there?"
        },
        {
            "sample_id": 3239,
            "gold_sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'",
            "gold_complexity": 9,
            "vt": "SELECT student.stu_fname FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE class.crs_code = '[placeholder-type:string]' AND enroll.enroll_grade = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of students enrolled in classes associated with a specific course code and who have received a specific grade. The placeholders in the WHERE clause represent the course code and the grade received by the students.",
            "question": "What are the first names of all students who took ACCT-211 and received a C?"
        },
        {
            "sample_id": 3294,
            "gold_sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
            "gold_complexity": 10,
            "vt": "SELECT student.stu_fname, student.stu_gpa FROM student WHERE student.stu_gpa < (SELECT AVG(student.stu_gpa) FROM student)",
            "ba": "The virtual table describes the first names and GPA of students from the 'student' table who have a GPA lower than the average GPA of all students. The subquery calculates the average GPA, and the placeholder represents this average value.",
            "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students."
        },
        {
            "sample_id": 3172,
            "gold_sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT employee.emp_fname, employee.emp_dob FROM employee JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE class.crs_code = None.\"acct-211\"",
            "ba": "The virtual table describes the first names and dates of birth of employees from the 'employee' table who are professors teaching a specific class. The query joins the 'employee' table with the 'class' table to filter professors based on the course code provided.",
            "question": "What are the first names and date of birth of professors teaching course ACCT-211?"
        },
        {
            "sample_id": 3169,
            "gold_sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT PROF_NUM) FROM class WHERE class.crs_code = None.\"acct-211\"",
            "ba": "The virtual table counts the number of distinct professors teaching a specific course identified by its course code from the 'class' table.",
            "question": "How many professors teach a class with the code ACCT-211?"
        },
        {
            "sample_id": 3316,
            "gold_sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT employee.emp_fname, professor.prof_high_degree FROM class JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of employees and their highest degrees from the 'class', 'employee', 'professor', and 'department' tables. It filters the results based on a specific department name provided as a placeholder.",
            "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department."
        },
        {
            "sample_id": 3241,
            "gold_sql": "SELECT count(*) FROM employee",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM employee",
            "ba": "The virtual table counts the total number of employees in the 'employee' table.",
            "question": "How many employees are there all together?"
        },
        {
            "sample_id": 3283,
            "gold_sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM professor JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE department.dept_name = '[placeholder-type:string]' OR department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of professors associated with specific departments from the 'professor' and 'department' tables. The query filters the results based on the names of the departments provided as placeholders.",
            "question": "What is the number of professors who are in the Accounting or Biology departments?"
        },
        {
            "sample_id": 3244,
            "gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of classes offered in a specific department. It joins the 'class' table with the 'enroll' table to link classes with student enrollments, then joins the 'course' table to associate each class with its corresponding course, and finally joins the 'department' table to filter by the department name. The placeholder in the WHERE clause represents the name of the department for which the class count is being queried.",
            "question": "How many students are enrolled in the class taught by some professor from the accounting department?"
        },
        {
            "sample_id": 3276,
            "gold_sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'",
            "gold_complexity": 8,
            "vt": "SELECT class.crs_code FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE student.stu_lname = '[placeholder-type:string]'",
            "ba": "The virtual table describes the course codes of classes that students are enrolled in, filtered by the last name of the student. The query joins the 'class' table with the 'enroll' table to link classes with student enrollments, and then further joins with the 'student' table to filter based on the student's last name. The placeholder in the WHERE clause represents the last name of the student.",
            "question": "What is the code of the course which the student whose last name is Smithson took?"
        },
        {
            "sample_id": 3187,
            "gold_sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
            "gold_complexity": 8,
            "vt": "SELECT course.crs_credit, course.crs_description FROM course WHERE course.crs_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the credit hours and content description of a specific course from the 'course' table. The placeholder in the WHERE clause represents the unique course code.",
            "question": "What is the course description and number of credits for QM-261?"
        },
        {
            "sample_id": 3194,
            "gold_sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
            "gold_complexity": 8,
            "vt": "SELECT SUM(course.crs_credit), course.dept_code FROM course GROUP BY course.dept_code",
            "ba": "The virtual table summarizes the total credit hours for courses grouped by their respective department codes from the 'course' table. The placeholder in the SELECT clause represents the total credit hours, while the GROUP BY clause organizes the results by department code.",
            "question": "What is the total credit does each department offer?"
        },
        {
            "sample_id": 3271,
            "gold_sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
            "gold_complexity": 10,
            "vt": "SELECT employee.emp_lname, professor.prof_office FROM employee JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the last names of employees and their corresponding office locations from the 'employee' and 'professor' tables. It joins these tables based on the employee's unique identifier and the department code, filtering the results to include only those employees who belong to a specific department, represented by a placeholder for the department's name.",
            "question": "What are the last name and office of all history professors?"
        },
        {
            "sample_id": 3191,
            "gold_sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(DISTINCT dept_name), department.school_code FROM department GROUP BY department.school_code HAVING COUNT(DISTINCT dept_name) < [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of distinct department names grouped by the school code from the 'department' table. It filters the results to only include schools that have fewer distinct departments than a specified numeric value.",
            "question": "How many different departments are there in each school that has less than 5 apartments?"
        },
        {
            "sample_id": 3313,
            "gold_sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
            "gold_complexity": 9,
            "vt": "SELECT student.stu_fname, student.stu_lname FROM student JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll.enroll_grade = '[placeholder-type:string]' OR enroll.enroll_grade = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first and last names of students who have received specific grades in their enrolled classes. It retrieves data from the 'student' table and joins it with the 'enroll' table to filter based on the grades received by the students. The placeholders in the WHERE clause represent the grades being queried.",
            "question": "What are the names of all students taking a course who received an A or C?"
        },
        {
            "sample_id": 3255,
            "gold_sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
            "gold_complexity": 9,
            "vt": "SELECT employee.emp_fname, professor.prof_office FROM professor JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY employee.emp_fname",
            "ba": "The virtual table describes the first names of professors along with their office locations from the 'professor' and 'employee' tables. The join operation links the two tables based on the professor's employee number, ensuring that only relevant records are retrieved. The results are ordered by the first names of the employees.",
            "question": "What are the first names and office locations for all professors sorted alphabetically by first name?"
        },
        {
            "sample_id": 3180,
            "gold_sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
            "gold_complexity": 6,
            "vt": "SELECT department.dept_address FROM department WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the physical address of a department from the 'department' table based on the specified department name. The placeholder in the WHERE clause represents the name of the department being queried.",
            "question": "what is the address of history department?"
        },
        {
            "sample_id": 3235,
            "gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE class.crs_code = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of the total number of enrollments in classes associated with a specific course code. It joins the 'class' table with the 'enroll' table to correlate class codes with student enrollments, filtering the results based on the specified course code.",
            "question": "What are the total number of students enrolled in ACCT-211?"
        },
        {
            "sample_id": 3312,
            "gold_sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
            "gold_complexity": 9,
            "vt": "SELECT student.stu_fname, student.stu_lname FROM student JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll.enroll_grade = '[placeholder-type:string]' OR enroll.enroll_grade = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first and last names of students who have received specific grades in their enrolled classes. It retrieves data from the 'student' table and joins it with the 'enroll' table to filter based on the grades specified in the placeholders.",
            "question": "Find names of all students who took some course and got A or C."
        },
        {
            "sample_id": 3289,
            "gold_sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.stu_gpa) FROM enroll JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE class.crs_code = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average GPA of students enrolled in classes associated with a specific course code. It joins the 'enroll' table with the 'student' table to access student GPA data and then joins with the 'class' table to filter by the course code. The placeholder in the WHERE clause represents the course code for which the average GPA is being calculated.",
            "question": "What is the average GPA of students taking ACCT-211?"
        },
        {
            "sample_id": 3219,
            "gold_sql": "SELECT count(DISTINCT school_code) FROM department",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT school_code) FROM department",
            "ba": "The virtual table counts the number of distinct school codes from the 'department' table, which represents the different schools associated with various departments.",
            "question": "How many schools are there in the department?"
        },
        {
            "sample_id": 3293,
            "gold_sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT department.dept_name FROM student JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY student.stu_gpa LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of departments from the 'department' table for students, ordered by their GPA. The query joins the 'student' table with the 'department' table based on the department code, ensuring that only relevant departments for the students are selected. The result is limited to a specified number of entries, represented by a placeholder for numeric values.",
            "question": "What is the name of the department with the student that has the lowest GPA?"
        },
        {
            "sample_id": 3277,
            "gold_sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'",
            "gold_complexity": 8,
            "vt": "SELECT class.crs_code FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE student.stu_lname = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the course codes from the 'class' table for students who are enrolled in those classes. It joins the 'class' table with the 'enroll' table to link classes with student enrollments, and then further joins with the 'student' table to filter results based on the last name of the student. The placeholder in the WHERE clause represents the last name of the student being queried.",
            "question": "What are the course codes for every class that the student with the last name Smithson took?"
        },
        {
            "sample_id": 3287,
            "gold_sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
            "gold_complexity": 11,
            "vt": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems'",
            "ba": "The virtual table retrieves the first names of students who are enrolled in classes offered by both the 'Accounting' and 'Computer Info. Systems' departments. It does this by joining multiple tables: 'student', 'enroll', 'class', 'course', and 'department'. The query uses an INTERSECT operation to find students who meet the criteria for both departments.",
            "question": "What are the first names of all students taking accoutning and Computer Information Systems classes?"
        },
        {
            "sample_id": 3292,
            "gold_sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT department.dept_name FROM student JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY student.stu_gpa LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of departments from the 'department' table for students, ordered by their GPA. The query joins the 'student' table with the 'department' table based on the department code, ensuring that only relevant departments for the students are selected. The result is limited to a specified number of entries, represented by a placeholder for numeric values.",
            "question": "What is the department name of the students with lowest gpa belongs to?"
        },
        {
            "sample_id": 3258,
            "gold_sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT student.stu_fname, student.stu_lname, student.stu_gpa FROM student WHERE student.stu_gpa > [placeholder-type:numeric] ORDER BY student.stu_dob LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first name, last name, and GPA of students from the 'student' table who have a GPA greater than a specified value. The placeholders in the WHERE clause represent the minimum GPA threshold and the limit on the number of results returned.",
            "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?"
        },
        {
            "sample_id": 3230,
            "gold_sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
            "gold_complexity": 9,
            "vt": "SELECT SUM(course.crs_credit), course.dept_code FROM course JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY course.dept_code",
            "ba": "The virtual table summarizes the total credit hours for courses grouped by their respective department codes. It combines data from the 'course' and 'class' tables, where the course code in the 'course' table matches the course code in the 'class' table. The result will show the sum of credit hours for each department offering courses.",
            "question": "Find the total credits of all classes offered by each department."
        },
        {
            "sample_id": 3298,
            "gold_sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 14,
            "vt": "SELECT department.dept_name, department.dept_address, COUNT(*) FROM student JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY student.dept_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of students enrolled in each department, providing the department name and its address. It aggregates the student data by department and orders the results based on the count of students, allowing for a limit on the number of departments displayed.",
            "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students."
        },
        {
            "sample_id": 3260,
            "gold_sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.stu_fname FROM student JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll.enroll_grade = '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct first names of students who have received a specific grade in their enrolled classes. It retrieves data from the 'student' table and joins it with the 'enroll' table to filter based on the grade received, using a placeholder for the grade value.",
            "question": "What is the first name of students who got grade C in any class?"
        },
        {
            "sample_id": 3274,
            "gold_sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'",
            "gold_complexity": 9,
            "vt": "SELECT employee.emp_lname, employee.emp_hiredate FROM employee JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE professor.prof_office = '[placeholder-type:string]'",
            "ba": "The virtual table describes the last names and hire dates of employees who are professors, filtered by a specific office location. The placeholder in the WHERE clause represents the office location of the professor.",
            "question": "Find the last name and hire date of the professor who is in office DRE 102."
        },
        {
            "sample_id": 3279,
            "gold_sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'",
            "gold_complexity": 11,
            "vt": "SELECT course.crs_description, course.crs_credit FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE student.stu_lname = '[placeholder-type:string]'",
            "ba": "The virtual table describes the course descriptions and credit hours for courses that students are enrolled in, filtered by the last name of a specific student. The query joins multiple tables: 'class' to get the class information, 'enroll' to link students to their classes, 'student' to filter by the student's last name, and 'course' to retrieve course details. The placeholder in the WHERE clause represents the last name of the student.",
            "question": "How many credits is the course that the student with the last name Smithson took, and what is its description?"
        },
        {
            "sample_id": 3272,
            "gold_sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",
            "gold_complexity": 10,
            "vt": "SELECT department.dept_name, professor.prof_office FROM employee JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE employee.emp_lname = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of departments and the office locations of professors from the 'employee', 'professor', and 'department' tables. The query filters the results based on the last name of the employee, represented by a placeholder for string values.",
            "question": "What is department name and office for the professor whose last name is Heffington?"
        },
        {
            "sample_id": 3209,
            "gold_sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), professor.dept_code FROM professor WHERE professor.prof_high_degree = '[placeholder-type:string]' GROUP BY professor.dept_code",
            "ba": "The virtual table summarizes the number of professors in each department who hold a specific highest degree. The placeholder in the WHERE clause represents the degree type being queried.",
            "question": "How many professors have a Ph.D. in each department?"
        },
        {
            "sample_id": 3232,
            "gold_sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT department.dept_name FROM course JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY course.dept_code ORDER BY SUM(course.crs_credit) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of departments that offer courses, aggregating the total credit hours for each department. It joins the 'course' table with the 'class' table to associate classes with their respective courses, and then joins with the 'department' table to retrieve the department names. The results are grouped by department code and ordered by the total sum of course credits, with a limit on the number of departments returned based on a specified numeric placeholder.",
            "question": "Find the name of the department that offers the largest number of credits of all classes."
        },
        {
            "sample_id": 3185,
            "gold_sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT dept_address), department.school_code FROM department GROUP BY department.school_code",
            "ba": "The virtual table provides a count of distinct department addresses grouped by the school code. This allows for an overview of how many unique department locations exist within each school.",
            "question": "Count different addresses of each school."
        },
        {
            "sample_id": 3315,
            "gold_sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
            "gold_complexity": 11,
            "vt": "SELECT employee.emp_fname, class.class_room FROM class JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of employees and the rooms where classes are held from the 'class' table, joined with the 'employee', 'professor', and 'department' tables. The placeholder in the WHERE clause represents the name of the department to filter the results accordingly.",
            "question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?"
        },
        {
            "sample_id": 3234,
            "gold_sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM class JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE class.crs_code = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of enrollments in classes associated with a specific course code. It joins the 'class' table with the 'enroll' table to correlate class codes with student enrollments, filtering by the course code provided as a placeholder.",
            "question": "How many students enrolled in class ACCT-211?"
        },
        {
            "sample_id": 3327,
            "gold_sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
            "gold_complexity": 7,
            "vt": "SELECT department.dept_name FROM course JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE course.crs_description LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of departments that offer courses matching a specific description. It retrieves the department name from the 'department' table by joining it with the 'course' table based on the department code. The placeholder in the WHERE clause allows for filtering courses based on their description.",
            "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?"
        },
        {
            "sample_id": 3215,
            "gold_sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
            "gold_complexity": 10,
            "vt": "SELECT MAX(student.stu_gpa), AVG(student.stu_gpa), MIN(student.stu_gpa), student.dept_code FROM student GROUP BY student.dept_code",
            "ba": "The virtual table summarizes the academic performance of students by calculating the maximum, average, and minimum GPA for each department. It groups the results by the department code, allowing for a comparison of student performance across different departments.",
            "question": "What is the highest, lowest, and average student GPA for every department?"
        },
        {
            "sample_id": 3273,
            "gold_sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",
            "gold_complexity": 10,
            "vt": "SELECT department.dept_name, professor.prof_office FROM employee JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE employee.emp_lname = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of departments and the office locations of professors from the 'employee', 'professor', and 'department' tables. It filters the results based on the last name of the employee, represented by a placeholder for string values.",
            "question": "What is the name of the department and office location for the professor with the last name of Heffington?"
        },
        {
            "sample_id": 3176,
            "gold_sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
            "gold_complexity": 6,
            "vt": "SELECT department.school_code FROM department WHERE department.dept_name = None.\"accounting\"",
            "ba": "The virtual table retrieves the school code associated with the accounting department from the 'department' table. The placeholder in the WHERE clause represents the name of the department being queried.",
            "question": "What is the code of the school where the accounting department belongs to?"
        },
        {
            "sample_id": 3322,
            "gold_sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT employee.emp_fname FROM class JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY class.prof_num HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of professors from the 'employee' table who teach more than a specified number of classes. The query joins the 'class' table with the 'employee' table to associate professors with their classes, groups the results by professor, and filters those who teach more than a certain number of classes using a numeric placeholder.",
            "question": "Find the first names of professors who are teaching more than one class."
        },
        {
            "sample_id": 3177,
            "gold_sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
            "gold_complexity": 6,
            "vt": "SELECT department.school_code FROM department WHERE department.dept_name = None.\"accounting\"",
            "ba": "The virtual table retrieves the school code associated with the accounting department from the 'department' table. The placeholder in the WHERE clause represents the name of the department being queried.",
            "question": "What is the school code of the accounting department?"
        },
        {
            "sample_id": 3297,
            "gold_sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT department.dept_name, department.dept_address FROM student JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY student.dept_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of department names and their addresses for students enrolled in various departments. It aggregates the data by department code, counting the number of students in each department, and limits the results to a specified number of departments based on the count.",
            "question": "What is the name and address of the department with the most students?"
        },
        {
            "sample_id": 3213,
            "gold_sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
            "gold_complexity": 8,
            "vt": "SELECT SUM(student.stu_hrs), student.dept_code FROM student GROUP BY student.dept_code",
            "ba": "The virtual table summarizes the total credit hours completed by students, grouped by their respective department codes. It aggregates the 'stu_hrs' from the 'student' table and categorizes the results based on 'dept_code', allowing for an overview of student credit hours per department.",
            "question": "How many hours do the students spend studying in each department?"
        },
        {
            "sample_id": 3227,
            "gold_sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM department JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE department.dept_name = computer info.\"computer info. systems\"",
            "ba": "The virtual table counts the number of courses offered by a specific department. It joins the 'department' table with the 'course' table based on the department code, filtering for a specific department name.",
            "question": "How many courses does the department of Computer Information Systmes offer?"
        },
        {
            "sample_id": 3181,
            "gold_sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
            "gold_complexity": 6,
            "vt": "SELECT department.dept_address FROM department WHERE department.dept_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the physical address of a department from the 'department' table based on the department's name. The placeholder in the WHERE clause represents the specific name of the department being queried.",
            "question": "Where is the history department?"
        },
        {
            "sample_id": 3220,
            "gold_sql": "SELECT count(DISTINCT class_code) FROM CLASS",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT class_code) FROM class",
            "ba": "The virtual table counts the number of distinct classes offered in the 'class' table. This provides insight into the variety of classes available without duplicating any entries.",
            "question": "How many different classes are there?"
        },
        {
            "sample_id": 3262,
            "gold_sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT department.dept_name FROM professor JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY professor.dept_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of departments from the 'department' table that have professors associated with them. It joins the 'professor' table with the 'department' table based on the department code, groups the results by department code, and orders them by the count of professors in each department. The placeholder in the LIMIT clause allows for specifying the maximum number of departments to return.",
            "question": "What is the name of department where has the smallest number of professors?"
        },
        {
            "sample_id": 3251,
            "gold_sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
            "gold_complexity": 6,
            "vt": "SELECT class.class_code FROM class WHERE class.class_room = '[placeholder-type:string]'",
            "ba": "The virtual table describes the unique class codes from the 'class' table that are held in a specific classroom. The placeholder in the WHERE clause represents the room where the class is conducted.",
            "question": "What are the codes of all the courses that are located in room KLR209?"
        },
        {
            "sample_id": 3167,
            "gold_sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM professor JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE department.dept_name = None.\"accounting\"",
            "ba": "The virtual table counts the number of professors associated with the 'accounting' department by joining the 'professor' and 'department' tables on the department code. The placeholder in the WHERE clause represents the department's name.",
            "question": "How many professors are in the accounting dept?"
        },
        {
            "sample_id": 3173,
            "gold_sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT employee.emp_fname, employee.emp_dob FROM employee JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE class.crs_code = None.\"acct-211\"",
            "ba": "The virtual table describes the first names and dates of birth of employees from the 'employee' table who are professors teaching a specific class. The query joins the 'employee' table with the 'class' table to filter professors based on the course code provided in the placeholder.",
            "question": "What are the first names and birthdates of the professors in charge of ACCT-211?"
        },
        {
            "sample_id": 3257,
            "gold_sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT employee.emp_fname, employee.emp_lname FROM employee ORDER BY employee.emp_dob LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of employees from the 'employee' table, ordered by their date of birth. The placeholder in the LIMIT clause represents the maximum number of employee records to return.",
            "question": "What are the first and last names of the employee with the earliest date of birth?"
        },
        {
            "sample_id": 3261,
            "gold_sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.stu_fname FROM student JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll.enroll_grade = '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct first names of students who have received a specific grade in their enrolled classes. It retrieves data from the 'student' table and joins it with the 'enroll' table to filter based on the grade received, using a placeholder for the grade value.",
            "question": "What are the first names of all students who got a grade C in a class?"
        },
        {
            "sample_id": 3233,
            "gold_sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT department.dept_name FROM course JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY course.dept_code ORDER BY SUM(course.crs_credit) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of departments that offer courses, aggregating the total credit hours for each department. It joins the 'course' table with the 'class' table to associate classes with their respective courses, and then joins with the 'department' table to retrieve the department names. The results are grouped by department code and ordered by the total sum of credit hours, with a limit on the number of departments returned based on a specified numeric placeholder.",
            "question": "Which department offers the most credits all together?"
        },
        {
            "sample_id": 3206,
            "gold_sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT department.school_code FROM department JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY department.school_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the school codes from the 'department' table, grouping the results by school code and counting the number of professors associated with each department. The results are ordered by the count of professors, and a limit is applied to restrict the number of returned records based on a specified numeric value.",
            "question": "Which school has the smallest amount of professors?"
        },
        {
            "sample_id": 3259,
            "gold_sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT student.stu_fname, student.stu_lname, student.stu_gpa FROM student WHERE student.stu_gpa > [placeholder-type:numeric] ORDER BY student.stu_dob LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first name, last name, and GPA of students from the 'student' table who have a GPA greater than a specified value. The placeholders in the WHERE clause represent the minimum GPA threshold and the limit on the number of results returned.",
            "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?"
        }
    ],
    "aircraft": [
        {
            "sample_id": 4815,
            "gold_sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
            "gold_complexity": 7,
            "vt": "SELECT match.location, aircraft.aircraft FROM aircraft JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft",
            "ba": "The virtual table describes the geographical location of matches and the corresponding aircraft models used by the winning pilots. It combines data from the 'match' table and the 'aircraft' table, linking them through the winning aircraft identifier.",
            "question": "What is the location and name of the winning aircraft?"
        },
        {
            "sample_id": 4826,
            "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
            "gold_complexity": 10,
            "vt": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\"",
            "ba": "The virtual table lists the aircraft models that are served at both London Heathrow and London Gatwick airports. It uses an intersection to find common aircraft between the two airports.",
            "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\""
        },
        {
            "sample_id": 4833,
            "gold_sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT pilot.name, pilot.age FROM pilot JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY pilot.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and ages of pilots who have won matches, sorted by their age. The query joins the 'pilot' table with the 'match' table to filter for winning pilots, and it limits the results to a specified number of entries.",
            "question": "How old is the youngest winning pilot and what is their name?"
        },
        {
            "sample_id": 4799,
            "gold_sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
            "gold_complexity": 6,
            "vt": "SELECT SUM(airport.domestic_passengers) FROM airport WHERE airport.airport_name LIKE None.\"%london%\"",
            "ba": "The virtual table calculates the total number of domestic passengers from the 'airport' table for airports whose names contain 'london'. The placeholder in the WHERE clause allows for flexible searching of airport names that match a specific pattern.",
            "question": "What are the total number of domestic passengers at all London airports?"
        },
        {
            "sample_id": 4828,
            "gold_sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT * FROM airport ORDER BY airport.international_passengers LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all columns from the 'airport' table, sorted by the number of international passengers in descending order, and limits the results to a specified number of entries.",
            "question": "Show all information on the airport that has the largest number of international passengers."
        },
        {
            "sample_id": 4790,
            "gold_sql": "SELECT count(*) FROM aircraft",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM aircraft",
            "ba": "The virtual table provides a count of all aircraft entries in the 'aircraft' table, which includes various details about each aircraft such as its model, description, and specifications.",
            "question": "How many aircrafts are there?"
        },
        {
            "sample_id": 4822,
            "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT aircraft.aircraft FROM aircraft JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY match.winning_aircraft HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the models of aircraft that have won matches, grouped by the winning aircraft. It filters the results to include only those aircraft that have won a specified number of matches, indicated by a placeholder for numeric values.",
            "question": "List the names of aircrafts and that won matches at least twice."
        },
        {
            "sample_id": 4810,
            "gold_sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
            "gold_complexity": 10,
            "vt": "SELECT aircraft.aircraft, aircraft.description FROM aircraft JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE airport.total_passengers > [placeholder-type:numeric]",
            "ba": "The virtual table describes the models and detailed descriptions of aircraft that are associated with airports handling a specific number of total passengers. The placeholder in the WHERE clause represents the minimum number of total passengers at the airport.",
            "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000."
        },
        {
            "sample_id": 4795,
            "gold_sql": "SELECT avg(International_Passengers) FROM airport",
            "gold_complexity": 4,
            "vt": "SELECT AVG(airport.international_passengers) FROM airport",
            "ba": "The virtual table calculates the average number of international passengers from the 'airport' table. This provides insights into the overall international traffic handled by all airports in the database.",
            "question": "What is the average number of international passengers for an airport?"
        },
        {
            "sample_id": 4812,
            "gold_sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(airport.total_passengers) FROM aircraft JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE aircraft.aircraft = None.\"robinson r-22\"",
            "ba": "The virtual table calculates the average number of total passengers handled by airports that are associated with a specific aircraft model, in this case, the 'robinson r-22'.",
            "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?"
        },
        {
            "sample_id": 4835,
            "gold_sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
            "gold_complexity": 12,
            "vt": "SELECT pilot.name FROM pilot WHERE NOT pilot.pilot_id IN (SELECT match.winning_pilot FROM MATCH WHERE country = 'Australia')",
            "ba": "The virtual table lists the names of pilots from the 'pilot' table who have not won any matches held in Australia. It filters out pilots whose IDs are found in the 'winning_pilot' column of the 'match' table for matches that took place in Australia.",
            "question": "What are the names of the pilots that have not won any matches in Australia?"
        },
        {
            "sample_id": 4830,
            "gold_sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT pilot.name, pilot.age FROM pilot JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE pilot.age < [placeholder-type:numeric] GROUP BY match.winning_pilot ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and ages of pilots from the 'pilot' table who have won matches, filtered by a specific age limit. The results are grouped by the winning pilot and ordered by the number of wins, with a limit on the number of results returned.",
            "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30."
        },
        {
            "sample_id": 4809,
            "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
            "gold_complexity": 8,
            "vt": "SELECT aircraft.aircraft FROM aircraft JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE airport.airport_name = None.\"london gatwick\"",
            "ba": "The virtual table describes the models of aircraft that are associated with a specific airport, in this case, London Gatwick. It retrieves data from the 'aircraft' table and joins it with the 'airport_aircraft' table to establish the relationship between aircraft and airports. The query filters results based on the airport's name, which is represented by a placeholder for string values.",
            "question": "What are the names of all the aircrafts associated with London Gatwick airport?"
        },
        {
            "sample_id": 4801,
            "gold_sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
            "gold_complexity": 5,
            "vt": "SELECT MAX(airport.transit_passengers), MIN(airport.transit_passengers) FROM airport",
            "ba": "The virtual table provides the maximum and minimum number of transit passengers recorded at various airports from the 'airport' table. The placeholders represent the values for transit passengers.",
            "question": "What is the maximum and mininum number of transit passengers for all airports?"
        },
        {
            "sample_id": 4807,
            "gold_sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
            "gold_complexity": 8,
            "vt": "SELECT pilot.name FROM pilot WHERE pilot.age <= [placeholder-type:numeric] ORDER BY pilot.name",
            "ba": "The virtual table lists the names of pilots from the 'pilot' table who are of a certain age or younger. The placeholder in the WHERE clause represents the maximum age limit for the pilots to be included in the results.",
            "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?"
        },
        {
            "sample_id": 4811,
            "gold_sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
            "gold_complexity": 10,
            "vt": "SELECT aircraft.aircraft, aircraft.description FROM aircraft JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE airport.total_passengers > [placeholder-type:numeric]",
            "ba": "The virtual table describes the aircraft models and their detailed descriptions from the 'aircraft' table that are associated with airports handling more than a specified number of total passengers. The placeholders in the WHERE clause represent the minimum total passenger count for filtering the results.",
            "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?"
        },
        {
            "sample_id": 4834,
            "gold_sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
            "gold_complexity": 12,
            "vt": "SELECT pilot.name FROM pilot WHERE NOT pilot.pilot_id IN (SELECT match.winning_pilot FROM MATCH WHERE country = 'Australia')",
            "ba": "The virtual table lists the names of pilots from the 'pilot' table who have not won any matches held in Australia. It filters out pilots whose IDs are found in the 'winning_pilot' column of the 'match' table for matches that took place in Australia.",
            "question": "find the name of pilots who did not win the matches held in the country of Australia."
        },
        {
            "sample_id": 4806,
            "gold_sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
            "gold_complexity": 8,
            "vt": "SELECT pilot.name FROM pilot WHERE pilot.age <= [placeholder-type:numeric] ORDER BY pilot.name",
            "ba": "The virtual table lists the names of pilots from the 'pilot' table who are of a certain age or younger. The placeholder in the WHERE clause represents the maximum age limit for filtering the pilots.",
            "question": "List names of all pilot aged 30 or younger in descending alphabetical order."
        },
        {
            "sample_id": 4796,
            "gold_sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
            "gold_complexity": 8,
            "vt": "SELECT airport.international_passengers, airport.domestic_passengers FROM airport WHERE airport.airport_name = None.\"london heathrow\"",
            "ba": "The virtual table provides information about the number of international and domestic passengers at a specific airport. The placeholder in the WHERE clause represents the name of the airport being queried.",
            "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?"
        },
        {
            "sample_id": 4802,
            "gold_sql": "SELECT Name FROM pilot WHERE Age  >=  25",
            "gold_complexity": 6,
            "vt": "SELECT pilot.name FROM pilot WHERE pilot.age >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of pilots from the 'pilot' table who are of a certain age or older. The placeholder in the WHERE clause represents the minimum age of the pilots to be retrieved.",
            "question": "What are the name of pilots aged 25 or older?"
        },
        {
            "sample_id": 4827,
            "gold_sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
            "gold_complexity": 10,
            "vt": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = \"London Gatwick\"",
            "ba": "The virtual table identifies aircraft that operate at both London Heathrow and London Gatwick airports. It does this by selecting the aircraft from the 'aircraft' table, joining it with the 'airport_aircraft' table to link aircraft to airports, and then filtering for the specific airport names using an intersection to find common aircraft between the two locations.",
            "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?"
        },
        {
            "sample_id": 4794,
            "gold_sql": "SELECT avg(International_Passengers) FROM airport",
            "gold_complexity": 4,
            "vt": "SELECT AVG(airport.international_passengers) FROM airport",
            "ba": "The virtual table calculates the average number of international passengers handled by all airports from the 'airport' table.",
            "question": "What is the average number of international passengers of all airports?"
        },
        {
            "sample_id": 4824,
            "gold_sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)",
            "gold_complexity": 10,
            "vt": "SELECT aircraft.aircraft FROM aircraft WHERE NOT aircraft.aircraft_id IN (SELECT match.winning_aircraft FROM MATCH)",
            "ba": "The virtual table lists the models of aircraft from the 'aircraft' table that have not been used in any match as a winning aircraft. The subquery identifies all winning aircraft from the 'match' table, and the main query filters out these aircraft from the selection.",
            "question": "List the names of aircrafts and that did not win any match."
        },
        {
            "sample_id": 4797,
            "gold_sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
            "gold_complexity": 8,
            "vt": "SELECT airport.international_passengers, airport.domestic_passengers FROM airport WHERE airport.airport_name = None.\"london heathrow\"",
            "ba": "The virtual table describes the number of international and domestic passengers at a specific airport. The placeholder in the WHERE clause represents the name of the airport being queried.",
            "question": "How many international and domestic passengers are there in the airport London Heathrow?"
        },
        {
            "sample_id": 4831,
            "gold_sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT pilot.name, pilot.age FROM pilot JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE pilot.age < [placeholder-type:numeric] GROUP BY match.winning_pilot ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and ages of pilots from the 'pilot' table who have won matches, filtered by a specific age limit. The results are grouped by the winning pilot and ordered by the number of matches they have won, with a limit on the number of results returned.",
            "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?"
        },
        {
            "sample_id": 4814,
            "gold_sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft",
            "gold_complexity": 7,
            "vt": "SELECT match.location, aircraft.aircraft FROM aircraft JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft",
            "ba": "The virtual table describes the geographical location of matches and the corresponding aircraft models used by the winning pilots. It combines data from the 'match' and 'aircraft' tables, linking them through the winning aircraft identifier.",
            "question": "Please list the location and the winning aircraft name."
        },
        {
            "sample_id": 4805,
            "gold_sql": "SELECT Name FROM pilot ORDER BY Name ASC",
            "gold_complexity": 6,
            "vt": "SELECT pilot.name FROM pilot ORDER BY pilot.name",
            "ba": "The virtual table lists the names of all pilots from the 'pilot' table, sorted in alphabetical order. This allows users to easily view the names of pilots without any filtering conditions.",
            "question": "What are the names of the pilots in alphabetical order?"
        }
    ],
    "network_1": [
        {
            "sample_id": 7893,
            "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
            "gold_complexity": 7,
            "vt": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "ba": "The virtual table describes the names of high school students who are both friends with a specific student and are also liked by that student. The query uses an INTERSECT operation to find common names from two different relationships: one from the 'Friend' table and another from the 'Likes' table.",
            "question": "Show name of all students who have some friends and also are liked by someone else."
        },
        {
            "sample_id": 7865,
            "gold_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
            "gold_complexity": 6,
            "vt": "SELECT highschooler.id FROM highschooler WHERE highschooler.name = None.\"kyle\"",
            "ba": "The virtual table retrieves the unique identifier of a high school student from the 'highschooler' table based on the student's name. The placeholder in the WHERE clause represents the name of the student being queried.",
            "question": "Show the ID of the high schooler named Kyle."
        },
        {
            "sample_id": 7855,
            "gold_sql": "SELECT count(*) FROM Highschooler",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM highschooler",
            "ba": "The virtual table counts the total number of high school students from the 'highschooler' table.",
            "question": "How many high schoolers are there?"
        },
        {
            "sample_id": 7905,
            "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM likes JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE highschooler.name = None.\"kyle\"",
            "ba": "The virtual table counts the number of students who like a specific student named 'kyle' from the 'highschooler' table. It joins the 'likes' table with the 'highschooler' table to filter the results based on the name of the student.",
            "question": "How many likes does Kyle have?"
        },
        {
            "sample_id": 7907,
            "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
            "gold_complexity": 11,
            "vt": "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "ba": "The virtual table calculates the average grade of high school students who have friends. It retrieves the student IDs from the 'friend' table, which links students to their friends, and then uses these IDs to filter the 'highschooler' table to find the corresponding grades.",
            "question": "Find the average grade of all students who have some friends."
        },
        {
            "sample_id": 7872,
            "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the grade levels of high school students from the 'highschooler' table, grouping the results by grade and ordering them based on the number of students in each grade. The placeholder in the LIMIT clause allows for specifying the maximum number of grade levels to return.",
            "question": "Return the grade that has the greatest number of high schoolers."
        },
        {
            "sample_id": 7882,
            "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
            "gold_complexity": 9,
            "vt": "SELECT highschooler.name FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY friend.student_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of high school students who have a certain number of friends. It retrieves the names from the 'highschooler' table by joining it with the 'friend' table, grouping the results by each student's identifier, and filtering those groups to include only students who have a specified minimum number of friends.",
            "question": "What are the names of high schoolers who have 3 or more friends?"
        },
        {
            "sample_id": 7908,
            "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
            "gold_complexity": 11,
            "vt": "SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (SELECT friend.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "ba": "The virtual table calculates the average grade of high school students who have friends. It retrieves the student IDs from the 'friend' table, which identifies students and their friends, and then uses these IDs to filter the 'highschooler' table to compute the average grade.",
            "question": "What is the average grade of students who have friends?"
        },
        {
            "sample_id": 7879,
            "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT highschooler.name FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY friend.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of high school students who have the most friends. It retrieves the names from the 'highschooler' table by joining it with the 'friend' table, grouping the results by each student's identifier, and ordering them based on the count of friends. The placeholder in the LIMIT clause allows for specifying the maximum number of students to return.",
            "question": "What is the name of the high schooler who has the greatest number of friends?"
        },
        {
            "sample_id": 7880,
            "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT highschooler.name FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY friend.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of high school students who have the most friends. It retrieves the names from the 'highschooler' table by joining it with the 'friend' table, grouping the results by each student's ID, and ordering them based on the count of friends. The placeholder in the LIMIT clause allows for specifying the maximum number of students to return.",
            "question": "Return the name of the high school student with the most friends."
        },
        {
            "sample_id": 7881,
            "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
            "gold_complexity": 9,
            "vt": "SELECT highschooler.name FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY friend.student_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of high school students who have a certain number of friends. It retrieves the names from the 'highschooler' table by joining it with the 'friend' table, grouping the results by each student's identifier, and filtering those groups to include only students who have a specified minimum number of friends.",
            "question": "Show the names of high schoolers who have at least 3 friends."
        },
        {
            "sample_id": 7896,
            "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
            "gold_complexity": 8,
            "vt": "SELECT likes.student_id, COUNT(*) FROM likes GROUP BY likes.student_id",
            "ba": "The virtual table summarizes the number of likes each high school student has received from their peers. It retrieves the student identifiers from the 'likes' table and counts the total number of likes for each student, grouping the results by the student identifier.",
            "question": "How many likes correspond to each student id?"
        },
        {
            "sample_id": 7887,
            "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "gold_complexity": 8,
            "vt": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "ba": "The virtual table identifies high school students who do not have any friends listed in the 'Friend' table. It selects the unique identifiers of students from the 'Highschooler' table and excludes those who are present in the 'Friend' table as either a student or a friend.",
            "question": "Show ids of all students who do not have any friends."
        },
        {
            "sample_id": 7903,
            "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT highschooler.name FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE highschooler.grade > [placeholder-type:numeric] GROUP BY friend.student_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of high school students who have a certain number of friends and are in a grade level above a specified threshold. The placeholders in the WHERE and HAVING clauses represent the minimum grade level and the minimum number of friends, respectively.",
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends."
        },
        {
            "sample_id": 7877,
            "gold_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
            "gold_complexity": 9,
            "vt": "SELECT highschooler.name, COUNT(*) FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY friend.student_id",
            "ba": "The virtual table provides the names of high school students along with the count of their friends. It combines data from the 'highschooler' and 'friend' tables, using a join to associate each student with their respective friends. The result is grouped by each student's identifier to aggregate the number of friends they have.",
            "question": "Show the names of high school students and their corresponding number of friends."
        },
        {
            "sample_id": 7870,
            "gold_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
            "gold_complexity": 8,
            "vt": "SELECT highschooler.grade, COUNT(*) FROM highschooler GROUP BY highschooler.grade",
            "ba": "The virtual table summarizes the number of high school students in each grade level by counting the students grouped by their current grade.",
            "question": "How many high schoolers are in each grade?"
        },
        {
            "sample_id": 7862,
            "gold_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
            "gold_complexity": 6,
            "vt": "SELECT highschooler.grade FROM highschooler WHERE highschooler.name = None.\"kyle\"",
            "ba": "The virtual table retrieves the grade level of a specific high school student from the 'highschooler' table based on their name. The placeholder in the WHERE clause represents the student's name.",
            "question": "Return the grade for the high schooler named Kyle."
        },
        {
            "sample_id": 7895,
            "gold_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
            "gold_complexity": 8,
            "vt": "SELECT likes.student_id, COUNT(*) FROM likes GROUP BY likes.student_id",
            "ba": "The virtual table summarizes the number of likes each high school student has received from their peers. It retrieves the student identifiers from the 'likes' table and counts the total number of likes for each student, grouping the results by the student identifier.",
            "question": "Count the number of likes for each student id."
        },
        {
            "sample_id": 7899,
            "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT highschooler.name FROM likes JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY likes.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of high school students who are liked by others, based on the relationships defined in the 'likes' table. It joins the 'likes' table with the 'highschooler' table to retrieve the names of students who have been liked, grouping the results by each student and ordering them by the count of likes they have received. The placeholder in the LIMIT clause represents the maximum number of results to return.",
            "question": "What is the name of the high schooler who has the greatest number of likes?"
        },
        {
            "sample_id": 7910,
            "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
            "gold_complexity": 11,
            "vt": "SELECT MIN(highschooler.grade) FROM highschooler WHERE NOT highschooler.id IN (SELECT friend.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "ba": "The virtual table calculates the minimum grade level of high school students who do not have any friends listed in the 'friend' table. It filters out students by checking their IDs against those who are present in the 'friend' table, ensuring that only students without friends are considered for the minimum grade calculation.",
            "question": "What is the lowest grade of students who do not have any friends?"
        },
        {
            "sample_id": 7897,
            "gold_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
            "gold_complexity": 9,
            "vt": "SELECT highschooler.name, COUNT(*) FROM likes JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY likes.student_id",
            "ba": "The virtual table provides the names of high school students along with the count of how many students they like. It joins the 'likes' table with the 'highschooler' table to associate each student with their respective names, and groups the results by each student's identifier to count the number of likes.",
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each."
        },
        {
            "sample_id": 7890,
            "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
            "gold_complexity": 7,
            "vt": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "ba": "The virtual table lists the names of high school students who do not have any friends in the 'Friend' table. It does this by selecting all names from the 'Highschooler' table and excluding those names that appear in the 'Friend' table, where a join is performed to match students with their friends.",
            "question": "What are the names of students who have no friends?"
        },
        {
            "sample_id": 7885,
            "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE highschooler.name = None.\"kyle\"",
            "ba": "The virtual table counts the number of friends for a specific high school student named 'kyle'. It joins the 'friend' table with the 'highschooler' table to match the student's identifier and filter by the student's name.",
            "question": "How many friends does the high school student Kyle have?"
        },
        {
            "sample_id": 7875,
            "gold_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
            "gold_complexity": 8,
            "vt": "SELECT friend.student_id, COUNT(*) FROM friend GROUP BY friend.student_id",
            "ba": "The virtual table summarizes the number of friends each high school student has by counting the entries in the 'friend' table, grouped by the student's identifier.",
            "question": "Show the student IDs and numbers of friends corresponding to each."
        },
        {
            "sample_id": 7884,
            "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
            "gold_complexity": 7,
            "vt": "SELECT highschooler.name FROM friend JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE highschooler.name = None.\"kyle\"",
            "ba": "The virtual table describes the names of high school students who are friends with a specific student. It retrieves the names from the 'highschooler' table by joining it with itself through the 'friend' table, which links students to their friends. The placeholder in the WHERE clause represents the name of the student whose friends are being queried.",
            "question": "Return the names of friends of the high school student Kyle."
        },
        {
            "sample_id": 7892,
            "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "gold_complexity": 8,
            "vt": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "ba": "The virtual table identifies students who are both friends with each other and have mutual likes. It combines the identifiers of students from the 'Friend' table and the 'Likes' table to find common students.",
            "question": "What are the ids of students who both have friends and are liked?"
        },
        {
            "sample_id": 7863,
            "gold_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
            "gold_complexity": 6,
            "vt": "SELECT highschooler.name FROM highschooler WHERE highschooler.grade = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of high school students from the 'highschooler' table who are currently in a specific grade level. The placeholder in the WHERE clause represents the grade level of the students.",
            "question": "Show the names of all high schoolers in grade 10."
        },
        {
            "sample_id": 7889,
            "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
            "gold_complexity": 7,
            "vt": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "ba": "The virtual table lists the names of high school students who do not have any friends in the 'Friend' table. It does this by selecting all names from the 'Highschooler' table and excluding those names that appear in the 'Friend' table, where a join is performed to match students with their friends.",
            "question": "Show names of all high school students who do not have any friends."
        },
        {
            "sample_id": 7859,
            "gold_sql": "SELECT grade FROM Highschooler",
            "gold_complexity": 4,
            "vt": "SELECT highschooler.grade FROM highschooler",
            "ba": "The virtual table retrieves the current grade level of high school students from the 'highschooler' table.",
            "question": "Show all the grades of the high schoolers."
        },
        {
            "sample_id": 7873,
            "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
            "gold_complexity": 8,
            "vt": "SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the grade levels of high school students from the 'highschooler' table, specifically focusing on those grades that have a certain number of students. The placeholder in the HAVING clause represents the minimum count of students required to include a grade in the results.",
            "question": "Show me all grades that have at least 4 students."
        },
        {
            "sample_id": 7906,
            "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM likes JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE highschooler.name = None.\"kyle\"",
            "ba": "The virtual table counts the number of students who like a specific student named 'kyle' from the 'highschooler' table. It joins the 'likes' table with the 'highschooler' table to find the total number of likes directed towards 'kyle'.",
            "question": "Return the number of likes that the high schooler named Kyle has."
        },
        {
            "sample_id": 7874,
            "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
            "gold_complexity": 8,
            "vt": "SELECT highschooler.grade FROM highschooler GROUP BY highschooler.grade HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the grades of high school students from the 'highschooler' table, grouping them by grade level and filtering to include only those grades that have a specified minimum number of students. The placeholder in the HAVING clause represents the minimum count of students required for each grade to be included in the results.",
            "question": "Which grades have 4 or more high schoolers?"
        },
        {
            "sample_id": 7894,
            "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
            "gold_complexity": 7,
            "vt": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "ba": "The virtual table describes the names of high school students who are both friends with a specific student and are also liked by that same student. It combines data from the 'friend' and 'likes' tables, ensuring that the students returned meet both criteria.",
            "question": "What are the names of high schoolers who both have friends and are liked?"
        }
    ],
    "formula_1": [
        {
            "sample_id": 2187,
            "gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT races.name FROM races JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE circuits.country = None.\"spain\" AND races.year > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of races held in circuits located in Spain, filtering for races that occurred after a specified year. The placeholder in the WHERE clause represents the year after which the races are considered.",
            "question": "What are the names of all races held after 2000 in Spain?"
        },
        {
            "sample_id": 2222,
            "gold_sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
            "gold_complexity": 12,
            "vt": "SELECT drivers.driverid, COUNT(*) FROM drivers JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY drivers.driverid HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of race results for each driver from the 'drivers' table, filtering those who have participated in a number of races less than or equal to a specified limit. The query joins the 'drivers' table with the 'results' table to associate drivers with their race results, and further joins with the 'races' table to ensure the results are linked to valid races. The final output groups the results by driver ID and applies a condition to limit the count of races.",
            "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?"
        },
        {
            "sample_id": 2202,
            "gold_sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
            "gold_complexity": 15,
            "vt": "SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5",
            "ba": "The virtual table identifies drivers who have made exactly 11 pit stops and have also finished in more than 5 races. It combines data from the 'drivers', 'pitstops', and 'results' tables to filter and group the drivers based on their performance in both categories.",
            "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?"
        },
        {
            "sample_id": 2162,
            "gold_sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
            "gold_complexity": 15,
            "vt": "SELECT drivers.driverid, drivers.forename, drivers.surname FROM drivers JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE laptimes.position = '[placeholder-type:string]' GROUP BY drivers.driverid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of drivers along with their unique identifiers and names from the 'drivers' table. It filters the results based on lap times recorded in the 'laptimes' table, specifically looking for drivers who achieved a certain position during the laps. The query groups the results by driver ID and ensures that only those drivers who have recorded lap times in that position at least a specified number of times are included.",
            "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?"
        },
        {
            "sample_id": 2223,
            "gold_sql": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
            "gold_complexity": 12,
            "vt": "SELECT drivers.driverid, COUNT(*) FROM drivers JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY drivers.driverid HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of race results for each driver from the 'drivers' table, filtering those who have participated in a number of races less than or equal to a specified limit. The query joins the 'drivers' table with the 'results' table to associate drivers with their race results, and then further joins with the 'races' table to ensure the results are linked to valid races. The final output groups the results by driver ID and applies a condition to limit the count of races.",
            "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?"
        },
        {
            "sample_id": 2152,
            "gold_sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT races.name FROM races WHERE races.year BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique names of races that took place within a specified range of years. The placeholders represent the start and end years for filtering the races.",
            "question": "Find the distinct names of all races held between 2014 and 2017?"
        },
        {
            "sample_id": 2163,
            "gold_sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
            "gold_complexity": 15,
            "vt": "SELECT drivers.driverid, drivers.forename, drivers.surname FROM drivers JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE laptimes.position = '[placeholder-type:string]' GROUP BY drivers.driverid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of drivers along with their unique identifiers and names from the 'drivers' table. It filters the results based on lap times recorded in the 'laptimes' table, specifically looking for drivers who achieved a certain position during the laps. The query groups the results by driver ID and ensures that only those drivers who have recorded lap times in that position at least a specified number of times are included.",
            "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?"
        },
        {
            "sample_id": 2185,
            "gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
            "gold_complexity": 9,
            "vt": "SELECT races.name FROM races JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE circuits.country = None.\"spain\" AND races.year > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of races that took place in circuits located in Spain, filtering for races that occurred after a specified year. The placeholder in the WHERE clause represents the year after which the races are considered.",
            "question": "What are the names of the races held after 2017 in Spain?"
        },
        {
            "sample_id": 2190,
            "gold_sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
            "gold_complexity": 14,
            "vt": "SELECT DISTINCT pitstops.driverid, pitstops.stop FROM pitstops WHERE pitstops.duration > (SELECT MIN(pitstops.duration) FROM pitstops WHERE raceid = 841)",
            "ba": "The virtual table provides a list of unique driver identifiers and their corresponding pit stop numbers from the 'pitstops' table, specifically for those pit stops that had a duration longer than the minimum duration recorded for a specific race identified by a placeholder.",
            "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?"
        },
        {
            "sample_id": 2195,
            "gold_sql": "SELECT DISTINCT name FROM races ORDER BY name DESC",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT races.name FROM races ORDER BY races.name",
            "ba": "The virtual table lists the unique names of races from the 'races' table, sorted in alphabetical order. This allows users to see all the different races that have taken place without duplicates.",
            "question": "What are the different names of all the races in reverse alphabetical order?"
        },
        {
            "sample_id": 2198,
            "gold_sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
            "gold_complexity": 8,
            "vt": "SELECT races.name FROM races WHERE races.time > None.\"12:00:00\" OR races.time < None.\"09:00:00\"",
            "ba": "The virtual table lists the names of races from the 'races' table that either start after a specific time in the afternoon or before a specific time in the morning. The placeholders in the WHERE clause represent the time values for filtering the races.",
            "question": "What are the names of races held after 12:00:00 or before 09:00:00?"
        },
        {
            "sample_id": 2175,
            "gold_sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "gold_complexity": 12,
            "vt": "SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "ba": "The virtual table lists the first and last names of drivers who participated in the 'Australian Grand Prix' but did not participate in the 'Chinese Grand Prix'.",
            "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?"
        },
        {
            "sample_id": 2172,
            "gold_sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "gold_complexity": 12,
            "vt": "SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "ba": "The virtual table identifies drivers who participated in both the 'Australian Grand Prix' and the 'Chinese Grand Prix'. It retrieves the driver IDs and their first names by joining the 'races', 'results', and 'drivers' tables. The intersection of the two queries ensures that only drivers who raced in both events are included.",
            "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?"
        },
        {
            "sample_id": 2186,
            "gold_sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT races.name FROM races JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE circuits.country = None.\"spain\" AND races.year > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of races held in circuits located in Spain, filtering for races that occurred after a specified year. The placeholder in the WHERE clause represents the year after which the races are considered.",
            "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?"
        },
        {
            "sample_id": 2165,
            "gold_sql": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM results JOIN races AS T2 ON T1.raceid = T2.raceid WHERE races.name = None.\"australian grand prix\" AND races.year = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of race results from the 'results' table that are associated with a specific race, identified by its name and year. The query joins the 'results' table with the 'races' table to filter results based on the race name and year, using placeholders for the year value.",
            "question": "How many drivers were in the Australian Grand Prix held in 2009?"
        },
        {
            "sample_id": 2167,
            "gold_sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(DISTINCT driverId) FROM results WHERE NOT races.raceid IN (SELECT races.raceid FROM races WHERE YEAR <> 2009)",
            "ba": "The virtual table counts the number of distinct drivers who participated in races, excluding those that took place in the year 2009. It does this by filtering the results based on the race IDs that are not associated with the year 2009.",
            "question": "How many drivers did not race in 2009?"
        },
        {
            "sample_id": 2203,
            "gold_sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
            "gold_complexity": 15,
            "vt": "SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5",
            "ba": "The virtual table identifies drivers who have made exactly 11 pit stops and have also finished in the top positions in more than 5 races. It combines data from the 'drivers', 'pitstops', and 'results' tables to filter and display the relevant driver surnames and their unique identifiers.",
            "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?"
        },
        {
            "sample_id": 2212,
            "gold_sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(results.fastestlapspeed) FROM races JOIN results AS T2 ON T1.raceid = T2.raceid WHERE races.year = [placeholder-type:numeric] AND races.name = None.\"monaco grand prix\"",
            "ba": "The virtual table calculates the average fastest lap speed from the 'results' table for races that occurred in a specific year and are named 'monaco grand prix'. The query joins the 'races' table with the 'results' table using the race identifier to filter the results accordingly.",
            "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?"
        },
        {
            "sample_id": 2158,
            "gold_sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT drivers.forename, drivers.surname FROM drivers JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY laptimes.milliseconds LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents the first and last names of drivers from the 'drivers' table who have recorded lap times. The query joins the 'drivers' table with the 'laptimes' table to associate each driver with their respective lap times, ordering the results by the time taken in milliseconds. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What are the forename and surname of the driver who has the smallest laptime?"
        },
        {
            "sample_id": 2169,
            "gold_sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
            "gold_complexity": 10,
            "vt": "SELECT races.name, races.year FROM results JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE drivers.forename = None.\"lewis\"",
            "ba": "The virtual table describes the names and years of races from the 'races' table that are associated with results for a specific driver. The query joins the 'results' table with the 'races' table to link race results to their respective races, and it also joins with the 'drivers' table to filter results for a specific driver based on their first name. The placeholder in the WHERE clause represents the driver's first name.",
            "question": "What are the names and years of all races that had a driver with the last name Lewis?"
        },
        {
            "sample_id": 2219,
            "gold_sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
            "gold_complexity": 15,
            "vt": "SELECT AVG(results.fastestlapspeed), races.name, races.year FROM races JOIN results AS T2 ON T1.raceid = T2.raceid WHERE races.year > [placeholder-type:numeric] GROUP BY races.name ORDER BY races.year",
            "ba": "The virtual table provides the average fastest lap speed of drivers for each race, along with the race name and year. It filters the results to include only those races that occurred after a specified year, grouping the results by race name and ordering them by year.",
            "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?"
        },
        {
            "sample_id": 2215,
            "gold_sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
            "gold_complexity": 8,
            "vt": "SELECT MAX(results.fastestlapspeed) FROM races JOIN results AS T2 ON T1.raceid = T2.raceid WHERE races.year = [placeholder-type:numeric] AND races.name = None.\"monaco grand prix\"",
            "ba": "The virtual table provides the maximum fastest lap speed recorded during the races held in a specific year, particularly focusing on the 'Monaco Grand Prix'. The query joins the 'races' and 'results' tables to correlate race details with the results, filtering by the specified year and the race name.",
            "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?"
        },
        {
            "sample_id": 2176,
            "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT drivers.forename FROM drivers JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE driverstandings.position = [placeholder-type:numeric] AND driverstandings.wins = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first names of drivers from the 'drivers' table who have achieved a specific position and number of wins in the driver standings. The placeholders in the WHERE clause represent the desired position and wins of the drivers.",
            "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?"
        },
        {
            "sample_id": 2149,
            "gold_sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT races.name, races.date FROM races ORDER BY races.date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of race names and their corresponding dates from the 'races' table, sorted by the date of the race. The placeholder in the LIMIT clause allows the user to specify the maximum number of race records to retrieve.",
            "question": "What is the name and date of the race that occurred most recently?"
        },
        {
            "sample_id": 2188,
            "gold_sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
            "gold_complexity": 14,
            "vt": "SELECT DISTINCT pitstops.driverid, pitstops.stop FROM pitstops WHERE pitstops.duration < (SELECT MAX(pitstops.duration) FROM pitstops WHERE raceid = 841)",
            "ba": "The virtual table provides a list of unique driver identifiers and their corresponding pit stop numbers from the 'pitstops' table, specifically for those pit stops that had a duration shorter than the maximum duration recorded for a specific race identified by a placeholder.",
            "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841."
        },
        {
            "sample_id": 2200,
            "gold_sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
            "gold_complexity": 15,
            "vt": "SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5",
            "ba": "The virtual table provides a list of drivers who have made more than 8 pit stops or have finished in more than 5 races. It includes the driver's first name, last name, and unique identifier. The data is sourced from the 'drivers' table, and it combines information from both the 'pitstops' and 'results' tables to filter the drivers based on their performance in races and pit stops.",
            "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?"
        },
        {
            "sample_id": 2213,
            "gold_sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(results.fastestlapspeed) FROM races JOIN results AS T2 ON T1.raceid = T2.raceid WHERE races.year = [placeholder-type:numeric] AND races.name = None.\"monaco grand prix\"",
            "ba": "The virtual table calculates the average fastest lap speed from the results of races held in a specific year, particularly focusing on the 'Monaco Grand Prix'. The query joins the 'races' and 'results' tables to correlate race data with the corresponding results, filtering by the specified year.",
            "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?"
        },
        {
            "sample_id": 2184,
            "gold_sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
            "gold_complexity": 9,
            "vt": "SELECT races.name FROM races JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE circuits.country = None.\"spain\" AND races.year > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of races that took place in circuits located in Spain, filtering for races that occurred after a specified year. The placeholder in the WHERE clause represents the year after which the races are to be considered.",
            "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?"
        },
        {
            "sample_id": 2161,
            "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT drivers.driverid, drivers.surname FROM drivers JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY laptimes.milliseconds LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of driver IDs and surnames from the 'drivers' table, specifically for those drivers who have recorded lap times. The results are ordered by the milliseconds taken to complete the laps, and the number of results returned is limited by a placeholder for numeric values.",
            "question": "What is the id and last name of the driver with the longest laptime?"
        },
        {
            "sample_id": 2177,
            "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT drivers.forename FROM drivers JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE driverstandings.position = [placeholder-type:numeric] AND driverstandings.wins = [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique first names of drivers from the 'drivers' table who have achieved a specific position in the driver standings and have a certain number of wins. The placeholders in the WHERE clause represent the desired position and the number of wins.",
            "question": "What are all the different first names of the drivers who are in position as standing and won?"
        },
        {
            "sample_id": 2207,
            "gold_sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
            "gold_complexity": 7,
            "vt": "SELECT circuits.name FROM circuits WHERE circuits.country = None.\"uk\" OR circuits.country = None.\"malaysia\"",
            "ba": "The virtual table lists the names of circuits from the 'circuits' table that are located in either the UK or Malaysia. The placeholders in the WHERE clause represent the countries being queried.",
            "question": "What are the names of all the circuits that are in the UK or Malaysia?"
        },
        {
            "sample_id": 2206,
            "gold_sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
            "gold_complexity": 7,
            "vt": "SELECT circuits.name FROM circuits WHERE circuits.country = None.\"uk\" OR circuits.country = None.\"malaysia\"",
            "ba": "The virtual table lists the names of circuits from the 'circuits' table that are located in either the UK or Malaysia. The placeholders in the WHERE clause represent the countries being queried.",
            "question": "What are the names of circuits that belong to UK or Malaysia?"
        },
        {
            "sample_id": 2197,
            "gold_sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
            "gold_complexity": 6,
            "vt": "SELECT races.name FROM races WHERE races.year BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of races that occurred within a specific range of years from the 'races' table. The placeholders in the WHERE clause represent the start and end years for filtering the races.",
            "question": "What are the names of all races held between 2009 and 2011?"
        },
        {
            "sample_id": 2192,
            "gold_sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT drivers.forename FROM drivers ORDER BY drivers.forename",
            "ba": "The virtual table lists the unique first names of drivers from the 'drivers' table, sorted in alphabetical order. This allows users to see all distinct first names without duplicates.",
            "question": "List the forenames of all distinct drivers in alphabetical order?"
        },
        {
            "sample_id": 2225,
            "gold_sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT drivers.driverid, drivers.surname FROM drivers JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY drivers.driverid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of driver IDs and surnames from the 'drivers' table, showing the drivers who have participated in races. It joins the 'results' table to link drivers to their race results and the 'races' table to ensure that the results are associated with actual races. The results are grouped by driver ID to count the number of races each driver has participated in, and the output is ordered by this count, limiting the results to a specified number of drivers.",
            "question": "What are the ids and last names of all drivers who participated in the most races?"
        },
        {
            "sample_id": 2209,
            "gold_sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
            "gold_complexity": 9,
            "vt": "SELECT circuits.circuitid, circuits.location FROM circuits WHERE circuits.country = None.\"france\" OR circuits.country = None.\"belgium\"",
            "ba": "The virtual table describes the unique identifiers and geographical locations of circuits from the 'circuits' table that are located in either France or Belgium. The placeholders in the WHERE clause represent the countries being filtered.",
            "question": "What are the ids and locations of all circuits in France or Belgium?"
        },
        {
            "sample_id": 2181,
            "gold_sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), constructors.nationality FROM constructors GROUP BY constructors.nationality",
            "ba": "The virtual table provides a count of constructors grouped by their nationality from the 'constructors' table. This allows users to see how many constructors belong to each nationality.",
            "question": "For each nationality, how many different constructors are there?"
        },
        {
            "sample_id": 2217,
            "gold_sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
            "gold_complexity": 15,
            "vt": "SELECT MAX(results.fastestlapspeed), races.name, races.year FROM races JOIN results AS T2 ON T1.raceid = T2.raceid WHERE races.year > [placeholder-type:numeric] GROUP BY races.name ORDER BY races.year",
            "ba": "The virtual table displays the maximum fastest lap speed recorded for each race, along with the race name and year. It filters the results to include only those races that occurred after a specified year, grouping the results by race name and ordering them by year.",
            "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?"
        },
        {
            "sample_id": 2182,
            "gold_sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), constructorstandings.constructorid FROM constructorstandings GROUP BY constructorstandings.constructorid",
            "ba": "The virtual table provides a count of constructor standings grouped by each constructor's unique identifier. This allows users to see how many standings entries exist for each constructor in the database.",
            "question": "What are the numbers of races for each constructor id?"
        },
        {
            "sample_id": 2179,
            "gold_sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT drivers.forename FROM drivers JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE driverstandings.position = [placeholder-type:numeric] AND driverstandings.wins = [placeholder-type:numeric] AND driverstandings.points > [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first names of drivers from the 'drivers' table who have a specific position, number of wins, and points in the driver standings. The placeholders in the WHERE clause represent the position, wins, and points criteria.",
            "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?"
        },
        {
            "sample_id": 2150,
            "gold_sql": "SELECT name FROM races WHERE YEAR = 2017",
            "gold_complexity": 6,
            "vt": "SELECT races.name FROM races WHERE races.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of races that took place in a specific year from the 'races' table. The placeholder in the WHERE clause represents the year of the race.",
            "question": "Find the names of all races held in 2017."
        },
        {
            "sample_id": 2157,
            "gold_sql": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT drivers.driverid, drivers.nationality FROM drivers JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE laptimes.milliseconds > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique driver identifiers and their nationalities from the 'drivers' table, filtered by lap times recorded in the 'laptimes' table. The condition specifies that only those drivers whose lap times exceed a certain duration in milliseconds will be included.",
            "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?"
        },
        {
            "sample_id": 2170,
            "gold_sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
            "gold_complexity": 8,
            "vt": "SELECT drivers.forename, drivers.surname FROM drivers WHERE drivers.nationality = None.\"german\"",
            "ba": "The virtual table describes the first and last names of drivers from the 'drivers' table who are of a specific nationality. The placeholder in the WHERE clause represents the nationality of the drivers.",
            "question": "Find the forename and surname of drivers whose nationality is German?"
        },
        {
            "sample_id": 2196,
            "gold_sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
            "gold_complexity": 6,
            "vt": "SELECT races.name FROM races WHERE races.year BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of races that occurred within a specific range of years from the 'races' table. The placeholders in the WHERE clause represent the start and end years for filtering the races.",
            "question": "What are the names of races held between 2009 and 2011?"
        },
        {
            "sample_id": 2174,
            "gold_sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "gold_complexity": 12,
            "vt": "SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "ba": "The virtual table describes the first and last names of drivers who participated in the 'Australian Grand Prix' but did not participate in the 'Chinese Grand Prix'. The query uses joins to connect the 'races', 'results', and 'drivers' tables, filtering based on the race names and excluding those who raced in the Chinese Grand Prix.",
            "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?"
        },
        {
            "sample_id": 2173,
            "gold_sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "gold_complexity": 12,
            "vt": "SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
            "ba": "The virtual table identifies drivers who participated in both the 'Australian Grand Prix' and the 'Chinese Grand Prix'. It retrieves the driver IDs and their first names by joining the 'races', 'results', and 'drivers' tables. The intersection of the two queries ensures that only drivers who raced in both events are included.",
            "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?"
        },
        {
            "sample_id": 2151,
            "gold_sql": "SELECT name FROM races WHERE YEAR = 2017",
            "gold_complexity": 6,
            "vt": "SELECT races.name FROM races WHERE races.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of races that took place in a specific year from the 'races' table. The placeholder in the WHERE clause represents the year of the race.",
            "question": "What are the names of all the races that occurred in the year 2017?"
        },
        {
            "sample_id": 2201,
            "gold_sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
            "gold_complexity": 15,
            "vt": "SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5",
            "ba": "The virtual table provides a list of drivers who have participated in more than 8 pit stops or have finished in more than 5 races. It includes the drivers' first names, last names, and unique identifiers from the 'drivers' table.",
            "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?"
        }
    ],
    "debate": [
        {
            "sample_id": 1505,
            "gold_sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT people.name FROM debate_people JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY people.name HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of individuals from the 'people' table who participated in debates as the negative side and have been involved in a specified number of debates. The placeholder in the HAVING clause represents the minimum count of debates they must have participated in.",
            "question": "Show the names of people who have been on the negative side of debates at least twice."
        },
        {
            "sample_id": 1500,
            "gold_sql": "SELECT DISTINCT Venue FROM debate",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT debate.venue FROM debate",
            "ba": "The virtual table lists unique venues from the 'debate' table where debate events are held.",
            "question": "Show the distinct venues of debates"
        },
        {
            "sample_id": 1497,
            "gold_sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT people.party FROM people ORDER BY people.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the political party affiliations of individuals from the 'people' table, ordered by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the party of the youngest people?"
        },
        {
            "sample_id": 1506,
            "gold_sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
            "gold_complexity": 10,
            "vt": "SELECT people.name FROM people WHERE NOT people.people_id IN (SELECT debate_people.affirmative FROM debate_people)",
            "ba": "The virtual table lists the names of individuals from the 'people' table who have not participated on the affirmative side in any debate. The subquery identifies all individuals who have been on the affirmative side, and the main query filters out these individuals from the list of all people.",
            "question": "List the names of people that have not been on the affirmative side of debates."
        },
        {
            "sample_id": 1503,
            "gold_sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
            "gold_complexity": 8,
            "vt": "SELECT people.name FROM debate_people JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE debate.num_of_audience > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of people who were on the affirmative side of debates that had a specific number of audience members. It combines data from the 'debate_people', 'debate', and 'people' tables, filtering based on the audience size.",
            "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200."
        },
        {
            "sample_id": 1499,
            "gold_sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT people.party FROM people GROUP BY people.party ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the political party affiliations of individuals from the 'people' table. It groups the results by party and orders them based on the number of individuals in each party, limiting the output to a specified number of parties.",
            "question": "Show the party that has the most people."
        },
        {
            "sample_id": 1501,
            "gold_sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
            "gold_complexity": 10,
            "vt": "SELECT people.name, debate.date, debate.venue FROM debate_people JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID",
            "ba": "The virtual table describes the names of individuals who participated on the affirmative side of debates, along with the date and venue of those debates. The placeholders represent the specific identifiers for the debates and the individuals involved.",
            "question": "Show the names of people, and dates and venues of debates they are on the affirmative side."
        },
        {
            "sample_id": 1504,
            "gold_sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
            "gold_complexity": 9,
            "vt": "SELECT people.name, COUNT(*) FROM debate_people JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY people.name",
            "ba": "The virtual table summarizes the names of individuals who participated in debates on the affirmative side, along with the count of their appearances in those debates. It joins the 'debate_people' table with the 'people' table to retrieve the names of the affirmative participants and groups the results by their names to count how many times each person has been on the affirmative side.",
            "question": "Show the names of people and the number of times they have been on the affirmative side of debates."
        },
        {
            "sample_id": 1496,
            "gold_sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people WHERE people.age = [placeholder-type:numeric] OR people.age = [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of individuals from the 'people' table who are either of a specific age or another specific age. The placeholders in the WHERE clause represent the ages being queried.",
            "question": "Show the names of people aged either 35 or 36."
        }
    ],
    "wta_1": [
        {
            "sample_id": 7460,
            "gold_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.minutes LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of the winning and losing players from the 'matches' table, ordered by the duration of the match in minutes. The placeholder in the LIMIT clause represents the maximum number of match results to return.",
            "question": "find the names of loser and winner who played in the match with greatest number of minutes."
        },
        {
            "sample_id": 7468,
            "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique country codes from the 'players' table, grouped by country code and ordered by the number of players from each country. The placeholder in the LIMIT clause allows the user to specify the maximum number of country codes to return.",
            "question": "find the code of the country where has the greatest number of players."
        },
        {
            "sample_id": 7466,
            "gold_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), players.country_code FROM players GROUP BY players.country_code",
            "ba": "The virtual table summarizes the number of players from each country by counting the total players grouped by their country code from the 'players' table.",
            "question": "find the number of players for each country."
        },
        {
            "sample_id": 7438,
            "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
            "gold_complexity": 8,
            "vt": "SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of tournaments from the 'matches' table that have more than a specified number of matches played. The placeholder in the HAVING clause represents the minimum count of matches required for a tournament to be included in the results.",
            "question": "Find the name of tourney that has more than 10 matches."
        },
        {
            "sample_id": 7443,
            "gold_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM matches WHERE matches.year = [placeholder-type:numeric] OR matches.year = [placeholder-type:numeric]",
            "ba": "The virtual table counts the total number of matches played in specific years from the 'matches' table. The placeholders represent the years for which the match count is being queried.",
            "question": "How many matches were played in 2013 or 2016?"
        },
        {
            "sample_id": 7423,
            "gold_sql": "SELECT count(*) FROM players",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM players",
            "ba": "The virtual table counts the total number of players in the 'players' table.",
            "question": "How many players are there?"
        },
        {
            "sample_id": 7451,
            "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
            "gold_complexity": 10,
            "vt": "SELECT players.first_name, players.last_name FROM players WHERE players.hand = '[placeholder-type:string]' ORDER BY players.birth_date",
            "ba": "The virtual table describes the first and last names of players from the 'players' table who play with a specific hand. The results are ordered by the players' birth dates. The placeholder in the WHERE clause represents the playing hand of the players.",
            "question": "What are the full names of all left handed players, in order of birth date?"
        },
        {
            "sample_id": 7424,
            "gold_sql": "SELECT count(*) FROM matches",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM matches",
            "ba": "The virtual table counts the total number of matches recorded in the 'matches' table.",
            "question": "Find the total number of matches."
        },
        {
            "sample_id": 7446,
            "gold_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names and country codes of players from the 'players' table, ordered by their birth dates. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "Find the first name and country code of the oldest player."
        },
        {
            "sample_id": 7435,
            "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT country_code) FROM players",
            "ba": "The virtual table counts the distinct number of countries represented by players in the 'players' table. The placeholder in the COUNT function indicates that the query will return the total number of unique country codes associated with the players.",
            "question": "How many distinct countries do players come from?"
        },
        {
            "sample_id": 7459,
            "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT matches.winner_name FROM matches WHERE matches.tourney_name = '[placeholder-type:string]' ORDER BY matches.winner_rank_points LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of the winning players from the 'matches' table in a specific tournament. The query filters the results based on the tournament's name and orders the winners by their ranking points, limiting the number of results returned.",
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?"
        },
        {
            "sample_id": 7472,
            "gold_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
            "gold_complexity": 8,
            "vt": "SELECT SUM(rankings.tours), rankings.ranking_date FROM rankings GROUP BY rankings.ranking_date",
            "ba": "The virtual table summarizes the total number of tours or events considered for player rankings, grouped by the date when the ranking was recorded. The placeholder in the SELECT statement allows for dynamic aggregation of tour counts based on the ranking date.",
            "question": "Find the total number of tours for each ranking date."
        },
        {
            "sample_id": 7440,
            "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
            "gold_complexity": 7,
            "vt": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "ba": "The virtual table identifies the names of players who won matches in both the year 2013 and the year 2016 from the 'matches' table. The use of the INTERSECT operator ensures that only those players who have won in both specified years are included in the results.",
            "question": "List the names of all winners who played in both 2013 and 2016."
        },
        {
            "sample_id": 7439,
            "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
            "gold_complexity": 8,
            "vt": "SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of tournaments from the 'matches' table that have more than a specified number of matches played. The placeholder in the HAVING clause represents the minimum count of matches required for a tournament to be included in the results.",
            "question": "What are the names of tournaments that have more than 10 matches?"
        },
        {
            "sample_id": 7430,
            "gold_sql": "SELECT avg(winner_rank) FROM matches",
            "gold_complexity": 4,
            "vt": "SELECT AVG(matches.winner_rank) FROM matches",
            "ba": "The virtual table calculates the average rank of all winning players from the 'matches' table. This provides insight into the overall performance level of winners in the matches recorded.",
            "question": "Find the average rank of winners in all matches."
        },
        {
            "sample_id": 7441,
            "gold_sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
            "gold_complexity": 7,
            "vt": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "ba": "The virtual table identifies the names of players who won matches in both the year 2013 and the year 2016 from the 'matches' table. The use of the INTERSECT operator ensures that only those players who have won in both specified years are included in the results.",
            "question": "What are the names of players who won in both 2013 and 2016?"
        },
        {
            "sample_id": 7477,
            "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT matches.winner_name, matches.winner_rank FROM matches ORDER BY matches.winner_age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a distinct list of winning players' names and their corresponding ranks from the 'matches' table. The results are ordered by the age of the winners, and the number of records returned is limited by a numeric placeholder.",
            "question": "What are the names and ranks of the three youngest winners across all matches?"
        },
        {
            "sample_id": 7445,
            "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
            "gold_complexity": 10,
            "vt": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "ba": "The virtual table identifies players who have won both the 'WTA Championships' and the 'Australian Open'. It retrieves the country code and first name of these players by joining the 'players' table with the 'matches' table based on the winner's ID. The use of INTERSECT ensures that only players who have won both tournaments are included in the results.",
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?"
        },
        {
            "sample_id": 7482,
            "gold_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), players.hand FROM players GROUP BY players.hand",
            "ba": "The virtual table provides a count of players grouped by their playing hand (left or right) from the 'players' table. This allows for an analysis of the distribution of players based on their preferred hand for playing.",
            "question": "Find the number of players for each hand type."
        },
        {
            "sample_id": 7475,
            "gold_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), matches.year FROM matches GROUP BY matches.year",
            "ba": "The virtual table summarizes the total number of matches played each year from the 'matches' table. It groups the results by the year of the match, providing a count of matches for each distinct year.",
            "question": "How many matches were played in each year?"
        },
        {
            "sample_id": 7433,
            "gold_sql": "SELECT min(loser_rank) FROM matches",
            "gold_complexity": 4,
            "vt": "SELECT MIN(matches.loser_rank) FROM matches",
            "ba": "The virtual table retrieves the minimum rank of losing players from the 'matches' table. This provides insight into the lowest-ranked player who lost in the matches recorded.",
            "question": "What is the best rank of losers across all matches?"
        },
        {
            "sample_id": 7480,
            "gold_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY matches.winner_rank_points LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names, country codes, and birth dates of players who have won matches. It retrieves this information from the 'players' table and joins it with the 'matches' table to filter for winners. The results are ordered by the ranking points of the winners, and a limit is applied to the number of records returned.",
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches."
        },
        {
            "sample_id": 7455,
            "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the years in which matches took place, grouped by year and ordered by the number of matches played in each year. The placeholder allows for limiting the number of years returned based on user input.",
            "question": "Which year had the most matches?"
        },
        {
            "sample_id": 7469,
            "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique country codes of players from the 'players' table, grouped by country. It orders the results based on the number of players from each country and limits the output to a specified number of countries.",
            "question": "What is the code of the country with the most players?"
        },
        {
            "sample_id": 7452,
            "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT players.country_code, players.first_name FROM players JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY rankings.tours LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of players' first names along with their country codes from the 'players' table, filtered by their rankings. The results are ordered by the number of tours or events considered for the ranking, and the output is limited to a specified number of entries.",
            "question": "Find the first name and country code of the player who did the most number of tours."
        },
        {
            "sample_id": 7470,
            "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
            "gold_complexity": 8,
            "vt": "SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique country codes of players from the 'players' table, grouped by country. It filters the results to include only those countries that have more than a specified number of players, represented by a placeholder for numeric values.",
            "question": "Find the codes of countries that have more than 50 players."
        },
        {
            "sample_id": 7437,
            "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT loser_name) FROM matches",
            "ba": "The virtual table counts the distinct names of losing players from the 'matches' table. This provides insight into the number of unique players who have lost in the matches recorded.",
            "question": "How many different loser names are there?"
        },
        {
            "sample_id": 7454,
            "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the years in which matches took place, grouped by year and ordered by the number of matches played in each year. The placeholder allows for limiting the number of years returned based on user input.",
            "question": "Find the year that has the most number of matches."
        },
        {
            "sample_id": 7465,
            "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
            "gold_complexity": 9,
            "vt": "SELECT SUM(rankings.ranking_points), players.first_name FROM players JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY players.first_name",
            "ba": "The virtual table summarizes the total ranking points of players by their first names from the 'players' and 'rankings' tables. It aggregates the ranking points for each player, allowing for a grouped view based on the player's first name.",
            "question": "What are the first names of all players, and their total ranking points?"
        },
        {
            "sample_id": 7478,
            "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT winner_name) FROM matches WHERE matches.tourney_name = '[placeholder-type:string]' AND matches.winner_hand = '[placeholder-type:string]'",
            "ba": "The virtual table counts the distinct names of winners from the 'matches' table based on a specific tournament name and the playing hand of the winners. The placeholders represent the tournament name and the winner's hand type.",
            "question": "How many different winners both participated in the WTA Championships and were left handed?"
        },
        {
            "sample_id": 7429,
            "gold_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
            "gold_complexity": 6,
            "vt": "SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches",
            "ba": "The virtual table calculates the average ages of both the losing and winning players from the 'matches' table. It provides insights into the age demographics of players participating in matches.",
            "question": "What are the average ages of losers and winners across matches?"
        },
        {
            "sample_id": 7476,
            "gold_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT matches.winner_name, matches.winner_rank FROM matches ORDER BY matches.winner_age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a distinct list of winner names and their corresponding ranks from the 'matches' table. The results are ordered by the age of the winners, and the number of results returned is limited by a placeholder for numeric values.",
            "question": "Find the name and rank of the 3 youngest winners across all matches."
        },
        {
            "sample_id": 7448,
            "gold_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
            "gold_complexity": 8,
            "vt": "SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date",
            "ba": "The virtual table describes the first and last names of all players from the 'players' table, ordered by their date of birth. This allows users to see the players' names in chronological order based on when they were born.",
            "question": "List the first and last name of all players in the order of birth date."
        },
        {
            "sample_id": 7464,
            "gold_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
            "gold_complexity": 9,
            "vt": "SELECT SUM(rankings.ranking_points), players.first_name FROM players JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY players.first_name",
            "ba": "The virtual table summarizes the total ranking points of players by their first names from the 'players' and 'rankings' tables. It aggregates the ranking points for each player and groups the results by their first names.",
            "question": "Find the total ranking points for each player and their first name."
        },
        {
            "sample_id": 7450,
            "gold_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
            "gold_complexity": 10,
            "vt": "SELECT players.first_name, players.last_name FROM players WHERE players.hand = '[placeholder-type:string]' ORDER BY players.birth_date",
            "ba": "The virtual table describes the first and last names of players from the 'players' table who play with a specific hand. The results are ordered by the players' birth dates. The placeholder in the WHERE clause represents the playing hand of the players.",
            "question": "List the first and last name of all players who are left / L hand in the order of birth date."
        },
        {
            "sample_id": 7444,
            "gold_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
            "gold_complexity": 10,
            "vt": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "ba": "The virtual table identifies players who have won both the 'WTA Championships' and the 'Australian Open'. It retrieves the country code and first name of these players by joining the 'players' table with the 'matches' table based on the winner's ID. The use of INTERSECT ensures that only players who have won in both tournaments are included in the results.",
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?"
        },
        {
            "sample_id": 7458,
            "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT matches.winner_name FROM matches WHERE matches.tourney_name = '[placeholder-type:string]' ORDER BY matches.winner_rank_points LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of the winning players from the 'matches' table in a specific tournament. The placeholder in the WHERE clause represents the name of the tournament, while the LIMIT clause allows for specifying the maximum number of winners to retrieve based on their ranking points.",
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney."
        }
    ],
    "insurance_policies": [
        {
            "sample_id": 3857,
            "gold_sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
            "gold_complexity": 9,
            "vt": "SELECT claims.claim_id, COUNT(*) FROM claims JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY claims.claim_id",
            "ba": "The virtual table provides a summary of insurance claims along with the count of associated settlements for each claim. It retrieves the unique claim identifiers from the 'claims' table and counts how many settlements are linked to each claim by joining the 'claims' table with the 'settlements' table on the claim identifier. The results are grouped by the claim identifier to aggregate the count of settlements for each claim.",
            "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements."
        },
        {
            "sample_id": 3861,
            "gold_sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), claims.claim_id FROM claims JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY claims.claim_id ORDER BY claims.date_claim_settled LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of claims along with their unique identifiers from the 'claims' table. It joins the 'claims' table with the 'settlements' table to aggregate the data based on the claim IDs. The results are grouped by the claim ID and ordered by the date when the claims were settled. A placeholder is included to limit the number of results returned, allowing users to specify how many records they want to see.",
            "question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id."
        },
        {
            "sample_id": 3877,
            "gold_sql": "SELECT DISTINCT customer_details FROM Customers",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT customers.customer_details FROM customers",
            "ba": "The virtual table retrieves distinct customer details from the 'customers' table.",
            "question": "What are all the distinct details of the customers?"
        },
        {
            "sample_id": 3862,
            "gold_sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), claims.claim_id FROM claims JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY claims.claim_id ORDER BY claims.date_claim_settled LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of claims along with their unique identifiers from the 'claims' table. It joins the 'claims' table with the 'settlements' table to aggregate the data based on the claim IDs. The results are grouped by each claim ID and ordered by the date when the claims were settled. A placeholder is included to limit the number of results returned, allowing users to specify how many records they want to retrieve.",
            "question": "Find the claim id and the number of settlements made for the claim with the most recent settlement date."
        },
        {
            "sample_id": 3887,
            "gold_sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
            "gold_complexity": 13,
            "vt": "SELECT claims.claim_id, claims.date_claim_made, claims.date_claim_settled FROM claims JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY claims.claim_id HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of insurance claims from the 'claims' table, specifically showing the claim ID, the date the claim was made, and the date it was settled. It joins with the 'settlements' table to filter claims that have a specific number of associated settlements, indicated by a placeholder for numeric values in the HAVING clause.",
            "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement."
        },
        {
            "sample_id": 3882,
            "gold_sql": "SELECT count(*) FROM Settlements",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM settlements",
            "ba": "The virtual table provides a count of all settlement records from the 'settlements' table. This count represents the total number of settlements processed, regardless of their details or associated claims.",
            "question": "Count the total number of settlements made."
        },
        {
            "sample_id": 3879,
            "gold_sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT customer_policies.policy_type_code FROM customer_policies GROUP BY customer_policies.policy_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the different types of insurance policies from the 'customer_policies' table, grouping them by their policy type code. It orders the results based on the count of each policy type and limits the output to a specified number of types.",
            "question": "Which kind of policy type was chosen by the most customers?"
        },
        {
            "sample_id": 3867,
            "gold_sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_details, customers.customer_id FROM customers JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY customers.customer_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the details and unique identifiers of customers from the 'customers' table who have more than a specified number of insurance policies. The placeholder in the HAVING clause represents the minimum count of policies a customer must have to be included in the results.",
            "question": "Who are the customers that had more than 1 policy? List the customer details and id."
        },
        {
            "sample_id": 3844,
            "gold_sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
            "gold_complexity": 17,
            "vt": "SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING COUNT(*) > 2 UNION SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)",
            "ba": "The virtual table provides a summary of claims that have been made, specifically focusing on those claims that have been associated with multiple settlements or the highest claimed amount. It combines data from the 'Claims' and 'Settlements' tables, filtering for claims that have more than two associated settlements and also includes claims with the maximum amount claimed.",
            "question": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim."
        },
        {
            "sample_id": 3869,
            "gold_sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
            "gold_complexity": 6,
            "vt": "SELECT settlements.date_claim_made, settlements.date_claim_settled FROM settlements",
            "ba": "The virtual table displays the dates when claims were made and settled for each settlement record from the 'settlements' table. The query does not filter or specify any conditions, allowing for a comprehensive view of all settlement dates.",
            "question": "What are the claim dates and settlement dates of all the settlements?"
        },
        {
            "sample_id": 3873,
            "gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT payments.payment_method_code FROM payments GROUP BY payments.payment_method_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the different payment methods used in the payments table, grouping them by the payment method code and ordering them by the frequency of each method. The placeholder in the LIMIT clause allows for specifying the maximum number of payment methods to return.",
            "question": "With which kind of payment method were the least number of payments processed?"
        },
        {
            "sample_id": 3856,
            "gold_sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
            "gold_complexity": 9,
            "vt": "SELECT claims.date_claim_made FROM claims WHERE claims.amount_settled <= (SELECT AVG(claims.amount_settled) FROM Claims)",
            "ba": "The virtual table retrieves the dates when claims were made for those claims that have a settled amount less than or equal to the average settled amount of all claims. The query uses a subquery to calculate the average settled amount from the 'claims' table.",
            "question": "Return the claim start date for the claims whose claimed amount is no more than the average"
        },
        {
            "sample_id": 3881,
            "gold_sql": "SELECT count(*) FROM Settlements",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM settlements",
            "ba": "The virtual table provides a count of all settlement records from the 'settlements' table. This count represents the total number of settlements processed in the database.",
            "question": "How many settlements are there in total?"
        },
        {
            "sample_id": 3890,
            "gold_sql": "SELECT sum(Amount_Claimed) FROM Claims",
            "gold_complexity": 4,
            "vt": "SELECT SUM(claims.amount_claimed) FROM claims",
            "ba": "The virtual table summarizes the total amount claimed from all insurance claims recorded in the 'claims' table. It uses the SUM function to aggregate the 'amount_claimed' column, providing a single total value for all claims.",
            "question": "What is total amount claimed summed across all the claims?"
        },
        {
            "sample_id": 3871,
            "gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT payments.payment_method_code FROM payments GROUP BY payments.payment_method_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the different payment methods used in the payments table, grouping them by their method code and ordering them by the frequency of each method. The placeholder in the LIMIT clause allows for specifying the maximum number of payment methods to retrieve.",
            "question": "What is the most popular payment method?"
        },
        {
            "sample_id": 3847,
            "gold_sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
            "gold_complexity": 10,
            "vt": "SELECT payments.payment_method_code, payments.date_payment_made, payments.amount_payment FROM payments ORDER BY payments.date_payment_made",
            "ba": "The virtual table describes the payment transactions from the 'payments' table, including the payment method used, the date when the payment was made, and the total amount paid. The results are ordered by the date of payment made.",
            "question": "List the method, date and amount of all the payments, in ascending order of date."
        },
        {
            "sample_id": 3852,
            "gold_sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT claims.amount_settled, claims.amount_claimed FROM claims ORDER BY claims.amount_settled LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the total amounts claimed and settled for insurance claims from the 'claims' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to retrieve, enabling them to control the output size based on their needs.",
            "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount."
        },
        {
            "sample_id": 3859,
            "gold_sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT claims.claim_id, claims.date_claim_made, COUNT(*) FROM claims JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY claims.claim_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of insurance claims along with the count of associated settlements. It retrieves the claim ID and the date when each claim was made from the 'claims' table, and counts the number of settlements linked to each claim by joining with the 'settlements' table. The results are grouped by claim ID and ordered by the count of settlements, with a limit on the number of records returned.",
            "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number."
        },
        {
            "sample_id": 3855,
            "gold_sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
            "gold_complexity": 9,
            "vt": "SELECT claims.date_claim_made FROM claims WHERE claims.amount_settled <= (SELECT AVG(claims.amount_settled) FROM Claims)",
            "ba": "The virtual table retrieves the dates when claims were made for those claims that have a settled amount less than or equal to the average settled amount of all claims. The query uses a subquery to calculate the average settled amount from the 'claims' table.",
            "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date."
        },
        {
            "sample_id": 3884,
            "gold_sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
            "gold_complexity": 10,
            "vt": "SELECT payments.payment_id, payments.date_payment_made, payments.amount_payment FROM payments WHERE payments.payment_method_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the payment transactions from the 'payments' table that were made using a specific payment method. The placeholders in the WHERE clause represent the payment method code.",
            "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa."
        },
        {
            "sample_id": 3886,
            "gold_sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 6,
            "vt": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table provides a list of customer details from the 'customers' table, excluding those customers who have associated insurance policies in the 'customer_policies' table. The use of the EXCEPT clause ensures that only customers without any policies are displayed.",
            "question": "Which customers do not have any policies? Find the details of these customers."
        },
        {
            "sample_id": 3874,
            "gold_sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT payments.payment_method_code FROM payments GROUP BY payments.payment_method_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different payment methods used in the payments table, grouped by the payment method code. It counts the occurrences of each payment method and orders them, allowing the user to limit the results to a specified number of payment methods.",
            "question": "What is the payment method that were used the least often?"
        },
        {
            "sample_id": 3846,
            "gold_sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
            "gold_complexity": 13,
            "vt": "SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2 EXCEPT SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id",
            "ba": "The virtual table provides a list of customer details and their unique identifiers for customers who have at least two insurance policies, excluding those who have made any claims on those policies. It combines data from the 'Customers' and 'Customer_Policies' tables, ensuring that only customers with multiple policies are included, while filtering out any customers who have submitted claims.",
            "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims."
        },
        {
            "sample_id": 3843,
            "gold_sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
            "gold_complexity": 17,
            "vt": "SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING COUNT(*) > 2 UNION SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)",
            "ba": "The virtual table provides a summary of claims that have been made, specifically focusing on those claims that have been associated with multiple settlements or the highest claimed amount. It combines data from the 'Claims' and 'Settlements' tables, filtering for claims that have more than two associated settlements and also includes claims with the maximum amount claimed.",
            "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id."
        },
        {
            "sample_id": 3868,
            "gold_sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_details, customers.customer_id FROM customers JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY customers.customer_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the details and unique identifiers of customers from the 'customers' table who have more than a specified number of insurance policies. The placeholder in the HAVING clause represents the minimum count of policies a customer must have to be included in the results.",
            "question": "Find the the customer details and id for the customers who had more than one policy."
        },
        {
            "sample_id": 3885,
            "gold_sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 6,
            "vt": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table provides a list of customer details from the 'customers' table, excluding those customers who have associated insurance policies in the 'customer_policies' table. The use of the EXCEPT clause ensures that only customers without any policies are displayed.",
            "question": "List the details of the customers who do not have any policies."
        },
        {
            "sample_id": 3883,
            "gold_sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
            "gold_complexity": 10,
            "vt": "SELECT payments.payment_id, payments.date_payment_made, payments.amount_payment FROM payments WHERE payments.payment_method_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the payment transactions from the 'payments' table that were made using a specific payment method. The placeholder in the WHERE clause represents the code for the payment method used.",
            "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount."
        },
        {
            "sample_id": 3863,
            "gold_sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT claims.date_claim_made FROM claims ORDER BY claims.date_claim_made LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates when claims were made from the 'claims' table, ordered chronologically. The placeholder in the LIMIT clause allows for specifying the maximum number of claim dates to return.",
            "question": "Of all the claims, what was the earliest date when any claim was made?"
        }
    ],
    "orchestra": [
        {
            "sample_id": 7850,
            "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
            "gold_complexity": 9,
            "vt": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "ba": "The virtual table identifies record companies associated with orchestras that were founded both before and after the year 2003. It uses an INTERSECT operation to find common record companies from two separate queries: one for orchestras founded before 2003 and another for those founded after 2003.",
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?"
        },
        {
            "sample_id": 7852,
            "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM orchestra WHERE orchestra.major_record_format = None.\"cd\" OR orchestra.major_record_format = None.\"dvd\"",
            "ba": "The virtual table counts the number of orchestras from the 'orchestra' table that have a major recording format of either 'cd' or 'dvd'. The placeholders in the WHERE clause represent the specific recording formats being queried.",
            "question": "Count the number of orchestras that have CD or DVD as their record format."
        },
        {
            "sample_id": 7830,
            "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "gold_complexity": 6,
            "vt": "SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work",
            "ba": "The virtual table lists the names of conductors from the 'conductor' table, ordered by the year they started working. This allows users to see the conductors in chronological order based on their start year.",
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?"
        },
        {
            "sample_id": 7835,
            "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT conductor.name FROM conductor JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY orchestra.conductor_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of conductors who have conducted more than a specified number of orchestras. It joins the 'conductor' table with the 'orchestra' table based on the conductor's ID, groups the results by conductor ID, and filters the groups to include only those with a count of orchestras greater than a specified numeric value.",
            "question": "Show the names of conductors that have conducted more than one orchestras."
        },
        {
            "sample_id": 7848,
            "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "gold_complexity": 10,
            "vt": "SELECT orchestra.orchestra FROM orchestra WHERE NOT orchestra.orchestra_id IN (SELECT orchestra.orchestra_id FROM performance)",
            "ba": "The virtual table lists the names of orchestras from the 'orchestra' table that have not performed any performances. The subquery identifies orchestras that have associated performances, and the main query filters out these orchestras to show only those without any recorded performances.",
            "question": "What are the orchestras that do not have any performances?"
        },
        {
            "sample_id": 7822,
            "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "gold_complexity": 6,
            "vt": "SELECT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded",
            "ba": "The virtual table retrieves the record company associated with each orchestra from the 'orchestra' table, sorted by the year the orchestra was founded. The placeholder in the SELECT clause represents the record company's identifier.",
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded."
        },
        {
            "sample_id": 7841,
            "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
            "gold_complexity": 8,
            "vt": "SELECT orchestra.record_company, COUNT(*) FROM orchestra GROUP BY orchestra.record_company",
            "ba": "The virtual table summarizes the number of orchestras associated with each record company from the 'orchestra' table. The placeholder in the SELECT clause represents the record company's identifier, and the COUNT function is used to count the number of orchestras linked to each record company.",
            "question": "Please show the different record companies and the corresponding number of orchestras."
        },
        {
            "sample_id": 7837,
            "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT conductor.name FROM conductor JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY orchestra.conductor_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of conductors from the 'conductor' table, grouped by the orchestras they conduct. It joins the 'conductor' table with the 'orchestra' table to associate each conductor with their respective orchestras. The results are ordered by the count of orchestras each conductor has conducted, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Show the name of the conductor that has conducted the most number of orchestras."
        },
        {
            "sample_id": 7836,
            "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT conductor.name FROM conductor JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY orchestra.conductor_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of conductors who have conducted more than a specified number of orchestras. It joins the 'conductor' table with the 'orchestra' table based on the conductor's ID, groups the results by conductor ID, and filters the groups to include only those with a count of orchestras greater than a specified numeric value.",
            "question": "What are the names of conductors who have conducted at more than one orchestra?"
        },
        {
            "sample_id": 7827,
            "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
            "ba": "The virtual table counts the distinct nationalities of conductors from the 'conductor' table. The placeholder in the SELECT clause represents the count of unique nationalities.",
            "question": "How many different nationalities do conductors have?"
        },
        {
            "sample_id": 7833,
            "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
            "gold_complexity": 7,
            "vt": "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "ba": "The virtual table describes the names of conductors along with the orchestras they lead. It retrieves data from the 'conductor' table and joins it with the 'orchestra' table based on the conductor's unique identifier. This allows for a comprehensive view of which conductor is associated with which orchestra.",
            "question": "Show the names of conductors and the orchestras they have conducted."
        },
        {
            "sample_id": 7825,
            "gold_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "gold_complexity": 7,
            "vt": "SELECT MAX(performance.share), MIN(performance.share) FROM performance WHERE performance.type <> None.\"live final\"",
            "ba": "The virtual table provides the maximum and minimum market share of performances from the 'performance' table, excluding those of type 'live final'. The placeholders in the WHERE clause indicate that the query is filtering out a specific performance type.",
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\"."
        },
        {
            "sample_id": 7834,
            "gold_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
            "gold_complexity": 7,
            "vt": "SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "ba": "The virtual table describes the names of conductors along with the orchestras they lead. It retrieves data from the 'conductor' table and joins it with the 'orchestra' table based on the conductor's unique identifier. This allows for a comprehensive view of which conductor is associated with which orchestra.",
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?"
        },
        {
            "sample_id": 7817,
            "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
            "gold_complexity": 6,
            "vt": "SELECT conductor.name FROM conductor ORDER BY conductor.age",
            "ba": "The virtual table lists the names of conductors from the 'conductor' table, sorted by their age in ascending order.",
            "question": "List the names of conductors in ascending order of age."
        },
        {
            "sample_id": 7823,
            "gold_sql": "SELECT avg(Attendance) FROM SHOW",
            "gold_complexity": 4,
            "vt": "SELECT AVG(show.attendance) FROM show",
            "ba": "The virtual table calculates the average attendance of shows from the 'show' table. It provides insights into the overall audience engagement for performances.",
            "question": "What is the average attendance of shows?"
        },
        {
            "sample_id": 7828,
            "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Nationality) FROM conductor",
            "ba": "The virtual table counts the distinct nationalities of conductors from the 'conductor' table. The placeholder in the SELECT clause represents the count of unique nationalities.",
            "question": "Count the number of different nationalities of conductors."
        },
        {
            "sample_id": 7851,
            "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM orchestra WHERE orchestra.major_record_format = None.\"cd\" OR orchestra.major_record_format = None.\"dvd\"",
            "ba": "The virtual table counts the number of orchestras from the 'orchestra' table that produce recordings in either 'cd' or 'dvd' format. The placeholders in the WHERE clause represent the major recording formats being queried.",
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\"."
        },
        {
            "sample_id": 7854,
            "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT orchestra.year_of_founded FROM orchestra JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY performance.orchestra_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the years when orchestras were founded from the 'orchestra' table. It joins the 'orchestra' table with the 'performance' table to correlate orchestras with their performances. The results are grouped by the orchestra's identifier, and only those orchestras that have more than a specified number of performances are included in the output. The placeholder in the HAVING clause represents the minimum count of performances required for an orchestra to be listed.",
            "question": "What are years of founding for orchestras that have had more than a single performance?"
        },
        {
            "sample_id": 7831,
            "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of conductors from the 'conductor' table, ordered by the year they started working, and limits the results to a specified number of conductors.",
            "question": "List the name of the conductor with the most years of work."
        },
        {
            "sample_id": 7840,
            "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
            "gold_complexity": 7,
            "vt": "SELECT conductor.name FROM conductor JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE orchestra.year_of_founded > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of conductors from the 'conductor' table who are associated with orchestras founded after a specific year. The placeholder in the WHERE clause represents the year of foundation of the orchestra.",
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?"
        },
        {
            "sample_id": 7853,
            "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT orchestra.year_of_founded FROM orchestra JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY performance.orchestra_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the years when orchestras were founded from the 'orchestra' table. It joins the 'orchestra' table with the 'performance' table to count the number of performances associated with each orchestra. The result is grouped by the orchestra's ID, and only those orchestras that have more than a specified number of performances are included in the output.",
            "question": "Show the years in which orchestras that have given more than one performance are founded."
        },
        {
            "sample_id": 7842,
            "gold_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
            "gold_complexity": 8,
            "vt": "SELECT orchestra.record_company, COUNT(*) FROM orchestra GROUP BY orchestra.record_company",
            "ba": "The virtual table summarizes the number of orchestras associated with each record company from the 'orchestra' table. The placeholder in the SELECT clause represents the record company's identifier, and the COUNT function is used to count the number of orchestras linked to each record company.",
            "question": "How many orchestras does each record company manage?"
        },
        {
            "sample_id": 7816,
            "gold_sql": "SELECT count(*) FROM conductor",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM conductor",
            "ba": "The virtual table provides a count of all conductors from the 'conductor' table, which includes unique identifiers, names, ages, nationalities, and years of work for each conductor.",
            "question": "Count the number of conductors."
        },
        {
            "sample_id": 7843,
            "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "gold_complexity": 8,
            "vt": "SELECT orchestra.major_record_format FROM orchestra GROUP BY orchestra.major_record_format ORDER BY COUNT(*)",
            "ba": "The virtual table provides a list of major record formats used by orchestras, grouped by the format type and ordered by the count of orchestras that utilize each format. This allows users to see which record formats are most commonly associated with orchestras.",
            "question": "Please show the record formats of orchestras in ascending order of count."
        }
    ],
    "music_2": [
        {
            "sample_id": 5199,
            "gold_sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT instruments.instrument FROM instruments GROUP BY instruments.instrument ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the different types of instruments played by band members, grouped by instrument type. The results are ordered by the count of each instrument type, and the number of results returned is limited by a placeholder for numeric values.",
            "question": "What is the most used instrument?"
        },
        {
            "sample_id": 5193,
            "gold_sql": "SELECT title FROM songs WHERE title LIKE '% the %'",
            "gold_complexity": 6,
            "vt": "SELECT songs.title FROM songs WHERE songs.title LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the titles of songs from the 'songs' table that match a specific pattern. The placeholder in the WHERE clause represents the pattern to search for in the song titles.",
            "question": "Find all the songs whose name contains the word \"the\"."
        },
        {
            "sample_id": 5197,
            "gold_sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
            "gold_complexity": 10,
            "vt": "SELECT instruments.instrument FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE band.lastname = None.\"heilo\" AND songs.title = None.\"le pop\"",
            "ba": "The virtual table retrieves the types of instruments played by band members during performances of a specific song, filtered by the last name of the band member and the title of the song.",
            "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?"
        },
        {
            "sample_id": 5187,
            "gold_sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT albums.label FROM albums GROUP BY albums.label ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the record labels associated with albums from the 'albums' table. It groups the results by label and orders them based on the count of albums per label, limiting the output to a specified number of labels.",
            "question": "What is the label that has the most albums?"
        },
        {
            "sample_id": 5214,
            "gold_sql": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT vocals.type FROM vocals GROUP BY vocals.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the different types of vocals used in songs, grouped by their type and ordered by the count of occurrences. The placeholder in the LIMIT clause allows for specifying the maximum number of vocal types to return.",
            "question": "What is the type of vocables that appears most frequently?"
        },
        {
            "sample_id": 5210,
            "gold_sql": "SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
            "gold_complexity": 7,
            "vt": "SELECT instruments.instrument FROM instruments JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE band.lastname = None.\"heilo\"",
            "ba": "The virtual table describes the instruments played by band members from the 'instruments' table, specifically filtering for a band member with the last name 'heilo'. The query joins the 'instruments' table with the 'band' table to access the last name of the band member, using a placeholder for the last name in the WHERE clause.",
            "question": "What are all the instruments used by the musician with the last name \"Heilo\"?"
        },
        {
            "sample_id": 5216,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT vocals.type FROM vocals JOIN band AS T2 ON T1.bandmate = T2.id WHERE band.lastname = None.\"heilo\" GROUP BY vocals.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the types of vocals provided by band members from the 'vocals' table, specifically filtering for a band member with the last name 'heilo'. The results are grouped by the type of vocals and ordered by the count of occurrences, limiting the output to a specified number of results.",
            "question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?"
        },
        {
            "sample_id": 5175,
            "gold_sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
            "gold_complexity": 8,
            "vt": "SELECT songs.title FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE band.lastname = None.\"heilo\"",
            "ba": "The virtual table describes the titles of songs performed by a specific band member from the 'performance' table. It joins the 'band' table to filter by the last name of the band member, and the 'songs' table to retrieve the song titles. The placeholder in the WHERE clause represents the last name of the band member.",
            "question": "Find all the songs performed by artist with last name \"Heilo\""
        },
        {
            "sample_id": 5249,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
            "gold_complexity": 9,
            "vt": "SELECT vocals.type FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE band.lastname = None.\"heilo\" AND songs.title = None.\"der kapitan\"",
            "ba": "The virtual table describes the types of vocals provided by band members for a specific song. It retrieves this information by joining the 'vocals' table with the 'songs' table to match the song identifiers, and then joining with the 'band' table to filter based on the last name of the band member. The placeholders in the WHERE clause represent the last name of the band member and the title of the song.",
            "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?"
        },
        {
            "sample_id": 5220,
            "gold_sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"demon kitty rag\"",
            "ba": "The virtual table counts the number of vocal contributions for a specific song from the 'vocals' table, joining it with the 'songs' table to filter by the song's title. The placeholder in the WHERE clause represents the title of the song being queried.",
            "question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?"
        },
        {
            "sample_id": 5206,
            "gold_sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT instrument) FROM instruments JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"le pop\"",
            "ba": "The virtual table counts the distinct types of instruments used in songs from the 'instruments' table that are associated with a specific song title from the 'songs' table. The placeholder in the WHERE clause represents the title of the song.",
            "question": "How many different instruments are used in the song \"Le Pop\"?"
        },
        {
            "sample_id": 5231,
            "gold_sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
            "gold_complexity": 10,
            "vt": "SELECT band.firstname, band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE songs.title = None.\"le pop\"",
            "ba": "The virtual table describes the first and last names of band members who performed a specific song. It retrieves data from the 'performance' table, joining it with the 'band' table to get the names of the band members. The condition filters the results based on the title of the song, which is represented by a placeholder.",
            "question": "Who performed the song named \"Le Pop\"?"
        },
        {
            "sample_id": 5165,
            "gold_sql": "SELECT count(*) FROM Band",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM band",
            "ba": "The virtual table counts the total number of band members from the 'band' table.",
            "question": "How many bands are there?"
        },
        {
            "sample_id": 5166,
            "gold_sql": "SELECT count(*) FROM Band",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM band",
            "ba": "The virtual table counts the total number of band members from the 'band' table.",
            "question": "Find the number of bands."
        },
        {
            "sample_id": 5247,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT vocals.type FROM vocals JOIN band AS T2 ON T1.bandmate = T2.id WHERE band.firstname = None.\"solveig\" GROUP BY vocals.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the types of vocals provided by band members from the 'vocals' table, specifically filtering for those band members whose first name is 'solveig'. The results are grouped by the type of vocals and ordered by the count of occurrences, with a limit on the number of results returned.",
            "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?"
        },
        {
            "sample_id": 5257,
            "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"back\"",
            "ba": "The virtual table lists the unique titles of songs that feature vocals, excluding those songs that have backing vocals. It achieves this by joining the 'vocals' table with the 'songs' table on the song identifier, and then using the EXCEPT clause to remove titles of songs where the vocal type is 'back'.",
            "question": "Find the name of songs that does not have a back vocal."
        },
        {
            "sample_id": 5236,
            "gold_sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
            "gold_complexity": 10,
            "vt": "SELECT instruments.instrument FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE band.lastname = None.\"heilo\" AND songs.title = None.\"badlands\"",
            "ba": "The virtual table retrieves the types of instruments played by band members during performances of a specific song, filtered by the last name of the band member and the title of the song.",
            "question": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?"
        },
        {
            "sample_id": 5230,
            "gold_sql": "SELECT * FROM Albums WHERE YEAR  =  2010",
            "gold_complexity": 6,
            "vt": "SELECT * FROM albums WHERE albums.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all details of albums from the 'albums' table that were released in a specific year. The placeholder in the WHERE clause represents the year of release.",
            "question": "What information is there on albums from 2010?"
        },
        {
            "sample_id": 5217,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
            "gold_complexity": 7,
            "vt": "SELECT vocals.type FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"le pop\"",
            "ba": "The virtual table describes the types of vocals associated with songs from the 'vocals' table, specifically for a song titled 'le pop'. The query joins the 'vocals' table with the 'songs' table to filter the results based on the song title.",
            "question": "What are the vocal types used in song \"Le Pop\"?"
        },
        {
            "sample_id": 5171,
            "gold_sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT performance.stageposition FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id WHERE band.firstname = None.\"solveig\"",
            "ba": "The virtual table retrieves distinct stage positions of band members from the 'performance' table who are associated with a specific band member's first name. The query joins the 'performance' table with the 'band' table to filter results based on the first name of the band member.",
            "question": "Find all the stage positions of the musicians with first name \"Solveig\""
        },
        {
            "sample_id": 5188,
            "gold_sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT albums.label FROM albums GROUP BY albums.label ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the record labels associated with albums from the 'albums' table. It groups the results by label and orders them based on the count of albums for each label, limiting the output to a specified number of labels.",
            "question": "What is the label with the most albums?"
        },
        {
            "sample_id": 5185,
            "gold_sql": "SELECT count(DISTINCT label) FROM albums",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT label) FROM albums",
            "ba": "The virtual table counts the distinct record labels from the 'albums' table. The placeholder in the COUNT function indicates that the query is interested in the unique labels associated with the albums.",
            "question": "How many unique labels are there for albums?"
        },
        {
            "sample_id": 5250,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
            "gold_complexity": 9,
            "vt": "SELECT vocals.type FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE band.lastname = None.\"heilo\" AND songs.title = None.\"der kapitan\"",
            "ba": "The virtual table retrieves the type of vocals provided by band members for a specific song. It joins the 'vocals' table with the 'songs' table to link the song identifiers and with the 'band' table to filter by the last name of the band member. The placeholders represent the specific last name of the band member and the title of the song.",
            "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?"
        },
        {
            "sample_id": 5248,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT vocals.type FROM vocals JOIN band AS T2 ON T1.bandmate = T2.id WHERE band.firstname = None.\"solveig\" GROUP BY vocals.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the types of vocals provided by band members from the 'vocals' table, specifically filtering for those band members whose first name is 'solveig'. The results are grouped by the type of vocals and ordered by the count of occurrences, with a limit on the number of results returned.",
            "question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?"
        },
        {
            "sample_id": 5169,
            "gold_sql": "SELECT * FROM Albums WHERE YEAR  =  2012",
            "gold_complexity": 6,
            "vt": "SELECT * FROM albums WHERE albums.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all details of albums from the 'albums' table that were released in a specific year. The placeholder in the WHERE clause represents the year of release.",
            "question": "Find all the albums in 2012."
        },
        {
            "sample_id": 5256,
            "gold_sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
            "gold_complexity": 11,
            "vt": "SELECT band.firstname, band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE songs.title = None.\"der kapitan\" AND performance.stageposition = None.\"back\"",
            "ba": "The virtual table describes the first and last names of band members who performed a specific song in a specific stage position. The placeholders in the WHERE clause represent the title of the song and the stage position of the band member.",
            "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?"
        },
        {
            "sample_id": 5176,
            "gold_sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
            "gold_complexity": 8,
            "vt": "SELECT songs.title FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE band.lastname = None.\"heilo\"",
            "ba": "The virtual table describes the titles of songs performed by a specific band member. It retrieves song titles from the 'songs' table by joining it with the 'performance' table to filter based on the band member's last name. The placeholder in the WHERE clause represents the last name of the band member.",
            "question": "What are the names of the songs by the artist whose last name is \"Heilo\"?"
        },
        {
            "sample_id": 5191,
            "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id WHERE performance.stageposition = None.\"back\" GROUP BY band.lastname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the last names of band members who performed in a specific stage position, filtering for those in the 'back' position. The results are grouped by last name and ordered by the count of performances, with a limit on the number of results returned.",
            "question": "What is the last name of the musician that has been at the back position the most?"
        },
        {
            "sample_id": 5218,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
            "gold_complexity": 7,
            "vt": "SELECT vocals.type FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"le pop\"",
            "ba": "The virtual table describes the types of vocals featured in songs from the 'vocals' table, specifically for a song with the title 'le pop'. The query joins the 'vocals' table with the 'songs' table to filter the results based on the song title.",
            "question": "What are the types of vocals used in the song \"Le Pop\"?"
        },
        {
            "sample_id": 5174,
            "gold_sql": "SELECT count(*) FROM Songs",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM songs",
            "ba": "The virtual table counts the total number of songs in the 'songs' table.",
            "question": "Count the number of songs."
        },
        {
            "sample_id": 5205,
            "gold_sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT instrument) FROM instruments JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"le pop\"",
            "ba": "The virtual table counts the distinct types of instruments used in songs from the 'instruments' table that match a specific song title from the 'songs' table. The placeholder in the WHERE clause represents the title of the song being queried.",
            "question": "How many instruments does the song \"Le Pop\" use?"
        },
        {
            "sample_id": 5225,
            "gold_sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = \"lead\"",
            "ba": "The virtual table lists the distinct titles of songs that feature vocals, excluding those songs where the type of vocals is classified as 'lead'. This is achieved by joining the 'vocals' table with the 'songs' table on the song identifier, and then using the EXCEPT clause to filter out the lead vocal songs.",
            "question": "Find all the songs that do not have a lead vocal."
        },
        {
            "sample_id": 5234,
            "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY band.lastname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the last names of band members who have performed songs, grouped by their last names and ordered by the count of performances. The placeholder in the LIMIT clause allows for specifying the maximum number of last names to return.",
            "question": "What is the last name of the artist who sang the most songs?"
        },
        {
            "sample_id": 5239,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
            "gold_complexity": 7,
            "vt": "SELECT vocals.type FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"badlands\"",
            "ba": "The virtual table describes the type of vocals for a specific song from the 'vocals' table. It joins the 'vocals' table with the 'songs' table to filter the results based on the title of the song, which is represented by a placeholder.",
            "question": "What are the vocal types used in song \"Badlands\"?"
        },
        {
            "sample_id": 5200,
            "gold_sql": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT instruments.instrument FROM instruments GROUP BY instruments.instrument ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the different types of instruments played by band members, grouped by the instrument type. The results are ordered by the count of each instrument type, and the number of results returned is limited by a specified numeric placeholder.",
            "question": "What instrument is used the most?"
        },
        {
            "sample_id": 5215,
            "gold_sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  \"Heilo\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT vocals.type FROM vocals JOIN band AS T2 ON T1.bandmate = T2.id WHERE band.lastname = None.\"heilo\" GROUP BY vocals.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the types of vocals provided by band members from the 'vocals' table, filtered by the last name of the band member. The query groups the results by vocal type and orders them based on the count of occurrences, limiting the results to a specified number.",
            "question": "Which vocal type has the band mate with last name \"Heilo\" played the most?"
        },
        {
            "sample_id": 5252,
            "gold_sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT band.firstname FROM performance JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY band.firstname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the first names of band members who have performed songs, grouped by their first names and ordered by the count of performances. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the first name of the band mate who perfomed in the most songs?"
        },
        {
            "sample_id": 5186,
            "gold_sql": "SELECT count(DISTINCT label) FROM albums",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT label) FROM albums",
            "ba": "The virtual table counts the distinct record labels from the 'albums' table. The placeholder in the SELECT statement indicates that the result will show the number of unique labels associated with the albums.",
            "question": "What are the unique labels for the albums?"
        },
        {
            "sample_id": 5238,
            "gold_sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT instrument) FROM instruments JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"badlands\"",
            "ba": "The virtual table counts the distinct types of instruments used in the songs from the 'instruments' table that are associated with a specific song title from the 'songs' table. The placeholder in the WHERE clause represents the title of the song being queried.",
            "question": "How many different instruments are used in the song \"Badlands\"?"
        },
        {
            "sample_id": 5198,
            "gold_sql": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
            "gold_complexity": 10,
            "vt": "SELECT instruments.instrument FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE band.lastname = None.\"heilo\" AND songs.title = None.\"le pop\"",
            "ba": "The virtual table retrieves the types of instruments played by band members during performances of a specific song. It joins multiple tables to connect band members, their performances, and the songs they perform. The placeholders in the WHERE clause represent the last name of the band member and the title of the song.",
            "question": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?"
        },
        {
            "sample_id": 5207,
            "gold_sql": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT instrument) FROM instruments JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE band.lastname = None.\"heilo\"",
            "ba": "The virtual table counts the distinct types of instruments played by band members from the 'instruments' table, specifically filtering for those members whose last name is 'heilo'.",
            "question": "How many instrument does the musician with last name \"Heilo\" use?"
        },
        {
            "sample_id": 5228,
            "gold_sql": "SELECT DISTINCT TYPE FROM vocals",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT vocals.type FROM vocals",
            "ba": "The virtual table retrieves distinct types of vocals from the 'vocals' table, which includes information about the band members providing vocals for various songs.",
            "question": "What are the different types of vocals?"
        },
        {
            "sample_id": 5167,
            "gold_sql": "SELECT DISTINCT label FROM Albums",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT albums.label FROM albums",
            "ba": "The virtual table retrieves distinct record labels from the 'albums' table. This allows users to see all unique labels associated with the albums without duplicates.",
            "question": "What are all the labels?"
        },
        {
            "sample_id": 5194,
            "gold_sql": "SELECT title FROM songs WHERE title LIKE '% the %'",
            "gold_complexity": 6,
            "vt": "SELECT songs.title FROM songs WHERE songs.title LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the titles of songs from the 'songs' table that match a specific pattern. The placeholder in the WHERE clause represents the search criteria for the song title.",
            "question": "What are the names of the songs whose title has the word \"the\"?"
        },
        {
            "sample_id": 5192,
            "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id WHERE performance.stageposition = None.\"back\" GROUP BY band.lastname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the last names of band members who performed in a specific stage position, filtering for those in the 'back' position. The results are grouped by last name and ordered by the count of performances, with a limit on the number of results returned.",
            "question": "What is the last name of the musicians who has played back position the most?"
        },
        {
            "sample_id": 5211,
            "gold_sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT songs.title FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY vocals.songid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the titles of songs from the 'songs' table that feature vocals. It joins the 'vocals' table to associate each song with its corresponding vocal contributions. The results are grouped by song identifier to ensure each song title appears only once, and they are ordered by the count of vocal contributions, allowing for the selection of the top songs based on the number of vocalists involved. The placeholder in the LIMIT clause represents the maximum number of song titles to return.",
            "question": "Which song has the most vocals?"
        },
        {
            "sample_id": 5242,
            "gold_sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid WHERE songs.title = None.\"le pop\"",
            "ba": "The virtual table counts the number of vocal contributions for a specific song title from the 'vocals' and 'songs' tables. The placeholder in the WHERE clause represents the title of the song being queried.",
            "question": "How many vocal types are used in the song \"Le Pop\"?"
        },
        {
            "sample_id": 5251,
            "gold_sql": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT band.firstname FROM performance JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY band.firstname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the first names of band members who have performed songs, grouped by their first names and ordered by the count of performances. The placeholder in the LIMIT clause allows for specifying the maximum number of band members to display.",
            "question": "Find the first name of the band mate that has performed in most songs."
        },
        {
            "sample_id": 5222,
            "gold_sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT title) FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid WHERE vocals.type = None.\"lead\"",
            "ba": "The virtual table counts the distinct titles of songs that feature lead vocals. It joins the 'vocals' table with the 'songs' table to filter for songs where the type of vocals is specified as lead.",
            "question": "How many songs have vocals of type lead?"
        },
        {
            "sample_id": 5189,
            "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY band.lastname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the last names of band members who have performed songs, grouped by their last names. The results are ordered by the count of performances, allowing users to see which band members have performed the most. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the last name of the musician that have produced the most number of songs?"
        },
        {
            "sample_id": 5172,
            "gold_sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT performance.stageposition FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id WHERE band.firstname = None.\"solveig\"",
            "ba": "The virtual table retrieves distinct stage positions of band members from the 'performance' table who are associated with a specific band member's first name. The query joins the 'performance' table with the 'band' table to filter results based on the first name of the band member.",
            "question": "What are the different stage positions for all musicians whose first name is \"Solveig\"?"
        },
        {
            "sample_id": 5233,
            "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY band.lastname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the last names of band members who have performed songs, grouped by their last names and ordered by the count of performances. The placeholder in the LIMIT clause allows for specifying the maximum number of last names to return.",
            "question": "What is the last name of the musician that have produced the most songs?"
        },
        {
            "sample_id": 5168,
            "gold_sql": "SELECT DISTINCT label FROM Albums",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT albums.label FROM albums",
            "ba": "The virtual table retrieves distinct record labels from the 'albums' table. The placeholder indicates that the user can specify any additional conditions if needed.",
            "question": "What are the different album labels listed?"
        },
        {
            "sample_id": 5195,
            "gold_sql": "SELECT DISTINCT instrument FROM Instruments",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT instruments.instrument FROM instruments",
            "ba": "The virtual table lists all unique instruments played by band members from the 'instruments' table. The query uses the DISTINCT keyword to ensure that each instrument is only listed once, regardless of how many times it appears in the table.",
            "question": "What are all the instruments used?"
        },
        {
            "sample_id": 5178,
            "gold_sql": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM performance JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE songs.title = None.\"flash\"",
            "ba": "The virtual table counts the number of performances of a specific song by joining the 'performance' table with the 'band' and 'songs' tables. It filters the results based on the title of the song, which is represented by a placeholder.",
            "question": "How many musicians play in the song \"Flash\"?"
        },
        {
            "sample_id": 5190,
            "gold_sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY band.lastname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the last names of band members who have performed songs, grouped by their last names and ordered by the count of performances. The placeholder in the LIMIT clause allows for specifying the maximum number of last names to return.",
            "question": "What is the last name of the musician who was in the most songs?"
        },
        {
            "sample_id": 5221,
            "gold_sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT title) FROM vocals JOIN songs AS T2 ON T1.songid = T2.songid WHERE vocals.type = None.\"lead\"",
            "ba": "The virtual table counts the distinct titles of songs that feature lead vocals. It joins the 'vocals' table with the 'songs' table to filter for songs where the type of vocals is specified as lead.",
            "question": "How many songs have a lead vocal?"
        },
        {
            "sample_id": 5229,
            "gold_sql": "SELECT * FROM Albums WHERE YEAR  =  2010",
            "gold_complexity": 6,
            "vt": "SELECT * FROM albums WHERE albums.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all details of albums from the 'albums' table that were released in a specific year. The placeholder in the WHERE clause represents the year of release.",
            "question": "What are the albums produced in year 2010?"
        },
        {
            "sample_id": 5183,
            "gold_sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
            "gold_complexity": 11,
            "vt": "SELECT band.firstname, band.lastname FROM performance JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE songs.title = None.\"badlands\" AND performance.stageposition = None.\"back\"",
            "ba": "The virtual table describes the first and last names of band members who performed a specific song in a particular stage position. The placeholders in the WHERE clause represent the song title and the stage position.",
            "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name."
        },
        {
            "sample_id": 5170,
            "gold_sql": "SELECT * FROM Albums WHERE YEAR  =  2012",
            "gold_complexity": 6,
            "vt": "SELECT * FROM albums WHERE albums.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all details of albums from the 'albums' table that were released in a specific year. The placeholder in the WHERE clause represents the year of release.",
            "question": "return all columns of the albums created in the year of 2012."
        }
    ],
    "party_host": [
        {
            "sample_id": 2668,
            "gold_sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT host.nationality FROM host GROUP BY host.nationality ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the nationalities of hosts from the 'host' table, grouping them to count how many hosts belong to each nationality. The results are ordered by the count of hosts in descending order, and a limit is applied to restrict the number of nationalities returned based on a specified numeric value.",
            "question": "Which nationality has the most hosts?"
        },
        {
            "sample_id": 2680,
            "gold_sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT host.name, host.nationality FROM host ORDER BY host.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and nationalities of hosts from the 'host' table, ordered by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "What are the name and the nationality of the host of the highest age?"
        },
        {
            "sample_id": 2655,
            "gold_sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
            "gold_complexity": 6,
            "vt": "SELECT party.party_theme FROM party ORDER BY party.number_of_hosts",
            "ba": "The virtual table lists the themes of parties from the 'party' table, ordered by the total number of hosts involved in each party.",
            "question": "List the themes of parties in ascending order of number of hosts."
        },
        {
            "sample_id": 2674,
            "gold_sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
            "gold_complexity": 10,
            "vt": "SELECT party.location, host.name FROM party_host JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY host.age",
            "ba": "The virtual table describes the locations of parties along with the names of hosts who are associated with those parties. It combines data from the 'party', 'host', and 'party_host' tables, linking them through their respective identifiers. The results are ordered by the age of the hosts.",
            "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host."
        },
        {
            "sample_id": 2658,
            "gold_sql": "SELECT Party_Theme ,  LOCATION FROM party",
            "gold_complexity": 6,
            "vt": "SELECT party.party_theme, party.location FROM party",
            "ba": "The virtual table describes the themes and locations of parties from the 'party' table. The query selects the 'party_theme' and 'location' columns, providing insights into the various themes and venues of the parties organized.",
            "question": "Give me the theme and location of each party."
        },
        {
            "sample_id": 2682,
            "gold_sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
            "gold_complexity": 10,
            "vt": "SELECT host.name FROM host WHERE NOT host.host_id IN (SELECT host.host_id FROM party_host)",
            "ba": "The virtual table lists the names of hosts from the 'host' table who are not associated with any party in the 'party_host' table. The query uses a subquery to filter out hosts that are linked to any party.",
            "question": "What are the names of hosts who did not host any party in our record?"
        },
        {
            "sample_id": 2659,
            "gold_sql": "SELECT First_year ,  Last_year FROM party WHERE Party_Theme  =  \"Spring\" OR Party_Theme  =  \"Teqnology\"",
            "gold_complexity": 9,
            "vt": "SELECT party.first_year, party.last_year FROM party WHERE party.party_theme = None.\"spring\" OR party.party_theme = None.\"teqnology\"",
            "ba": "The virtual table describes the first and last years of parties from the 'party' table that have a specific theme. The placeholders in the WHERE clause represent the themes of the parties, allowing for filtering based on either 'spring' or 'technology'.",
            "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\"."
        },
        {
            "sample_id": 2669,
            "gold_sql": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
            "gold_complexity": 9,
            "vt": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
            "ba": "The virtual table identifies the nationalities of hosts from the 'host' table who are either older than 45 years or younger than 35 years. The use of INTERSECT ensures that only those nationalities that meet both age criteria are returned.",
            "question": "Show the nations that have both hosts older than 45 and hosts younger than 35."
        },
        {
            "sample_id": 2671,
            "gold_sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
            "gold_complexity": 8,
            "vt": "SELECT party.party_theme, host.name FROM party_host JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
            "ba": "The virtual table describes the themes of parties along with the names of the hosts associated with those parties. It combines data from the 'party', 'host', and 'party_host' tables, linking them through their respective identifiers. The placeholders in the query represent the relationships between hosts and parties, allowing for a dynamic retrieval of information based on specific criteria.",
            "question": "Show the themes of parties and the names of the party hosts."
        },
        {
            "sample_id": 2653,
            "gold_sql": "SELECT count(*) FROM party",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM party",
            "ba": "The virtual table provides a count of all parties recorded in the 'party' table.",
            "question": "How many parties are there?"
        },
        {
            "sample_id": 2679,
            "gold_sql": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT host.name, host.nationality FROM host ORDER BY host.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and nationalities of hosts from the 'host' table, ordered by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "Show the name and the nationality of the oldest host."
        },
        {
            "sample_id": 2663,
            "gold_sql": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT party.location FROM party ORDER BY party.number_of_hosts LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the locations of parties from the 'party' table, ordered by the number of hosts involved in each party. The query limits the results to a specified number of entries using a placeholder for numeric values.",
            "question": "What is the location of the party with the most hosts?"
        },
        {
            "sample_id": 2676,
            "gold_sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
            "gold_complexity": 8,
            "vt": "SELECT party.location FROM party_host JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE host.age > [placeholder-type:numeric]",
            "ba": "The virtual table describes the locations of parties from the 'party' table that are associated with hosts from the 'host' table, where the age of the hosts exceeds a specified value. The query utilizes joins to connect the 'party_host', 'host', and 'party' tables based on their respective identifiers, and includes a condition to filter hosts by age.",
            "question": "Which parties have hosts of age above 50? Give me the party locations."
        },
        {
            "sample_id": 2672,
            "gold_sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
            "gold_complexity": 8,
            "vt": "SELECT party.party_theme, host.name FROM party_host JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
            "ba": "The virtual table describes the themes of parties along with the names of the hosts associated with those parties. It combines data from the 'party', 'host', and 'party_host' tables, linking them through their respective identifiers. The placeholders in the query represent the relationships between hosts and parties, allowing for dynamic querying based on specific criteria.",
            "question": "For each party, return its theme and the name of its host."
        },
        {
            "sample_id": 2667,
            "gold_sql": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT host.nationality FROM host GROUP BY host.nationality ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the nationalities of hosts from the 'host' table, grouping them to count how many hosts belong to each nationality. The results are ordered by the count of hosts in descending order, and a limit is applied to restrict the number of nationalities returned based on a specified numeric value.",
            "question": "Show the most common nationality of hosts."
        },
        {
            "sample_id": 2657,
            "gold_sql": "SELECT Party_Theme ,  LOCATION FROM party",
            "gold_complexity": 6,
            "vt": "SELECT party.party_theme, party.location FROM party",
            "ba": "The virtual table describes the themes and locations of parties from the 'party' table. The query selects the 'party_theme' and 'location' columns, providing insights into the various themes and venues of the parties organized.",
            "question": "What are the themes and locations of parties?"
        },
        {
            "sample_id": 2665,
            "gold_sql": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",
            "gold_complexity": 8,
            "vt": "SELECT host.nationality, COUNT(*) FROM host GROUP BY host.nationality",
            "ba": "The virtual table summarizes the nationalities of hosts from the 'host' table, counting how many hosts belong to each nationality. The result is grouped by the nationality of the hosts, allowing for an overview of the diversity among hosts.",
            "question": "Show different nationalities along with the number of hosts of each nationality."
        },
        {
            "sample_id": 2654,
            "gold_sql": "SELECT count(*) FROM party",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM party",
            "ba": "The virtual table provides a count of all parties recorded in the 'party' table. This count gives an overview of the total number of unique parties organized, without specifying any particular details about them.",
            "question": "Count the number of parties."
        }
    ],
    "store_1": [
        {
            "sample_id": 584,
            "gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
            "gold_complexity": 7,
            "vt": "SELECT albums.title FROM artists JOIN albums AS T2 ON T1.id = T2.artist_id WHERE artists.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table lists the titles of albums from the 'albums' table that are associated with a specific artist. The query joins the 'artists' table to filter albums based on the artist's name, which is represented by a placeholder for string values.",
            "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?"
        },
        {
            "sample_id": 551,
            "gold_sql": "SELECT title FROM albums;",
            "gold_complexity": 4,
            "vt": "SELECT albums.title FROM albums",
            "ba": "The virtual table lists the titles of albums from the 'albums' table.",
            "question": "List every album's title."
        },
        {
            "sample_id": 600,
            "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT employees.first_name, employees.last_name FROM employees ORDER BY employees.birth_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of employees from the 'employees' table, ordered by their birth date. The placeholder in the LIMIT clause represents the maximum number of employee records to return.",
            "question": "What si the youngest employee's first and last name?"
        },
        {
            "sample_id": 592,
            "gold_sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
            "gold_complexity": 7,
            "vt": "SELECT employees.address FROM employees WHERE employees.first_name = None.\"nancy\" AND employees.last_name = None.\"edwards\"",
            "ba": "The virtual table describes the address of an employee from the 'employees' table based on their first and last name. The placeholders in the WHERE clause represent the specific first and last names of the employee being queried.",
            "question": "What is Nancy Edwards's address?"
        },
        {
            "sample_id": 601,
            "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
            "gold_complexity": 9,
            "vt": "SELECT employees.first_name, employees.last_name FROM employees ORDER BY employees.hire_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of employees from the 'employees' table, ordered by their hire date. The placeholder in the LIMIT clause represents the maximum number of employee records to return.",
            "question": "List top 10 employee work longest in the company. List employee's first and last name."
        },
        {
            "sample_id": 599,
            "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT employees.first_name, employees.last_name FROM employees ORDER BY employees.birth_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of employees from the 'employees' table, ordered by their birth date. The placeholder in the LIMIT clause represents the maximum number of employee records to return.",
            "question": "Who is the youngest employee in the company? List employee's first and last name."
        },
        {
            "sample_id": 570,
            "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
            "gold_complexity": 7,
            "vt": "SELECT albums.title FROM albums JOIN artists AS T2 ON T1.artist_id = T2.id WHERE artists.name = None.\"aerosmith\"",
            "ba": "The virtual table lists the titles of albums from the 'albums' table that are associated with a specific artist. The query joins the 'albums' table with the 'artists' table to filter the results based on the artist's name.",
            "question": "What are the titles of all the Aerosmith albums?"
        },
        {
            "sample_id": 638,
            "gold_sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
            "gold_complexity": 9,
            "vt": "SELECT playlists.name FROM playlist_tracks JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY playlist_tracks.playlist_id HAVING COUNT(playlist_tracks.track_id) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of playlists that contain more than a specified number of tracks. It retrieves data from the 'playlists' table and joins it with the 'playlist_tracks' table to count the number of tracks associated with each playlist. The result is filtered to include only those playlists that have a track count exceeding a given threshold.",
            "question": "What are the names of all playlists that have more than 100 tracks?"
        },
        {
            "sample_id": 606,
            "gold_sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
            "gold_complexity": 14,
            "vt": "SELECT employees.first_name, employees.last_name, COUNT(employees.reports_to) FROM employees JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY employees.reports_to ORDER BY COUNT(employees.reports_to) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the first and last names of employees along with the count of their direct reports. It joins the 'employees' table with itself to relate each employee to their manager, grouping the results by the manager's identifier. The results are ordered by the number of reports, allowing for a limit on the number of records returned.",
            "question": "What are the first and last names of all the employees and how many people report to them?"
        },
        {
            "sample_id": 596,
            "gold_sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM employees WHERE employees.country = None.\"canada\"",
            "ba": "The virtual table counts the number of employees from the 'employees' table who reside in a specific country. The placeholder in the WHERE clause represents the country name.",
            "question": "How many employees live in Canada?"
        },
        {
            "sample_id": 562,
            "gold_sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM invoices WHERE invoices.billing_city = None.\"chicago\" AND invoices.billing_state = None.\"il\"",
            "ba": "The virtual table counts the total number of invoices issued to customers with a billing address located in a specific city and state. The placeholders in the WHERE clause represent the billing city and state values that can be modified by the user.",
            "question": "How many invoices were billed from Chicago, IL?"
        },
        {
            "sample_id": 568,
            "gold_sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
            "gold_complexity": 10,
            "vt": "SELECT invoices.billing_state, COUNT(*), SUM(invoices.total) FROM invoices WHERE invoices.billing_state = None.\"ca\"",
            "ba": "The virtual table summarizes the total number of invoices and the total amount billed for invoices issued in a specific billing state. The placeholder in the WHERE clause represents the billing state being queried.",
            "question": "What is the number of invoices and total money billed in them from CA?"
        },
        {
            "sample_id": 627,
            "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
            "gold_complexity": 9,
            "vt": "SELECT albums.title FROM albums JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY albums.id HAVING COUNT(albums.id) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The query joins the 'albums' table with the 'tracks' table to count the number of tracks for each album, and only includes those albums that exceed the given track count.",
            "question": "List title of albums have the number of tracks greater than 10."
        },
        {
            "sample_id": 586,
            "gold_sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM employees JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE employees.first_name = None.\"steve\" AND employees.last_name = None.\"johnson\"",
            "ba": "The virtual table counts the number of employees who are support representatives for customers, specifically filtering for an employee with the first name 'steve' and last name 'johnson'.",
            "question": "What is the count of customers that Steve Johnson supports?"
        },
        {
            "sample_id": 647,
            "gold_sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), genres.name FROM genres JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY genres.name",
            "ba": "The virtual table provides a count of tracks grouped by their respective genres from the 'genres' table. It joins the 'genres' table with the 'tracks' table to associate each track with its genre, allowing for the aggregation of track counts per genre.",
            "question": "Find number of tracks in each genre?"
        },
        {
            "sample_id": 617,
            "gold_sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
            "gold_complexity": 6,
            "vt": "SELECT tracks.composer FROM tracks WHERE tracks.name = None.\"fast as a shark\"",
            "ba": "The virtual table describes the composer of a specific track from the 'tracks' table. The placeholder in the WHERE clause represents the name of the track being queried.",
            "question": "Who is the composer of track Fast As a Shark?"
        },
        {
            "sample_id": 539,
            "gold_sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
            "gold_complexity": 11,
            "vt": "SELECT invoices.billing_country, SUM(invoices.total) FROM invoices GROUP BY invoices.billing_country ORDER BY SUM(invoices.total) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to display based on their total invoice amounts.",
            "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size."
        },
        {
            "sample_id": 557,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
            "gold_complexity": 10,
            "vt": "SELECT customers.first_name, customers.last_name FROM customers JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY invoices.total LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers from the 'customers' table who have associated invoices. The query joins the 'customers' table with the 'invoices' table to filter customers based on their invoices, and it orders the results by the total amount of the invoices. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "List the customers first and last name of 10 least expensive invoices."
        },
        {
            "sample_id": 644,
            "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
            "gold_complexity": 9,
            "vt": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
            "ba": "The virtual table lists the names of tracks that are included in the 'Movies' playlist but not in the 'Music' playlist. It utilizes joins between the 'tracks', 'playlist_tracks', and 'playlists' tables to filter the tracks based on their association with the specified playlists.",
            "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?"
        },
        {
            "sample_id": 587,
            "gold_sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
            "gold_complexity": 11,
            "vt": "SELECT employees.title, employees.phone, employees.hire_date FROM employees WHERE employees.first_name = None.\"nancy\" AND employees.last_name = None.\"edwards\"",
            "ba": "The virtual table describes the job title, phone number, and hire date of employees from the 'employees' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the employee being queried.",
            "question": "What is the title, phone and hire date of Nancy Edwards?"
        },
        {
            "sample_id": 634,
            "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
            "gold_complexity": 8,
            "vt": "SELECT tracks.name FROM genres JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE genres.name = None.\"rock\" OR genres.name = None.\"jazz\"",
            "ba": "The virtual table describes the names of tracks from the 'tracks' table that belong to specific genres, namely 'rock' or 'jazz'. The query uses a JOIN operation to connect the 'genres' table with the 'tracks' table based on the genre identifier, filtering the results to include only those tracks that match the specified genre names.",
            "question": "What are the names of the tracks that are Rock or Jazz songs?"
        },
        {
            "sample_id": 569,
            "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
            "gold_complexity": 7,
            "vt": "SELECT albums.title FROM albums JOIN artists AS T2 ON T1.artist_id = T2.id WHERE artists.name = None.\"aerosmith\"",
            "ba": "The virtual table lists the titles of albums from the 'albums' table that are associated with a specific artist. The query joins the 'albums' table with the 'artists' table to filter the results based on the artist's name.",
            "question": "List Aerosmith's albums."
        },
        {
            "sample_id": 604,
            "gold_sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), employees.city FROM employees WHERE employees.title = '[placeholder-type:string]' GROUP BY employees.city",
            "ba": "The virtual table summarizes the number of employees grouped by their city from the 'employees' table, specifically filtering for those with a certain job title. The placeholder in the WHERE clause represents the job title of the employees.",
            "question": "How many employees who are IT staff are from each city?"
        },
        {
            "sample_id": 648,
            "gold_sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), genres.name FROM genres JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY genres.name",
            "ba": "The virtual table provides a count of tracks grouped by their respective genres from the 'genres' and 'tracks' tables. It uses a JOIN operation to associate each track with its genre, allowing for the aggregation of track counts per genre.",
            "question": "How many tracks are in each genre?"
        },
        {
            "sample_id": 542,
            "gold_sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
            "gold_complexity": 11,
            "vt": "SELECT invoices.billing_country, AVG(invoices.total) FROM invoices GROUP BY invoices.billing_country ORDER BY AVG(invoices.total) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the average total amount of invoices grouped by billing country. It provides insights into the average spending of customers in different countries based on their invoices.",
            "question": "What are the names of the countries and average invoice size of the top countries by size?"
        },
        {
            "sample_id": 577,
            "gold_sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM customers WHERE customers.city = None.\"prague\"",
            "ba": "The virtual table counts the number of customers from the 'customers' table who reside in a specific city. The placeholder in the WHERE clause represents the name of the city.",
            "question": "How many customers live in Prague city?"
        },
        {
            "sample_id": 540,
            "gold_sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
            "gold_complexity": 11,
            "vt": "SELECT invoices.billing_country, SUM(invoices.total) FROM invoices GROUP BY invoices.billing_country ORDER BY SUM(invoices.total) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total invoice amounts grouped by billing country from the 'invoices' table. The placeholder in the LIMIT clause represents the maximum number of countries to display based on their total invoice amounts.",
            "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?"
        },
        {
            "sample_id": 581,
            "gold_sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
            "gold_complexity": 7,
            "vt": "SELECT customers.country FROM customers WHERE customers.first_name = None.\"roberto\" AND customers.last_name = None.\"almeida\"",
            "ba": "The virtual table describes the countries of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.",
            "question": "What country does Roberto Almeida live?"
        },
        {
            "sample_id": 611,
            "gold_sql": "SELECT name FROM media_types;",
            "gold_complexity": 4,
            "vt": "SELECT media_types.name FROM media_types",
            "ba": "The virtual table lists the names of different media types from the 'media_types' table.",
            "question": "List all media types."
        },
        {
            "sample_id": 590,
            "gold_sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
            "gold_complexity": 10,
            "vt": "SELECT employees.first_name, employees.last_name FROM employees JOIN employees AS T2 ON T1.id = T2.reports_to WHERE employees.first_name = None.\"nancy\" AND employees.last_name = None.\"edwards\"",
            "ba": "The virtual table describes the first and last names of employees from the 'employees' table who report to a specific manager. The query joins the 'employees' table with itself to establish a relationship between employees and their managers, using placeholders for the first and last names of the employee being queried.",
            "question": "What is the first and last name of the employee who reports to Nancy Edwards?"
        },
        {
            "sample_id": 625,
            "gold_sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
            "gold_complexity": 7,
            "vt": "SELECT tracks.name FROM albums JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE albums.title = None.\"balls to the wall\"",
            "ba": "The virtual table retrieves the names of tracks from the 'tracks' table that belong to albums with a specific title. It uses a join between the 'albums' and 'tracks' tables based on the genre identifier, allowing for the selection of track names associated with a particular album title.",
            "question": "List name of all tracks in Balls to the Wall."
        },
        {
            "sample_id": 556,
            "gold_sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
            "gold_complexity": 8,
            "vt": "SELECT albums.title FROM albums WHERE albums.title LIKE '[placeholder-type:string]' ORDER BY albums.title",
            "ba": "The virtual table lists the titles of albums from the 'albums' table that match a specific pattern. The placeholder in the LIKE clause allows for flexible searching of album titles based on user input.",
            "question": "What are the titles of all albums that start with A in alphabetical order?"
        },
        {
            "sample_id": 558,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
            "gold_complexity": 10,
            "vt": "SELECT customers.first_name, customers.last_name FROM customers JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY invoices.total LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers from the 'customers' table who have associated invoices. The query joins the 'customers' table with the 'invoices' table based on the customer ID, allowing us to filter and order the results by the total amount of the invoices. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What are the first and last names of the customers with the 10 cheapest invoices?"
        },
        {
            "sample_id": 537,
            "gold_sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
            "gold_complexity": 11,
            "vt": "SELECT invoices.billing_country, COUNT(*) FROM invoices GROUP BY invoices.billing_country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total number of invoices issued, grouped by the billing country. It provides a count of invoices for each country, allowing users to see how many invoices were issued in each location. The placeholder in the LIMIT clause allows users to specify the maximum number of countries to display in the results.",
            "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices."
        },
        {
            "sample_id": 544,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
            "gold_complexity": 10,
            "vt": "SELECT customers.first_name, customers.last_name FROM customers JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY invoices.invoice_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers from the 'customers' table who have made purchases, along with the associated invoices. The query joins the 'customers' table with the 'invoices' table based on the customer ID, and it orders the results by the invoice date. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What are the first and last names of the 5 customers who purchased something most recently?"
        },
        {
            "sample_id": 621,
            "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
            "gold_complexity": 7,
            "vt": "SELECT tracks.name FROM genres JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE genres.name = None.\"rock\"",
            "ba": "The virtual table describes the names of tracks from the 'tracks' table that belong to a specific genre, in this case, 'rock'. The query uses a JOIN operation to connect the 'genres' table with the 'tracks' table based on the genre identifier. The placeholder in the WHERE clause represents the genre's name.",
            "question": "What is the name of tracks whose genre is Rock?"
        },
        {
            "sample_id": 646,
            "gold_sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
            "gold_complexity": 9,
            "vt": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
            "ba": "The virtual table lists the names of tracks that are present in both the 'Movies' and 'Music' playlists. It does this by performing an intersection of two queries that select track names from the 'tracks' table, joined with the 'playlist_tracks' and 'playlists' tables to filter by the respective playlist names.",
            "question": "What are the names of all the tracks that are in both the Movies and music playlists?"
        },
        {
            "sample_id": 632,
            "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
            "gold_complexity": 9,
            "vt": "SELECT tracks.name FROM genres JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE genres.name = None.\"rock\" OR media_types.name = None.\"mpeg audio file\"",
            "ba": "The virtual table lists the names of tracks from the 'tracks' table that belong to a specific genre or media type. It joins the 'genres' table to filter tracks by genre and the 'media_types' table to filter by media type. The placeholders in the WHERE clause represent the genre and media type names.",
            "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?"
        },
        {
            "sample_id": 629,
            "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
            "gold_complexity": 9,
            "vt": "SELECT tracks.name FROM genres JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE genres.name = None.\"rock\" AND media_types.name = None.\"mpeg audio file\"",
            "ba": "The virtual table lists the names of tracks from the 'tracks' table that belong to a specific genre and media type. It joins the 'genres' table to filter tracks by genre and the 'media_types' table to filter by media type. The placeholders in the WHERE clause represent the genre and media type names.",
            "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file."
        },
        {
            "sample_id": 538,
            "gold_sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
            "gold_complexity": 11,
            "vt": "SELECT invoices.billing_country, COUNT(*) FROM invoices GROUP BY invoices.billing_country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total number of invoices issued, grouped by the billing country. It provides a count of invoices for each country, allowing users to see how many invoices were generated in each location. The placeholder in the LIMIT clause allows users to specify the maximum number of countries to display in the results.",
            "question": "What are the top 5 countries by number of invoices and how many do they have?"
        },
        {
            "sample_id": 563,
            "gold_sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
            "gold_complexity": 10,
            "vt": "SELECT invoices.billing_state, COUNT(*) FROM invoices WHERE invoices.billing_country = None.\"usa\" GROUP BY invoices.billing_state",
            "ba": "The virtual table summarizes the number of invoices issued in each state within a specific country. It retrieves the billing state from the 'invoices' table and counts the total number of invoices for each state, filtering the results to include only those invoices that belong to a specified country.",
            "question": "List the number of invoices from the US, grouped by state."
        },
        {
            "sample_id": 610,
            "gold_sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
            "gold_complexity": 8,
            "vt": "SELECT SUM(invoices.total) FROM customers JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE customers.first_name = None.\"lucas\" AND customers.last_name = None.\"mancini\"",
            "ba": "The virtual table calculates the total amount of invoices for a specific customer identified by their first and last name. It joins the 'customers' table with the 'invoices' table to aggregate the total invoice amounts associated with that customer.",
            "question": "How much money did Lucas Mancini spend?"
        },
        {
            "sample_id": 603,
            "gold_sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), employees.city FROM employees WHERE employees.title = '[placeholder-type:string]' GROUP BY employees.city",
            "ba": "The virtual table summarizes the number of employees grouped by their city from the 'employees' table, specifically filtering for those with a certain job title. The placeholder in the WHERE clause represents the job title of the employees.",
            "question": "Find the number of employees whose title is IT Staff from each city?"
        },
        {
            "sample_id": 576,
            "gold_sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
            "gold_complexity": 9,
            "vt": "SELECT customers.email, customers.phone FROM customers WHERE customers.first_name = None.\"astrid\" AND customers.last_name = None.\"gruber\"",
            "ba": "The virtual table provides the email addresses and phone numbers of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the customer being queried.",
            "question": "What is the email and phone number of Astrid Gruber the customer?"
        },
        {
            "sample_id": 628,
            "gold_sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
            "gold_complexity": 9,
            "vt": "SELECT albums.title FROM albums JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY albums.id HAVING COUNT(albums.id) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the titles of albums from the 'albums' table that have more than a specified number of tracks associated with them. The query joins the 'albums' table with the 'tracks' table to count the number of tracks for each album, and only includes those albums that exceed the given track count threshold.",
            "question": "What are the names of the albums that have more than 10 tracks?"
        },
        {
            "sample_id": 582,
            "gold_sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
            "gold_complexity": 7,
            "vt": "SELECT customers.country FROM customers WHERE customers.first_name = None.\"roberto\" AND customers.last_name = None.\"almeida\"",
            "ba": "The virtual table retrieves the country of customers from the 'customers' table based on their first and last names. The placeholders represent the specific first and last names of the customer being queried.",
            "question": "In which country does Roberto Almeida?"
        },
        {
            "sample_id": 543,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
            "gold_complexity": 10,
            "vt": "SELECT customers.first_name, customers.last_name FROM customers JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY invoices.invoice_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers from the 'customers' table who have made purchases, as indicated by their associated invoices. The query joins the 'customers' table with the 'invoices' table to filter customers based on their invoice records. The results are ordered by the date of the invoices, and a limit is applied to restrict the number of returned records.",
            "question": "Find out 5 customers who most recently purchased something. List customers' first and last name."
        },
        {
            "sample_id": 574,
            "gold_sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
            "gold_complexity": 7,
            "vt": "SELECT customers.company FROM customers WHERE customers.first_name = None.\"eduardo\" AND customers.last_name = None.\"martins\"",
            "ba": "The virtual table describes the company name of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.",
            "question": "What is the company where Eduardo Martins is a customer?"
        },
        {
            "sample_id": 641,
            "gold_sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
            "gold_complexity": 6,
            "vt": "SELECT tracks.unit_price FROM tracks WHERE tracks.name = None.\"fast as a shark\"",
            "ba": "The virtual table displays the unit price of a specific track from the 'tracks' table. The placeholder in the WHERE clause represents the name of the track being queried.",
            "question": "How much is the track Fast As a Shark?"
        },
        {
            "sample_id": 580,
            "gold_sql": "SELECT count(*) FROM customers WHERE state = \"CA\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM customers WHERE customers.state = None.\"ca\"",
            "ba": "The virtual table counts the number of customers from the 'customers' table who reside in a specific state. The placeholder in the WHERE clause represents the state abbreviation.",
            "question": "How many customers are from California?"
        },
        {
            "sample_id": 546,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
            "gold_complexity": 14,
            "vt": "SELECT customers.first_name, customers.last_name, COUNT(*) FROM customers JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY customers.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers along with the count of their associated invoices. It retrieves data from the 'customers' table and joins it with the 'invoices' table to aggregate the number of invoices per customer. The results are grouped by customer ID and ordered by the count of invoices, with a limit on the number of results returned.",
            "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?"
        },
        {
            "sample_id": 619,
            "gold_sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
            "gold_complexity": 6,
            "vt": "SELECT tracks.milliseconds FROM tracks WHERE tracks.name = None.\"fast as a shark\"",
            "ba": "The virtual table retrieves the duration in milliseconds of a specific track from the 'tracks' table. The placeholder in the WHERE clause represents the name of the track being queried.",
            "question": "How long does track Fast As a Shark has?"
        },
        {
            "sample_id": 631,
            "gold_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
            "gold_complexity": 9,
            "vt": "SELECT tracks.name FROM genres JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE genres.name = None.\"rock\" OR media_types.name = None.\"mpeg audio file\"",
            "ba": "The virtual table lists the names of tracks from the 'tracks' table that belong to a specific genre and media type. It joins the 'genres' table to filter tracks by genre and the 'media_types' table to filter by media type. The placeholders in the WHERE clause represent the genre and media type names.",
            "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file."
        },
        {
            "sample_id": 583,
            "gold_sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
            "gold_complexity": 7,
            "vt": "SELECT albums.title FROM artists JOIN albums AS T2 ON T1.id = T2.artist_id WHERE artists.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table lists the titles of albums from the 'albums' table that are associated with a specific artist. The query joins the 'artists' table with the 'albums' table using the artist's unique identifier to filter the results based on the artist's name, which is represented by a placeholder for string values.",
            "question": "List the name of albums that are released by aritist whose name has 'Led'"
        },
        {
            "sample_id": 554,
            "gold_sql": "SELECT title FROM albums ORDER BY title;",
            "gold_complexity": 6,
            "vt": "SELECT albums.title FROM albums ORDER BY albums.title",
            "ba": "The virtual table lists the titles of all albums from the 'albums' table, sorted in alphabetical order by album title.",
            "question": "What are the titles of all the albums alphabetically ascending?"
        },
        {
            "sample_id": 547,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
            "gold_complexity": 14,
            "vt": "SELECT customers.first_name, customers.last_name, SUM(invoices.total) FROM customers JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY customers.id ORDER BY SUM(invoices.total) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total invoice amounts for each customer, displaying their first and last names along with the total amount spent. It aggregates the total from the invoices table by joining it with the customers table based on the customer ID, grouping the results by customer ID to ensure each customer's total is calculated correctly. The results are ordered by the total amount spent in descending order, and a limit is applied to restrict the number of results returned.",
            "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales."
        },
        {
            "sample_id": 579,
            "gold_sql": "SELECT count(*) FROM customers WHERE state = \"CA\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM customers WHERE customers.state = None.\"ca\"",
            "ba": "The virtual table counts the number of customers from the 'customers' table who reside in a specific state. The placeholder in the WHERE clause represents the state abbreviation.",
            "question": "How many customers in state of CA?"
        },
        {
            "sample_id": 565,
            "gold_sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
            "gold_complexity": 13,
            "vt": "SELECT invoices.billing_state, COUNT(*) FROM invoices WHERE invoices.billing_country = None.\"usa\" GROUP BY invoices.billing_state ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of invoices issued in each state within a specified country. It retrieves the billing state from the 'invoices' table, counts the total number of invoices for each state, and groups the results by state. The results are ordered by the count of invoices, and a limit is applied to restrict the number of returned states.",
            "question": "List the state in the US with the most invoices."
        },
        {
            "sample_id": 608,
            "gold_sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM customers JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE customers.first_name = None.\"lucas\" AND customers.last_name = None.\"mancini\"",
            "ba": "The virtual table counts the number of invoices associated with a specific customer identified by their first and last name from the 'customers' table. It joins the 'customers' table with the 'invoices' table to find the relevant invoices for that customer.",
            "question": "How many orders does Luca Mancini have in his invoices?"
        },
        {
            "sample_id": 571,
            "gold_sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM albums JOIN artists AS T2 ON T1.artist_id = T2.id WHERE artists.name = None.\"billy cobham\"",
            "ba": "The virtual table counts the number of albums associated with a specific artist from the 'albums' table. It joins the 'albums' table with the 'artists' table to filter the results based on the artist's name. The placeholder in the WHERE clause represents the name of the artist.",
            "question": "How many albums does Billy Cobham has?"
        },
        {
            "sample_id": 541,
            "gold_sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
            "gold_complexity": 11,
            "vt": "SELECT invoices.billing_country, AVG(invoices.total) FROM invoices GROUP BY invoices.billing_country ORDER BY AVG(invoices.total) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the average total amount of invoices grouped by billing country. It retrieves the billing country and calculates the average total for each country, ordering the results by the average total amount. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size."
        },
        {
            "sample_id": 602,
            "gold_sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
            "gold_complexity": 9,
            "vt": "SELECT employees.first_name, employees.last_name FROM employees ORDER BY employees.hire_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of employees from the 'employees' table, ordered by their hire date. The placeholder in the LIMIT clause represents the maximum number of employee records to return.",
            "question": "What are the first and last names of the top 10 longest-serving employees?"
        },
        {
            "sample_id": 567,
            "gold_sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
            "gold_complexity": 10,
            "vt": "SELECT invoices.billing_state, COUNT(*), SUM(invoices.total) FROM invoices WHERE invoices.billing_state = None.\"ca\"",
            "ba": "The virtual table summarizes the total number of invoices and the total amount billed for a specific billing state from the 'invoices' table. The placeholder in the WHERE clause represents the billing state being queried.",
            "question": "List the number of invoices and the invoice total from California."
        },
        {
            "sample_id": 550,
            "gold_sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
            "gold_complexity": 12,
            "vt": "SELECT genres.name, COUNT(*) FROM genres JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY genres.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of tracks associated with each genre from the 'genres' table. It joins the 'tracks' table to count how many tracks belong to each genre, grouping the results by genre ID and ordering them by the count of tracks. The placeholder in the LIMIT clause allows for specifying the maximum number of genres to return.",
            "question": "How many tracks does each genre have and what are the names of the top 5?"
        },
        {
            "sample_id": 613,
            "gold_sql": "SELECT DISTINCT name FROM genres;",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT genres.name FROM genres",
            "ba": "The virtual table lists all unique genre names from the 'genres' table.",
            "question": "List all different genre types."
        },
        {
            "sample_id": 594,
            "gold_sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT employees.first_name, employees.last_name FROM employees JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY employees.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of employees who serve as support representatives for customers. It retrieves this information by joining the 'employees' table with the 'customers' table based on the support representative's identifier. The results are grouped by employee ID and ordered by the count of customers they support, limiting the output to a specified number of employees.",
            "question": "What is the full name of the employee who has the most customers?"
        }
    ],
    "film_rank": [
        {
            "sample_id": 4115,
            "gold_sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market",
            "gold_complexity": 5,
            "vt": "SELECT MAX(market.number_cities), MIN(market.number_cities) FROM market",
            "ba": "The virtual table provides the maximum and minimum number of cities from the 'market' table, which represents different markets across various countries.",
            "question": "What are the maximum and minimum number of cities in all markets."
        },
        {
            "sample_id": 4132,
            "gold_sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC",
            "gold_complexity": 9,
            "vt": "SELECT film_market_estimation.year FROM film_market_estimation JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE market.country = None.\"japan\" ORDER BY film_market_estimation.year",
            "ba": "The virtual table retrieves the years of revenue estimations for films in the market located in Japan. It joins the 'film_market_estimation' table with the 'market' table to filter the results based on the country, specifically Japan.",
            "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?"
        },
        {
            "sample_id": 4110,
            "gold_sql": "SELECT avg(Gross_in_dollar) FROM film",
            "gold_complexity": 4,
            "vt": "SELECT AVG(film.gross_in_dollar) FROM film",
            "ba": "The virtual table calculates the average gross revenue of films from the 'film' table. The placeholder represents the specific revenue data being averaged.",
            "question": "Return the average gross sales in dollars across all films."
        },
        {
            "sample_id": 4126,
            "gold_sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT film.director FROM film JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE film_market_estimation.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a distinct list of directors from the 'film' table who have films associated with revenue estimations for a specific year. The query joins the 'film' table with the 'film_market_estimation' table to filter the results based on the year of estimation.",
            "question": "Who are the different directors of films which had market estimation in 1995?"
        },
        {
            "sample_id": 4112,
            "gold_sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
            "gold_complexity": 6,
            "vt": "SELECT film_market_estimation.low_estimate, film_market_estimation.high_estimate FROM film_market_estimation",
            "ba": "The virtual table provides the lower and upper bounds of revenue estimates for films from the 'film_market_estimation' table. The placeholders represent specific films and markets for which the estimates are made.",
            "question": "Return the low and high estimates for all film markets."
        },
        {
            "sample_id": 4120,
            "gold_sql": "SELECT Country FROM market ORDER BY Country ASC",
            "gold_complexity": 6,
            "vt": "SELECT market.country FROM market ORDER BY market.country",
            "ba": "The virtual table lists the countries from the 'market' table, sorted in ascending order by country name.",
            "question": "What are the countries for each market, ordered alphabetically?"
        },
        {
            "sample_id": 4109,
            "gold_sql": "SELECT avg(Gross_in_dollar) FROM film",
            "gold_complexity": 4,
            "vt": "SELECT AVG(film.gross_in_dollar) FROM film",
            "ba": "The virtual table calculates the average gross revenue of films from the 'film' table. The placeholder in the SELECT clause represents the average gross revenue in dollars.",
            "question": "What is the average ticket sales gross in dollars of films?"
        },
        {
            "sample_id": 4119,
            "gold_sql": "SELECT Country FROM market ORDER BY Country ASC",
            "gold_complexity": 6,
            "vt": "SELECT market.country FROM market ORDER BY market.country",
            "ba": "The virtual table lists the countries from the 'market' table, sorted in ascending order by country name.",
            "question": "List all countries of markets in ascending alphabetical order."
        },
        {
            "sample_id": 4146,
            "gold_sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
            "gold_complexity": 7,
            "vt": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
            "ba": "The virtual table lists the studios that produced films, excluding those directed by Walter Hill. It uses a subquery to filter out studios associated with films directed by this specific director.",
            "question": "Which studios have never worked with the director Walter Hill?"
        },
        {
            "sample_id": 4130,
            "gold_sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
            "gold_complexity": 7,
            "vt": "SELECT market.country, film_market_estimation.year FROM film_market_estimation JOIN market AS T2 ON T1.Market_ID = T2.Market_ID",
            "ba": "The virtual table provides information about the countries associated with film market estimations and the corresponding years for those estimations. It combines data from the 'film_market_estimation' table and the 'market' table using a join on the market identifier.",
            "question": "What are the countries of markets and their corresponding years of market estimation?"
        },
        {
            "sample_id": 4116,
            "gold_sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market",
            "gold_complexity": 5,
            "vt": "SELECT MAX(market.number_cities), MIN(market.number_cities) FROM market",
            "ba": "The virtual table provides the maximum and minimum number of cities from the 'market' table, which represents different markets across various countries.",
            "question": "Return the maximum and minimum number of cities across all markets."
        },
        {
            "sample_id": 4123,
            "gold_sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID",
            "gold_complexity": 7,
            "vt": "SELECT film.title, film_market_estimation.type FROM film JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID",
            "ba": "The virtual table describes the titles of films along with their estimation types from the 'film' and 'film_market_estimation' tables. The join operation links the two tables based on the film identifier, allowing us to retrieve relevant data about each film's revenue estimation type.",
            "question": "Please show the titles of films and the types of market estimations."
        },
        {
            "sample_id": 4141,
            "gold_sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
            "gold_complexity": 8,
            "vt": "SELECT Studio FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
            "ba": "The virtual table identifies the studios that produced films directed by both Nicholas Meyer and Walter Hill. It uses an INTERSECT operation to find common studios from the films directed by these two directors.",
            "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\"."
        },
        {
            "sample_id": 4150,
            "gold_sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT t1.title FROM film JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY film_market_estimation.high_estimate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the titles of films from the 'film' table that are linked to their revenue estimates in the 'film_market_estimation' table. The results are ordered by the highest revenue estimate, and a limit is applied to control the number of titles returned.",
            "question": "Return the title of the film with the highest high estimate?"
        },
        {
            "sample_id": 4128,
            "gold_sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
            "gold_complexity": 7,
            "vt": "SELECT AVG(market.number_cities) FROM film_market_estimation JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE film_market_estimation.low_estimate > [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average number of cities in markets associated with films that have a low revenue estimate exceeding a specified value. It joins the 'film_market_estimation' table with the 'market' table to access the number of cities for each market linked to the films.",
            "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?"
        },
        {
            "sample_id": 4106,
            "gold_sql": "SELECT count(*) FROM film",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM film",
            "ba": "The virtual table counts the total number of films in the 'film' table.",
            "question": "Count the number of films."
        },
        {
            "sample_id": 4143,
            "gold_sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
            "gold_complexity": 8,
            "vt": "SELECT film.title, film.studio FROM film WHERE film.studio LIKE None.\"%universal%\"",
            "ba": "The virtual table describes the titles and studios of films from the 'film' table that are produced by a specific studio. The placeholder in the WHERE clause represents the studio's name, allowing for a search of films produced by studios that match the specified pattern.",
            "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\"."
        },
        {
            "sample_id": 4108,
            "gold_sql": "SELECT DISTINCT Director FROM film",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT film.director FROM film",
            "ba": "The virtual table lists the unique directors of films from the 'film' table.",
            "question": "What are the different film Directors?"
        },
        {
            "sample_id": 4127,
            "gold_sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
            "gold_complexity": 7,
            "vt": "SELECT AVG(market.number_cities) FROM film_market_estimation JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE film_market_estimation.low_estimate > [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average number of cities in markets associated with films that have a low revenue estimate exceeding a specified value. It joins the 'film_market_estimation' table with the 'market' table to access the number of cities for each market linked to the films.",
            "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?"
        },
        {
            "sample_id": 4135,
            "gold_sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT film.studio FROM film GROUP BY film.studio ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the studios that produced films, grouped by studio name, and ordered by the number of films produced by each studio. The placeholder in the LIMIT clause represents the maximum number of studios to return.",
            "question": "List the name of film studio that have the most number of films."
        },
        {
            "sample_id": 4142,
            "gold_sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
            "gold_complexity": 8,
            "vt": "SELECT Studio FROM film WHERE Director = \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
            "ba": "The virtual table identifies the studios that produced films directed by both Nicholas Meyer and Walter Hill. It uses an INTERSECT operation to find common studios from two separate queries, each filtering films by a specific director.",
            "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?"
        },
        {
            "sample_id": 4149,
            "gold_sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT t1.title FROM film JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY film_market_estimation.high_estimate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the titles of films from the 'film' table that are linked to their market estimations in the 'film_market_estimation' table. The results are ordered by the high estimate of revenue, and a limit is applied to restrict the number of titles returned.",
            "question": "What is the title of the film that has the highest high market estimation."
        },
        {
            "sample_id": 4122,
            "gold_sql": "SELECT Country FROM market ORDER BY Number_cities DESC",
            "gold_complexity": 6,
            "vt": "SELECT market.country FROM market ORDER BY market.number_cities",
            "ba": "The virtual table lists the countries from the 'market' table, ordered by the total number of cities in each market. This allows users to see which countries have the most cities in their respective markets.",
            "question": "What are the countries for each market ordered by decreasing number of cities?"
        },
        {
            "sample_id": 4145,
            "gold_sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
            "gold_complexity": 7,
            "vt": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = \"Walter Hill\"",
            "ba": "The virtual table lists the studios that produced films, excluding those directed by Walter Hill. It uses the EXCEPT clause to filter out studios associated with films directed by this specific director.",
            "question": "Show the studios that have not produced films with director \"Walter Hill\"."
        },
        {
            "sample_id": 4118,
            "gold_sql": "SELECT count(*) FROM market WHERE Number_cities  <  300",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM market WHERE market.number_cities < [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of markets from the 'market' table that have fewer cities than a specified number. The placeholder in the WHERE clause represents the maximum number of cities allowed for the markets being counted.",
            "question": "Count the number of markets that have a number of cities lower than 300."
        },
        {
            "sample_id": 4139,
            "gold_sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
            "gold_complexity": 10,
            "vt": "SELECT film.title FROM film WHERE NOT film.film_id IN (SELECT film.film_id FROM film_market_estimation)",
            "ba": "The virtual table lists the titles of films from the 'film' table that do not have any associated estimation records in the 'film_market_estimation' table. This means it identifies films that have not been estimated for revenue in any market.",
            "question": "List the title of films that do not have any market estimation."
        },
        {
            "sample_id": 4121,
            "gold_sql": "SELECT Country FROM market ORDER BY Number_cities DESC",
            "gold_complexity": 6,
            "vt": "SELECT market.country FROM market ORDER BY market.number_cities",
            "ba": "The virtual table lists the countries from the 'market' table, ordered by the total number of cities in each market. This allows users to see which countries have the most cities in their respective markets.",
            "question": "List all countries of markets in descending order of number of cities."
        },
        {
            "sample_id": 4147,
            "gold_sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
            "gold_complexity": 8,
            "vt": "SELECT film.studio FROM film GROUP BY film.studio HAVING AVG(film.gross_in_dollar) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the studios that have an average gross revenue equal to or greater than a specified amount. It aggregates the films by their studio and filters the results based on the average gross revenue using a numeric placeholder.",
            "question": "List the studios which average gross is above 4500000."
        }
    ],
    "manufacturer": [
        {
            "sample_id": 3395,
            "gold_sql": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID",
            "gold_complexity": 7,
            "vt": "SELECT furniture.name, furniture_manufacte.price_in_dollar FROM furniture JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID",
            "ba": "The virtual table describes the names of furniture items along with their selling prices in US dollars. It retrieves data from the 'furniture' table and the 'furniture_manufacte' table, linking them through their respective identifiers. The placeholder in the SELECT statement allows for dynamic querying of specific furniture names and their corresponding prices.",
            "question": "Give me the names and prices of furnitures which some companies are manufacturing."
        },
        {
            "sample_id": 3390,
            "gold_sql": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",
            "gold_complexity": 8,
            "vt": "SELECT manufacturer.name, manufacturer.manufacturer_id FROM manufacturer ORDER BY manufacturer.open_year",
            "ba": "The virtual table lists the names and unique identifiers of manufacturers from the 'manufacturer' table, ordered by the year they were established.",
            "question": "List all manufacturer names and ids ordered by their opening year."
        },
        {
            "sample_id": 3387,
            "gold_sql": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
            "gold_complexity": 11,
            "vt": "SELECT furniture.name FROM furniture JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE furniture_manufacte.price_in_dollar < (SELECT MAX(furniture_manufacte.price_in_dollar) FROM furniture_manufacte)",
            "ba": "The virtual table describes the names of furniture items from the 'furniture' table that are priced below the maximum selling price found in the 'furniture_manufacte' table. The query uses a JOIN to connect the 'furniture' and 'furniture_manufacte' tables based on their furniture IDs, ensuring that only relevant furniture items are considered based on their selling prices.",
            "question": "Find the names of furnitures whose prices are lower than the highest price."
        },
        {
            "sample_id": 3394,
            "gold_sql": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), manufacturer.name FROM manufacturer JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY manufacturer.manufacturer_id",
            "ba": "The virtual table summarizes the total number of furniture items produced by each manufacturer. It retrieves the count of furniture items and the corresponding manufacturer names from the 'manufacturer' table, joining it with the 'furniture_manufacte' table to link manufacturers with their furniture. The results are grouped by the manufacturer to provide a count for each one.",
            "question": "Find the number of funiture types produced by each manufacturer as well as the company names."
        },
        {
            "sample_id": 3386,
            "gold_sql": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT furniture.name, furniture.num_of_component FROM furniture ORDER BY furniture.market_rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and number of components of furniture items from the 'furniture' table, ordered by their market rate. The placeholder in the LIMIT clause represents the maximum number of furniture items to be displayed.",
            "question": "Find the name and component amount of the least popular furniture."
        },
        {
            "sample_id": 3383,
            "gold_sql": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT furniture.name, furniture.furniture_id FROM furniture ORDER BY furniture.market_rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and unique identifiers of furniture items from the 'furniture' table, ordered by their current market price. The placeholder in the LIMIT clause allows the user to specify the maximum number of furniture items to retrieve.",
            "question": "Return the name and id of the furniture with the highest market rate."
        },
        {
            "sample_id": 3391,
            "gold_sql": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10",
            "gold_complexity": 10,
            "vt": "SELECT manufacturer.name, manufacturer.open_year FROM manufacturer WHERE manufacturer.num_of_shops > [placeholder-type:numeric] OR manufacturer.num_of_factories < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and establishment years of manufacturers from the 'manufacturer' table who either operate more than a specified number of shops or own fewer than a specified number of factories. The placeholders in the WHERE clause represent the numeric values for the number of shops and factories.",
            "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops."
        },
        {
            "sample_id": 3388,
            "gold_sql": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT manufacturer.open_year, manufacturer.name FROM manufacturer ORDER BY manufacturer.num_of_shops LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the open year and name of manufacturers from the 'manufacturer' table, ordered by the number of shops they operate. The placeholder in the LIMIT clause represents the maximum number of manufacturers to be displayed.",
            "question": "Which manufacturer has the most number of shops? List its name and year of opening."
        },
        {
            "sample_id": 3397,
            "gold_sql": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10",
            "gold_complexity": 11,
            "vt": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10",
            "ba": "The virtual table lists the names of furniture items from the 'furniture' table that have a number of components either less than 6 or greater than 10, by joining with the 'furniture_manufacte' and 'manufacturer' tables to filter based on the manufacturer details.",
            "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components."
        }
    ],
    "election": [
        {
            "sample_id": 2733,
            "gold_sql": "SELECT max(Population) ,  min(Population) FROM county",
            "gold_complexity": 5,
            "vt": "SELECT MAX(county.population), MIN(county.population) FROM county",
            "ba": "The virtual table provides the maximum and minimum population values from the 'county' table, which contains information about various counties including their populations.",
            "question": "Return the maximum and minimum population among all counties."
        },
        {
            "sample_id": 2767,
            "gold_sql": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
            "gold_complexity": 9,
            "vt": "SELECT county.county_name, COUNT(*) FROM county JOIN election AS T2 ON T1.County_id = T2.District GROUP BY county.county_id",
            "ba": "The virtual table provides a summary of the total number of elections held in each county, displaying the county names alongside their respective election counts. The query joins the 'county' table with the 'election' table based on the county's unique identifier and the electoral district, grouping the results by county to aggregate the election counts.",
            "question": "Show the name of each county along with the corresponding number of delegates from that county."
        },
        {
            "sample_id": 2794,
            "gold_sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\"",
            "ba": "The virtual table identifies the committees that are associated with elections where both the Democratic and Liberal parties participated. It uses an INTERSECT operation to find common committees from two separate queries, each filtering for a specific party.",
            "question": "Find the committees that have delegates both from from the democratic party and the liberal party."
        },
        {
            "sample_id": 2759,
            "gold_sql": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
            "gold_complexity": 7,
            "vt": "SELECT election.delegate, party.party FROM election JOIN party AS T2 ON T1.Party = T2.Party_ID",
            "ba": "The virtual table describes the delegates and their associated political parties from the 'election' and 'party' tables. The query joins these two tables based on the party identifier, allowing us to see which delegate represents which political party in the election.",
            "question": "Show the delegates and the names of the party they belong to."
        },
        {
            "sample_id": 2762,
            "gold_sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
            "gold_complexity": 7,
            "vt": "SELECT party.governor FROM election JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE election.district = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the votes received by the governor candidate from the 'party' table for a specific election district. The query joins the 'election' and 'party' tables based on the party identifier, allowing us to filter results based on the district's unique identifier.",
            "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?"
        },
        {
            "sample_id": 2764,
            "gold_sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
            "gold_complexity": 7,
            "vt": "SELECT party.comptroller FROM election JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE election.district = [placeholder-type:numeric] OR election.district = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the votes received by the comptroller candidate from the 'party' table for elections that are associated with specific districts. The query joins the 'election' and 'party' tables based on the party identifier, and filters the results to include only those elections that correspond to certain districts, represented by placeholders for numeric values.",
            "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?"
        },
        {
            "sample_id": 2741,
            "gold_sql": "SELECT Delegate ,  Committee FROM election",
            "gold_complexity": 6,
            "vt": "SELECT election.delegate, election.committee FROM election",
            "ba": "The virtual table describes the delegates and committees associated with elections from the 'election' table. The query selects the 'delegate' and 'committee' columns, which provide information about the representatives and the overseeing bodies for each election.",
            "question": "Show the delegate and committee information of elections."
        },
        {
            "sample_id": 2750,
            "gold_sql": "SELECT * FROM election",
            "gold_complexity": 4,
            "vt": "SELECT * FROM election",
            "ba": "The virtual table provides a comprehensive view of all elections, including details such as the unique election identifier, the counties represented, the electoral district, the delegate, the associated political party, the year the delegate was first elected, and the overseeing committee.",
            "question": "Return all the information for each election record."
        },
        {
            "sample_id": 2744,
            "gold_sql": "SELECT count(DISTINCT Governor) FROM party",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Governor) FROM party",
            "ba": "The virtual table counts the distinct votes received by the governor candidates from the 'party' table.",
            "question": "Count the number of distinct governors."
        },
        {
            "sample_id": 2791,
            "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
            "gold_complexity": 9,
            "vt": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"",
            "ba": "The virtual table identifies the political parties that are associated with elections overseen by two specific committees: 'Appropriations' and 'Economic Matters'. It uses an INTERSECT operation to find common parties from both committees.",
            "question": "What are the names of parties that have both delegates on \"Appropriations\" committee and"
        },
        {
            "sample_id": 2771,
            "gold_sql": "SELECT County_name FROM county ORDER BY Population ASC",
            "gold_complexity": 6,
            "vt": "SELECT county.county_name FROM county ORDER BY county.population",
            "ba": "The virtual table lists the names of counties from the 'county' table, ordered by their population. This allows users to see which counties have the largest populations at a glance.",
            "question": "Return the names of all counties sorted by population in ascending order."
        },
        {
            "sample_id": 2757,
            "gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"",
            "gold_complexity": 7,
            "vt": "SELECT county.county_name FROM county JOIN election AS T2 ON T1.County_id = T2.District WHERE election.committee = None.\"appropriations\"",
            "ba": "The virtual table describes the names of counties from the 'county' table that are associated with elections overseen by a specific committee. The query joins the 'county' and 'election' tables based on the county's unique identifier and the electoral district, filtering for a particular committee using a placeholder.",
            "question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?"
        },
        {
            "sample_id": 2792,
            "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
            "gold_complexity": 9,
            "vt": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"",
            "ba": "The virtual table identifies the political parties that are associated with elections overseen by two specific committees: 'Appropriations' and 'Economic Matters'. It uses an INTERSECT operation to find common parties from both committees.",
            "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?"
        },
        {
            "sample_id": 2775,
            "gold_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT county.county_name FROM county ORDER BY county.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of counties from the 'county' table, ordered by their population in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of county names to retrieve.",
            "question": "Show the name of the county with the biggest population."
        },
        {
            "sample_id": 2774,
            "gold_sql": "SELECT County_name FROM county ORDER BY County_name DESC",
            "gold_complexity": 6,
            "vt": "SELECT county.county_name FROM county ORDER BY county.county_name",
            "ba": "The virtual table lists the names of all counties from the 'county' table, sorted in alphabetical order. This provides a clear view of the counties available in the database.",
            "question": "Sort the names of all counties in descending alphabetical order."
        },
        {
            "sample_id": 2778,
            "gold_sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT county.county_name FROM county ORDER BY county.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of counties from the 'county' table, ordered by their population in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of county names to retrieve.",
            "question": "What are the 3 counties that have the smallest population? Give me the county names."
        },
        {
            "sample_id": 2732,
            "gold_sql": "SELECT avg(Population) FROM county",
            "gold_complexity": 4,
            "vt": "SELECT AVG(county.population) FROM county",
            "ba": "The virtual table calculates the average population of all counties from the 'county' table. It uses the AVG function to aggregate the population data across all entries in the table.",
            "question": "On average how large is the population of the counties?"
        },
        {
            "sample_id": 2779,
            "gold_sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT county.county_name FROM county JOIN election AS T2 ON T1.County_id = T2.District GROUP BY county.county_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of counties from the 'county' table that have participated in a certain number of elections. It joins the 'county' table with the 'election' table based on the county's unique identifier and the electoral district. The results are grouped by county and filtered to include only those counties that have participated in a specified minimum number of elections, represented by a numeric placeholder.",
            "question": "Show the names of counties that have at least two delegates."
        },
        {
            "sample_id": 2737,
            "gold_sql": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"",
            "gold_complexity": 6,
            "vt": "SELECT county.zip_code FROM county WHERE county.county_name = None.\"howard\"",
            "ba": "The virtual table retrieves the postal code associated with a specific county from the 'county' table. The placeholder in the WHERE clause represents the name of the county being queried.",
            "question": "Show the zip code of the county with name \"Howard\"."
        },
        {
            "sample_id": 2769,
            "gold_sql": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
            "gold_complexity": 9,
            "vt": "SELECT party.party, COUNT(*) FROM election JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY election.party",
            "ba": "The virtual table summarizes the number of elections associated with each political party by joining the 'election' and 'party' tables. It counts the occurrences of each party in the election records, providing insights into the participation of different political parties in elections.",
            "question": "Show the name of each party and the corresponding number of delegates from that party."
        },
        {
            "sample_id": 2776,
            "gold_sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT county.county_name FROM county ORDER BY county.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of counties from the 'county' table, ordered by their population in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of county names to retrieve.",
            "question": "Which county has the largest population? Give me the name of the county."
        },
        {
            "sample_id": 2790,
            "gold_sql": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
            "gold_complexity": 8,
            "vt": "SELECT party.party FROM party WHERE NOT party.party_id IN (SELECT party.party FROM election)",
            "ba": "The virtual table lists the political parties from the 'party' table that did not participate in any election. The query uses a subquery to filter out parties that are associated with any election by checking their presence in the 'election' table.",
            "question": "Which parties did not have any delegates in elections?"
        },
        {
            "sample_id": 2740,
            "gold_sql": "SELECT Delegate FROM election WHERE District  =  1",
            "gold_complexity": 6,
            "vt": "SELECT election.delegate FROM election WHERE election.district = [placeholder-type:numeric]",
            "ba": "The virtual table describes the delegate representing elections from the 'election' table for a specific electoral district. The placeholder in the WHERE clause represents the unique identifier of the district.",
            "question": "Who is the delegate of district 1 in the elections?"
        },
        {
            "sample_id": 2743,
            "gold_sql": "SELECT count(DISTINCT Governor) FROM party",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Governor) FROM party",
            "ba": "The virtual table counts the distinct votes received by the governor candidates from the 'party' table.",
            "question": "How many distinct governors are there?"
        },
        {
            "sample_id": 2738,
            "gold_sql": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"",
            "gold_complexity": 6,
            "vt": "SELECT county.zip_code FROM county WHERE county.county_name = None.\"howard\"",
            "ba": "The virtual table retrieves the postal code associated with a specific county from the 'county' table. The placeholder in the WHERE clause represents the name of the county being queried.",
            "question": "What is the zip code the county named \"Howard\" is located in?"
        },
        {
            "sample_id": 2788,
            "gold_sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT party.comptroller, COUNT(*) FROM party GROUP BY party.comptroller ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total votes received by the comptroller candidates from the 'party' table, grouped by the number of votes. It also limits the results to a specified number of entries, allowing users to see the most voted comptroller candidates.",
            "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count."
        },
        {
            "sample_id": 2754,
            "gold_sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
            "gold_complexity": 7,
            "vt": "SELECT election.delegate FROM county JOIN election AS T2 ON T1.County_id = T2.District WHERE county.population < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the delegate representing elections from the 'election' table, filtered by counties with a population below a specified threshold. It joins the 'county' table to access the population data and uses the district identifier to match with the corresponding county.",
            "question": "Find the delegates who are from counties with population below 100000."
        },
        {
            "sample_id": 2752,
            "gold_sql": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
            "gold_complexity": 7,
            "vt": "SELECT election.delegate, county.county_name FROM county JOIN election AS T2 ON T1.County_id = T2.District",
            "ba": "The virtual table describes the delegates and their associated counties from the 'election' and 'county' tables. It joins these tables based on the district identifier, which links the election to the corresponding county.",
            "question": "What are the delegate and name of the county they belong to, for each county?"
        },
        {
            "sample_id": 2787,
            "gold_sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT party.comptroller, COUNT(*) FROM party GROUP BY party.comptroller ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total number of votes received by the comptroller candidates from the 'party' table, grouped by the number of votes. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Show the people that have been comptroller the most times and the corresponding number of times."
        },
        {
            "sample_id": 2748,
            "gold_sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT party.year FROM party WHERE party.governor = None.\"eliot spitzer\"",
            "ba": "The virtual table retrieves distinct years from the 'party' table where the votes received by the governor candidate are associated with a specific individual. The placeholder in the WHERE clause represents the name of the governor candidate.",
            "question": "Find the distinct years when the governor was named \"Eliot Spitzer\"."
        },
        {
            "sample_id": 2772,
            "gold_sql": "SELECT County_name FROM county ORDER BY Population ASC",
            "gold_complexity": 6,
            "vt": "SELECT county.county_name FROM county ORDER BY county.population",
            "ba": "The virtual table lists the names of counties from the 'county' table, ordered by their population. This allows users to see which counties have the largest populations at a glance.",
            "question": "Sort the names of all counties in ascending order of population."
        },
        {
            "sample_id": 2746,
            "gold_sql": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
            "gold_complexity": 8,
            "vt": "SELECT party.lieutenant_governor, party.comptroller FROM party WHERE party.party = None.\"democratic\"",
            "ba": "The virtual table retrieves the votes received by the lieutenant governor and comptroller candidates from the 'party' table for a specific political party. The placeholder in the WHERE clause represents the party's name.",
            "question": "Who are the lieutenant governor and comptroller from the democratic party?"
        },
        {
            "sample_id": 2735,
            "gold_sql": "SELECT DISTINCT District FROM election",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT election.district FROM election",
            "ba": "The virtual table lists all unique electoral districts from the 'election' table.",
            "question": "Show all the distinct districts for elections."
        },
        {
            "sample_id": 2739,
            "gold_sql": "SELECT Delegate FROM election WHERE District  =  1",
            "gold_complexity": 6,
            "vt": "SELECT election.delegate FROM election WHERE election.district = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the delegate associated with a specific electoral district from the 'election' table. The placeholder in the WHERE clause represents the unique identifier for the district.",
            "question": "Show the delegate from district 1 in election."
        },
        {
            "sample_id": 2728,
            "gold_sql": "SELECT count(*) FROM county",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM county",
            "ba": "The virtual table provides a count of all counties from the 'county' table, which includes unique identifiers, names, populations, and postal codes for each county.",
            "question": "Count the total number of counties."
        },
        {
            "sample_id": 2783,
            "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT party.party FROM election JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY election.party ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique political parties associated with elections, counting the number of elections for each party. The results are grouped by party and ordered by the count of elections, with a limit on the number of results returned.",
            "question": "Show the name of the party that has the most delegates."
        },
        {
            "sample_id": 2753,
            "gold_sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
            "gold_complexity": 7,
            "vt": "SELECT election.delegate FROM county JOIN election AS T2 ON T1.County_id = T2.District WHERE county.population < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the delegate representing elections from the 'election' table, filtered by counties with a population below a specified threshold. It joins the 'county' table to access the population data and uses a placeholder for the numeric value of the population limit.",
            "question": "Which delegates are from counties with population smaller than 100000?"
        },
        {
            "sample_id": 2747,
            "gold_sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT party.year FROM party WHERE party.governor = None.\"eliot spitzer\"",
            "ba": "The virtual table retrieves distinct years from the 'party' table where the votes received by the governor candidate are associated with a specific individual. The placeholder in the WHERE clause represents the name of the governor candidate.",
            "question": "In which distinct years was the governor \"Eliot Spitzer\"?"
        },
        {
            "sample_id": 2736,
            "gold_sql": "SELECT DISTINCT District FROM election",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT election.district FROM election",
            "ba": "The virtual table lists all unique electoral districts from the 'election' table.",
            "question": "What are the distinct districts for elections?"
        },
        {
            "sample_id": 2784,
            "gold_sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT party.party FROM election JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY election.party ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the political parties associated with elections, displaying the party identifiers from the 'party' table. It joins the 'election' table with the 'party' table based on the party identifier, groups the results by party, and orders them by the count of elections associated with each party. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Which party has the largest number of delegates?"
        }
    ],
    "wine_1": [
        {
            "sample_id": 6531,
            "gold_sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM wine WHERE wine.winery = None.\"robert biale\"",
            "ba": "The virtual table counts the total number of wine entries produced by a specific winery. The placeholder in the WHERE clause represents the name of the winery being queried.",
            "question": "Count the number of wines produced at Robert Biale winery."
        },
        {
            "sample_id": 6576,
            "gold_sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
            "gold_complexity": 11,
            "vt": "SELECT wine.name FROM wine WHERE wine.year < (SELECT MIN(wine.year) FROM WINE WHERE Winery = \"Brander\")",
            "ba": "The virtual table lists the names of wines from the 'wine' table that were produced before the earliest year of wine produced by a specific winery, identified as 'Brander'. The query uses a subquery to find the minimum year of production for wines from 'Brander' and filters the main query based on this year.",
            "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?"
        },
        {
            "sample_id": 6546,
            "gold_sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), wine.grape FROM wine GROUP BY wine.grape",
            "ba": "The virtual table provides a count of wine entries grouped by grape variety from the 'wine' table. The placeholder in the SELECT statement indicates that the count of wines for each grape variety will be displayed alongside the grape name.",
            "question": "What are the numbers of wines for different grapes?"
        },
        {
            "sample_id": 6585,
            "gold_sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
            "gold_complexity": 12,
            "vt": "SELECT wine.grape, wine.appelation, wine.name FROM wine WHERE wine.score > [placeholder-type:numeric] ORDER BY wine.name",
            "ba": "The virtual table describes the grape variety, appellation, and name of wines from the 'wine' table that have a score greater than a specified value. The placeholder in the WHERE clause represents the minimum score for filtering the wines.",
            "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?"
        },
        {
            "sample_id": 6516,
            "gold_sql": "SELECT Grape ,  Appelation FROM WINE",
            "gold_complexity": 6,
            "vt": "SELECT wine.grape, wine.appelation FROM wine",
            "ba": "The virtual table describes the grape varieties and their corresponding appellations from the 'wine' table. The query selects the grape and appellation columns, which are essential for understanding the types of grapes used in different wines and their respective regions.",
            "question": "List the grapes and appelations of all wines."
        },
        {
            "sample_id": 6578,
            "gold_sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
            "gold_complexity": 11,
            "vt": "SELECT wine.name FROM wine WHERE wine.price > (SELECT MAX(wine.price) FROM WINE WHERE YEAR = 2006)",
            "ba": "The virtual table lists the names of wines from the 'wine' table that have a price greater than the maximum price of wines produced in the year 2006. The query uses a subquery to determine the maximum price for that specific year, ensuring that only wines exceeding this price are selected.",
            "question": "What are the names of wines that are more expensive then all wines made in the year 2006?"
        },
        {
            "sample_id": 6545,
            "gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
            "gold_complexity": 9,
            "vt": "SELECT wine.name FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE appellations.county = None.\"monterey\" AND wine.price < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of wines produced in a specific county, filtered by a maximum price. It joins the 'appellations' table with the 'wine' table based on the appellation name, allowing for the retrieval of wine names that meet the specified criteria.",
            "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county."
        },
        {
            "sample_id": 6584,
            "gold_sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
            "gold_complexity": 12,
            "vt": "SELECT wine.grape, wine.appelation, wine.name FROM wine WHERE wine.score > [placeholder-type:numeric] ORDER BY wine.name",
            "ba": "The virtual table describes the grape variety, appellation, and name of wines from the 'wine' table that have a score greater than a specified value. The placeholder in the WHERE clause represents the minimum score for filtering the wines.",
            "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name."
        },
        {
            "sample_id": 6589,
            "gold_sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
            "gold_complexity": 13,
            "vt": "SELECT AVG(wine.price) FROM wine WHERE NOT appellations.appelation IN (SELECT appellations.appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
            "ba": "The virtual table calculates the average price of wines from the 'wine' table, excluding those that belong to appellations located in Sonoma County. The query uses a subquery to identify the appellations in Sonoma County by joining the 'appellations' and 'wine' tables based on the appellation name.",
            "question": "What is the average price for wines not produced in Sonoma county?"
        },
        {
            "sample_id": 6573,
            "gold_sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
            "gold_complexity": 8,
            "vt": "SELECT wine.winery FROM wine GROUP BY wine.winery HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of wineries from the 'wine' table that have produced a specified number of different wines. The placeholder in the HAVING clause represents the minimum count of wines that a winery must have produced to be included in the results.",
            "question": "Which wineries produce at least four wines?"
        },
        {
            "sample_id": 6558,
            "gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT grapes.color FROM grapes JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY wine.grape ORDER BY AVG(wine.price) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the colors of grape varieties from the 'grapes' table, grouped by grape variety. It joins the 'grapes' table with the 'wine' table to associate each grape variety with its corresponding wines. The results are ordered by the average price of the wines made from each grape variety, and a limit is applied to restrict the number of results returned.",
            "question": "What is the color of the grape whose wine products has the highest average price?"
        },
        {
            "sample_id": 6521,
            "gold_sql": "SELECT Area ,  County FROM APPELLATIONS",
            "gold_complexity": 6,
            "vt": "SELECT appellations.area, appellations.county FROM appellations",
            "ba": "The virtual table describes the geographical area and county of each appellation from the 'appellations' table. The query retrieves the area and county information for all appellations without any filtering conditions.",
            "question": "What are the areas and counties for all appelations?"
        },
        {
            "sample_id": 6580,
            "gold_sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 12,
            "vt": "SELECT wine.winery FROM grapes JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE grapes.color = None.\"white\" GROUP BY wine.winery ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of wineries that produce wines made from white grapes. It joins the 'grapes' and 'wine' tables based on the grape variety, filters for white grapes, groups the results by winery name, and orders them by the number of wines produced, limiting the output to a specified number.",
            "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes."
        },
        {
            "sample_id": 6556,
            "gold_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT appellations.area FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY wine.appelation HAVING wine.year < [placeholder-type:numeric] ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the geographical area of appellations from the 'appellations' table, joining it with the 'wine' table to filter wines produced in those appellations. It groups the results by appellation and applies a condition to only include wines produced before a specified year, using a placeholder for the year. Additionally, it limits the number of results based on a specified count, using another placeholder.",
            "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?"
        },
        {
            "sample_id": 6586,
            "gold_sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
            "gold_complexity": 10,
            "vt": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"",
            "ba": "The virtual table lists the appellations of wines produced after a specific year, excluding those located in the 'Central Coast' area.",
            "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area."
        },
        {
            "sample_id": 6542,
            "gold_sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
            "gold_complexity": 9,
            "vt": "SELECT wine.name FROM grapes JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE grapes.color = None.\"red\" AND wine.price > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of wines from the 'wine' table that are made from red grapes. It filters the results based on the color of the grapes and the price of the wine, allowing users to specify a minimum price for the wines they are interested in.",
            "question": "What are the wines that have prices higher than 50 and made of Red color grapes?"
        },
        {
            "sample_id": 6537,
            "gold_sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
            "gold_complexity": 9,
            "vt": "SELECT wine.name, wine.score FROM grapes JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE grapes.color = None.\"white\"",
            "ba": "The virtual table describes the names and scores of wines made from white grapes. It retrieves data from the 'wine' table and joins it with the 'grapes' table to filter for grape varieties that are white in color.",
            "question": "Give the names and scores of wines made from white grapes."
        },
        {
            "sample_id": 6547,
            "gold_sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), wine.grape FROM wine GROUP BY wine.grape",
            "ba": "The virtual table provides a count of wine entries grouped by grape variety from the 'wine' table. The placeholder in the SELECT statement indicates that the count of wines for each grape variety will be displayed alongside the grape name.",
            "question": "How many wines are there for each grape?"
        },
        {
            "sample_id": 6588,
            "gold_sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
            "gold_complexity": 13,
            "vt": "SELECT AVG(wine.price) FROM wine WHERE NOT appellations.appelation IN (SELECT appellations.appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma')",
            "ba": "The virtual table calculates the average price of wines from the 'wine' table, excluding those that belong to appellations located in Sonoma County. The query uses a subquery to identify the appellations in Sonoma County by joining the 'appellations' and 'wine' tables based on the appellation name.",
            "question": "Find the average price of wines that are not produced from Sonoma county."
        },
        {
            "sample_id": 6520,
            "gold_sql": "SELECT Area ,  County FROM APPELLATIONS",
            "gold_complexity": 6,
            "vt": "SELECT appellations.area, appellations.county FROM appellations",
            "ba": "The virtual table describes the geographical area and county of each appellation from the 'appellations' table.",
            "question": "List the area and county of all appelations."
        },
        {
            "sample_id": 6575,
            "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
            "gold_complexity": 9,
            "vt": "SELECT appellations.county FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY wine.appelation HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the counties of appellations from the 'appellations' table that are associated with wines in the 'wine' table. It groups the results by the appellation and filters to show only those appellations that have a count of associated wines less than or equal to a specified number. The placeholder in the HAVING clause represents the maximum number of wines allowed for each appellation.",
            "question": "What are the countries for appelations with at most 3 wines?"
        },
        {
            "sample_id": 6536,
            "gold_sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
            "gold_complexity": 9,
            "vt": "SELECT wine.name, wine.score FROM grapes JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE grapes.color = None.\"white\"",
            "ba": "The virtual table describes the names and scores of wines made from white grapes. It retrieves data from the 'wine' table and joins it with the 'grapes' table to filter for grape varieties that are white in color.",
            "question": "What are the names and scores of wines that are made of white color grapes?"
        },
        {
            "sample_id": 6523,
            "gold_sql": "SELECT Price FROM WINE WHERE YEAR  <  2010",
            "gold_complexity": 6,
            "vt": "SELECT wine.price FROM wine WHERE wine.year < [placeholder-type:numeric]",
            "ba": "The virtual table displays the retail prices of wines from the 'wine' table that were produced before a specified year. The placeholder in the WHERE clause represents the year threshold for filtering the wines.",
            "question": "Return the prices of wines produced before 2010."
        },
        {
            "sample_id": 6570,
            "gold_sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation",
            "gold_complexity": 10,
            "vt": "SELECT AVG(wine.price), AVG(wine.score), wine.appelation FROM wine GROUP BY wine.appelation",
            "ba": "The virtual table provides the average price and average score of wines grouped by their respective appellations from the 'wine' table. The placeholders represent the aggregated values for price and score, while the grouping is done based on the appellation of the wine.",
            "question": "What are the average price and score of wines grouped by appelation?"
        },
        {
            "sample_id": 6512,
            "gold_sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT wine.winery FROM wine ORDER BY wine.score LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of wineries from the 'wine' table, ordered by their rating scores. The placeholder in the LIMIT clause indicates the maximum number of winery names to be returned.",
            "question": "Which winery is the wine that has the highest score from?"
        },
        {
            "sample_id": 6517,
            "gold_sql": "SELECT Grape ,  Appelation FROM WINE",
            "gold_complexity": 6,
            "vt": "SELECT wine.grape, wine.appelation FROM wine",
            "ba": "The virtual table describes the grape varieties and their corresponding appellations from the 'wine' table. The query selects the grape and appellation columns, which are essential for understanding the types of grapes used in different wine productions.",
            "question": "What are the grapes and appelations of each wine?"
        },
        {
            "sample_id": 6555,
            "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY price",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT wine.name FROM wine ORDER BY wine.price",
            "ba": "The virtual table lists the distinct names of wines from the 'wine' table, ordered by their retail price.",
            "question": "What are the names of wines, sorted by price ascending?"
        },
        {
            "sample_id": 6568,
            "gold_sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
            "gold_complexity": 10,
            "vt": "SELECT MAX(wine.price), MAX(wine.score), wine.year FROM wine GROUP BY wine.year",
            "ba": "The virtual table provides the maximum price and maximum score of wines produced each year from the 'wine' table. The query groups the results by the year of production, allowing users to see the highest priced and highest rated wines for each year.",
            "question": "What are the maximum price and score of wines in each year?"
        },
        {
            "sample_id": 6541,
            "gold_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT grapes.grape FROM grapes JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE grapes.color = None.\"white\" AND wine.score > [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct grape varieties from the 'grapes' table that are white in color and have a wine score greater than a specified numeric value. The query joins the 'grapes' table with the 'wine' table to filter the results based on the color of the grapes and the score of the wines.",
            "question": "Find the white grape used to produce wines with scores above 90."
        },
        {
            "sample_id": 6569,
            "gold_sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
            "gold_complexity": 10,
            "vt": "SELECT MAX(wine.price), MAX(wine.score), wine.year FROM wine GROUP BY wine.year",
            "ba": "The virtual table provides the maximum price and score of wines produced each year from the 'wine' table. The query groups the results by the year of production, allowing users to see the highest price and score for wines from each specific year.",
            "question": "What are the maximum price and score of wines for each year?"
        },
        {
            "sample_id": 6553,
            "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT wine.name FROM wine ORDER BY wine.name",
            "ba": "The virtual table lists the unique names of wines from the 'wine' table, sorted in alphabetical order. This allows users to see all available wine names without duplicates.",
            "question": "What are the names of wines, sorted in alphabetical order?"
        },
        {
            "sample_id": 6522,
            "gold_sql": "SELECT Price FROM WINE WHERE YEAR  <  2010",
            "gold_complexity": 6,
            "vt": "SELECT wine.price FROM wine WHERE wine.year < [placeholder-type:numeric]",
            "ba": "The virtual table displays the retail prices of wines from the 'wine' table that were produced before a specified year. The placeholder in the WHERE clause represents the year to filter the results.",
            "question": "What are the prices of wines produced before the year of 2010?"
        },
        {
            "sample_id": 6538,
            "gold_sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005",
            "gold_complexity": 9,
            "vt": "SELECT MAX(wine.price) FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE appellations.area = None.\"central coast\" AND wine.year < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the maximum retail price of wines produced in a specific appellation area, which is 'central coast', and filters the results to include only wines produced before a certain year. The query joins the 'appellations' table with the 'wine' table based on the appellation name, ensuring that only relevant wines from the specified area are considered.",
            "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005."
        },
        {
            "sample_id": 6511,
            "gold_sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT wine.name FROM wine ORDER BY wine.score LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of wines from the 'wine' table, ordered by their rating scores. The placeholder in the LIMIT clause indicates the maximum number of wine names to be returned.",
            "question": "Give the name of the wine with the highest score."
        },
        {
            "sample_id": 6565,
            "gold_sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"",
            "gold_complexity": 9,
            "vt": "SELECT AVG(wine.price), AVG(wine.cases) FROM wine WHERE wine.year = [placeholder-type:numeric] AND wine.grape = None.\"zinfandel\"",
            "ba": "The virtual table calculates the average price and average number of cases available for wines made from a specific grape variety in a given year. The placeholders represent the year of production, while the grape variety is fixed as 'zinfandel'.",
            "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009."
        },
        {
            "sample_id": 6550,
            "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT wine.name FROM wine WHERE wine.price > (SELECT MIN(wine.price) FROM wine WHERE Winery = \"John Anthony\")",
            "ba": "The virtual table lists the distinct names of wines from the 'wine' table that have a price greater than the minimum price of wines produced by a specific winery. The placeholder in the subquery represents the name of the winery.",
            "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery."
        },
        {
            "sample_id": 6529,
            "gold_sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT wine.name FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE appellations.area = None.\"north coast\"",
            "ba": "The virtual table lists the distinct names of wines produced in the 'north coast' area by joining the 'appellations' and 'wine' tables. The placeholder in the WHERE clause represents the geographical area of the appellation.",
            "question": "What are the distinct names of wines that have appellations in the North Coast area?"
        },
        {
            "sample_id": 6572,
            "gold_sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
            "gold_complexity": 8,
            "vt": "SELECT wine.winery FROM wine GROUP BY wine.winery HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of wineries from the 'wine' table that produce a certain number of different wines. The placeholder in the HAVING clause represents the minimum count of wines that a winery must produce to be included in the results.",
            "question": "Find the wineries that have at least four wines."
        },
        {
            "sample_id": 6514,
            "gold_sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"",
            "gold_complexity": 6,
            "vt": "SELECT wine.name FROM wine WHERE wine.year = None.\"2008\"",
            "ba": "The virtual table describes the names of wines from the 'wine' table that were produced in a specific year. The placeholder in the WHERE clause represents the year of production.",
            "question": "Find the names of all wines produced in 2008."
        },
        {
            "sample_id": 6544,
            "gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
            "gold_complexity": 9,
            "vt": "SELECT wine.name FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE appellations.county = None.\"monterey\" AND wine.price < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of wines produced in a specific county, filtered by a maximum price. It joins the 'appellations' table with the 'wine' table based on the appellation name, allowing for the retrieval of wine names that meet the specified criteria.",
            "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?"
        },
        {
            "sample_id": 6560,
            "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT wine.name FROM wine WHERE wine.year < [placeholder-type:numeric] OR wine.year > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of wines from the 'wine' table that were produced either before or after a specified year. The placeholders in the WHERE clause represent the years to filter the wine entries.",
            "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010."
        },
        {
            "sample_id": 6587,
            "gold_sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
            "gold_complexity": 10,
            "vt": "SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"",
            "ba": "The virtual table lists the appellations from the 'wine' table for wines produced after a specific year, excluding those that are located in the 'Central Coast' area as defined in the 'appellations' table.",
            "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?"
        },
        {
            "sample_id": 6526,
            "gold_sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT wine.name FROM grapes JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE grapes.color = None.\"red\"",
            "ba": "The virtual table describes the distinct names of wines made from red grapes. It retrieves data from the 'grapes' table and the 'wine' table, filtering for grape varieties that are red in color.",
            "question": "List the names of all distinct wines that are made of red color grape."
        },
        {
            "sample_id": 6559,
            "gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT grapes.color FROM grapes JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY wine.grape ORDER BY AVG(wine.price) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the color of grape varieties from the 'grapes' table, joining it with the 'wine' table to associate each grape with its corresponding wine entries. The results are grouped by grape variety and ordered by the average price of the wines produced from each grape, limiting the output to a specified number of entries.",
            "question": "Give the color of the grape whose wine products have the highest average price?"
        },
        {
            "sample_id": 6535,
            "gold_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(wine.price) FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE appellations.county = None.\"sonoma\"",
            "ba": "The virtual table calculates the average retail price of wines produced in a specific county by joining the 'appellations' and 'wine' tables based on the appellation name. The placeholder in the WHERE clause represents the county name.",
            "question": "What is the average price of wines produced in appelations in Sonoma County?"
        },
        {
            "sample_id": 6574,
            "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
            "gold_complexity": 9,
            "vt": "SELECT appellations.county FROM appellations JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY wine.appelation HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the counties of appellations from the 'appellations' table that are associated with wines in the 'wine' table. It groups the results by the appellation and filters to show only those appellations that have a count of associated wines less than or equal to a specified number. The placeholder in the HAVING clause represents the maximum number of wines allowed for each appellation.",
            "question": "Find the country of all appelations who have at most three wines."
        },
        {
            "sample_id": 6577,
            "gold_sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
            "gold_complexity": 11,
            "vt": "SELECT wine.name FROM wine WHERE wine.year < (SELECT MIN(wine.year) FROM WINE WHERE Winery = \"Brander\")",
            "ba": "The virtual table lists the names of wines from the 'wine' table that were produced before the earliest year of wine produced by a specific winery, identified as 'Brander'. The query uses a subquery to find the minimum year of production for wines from 'Brander' and filters the main query based on this year.",
            "question": "What are the names of wines produced before any wine from the Brander winery?"
        },
        {
            "sample_id": 6562,
            "gold_sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT wine.winery FROM wine WHERE wine.price BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table lists unique wineries from the 'wine' table that produce wines within a specified price range. The placeholders represent the minimum and maximum price values for filtering the results.",
            "question": "Find the distinct winery of wines having price between 50 and 100."
        },
        {
            "sample_id": 6549,
            "gold_sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
            "gold_complexity": 8,
            "vt": "SELECT AVG(wine.price), wine.year FROM wine GROUP BY wine.year",
            "ba": "The virtual table calculates the average price of wines produced each year from the 'wine' table. The query groups the results by the year of production, allowing users to see how the average price of wine has changed over different years.",
            "question": "What is the average prices of wines for each each?"
        }
    ],
    "tvshow": [
        {
            "sample_id": 7588,
            "gold_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 11,
            "vt": "SELECT tv_channel.country, COUNT(*) FROM tv_channel GROUP BY tv_channel.country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of TV channels available in each country. It groups the channels by their country and counts the total number of channels per country, ordering the results by the count in ascending order and limiting the output to a specified number of countries.",
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has."
        },
        {
            "sample_id": 7612,
            "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "gold_complexity": 6,
            "vt": "SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = None.\"a love of a lifetime\"",
            "ba": "The virtual table retrieves the air date of a specific episode from the 'tv_series' table. The placeholder in the WHERE clause represents the episode title that the user wants to query.",
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?"
        },
        {
            "sample_id": 7639,
            "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
            "gold_complexity": 12,
            "vt": "SELECT tv_channel.package_option FROM tv_channel WHERE NOT tv_channel.id IN (SELECT cartoon.channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "ba": "The virtual table lists the available subscription packages for TV channels that do not broadcast any cartoons directed by a specific director. The query filters out channels based on the director's name, ensuring that only channels without such cartoons are included.",
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?"
        },
        {
            "sample_id": 7603,
            "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "gold_complexity": 7,
            "vt": "SELECT tv_channel.series_name FROM tv_channel JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE cartoon.title = None.\"the rise of the blue beetle!\"",
            "ba": "The virtual table retrieves the names of TV series from the 'tv_channel' table that are associated with a specific cartoon title. The query joins the 'tv_channel' and 'cartoon' tables based on the channel identifier, allowing for the selection of series names that correspond to the given cartoon title.",
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?"
        },
        {
            "sample_id": 7628,
            "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
            "gold_complexity": 8,
            "vt": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "ba": "The virtual table lists the countries where TV channels are based, excluding those countries that have cartoons written by a specific writer. The query uses an EXCEPT clause to filter out the countries associated with the channels that broadcast cartoons written by 'Todd Casey'.",
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?"
        },
        {
            "sample_id": 7601,
            "gold_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "gold_complexity": 8,
            "vt": "SELECT tv_channel.language, COUNT(*) FROM tv_channel GROUP BY tv_channel.language",
            "ba": "The virtual table summarizes the number of TV channels grouped by their broadcasting language. It provides insights into the distribution of channels across different languages.",
            "question": "For each language, list the number of TV Channels that use it."
        },
        {
            "sample_id": 7578,
            "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
            "gold_complexity": 6,
            "vt": "SELECT cartoon.title FROM cartoon ORDER BY cartoon.title",
            "ba": "The virtual table lists the titles of cartoons from the 'cartoon' table, sorted in alphabetical order.",
            "question": "List the title of all cartoons in alphabetical order."
        },
        {
            "sample_id": 7585,
            "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
            "gold_complexity": 8,
            "vt": "SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date",
            "ba": "The virtual table lists the titles and directors of cartoons from the 'cartoon' table, ordered by their original air date. This allows users to see the progression of cartoons over time based on when they first aired.",
            "question": "What is the name and directors of all the cartoons that are ordered by air date?"
        },
        {
            "sample_id": 7618,
            "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "gold_complexity": 7,
            "vt": "SELECT tv_series.episode FROM tv_channel JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE tv_channel.series_name = None.\"sky radio\"",
            "ba": "The virtual table retrieves the episode numbers of TV series that are broadcasted on a specific TV channel named 'sky radio'. It joins the 'tv_channel' table with the 'tv_series' table based on the channel ID to filter the results accordingly.",
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\"."
        },
        {
            "sample_id": 7580,
            "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "gold_complexity": 6,
            "vt": "SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = None.\"ben jones\"",
            "ba": "The virtual table lists the titles of cartoons from the 'cartoon' table that are directed by a specific individual. The placeholder in the WHERE clause represents the name of the director.",
            "question": "List all cartoon directed by \"Ben Jones\"."
        },
        {
            "sample_id": 7583,
            "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM cartoon WHERE cartoon.written_by = None.\"joseph kuhr\"",
            "ba": "The virtual table counts the number of cartoons from the 'cartoon' table that were written by a specific writer. The placeholder in the WHERE clause represents the name of the writer.",
            "question": "What is the number of cartoones written by Joseph Kuhr?"
        },
        {
            "sample_id": 7617,
            "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "gold_complexity": 7,
            "vt": "SELECT tv_channel.series_name FROM tv_channel JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE tv_series.episode = None.\"a love of a lifetime\"",
            "ba": "The virtual table retrieves the series name from the 'tv_channel' table by joining it with the 'tv_series' table based on the channel ID. It filters the results to find a specific episode titled 'a love of a lifetime'.",
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?"
        },
        {
            "sample_id": 7611,
            "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
            "gold_complexity": 5,
            "vt": "SELECT MAX(tv_series.share), MIN(tv_series.share) FROM tv_series",
            "ba": "The virtual table provides the maximum and minimum share percentages of viewers watching episodes from the 'tv_series' table. The share percentage indicates the proportion of viewers watching a specific episode compared to the total TV viewers.",
            "question": "What is the maximum and minimum share for the TV series?"
        },
        {
            "sample_id": 7636,
            "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
            "gold_complexity": 10,
            "vt": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "ba": "The virtual table identifies the unique identifiers of TV channels that do not broadcast any cartoons directed by a specific individual. It compares the list of all TV channels with those that have cartoons directed by 'Ben Jones', effectively filtering out channels associated with his work.",
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones."
        },
        {
            "sample_id": 7604,
            "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "gold_complexity": 7,
            "vt": "SELECT cartoon.title FROM tv_channel JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE tv_channel.series_name = None.\"sky radio\"",
            "ba": "The virtual table lists the titles of cartoons that are broadcasted on TV channels which have a specific series name. The query joins the 'tv_channel' and 'cartoon' tables based on the channel identifier, filtering for channels that broadcast a series named 'sky radio'.",
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\"."
        },
        {
            "sample_id": 7622,
            "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
            "gold_complexity": 9,
            "vt": "SELECT cartoon.production_code, cartoon.channel FROM cartoon ORDER BY cartoon.original_air_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the production codes and channels of cartoons from the 'cartoon' table, ordered by their original air date. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "Find the production code and channel of the most recently aired cartoon ."
        },
        {
            "sample_id": 7613,
            "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "gold_complexity": 6,
            "vt": "SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode = None.\"a love of a lifetime\"",
            "ba": "The virtual table retrieves the air date of a specific episode from the 'tv_series' table. The placeholder in the WHERE clause represents the episode title that the user wants to query.",
            "question": "When did the episode \"A Love of a Lifetime\" air?"
        },
        {
            "sample_id": 7586,
            "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "gold_complexity": 7,
            "vt": "SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = None.\"ben jones\" OR cartoon.directed_by = None.\"brandon vietti\"",
            "ba": "The virtual table lists the titles of cartoons from the 'cartoon' table that are directed by either 'ben jones' or 'brandon vietti'. The placeholders in the WHERE clause represent the names of the directors.",
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"."
        },
        {
            "sample_id": 7609,
            "gold_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "gold_complexity": 9,
            "vt": "SELECT tv_series.episode, tv_series.rating FROM tv_series ORDER BY tv_series.rating LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of episodes from the 'tv_series' table along with their viewer ratings. The results are ordered by the rating in descending order, and the number of episodes returned is limited by a placeholder for numeric values.",
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?"
        },
        {
            "sample_id": 7587,
            "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "gold_complexity": 7,
            "vt": "SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = None.\"ben jones\" OR cartoon.directed_by = None.\"brandon vietti\"",
            "ba": "The virtual table lists the titles of cartoons from the 'cartoon' table that are directed by either 'ben jones' or 'brandon vietti'. The placeholders in the WHERE clause represent the names of the directors.",
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?"
        },
        {
            "sample_id": 7582,
            "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM cartoon WHERE cartoon.written_by = None.\"joseph kuhr\"",
            "ba": "The virtual table counts the number of cartoons from the 'cartoon' table that were written by a specific writer. The placeholder in the WHERE clause represents the name of the writer.",
            "question": "How many cartoons were written by \"Joseph Kuhr\"?"
        },
        {
            "sample_id": 7623,
            "gold_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
            "gold_complexity": 9,
            "vt": "SELECT cartoon.production_code, cartoon.channel FROM cartoon ORDER BY cartoon.original_air_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the production code and channel information for cartoons from the 'cartoon' table, ordered by their original air date. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to retrieve.",
            "question": "What is the produdction code and channel of the most recent cartoon ?"
        },
        {
            "sample_id": 7579,
            "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
            "gold_complexity": 6,
            "vt": "SELECT cartoon.title FROM cartoon ORDER BY cartoon.title",
            "ba": "The virtual table lists the titles of cartoons from the 'cartoon' table, sorted in alphabetical order.",
            "question": "What are the titles of the cartoons sorted alphabetically?"
        },
        {
            "sample_id": 7630,
            "gold_sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
            "gold_complexity": 10,
            "vt": "SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "ba": "The virtual table identifies TV series names and their corresponding countries from the 'tv_channel' table, filtering for channels that broadcast cartoons directed by both 'Michael Chang' and 'Ben Jones'.",
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?"
        },
        {
            "sample_id": 7619,
            "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "gold_complexity": 7,
            "vt": "SELECT tv_series.episode FROM tv_channel JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE tv_channel.series_name = None.\"sky radio\"",
            "ba": "The virtual table retrieves the episode numbers of TV series that are broadcasted on a specific TV channel named 'sky radio'. It joins the 'tv_channel' and 'tv_series' tables based on the channel identifier, filtering for the channel with the specified series name.",
            "question": "What is the episode for the TV series named \"Sky Radio\"?"
        },
        {
            "sample_id": 7606,
            "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
            "gold_complexity": 6,
            "vt": "SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating",
            "ba": "The virtual table lists the episodes of TV series from the 'tv_series' table, ordered by their viewer ratings. This allows users to see which episodes are rated the highest.",
            "question": "List the Episode of all TV series sorted by rating."
        },
        {
            "sample_id": 7602,
            "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "gold_complexity": 7,
            "vt": "SELECT tv_channel.series_name FROM tv_channel JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE cartoon.title = None.\"the rise of the blue beetle!\"",
            "ba": "The virtual table describes the series names of TV channels that broadcast a specific cartoon. It joins the 'tv_channel' table with the 'cartoon' table based on the channel identifier, filtering for a specific cartoon title.",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name."
        },
        {
            "sample_id": 7584,
            "gold_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
            "gold_complexity": 8,
            "vt": "SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date",
            "ba": "The virtual table lists the titles and directors of cartoons from the 'cartoon' table, ordered by their original air date. This allows users to see the progression of cartoon releases over time.",
            "question": "list all cartoon titles and their directors ordered by their air date"
        },
        {
            "sample_id": 7633,
            "gold_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
            "gold_complexity": 8,
            "vt": "SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> '[placeholder-type:string]'",
            "ba": "The virtual table provides information about TV channels, specifically their pixel aspect ratio and the country they are based in, while filtering out channels that broadcast in a specific language. The placeholder in the WHERE clause represents the language to be excluded.",
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?"
        },
        {
            "sample_id": 7615,
            "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "gold_complexity": 6,
            "vt": "SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = None.\"a love of a lifetime\"",
            "ba": "The virtual table provides the weekly rank of a specific episode from the 'tv_series' table. The placeholder in the WHERE clause represents the episode title being queried.",
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?"
        },
        {
            "sample_id": 7616,
            "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "gold_complexity": 7,
            "vt": "SELECT tv_channel.series_name FROM tv_channel JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE tv_series.episode = None.\"a love of a lifetime\"",
            "ba": "The virtual table describes the series name of TV channels that broadcast a specific episode of a TV series. The query joins the 'tv_channel' and 'tv_series' tables based on the channel ID, filtering for a particular episode title.",
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name."
        },
        {
            "sample_id": 7610,
            "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
            "gold_complexity": 5,
            "vt": "SELECT MAX(tv_series.share), MIN(tv_series.share) FROM tv_series",
            "ba": "The virtual table provides the maximum and minimum share percentages of viewers watching episodes from the 'tv_series' table. This data helps in understanding the range of audience engagement for the series.",
            "question": "What is minimum and maximum share of TV series?"
        },
        {
            "sample_id": 7625,
            "gold_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
            "gold_complexity": 8,
            "vt": "SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = None.\"yes\"",
            "ba": "The virtual table describes the available subscription packages and the names of TV series from the 'tv_channel' table that broadcast in high definition. The placeholder in the WHERE clause indicates that only channels with high definition broadcasting are selected.",
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?"
        },
        {
            "sample_id": 7591,
            "gold_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel",
            "ba": "The virtual table provides a count of unique TV series names and unique content types available across all TV channels in the 'tv_channel' table. The placeholders represent the aggregated counts of distinct series and content types.",
            "question": "How many different series and contents are listed in the TV Channel table?"
        },
        {
            "sample_id": 7595,
            "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "gold_complexity": 6,
            "vt": "SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = None.\"sky radio\"",
            "ba": "The virtual table retrieves the available subscription packages for a specific TV channel that broadcasts the series named 'sky radio'. The placeholder in the WHERE clause represents the series name.",
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?"
        },
        {
            "sample_id": 7607,
            "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
            "gold_complexity": 6,
            "vt": "SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating",
            "ba": "The virtual table lists the episodes of TV series from the 'tv_series' table, ordered by their viewer ratings. This allows users to see which episodes are rated the highest.",
            "question": "What are all of the episodes ordered by ratings?"
        },
        {
            "sample_id": 7596,
            "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM tv_channel WHERE tv_channel.language = None.\"english\"",
            "ba": "The virtual table counts the number of TV channels from the 'tv_channel' table that broadcast in a specific language. The placeholder in the WHERE clause represents the language of the channels being queried.",
            "question": "How many TV Channel using language English?"
        }
    ],
    "ship_1": [
        {
            "sample_id": 6220,
            "gold_sql": "SELECT name FROM captain ORDER BY age DESC",
            "gold_complexity": 6,
            "vt": "SELECT captain.name FROM captain ORDER BY captain.age",
            "ba": "The virtual table lists the names of captains from the 'captain' table, ordered by their age. This allows users to see the captains' names in a sequence from the youngest to the oldest.",
            "question": "What are the names of captains, sorted by age descending?"
        },
        {
            "sample_id": 6243,
            "gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT ship.flag FROM ship GROUP BY ship.flag ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the flags of ships from the 'ship' table, grouping the results by the flag and ordering them by the count of ships associated with each flag. The placeholder in the LIMIT clause allows for specifying the maximum number of unique flags to return.",
            "question": "Which flag is most widely used among all ships?"
        },
        {
            "sample_id": 6237,
            "gold_sql": "SELECT count(*) FROM ship",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ship",
            "ba": "The virtual table provides a count of all ships from the 'ship' table.",
            "question": "how many ships are there?"
        },
        {
            "sample_id": 6250,
            "gold_sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT ship.built_year FROM ship GROUP BY ship.built_year ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique ship construction years from the 'ship' table, grouped by the year and ordered by the count of ships built in each year. The placeholder allows the user to specify a limit on the number of years returned.",
            "question": "What is the year in which most ships were built?"
        },
        {
            "sample_id": 6236,
            "gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT captain.name FROM captain ORDER BY captain.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of captains from the 'captain' table, ordered by their age. The query limits the number of results returned based on a specified numeric value.",
            "question": "Return the name of the youngest captain."
        },
        {
            "sample_id": 6231,
            "gold_sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
            "gold_complexity": 7,
            "vt": "SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner'",
            "ba": "The virtual table identifies the ranks of captains who command ships of two specific classes: 'Cutter' and 'Armed schooner'. It uses an INTERSECT operation to find common ranks among captains of these two classes.",
            "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes."
        },
        {
            "sample_id": 6226,
            "gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT captain.class FROM captain GROUP BY captain.class HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the classes of captains from the 'captain' table, grouping them by their class designation and filtering to show only those classes that have more than a specified number of captains.",
            "question": "Give the classes that have more than two captains."
        },
        {
            "sample_id": 6252,
            "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT ship.name FROM ship JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY captain.ship_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of ships from the 'ship' table that have more than a specified number of captains associated with them. The query joins the 'ship' and 'captain' tables on the ship_id, grouping the results by ship_id and filtering those groups based on the count of captains.",
            "question": "What are the names of ships that have more than one captain?"
        },
        {
            "sample_id": 6229,
            "gold_sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS",
            "gold_complexity": 9,
            "vt": "SELECT AVG(captain.age), MIN(captain.age), captain.class FROM captain GROUP BY captain.class",
            "ba": "The virtual table provides the average and minimum age of captains grouped by their class designation. It aggregates data from the 'captain' table, allowing for insights into the age distribution of captains across different classes.",
            "question": "What are the average and minimum age of captains in different class?"
        },
        {
            "sample_id": 6244,
            "gold_sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT ship.flag FROM ship GROUP BY ship.flag ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the flags of ships from the 'ship' table, grouping the results by the flag and ordering them by the count of ships associated with each flag. The placeholder allows for limiting the number of results returned based on a specified numeric value.",
            "question": "Return the flag that is most common among all ships."
        },
        {
            "sample_id": 6225,
            "gold_sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT captain.class FROM captain GROUP BY captain.class HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the classes of captains from the 'captain' table, grouping them by their class designation. It filters the results to only include those classes that have more than a specified number of captains associated with them, represented by a numeric placeholder.",
            "question": "Which classes have more than two captains?"
        },
        {
            "sample_id": 6216,
            "gold_sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), captain.rank FROM captain GROUP BY captain.rank",
            "ba": "The virtual table provides a count of captains grouped by their rank from the 'captain' table. The placeholder in the SELECT clause indicates that the total number of captains for each rank will be displayed.",
            "question": "Count the number of captains that have each rank."
        },
        {
            "sample_id": 6228,
            "gold_sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'",
            "gold_complexity": 6,
            "vt": "SELECT captain.name FROM captain WHERE captain.rank = '[placeholder-type:string]' OR captain.rank = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of captains from the 'captain' table who hold a specific rank or another specified rank. The placeholders in the WHERE clause represent the ranks of the captains being queried.",
            "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?"
        },
        {
            "sample_id": 6256,
            "gold_sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT ship.name FROM ship JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY captain.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of ships from the 'ship' table, joining it with the 'captain' table to associate each ship with its captain. The results are ordered by the age of the captains, and a limit is applied to restrict the number of returned records based on a specified numeric value.",
            "question": "What is the name of the ship that is commanded by the youngest captain?"
        },
        {
            "sample_id": 6246,
            "gold_sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
            "gold_complexity": 8,
            "vt": "SELECT ship.name FROM ship ORDER BY ship.built_year, ship.class",
            "ba": "The virtual table lists the names of ships from the 'ship' table, ordered by the year they were built and their class designation. This allows users to see the ships in chronological order of their construction and grouped by their class.",
            "question": "What are the names of ships, ordered by year they were built and their class?"
        },
        {
            "sample_id": 6235,
            "gold_sql": "SELECT name FROM captain ORDER BY age LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT captain.name FROM captain ORDER BY captain.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of captains from the 'captain' table, ordered by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of captain names to retrieve.",
            "question": "What is the name of the youngest captain?"
        },
        {
            "sample_id": 6247,
            "gold_sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'",
            "gold_complexity": 7,
            "vt": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
            "ba": "The virtual table identifies the types of ships that are registered under both the Panama and Malta flags. It uses an INTERSECT operation to find common ship types between the two specified flags.",
            "question": "Find the ship type that are used by both ships with Panama and Malta flags."
        },
        {
            "sample_id": 6213,
            "gold_sql": "SELECT count(DISTINCT rank) FROM captain",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT rank) FROM captain",
            "ba": "The virtual table counts the distinct ranks of captains from the 'captain' table.",
            "question": "How many different captain ranks are there?"
        },
        {
            "sample_id": 6217,
            "gold_sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), captain.rank FROM captain WHERE captain.age < [placeholder-type:numeric] GROUP BY captain.rank",
            "ba": "The virtual table provides a count of captains grouped by their rank, specifically for those captains who are younger than a specified age. The placeholder in the WHERE clause represents the age limit for filtering the captains.",
            "question": "How many captains with younger than 50 are in each rank?"
        },
        {
            "sample_id": 6218,
            "gold_sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), captain.rank FROM captain WHERE captain.age < [placeholder-type:numeric] GROUP BY captain.rank",
            "ba": "The virtual table provides a count of captains grouped by their rank, specifically for those captains who are younger than a specified age. The placeholder in the WHERE clause represents the age limit for filtering the captains.",
            "question": "Count the number of captains younger than 50 of each rank."
        },
        {
            "sample_id": 6240,
            "gold_sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT ship.name, ship.type, ship.flag FROM ship ORDER BY ship.built_year LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of ship names, their types, and the flags they are registered under from the 'ship' table. The results are ordered by the year the ships were built, and the number of results is limited by a placeholder for numeric values.",
            "question": "What is the name, type, and flag of the ship that was built in the most recent year?"
        },
        {
            "sample_id": 6238,
            "gold_sql": "SELECT count(*) FROM ship",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ship",
            "ba": "The virtual table provides a count of all ships from the 'ship' table.",
            "question": "Count the number of ships."
        },
        {
            "sample_id": 6223,
            "gold_sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT captain.rank FROM captain GROUP BY captain.rank ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique ranks of captains from the 'captain' table, grouped by rank and ordered by the count of captains in each rank. The placeholder in the LIMIT clause allows for specifying the maximum number of ranks to return.",
            "question": "Which rank is the most common among captains?"
        },
        {
            "sample_id": 6253,
            "gold_sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
            "gold_complexity": 12,
            "vt": "SELECT captain.name, captain.class FROM ship WHERE NOT captain.ship_id IN (SELECT captain.ship_id FROM captain)",
            "ba": "The virtual table describes the names and class designations of captains from the 'captain' table who do not command any ships listed in the 'ship' table. The placeholder in the WHERE clause represents the condition to filter out captains based on their ship IDs.",
            "question": "what are the names and classes of the ships that do not have any captain yet?"
        },
        {
            "sample_id": 6215,
            "gold_sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), captain.rank FROM captain GROUP BY captain.rank",
            "ba": "The virtual table provides a count of captains grouped by their rank from the 'captain' table. The placeholder in the SELECT clause indicates that the query will return the number of captains for each rank.",
            "question": "How many captains are in each rank?"
        },
        {
            "sample_id": 6230,
            "gold_sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS",
            "gold_complexity": 9,
            "vt": "SELECT AVG(captain.age), MIN(captain.age), captain.class FROM captain GROUP BY captain.class",
            "ba": "The virtual table provides the average and minimum age of captains grouped by their class designation. It aggregates data from the 'captain' table, allowing for insights into the age distribution of captains within different classes.",
            "question": "Return the average and minimum age of captains in each class."
        },
        {
            "sample_id": 6234,
            "gold_sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
            "gold_complexity": 7,
            "vt": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line'",
            "ba": "The virtual table provides a list of ranks from the 'captain' table, excluding those ranks associated with captains who command a 'Third-rate ship of the line'. This is achieved by using the EXCEPT clause to filter out the specified class of ships.",
            "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?"
        },
        {
            "sample_id": 6248,
            "gold_sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'",
            "gold_complexity": 7,
            "vt": "SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta'",
            "ba": "The virtual table identifies the types of ships that are registered under both the Panama and Malta flags. It uses an INTERSECT operation to find common ship types between the two specified flags.",
            "question": "What types of ships have both ships that have Panama Flags and Malta flags?"
        }
    ],
    "gas_company": [
        {
            "sample_id": 2005,
            "gold_sql": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
            "gold_complexity": 8,
            "vt": "SELECT company.headquarters, COUNT(*) FROM company GROUP BY company.headquarters",
            "ba": "The virtual table summarizes the number of companies located in each headquarters location from the 'company' table. The query groups the results by the headquarters column to count how many companies are situated in each unique location.",
            "question": "List all headquarters and the number of companies in each headquarter."
        },
        {
            "sample_id": 2037,
            "gold_sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
            "gold_complexity": 11,
            "vt": "SELECT gas_station.location, gas_station.representative_name FROM station_company JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY company.assets_billion LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the locations and representative names of gas stations associated with companies, ordered by the companies' total assets. The placeholder in the LIMIT clause represents the maximum number of results to return.",
            "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts."
        },
        {
            "sample_id": 2010,
            "gold_sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT company.main_industry, COUNT(*) FROM company GROUP BY company.main_industry ORDER BY SUM(company.market_value) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of companies grouped by their primary industry from the 'company' table. It orders the results based on the total market value of each industry and limits the output to a specified number of industries.",
            "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?"
        },
        {
            "sample_id": 2025,
            "gold_sql": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
            "gold_complexity": 12,
            "vt": "SELECT company.company, company.main_industry FROM company WHERE NOT company.company_id IN (SELECT company.company_id FROM station_company)",
            "ba": "The virtual table lists the names and primary industries of companies that do not have any associated gas stations in the 'station_company' table. The query filters out companies that are linked to any gas station by checking the 'company_id' against those present in the 'station_company' table.",
            "question": "Show company name and main industry without a gas station."
        },
        {
            "sample_id": 2018,
            "gold_sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
            "gold_complexity": 10,
            "vt": "SELECT gas_station.location, COUNT(*) FROM gas_station GROUP BY gas_station.location ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the number of gas stations located in each geographical location. It groups the results by the location of the gas stations and orders them based on the count of stations in ascending order.",
            "question": "For each location, how many gas stations are there in order?"
        },
        {
            "sample_id": 1998,
            "gold_sql": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
            "gold_complexity": 8,
            "vt": "SELECT company.company, company.main_industry FROM company WHERE company.headquarters <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and primary industries of companies from the 'company' table that do not have a specified headquarters location. The placeholder in the WHERE clause represents the headquarters' location that is being excluded.",
            "question": "What are the companies and main industries of all companies that are not headquartered in the United States?"
        },
        {
            "sample_id": 1999,
            "gold_sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
            "gold_complexity": 8,
            "vt": "SELECT company.company, company.headquarters FROM company ORDER BY company.market_value",
            "ba": "The virtual table lists the names and headquarters of companies from the 'company' table, ordered by their market value. This allows users to see which companies have the highest market value along with their respective headquarters locations.",
            "question": "Show all company names and headquarters in the descending order of market value."
        },
        {
            "sample_id": 1996,
            "gold_sql": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
            "gold_complexity": 8,
            "vt": "SELECT company.company, company.rank FROM company ORDER BY company.sales_billion",
            "ba": "The virtual table lists the names and ranks of companies from the 'company' table, ordered by their total sales revenue in billions.",
            "question": "What is the name and rank of every company ordered by descending number of sales?"
        },
        {
            "sample_id": 2038,
            "gold_sql": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
            "gold_complexity": 11,
            "vt": "SELECT gas_station.location, gas_station.representative_name FROM station_company JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY company.assets_billion LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the geographical location and representative name of gas stations associated with companies, ordered by the assets held by those companies. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?"
        },
        {
            "sample_id": 2024,
            "gold_sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
            "gold_complexity": 9,
            "vt": "SELECT company.company, COUNT(*) FROM station_company JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY station_company.company_id",
            "ba": "The virtual table summarizes the number of gas stations associated with each company from the 'station_company' table, joining it with the 'company' table to retrieve the company names. The result is grouped by the company identifier to count the total number of stations for each company.",
            "question": "For each company id, what are the companies and how many gas stations does each one operate?"
        },
        {
            "sample_id": 2030,
            "gold_sql": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
            "gold_complexity": 8,
            "vt": "SELECT gas_station.location FROM station_company JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE company.market_value > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the geographical locations of gas stations that are associated with companies having a market value exceeding a specified threshold. It involves joining the 'station_company' table with the 'company' table to filter based on the market value, and then joining with the 'gas_station' table to access the location data.",
            "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?"
        },
        {
            "sample_id": 2011,
            "gold_sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT company.headquarters FROM company WHERE company.main_industry = '[placeholder-type:string]' GROUP BY company.headquarters HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the headquarters locations of companies from the 'company' table that operate in a specific industry. The results are grouped by headquarters, and only those locations with a count of companies greater than or equal to a specified number are included.",
            "question": "Show headquarters with at least two companies in the banking industry."
        },
        {
            "sample_id": 2022,
            "gold_sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
            "gold_complexity": 7,
            "vt": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking'",
            "ba": "The virtual table retrieves the headquarters locations of companies from the 'company' table, excluding those that belong to the 'Banking' industry. The query uses the EXCEPT clause to filter out any headquarters associated with companies in the specified industry.",
            "question": "What are the headquarters without companies that are in the banking industry?"
        },
        {
            "sample_id": 2035,
            "gold_sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
            "gold_complexity": 14,
            "vt": "SELECT company.rank, company.company, company.market_value FROM company WHERE company.main_industry = '[placeholder-type:string]' ORDER BY company.sales_billion, company.profits_billion",
            "ba": "The virtual table describes the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the main industry of interest, allowing users to filter companies based on their primary sector of operation. The results are ordered by total sales and profits, providing insight into the performance of companies within that industry.",
            "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion."
        },
        {
            "sample_id": 2009,
            "gold_sql": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT company.main_industry, COUNT(*) FROM company GROUP BY company.main_industry ORDER BY SUM(company.market_value) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of companies grouped by their primary industry from the 'company' table. It orders the results based on the total market value of each industry and limits the output to a specified number of industries.",
            "question": "List the main industry with highest total market value and its number of companies."
        },
        {
            "sample_id": 2007,
            "gold_sql": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
            "gold_complexity": 8,
            "vt": "SELECT company.main_industry, SUM(company.market_value) FROM company GROUP BY company.main_industry",
            "ba": "The virtual table summarizes the total market value of companies grouped by their primary industry. It retrieves the main industry from the 'company' table and calculates the sum of the market values for each industry category.",
            "question": "Show all main industry and total market value in each industry."
        },
        {
            "sample_id": 2016,
            "gold_sql": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM gas_station WHERE gas_station.open_year BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of gas stations that were opened within a specific range of years. The placeholders represent the start and end years for filtering the gas stations based on their opening year.",
            "question": "What is the total number of gas stations that opened between 2000 and 2005?"
        },
        {
            "sample_id": 2013,
            "gold_sql": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
            "gold_complexity": 10,
            "vt": "SELECT gas_station.station_id, gas_station.location, gas_station.manager_name FROM gas_station ORDER BY gas_station.open_year",
            "ba": "The virtual table lists the unique identifier, geographical location, and manager's name of gas stations from the 'gas_station' table, ordered by the year they were opened.",
            "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year."
        },
        {
            "sample_id": 2017,
            "gold_sql": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
            "gold_complexity": 10,
            "vt": "SELECT gas_station.location, COUNT(*) FROM gas_station GROUP BY gas_station.location ORDER BY COUNT(*)",
            "ba": "The virtual table provides a count of gas stations grouped by their geographical location. The results are ordered by the number of gas stations in each location, allowing for an easy comparison of how many stations exist in different areas.",
            "question": "Show all locations and the number of gas stations in each location ordered by the count."
        },
        {
            "sample_id": 2019,
            "gold_sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
            "gold_complexity": 7,
            "vt": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
            "ba": "The virtual table identifies the headquarters of companies that operate in both the 'Banking' and 'Oil and gas' industries. It uses an INTERSECT operation to find common headquarters between the two specified industries.",
            "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas."
        },
        {
            "sample_id": 2036,
            "gold_sql": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
            "gold_complexity": 14,
            "vt": "SELECT company.rank, company.company, company.market_value FROM company WHERE company.main_industry = '[placeholder-type:string]' ORDER BY company.sales_billion, company.profits_billion",
            "ba": "The virtual table describes the rank, name, and market value of companies from the 'company' table that operate in a specific industry. The placeholder in the WHERE clause represents the primary industry of interest, and the results are ordered by total sales and profits in billions.",
            "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?"
        },
        {
            "sample_id": 2000,
            "gold_sql": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
            "gold_complexity": 8,
            "vt": "SELECT company.company, company.headquarters FROM company ORDER BY company.market_value",
            "ba": "The virtual table lists the names and headquarters locations of companies from the 'company' table, ordered by their market value. This allows users to see which companies have the highest market value along with where they are located.",
            "question": "What are the names and headquarters of all companies ordered by descending market value?"
        },
        {
            "sample_id": 2012,
            "gold_sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT company.headquarters FROM company WHERE company.main_industry = '[placeholder-type:string]' GROUP BY company.headquarters HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the headquarters locations of companies from the 'company' table that operate in a specific industry. It groups the results by headquarters and filters to include only those locations that have a count of companies greater than or equal to a specified number.",
            "question": "What are the headquarters with at least two companies in the banking industry?"
        },
        {
            "sample_id": 2034,
            "gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year",
            "gold_complexity": 6,
            "vt": "SELECT gas_station.location FROM gas_station ORDER BY gas_station.open_year",
            "ba": "The virtual table lists the geographical locations of gas stations from the 'gas_station' table, ordered by the year each gas station was opened.",
            "question": "What are the locations of all the gas stations ordered by opening year?"
        },
        {
            "sample_id": 2033,
            "gold_sql": "SELECT LOCATION FROM gas_station ORDER BY open_year",
            "gold_complexity": 6,
            "vt": "SELECT gas_station.location FROM gas_station ORDER BY gas_station.open_year",
            "ba": "The virtual table lists the geographical locations of gas stations from the 'gas_station' table, ordered by the year each gas station was opened.",
            "question": "order all gas station locations by the opening year."
        },
        {
            "sample_id": 2001,
            "gold_sql": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
            "gold_complexity": 6,
            "vt": "SELECT MIN(company.market_value), MAX(company.market_value), AVG(company.market_value) FROM company",
            "ba": "The virtual table provides the minimum, maximum, and average market value of companies from the 'company' table. This allows users to analyze the range and average of market values across all companies listed.",
            "question": "Show minimum, maximum, and average market value for all companies."
        },
        {
            "sample_id": 2031,
            "gold_sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT gas_station.manager_name FROM gas_station WHERE gas_station.open_year > [placeholder-type:numeric] GROUP BY gas_station.manager_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of gas station managers from the 'gas_station' table who have managed gas stations opened after a certain year. The results are grouped by manager names and ordered by the count of gas stations they manage, with a limit on the number of results returned.",
            "question": "Show the manager name with most number of gas stations opened after 2000."
        }
    ],
    "dog_kennels": [
        {
            "sample_id": 7986,
            "gold_sql": "SELECT max(charge_amount) FROM Charges",
            "gold_complexity": 4,
            "vt": "SELECT MAX(charges.charge_amount) FROM charges",
            "ba": "The virtual table retrieves the maximum charge amount from the 'charges' table, which contains various types of charges associated with services or fees.",
            "question": "What is the charge amount of the most expensive charge type?"
        },
        {
            "sample_id": 7934,
            "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT owners.owner_id, owners.zip_code FROM owners JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of owners and their associated zip codes, specifically focusing on those who have had treatments for their dogs. It aggregates the total cost of treatments for each owner, allowing for an ordered list based on the sum of treatment costs. The placeholder in the LIMIT clause indicates the maximum number of results to return.",
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs."
        },
        {
            "sample_id": 7928,
            "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT breeds.breed_name FROM breeds JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of dog breeds from the 'breeds' table. It joins with the 'dogs' table to count how many dogs belong to each breed, grouping the results by breed name. The results are ordered by the number of dogs in each breed, and a limit is applied to restrict the number of breeds returned based on a specified numeric value.",
            "question": "Which breed do the most dogs have? Give me the breed name."
        },
        {
            "sample_id": 7937,
            "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "gold_complexity": 14,
            "vt": "SELECT DISTINCT professionals.first_name, professionals.last_name FROM professionals, Treatments AS T2 WHERE treatments.cost_of_treatment < (SELECT AVG(treatments.cost_of_treatment) FROM Treatments)",
            "ba": "The virtual table lists the distinct first and last names of professionals who have administered treatments that cost less than the average cost of all treatments recorded in the database.",
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?"
        },
        {
            "sample_id": 7956,
            "gold_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
            "gold_complexity": 6,
            "vt": "SELECT professionals.email_address FROM professionals WHERE professionals.state = '[placeholder-type:string]' OR professionals.state = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the email addresses of professionals from the 'professionals' table who reside in either of two specified states. The placeholders in the WHERE clause represent the names of the states being queried.",
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?"
        },
        {
            "sample_id": 7919,
            "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "gold_complexity": 10,
            "vt": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "ba": "The virtual table combines the first names of professionals and owners, excluding the names of dogs from the 'Dogs' table. This allows for a list of individuals who are either professionals or owners but not dogs.",
            "question": "Which first names are used for professionals or owners but are not used as dog names?"
        },
        {
            "sample_id": 7988,
            "gold_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
            "gold_complexity": 8,
            "vt": "SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals",
            "ba": "The virtual table provides the email address, cell number, and home phone number of professionals from the 'professionals' table.",
            "question": "What are the email, cell phone and home phone of each professional?"
        },
        {
            "sample_id": 7959,
            "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT dog_id) FROM treatments",
            "ba": "The virtual table counts the number of unique dogs that have received treatments from the 'treatments' table. It uses the 'dog_id' to ensure that each dog is only counted once, regardless of how many treatments they have received.",
            "question": "How many dogs went through any treatments?"
        },
        {
            "sample_id": 7939,
            "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
            "gold_complexity": 7,
            "vt": "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "ba": "The virtual table describes the dates of treatments administered to dogs along with the first names of the professionals who provided those treatments. The query joins the 'treatments' table with the 'professionals' table to link each treatment record to the corresponding professional using their unique identifiers.",
            "question": "List the date of each treatment, together with the first name of the professional who operated it."
        },
        {
            "sample_id": 7981,
            "gold_sql": "SELECT max(age) FROM Dogs",
            "gold_complexity": 4,
            "vt": "SELECT MAX(dogs.age) FROM dogs",
            "ba": "The virtual table retrieves the maximum age of dogs from the 'dogs' table.",
            "question": "What is the age of the oldest dog?"
        },
        {
            "sample_id": 7990,
            "gold_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT dogs.breed_code, dogs.size_code FROM dogs",
            "ba": "The virtual table provides a distinct list of breed codes and size codes for dogs from the 'dogs' table. This allows users to see the unique combinations of breeds and sizes available without duplicates.",
            "question": "Find the distinct breed type and size type combinations for dogs."
        },
        {
            "sample_id": 7931,
            "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_types.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of treatment types from the 'treatment_types' table, specifically focusing on their descriptions. It joins with the 'treatments' table to aggregate the total cost of treatments associated with each treatment type. The results are grouped by treatment type and ordered by the total cost, allowing users to see which treatment types have the highest associated costs. The placeholder in the LIMIT clause allows users to specify how many treatment types they want to retrieve.",
            "question": "What is the description of the treatment type that costs the least money in total?"
        },
        {
            "sample_id": 7929,
            "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT owners.owner_id, owners.last_name FROM owners JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY owners.owner_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique owners along with their last names from the 'owners' table. It joins the 'dogs' table to link each dog to its owner and the 'treatments' table to count the number of treatments associated with each dog. The results are grouped by owner ID and ordered by the count of treatments, allowing for a limit on the number of results returned.",
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name."
        },
        {
            "sample_id": 7914,
            "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "gold_complexity": 10,
            "vt": "SELECT AVG(dogs.age) FROM dogs WHERE dogs.dog_id IN (SELECT dogs.dog_id FROM Treatments)",
            "ba": "The virtual table calculates the average age of dogs that have received treatments. It retrieves the dog IDs from the 'dogs' table that are linked to the 'treatments' table, ensuring only those dogs that have undergone treatment are considered in the average age calculation.",
            "question": "Find the average age of the dogs who went through treatments."
        },
        {
            "sample_id": 7911,
            "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "gold_complexity": 6,
            "vt": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "ba": "The virtual table identifies the states where both owners and professionals reside by selecting the 'state' column from both the 'Owners' and 'Professionals' tables and finding the intersection of these two sets.",
            "question": "Which states have both owners and professionals living there?"
        },
        {
            "sample_id": 7960,
            "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT dog_id) FROM treatments",
            "ba": "The virtual table counts the number of unique dogs that have received treatments from the 'treatments' table. It uses the 'dog_id' to ensure that each dog is only counted once, regardless of how many treatments they have received.",
            "question": "Count the number of dogs that went through a treatment."
        },
        {
            "sample_id": 7974,
            "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM owners WHERE NOT owners.owner_id IN (SELECT owners.owner_id FROM Dogs)",
            "ba": "The virtual table counts the number of owners from the 'owners' table who do not have any associated dogs in the 'dogs' table. The subquery identifies owners who have dogs, and the main query counts those who are not included in that list.",
            "question": "Find the number of owners who do not own any dogs at this moment."
        },
        {
            "sample_id": 7938,
            "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "gold_complexity": 14,
            "vt": "SELECT DISTINCT professionals.first_name, professionals.last_name FROM professionals, Treatments AS T2 WHERE treatments.cost_of_treatment < (SELECT AVG(treatments.cost_of_treatment) FROM Treatments)",
            "ba": "The virtual table lists the distinct first and last names of professionals who have administered treatments that cost less than the average cost of all treatments recorded in the database.",
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names."
        },
        {
            "sample_id": 7925,
            "gold_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
            "gold_complexity": 13,
            "vt": "SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM professionals JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY professionals.professional_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers, roles, and first names of professionals from the 'professionals' table who have administered a minimum number of treatments. The placeholder in the HAVING clause represents the minimum count of treatments that a professional must have administered.",
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name."
        },
        {
            "sample_id": 7948,
            "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "gold_complexity": 17,
            "vt": "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE dogs.breed_code = (SELECT dogs.breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
            "ba": "The virtual table describes the names of dogs and the dates they received treatments from the 'dogs' and 'treatments' tables. It specifically filters for the breed of dog that has the least number of entries in the database, using a subquery to identify this breed based on the count of dogs per breed.",
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates."
        },
        {
            "sample_id": 7985,
            "gold_sql": "SELECT max(charge_amount) FROM Charges",
            "gold_complexity": 4,
            "vt": "SELECT MAX(charges.charge_amount) FROM charges",
            "ba": "The virtual table retrieves the maximum charge amount from the 'charges' table, which contains various types of charges associated with services or fees.",
            "question": "How much does the most expensive charge type costs?"
        },
        {
            "sample_id": 7946,
            "gold_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
            "gold_complexity": 7,
            "vt": "SELECT owners.first_name, dogs.name FROM owners JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "ba": "The virtual table describes the first names of dog owners and the names of their dogs from the 'owners' and 'dogs' tables. It uses a JOIN operation to link the two tables based on the owner_id, allowing us to retrieve the relevant information about each owner and their corresponding dog.",
            "question": "What are each owner's first name and their dogs's name?"
        },
        {
            "sample_id": 7924,
            "gold_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT dogs.owner_id, owners.first_name, owners.last_name FROM dogs JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY dogs.owner_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique dog owners along with their first and last names from the 'dogs' and 'owners' tables. It groups the results by the owner's ID to ensure each owner is listed only once, and orders the results based on the number of dogs each owner has, limiting the output to a specified number of owners.",
            "question": "Return the owner id, first name and last name of the owner who has the most dogs."
        },
        {
            "sample_id": 7933,
            "gold_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT owners.owner_id, owners.zip_code FROM owners JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of owners and their associated zip codes from the 'owners' table, while also linking to the 'dogs' and 'treatments' tables. It aggregates the total cost of treatments for each owner, allowing for an ordered list based on the sum of treatment costs. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code."
        },
        {
            "sample_id": 7947,
            "gold_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "gold_complexity": 17,
            "vt": "SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE dogs.breed_code = (SELECT dogs.breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)",
            "ba": "The virtual table describes the names of dogs and the dates they received treatments from the 'dogs' and 'treatments' tables. It specifically filters for the breed of dog that has the least number of entries in the database, ensuring that only the least common breed's dogs are included in the results.",
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them."
        },
        {
            "sample_id": 7982,
            "gold_sql": "SELECT max(age) FROM Dogs",
            "gold_complexity": 4,
            "vt": "SELECT MAX(dogs.age) FROM dogs",
            "ba": "The virtual table retrieves the maximum age of dogs from the 'dogs' table.",
            "question": "Tell me the age of the oldest dog."
        },
        {
            "sample_id": 7971,
            "gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM dogs WHERE NOT dogs.dog_id IN (SELECT dogs.dog_id FROM Treatments)",
            "ba": "The virtual table counts the number of dogs from the 'dogs' table that do not have any associated treatment records in the 'treatments' table. This is determined by checking if the dog IDs in the 'dogs' table are not present in the list of dog IDs from the 'treatments' table.",
            "question": "How many dogs have not gone through any treatment?"
        },
        {
            "sample_id": 7927,
            "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT breeds.breed_name FROM breeds JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of dog breeds from the 'breeds' table, joining with the 'dogs' table to count how many dogs belong to each breed. The results are grouped by breed name and ordered by the count of dogs in descending order, limiting the output to a specified number of breeds.",
            "question": "What is the name of the breed with the most dogs?"
        },
        {
            "sample_id": 7940,
            "gold_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
            "gold_complexity": 7,
            "vt": "SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "ba": "The virtual table displays the date of treatment and the first name of the professional who administered the treatment from the 'treatments' table, joined with the 'professionals' table to link each treatment to the corresponding professional.",
            "question": "What are the date and the operating professional's first name of each treatment?"
        },
        {
            "sample_id": 7978,
            "gold_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
            "gold_complexity": 10,
            "vt": "SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names, ages, and weights of dogs from the 'dogs' table that are marked as abandoned. The placeholder in the WHERE clause represents the indicator for abandonment status (yes/no).",
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables."
        },
        {
            "sample_id": 7972,
            "gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM dogs WHERE NOT dogs.dog_id IN (SELECT dogs.dog_id FROM treatments)",
            "ba": "The virtual table counts the number of dogs from the 'dogs' table that do not have any associated treatment records in the 'treatments' table. This is determined by checking if the dog IDs in the 'dogs' table are not present in the list of dog IDs that have treatments.",
            "question": "Tell me the number of dogs that have not received any treatment ."
        },
        {
            "sample_id": 7935,
            "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY professionals.professional_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of professionals along with their cell numbers who have administered a certain number of treatments. The query joins the 'professionals' table with the 'treatments' table to associate each professional with the treatments they have provided. The result is grouped by the professional's ID, and only those professionals who have administered a specified minimum number of treatments are included in the output.",
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone."
        },
        {
            "sample_id": 7984,
            "gold_sql": "SELECT charge_type ,  charge_amount FROM Charges",
            "gold_complexity": 6,
            "vt": "SELECT charges.charge_type, charges.charge_amount FROM charges",
            "ba": "The virtual table displays the types and amounts of charges from the 'charges' table. The placeholders represent the specific charge type and amount that can be filtered or modified as needed.",
            "question": "List each charge type and its amount."
        },
        {
            "sample_id": 7954,
            "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
            "gold_complexity": 11,
            "vt": "SELECT owners.last_name FROM owners JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE dogs.age = (SELECT MAX(dogs.age) FROM Dogs)",
            "ba": "The virtual table lists the last names of owners from the 'owners' table who own the oldest dog in the 'dogs' table. It uses a subquery to find the maximum age of dogs and filters the results accordingly.",
            "question": "Who owns the youngest dog? Give me his or her last name."
        },
        {
            "sample_id": 7930,
            "gold_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT owners.owner_id, owners.last_name FROM owners JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY owners.owner_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique owners along with their last names from the 'owners' table. It joins the 'dogs' table to link each dog to its owner and the 'treatments' table to count the number of treatments associated with each dog. The results are grouped by owner ID and ordered by the count of treatments, allowing for a limit on the number of results returned.",
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs."
        },
        {
            "sample_id": 7942,
            "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
            "gold_complexity": 7,
            "vt": "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "ba": "The virtual table displays the cost of treatments along with their descriptions from the 'treatments' and 'treatment_types' tables. The query joins these two tables based on the treatment type code to provide detailed information about each treatment's cost and type.",
            "question": "What are the cost and treatment type description of each treatment?"
        },
        {
            "sample_id": 7916,
            "gold_sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
            "gold_complexity": 16,
            "vt": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) > 2",
            "ba": "The virtual table provides a list of professionals from the 'Professionals' table who are located in the state of Indiana, along with their professional ID, last name, and cell number. Additionally, it includes professionals who have administered more than two treatments, ensuring that only those with significant involvement in treatment are included.",
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments."
        },
        {
            "sample_id": 7992,
            "gold_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "ba": "The virtual table describes the distinct first names of professionals along with the descriptions of the treatment types they administered. It combines data from the 'professionals' table and the 'treatments' table, linking them through the professional's ID, and further connects to the 'treatment_types' table to provide detailed descriptions of each treatment type.",
            "question": "What are each professional's first name and description of the treatment they have performed?"
        },
        {
            "sample_id": 7957,
            "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
            "gold_complexity": 6,
            "vt": "SELECT dogs.date_arrived, dogs.date_departed FROM dogs",
            "ba": "The virtual table provides information about the arrival and departure dates of dogs from the 'dogs' table. It allows users to track when each dog arrived at the facility and when they left, which is essential for managing the dog's stay and adoption process.",
            "question": "What are the arriving date and the departing date of all the dogs?"
        },
        {
            "sample_id": 7958,
            "gold_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
            "gold_complexity": 6,
            "vt": "SELECT dogs.date_arrived, dogs.date_departed FROM dogs",
            "ba": "The virtual table provides information about the arrival and departure dates of dogs from the 'dogs' table. It allows users to track when each dog arrived at the facility and when they left, which is essential for managing the dog's stay and adoption process.",
            "question": "List the arrival date and the departure date for all the dogs."
        },
        {
            "sample_id": 7941,
            "gold_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
            "gold_complexity": 7,
            "vt": "SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "ba": "The virtual table displays the cost of treatments along with their descriptions from the 'treatments' and 'treatment_types' tables. The query joins these two tables based on the treatment type code to provide a comprehensive view of treatment costs and their corresponding types.",
            "question": "List the cost of each treatment and the corresponding treatment type description."
        },
        {
            "sample_id": 7918,
            "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
            "gold_complexity": 14,
            "vt": "SELECT dogs.name FROM dogs WHERE NOT dogs.dog_id IN (SELECT dogs.dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
            "ba": "The virtual table lists the names of dogs from the 'dogs' table that have not received treatments totaling more than a specified amount. The subquery identifies dogs that have treatment costs exceeding that amount, and the main query filters out those dogs from the results.",
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?"
        },
        {
            "sample_id": 7961,
            "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT professional_id) FROM treatments",
            "ba": "The virtual table counts the number of unique professionals who have administered treatments from the 'treatments' table. The placeholder in the COUNT function represents the professional's identifier, ensuring that only distinct professionals are counted.",
            "question": "How many professionals have performed any treatment to dogs?"
        },
        {
            "sample_id": 7944,
            "gold_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
            "gold_complexity": 9,
            "vt": "SELECT owners.first_name, owners.last_name, dogs.size_code FROM owners JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "ba": "The virtual table describes the first and last names of dog owners along with the size category of their dogs. It retrieves data from the 'owners' table and joins it with the 'dogs' table based on the owner_id, allowing us to see which owners have dogs of different size categories.",
            "question": "What are each owner's first name, last name, and the size of their dog?"
        },
        {
            "sample_id": 7952,
            "gold_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT dogs.date_arrived, dogs.date_departed FROM dogs JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "ba": "The virtual table provides a distinct list of arrival and departure dates for dogs from the 'dogs' table, specifically focusing on those that have undergone treatments. It joins the 'dogs' table with the 'treatments' table to ensure that only dogs with treatment records are included in the results.",
            "question": "Find the arriving date and the departing date of the dogs that received a treatment."
        },
        {
            "sample_id": 7969,
            "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.date_of_treatment LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the cost of treatments from the 'treatments' table, ordered by the date of treatment. The placeholder in the LIMIT clause allows the user to specify the number of treatment costs to retrieve.",
            "question": "How much does the most recent treatment cost?"
        },
        {
            "sample_id": 7917,
            "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
            "gold_complexity": 14,
            "vt": "SELECT dogs.name FROM dogs WHERE NOT dogs.dog_id IN (SELECT dogs.dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)",
            "ba": "The virtual table lists the names of dogs from the 'dogs' table that have not received treatments totaling more than a specified amount. The subquery identifies dogs that have treatment costs exceeding that amount, and the main query filters out those dogs from the results.",
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names ."
        },
        {
            "sample_id": 7921,
            "gold_sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
            "gold_complexity": 10,
            "vt": "SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "ba": "The virtual table lists the identifiers, roles, and email addresses of professionals from the 'Professionals' table who have not administered any treatments. The query uses an EXCEPT clause to exclude those professionals who are linked to any records in the 'Treatments' table.",
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email."
        },
        {
            "sample_id": 7936,
            "gold_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT professionals.professional_id, professionals.cell_number FROM professionals JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY professionals.professional_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of professionals along with their cell numbers who have administered a certain number of treatments. The query joins the 'professionals' table with the 'treatments' table to associate each professional with the treatments they have provided. The results are grouped by the professional's ID, and only those professionals who have administered a specified minimum number of treatments are included in the output.",
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments."
        }
    ],
    "small_bank_1": [
        {
            "sample_id": 1808,
            "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
            "gold_complexity": 11,
            "vt": "SELECT accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid WHERE checking.balance < (SELECT AVG(checking.balance) FROM checking)",
            "ba": "The virtual table describes the names of customers from the 'accounts' table who have a checking account balance that is below the average balance of all checking accounts. The query uses a JOIN to link the 'accounts' and 'checking' tables based on the customer ID, and it includes a subquery to calculate the average checking account balance.",
            "question": "Find the name of accounts whose checking balance is below the average checking balance."
        },
        {
            "sample_id": 1812,
            "gold_sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
            "gold_complexity": 9,
            "vt": "SELECT checking.balance + savings.balance FROM checking JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY checking.balance + savings.balance",
            "ba": "The virtual table calculates the total balance by summing the balances from both the checking and savings accounts for each customer. It joins the 'checking' and 'savings' tables on the 'custid' to ensure that the balances correspond to the same customer. The result is ordered by the total balance in ascending order.",
            "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order."
        },
        {
            "sample_id": 1809,
            "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
            "gold_complexity": 11,
            "vt": "SELECT accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid WHERE checking.balance < (SELECT AVG(checking.balance) FROM checking)",
            "ba": "The virtual table describes the names of customers from the 'accounts' table who have a checking account balance that is below the average balance of all checking accounts. The query uses a JOIN to link the 'accounts' and 'checking' tables based on the customer ID, and it includes a subquery to calculate the average balance for filtering.",
            "question": "What are the names of customers with checking balances lower than the average checking balance?"
        },
        {
            "sample_id": 1806,
            "gold_sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
            "gold_complexity": 9,
            "vt": "SELECT SUM(savings.balance), accounts.name FROM accounts JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY accounts.name",
            "ba": "The virtual table summarizes the total savings balance for each customer by joining the 'accounts' and 'savings' tables. It groups the results by the customer's name to provide a clear view of their total savings.",
            "question": "Find the total saving balance for each account name."
        },
        {
            "sample_id": 1814,
            "gold_sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT checking.balance, accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY savings.balance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the checking account balances along with the corresponding customer names from the 'accounts' table. It combines data from the 'checking' and 'savings' tables based on the unique customer identifier, ensuring that only customers with both checking and savings accounts are included. The results are ordered by the savings account balance, and a limit is applied to restrict the number of records returned.",
            "question": "Find the name and checking balance of the account with the lowest saving balance."
        },
        {
            "sample_id": 1785,
            "gold_sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM savings WHERE savings.balance > (SELECT AVG(savings.balance) FROM savings)",
            "ba": "The virtual table counts the number of customers in the 'savings' table whose balance is greater than the average balance of all savings accounts. It uses a subquery to calculate the average balance from the 'savings' table.",
            "question": "Find the number of accounts with a savings balance that is higher than the average savings balance."
        },
        {
            "sample_id": 1793,
            "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
            "gold_complexity": 17,
            "vt": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM savings)",
            "ba": "The virtual table identifies customers who have a checking account balance above the average checking account balance and a savings account balance below the average savings account balance. It combines data from the 'accounts', 'checking', and 'savings' tables using joins and subqueries to filter the results based on the specified conditions.",
            "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?"
        },
        {
            "sample_id": 1803,
            "gold_sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT accounts.name, checking.balance FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY savings.balance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers along with their checking account balances from the 'accounts' and 'checking' tables, while also ensuring that the data is linked to the 'savings' table. The results are ordered by the savings account balance, and a limit is applied to the number of records returned.",
            "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?"
        },
        {
            "sample_id": 1811,
            "gold_sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT savings.balance FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY checking.balance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the current balance from the savings account for customers who also have a checking account. It joins the 'accounts' table with both the 'checking' and 'savings' tables based on the unique customer identifier, ensuring that only customers with both account types are considered. The results are ordered by the balance in the checking account, and a limit is applied to restrict the number of results returned.",
            "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?"
        },
        {
            "sample_id": 1819,
            "gold_sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
            "gold_complexity": 13,
            "vt": "SELECT checking.balance, savings.balance, accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY checking.balance + savings.balance",
            "ba": "The virtual table presents the combined balances of checking and savings accounts along with the customer's name from the 'accounts' table. It joins the 'checking' and 'savings' tables based on the unique customer identifier, ensuring that the data reflects the correct customer information. The results are ordered by the total balance across both account types.",
            "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?"
        },
        {
            "sample_id": 1801,
            "gold_sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
            "gold_complexity": 14,
            "vt": "SELECT accounts.name, checking.balance + savings.balance FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE savings.balance > (SELECT AVG(savings.balance) FROM savings)",
            "ba": "The virtual table summarizes the names of customers along with the total balance from both their checking and savings accounts, specifically for those customers whose savings account balance exceeds the average savings balance across all customers.",
            "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?"
        },
        {
            "sample_id": 1807,
            "gold_sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
            "gold_complexity": 9,
            "vt": "SELECT SUM(savings.balance), accounts.name FROM accounts JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY accounts.name",
            "ba": "The virtual table summarizes the total savings balance for each customer by joining the 'accounts' and 'savings' tables. It calculates the sum of the savings balance and groups the results by the customer's name.",
            "question": "What are the names of customers with accounts, and what are the total savings balances for each?"
        },
        {
            "sample_id": 1816,
            "gold_sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
            "gold_complexity": 10,
            "vt": "SELECT checking.balance, savings.balance, accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid",
            "ba": "The virtual table displays the current balances of both checking and savings accounts along with the customer's full name from the 'accounts' table. It combines data from three tables: 'accounts', 'checking', and 'savings', using the customer identifier to link them together.",
            "question": "Find the name, checking balance and saving balance of all accounts in the bank."
        },
        {
            "sample_id": 1780,
            "gold_sql": "SELECT sum(balance) FROM checking",
            "gold_complexity": 4,
            "vt": "SELECT SUM(checking.balance) FROM checking",
            "ba": "The virtual table calculates the total balance from all checking accounts in the 'checking' table.",
            "question": "What is the total checking balance in all accounts?"
        },
        {
            "sample_id": 1794,
            "gold_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
            "gold_complexity": 17,
            "vt": "SELECT savings.balance FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid WHERE accounts.name IN (SELECT accounts.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings))",
            "ba": "The virtual table retrieves the savings account balance for customers whose names are associated with savings accounts that have a balance greater than the average balance of all savings accounts. It involves joining the 'accounts' table with the 'checking' table to ensure that the customer identifiers match, and it uses a subquery to filter customers based on their savings account balance.",
            "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance."
        },
        {
            "sample_id": 1776,
            "gold_sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
            "gold_complexity": 7,
            "vt": "SELECT SUM(savings.balance) FROM accounts JOIN savings AS T2 ON T1.custid = T2.custid WHERE accounts.name <> '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total balance from the savings accounts of customers whose names do not match a specified name. It combines data from the 'accounts' and 'savings' tables using a join on the customer ID, ensuring that only relevant records are included in the sum calculation.",
            "question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019."
        },
        {
            "sample_id": 1788,
            "gold_sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
            "gold_complexity": 7,
            "vt": "SELECT checking.balance FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid WHERE accounts.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the current balance in the checking account for customers from the 'accounts' table whose names match a specific pattern. The query joins the 'accounts' table with the 'checking' table using the customer identifier to retrieve the relevant balance information.",
            "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?"
        },
        {
            "sample_id": 1786,
            "gold_sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
            "gold_complexity": 13,
            "vt": "SELECT accounts.custid, accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid WHERE checking.balance < (SELECT MAX(checking.balance) FROM checking)",
            "ba": "The virtual table describes the unique identifiers and full names of customers from the 'accounts' table who have a checking account balance that is less than the maximum balance found in the checking accounts. The query uses a JOIN to link the 'accounts' and 'checking' tables based on the customer ID, and it includes a subquery to determine the maximum checking account balance.",
            "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance."
        },
        {
            "sample_id": 1825,
            "gold_sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT accounts.name, savings.balance FROM accounts JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY savings.balance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers along with their savings account balances from the 'accounts' and 'savings' tables. The query joins these two tables on the customer identifier, ensuring that only customers with savings accounts are included. The results are ordered by the balance in the savings account, and a limit is applied to restrict the number of results returned.",
            "question": "What are names and savings balances of the three accounts with the highest savings balances?"
        },
        {
            "sample_id": 1777,
            "gold_sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
            "gold_complexity": 7,
            "vt": "SELECT SUM(savings.balance) FROM accounts JOIN savings AS T2 ON T1.custid = T2.custid WHERE accounts.name <> '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total balance from the savings accounts of customers whose names do not match a specified name. It combines data from the 'accounts' and 'savings' tables using a join on the customer ID, ensuring that only relevant records are included in the sum calculation.",
            "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?"
        },
        {
            "sample_id": 1798,
            "gold_sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY checking.balance + savings.balance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of customers from the 'accounts' table who have both checking and savings accounts. It combines data from the 'checking' and 'savings' tables by joining them on the customer ID, allowing for the calculation of the total balance across both account types. The results are ordered by the sum of the checking and savings balances, and a limit is applied to restrict the number of results returned.",
            "question": "Find the name of account that has the lowest total checking and saving balance."
        },
        {
            "sample_id": 1796,
            "gold_sql": "SELECT name FROM accounts ORDER BY name",
            "gold_complexity": 6,
            "vt": "SELECT accounts.name FROM accounts ORDER BY accounts.name",
            "ba": "The virtual table lists the names of customers from the 'accounts' table, sorted in alphabetical order. This allows for easy viewing of customer names without any filtering conditions.",
            "question": "List all customers\u2019 names in the alphabetical order."
        },
        {
            "sample_id": 1815,
            "gold_sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT checking.balance, accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY savings.balance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the checking account balances along with the corresponding customer names from the 'accounts' table. It combines data from the 'checking' and 'savings' tables based on the unique customer identifier, ensuring that only customers with both checking and savings accounts are included. The results are ordered by the savings account balance, and a limit is applied to control the number of records returned.",
            "question": "What is the name and checking balance of the account which has the lowest savings balance?"
        },
        {
            "sample_id": 1797,
            "gold_sql": "SELECT name FROM accounts ORDER BY name",
            "gold_complexity": 6,
            "vt": "SELECT accounts.name FROM accounts ORDER BY accounts.name",
            "ba": "The virtual table lists the names of customers from the 'accounts' table, sorted in alphabetical order. This allows for easy viewing of customer names without any filtering conditions.",
            "question": "What are the names of all the customers in alphabetical order?"
        },
        {
            "sample_id": 1791,
            "gold_sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
            "gold_complexity": 10,
            "vt": "SELECT checking.balance, savings.balance FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE accounts.name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the current balances in both checking and savings accounts for a specific customer. It retrieves the balance from the 'checking' table and the 'savings' table, linking them through the 'accounts' table using the unique customer identifier. The placeholder in the WHERE clause represents the customer's name.",
            "question": "What are the checking and savings balances in accounts belonging to Brown?"
        },
        {
            "sample_id": 1781,
            "gold_sql": "SELECT sum(balance) FROM checking",
            "gold_complexity": 4,
            "vt": "SELECT SUM(checking.balance) FROM checking",
            "ba": "The virtual table calculates the total balance from all checking accounts in the 'checking' table.",
            "question": "Find the total balance across checking accounts."
        },
        {
            "sample_id": 1784,
            "gold_sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM savings WHERE savings.balance > (SELECT AVG(savings.balance) FROM savings)",
            "ba": "The virtual table counts the number of customers in the 'savings' table whose savings account balance is greater than the average balance of all savings accounts.",
            "question": "How many accounts have a savings balance above the average savings balance?"
        },
        {
            "sample_id": 1779,
            "gold_sql": "SELECT count(*) FROM accounts",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM accounts",
            "ba": "The virtual table counts the total number of customers in the 'accounts' table.",
            "question": "Count the number of accounts."
        },
        {
            "sample_id": 1813,
            "gold_sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
            "gold_complexity": 9,
            "vt": "SELECT checking.balance + savings.balance FROM checking JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY checking.balance + savings.balance",
            "ba": "The virtual table calculates the total balance by summing the balances from both checking and savings accounts for each customer. It joins the 'checking' and 'savings' tables on the 'custid' to ensure that the balances correspond to the same customer. The result is ordered by the total balance in ascending order.",
            "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?"
        },
        {
            "sample_id": 1787,
            "gold_sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
            "gold_complexity": 13,
            "vt": "SELECT accounts.custid, accounts.name FROM accounts JOIN checking AS T2 ON T1.custid = T2.custid WHERE checking.balance < (SELECT MAX(checking.balance) FROM checking)",
            "ba": "The virtual table describes the unique identifiers and names of customers from the 'accounts' table who have a checking account balance that is less than the maximum balance found in the checking accounts. The query uses a JOIN to link the 'accounts' and 'checking' tables based on the customer ID, and it includes a subquery to determine the maximum balance in the checking accounts.",
            "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?"
        }
    ],
    "local_govt_in_alabama": [
        {
            "sample_id": 2144,
            "gold_sql": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM events WHERE NOT events.event_id IN (SELECT events.event_id FROM Participants_in_Events)",
            "ba": "The virtual table counts the number of events from the 'events' table that do not have any participants associated with them. It uses a subquery to identify event IDs that are present in the 'participants_in_events' table, and filters out those events from the count.",
            "question": "How many events did not have any participants?"
        },
        {
            "sample_id": 2137,
            "gold_sql": "SELECT service_id ,  event_details FROM EVENTS",
            "gold_complexity": 6,
            "vt": "SELECT events.service_id, events.event_details FROM events",
            "ba": "The virtual table describes the service ID and event details from the 'events' table. The placeholder in the SELECT statement allows for filtering or further specification of the events based on additional criteria if needed.",
            "question": "List the service id and details for the events."
        },
        {
            "sample_id": 2131,
            "gold_sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'",
            "gold_complexity": 7,
            "vt": "SELECT events.event_details FROM events JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE services.service_type_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the details of events from the 'events' table that are linked to a specific type of service. The placeholder in the WHERE clause represents the service type code.",
            "question": "what are the event details of the services that have the type code 'Marriage'?"
        },
        {
            "sample_id": 2135,
            "gold_sql": "SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM participants WHERE participants.participant_type_code = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of participants from the 'participants' table who belong to a specific type of participant. The placeholder in the WHERE clause represents the participant type code.",
            "question": "How many participants belong to the type 'Organizer'?"
        },
        {
            "sample_id": 2143,
            "gold_sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'",
            "gold_complexity": 8,
            "vt": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'",
            "ba": "The virtual table identifies the service type codes from the 'services' table that are associated with events having specific details. It retrieves service type codes for events that have both 'Success' and 'Fail' as their event details, using an INTERSECT to find common service types between these two conditions.",
            "question": "Which services type had both successful and failure event details?"
        },
        {
            "sample_id": 2138,
            "gold_sql": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM participants JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE participants.participant_details LIKE '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of participants whose details match a specific pattern. It joins the 'participants' table with the 'participants_in_events' table to find participants associated with events.",
            "question": "How many events had participants whose details had the substring 'Dr.'"
        },
        {
            "sample_id": 2133,
            "gold_sql": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
            "gold_complexity": 11,
            "vt": "SELECT participants.participant_id, participants.participant_type_code, COUNT(*) FROM participants JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY participants.participant_id",
            "ba": "The virtual table provides a summary of participants involved in events, displaying their unique identifiers and type codes along with a count of their participation. The data is aggregated by participant ID to show how many events each participant has attended.",
            "question": "How many events have each participants attended? List the participant id, type and the number."
        },
        {
            "sample_id": 2140,
            "gold_sql": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT events.service_id, services.service_type_code FROM participants JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY events.service_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of services associated with participants in events. It retrieves the service ID and the corresponding service type code from the 'services' table, linking it through the 'events' and 'participants_in_events' tables. The results are grouped by service ID and ordered by the count of participants, allowing for a limit on the number of results returned.",
            "question": "Which service id and type has the least number of participants?"
        },
        {
            "sample_id": 2142,
            "gold_sql": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
            "gold_complexity": 11,
            "vt": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn'",
            "ba": "The virtual table identifies the unique event IDs from the 'events' table that do not have any participants with specific details. It uses an EXCEPT clause to exclude event IDs that are linked to participants whose details match a given value.",
            "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?"
        }
    ],
    "entertainment_awards": [
        {
            "sample_id": 4612,
            "gold_sql": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
            "gold_complexity": 9,
            "vt": "SELECT YEAR FROM festival_detail WHERE LOCATION = 'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION <> 'United States'",
            "ba": "The virtual table identifies the years in which festivals are held in the 'United States' and compares them with the years in which festivals are held outside the 'United States'. The intersection of these two sets will provide the years that are common to both locations.",
            "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?"
        },
        {
            "sample_id": 4604,
            "gold_sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
            "gold_complexity": 12,
            "vt": "SELECT nomination.festival_id, festival_detail.festival_name FROM nomination JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY nomination.festival_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the festival IDs and names of festivals from the 'festival_detail' table that have received a certain number of nominations. The query joins the 'nomination' table with the 'artwork' and 'festival_detail' tables to aggregate the nominations by festival ID, filtering for those festivals that have a count of nominations greater than or equal to a specified number.",
            "question": "Show the ids and names of festivals that have at least two nominations for artworks."
        },
        {
            "sample_id": 4599,
            "gold_sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT festival_detail.festival_name FROM festival_detail ORDER BY festival_detail.year LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of festivals from the 'festival_detail' table, ordered by the year they take place. The placeholder in the LIMIT clause allows for specifying the maximum number of festival names to retrieve.",
            "question": "Show the names of the three most recent festivals."
        },
        {
            "sample_id": 4603,
            "gold_sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
            "gold_complexity": 8,
            "vt": "SELECT festival_detail.festival_name FROM nomination JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE artwork.type = None.\"program talent show\"",
            "ba": "The virtual table describes the names of festivals from the 'festival_detail' table that have nominated artworks of a specific type. The query joins the 'nomination' table with the 'artwork' table to filter based on the artwork type, and then joins with the 'festival_detail' table to retrieve the festival names.",
            "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\"."
        },
        {
            "sample_id": 4598,
            "gold_sql": "SELECT avg(Num_of_Audience) FROM festival_detail",
            "gold_complexity": 4,
            "vt": "SELECT AVG(festival_detail.num_of_audience) FROM festival_detail",
            "ba": "The virtual table calculates the average estimated number of attendees at festivals from the 'festival_detail' table.",
            "question": "What is the average number of audience for festivals?"
        },
        {
            "sample_id": 4591,
            "gold_sql": "SELECT count(*) FROM artwork",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM artwork",
            "ba": "The virtual table provides a count of all artworks from the 'artwork' table, which includes various types of artworks identified by unique artwork IDs.",
            "question": "How many artworks are there?"
        },
        {
            "sample_id": 4605,
            "gold_sql": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
            "gold_complexity": 12,
            "vt": "SELECT nomination.festival_id, festival_detail.festival_name, COUNT(*) FROM nomination JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY nomination.festival_id",
            "ba": "The virtual table summarizes the number of nominations for each festival by joining the 'nomination' table with the 'artwork' and 'festival_detail' tables. It retrieves the festival ID and name, along with a count of nominations, grouped by each festival.",
            "question": "Show the id, name of each festival and the number of artworks it has nominated."
        },
        {
            "sample_id": 4601,
            "gold_sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT artwork.type FROM nomination JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE festival_detail.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct types of artwork that have been nominated in festivals held in a specific year. It joins the 'nomination' table with the 'artwork' table to access the artwork details and with the 'festival_detail' table to filter by the festival year.",
            "question": "Show distinct types of artworks that are nominated in festivals in 2007."
        },
        {
            "sample_id": 4608,
            "gold_sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT festival_detail.year FROM festival_detail GROUP BY festival_detail.year HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the years in which festivals were held, specifically focusing on those years that had more than a specified number of festivals. The placeholder in the HAVING clause represents the minimum count of festivals required for a year to be included in the results.",
            "question": "List the year in which there are more than one festivals."
        },
        {
            "sample_id": 4610,
            "gold_sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
            "gold_complexity": 6,
            "vt": "SELECT festival_detail.num_of_audience FROM festival_detail WHERE festival_detail.year = [placeholder-type:numeric] OR festival_detail.year = [placeholder-type:numeric]",
            "ba": "The virtual table provides the estimated number of attendees for festivals held in specific years from the 'festival_detail' table. The placeholders in the WHERE clause represent the years of interest.",
            "question": "Show the number of audience in year 2008 or 2010."
        },
        {
            "sample_id": 4594,
            "gold_sql": "SELECT Festival_Name ,  LOCATION FROM festival_detail",
            "gold_complexity": 6,
            "vt": "SELECT festival_detail.festival_name, festival_detail.location FROM festival_detail",
            "ba": "The virtual table describes the names and locations of festivals from the 'festival_detail' table. The query retrieves the festival name and its geographical location, providing insights into where specific festivals are held.",
            "question": "What are the names and locations of festivals?"
        },
        {
            "sample_id": 4593,
            "gold_sql": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
            "gold_complexity": 6,
            "vt": "SELECT artwork.name FROM artwork WHERE artwork.type <> None.\"program talent show\"",
            "ba": "The virtual table lists the names of artworks from the 'artwork' table that are not classified as 'program talent show'. The placeholder in the WHERE clause indicates that the type of artwork should be excluded from the results.",
            "question": "List the name of artworks whose type is not \"Program Talent Show\"."
        },
        {
            "sample_id": 4597,
            "gold_sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007",
            "gold_complexity": 6,
            "vt": "SELECT festival_detail.festival_name FROM festival_detail WHERE festival_detail.year = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of festivals from the 'festival_detail' table that take place in a specific year. The placeholder in the WHERE clause represents the year of interest.",
            "question": "What are the names of festivals held in year 2007?"
        }
    ],
    "device": [
        {
            "sample_id": 5067,
            "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT shop.shop_name FROM stock JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY stock.shop_id ORDER BY SUM(stock.quantity) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of shops from the 'shop' table that have stock available, ordered by the total quantity of devices in stock. The query joins the 'stock' table with the 'shop' table to aggregate the quantities of devices per shop and limits the results to a specified number of shops.",
            "question": "Show the name of the shop that have the largest quantity of devices in stock."
        },
        {
            "sample_id": 5061,
            "gold_sql": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",
            "gold_complexity": 8,
            "vt": "SELECT shop.shop_name, device.carrier FROM stock JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
            "ba": "The virtual table describes the names of shops and the carriers associated with devices that are in stock. It combines data from the 'stock', 'device', and 'shop' tables to provide a comprehensive view of which devices are available at which shops along with their respective carriers.",
            "question": "Show names of shops and the carriers of devices they have in stock."
        },
        {
            "sample_id": 5052,
            "gold_sql": "SELECT avg(Quantity) FROM stock",
            "gold_complexity": 4,
            "vt": "SELECT AVG(stock.quantity) FROM stock",
            "ba": "The virtual table calculates the average quantity of devices available in stock from the 'stock' table.",
            "question": "Give the average quantity of stocks."
        },
        {
            "sample_id": 5054,
            "gold_sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC",
            "gold_complexity": 8,
            "vt": "SELECT shop.shop_name, shop.location FROM shop ORDER BY shop.shop_name",
            "ba": "The virtual table lists the names and locations of all shops from the 'shop' table, ordered by the shop name.",
            "question": "Return the names and locations of shops, ordered by name in alphabetical order."
        },
        {
            "sample_id": 5048,
            "gold_sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
            "gold_complexity": 6,
            "vt": "SELECT device.carrier FROM device WHERE device.software_platform <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the carriers of devices from the 'device' table that do not run on a specific software platform. The placeholder in the WHERE clause represents the name of the software platform that is being excluded.",
            "question": "Return the device carriers that do not have Android as their software platform."
        },
        {
            "sample_id": 5043,
            "gold_sql": "SELECT count(*) FROM device",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM device",
            "ba": "The virtual table provides a count of all devices listed in the 'device' table. This count represents the total number of unique devices available in the database.",
            "question": "How many devices are there?"
        },
        {
            "sample_id": 5081,
            "gold_sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT device.carrier FROM stock JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY stock.device_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the carrier names of devices that are in stock across different shops. It groups the results by device ID and filters to show only those devices that have a count greater than a specified number, indicating that there are multiple units of the same device available.",
            "question": "Show the carriers of devices in stock at more than one shop."
        },
        {
            "sample_id": 5060,
            "gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT shop.shop_name FROM shop ORDER BY shop.open_year LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of shops from the 'shop' table, ordered by the year they were opened. The placeholder in the LIMIT clause allows for specifying the maximum number of shop names to return.",
            "question": "What is the shop name corresponding to the shop that opened in the most recent year?"
        },
        {
            "sample_id": 5046,
            "gold_sql": "SELECT Carrier FROM device ORDER BY Carrier ASC",
            "gold_complexity": 6,
            "vt": "SELECT device.carrier FROM device ORDER BY device.carrier",
            "ba": "The virtual table retrieves the carrier names associated with devices from the 'device' table, sorted in alphabetical order.",
            "question": "What are the different carriers for devices, listed in alphabetical order?"
        },
        {
            "sample_id": 5070,
            "gold_sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
            "gold_complexity": 8,
            "vt": "SELECT device.software_platform, COUNT(*) FROM device GROUP BY device.software_platform",
            "ba": "The virtual table summarizes the count of devices grouped by their software platform from the 'device' table. The placeholder in the SELECT clause represents the software platform of the devices.",
            "question": "What are the different software platforms for devices, and how many devices have each?"
        },
        {
            "sample_id": 5045,
            "gold_sql": "SELECT Carrier FROM device ORDER BY Carrier ASC",
            "gold_complexity": 6,
            "vt": "SELECT device.carrier FROM device ORDER BY device.carrier",
            "ba": "The virtual table retrieves the carrier names associated with devices from the 'device' table, sorted in alphabetical order.",
            "question": "List the carriers of devices in ascending alphabetical order."
        },
        {
            "sample_id": 5051,
            "gold_sql": "SELECT avg(Quantity) FROM stock",
            "gold_complexity": 4,
            "vt": "SELECT AVG(stock.quantity) FROM stock",
            "ba": "The virtual table calculates the average quantity of devices available in stock from the 'stock' table.",
            "question": "What is the average quantity of stocks?"
        },
        {
            "sample_id": 5072,
            "gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
            "gold_complexity": 8,
            "vt": "SELECT device.software_platform FROM device GROUP BY device.software_platform ORDER BY COUNT(*)",
            "ba": "The virtual table lists the unique software platforms of devices from the 'device' table, grouped by the software platform and ordered by the count of devices for each platform.",
            "question": "What are the different software platforms for devices, ordered by frequency descending?"
        },
        {
            "sample_id": 5063,
            "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT shop.shop_name FROM stock JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY stock.shop_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of shops that have a stock of devices, specifically those that have more than a specified number of different devices available. It joins the 'stock' table with the 'shop' table to access shop names and groups the results by shop ID, applying a condition to filter shops based on the count of devices in stock.",
            "question": "Show names of shops that have more than one kind of device in stock."
        },
        {
            "sample_id": 5047,
            "gold_sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
            "gold_complexity": 6,
            "vt": "SELECT device.carrier FROM device WHERE device.software_platform <> '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the carrier names of devices from the 'device' table that do not run on a specific software platform. The placeholder in the WHERE clause represents the software platform to be excluded.",
            "question": "What are the carriers of devices whose software platforms are not \"Android\"?"
        },
        {
            "sample_id": 5076,
            "gold_sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
            "gold_complexity": 10,
            "vt": "SELECT shop.shop_name FROM shop WHERE NOT shop.shop_id IN (SELECT shop.shop_id FROM stock)",
            "ba": "The virtual table lists the names of shops from the 'shop' table that do not have any devices in stock. It uses a subquery to filter out shops that are present in the 'stock' table, ensuring only those without stock are displayed.",
            "question": "What are the names of shops that do not have any devices in stock?"
        },
        {
            "sample_id": 5073,
            "gold_sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT device.software_platform FROM device GROUP BY device.software_platform ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique software platforms used by devices, grouped by the software platform and ordered by the count of devices for each platform. The placeholder in the LIMIT clause allows the user to specify the maximum number of platforms to retrieve.",
            "question": "List the software platform shared by the greatest number of devices."
        },
        {
            "sample_id": 5057,
            "gold_sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
            "gold_complexity": 8,
            "vt": "SELECT shop.open_date, shop.open_year FROM shop WHERE shop.shop_name = None.\"apple\"",
            "ba": "The virtual table provides information about the opening date and year of shops from the 'shop' table that match a specific shop name. The placeholder in the WHERE clause represents the name of the shop being queried.",
            "question": "List the open date of open year of the shop named \"Apple\"."
        },
        {
            "sample_id": 5055,
            "gold_sql": "SELECT count(DISTINCT Software_Platform) FROM device",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Software_Platform) FROM device",
            "ba": "The virtual table counts the distinct software platforms from the 'device' table. This provides insight into the variety of operating systems or platforms that are present among the devices.",
            "question": "How many different software platforms are there for devices?"
        },
        {
            "sample_id": 5066,
            "gold_sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT shop.shop_name FROM stock JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY stock.shop_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of shops from the 'shop' table that have stock available. It joins the 'stock' table with the 'shop' table to associate each shop with its stock. The results are grouped by shop ID to count the number of devices in stock for each shop, and the output is ordered by the count of devices, limiting the results to a specified number of shops.",
            "question": "What is the name of the shop that has the most different kinds of devices in stock?"
        },
        {
            "sample_id": 5049,
            "gold_sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
            "gold_complexity": 6,
            "vt": "SELECT shop.shop_name FROM shop ORDER BY shop.open_year",
            "ba": "The virtual table lists the names of shops from the 'shop' table, ordered by the year they were opened. This allows users to see the sequence of shop openings over time.",
            "question": "What are the names of shops in ascending order of open year?"
        },
        {
            "sample_id": 5082,
            "gold_sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT device.carrier FROM stock JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY stock.device_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the carrier names of devices from the 'device' table that are in stock, grouped by device ID. It filters the results to include only those devices that have a count greater than a specified number, indicating that there are multiple units of the same device available in stock.",
            "question": "What are the carriers of devices that are in stock in more than a single shop?"
        },
        {
            "sample_id": 5056,
            "gold_sql": "SELECT count(DISTINCT Software_Platform) FROM device",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Software_Platform) FROM device",
            "ba": "The virtual table counts the distinct software platforms from the 'device' table. This provides insight into the variety of operating systems or platforms that are present among the devices.",
            "question": "Count the number of different software platforms."
        },
        {
            "sample_id": 5058,
            "gold_sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
            "gold_complexity": 8,
            "vt": "SELECT shop.open_date, shop.open_year FROM shop WHERE shop.shop_name = None.\"apple\"",
            "ba": "The virtual table provides information about the opening date and year of shops from the 'shop' table that match a specific shop name. The placeholder in the WHERE clause represents the name of the shop being queried.",
            "question": "What are the open dates and years for the shop named Apple?"
        }
    ],
    "student_transcripts_tracking": [
        {
            "sample_id": 7557,
            "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
            "gold_complexity": 4,
            "vt": "SELECT AVG(transcripts.transcript_date) FROM transcripts",
            "ba": "The virtual table calculates the average date of issuance for transcripts from the 'transcripts' table. The placeholder in the SELECT clause represents the date values that will be averaged.",
            "question": "What is the average transcript date?"
        },
        {
            "sample_id": 7512,
            "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs",
            "ba": "The virtual table counts the distinct names of degree programs from the 'degree_programs' table.",
            "question": "How many different degree names are offered?"
        },
        {
            "sample_id": 7558,
            "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT transcripts.transcript_date, transcripts.other_details FROM transcripts ORDER BY transcripts.transcript_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of transcript issuance dates along with any additional details from the 'transcripts' table. The results are ordered by the date of issuance, and a placeholder is included to limit the number of records returned.",
            "question": "When is the first transcript released? List the date and details."
        },
        {
            "sample_id": 7562,
            "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the dates when transcripts were issued from the 'transcripts' table. The results are ordered by the transcript date, and a placeholder is used to limit the number of records returned.",
            "question": "What is the last transcript release date?"
        },
        {
            "sample_id": 7519,
            "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
            "gold_complexity": 11,
            "vt": "SELECT courses.course_name, courses.course_id FROM courses JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_id HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and identifiers of courses from the 'courses' table that have a limited number of sections associated with them. The placeholder in the HAVING clause represents the maximum count of sections allowed for each course.",
            "question": "What are the names and ids of every course with less than 2 sections?"
        },
        {
            "sample_id": 7565,
            "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), transcript_contents.student_course_id FROM transcript_contents GROUP BY transcript_contents.student_course_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of times each course appears in student transcripts, providing a count of enrollments per course. The placeholder in the LIMIT clause allows for specifying the maximum number of courses to return based on their enrollment counts.",
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?"
        },
        {
            "sample_id": 7505,
            "gold_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
            "gold_complexity": 6,
            "vt": "SELECT courses.course_description FROM courses WHERE courses.course_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the course description from the 'courses' table for a specific course name. The placeholder in the WHERE clause represents the name of the course being queried.",
            "question": "What are the descriptions for all the math courses?"
        },
        {
            "sample_id": 7559,
            "gold_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT transcripts.transcript_date, transcripts.other_details FROM transcripts ORDER BY transcripts.transcript_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the transcript dates and any additional details from the 'transcripts' table, ordered by the date of issuance. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "What is the earliest date of a transcript release, and what details can you tell me?"
        },
        {
            "sample_id": 7571,
            "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT current_address_id) FROM students",
            "ba": "The virtual table counts the number of distinct current addresses associated with students in the 'students' table. The placeholder in the COUNT function represents the unique current address identifiers.",
            "question": "What are the different addresses that have students living there?"
        },
        {
            "sample_id": 7546,
            "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
            "gold_complexity": 7,
            "vt": "SELECT students.cell_mobile_number FROM students WHERE students.first_name = '[placeholder-type:string]' AND students.last_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the mobile phone numbers of students from the 'students' table who match a specific first and last name. The placeholders in the WHERE clause represent the student's first and last names.",
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?"
        },
        {
            "sample_id": 7570,
            "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT current_address_id) FROM students",
            "ba": "The virtual table counts the number of distinct current addresses associated with students in the 'students' table. The placeholder in the COUNT function represents the unique current address identifiers.",
            "question": "How many different addresses do the students currently live?"
        },
        {
            "sample_id": 7543,
            "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
            "gold_complexity": 10,
            "vt": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "ba": "The virtual table lists the last names of students who currently reside in a specific state, while excluding those who are enrolled in any degree program.",
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?"
        },
        {
            "sample_id": 7549,
            "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first, middle, and last names of students from the 'students' table, ordered by their registration date. The placeholder in the LIMIT clause represents the maximum number of student records to return.",
            "question": "What is the first, middle, and last name of the first student to register?"
        },
        {
            "sample_id": 7518,
            "gold_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
            "gold_complexity": 11,
            "vt": "SELECT courses.course_name, courses.course_id FROM courses JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_id HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and identifiers of courses from the 'courses' table that have a limited number of sections associated with them. The placeholder in the HAVING clause represents the maximum count of sections allowed for the courses to be included in the result.",
            "question": "What are the names and id of courses having at most 2 sections?"
        },
        {
            "sample_id": 7545,
            "gold_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT transcripts.transcript_date, transcript_contents.transcript_id FROM transcript_contents JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY transcript_contents.transcript_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table displays the transcript dates and IDs from the 'transcripts' table, showing only those transcripts that are associated with a certain number of course entries. The placeholder in the HAVING clause represents the minimum count of courses that must be linked to each transcript.",
            "question": "What is the date and id of the transcript with at least 2 courses listed?"
        },
        {
            "sample_id": 7556,
            "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
            "gold_complexity": 4,
            "vt": "SELECT AVG(transcripts.transcript_date) FROM transcripts",
            "ba": "The virtual table calculates the average date of issuance for transcripts from the 'transcripts' table. The placeholder in the SELECT clause represents the date values that will be averaged.",
            "question": "On average, when were the transcripts printed?"
        },
        {
            "sample_id": 7510,
            "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT department_id) FROM degree_programs",
            "ba": "The virtual table provides a count of unique departments that offer degree programs from the 'degree_programs' table. The placeholder in the COUNT function indicates that the result will reflect the number of distinct department identifiers associated with the degree programs.",
            "question": "How many departments offer any degree?"
        },
        {
            "sample_id": 7548,
            "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first, middle, and last names of students from the 'students' table, ordered by their registration date. The placeholder in the LIMIT clause represents the maximum number of student records to return.",
            "question": "Who is the first student to register? List the first name, middle name and last name."
        },
        {
            "sample_id": 7539,
            "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT courses.course_name FROM courses JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "ba": "The virtual table lists the distinct names of courses from the 'courses' table that students are enrolled in, by joining with the 'student_enrolment_courses' table to filter the relevant courses.",
            "question": "What are the names of all courses that have some students enrolled?"
        },
        {
            "sample_id": 7520,
            "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "gold_complexity": 6,
            "vt": "SELECT sections.section_name FROM sections ORDER BY sections.section_name",
            "ba": "The virtual table lists the names of all sections available in the 'sections' table, sorted in alphabetical order.",
            "question": "List the section_name in reversed lexicographical order."
        },
        {
            "sample_id": 7547,
            "gold_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
            "gold_complexity": 7,
            "vt": "SELECT students.cell_mobile_number FROM students WHERE students.first_name = '[placeholder-type:string]' AND students.last_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the mobile phone numbers of students from the 'students' table who match a specific first and last name. The placeholders in the WHERE clause represent the student's first and last names.",
            "question": "What is the mobile phone number of the student named Timmothy Ward ?"
        },
        {
            "sample_id": 7507,
            "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
            "gold_complexity": 6,
            "vt": "SELECT addresses.zip_postcode FROM addresses WHERE addresses.city = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the postal code from the 'addresses' table for a specific city. The placeholder in the WHERE clause represents the name of the city for which the postal code is being queried.",
            "question": "What is the zip code for Port Chelsea?"
        },
        {
            "sample_id": 7529,
            "gold_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
            "gold_complexity": 13,
            "vt": "SELECT DISTINCT students.first_name, students.middle_name, students.last_name FROM students JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE degree_programs.degree_summary_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the distinct first, middle, and last names of students who are enrolled in a specific degree program. The query joins the 'students' table with the 'student_enrolment' table to link students with their enrolment records, and then further joins with the 'degree_programs' table to filter based on the degree program's name. The placeholder in the WHERE clause represents the name of the degree program.",
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?"
        },
        {
            "sample_id": 7501,
            "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
            "gold_complexity": 6,
            "vt": "SELECT addresses.line_1, addresses.line_2 FROM addresses",
            "ba": "The virtual table describes the primary and secondary address lines from the 'addresses' table. This allows users to retrieve specific address details for various purposes, such as mailing or location identification.",
            "question": "What is the first and second line for all addresses?"
        },
        {
            "sample_id": 7532,
            "gold_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY degree_programs.degree_program_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a list of degree programs along with their unique identifiers from the 'degree_programs' table. It joins with the 'student_enrolment' table to count how many students are enrolled in each degree program. The results are grouped by the degree program ID and ordered by the number of enrollments, allowing users to see the most popular degree programs based on student enrollment. The placeholder in the LIMIT clause allows users to specify how many results they want to retrieve.",
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary."
        },
        {
            "sample_id": 7506,
            "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
            "gold_complexity": 6,
            "vt": "SELECT addresses.zip_postcode FROM addresses WHERE addresses.city = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the postal code from the 'addresses' table for a specific city. The placeholder in the WHERE clause represents the name of the city for which the postal code is being queried.",
            "question": "What is the zip code of the address in the city Port Chelsea?"
        },
        {
            "sample_id": 7530,
            "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT degree_programs.degree_summary_name FROM degree_programs JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of degree programs from the 'degree_programs' table. It joins with the 'student_enrolment' table to count how many students are enrolled in each degree program. The results are grouped by the degree program name and ordered by the number of students enrolled, with a limit on the number of results returned based on a specified numeric placeholder.",
            "question": "Find the kind of program which most number of students are enrolled in?"
        },
        {
            "sample_id": 7561,
            "gold_sql": "SELECT count(*) FROM Transcripts",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM transcripts",
            "ba": "The virtual table provides a count of all transcripts available in the 'transcripts' table, which contains unique identifiers for each transcript issued.",
            "question": "How many transcripts are listed?"
        },
        {
            "sample_id": 7564,
            "gold_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), transcript_contents.student_course_id FROM transcript_contents GROUP BY transcript_contents.student_course_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of times each course appears in student transcripts, providing a count of enrollments per course. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id."
        },
        {
            "sample_id": 7563,
            "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the dates when transcripts were issued from the 'transcripts' table. The placeholder in the LIMIT clause allows the user to specify the maximum number of transcript dates to retrieve.",
            "question": "When was the last transcript released?"
        },
        {
            "sample_id": 7551,
            "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_left LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first, middle, and last names of students from the 'students' table, ordered by the date they left the institution. The placeholder in the LIMIT clause represents the maximum number of student records to return.",
            "question": "What is the first, middle, and last name of the earliest school graduate?"
        },
        {
            "sample_id": 7521,
            "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "gold_complexity": 6,
            "vt": "SELECT sections.section_name FROM sections ORDER BY sections.section_name",
            "ba": "The virtual table lists the names of all sections available in the 'sections' table, sorted in alphabetical order. This allows users to easily view and identify the different sections offered.",
            "question": "What are the names of the sections in reverse alphabetical order?"
        },
        {
            "sample_id": 7522,
            "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY semesters.semester_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of semester names and their unique identifiers from the 'semesters' table. It joins with the 'student_enrolment' table to count the number of students enrolled in each semester, grouping the results by semester ID. The output is ordered by the count of enrollments, and a placeholder is included to limit the number of results returned.",
            "question": "What is the semester which most student registered in? Show both the name and the id."
        },
        {
            "sample_id": 7575,
            "gold_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
            "gold_complexity": 6,
            "vt": "SELECT sections.section_description FROM sections WHERE sections.section_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the section descriptions of courses from the 'sections' table that match a specific section name. The placeholder in the WHERE clause represents the name of the section being queried.",
            "question": "What is the description for the section named h?"
        },
        {
            "sample_id": 7523,
            "gold_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY semesters.semester_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of semester names and their unique identifiers from the 'semesters' table. It joins with the 'student_enrolment' table to count the number of students enrolled in each semester, grouping the results by semester ID. The output is ordered by the count of enrollments, and a placeholder is included to limit the number of results returned.",
            "question": "For each semester, what is the name and id of the one with the most students registered?"
        },
        {
            "sample_id": 7526,
            "gold_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
            "gold_complexity": 15,
            "vt": "SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY students.student_id HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of students along with their first name, middle name, last name, and unique student identifier from the 'students' table. It joins the 'students' table with the 'student_enrolment' table to filter students based on their enrolment records. The query groups the results by student ID and includes a condition to only show students who have enrolled in a specific number of courses, represented by a numeric placeholder.",
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id."
        },
        {
            "sample_id": 7516,
            "gold_sql": "SELECT section_name ,  section_description FROM Sections",
            "gold_complexity": 6,
            "vt": "SELECT sections.section_name, sections.section_description FROM sections",
            "ba": "The virtual table describes the names and descriptions of sections from the 'sections' table. This allows users to view detailed information about each section offered for courses.",
            "question": "What are the names and descriptions of all the sections?"
        },
        {
            "sample_id": 7525,
            "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "gold_complexity": 6,
            "vt": "SELECT departments.department_description FROM departments WHERE departments.department_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the department description from the 'departments' table for a specific department name. The placeholder in the WHERE clause represents the name of the department being queried.",
            "question": "What is the department description for the one whose name has the word computer?"
        },
        {
            "sample_id": 7531,
            "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT degree_programs.degree_summary_name FROM degree_programs JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of degree programs from the 'degree_programs' table. It joins with the 'student_enrolment' table to count how many students are enrolled in each degree program. The results are grouped by the degree program name and ordered by the number of students enrolled, limiting the output to a specified number of results.",
            "question": "What is the degree summary name that has the most number of students enrolled?"
        },
        {
            "sample_id": 7538,
            "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT courses.course_name FROM courses JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "ba": "The virtual table lists the distinct names of courses from the 'courses' table that students are enrolled in, by joining with the 'student_enrolment_courses' table to filter the relevant courses.",
            "question": "What are all the course names of the courses which ever have students enrolled in?"
        },
        {
            "sample_id": 7500,
            "gold_sql": "SELECT line_1 ,  line_2 FROM addresses",
            "gold_complexity": 6,
            "vt": "SELECT addresses.line_1, addresses.line_2 FROM addresses",
            "ba": "The virtual table describes the primary and secondary address lines from the 'addresses' table. This allows users to retrieve specific address details for various purposes, such as mailing or location identification.",
            "question": "what are all the addresses including line 1 and line 2?"
        },
        {
            "sample_id": 7555,
            "gold_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY addresses.address_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique addresses from the 'addresses' table, specifically focusing on the primary and secondary address lines. It joins with the 'students' table to filter addresses based on students' current addresses. The results are grouped by address ID and ordered by the count of students associated with each address, limiting the output to a specified number of entries.",
            "question": "What is the id, line 1, and line 2 of the address with the most students?"
        },
        {
            "sample_id": 7573,
            "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "gold_complexity": 6,
            "vt": "SELECT students.other_student_details FROM students ORDER BY students.other_student_details",
            "ba": "The virtual table describes the additional details related to students from the 'students' table. The results are ordered based on the 'other_student_details' column.",
            "question": "What other details can you tell me about students in reverse alphabetical order?"
        },
        {
            "sample_id": 7569,
            "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "ba": "The virtual table identifies the distinct semesters in which students are enrolled in both Master's and Bachelor's degree programs. It does this by joining the Degree_Programs and Student_Enrolment tables based on the degree program ID, filtering for the specific degree names, and using an INTERSECT to find common semesters.",
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?"
        },
        {
            "sample_id": 7515,
            "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM departments JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE departments.department_name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of degree programs offered by a specific department in the 'departments' table. The placeholder in the WHERE clause represents the name of the department being queried.",
            "question": "How many degrees does the engineering department have?"
        },
        {
            "sample_id": 7541,
            "gold_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT courses.course_name FROM courses JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY courses.course_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of courses from the 'courses' table that students are enrolled in. It joins the 'courses' table with the 'student_enrolment_courses' table to count how many students are enrolled in each course. The results are grouped by course name and ordered by the number of enrollments, with a limit on the number of courses returned based on a specified numeric placeholder.",
            "question": "What is the name of the course with the most students enrolled?"
        }
    ],
    "machine_repair": [
        {
            "sample_id": 2228,
            "gold_sql": "SELECT Name FROM technician ORDER BY Age ASC",
            "gold_complexity": 6,
            "vt": "SELECT technician.name FROM technician ORDER BY technician.age",
            "ba": "The virtual table lists the names of technicians from the 'technician' table, ordered by their age. This allows for an easy view of technicians sorted by how old they are, which can be useful for understanding the experience level within the team.",
            "question": "List the names of technicians in ascending order of age."
        },
        {
            "sample_id": 2239,
            "gold_sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
            "gold_complexity": 8,
            "vt": "SELECT technician.team, COUNT(*) FROM technician GROUP BY technician.team",
            "ba": "The virtual table summarizes the number of technicians grouped by their respective teams from the 'technician' table. The placeholder in the SELECT clause represents the team identifier, and the COUNT function is used to count the number of technicians in each team.",
            "question": "For each team, how many technicians are there?"
        },
        {
            "sample_id": 2227,
            "gold_sql": "SELECT count(*) FROM technician",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM technician",
            "ba": "The virtual table counts the total number of technicians from the 'technician' table.",
            "question": "What is the number of technicians?"
        },
        {
            "sample_id": 2240,
            "gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT technician.team FROM technician GROUP BY technician.team ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the teams of technicians from the 'technician' table, grouping them to count the number of technicians in each team. The result is ordered by the count of technicians in descending order, and a limit is applied to restrict the number of teams returned based on a specified numeric value.",
            "question": "Please show the team that has the most number of technicians."
        },
        {
            "sample_id": 2243,
            "gold_sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT technician.team FROM technician GROUP BY technician.team HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the teams of technicians from the 'technician' table that have a minimum number of technicians assigned to them. The placeholder in the HAVING clause represents the minimum count of technicians required for a team to be included in the results.",
            "question": "What is the team with at least 2 technicians?"
        },
        {
            "sample_id": 2249,
            "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70",
            "gold_complexity": 8,
            "vt": "SELECT technician.name FROM repair_assignment JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE machine.value_points > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of technicians who are assigned to repairs on machines that have a value point greater than a specified threshold. The query involves joining the 'repair_assignment' table with the 'machine' and 'technician' tables to filter based on the machine's value points.",
            "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?"
        },
        {
            "sample_id": 2230,
            "gold_sql": "SELECT Team ,  Starting_Year FROM technician",
            "gold_complexity": 6,
            "vt": "SELECT technician.team, technician.starting_year FROM technician",
            "ba": "The virtual table provides information about the teams and starting years of technicians from the 'technician' table.",
            "question": "What are the team and starting year of technicians?"
        },
        {
            "sample_id": 2234,
            "gold_sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
            "gold_complexity": 6,
            "vt": "SELECT technician.name FROM technician WHERE technician.age = [placeholder-type:numeric] OR technician.age = [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of technicians from the 'technician' table who are either of a specific age or another specified age. The placeholders in the WHERE clause represent the ages of the technicians.",
            "question": "Show the name of technicians aged either 36 or 37"
        },
        {
            "sample_id": 2241,
            "gold_sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT technician.team FROM technician GROUP BY technician.team ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the teams of technicians from the 'technician' table, grouping them to count the number of technicians in each team. The result is ordered by the count of technicians in descending order, and a limit is applied to restrict the number of teams returned based on a specified numeric value.",
            "question": "What are the teams with the most technicians?"
        },
        {
            "sample_id": 2247,
            "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
            "gold_complexity": 8,
            "vt": "SELECT technician.name FROM repair_assignment JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY machine.quality_rank",
            "ba": "The virtual table lists the names of technicians assigned to repairs, ordered by the quality rank of the machines involved in those repairs. It combines data from the 'repair_assignment', 'machine', and 'technician' tables, linking them through their respective identifiers.",
            "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?"
        },
        {
            "sample_id": 2254,
            "gold_sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
            "gold_complexity": 8,
            "vt": "SELECT Starting_Year FROM technician WHERE Team = \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team = \"CWS\"",
            "ba": "The virtual table identifies the starting years of technicians from two different teams, 'CLE' and 'CWS', and finds the common starting years between them.",
            "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\"."
        },
        {
            "sample_id": 2245,
            "gold_sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",
            "gold_complexity": 8,
            "vt": "SELECT technician.name, machine.machine_series FROM repair_assignment JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID",
            "ba": "The virtual table describes the names of technicians and the series numbers of machines involved in repair tasks. It combines data from the 'repair_assignment', 'machine', and 'technician' tables, linking them through their respective identifiers.",
            "question": "What are the names of technicians and the machine series that they repair?"
        },
        {
            "sample_id": 2233,
            "gold_sql": "SELECT Name FROM technician WHERE Team != \"NYY\"",
            "gold_complexity": 6,
            "vt": "SELECT technician.name FROM technician WHERE technician.team <> None.\"nyy\"",
            "ba": "The virtual table lists the names of technicians from the 'technician' table who are not part of a specific team identified by the placeholder. The condition in the WHERE clause filters out technicians belonging to that team.",
            "question": "What is the name of the technician whose team is not 'NYY'?"
        },
        {
            "sample_id": 2252,
            "gold_sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
            "gold_complexity": 10,
            "vt": "SELECT technician.name FROM technician WHERE NOT technician.technician_id IN (SELECT technician.technician_id FROM repair_assignment)",
            "ba": "The virtual table lists the names of technicians from the 'technician' table who are not currently assigned to any repair tasks. The subquery identifies all technician IDs that are involved in repair assignments, and the main query filters out these IDs to find those technicians who are available.",
            "question": "List the names of technicians who have not been assigned to repair machines."
        },
        {
            "sample_id": 2226,
            "gold_sql": "SELECT count(*) FROM technician",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM technician",
            "ba": "The virtual table counts the total number of technicians from the 'technician' table.",
            "question": "How many technicians are there?"
        },
        {
            "sample_id": 2231,
            "gold_sql": "SELECT Team ,  Starting_Year FROM technician",
            "gold_complexity": 6,
            "vt": "SELECT technician.team, technician.starting_year FROM technician",
            "ba": "The virtual table provides information about the teams and starting years of technicians from the 'technician' table.",
            "question": "What is the team and starting year for each technician?"
        },
        {
            "sample_id": 2248,
            "gold_sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70",
            "gold_complexity": 8,
            "vt": "SELECT technician.name FROM repair_assignment JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE machine.value_points > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of technicians assigned to repairs for machines that have a value point greater than a specified threshold. The query joins the 'repair_assignment' table with the 'machine' and 'technician' tables to retrieve the relevant technician names based on the condition applied to the machine's value points.",
            "question": "Show names of technicians who are assigned to repair machines with value point more than 70."
        },
        {
            "sample_id": 2244,
            "gold_sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",
            "gold_complexity": 8,
            "vt": "SELECT technician.name, machine.machine_series FROM repair_assignment JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID",
            "ba": "The virtual table describes the names of technicians and the series numbers of machines involved in repair tasks. It combines data from the 'repair_assignment', 'machine', and 'technician' tables, linking them through their respective identifiers.",
            "question": "Show names of technicians and series of machines they are assigned to repair."
        }
    ],
    "entrepreneur": [
        {
            "sample_id": 2264,
            "gold_sql": "SELECT Name FROM People ORDER BY Weight ASC",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people ORDER BY people.weight",
            "ba": "The virtual table lists the names of individuals from the 'people' table, sorted by their weight in ascending order.",
            "question": "What are the names of people in ascending order of weight?"
        },
        {
            "sample_id": 2268,
            "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE entrepreneur.investor <> None.\"rachel elnaugh\"",
            "ba": "The virtual table describes the names of people associated with entrepreneurs who have an investor that is not 'rachel elnaugh'. It combines data from the 'entrepreneur' and 'people' tables using a join on the 'people_id' field, filtering out any entrepreneurs with that specific investor's name.",
            "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?"
        },
        {
            "sample_id": 2266,
            "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
            "gold_complexity": 5,
            "vt": "SELECT people.name FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are linked to entrepreneurs in the 'entrepreneur' table. The join operation connects the two tables based on the 'people_id' foreign key, allowing us to retrieve the names of people associated with each entrepreneur.",
            "question": "What are the names of entrepreneurs?"
        },
        {
            "sample_id": 2292,
            "gold_sql": "SELECT count(DISTINCT Company) FROM entrepreneur",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Company) FROM entrepreneur",
            "ba": "The virtual table counts the distinct companies founded by entrepreneurs in the 'entrepreneur' table.",
            "question": "How many distinct companies are there?"
        },
        {
            "sample_id": 2277,
            "gold_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
            "gold_complexity": 8,
            "vt": "SELECT people.date_of_birth FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE entrepreneur.investor = None.\"simon woodroffe\" OR entrepreneur.investor = None.\"peter jones\"",
            "ba": "The virtual table retrieves the birth dates of individuals from the 'people' table who are linked to entrepreneurs in the 'entrepreneur' table. The query filters for entrepreneurs whose investor is either 'simon woodroffe' or 'peter jones'.",
            "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones."
        },
        {
            "sample_id": 2272,
            "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT people.name FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY people.weight LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are linked to entrepreneurs in the 'entrepreneur' table. The results are ordered by the weight of the individuals, and a placeholder is used to limit the number of results returned.",
            "question": "What is the name of the entrepreneur with the greatest weight?"
        },
        {
            "sample_id": 2276,
            "gold_sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
            "gold_complexity": 8,
            "vt": "SELECT people.date_of_birth FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE entrepreneur.investor = None.\"simon woodroffe\" OR entrepreneur.investor = None.\"peter jones\"",
            "ba": "The virtual table retrieves the birth dates of individuals from the 'people' table who are linked to entrepreneurs in the 'entrepreneur' table. The query filters for entrepreneurs whose investor is either 'simon woodroffe' or 'peter jones'.",
            "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?"
        },
        {
            "sample_id": 2261,
            "gold_sql": "SELECT Company ,  Investor FROM entrepreneur",
            "gold_complexity": 6,
            "vt": "SELECT entrepreneur.company, entrepreneur.investor FROM entrepreneur",
            "ba": "The virtual table describes the companies and their respective investors from the 'entrepreneur' table. The query retrieves the company names and the names of investors interested in those companies.",
            "question": "What are the companies and investors that correspond to each entrepreneur?"
        },
        {
            "sample_id": 2269,
            "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE entrepreneur.investor <> None.\"rachel elnaugh\"",
            "ba": "The virtual table describes the names of people associated with entrepreneurs who have an investor that is not 'rachel elnaugh'. It combines data from the 'entrepreneur' and 'people' tables using a join on the 'people_id' field, filtering out any records where the investor's name matches the specified value.",
            "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh."
        },
        {
            "sample_id": 2278,
            "gold_sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
            "gold_complexity": 7,
            "vt": "SELECT people.weight FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY entrepreneur.money_requested",
            "ba": "The virtual table retrieves the weight of individuals from the 'people' table who are linked to entrepreneurs in the 'entrepreneur' table. The results are ordered by the amount of money requested by each entrepreneur.",
            "question": "What are the weights of entrepreneurs in descending order of money requested?"
        },
        {
            "sample_id": 2289,
            "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
            "gold_complexity": 10,
            "vt": "SELECT people.name FROM people WHERE NOT entrepreneur.people_id IN (SELECT entrepreneur.people_id FROM entrepreneur)",
            "ba": "The virtual table lists the names of individuals from the 'people' table who are not associated with any entrepreneur in the 'entrepreneur' table. This is determined by checking that their 'people_id' does not appear in the 'entrepreneur' table.",
            "question": "What are the names of people who are not entrepreneurs?"
        },
        {
            "sample_id": 2290,
            "gold_sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
            "gold_complexity": 9,
            "vt": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000",
            "ba": "The virtual table identifies investors who have shown interest in entrepreneurs whose money requested is both greater than a specified amount and less than another specified amount. It uses an INTERSECT operation to find common investors from two different conditions on the 'money_requested' column.",
            "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000."
        },
        {
            "sample_id": 2257,
            "gold_sql": "SELECT count(*) FROM entrepreneur",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM entrepreneur",
            "ba": "The virtual table provides a count of all entries in the 'entrepreneur' table, which contains information about various entrepreneurs and their associated details.",
            "question": "Count the number of entrepreneurs."
        },
        {
            "sample_id": 2267,
            "gold_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
            "gold_complexity": 5,
            "vt": "SELECT people.name FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are linked to entrepreneurs in the 'entrepreneur' table. The join operation connects the two tables based on the 'people_id', allowing us to retrieve the names of people associated with specific entrepreneurs.",
            "question": "Return the names of entrepreneurs."
        },
        {
            "sample_id": 2258,
            "gold_sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
            "gold_complexity": 6,
            "vt": "SELECT entrepreneur.company FROM entrepreneur ORDER BY entrepreneur.money_requested",
            "ba": "The virtual table lists the names of companies founded by entrepreneurs from the 'entrepreneur' table, ordered by the amount of money they requested. The placeholder in the ORDER BY clause represents the money requested by each entrepreneur.",
            "question": "List the companies of entrepreneurs in descending order of money requested."
        },
        {
            "sample_id": 2275,
            "gold_sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
            "gold_complexity": 7,
            "vt": "SELECT SUM(entrepreneur.money_requested) FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE people.height > [placeholder-type:numeric]",
            "ba": "The virtual table calculates the total amount of money requested by entrepreneurs from the 'entrepreneur' table, filtered by the height of the individuals in the 'people' table. The placeholder in the WHERE clause represents the minimum height requirement for filtering the individuals.",
            "question": "Give the total money requested by entrepreneurs who are taller than 1.85."
        },
        {
            "sample_id": 2295,
            "gold_sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT entrepreneur.company FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY people.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of companies founded by entrepreneurs, ordered by the height of the associated individuals. The query joins the 'entrepreneur' table with the 'people' table using the 'people_id' foreign key to link entrepreneurs with their respective personal details. The result is limited to a specified number of entries.",
            "question": "Which company was started by the entrepreneur with the greatest height?"
        },
        {
            "sample_id": 2287,
            "gold_sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
            "gold_complexity": 9,
            "vt": "SELECT people.name, entrepreneur.company FROM entrepreneur JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY entrepreneur.money_requested",
            "ba": "The virtual table describes the names of people and the companies they founded, sorted by the amount of money requested by the entrepreneurs. The data is retrieved from the 'entrepreneur' table, which contains information about entrepreneurs and their requests, and the 'people' table, which holds personal details of individuals. The join operation links these two tables through the 'people_id' to associate each entrepreneur with their corresponding personal information.",
            "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?"
        },
        {
            "sample_id": 2284,
            "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of investors who have shown interest in multiple entrepreneurs' companies. The placeholder in the HAVING clause represents the minimum number of entrepreneurs an investor must be associated with to be included in the results.",
            "question": "What are the investors that have invested in at least two entrepreneurs?"
        },
        {
            "sample_id": 2256,
            "gold_sql": "SELECT count(*) FROM entrepreneur",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM entrepreneur",
            "ba": "The virtual table provides a count of all entries in the 'entrepreneur' table, which contains information about various entrepreneurs and their associated details.",
            "question": "How many entrepreneurs are there?"
        },
        {
            "sample_id": 2280,
            "gold_sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
            "gold_complexity": 8,
            "vt": "SELECT entrepreneur.investor, COUNT(*) FROM entrepreneur GROUP BY entrepreneur.investor",
            "ba": "The virtual table summarizes the number of entrepreneurs associated with each investor from the 'entrepreneur' table. The placeholder in the SELECT clause represents the investor's name, while the COUNT function aggregates the total number of entrepreneurs for each investor.",
            "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?"
        },
        {
            "sample_id": 2288,
            "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
            "gold_complexity": 10,
            "vt": "SELECT people.name FROM people WHERE NOT entrepreneur.people_id IN (SELECT entrepreneur.people_id FROM entrepreneur)",
            "ba": "The virtual table describes the names of people from the 'people' table who are not linked to any entrepreneur in the 'entrepreneur' table. The query uses a subquery to filter out those people whose IDs are present in the 'entrepreneur' table.",
            "question": "List the names of people that are not entrepreneurs."
        },
        {
            "sample_id": 2283,
            "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of investors from the 'entrepreneur' table, grouping them to count how many entrepreneurs are associated with each investor. The results are ordered by the number of entrepreneurs linked to each investor, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Return the investor who have invested in the greatest number of entrepreneurs."
        },
        {
            "sample_id": 2285,
            "gold_sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT entrepreneur.investor FROM entrepreneur GROUP BY entrepreneur.investor HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of investors from the 'entrepreneur' table who have shown interest in multiple entrepreneurial ventures. The placeholder in the HAVING clause represents the minimum number of ventures an investor must be associated with to be included in the results.",
            "question": "Return the investors who have invested in two or more entrepreneurs."
        }
    ],
    "climbing": [
        {
            "sample_id": 1147,
            "gold_sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT mountain.range FROM mountain GROUP BY mountain.range ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique mountain ranges from the 'mountain' table, grouping them to count the number of mountains in each range. The results are ordered by the count of mountains in descending order, and a limit is applied to restrict the number of ranges returned based on a specified numeric value.",
            "question": "Which range contains the most mountains?"
        },
        {
            "sample_id": 1133,
            "gold_sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT mountain.height FROM climber JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY climber.points LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the heights of mountains that climbers have ascended, ordered by the points awarded to the climbers. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the height of the mountain climbined by the climbing who had the most points?"
        },
        {
            "sample_id": 1112,
            "gold_sql": "SELECT Name FROM climber ORDER BY Points DESC",
            "gold_complexity": 6,
            "vt": "SELECT climber.name FROM climber ORDER BY climber.points",
            "ba": "The virtual table lists the names of climbers from the 'climber' table, ordered by the points they have earned based on their achievements. This allows for an easy view of climbers ranked by their performance.",
            "question": "List the names of climbers in descending order of points."
        },
        {
            "sample_id": 1144,
            "gold_sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
            "gold_complexity": 9,
            "vt": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
            "ba": "The virtual table identifies countries that have mountains with heights both greater than 5600 meters and less than 5200 meters. This is achieved by selecting the 'country' from the 'mountain' table where the height conditions are met, and using the INTERSECT operator to find common countries that satisfy both conditions.",
            "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200."
        },
        {
            "sample_id": 1118,
            "gold_sql": "SELECT COUNT(DISTINCT Country) FROM climber",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Country) FROM climber",
            "ba": "The virtual table counts the distinct countries represented by climbers in the 'climber' table.",
            "question": "How many distinct countries are the climbers from?"
        },
        {
            "sample_id": 1111,
            "gold_sql": "SELECT count(*) FROM climber",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM climber",
            "ba": "The virtual table counts the total number of climbers recorded in the 'climber' table.",
            "question": "Count the number of climbers."
        },
        {
            "sample_id": 1116,
            "gold_sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
            "gold_complexity": 6,
            "vt": "SELECT MAX(climber.points) FROM climber WHERE climber.country = None.\"united kingdom\"",
            "ba": "The virtual table retrieves the maximum points awarded to climbers from a specific country, in this case, the United Kingdom, from the 'climber' table.",
            "question": "What is the maximum point for climbers whose country is United Kingdom?"
        },
        {
            "sample_id": 1131,
            "gold_sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
            "gold_complexity": 7,
            "vt": "SELECT climber.name, mountain.height FROM climber JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
            "ba": "The virtual table describes the names of climbers along with the heights of the mountains they have climbed. It combines data from the 'climber' and 'mountain' tables using a join on the mountain identifier, allowing us to see which climber has climbed which mountain and the respective height of that mountain.",
            "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?"
        },
        {
            "sample_id": 1142,
            "gold_sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
            "gold_complexity": 10,
            "vt": "SELECT mountain.name FROM mountain WHERE NOT mountain.mountain_id IN (SELECT mountain.mountain_id FROM climber)",
            "ba": "The virtual table lists the names of mountains from the 'mountain' table that have not been climbed by any climber. It uses a subquery to filter out mountains that have associated climbers based on their unique identifiers.",
            "question": "List the names of mountains that do not have any climber."
        },
        {
            "sample_id": 1145,
            "gold_sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
            "gold_complexity": 9,
            "vt": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
            "ba": "The virtual table identifies countries that have mountains with heights both greater than 5600 meters and less than 5200 meters. This is achieved by selecting the 'country' from the 'mountain' table where the height conditions are met, and using the INTERSECT operator to find common countries that satisfy both conditions.",
            "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?"
        },
        {
            "sample_id": 1149,
            "gold_sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
            "gold_complexity": 7,
            "vt": "SELECT mountain.name FROM mountain WHERE mountain.height > [placeholder-type:numeric] OR mountain.prominence > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of mountains from the 'mountain' table that have a height greater than a specified value or a prominence greater than a specified value. The placeholders in the WHERE clause represent the numeric thresholds for height and prominence.",
            "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?"
        },
        {
            "sample_id": 1139,
            "gold_sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
            "gold_complexity": 8,
            "vt": "SELECT climber.country, COUNT(*) FROM climber GROUP BY climber.country",
            "ba": "The virtual table summarizes the number of climbers from each country who have climbed mountains. It groups the results by the country of the climber, providing a count of climbers for each distinct country.",
            "question": "How many climbers are from each country?"
        },
        {
            "sample_id": 1130,
            "gold_sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
            "gold_complexity": 7,
            "vt": "SELECT climber.name, mountain.height FROM climber JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
            "ba": "The virtual table describes the names of climbers along with the heights of the mountains they have climbed. It combines data from the 'climber' and 'mountain' tables using a join on the mountain identifier, allowing us to see which climber has climbed which mountain and the respective height of that mountain.",
            "question": "Show the names of climbers and the heights of mountains they climb."
        },
        {
            "sample_id": 1148,
            "gold_sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
            "gold_complexity": 7,
            "vt": "SELECT mountain.name FROM mountain WHERE mountain.height > [placeholder-type:numeric] OR mountain.prominence > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of mountains from the 'mountain' table that have a height greater than a specified value or a prominence greater than a specified value. The placeholders in the WHERE clause represent the numeric thresholds for height and prominence.",
            "question": "Show the names of mountains with height more than 5000 or prominence more than 1000."
        },
        {
            "sample_id": 1126,
            "gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT mountain.range FROM mountain ORDER BY mountain.prominence LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct mountain ranges from the 'mountain' table, ordered by their prominence. The result is limited to a specified number of entries.",
            "question": "List the distinct ranges of the mountains with the top 3 prominence."
        },
        {
            "sample_id": 1125,
            "gold_sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT mountain.name FROM mountain ORDER BY mountain.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of mountains from the 'mountain' table, ordered by their height in ascending order. The placeholder in the LIMIT clause allows the user to specify the maximum number of mountain names to retrieve.",
            "question": "Return the name of the mountain with the greatest height."
        },
        {
            "sample_id": 1113,
            "gold_sql": "SELECT Name FROM climber ORDER BY Points DESC",
            "gold_complexity": 6,
            "vt": "SELECT climber.name FROM climber ORDER BY climber.points",
            "ba": "The virtual table lists the names of climbers from the 'climber' table, ordered by the points they have earned based on their achievements. This allows for an easy view of climbers ranked by their performance.",
            "question": "What are the names of the climbers, ordered by points descending?"
        },
        {
            "sample_id": 1128,
            "gold_sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID",
            "gold_complexity": 7,
            "vt": "SELECT climber.name, mountain.name FROM climber JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
            "ba": "The virtual table describes the names of climbers and the mountains they have climbed by joining the 'climber' and 'mountain' tables based on the mountain identifier. The placeholders represent the necessary identifiers for linking climbers to their respective mountains.",
            "question": "Show names of climbers and the names of mountains they climb."
        },
        {
            "sample_id": 1137,
            "gold_sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
            "gold_complexity": 7,
            "vt": "SELECT climber.time FROM climber JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE mountain.country = None.\"uganda\"",
            "ba": "The virtual table retrieves the time taken by climbers to reach the summit of mountains located in Uganda. It joins the 'climber' table with the 'mountain' table based on the mountain identifier, filtering the results to only include mountains in Uganda.",
            "question": "What are the times used by climbers who climbed mountains in the country of Uganda?"
        },
        {
            "sample_id": 1138,
            "gold_sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
            "gold_complexity": 8,
            "vt": "SELECT climber.country, COUNT(*) FROM climber GROUP BY climber.country",
            "ba": "The virtual table summarizes the number of climbers from each country who have participated in climbing activities. It groups the results by the country of the climber, allowing for an aggregated count of climbers per country.",
            "question": "Please show the countries and the number of climbers from each country."
        },
        {
            "sample_id": 1134,
            "gold_sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT mountain.name FROM climber JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE climber.country = None.\"west germany\"",
            "ba": "The virtual table lists the distinct names of mountains that climbers from a specific country have climbed. It joins the 'climber' table with the 'mountain' table based on the mountain identifier, filtering the results to include only those climbers from a specified country.",
            "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\"."
        },
        {
            "sample_id": 1141,
            "gold_sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT mountain.country FROM mountain GROUP BY mountain.country HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the countries that have more than a specified number of mountains in the 'mountain' table. The placeholder in the HAVING clause represents the minimum count of mountains required for a country to be included in the results.",
            "question": "Which countries have more than one mountain?"
        },
        {
            "sample_id": 1110,
            "gold_sql": "SELECT count(*) FROM climber",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM climber",
            "ba": "The virtual table counts the total number of climbers recorded in the 'climber' table.",
            "question": "How many climbers are there?"
        },
        {
            "sample_id": 1127,
            "gold_sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT mountain.range FROM mountain ORDER BY mountain.prominence LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct mountain ranges from the 'mountain' table, ordered by their prominence. The result is limited to a specified number of entries.",
            "question": "What are the different ranges of the 3 mountains with the highest prominence?"
        }
    ],
    "cre_Theme_park": [
        {
            "sample_id": 5929,
            "gold_sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
            "gold_complexity": 8,
            "vt": "SELECT hotels.star_rating_code, AVG(hotels.price_range) FROM hotels GROUP BY hotels.star_rating_code",
            "ba": "The virtual table summarizes the average price range of hotels grouped by their star rating code. This allows users to see how the price varies across different star ratings.",
            "question": "What is the average price range of hotels for each each star rating code?"
        },
        {
            "sample_id": 5956,
            "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
            "gold_complexity": 10,
            "vt": "SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\"",
            "ba": "The virtual table lists the names of tourist attractions that have been visited by both tourists identified by specific details. It uses an INTERSECT operation to find common attractions visited by two different tourists.",
            "question": "What are the names of the tourist attractions Vincent and Marcelle visit?"
        },
        {
            "sample_id": 5902,
            "gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
            "gold_complexity": 6,
            "vt": "SELECT tourist_attractions.name FROM tourist_attractions WHERE tourist_attractions.how_to_get_there = None.\"bus\"",
            "ba": "The virtual table describes the names of tourist attractions from the 'tourist_attractions' table that can be reached by bus. The placeholder in the WHERE clause represents the method of transportation used to access the attractions.",
            "question": "What are the names of the tourist attractions that can be accessed by bus?"
        },
        {
            "sample_id": 5912,
            "gold_sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
            "gold_complexity": 9,
            "vt": "SELECT photos.name, photos.description FROM photos JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE tourist_attractions.name = None.\"film festival\"",
            "ba": "The virtual table describes the names and descriptions of photos associated with tourist attractions that are specifically identified as a film festival. The query joins the 'photos' table with the 'tourist_attractions' table to filter the results based on the name of the attraction.",
            "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?"
        },
        {
            "sample_id": 5894,
            "gold_sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
            "gold_complexity": 6,
            "vt": "SELECT locations.other_details FROM locations WHERE locations.location_name = None.\"uk gallery\"",
            "ba": "The virtual table describes the additional details of a specific location from the 'locations' table based on the location's name. The placeholder in the WHERE clause represents the name of the location being queried.",
            "question": "What is the detail of the location UK Gallery?"
        },
        {
            "sample_id": 5927,
            "gold_sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, visits.visit_date FROM tourist_attractions, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE visitors.tourist_details = None.\"vincent\" OR visitors.tourist_details = None.\"vivian\"",
            "ba": "The virtual table provides a list of tourist attractions along with the corresponding visit dates for specific tourists identified by their details. It combines data from the 'tourist_attractions', 'visits', and 'visitors' tables, filtering for tourists with specific details.",
            "question": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there."
        },
        {
            "sample_id": 5896,
            "gold_sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
            "gold_complexity": 6,
            "vt": "SELECT locations.location_name FROM locations WHERE locations.location_name LIKE None.\"%film%\"",
            "ba": "The virtual table lists the names of locations from the 'locations' table that contain the word 'film' in their name. The placeholder in the WHERE clause allows for flexible searching based on user input.",
            "question": "Which location names contain the word \"film\"?"
        },
        {
            "sample_id": 5886,
            "gold_sql": "SELECT Tourist_Details FROM VISITORS",
            "gold_complexity": 4,
            "vt": "SELECT visitors.tourist_details FROM visitors",
            "ba": "The virtual table provides details related to tourists from the 'visitors' table. The query selects the 'tourist_details' column, which contains specific information about each tourist.",
            "question": "Show details of all visitors."
        },
        {
            "sample_id": 5884,
            "gold_sql": "SELECT Name ,  Other_Details FROM Staff",
            "gold_complexity": 6,
            "vt": "SELECT staff.name, staff.other_details FROM staff",
            "ba": "The virtual table describes the names and additional details of staff members associated with various tourist attractions. The query retrieves this information from the 'staff' table without any filtering conditions.",
            "question": "Show the names and details of all the staff members."
        },
        {
            "sample_id": 5920,
            "gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
            "gold_complexity": 8,
            "vt": "SELECT street_markets.market_details FROM street_markets JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE tourist_attractions.how_to_get_there = None.\"walk\" OR tourist_attractions.how_to_get_there = None.\"bus\"",
            "ba": "The virtual table describes the details of street markets that are accessible by walking or by bus from tourist attractions. It joins the 'street_markets' table with the 'tourist_attractions' table to filter the markets based on the transportation methods available to reach the attractions.",
            "question": "What are the details of the markets that can be accessed by walk or bus?"
        },
        {
            "sample_id": 5885,
            "gold_sql": "SELECT Name ,  Other_Details FROM Staff",
            "gold_complexity": 6,
            "vt": "SELECT staff.name, staff.other_details FROM staff",
            "ba": "The virtual table describes the names and additional details of staff members associated with various tourist attractions. The query retrieves this information from the 'staff' table without any filtering conditions, allowing for a comprehensive view of all staff members.",
            "question": "What is the name and detail of each staff member?"
        },
        {
            "sample_id": 5955,
            "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
            "gold_complexity": 8,
            "vt": "SELECT tourist_attractions.name FROM locations JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE locations.address = None.\"254 ottilie junction\" OR tourist_attractions.how_to_get_there = None.\"bus\"",
            "ba": "The virtual table describes the names of tourist attractions from the 'tourist_attractions' table that are located at a specific address or have specific instructions on how to get there. The placeholders in the WHERE clause represent the address and the method of transportation.",
            "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction."
        },
        {
            "sample_id": 5940,
            "gold_sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT ref_attraction_types.attraction_type_description, tourist_attractions.attraction_type_code FROM ref_attraction_types JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY tourist_attractions.attraction_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of different types of tourist attractions by joining the 'ref_attraction_types' table with the 'tourist_attractions' table. It selects the description of each attraction type and its corresponding code, grouping the results by the attraction type code to count how many attractions belong to each type. The results are ordered by the count of attractions, allowing for a limit on the number of types displayed.",
            "question": "Show the description and code of the attraction type most tourist attractions belong to."
        },
        {
            "sample_id": 5882,
            "gold_sql": "SELECT DISTINCT Location_Name FROM LOCATIONS",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT locations.location_name FROM locations",
            "ba": "The virtual table lists unique location names from the 'locations' table.",
            "question": "Show all distinct location names."
        },
        {
            "sample_id": 5933,
            "gold_sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
            "gold_complexity": 8,
            "vt": "SELECT hotels.hotel_id, hotels.star_rating_code FROM hotels ORDER BY hotels.price_range",
            "ba": "The virtual table lists the unique identifiers and star rating codes of hotels from the 'hotels' table, ordered by their price range. This allows users to see the hotels along with their star ratings in a structured manner based on how expensive they are.",
            "question": "Find the id and star rating of each hotel and sort them in increasing order of price."
        },
        {
            "sample_id": 5888,
            "gold_sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
            "gold_complexity": 6,
            "vt": "SELECT hotels.price_range FROM hotels WHERE hotels.star_rating_code = None.\"5\"",
            "ba": "The virtual table retrieves the price range of hotels from the 'hotels' table that have a specific star rating code. The placeholder in the WHERE clause represents the star rating code for which the price range is being queried.",
            "question": "Show the price ranges of hotels with 5 star ratings."
        },
        {
            "sample_id": 5900,
            "gold_sql": "SELECT DISTINCT Visit_Date FROM VISITS",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT visits.visit_date FROM visits",
            "ba": "The virtual table provides a list of unique visit dates from the 'visits' table, which records the visits made by tourists to various attractions.",
            "question": "What are the distinct visit dates?"
        },
        {
            "sample_id": 5880,
            "gold_sql": "SELECT price_range FROM HOTELS",
            "gold_complexity": 4,
            "vt": "SELECT hotels.price_range FROM hotels",
            "ba": "The virtual table displays the price range of hotels from the 'hotels' table. This information helps users understand the cost category of different hotels available.",
            "question": "What are the price ranges of hotels?"
        },
        {
            "sample_id": 5910,
            "gold_sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
            "gold_complexity": 7,
            "vt": "SELECT tourist_attractions.name FROM photos JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE photos.name = None.\"game1\"",
            "ba": "The virtual table lists the names of tourist attractions associated with a specific photo name from the 'photos' table. It joins the 'photos' table with the 'tourist_attractions' table to link each photo to its corresponding attraction based on the tourist attraction ID. The placeholder in the WHERE clause represents the name of the photo being queried.",
            "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?"
        },
        {
            "sample_id": 5922,
            "gold_sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
            "gold_complexity": 9,
            "vt": "SELECT visits.visit_date, visits.visit_details FROM visitors JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE visitors.tourist_details = None.\"vincent\"",
            "ba": "The virtual table describes the visit dates and details of visits made by a specific tourist from the 'visits' table. It joins the 'visitors' table to filter the results based on the tourist's details, using a placeholder for the tourist's name.",
            "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?"
        },
        {
            "sample_id": 5923,
            "gold_sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
            "gold_complexity": 9,
            "vt": "SELECT visits.visit_date, visits.visit_details FROM visitors JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE visitors.tourist_details = None.\"vincent\"",
            "ba": "The virtual table describes the visit dates and details of visits made by a specific tourist from the 'visits' table. It joins the 'visitors' table to filter the records based on the tourist's details, using a placeholder for the tourist's name.",
            "question": "Find the visit date and details of the tourist whose detail is 'Vincent'"
        },
        {
            "sample_id": 5903,
            "gold_sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
            "gold_complexity": 6,
            "vt": "SELECT tourist_attractions.name FROM tourist_attractions WHERE tourist_attractions.how_to_get_there = None.\"bus\"",
            "ba": "The virtual table lists the names of tourist attractions from the 'tourist_attractions' table that can be reached by bus. The placeholder in the WHERE clause represents the method of transportation used to access the attractions.",
            "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions."
        },
        {
            "sample_id": 5952,
            "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
            "gold_complexity": 9,
            "vt": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'",
            "ba": "The virtual table lists the names of tourist attractions that have specific features related to parks or shopping. It combines data from the 'Tourist_Attractions', 'Tourist_Attraction_Features', and 'Features' tables, filtering for attractions that include features categorized as 'park' or 'shopping'.",
            "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?"
        },
        {
            "sample_id": 5938,
            "gold_sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT tourist_attractions.how_to_get_there FROM tourist_attractions GROUP BY tourist_attractions.how_to_get_there ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique instructions on how to reach various tourist attractions. It groups the results by the 'how_to_get_there' column from the 'tourist_attractions' table and orders them based on the frequency of each instruction, limiting the output to a specified number of entries.",
            "question": "Show the transportation method most people choose to get to tourist attractions."
        },
        {
            "sample_id": 5915,
            "gold_sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
            "gold_complexity": 7,
            "vt": "SELECT royal_family.royal_family_details, tourist_attractions.how_to_get_there FROM royal_family JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
            "ba": "The virtual table describes the details of royal family entries along with instructions on how to reach the associated tourist attractions. It combines data from the 'royal_family' table and the 'tourist_attractions' table using a join on their respective identifiers.",
            "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there."
        },
        {
            "sample_id": 5907,
            "gold_sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000",
            "gold_complexity": 7,
            "vt": "SELECT ref_hotel_star_ratings.star_rating_description FROM hotels JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE hotels.price_range > [placeholder-type:numeric]",
            "ba": "The virtual table describes the star rating descriptions of hotels from the 'hotels' table that fall within a specific price range. The query joins the 'hotels' table with the 'ref_hotel_star_ratings' table to retrieve the corresponding star rating descriptions based on the star rating code. The placeholder in the WHERE clause represents the minimum price range for filtering the hotels.",
            "question": "Give me the star rating descriptions of the hotels that cost more than 10000."
        },
        {
            "sample_id": 5893,
            "gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
            "gold_complexity": 6,
            "vt": "SELECT locations.address FROM locations WHERE locations.location_name = None.\"uk gallery\"",
            "ba": "The virtual table retrieves the physical address of a specific location from the 'locations' table based on the provided location name. The placeholder in the WHERE clause represents the name of the location being queried.",
            "question": "Find the address of the location named \"UK Gallery\"."
        },
        {
            "sample_id": 5945,
            "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, visits.tourist_attraction_id, COUNT(*) FROM tourist_attractions JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY visits.tourist_attraction_id",
            "ba": "The virtual table summarizes the names of tourist attractions along with the count of visits for each attraction. It joins the 'tourist_attractions' table with the 'visits' table to aggregate the number of visits per attraction, grouping the results by the unique identifier of each tourist attraction.",
            "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?"
        },
        {
            "sample_id": 5936,
            "gold_sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT hotels.other_hotel_details, hotels.star_rating_code FROM hotels ORDER BY hotels.price_range LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of hotels along with their additional details and star rating codes. The results are ordered by the price range of the hotels, and the number of records returned is limited by a specified numeric value.",
            "question": "Show the details and star ratings of the 3 least expensive hotels."
        },
        {
            "sample_id": 5948,
            "gold_sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, tourist_attractions.tourist_attraction_id FROM tourist_attractions JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY visits.tourist_attraction_id HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of tourist attractions along with their unique identifiers. It retrieves data from the 'tourist_attractions' table and joins it with the 'visits' table to count the number of visits for each attraction. The results are grouped by the tourist attraction ID, and only those attractions with a visit count less than or equal to a specified number are included.",
            "question": "Show the names and ids of tourist attractions that are visited at most once."
        },
        {
            "sample_id": 5890,
            "gold_sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
            "gold_complexity": 7,
            "vt": "SELECT AVG(hotels.price_range) FROM hotels WHERE hotels.star_rating_code = None.\"5\" AND hotels.pets_allowed_yn = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average price range of hotels from the 'hotels' table that have a specific star rating and a condition on whether pets are allowed. The placeholder in the WHERE clause represents the pets allowed status, which can be either 'Yes' or 'No'.",
            "question": "Show the average price range of hotels that have 5 star ratings and allow pets."
        },
        {
            "sample_id": 5881,
            "gold_sql": "SELECT price_range FROM HOTELS",
            "gold_complexity": 4,
            "vt": "SELECT hotels.price_range FROM hotels",
            "ba": "The virtual table displays the price range of hotels from the 'hotels' table. This information helps users understand the cost category of different hotels available.",
            "question": "Tell me the price ranges for all the hotels."
        },
        {
            "sample_id": 5883,
            "gold_sql": "SELECT DISTINCT Location_Name FROM LOCATIONS",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT locations.location_name FROM locations",
            "ba": "The virtual table lists unique location names from the 'locations' table.",
            "question": "What are the distinct location names?"
        },
        {
            "sample_id": 5953,
            "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
            "gold_complexity": 9,
            "vt": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping'",
            "ba": "The virtual table lists the names of tourist attractions that have specific features related to parks or shopping. It combines data from the 'Tourist_Attractions', 'Tourist_Attraction_Features', and 'Features' tables, filtering for attractions that include features categorized as 'park' or 'shopping'.",
            "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?"
        },
        {
            "sample_id": 5926,
            "gold_sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, visits.visit_date FROM tourist_attractions, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE visitors.tourist_details = None.\"vincent\" OR visitors.tourist_details = None.\"vivian\"",
            "ba": "The virtual table provides a list of tourist attractions along with the visit dates for specific tourists identified by their details. It combines data from the 'tourist_attractions', 'visits', and 'visitors' tables, filtering for tourists with specific details.",
            "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?"
        },
        {
            "sample_id": 5949,
            "gold_sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, tourist_attractions.tourist_attraction_id FROM tourist_attractions JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY visits.tourist_attraction_id HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and unique identifiers of tourist attractions that have been visited by tourists, filtering those that have been visited a number of times less than or equal to a specified limit. The query joins the 'tourist_attractions' table with the 'visits' table to aggregate the visit counts for each attraction.",
            "question": "What are the names and ids of the tourist attractions that are visited at most once?"
        },
        {
            "sample_id": 5950,
            "gold_sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
            "gold_complexity": 8,
            "vt": "SELECT tourist_attractions.name FROM locations JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE locations.address = None.\"660 shea crescent\" OR tourist_attractions.how_to_get_there = None.\"walk\"",
            "ba": "The virtual table lists the names of tourist attractions based on their location or accessibility instructions. It retrieves data from the 'locations' table and the 'tourist_attractions' table, filtering for attractions that are either located at a specific address or have specific instructions on how to get there.",
            "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?"
        },
        {
            "sample_id": 5921,
            "gold_sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
            "gold_complexity": 8,
            "vt": "SELECT street_markets.market_details FROM street_markets JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE tourist_attractions.how_to_get_there = None.\"walk\" OR tourist_attractions.how_to_get_there = None.\"bus\"",
            "ba": "The virtual table describes the details of street markets that are accessible by walking or by bus from tourist attractions. It combines data from the 'street_markets' and 'tourist_attractions' tables, filtering based on the transportation methods available to reach the attractions.",
            "question": "Find the details of all the markets that are accessible by walk or bus."
        },
        {
            "sample_id": 5895,
            "gold_sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
            "gold_complexity": 6,
            "vt": "SELECT locations.other_details FROM locations WHERE locations.location_name = None.\"uk gallery\"",
            "ba": "The virtual table describes the additional details of a specific location from the 'locations' table based on the location's name. The placeholder in the WHERE clause represents the name of the location being queried.",
            "question": "Return the detail of the location named \"UK Gallery\"."
        },
        {
            "sample_id": 5947,
            "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, visits.tourist_attraction_id FROM tourist_attractions JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY visits.tourist_attraction_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of tourist attractions along with their identifiers that have been visited by tourists at least a specified number of times. It aggregates the visit records to filter attractions based on the count of visits.",
            "question": "Which tourist attractions are visited at least twice? Give me their names and ids."
        },
        {
            "sample_id": 5930,
            "gold_sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
            "gold_complexity": 8,
            "vt": "SELECT hotels.pets_allowed_yn, AVG(hotels.price_range) FROM hotels GROUP BY hotels.pets_allowed_yn",
            "ba": "The virtual table summarizes the average price range of hotels, categorized by whether pets are allowed or not. The placeholder in the SELECT statement represents the pet policy of the hotels, while the average price range is calculated for each category.",
            "question": "Show the average price of hotels for different pet policy."
        },
        {
            "sample_id": 5944,
            "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, visits.tourist_attraction_id, COUNT(*) FROM tourist_attractions JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY visits.tourist_attraction_id",
            "ba": "The virtual table summarizes the names of tourist attractions along with the count of visits for each attraction. It joins the 'tourist_attractions' table with the 'visits' table to aggregate the number of visits per attraction, grouping the results by the unique identifier of each tourist attraction.",
            "question": "Show different tourist attractions' names, ids, and the corresponding number of visits."
        },
        {
            "sample_id": 5898,
            "gold_sql": "SELECT count(DISTINCT Name) FROM PHOTOS",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Name) FROM photos",
            "ba": "The virtual table counts the distinct names of photos associated with tourist attractions from the 'photos' table.",
            "question": "How many distinct names are associated with all the photos?"
        },
        {
            "sample_id": 5935,
            "gold_sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT hotels.other_hotel_details FROM hotels ORDER BY hotels.price_range LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of additional details about hotels from the 'hotels' table, ordered by their price range. The placeholder in the LIMIT clause allows the user to specify the maximum number of hotel details to retrieve.",
            "question": "What are the details of the three most expensive hotels?"
        },
        {
            "sample_id": 5941,
            "gold_sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT ref_attraction_types.attraction_type_description, tourist_attractions.attraction_type_code FROM ref_attraction_types JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY tourist_attractions.attraction_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of different types of tourist attractions by joining the 'ref_attraction_types' table with the 'tourist_attractions' table. It selects the description of each attraction type and its corresponding code, grouping the results by the attraction type code to count how many attractions belong to each type. The results are ordered by the count of attractions, allowing the user to limit the output to a specified number of types.",
            "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code."
        },
        {
            "sample_id": 5942,
            "gold_sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
            "gold_complexity": 8,
            "vt": "SELECT tourist_attractions.how_to_get_there, COUNT(*) FROM tourist_attractions GROUP BY tourist_attractions.how_to_get_there",
            "ba": "The virtual table summarizes the different ways to reach various tourist attractions, providing a count of attractions for each method of access. The query groups the results by the 'how_to_get_there' column from the 'tourist_attractions' table, allowing users to see how many attractions can be accessed through each specified method.",
            "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way."
        },
        {
            "sample_id": 5905,
            "gold_sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
            "gold_complexity": 9,
            "vt": "SELECT tourist_attractions.name, tourist_attractions.opening_hours FROM tourist_attractions WHERE tourist_attractions.how_to_get_there = None.\"bus\" OR tourist_attractions.how_to_get_there = None.\"walk\"",
            "ba": "The virtual table describes the names and opening hours of tourist attractions that can be reached by either bus or on foot. The placeholders in the WHERE clause represent the methods of transportation to the attractions.",
            "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk."
        },
        {
            "sample_id": 5957,
            "gold_sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
            "gold_complexity": 10,
            "vt": "SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1, VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = \"Marcelle\"",
            "ba": "The virtual table lists the names of tourist attractions that have been visited by both tourists with specific details. It uses an INTERSECT operation to find common attractions visited by two different tourists identified by their details.",
            "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions."
        },
        {
            "sample_id": 5946,
            "gold_sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT tourist_attractions.name, visits.tourist_attraction_id FROM tourist_attractions JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY visits.tourist_attraction_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of tourist attractions along with their identifiers from the 'tourist_attractions' table, filtered to include only those attractions that have been visited a specified number of times. The placeholder in the HAVING clause represents the minimum count of visits required for an attraction to be included in the results.",
            "question": "Show the names and ids of tourist attractions that are visited at least two times."
        },
        {
            "sample_id": 5892,
            "gold_sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
            "gold_complexity": 6,
            "vt": "SELECT locations.address FROM locations WHERE locations.location_name = None.\"uk gallery\"",
            "ba": "The virtual table retrieves the physical address of a specific location from the 'locations' table based on the provided location name. The placeholder in the WHERE clause represents the name of the location being queried.",
            "question": "What is the address of the location \"UK Gallery\"?"
        }
    ],
    "cre_Doc_Control_Systems": [
        {
            "sample_id": 2108,
            "gold_sql": "SELECT document_id ,  receipt_date FROM Documents;",
            "gold_complexity": 6,
            "vt": "SELECT documents.document_id, documents.receipt_date FROM documents",
            "ba": "The virtual table provides a list of document IDs along with their corresponding receipt dates from the 'documents' table. This allows users to see when each document was received based on its unique identifier.",
            "question": "List all document ids and receipt dates of documents."
        },
        {
            "sample_id": 2100,
            "gold_sql": "SELECT document_type_code FROM Ref_Document_Types;",
            "gold_complexity": 4,
            "vt": "SELECT ref_document_types.document_type_code FROM ref_document_types",
            "ba": "The virtual table retrieves the unique codes representing different types of documents from the 'ref_document_types' table. This table contains a list of document types, each identified by a unique code.",
            "question": "What document type codes do we have?"
        },
        {
            "sample_id": 2121,
            "gold_sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";",
            "gold_complexity": 10,
            "vt": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
            "ba": "The virtual table lists the unique identifiers of documents from the 'Documents' table that have a status of 'done' and are of the type 'Paper'. It excludes those documents that are associated with the shipping agent named 'USPS'.",
            "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS."
        },
        {
            "sample_id": 2129,
            "gold_sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 16,
            "vt": "SELECT employees.employee_name, COUNT(*) FROM employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY circulation_history.document_id, circulation_history.draft_number, circulation_history.copy_number ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of documents circulated by each employee. It retrieves the employee's name and counts the occurrences of their involvement in the circulation history. The results are grouped by document ID, draft number, and copy number to ensure that each unique circulation instance is counted. The output is ordered by the count of circulations, and a limit is applied to restrict the number of results returned.",
            "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies."
        },
        {
            "sample_id": 2127,
            "gold_sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;",
            "gold_complexity": 7,
            "vt": "SELECT employees.employee_name FROM employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE circulation_history.document_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of employees who have been involved in the circulation of a specific document. It retrieves employee names from the 'employees' table by joining it with the 'circulation_history' table based on the employee's identifier. The placeholder in the WHERE clause represents the unique identifier of the document being circulated.",
            "question": "List all employees in the circulation history of the document with id 1. List the employee's name."
        },
        {
            "sample_id": 2104,
            "gold_sql": "SELECT role_code FROM ROLES;",
            "gold_complexity": 4,
            "vt": "SELECT roles.role_code FROM roles",
            "ba": "The virtual table lists the unique role codes from the 'roles' table, which represent different roles within the organization.",
            "question": "What are all role codes?"
        },
        {
            "sample_id": 2125,
            "gold_sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
            "gold_complexity": 11,
            "vt": "SELECT draft_copies.document_id, COUNT(draft_copies.copy_number) FROM draft_copies GROUP BY draft_copies.document_id ORDER BY COUNT(draft_copies.copy_number) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of copies made for each document in the 'draft_copies' table. It groups the results by the document identifier and counts the total number of copies associated with each document. The results are ordered by the count of copies, and a limit is applied to restrict the number of results returned.",
            "question": "Which document has the most draft copies? List its document id and number of draft copies."
        },
        {
            "sample_id": 2119,
            "gold_sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
            "gold_complexity": 7,
            "vt": "SELECT addresses.address_details FROM addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE documents_mailed.document_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the detailed address information from the 'addresses' table for documents that have been mailed. The placeholder in the WHERE clause represents the unique identifier of the document that was mailed.",
            "question": "What address was the document with id 4 mailed to?"
        },
        {
            "sample_id": 2115,
            "gold_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;",
            "gold_complexity": 7,
            "vt": "SELECT ref_shipping_agents.shipping_agent_name FROM ref_shipping_agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE documents.document_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of shipping agents from the 'ref_shipping_agents' table associated with a specific document in the 'documents' table. The placeholder in the WHERE clause represents the unique identifier of the document.",
            "question": "What is the name of the shipping agent of the document with id 2?"
        },
        {
            "sample_id": 2103,
            "gold_sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";",
            "gold_complexity": 6,
            "vt": "SELECT ref_shipping_agents.shipping_agent_code FROM ref_shipping_agents WHERE ref_shipping_agents.shipping_agent_name = None.\"ups\"",
            "ba": "The virtual table retrieves the unique code of a shipping agent from the 'ref_shipping_agents' table based on the specified name of the shipping agent.",
            "question": "What is the shipping agent code of shipping agent UPS?"
        },
        {
            "sample_id": 2110,
            "gold_sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;",
            "gold_complexity": 11,
            "vt": "SELECT Roles.role_description, COUNT(employees.employee_id) FROM roles JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY employees.role_code HAVING COUNT(employees.employee_id) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of employees associated with each role in the organization. It retrieves the role description from the 'roles' table and counts the number of employees linked to each role from the 'employees' table. The results are grouped by role and filtered to show only those roles that have more than a specified number of employees.",
            "question": "List roles that have more than one employee. List the role description and number of employees."
        },
        {
            "sample_id": 2099,
            "gold_sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";",
            "gold_complexity": 6,
            "vt": "SELECT ref_document_status.document_status_description FROM ref_document_status WHERE ref_document_status.document_status_code = None.\"working\"",
            "ba": "The virtual table describes the status of documents from the 'ref_document_status' table based on a specific document status code. The placeholder in the WHERE clause represents the code for the document status being queried.",
            "question": "What is the description of document status code 'working'?"
        },
        {
            "sample_id": 2126,
            "gold_sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;",
            "gold_complexity": 10,
            "vt": "SELECT draft_copies.document_id, COUNT(*) FROM draft_copies GROUP BY draft_copies.document_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of copies made for each document in the 'draft_copies' table. It groups the results by the document identifier and filters to show only those documents that have more than a specified number of copies.",
            "question": "Which documents have more than 1 draft copies? List document id and number of draft copies."
        },
        {
            "sample_id": 2118,
            "gold_sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;",
            "gold_complexity": 6,
            "vt": "SELECT documents.receipt_date FROM documents WHERE documents.document_id = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the receipt date of a specific document from the 'documents' table based on its unique identifier. The placeholder in the WHERE clause represents the document's ID.",
            "question": "What is the receipt date of the document with id 3?"
        },
        {
            "sample_id": 2107,
            "gold_sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
            "gold_complexity": 7,
            "vt": "SELECT roles.role_description FROM roles JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE employees.employee_name = None.\"koby\"",
            "ba": "The virtual table describes the role descriptions of employees from the 'roles' table based on their role codes. It filters the results to find the role description for a specific employee by their name.",
            "question": "What is the role of the employee named Koby?"
        },
        {
            "sample_id": 2106,
            "gold_sql": "SELECT count(*) FROM Employees;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM employees",
            "ba": "The virtual table provides a count of all employees from the 'employees' table.",
            "question": "How many employees do we have?"
        },
        {
            "sample_id": 2102,
            "gold_sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;",
            "gold_complexity": 4,
            "vt": "SELECT ref_shipping_agents.shipping_agent_name FROM ref_shipping_agents",
            "ba": "The virtual table lists the names of shipping agents from the 'ref_shipping_agents' table.",
            "question": "What are the shipping agent names?"
        },
        {
            "sample_id": 2117,
            "gold_sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT ref_shipping_agents.shipping_agent_name, COUNT(documents.document_id) FROM ref_shipping_agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY ref_shipping_agents.shipping_agent_code ORDER BY COUNT(documents.document_id) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of documents handled by each shipping agent from the 'ref_shipping_agents' table. It joins the 'documents' table to count the total documents associated with each shipping agent, grouping the results by the shipping agent's unique code and ordering them by the count of documents in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of shipping agents to display.",
            "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents."
        },
        {
            "sample_id": 2123,
            "gold_sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;",
            "gold_complexity": 6,
            "vt": "SELECT document_drafts.draft_details FROM document_drafts WHERE document_drafts.document_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the details of drafts associated with a specific document from the 'document_drafts' table. The placeholder in the WHERE clause represents the unique identifier of the document.",
            "question": "What is draft detail of the document with id 7?"
        }
    ],
    "mountain_photos": [
        {
            "sample_id": 3707,
            "gold_sql": "SELECT max(height) ,  avg(height) FROM mountain",
            "gold_complexity": 5,
            "vt": "SELECT MAX(mountain.height), AVG(mountain.height) FROM mountain",
            "ba": "The virtual table provides the maximum and average heights of mountains from the 'mountain' table. The query aggregates the height data to give insights into the tallest mountain and the average height of all mountains recorded.",
            "question": "What are the maximum and average height of the mountains?"
        },
        {
            "sample_id": 3706,
            "gold_sql": "SELECT id ,  color ,  name FROM photos",
            "gold_complexity": 8,
            "vt": "SELECT photos.id, photos.color, photos.name FROM photos",
            "ba": "The virtual table displays the identifiers, color profiles, and names of photos from the 'photos' table.",
            "question": "List the id, color scheme, and name for all the photos."
        },
        {
            "sample_id": 3712,
            "gold_sql": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT camera_lens.name FROM photos JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY camera_lens.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of camera lenses used in photos, grouped by the lens identifier. It orders the results based on the count of photos taken with each lens and limits the output to a specified number of entries.",
            "question": "What are the names of the cameras that have taken picture of the most mountains?"
        },
        {
            "sample_id": 3705,
            "gold_sql": "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC",
            "gold_complexity": 8,
            "vt": "SELECT camera_lens.brand, camera_lens.name FROM camera_lens ORDER BY camera_lens.max_aperture",
            "ba": "The virtual table lists the brand and model name of camera lenses from the 'camera_lens' table, sorted by their maximum aperture. This allows users to see which lenses have the widest apertures available.",
            "question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture."
        },
        {
            "sample_id": 3715,
            "gold_sql": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM camera_lens WHERE NOT camera_lens.id IN (SELECT photos.camera_lens_id FROM photos)",
            "ba": "The virtual table counts the number of camera lenses from the 'camera_lens' table that have not been used to take any photos. The subquery identifies the camera lens IDs that are present in the 'photos' table, and the main query filters out these IDs to find those that are unused.",
            "question": "How many camera lenses are not used in taking any photos?"
        },
        {
            "sample_id": 3718,
            "gold_sql": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'",
            "gold_complexity": 11,
            "vt": "SELECT name, prominence FROM mountain EXCEPT SELECT T1.name, T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'",
            "ba": "The virtual table lists the names and prominence of mountains that are not featured in any photos taken with camera lenses from the brand 'Sigma'.",
            "question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'."
        },
        {
            "sample_id": 3704,
            "gold_sql": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM camera_lens WHERE camera_lens.focal_length_mm > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of camera lenses from the 'camera_lens' table that have a focal length greater than a specified value. The placeholder in the WHERE clause represents the minimum focal length in millimeters.",
            "question": "How many camera lenses have a focal length longer than 15 mm?"
        },
        {
            "sample_id": 3713,
            "gold_sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'",
            "gold_complexity": 7,
            "vt": "SELECT camera_lens.name FROM camera_lens JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE camera_lens.brand = '[placeholder-type:string]' OR camera_lens.brand = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of camera lenses from the 'camera_lens' table that have been used in photos, filtered by specific brand names. The placeholders in the WHERE clause represent the brand names of the camera lenses.",
            "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?"
        },
        {
            "sample_id": 3708,
            "gold_sql": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'",
            "gold_complexity": 6,
            "vt": "SELECT AVG(mountain.prominence) FROM mountain WHERE mountain.country = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average prominence of mountains from the 'mountain' table that are located in a specific country. The placeholder in the WHERE clause represents the name of the country.",
            "question": "What are the average prominence of the mountains in country 'Morocco'?"
        },
        {
            "sample_id": 3716,
            "gold_sql": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT T2.camera_lens_id) FROM mountain JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE mountain.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the distinct camera lenses used to take photos of mountains located in a specific country. It joins the 'mountain' table with the 'photos' table based on the mountain's identifier, filtering the results by the country of the mountain.",
            "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?"
        }
    ],
    "customer_complaints": [
        {
            "sample_id": 5763,
            "gold_sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
            "gold_complexity": 10,
            "vt": "SELECT customers.email_address, customers.phone_number FROM customers ORDER BY customers.email_address, customers.phone_number",
            "ba": "The virtual table displays the email addresses and phone numbers of customers from the 'customers' table, sorted in ascending order by email address and then by phone number.",
            "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number."
        },
        {
            "sample_id": 5761,
            "gold_sql": "SELECT count(*) FROM customers",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all customers from the 'customers' table.",
            "question": "How many customers are there?"
        },
        {
            "sample_id": 5770,
            "gold_sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.email_address FROM customers JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the email addresses of customers from the 'customers' table who have made complaints. It joins the 'customers' table with the 'complaints' table based on the customer ID, groups the results by customer ID to aggregate the data, and orders the results by the count of complaints made by each customer. The placeholder in the LIMIT clause allows for specifying the maximum number of email addresses to return.",
            "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?"
        },
        {
            "sample_id": 5768,
            "gold_sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
            "gold_complexity": 9,
            "vt": "SELECT products.product_name, COUNT(*) FROM products JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY products.product_name",
            "ba": "The virtual table summarizes the count of complaints associated with each product from the 'products' table. It joins the 'products' table with the 'complaints' table based on the product identifier, allowing us to group the results by product name and count the number of complaints for each product.",
            "question": "What are all the different product names, and how many complains has each received?"
        },
        {
            "sample_id": 5777,
            "gold_sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
            "gold_complexity": 6,
            "vt": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
            "ba": "The virtual table combines the contact phone numbers of both customers and staff members. It retrieves the 'phone_number' from the 'customers' table and the 'phone_number' from the 'staff' table, ensuring that all unique phone numbers from both sources are included in the result.",
            "question": "Find the phone number of all the customers and staff."
        },
        {
            "sample_id": 5771,
            "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT products.product_name FROM products JOIN complaints AS t2 ON t1.product_id = t2.product_id, customers AS t3 GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct product names from the 'products' table that are associated with complaints. It joins the 'products' table with the 'complaints' table to filter products based on complaints made by customers. The results are grouped by customer ID to count the number of complaints per customer, and the output is ordered by this count. A placeholder is used to limit the number of results returned.",
            "question": "Which products has been complained by the customer who has filed least amount of complaints?"
        },
        {
            "sample_id": 5795,
            "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT staff.last_name FROM staff JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY complaints.date_complaint_raised LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the last names of staff members from the 'staff' table who are associated with complaints. It joins the 'staff' table with the 'complaints' table based on the staff identifier, ensuring that only relevant staff members who have handled complaints are included. The results are ordered by the date the complaints were raised, and a limit is applied to control the number of results returned.",
            "question": "What is the last name of the staff who has handled the first ever complaint?"
        },
        {
            "sample_id": 5781,
            "gold_sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT products.product_name, products.product_category_code FROM products ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the names and category codes of products from the 'products' table, ordered by their price. The placeholder in the LIMIT clause allows the user to specify the maximum number of products to retrieve.",
            "question": "Find the name and category of the most expensive product."
        },
        {
            "sample_id": 5772,
            "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT products.product_name FROM products JOIN complaints AS t2 ON t1.product_id = t2.product_id, customers AS t3 GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct product names from the 'products' table that are associated with complaints. It joins the 'products' table with the 'complaints' table to filter products based on complaints made by customers. The results are grouped by customer ID to count the number of complaints per customer, and the output is ordered by this count. A placeholder is used to limit the number of results returned.",
            "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints."
        },
        {
            "sample_id": 5785,
            "gold_sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
            "gold_complexity": 8,
            "vt": "SELECT AVG(products.product_price), products.product_category_code FROM products GROUP BY products.product_category_code",
            "ba": "The virtual table calculates the average price of products grouped by their respective categories from the 'products' table. The placeholder in the SELECT clause represents the average price of products, while the grouping is done based on the product category code.",
            "question": "What is the average price of the products for each category?"
        },
        {
            "sample_id": 5801,
            "gold_sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
            "gold_complexity": 10,
            "vt": "SELECT complaints.complaint_status_code, COUNT(*) FROM complaints WHERE complaints.complaint_type_code = None.\"product failure\" GROUP BY complaints.complaint_status_code",
            "ba": "The virtual table summarizes the status of complaints related to product failures by counting the number of complaints for each status code. It retrieves the complaint status code and the count of complaints from the 'complaints' table, filtering for those complaints that are categorized as 'product failure'. The results are grouped by the complaint status code to provide a clear overview of how many complaints fall under each status for this specific type of complaint.",
            "question": "Find the number of complaints with Product Failure type for each complaint status."
        },
        {
            "sample_id": 5800,
            "gold_sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
            "gold_complexity": 8,
            "vt": "SELECT customers.address_line_1, customers.address_line_2 FROM customers WHERE customers.email_address = vbogisich@example.\"vbogisich@example.org\"",
            "ba": "The virtual table describes the first and second lines of the address of customers from the 'customers' table who have a specific email address. The placeholder in the WHERE clause represents the customer's email address.",
            "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?"
        },
        {
            "sample_id": 5774,
            "gold_sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT customers.phone_number FROM customers JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY complaints.date_complaint_raised LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the phone numbers of customers from the 'customers' table who have made complaints, joining with the 'complaints' table to filter the relevant records. The results are ordered by the date the complaints were raised, and a limit is applied to control the number of records returned.",
            "question": "Return the phone number of the customer who filed the complaint that was raised most recently."
        },
        {
            "sample_id": 5805,
            "gold_sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT customers.state FROM customers GROUP BY customers.state ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of states from the 'customers' table, grouped by state. It orders the results based on the count of customers in each state and limits the output to a specified number of states.",
            "question": "Which state has the most customers?"
        },
        {
            "sample_id": 5787,
            "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT staff.last_name FROM staff JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the last names of staff members from the 'staff' table who are associated with complaints related to products. It joins the 'staff' table with the 'complaints' table based on the staff identifier, and further joins with the 'products' table to access product details. The results are ordered by the product price, and a limit is applied to control the number of results returned.",
            "question": "Find the last name of the staff member who processed the complaint of the cheapest product."
        },
        {
            "sample_id": 5802,
            "gold_sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
            "gold_complexity": 10,
            "vt": "SELECT complaints.complaint_status_code, COUNT(*) FROM complaints WHERE complaints.complaint_type_code = None.\"product failure\" GROUP BY complaints.complaint_status_code",
            "ba": "The virtual table summarizes the status of complaints related to product failures by counting the number of complaints for each status code. It retrieves the complaint status code and the count of complaints from the 'complaints' table, filtering for those complaints that are categorized as 'product failure'. The results are grouped by the complaint status code to provide a clear overview of how many complaints fall under each status for this specific type of complaint.",
            "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?"
        },
        {
            "sample_id": 5786,
            "gold_sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
            "gold_complexity": 8,
            "vt": "SELECT AVG(products.product_price), products.product_category_code FROM products GROUP BY products.product_category_code",
            "ba": "The virtual table calculates the average price of products grouped by their category from the 'products' table. The placeholder represents the product category code for which the average price is being calculated.",
            "question": "Return the average price of products that have each category code."
        },
        {
            "sample_id": 5799,
            "gold_sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
            "gold_complexity": 8,
            "vt": "SELECT customers.address_line_1, customers.address_line_2 FROM customers WHERE customers.email_address = vbogisich@example.\"vbogisich@example.org\"",
            "ba": "The virtual table describes the first and second lines of the address of customers from the 'customers' table who have a specific email address. The placeholder in the WHERE clause represents the customer's email address.",
            "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\"."
        },
        {
            "sample_id": 5788,
            "gold_sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT staff.last_name FROM staff JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY products.product_price LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the last names of staff members from the 'staff' table who are associated with complaints related to products. It joins the 'complaints' table to link staff members to the complaints they handle, and further joins the 'products' table to access product details. The results are ordered by the product price, and a limit is applied to control the number of results returned.",
            "question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?"
        },
        {
            "sample_id": 5793,
            "gold_sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM customers GROUP BY customers.customer_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of customers grouped by their type, allowing for an analysis of the distribution of different customer types. The placeholder in the LIMIT clause indicates the maximum number of groups to return.",
            "question": "How many customers are there in the customer type with the most customers?"
        },
        {
            "sample_id": 5791,
            "gold_sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
            "gold_complexity": 6,
            "vt": "SELECT staff.last_name FROM staff WHERE staff.email_address LIKE None.\"%wrau%\"",
            "ba": "The virtual table retrieves the last names of staff members from the 'staff' table whose email addresses contain a specific pattern. The placeholder in the WHERE clause allows for filtering based on a portion of the email address.",
            "question": "Find the last name of the staff whose email address contains \"wrau\"."
        },
        {
            "sample_id": 5766,
            "gold_sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT customers.town_city FROM customers WHERE customers.customer_type_code = None.\"good credit rating\" GROUP BY customers.town_city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the towns or cities of customers who have a good credit rating, as indicated by their customer type code. The results are grouped by town or city and ordered by the count of customers in each location, with a limit on the number of results returned.",
            "question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers."
        },
        {
            "sample_id": 5784,
            "gold_sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
            "gold_complexity": 10,
            "vt": "SELECT products.product_price FROM products WHERE NOT products.product_id IN (SELECT products.product_id FROM complaints)",
            "ba": "The virtual table lists the prices of products from the 'products' table that have not been associated with any complaints. The subquery identifies product IDs that have complaints, and the main query filters out these products to show only those without complaints.",
            "question": "What are the prices of products that have never gotten a complaint?"
        },
        {
            "sample_id": 5797,
            "gold_sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT complaint_type_code) FROM complaints",
            "ba": "The virtual table provides a count of distinct complaint types recorded in the 'complaints' table. This helps in understanding the variety of issues raised by customers.",
            "question": "How many distinct complaint type codes are there in the database?"
        },
        {
            "sample_id": 5767,
            "gold_sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
            "gold_complexity": 9,
            "vt": "SELECT products.product_name, COUNT(*) FROM products JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY products.product_name",
            "ba": "The virtual table summarizes the count of complaints associated with each product from the 'products' table. It joins the 'products' table with the 'complaints' table based on the product identifier, allowing us to group the results by product name and count the number of complaints for each product.",
            "question": "List the name of all products along with the number of complaints that they have received."
        },
        {
            "sample_id": 5769,
            "gold_sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.email_address FROM customers JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the email addresses of customers from the 'customers' table who have made complaints. It joins the 'customers' table with the 'complaints' table based on the customer ID, groups the results by customer ID to aggregate the data, and orders the results by the count of complaints made by each customer. The placeholder in the LIMIT clause allows for specifying the maximum number of email addresses to return.",
            "question": "Find the emails of customers who has filed a complaints of the product with the most complaints."
        },
        {
            "sample_id": 5803,
            "gold_sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
            "gold_complexity": 10,
            "vt": "SELECT staff.first_name FROM staff JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY complaints.staff_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the first names of staff members from the 'staff' table who are handling complaints. It joins the 'staff' table with the 'complaints' table based on the staff identifier, groups the results by staff member, and orders them by the number of complaints they are handling. The placeholder in the LIMIT clause allows for specifying the maximum number of staff names to return.",
            "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?"
        }
    ],
    "pets_1": [
        {
            "sample_id": 7049,
            "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT pettype) FROM pets",
            "ba": "The virtual table counts the distinct types of pets from the 'pets' table. This provides insight into the variety of pets owned by students.",
            "question": "How many different types of pet are there?"
        },
        {
            "sample_id": 7044,
            "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE student.age > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of students from the 'student' table who own pets and are older than a specified age. The query joins the 'student' table with the 'has_pet' table to link students with their pets, and applies a filter on the 'age' column using a placeholder for numeric values.",
            "question": "Find number of pets owned by students who are older than 20."
        },
        {
            "sample_id": 7057,
            "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
            "gold_complexity": 9,
            "vt": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "ba": "The virtual table identifies students who do not own a cat by selecting their unique identifiers from the 'student' table and excluding those who are linked to a pet of type 'cat' through the 'has_pet' and 'pets' tables.",
            "question": "What are the ids of the students who do not own cats as pets?"
        },
        {
            "sample_id": 7040,
            "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT pets.weight FROM pets ORDER BY pets.pet_age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the weights of pets from the 'pets' table, sorted by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "Find the weight of the youngest dog."
        },
        {
            "sample_id": 7079,
            "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(student.age) FROM student WHERE NOT student.stuid IN (SELECT student.stuid FROM has_pet)",
            "ba": "The virtual table calculates the average age of students from the 'student' table who do not own any pets. It uses a subquery to filter out students who are linked to the 'has_pet' table, ensuring that only those without pets are included in the average age calculation.",
            "question": "What is the average age for all students who do not own any pets ?"
        },
        {
            "sample_id": 7056,
            "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
            "gold_complexity": 9,
            "vt": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "ba": "The virtual table identifies students who do not own a cat by selecting their unique identifiers from the 'student' table and excluding those who are linked to a pet of type 'cat' through the 'has_pet' and 'pets' tables.",
            "question": "Find the id of students who do not have a cat pet."
        },
        {
            "sample_id": 7043,
            "gold_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
            "gold_complexity": 8,
            "vt": "SELECT MAX(pets.weight), pets.pettype FROM pets GROUP BY pets.pettype",
            "ba": "The virtual table provides the maximum weight of each type of pet from the 'pets' table. The query groups the results by the type of pet, allowing for an overview of the heaviest pet in each category.",
            "question": "List the maximum weight and type for each type of pet."
        },
        {
            "sample_id": 7078,
            "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(student.age) FROM student WHERE NOT student.stuid IN (SELECT student.stuid FROM has_pet)",
            "ba": "The virtual table calculates the average age of students from the 'student' table who do not own any pets. It uses a subquery to filter out students who are linked to the 'has_pet' table, ensuring that only those without pets are included in the average age calculation.",
            "question": "Find the average age of students who do not have any pet ."
        },
        {
            "sample_id": 7052,
            "gold_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
            "gold_complexity": 9,
            "vt": "SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat' INTERSECT SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog'",
            "ba": "The virtual table identifies students who own both a cat and a dog. It does this by joining the 'student', 'has_pet', and 'pets' tables to filter students based on the type of pets they own. The query uses an INTERSECT operation to find students who appear in both sets of results: those who own cats and those who own dogs.",
            "question": "Find the first name of students who have both cat and dog pets ."
        },
        {
            "sample_id": 7051,
            "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT student.fname FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE pets.pettype = '[placeholder-type:string]' OR pets.pettype = '[placeholder-type:string]'",
            "ba": "The virtual table lists the distinct first names of students who own specific types of pets. It combines data from the 'student', 'has_pet', and 'pets' tables, filtering based on the pet types provided as placeholders.",
            "question": "What are the first names of every student who has a cat or dog as a pet?"
        },
        {
            "sample_id": 7069,
            "gold_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT student.fname, student.age FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "ba": "The virtual table describes the distinct first names and ages of students from the 'student' table who own pets. The query joins the 'student' table with the 'has_pet' table to filter students based on their pet ownership.",
            "question": "What are the different first names and ages of the students who do have pets?"
        },
        {
            "sample_id": 7066,
            "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
            "gold_complexity": 8,
            "vt": "SELECT AVG(pets.weight), pets.pettype FROM pets GROUP BY pets.pettype",
            "ba": "The virtual table calculates the average weight of pets grouped by their type from the 'pets' table. The placeholder in the SELECT clause represents the average weight of the pets, while the pet type is also displayed for each group.",
            "question": "Find the average weight for each pet type."
        },
        {
            "sample_id": 7060,
            "gold_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT pets.pettype, pets.weight FROM pets ORDER BY pets.pet_age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the types and weights of pets from the 'pets' table, ordered by the age of the pets. The placeholder in the LIMIT clause represents the maximum number of pet records to return.",
            "question": "Find the type and weight of the youngest pet."
        },
        {
            "sample_id": 7067,
            "gold_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
            "gold_complexity": 8,
            "vt": "SELECT AVG(pets.weight), pets.pettype FROM pets GROUP BY pets.pettype",
            "ba": "The virtual table calculates the average weight of pets grouped by their type from the 'pets' table. The placeholder in the SELECT clause represents the average weight of the pets, while the GROUP BY clause categorizes the results based on the type of pet.",
            "question": "What is the average weight for each type of pet?"
        },
        {
            "sample_id": 7038,
            "gold_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM pets WHERE pets.weight > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of pets from the 'pets' table that exceed a specified weight. The placeholder in the WHERE clause represents the weight threshold for filtering the pets.",
            "question": "Find the number of pets whose weight is heavier than 10."
        },
        {
            "sample_id": 7050,
            "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT student.fname FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE pets.pettype = '[placeholder-type:string]' OR pets.pettype = '[placeholder-type:string]'",
            "ba": "The virtual table lists the distinct first names of students who own specific types of pets. It combines data from the 'student', 'has_pet', and 'pets' tables, filtering based on the pet types provided.",
            "question": "Find the first name of students who have cat or dog pet."
        },
        {
            "sample_id": 7075,
            "gold_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT student.fname, student.sex FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY student.stuid HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names and genders of students from the 'student' table who own more than a specified number of pets. The query joins the 'student' table with the 'has_pet' table to link students with their pets, grouping the results by student identifier and filtering those with a count of pets greater than a placeholder for numeric values.",
            "question": "What is the first name and gender of the all the students who have more than one pet?"
        },
        {
            "sample_id": 7076,
            "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
            "gold_complexity": 9,
            "vt": "SELECT student.lname FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE pets.pet_age = [placeholder-type:numeric] AND pets.pettype = '[placeholder-type:string]'",
            "ba": "The virtual table describes the last names of students from the 'student' table who own pets of a specific type and age. The query joins the 'student' table with the 'has_pet' table to link students to their pets, and then joins with the 'pets' table to filter based on the pet's age and type. The placeholders represent the specific age of the pet and the type of pet being queried.",
            "question": "Find the last name of the student who has a cat that is age 3."
        },
        {
            "sample_id": 7045,
            "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE student.age > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of students from the 'student' table who own pets and are older than a specified age. The query joins the 'student' table with the 'has_pet' table to link students with their pets, and applies a filter on the 'age' column using a placeholder for numeric values.",
            "question": "How many pets are owned by students that have an age greater than 20?"
        },
        {
            "sample_id": 7053,
            "gold_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
            "gold_complexity": 9,
            "vt": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "ba": "The virtual table identifies students who own both a cat and a dog by performing an intersection of two queries. Each query selects the first names of students from the 'student' table who have a pet of a specific type (either 'cat' or 'dog'). The joins with the 'has_pet' and 'pets' tables allow for filtering based on the pet type, ensuring that only students with both types of pets are included in the final result.",
            "question": "What are the students' first names who have both cats and dogs as pets?"
        },
        {
            "sample_id": 7055,
            "gold_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
            "gold_complexity": 15,
            "vt": "SELECT student.major, student.age FROM student WHERE NOT student.stuid IN (SELECT student.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "ba": "The virtual table describes the majors and ages of students from the 'student' table who do not own a cat. The subquery identifies students who own cats by joining the 'student', 'has_pet', and 'pets' tables, filtering for pet type 'cat'. The main query then selects the major and age of students whose IDs are not in the list of students who own cats.",
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?"
        },
        {
            "sample_id": 7058,
            "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
            "gold_complexity": 15,
            "vt": "SELECT student.fname, student.age FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE pets.pettype = '[placeholder-type:string]' AND NOT student.stuid IN (SELECT student.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "ba": "The virtual table describes the first names and ages of students who own a specific type of pet, excluding those who own cats. The query joins the 'student', 'has_pet', and 'pets' tables to filter the results based on the pet type, using a placeholder for the specific pet type in the WHERE clause.",
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet."
        },
        {
            "sample_id": 7064,
            "gold_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
            "gold_complexity": 9,
            "vt": "SELECT AVG(pets.pet_age), MAX(pets.pet_age), pets.pettype FROM pets GROUP BY pets.pettype",
            "ba": "The virtual table provides aggregated information about pets, specifically the average and maximum age of pets grouped by their type. It includes the type of pet and uses placeholders for the values being calculated.",
            "question": "Find the average and maximum age for each type of pet."
        },
        {
            "sample_id": 7071,
            "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
            "gold_complexity": 7,
            "vt": "SELECT has_pet.petid FROM student JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE student.lname = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the identifiers of pets owned by students from the 'student' table, specifically filtering for students with a certain last name. The query joins the 'student' table with the 'has_pet' table to link students to their pets, using a placeholder for the last name in the WHERE clause.",
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?"
        },
        {
            "sample_id": 7041,
            "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT pets.weight FROM pets ORDER BY pets.pet_age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the weights of pets from the 'pets' table, ordered by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "How much does the youngest dog weigh?"
        }
    ],
    "chinook_1": [
        {
            "sample_id": 851,
            "gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
            "gold_complexity": 7,
            "vt": "SELECT employee.city FROM customer JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE customer.postalcode = None.\"70174\"",
            "ba": "The virtual table describes the cities of customers from the 'customer' table who are assigned to a specific support representative from the 'employee' table. The placeholder in the WHERE clause represents the postal code of the customer.",
            "question": "What city does the employee who helps the customer with postal code 70174 live in?"
        },
        {
            "sample_id": 843,
            "gold_sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(track.unitprice) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"jazz\"",
            "ba": "The virtual table calculates the average unit price of tracks from the 'track' table that belong to a specific genre, in this case, 'jazz'. It joins the 'genre' table with the 'track' table based on the genre identifier to filter the tracks accordingly.",
            "question": "What is the average unit price of tracks that belong to Jazz genre?"
        },
        {
            "sample_id": 835,
            "gold_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT genre.name FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY track.genreid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of genres from the 'genre' table, joining with the 'track' table to count the number of tracks associated with each genre. The results are grouped by genre and ordered by the count of tracks, limiting the output to a specified number of genres.",
            "question": "What is the name of the most common genre in all tracks?"
        },
        {
            "sample_id": 876,
            "gold_sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
            "gold_complexity": 13,
            "vt": "SELECT artist.name, album.artistid FROM album JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY album.artistid HAVING COUNT(*) >= [placeholder-type:numeric] ORDER BY artist.name",
            "ba": "The virtual table describes the names of artists and their identifiers from the 'album' table, filtered to show only those artists who have a certain number of albums. The placeholder in the HAVING clause represents the minimum count of albums an artist must have to be included in the results.",
            "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?"
        },
        {
            "sample_id": 870,
            "gold_sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
            "gold_complexity": 11,
            "vt": "SELECT customer.firstname, customer.supportrepid FROM customer JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY customer.supportrepid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of customers along with their assigned support representative identifiers from the 'customer' table. It joins the 'customer' table with the 'employee' table to associate each customer with their support representative. The results are grouped by the support representative identifier, and only those representatives who have at least a specified number of customers are included in the output.",
            "question": "What are the first names and support rep ids for employees serving 10 or more customers?"
        },
        {
            "sample_id": 841,
            "gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"rock\"",
            "ba": "The virtual table counts the number of tracks in the 'track' table that belong to the genre 'rock'. It joins the 'genre' table with the 'track' table based on the genre identifier, filtering for the specific genre name.",
            "question": "How many tracks belong to rock genre?"
        },
        {
            "sample_id": 879,
            "gold_sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(track.unitprice) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"rock\"",
            "ba": "The virtual table calculates the average price of tracks from the 'track' table that belong to a specific genre, in this case, 'rock'. It joins the 'genre' table with the 'track' table based on the genre identifier to filter the tracks accordingly.",
            "question": "What is the average unit price of rock tracks?"
        },
        {
            "sample_id": 855,
            "gold_sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
            "gold_complexity": 8,
            "vt": "SELECT invoice.invoicedate FROM customer JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE customer.firstname = None.\"astrid\" AND customer.lastname = None.\"gruber\"",
            "ba": "The virtual table retrieves the invoice dates for a specific customer identified by their first and last name from the 'customer' and 'invoice' tables. The placeholders represent the customer's first and last names.",
            "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber."
        },
        {
            "sample_id": 863,
            "gold_sql": "SELECT Phone FROM EMPLOYEE",
            "gold_complexity": 4,
            "vt": "SELECT employee.phone FROM employee",
            "ba": "The virtual table provides the contact phone numbers of employees from the 'employee' table.",
            "question": "List the phone numbers of all employees."
        },
        {
            "sample_id": 858,
            "gold_sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
            "gold_complexity": 8,
            "vt": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20",
            "ba": "The virtual table lists the last names of customers who have not made any purchases exceeding a specified amount. It does this by selecting all last names from the 'customer' table and excluding those who have invoices with a total greater than a specified value.",
            "question": "What are the last names of customers without invoice totals exceeding 20?"
        },
        {
            "sample_id": 816,
            "gold_sql": "SELECT distinct(BillingCountry) FROM INVOICE",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT (invoice.billingcountry) FROM invoice",
            "ba": "The virtual table provides a distinct list of billing countries from the 'invoice' table, which contains information about invoices issued to customers.",
            "question": "Find the different billing countries for all invoices."
        },
        {
            "sample_id": 880,
            "gold_sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(track.unitprice) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"rock\"",
            "ba": "The virtual table calculates the average unit price of tracks from the 'track' table that belong to the genre specified in the 'genre' table. The placeholder in the WHERE clause represents the name of the genre, allowing users to specify which genre they are interested in.",
            "question": "Find the average unit price of tracks from the Rock genre."
        },
        {
            "sample_id": 854,
            "gold_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT city) FROM employee",
            "ba": "The virtual table counts the distinct cities from the 'employee' table, providing insight into the geographical distribution of employees.",
            "question": "Find the number of different cities that employees live in."
        },
        {
            "sample_id": 817,
            "gold_sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
            "gold_complexity": 6,
            "vt": "SELECT artist.name FROM artist WHERE artist.name LIKE None.\"%a%\"",
            "ba": "The virtual table describes the names of artists from the 'artist' table whose names contain the letter 'a'. The placeholder in the LIKE clause represents a pattern for matching artist names.",
            "question": "Find the names of all artists that have \"a\" in their names."
        },
        {
            "sample_id": 886,
            "gold_sql": "SELECT distinct(UnitPrice) FROM TRACK",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT (track.unitprice) FROM track",
            "ba": "The virtual table provides a distinct list of unit prices for tracks from the 'track' table. This allows users to see all unique prices at which tracks are sold, without any duplicates.",
            "question": "Find the distinct unit prices for tracks."
        },
        {
            "sample_id": 826,
            "gold_sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT artist.name FROM album JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY artist.name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of artists from the 'album' table, joining with the 'artist' table to retrieve artist details. It groups the results by artist name and orders them based on the count of albums associated with each artist, limiting the output to a specified number of results.",
            "question": "What is the name of the artist with the greatest number of albums?"
        },
        {
            "sample_id": 871,
            "gold_sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
            "gold_complexity": 9,
            "vt": "SELECT customer.lastname FROM customer JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY customer.supportrepid HAVING COUNT(*) <= [placeholder-type:numeric]",
            "ba": "The virtual table describes the last names of customers from the 'customer' table who are associated with a support representative from the 'employee' table. The query groups the results by the support representative's ID and filters the groups to include only those with a count of customers less than or equal to a specified number.",
            "question": "Please show the employee last names that serves no more than 20 customers."
        },
        {
            "sample_id": 809,
            "gold_sql": "SELECT Name FROM GENRE",
            "gold_complexity": 4,
            "vt": "SELECT genre.name FROM genre",
            "ba": "The virtual table lists the names of all genres from the 'genre' table.",
            "question": "List the names of all music genres."
        },
        {
            "sample_id": 813,
            "gold_sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
            "gold_complexity": 8,
            "vt": "SELECT employee.firstname, employee.lastname FROM employee WHERE employee.city = None.\"calgary\"",
            "ba": "The virtual table describes the first and last names of employees from the 'employee' table who reside in a specific city. The placeholder in the WHERE clause represents the name of the city.",
            "question": "What are the first names and last names of the employees who live in Calgary city."
        },
        {
            "sample_id": 866,
            "gold_sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM mediatype JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE mediatype.name = None.\"aac audio file\"",
            "ba": "The virtual table counts the number of tracks associated with a specific media type from the 'mediatype' and 'track' tables. The placeholder in the WHERE clause represents the name of the media type being queried.",
            "question": "Count the number of tracks that are of the media type \"AAC audio file\"."
        },
        {
            "sample_id": 874,
            "gold_sql": "SELECT Title FROM ALBUM ORDER BY Title",
            "gold_complexity": 6,
            "vt": "SELECT album.title FROM album ORDER BY album.title",
            "ba": "The virtual table lists the titles of all albums from the 'album' table, sorted in alphabetical order by title.",
            "question": "What are all the album titles, in alphabetical order?"
        },
        {
            "sample_id": 819,
            "gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
            "gold_complexity": 7,
            "vt": "SELECT album.title FROM album JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE artist.name = None.\"ac/dc\"",
            "ba": "The virtual table describes the titles of albums from the 'album' table that are associated with a specific artist. The query joins the 'album' table with the 'artist' table to filter albums based on the artist's name, which is represented by a placeholder.",
            "question": "Find the title of all the albums of the artist \"AC/DC\"."
        },
        {
            "sample_id": 808,
            "gold_sql": "SELECT count(*) FROM ALBUM",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM album",
            "ba": "The virtual table provides a count of all albums present in the 'album' table. This count represents the total number of unique albums stored in the database.",
            "question": "Find the number of albums."
        },
        {
            "sample_id": 844,
            "gold_sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(track.unitprice) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"jazz\"",
            "ba": "The virtual table calculates the average unit price of tracks from the 'track' table that belong to a specific genre, in this case, 'jazz'. It joins the 'genre' table with the 'track' table using the genre identifier to filter the results based on the genre name.",
            "question": "Find the average unit price of jazz tracks."
        },
        {
            "sample_id": 889,
            "gold_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
            "gold_complexity": 9,
            "vt": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
            "ba": "The virtual table describes the titles of albums that contain tracks from both the 'Reggae' and 'Rock' genres. It uses joins to connect the 'Album', 'Track', and 'Genre' tables, filtering for albums that have tracks in both specified genres.",
            "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?"
        },
        {
            "sample_id": 882,
            "gold_sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
            "gold_complexity": 8,
            "vt": "SELECT MAX(track.milliseconds), MIN(track.milliseconds) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"pop\"",
            "ba": "The virtual table provides the maximum and minimum duration of tracks from the 'track' table that belong to a specific genre, in this case, 'pop'. The query joins the 'genre' table with the 'track' table to filter tracks based on the genre name.",
            "question": "Find the maximum and minimum millisecond lengths of pop tracks."
        },
        {
            "sample_id": 842,
            "gold_sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"rock\"",
            "ba": "The virtual table counts the number of tracks in the 'track' table that belong to the genre 'rock'. It joins the 'genre' table with the 'track' table based on the genre identifier, filtering for tracks that match the specified genre name.",
            "question": "Count the number of tracks that are part of the rock genre."
        },
        {
            "sample_id": 850,
            "gold_sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
            "gold_complexity": 9,
            "vt": "SELECT employee.firstname, employee.lastname FROM customer JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE customer.firstname = None.\"leonie\"",
            "ba": "The virtual table describes the first and last names of employees who are assigned as support representatives for customers with a specific first name. The query joins the 'customer' and 'employee' tables based on the support representative's ID, filtering for a particular customer's first name.",
            "question": "Find the full names of employees who help customers with the first name Leonie."
        },
        {
            "sample_id": 845,
            "gold_sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
            "gold_complexity": 8,
            "vt": "SELECT customer.firstname, customer.lastname FROM customer WHERE customer.email = luisg@embraer.\"luisg@embraer.com.br\"",
            "ba": "The virtual table describes the first and last names of customers from the 'customer' table who have a specific email address. The placeholder in the WHERE clause represents the customer's email address.",
            "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?"
        },
        {
            "sample_id": 830,
            "gold_sql": "SELECT AVG(UnitPrice) FROM TRACK",
            "gold_complexity": 4,
            "vt": "SELECT AVG(track.unitprice) FROM track",
            "ba": "The virtual table calculates the average price of tracks from the 'track' table. It provides a summary of the average unit price for all available tracks.",
            "question": "Find the average unit price for a track."
        },
        {
            "sample_id": 837,
            "gold_sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT mediatype.name FROM mediatype JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY track.mediatypeid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of media types from the 'mediatype' table, joining it with the 'track' table to associate each media type with its corresponding tracks. The results are grouped by media type and ordered by the count of tracks associated with each media type, limiting the output to a specified number of results.",
            "question": "What is the least common media type in all tracks?"
        },
        {
            "sample_id": 839,
            "gold_sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
            "gold_complexity": 11,
            "vt": "SELECT album.title, track.albumid FROM album JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE track.unitprice > [placeholder-type:numeric] GROUP BY track.albumid",
            "ba": "The virtual table describes the titles of albums along with their unique identifiers from the 'album' table, filtered to include only those tracks that have a unit price greater than a specified amount. The results are grouped by the album identifier to ensure that each album is listed only once, regardless of the number of qualifying tracks it contains.",
            "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1."
        },
        {
            "sample_id": 821,
            "gold_sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM album JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE artist.name = None.\"metallica\"",
            "ba": "The virtual table counts the number of albums from the 'album' table that are associated with a specific artist, in this case, Metallica. It joins the 'album' table with the 'artist' table using the artist's identifier to filter the results based on the artist's name.",
            "question": "Hom many albums does the artist \"Metallica\" have?"
        },
        {
            "sample_id": 878,
            "gold_sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
            "gold_complexity": 7,
            "vt": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId",
            "ba": "The virtual table lists the names of artists who do not have any albums associated with them. It retrieves artist names from the 'artist' table and excludes those who have entries in the 'album' table by performing a join on the artist ID.",
            "question": "What are the names of artists who have not released any albums?"
        },
        {
            "sample_id": 869,
            "gold_sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
            "gold_complexity": 11,
            "vt": "SELECT customer.firstname, customer.supportrepid FROM customer JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY customer.supportrepid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of customers along with their assigned support representative from the 'customer' table. It joins the 'customer' table with the 'employee' table to associate each customer with their support representative. The results are grouped by the support representative's ID, and only those representatives who have handled a specified number of customers are included in the output, as indicated by the placeholder for numeric values.",
            "question": "Please show the employee first names and ids of employees who serve at least 10 customers."
        },
        {
            "sample_id": 846,
            "gold_sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
            "gold_complexity": 8,
            "vt": "SELECT customer.firstname, customer.lastname FROM customer WHERE customer.email = luisg@embraer.\"luisg@embraer.com.br\"",
            "ba": "The virtual table describes the first and last names of customers from the 'customer' table who have a specific email address. The placeholder in the WHERE clause represents the customer's email address.",
            "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\"."
        },
        {
            "sample_id": 890,
            "gold_sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
            "gold_complexity": 9,
            "vt": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
            "ba": "The virtual table lists the titles of albums that contain tracks from both the 'Reggae' and 'Rock' genres. It does this by joining the 'Album', 'Track', and 'Genre' tables to filter albums based on the specified genres.",
            "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres."
        },
        {
            "sample_id": 836,
            "gold_sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT genre.name FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY track.genreid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of genres from the 'genre' table, grouped by the genre identifier from the 'track' table. It orders the results based on the count of tracks associated with each genre and limits the output to a specified number of genres.",
            "question": "Find the name of the genre that is most frequent across all tracks."
        },
        {
            "sample_id": 860,
            "gold_sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customer.firstname FROM customer JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE customer.country = None.\"brazil\"",
            "ba": "The virtual table describes the distinct first names of customers from the 'customer' table who have made purchases in Brazil. The query joins the 'customer' table with the 'invoice' table to filter customers based on their country, using a placeholder for the country name.",
            "question": "What are the different first names for customers from Brazil who have also had an invoice?"
        },
        {
            "sample_id": 884,
            "gold_sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
            "gold_complexity": 6,
            "vt": "SELECT employee.birthdate FROM employee WHERE employee.city = None.\"edmonton\"",
            "ba": "The virtual table describes the birthdates of employees from the 'employee' table who reside in a specific city. The placeholder in the WHERE clause represents the name of the city.",
            "question": "Find the birth dates corresponding to employees who live in the city of Edmonton."
        },
        {
            "sample_id": 815,
            "gold_sql": "SELECT distinct(BillingCountry) FROM INVOICE",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT (invoice.billingcountry) FROM invoice",
            "ba": "The virtual table provides a distinct list of billing countries from the 'invoice' table, which contains information about invoices issued to customers.",
            "question": "What are the distinct billing countries of the invoices?"
        },
        {
            "sample_id": 885,
            "gold_sql": "SELECT distinct(UnitPrice) FROM TRACK",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT (track.unitprice) FROM track",
            "ba": "The virtual table provides a distinct list of unit prices for tracks from the 'track' table. This allows users to see all unique prices at which tracks are sold, without any duplicates.",
            "question": "What are the distinct unit prices of all tracks?"
        },
        {
            "sample_id": 853,
            "gold_sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT city) FROM employee",
            "ba": "The virtual table counts the distinct cities from the 'employee' table, providing insight into the geographical distribution of employees.",
            "question": "How many distinct cities does the employees live in?"
        },
        {
            "sample_id": 820,
            "gold_sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
            "gold_complexity": 7,
            "vt": "SELECT album.title FROM album JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE artist.name = None.\"ac/dc\"",
            "ba": "The virtual table describes the titles of albums from the 'album' table that are associated with a specific artist. The query joins the 'album' table with the 'artist' table to filter albums based on the artist's name, which is represented by a placeholder for string values.",
            "question": "What are the titles of albums by the artist \"AC/DC\"?"
        },
        {
            "sample_id": 888,
            "gold_sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM artist WHERE NOT album.artistid IN (SELECT album.artistid FROM ALBUM)",
            "ba": "The virtual table counts the number of artists from the 'artist' table who do not have any albums associated with them in the 'album' table. The placeholder in the subquery represents the artist identifiers that are linked to albums.",
            "question": "Cound the number of artists who have not released an album."
        },
        {
            "sample_id": 852,
            "gold_sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
            "gold_complexity": 7,
            "vt": "SELECT employee.city FROM customer JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE customer.postalcode = None.\"70174\"",
            "ba": "The virtual table describes the cities of customers from the 'customer' table who are assigned to a specific support representative from the 'employee' table. The placeholder in the WHERE clause represents the postal code of the customer.",
            "question": "Find the cities corresponding to employees who help customers with the postal code 70174."
        },
        {
            "sample_id": 832,
            "gold_sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
            "gold_complexity": 5,
            "vt": "SELECT MAX(track.milliseconds), MIN(track.milliseconds) FROM track",
            "ba": "The virtual table provides the maximum and minimum duration of tracks from the 'track' table, measured in milliseconds. This allows users to understand the range of track lengths available in the database.",
            "question": "Find the maximum and minimum durations of tracks in milliseconds."
        },
        {
            "sample_id": 818,
            "gold_sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
            "gold_complexity": 6,
            "vt": "SELECT artist.name FROM artist WHERE artist.name LIKE None.\"%a%\"",
            "ba": "The virtual table describes the names of artists from the 'artist' table whose names contain the letter 'a'. The placeholder in the LIKE clause represents a pattern for matching artist names.",
            "question": "What are the names of artist who have the letter 'a' in their names?"
        },
        {
            "sample_id": 847,
            "gold_sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM customer WHERE customer.email LIKE %gmail.\"%gmail.com%\"",
            "ba": "The virtual table counts the number of customers from the 'customer' table whose email addresses contain 'gmail.com'. The placeholder in the WHERE clause represents the email domain being searched for.",
            "question": "How many customers have email that contains \"gmail.com\"?"
        },
        {
            "sample_id": 868,
            "gold_sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(track.milliseconds) FROM genre JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE genre.name = None.\"latin\" OR genre.name = None.\"pop\"",
            "ba": "The virtual table calculates the average duration of tracks from the 'track' table that belong to specific genres, namely 'latin' or 'pop'. It joins the 'genre' table with the 'track' table based on the genre identifier, filtering the results to include only those tracks that match the specified genre names.",
            "question": "Find the average millisecond length of Latin and Pop tracks."
        }
    ],
    "cre_Doc_Tracking_DB": [
        {
            "sample_id": 4237,
            "gold_sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT documents_to_be_destroyed.destroyed_by_employee_id FROM documents_to_be_destroyed",
            "ba": "The virtual table lists unique identifiers of employees who have destroyed documents, sourced from the 'documents_to_be_destroyed' table.",
            "question": "Show the ids of all employees who have destroyed a document."
        },
        {
            "sample_id": 4154,
            "gold_sql": "SELECT count(*) FROM Ref_calendar",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ref_calendar",
            "ba": "The virtual table provides a count of all entries in the 'ref_calendar' table, which contains specific dates and their numeric representations in the year.",
            "question": "Count the number of all the calendar items."
        },
        {
            "sample_id": 4238,
            "gold_sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT documents_to_be_destroyed.destroyed_by_employee_id FROM documents_to_be_destroyed",
            "ba": "The virtual table lists unique identifiers of employees who have destroyed documents, sourced from the 'documents_to_be_destroyed' table.",
            "question": "What are the ids of all the employees who have destroyed documents?"
        },
        {
            "sample_id": 4202,
            "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3",
            "gold_complexity": 8,
            "vt": "SELECT employees.role_code FROM employees GROUP BY employees.role_code HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique role codes from the 'employees' table, grouping the results by each role code. It filters the results to include only those roles that have a count of employees greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of employees required for each role.",
            "question": "What are the roles with three or more employees? Give me the role codes."
        },
        {
            "sample_id": 4185,
            "gold_sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"",
            "gold_complexity": 8,
            "vt": "SELECT roles.role_name, roles.role_description FROM roles WHERE roles.role_code = None.\"mg\"",
            "ba": "The virtual table describes the role name and description from the 'roles' table for a specific role code. The placeholder in the WHERE clause represents the unique code identifying the role.",
            "question": "What are the name and description for role code \"MG\"?"
        },
        {
            "sample_id": 4177,
            "gold_sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
            "gold_complexity": 8,
            "vt": "SELECT ref_locations.location_name, ref_locations.location_description FROM ref_locations WHERE ref_locations.location_code = None.\"x\"",
            "ba": "The virtual table describes the names and descriptions of locations from the 'ref_locations' table that match a specific location code. The placeholder in the WHERE clause represents the unique code for the location.",
            "question": "What are the name and description for location code x?"
        },
        {
            "sample_id": 4204,
            "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT employees.role_code FROM employees GROUP BY employees.role_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique role codes from the 'employees' table, grouping the results by each role code and ordering them based on the count of employees in each role. The placeholder in the LIMIT clause allows for specifying the maximum number of role codes to return.",
            "question": "What is the role with the smallest number of employees? Find the role codes."
        },
        {
            "sample_id": 4240,
            "gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
            "gold_complexity": 8,
            "vt": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
            "ba": "The virtual table identifies employees who have not destroyed any documents. It selects the unique identifiers of employees from the 'Employees' table and excludes those who are listed as having destroyed documents in the 'Documents_to_be_destroyed' table.",
            "question": "Which employees do not destroy any document? Find their employee ids."
        },
        {
            "sample_id": 4232,
            "gold_sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
            "gold_complexity": 8,
            "vt": "SELECT documents_to_be_destroyed.destroyed_by_employee_id, COUNT(*) FROM documents_to_be_destroyed GROUP BY documents_to_be_destroyed.destroyed_by_employee_id",
            "ba": "The virtual table summarizes the number of documents destroyed by each employee. It retrieves the employee ID of the person who destroyed the document and counts the total number of documents destroyed by that employee.",
            "question": "What are the id of each employee and the number of document destroyed by that employee?"
        },
        {
            "sample_id": 4216,
            "gold_sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
            "gold_complexity": 8,
            "vt": "SELECT document_locations.location_code, document_locations.date_in_location_from, document_locations.date_in_locaton_to FROM document_locations",
            "ba": "The virtual table describes the location details of documents from the 'document_locations' table, including the location code and the date range during which the document was in that location. The placeholders represent specific values for filtering or further specification.",
            "question": "What are each document's location code, and starting date and ending data in that location?"
        },
        {
            "sample_id": 4235,
            "gold_sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT documents_to_be_destroyed.destruction_authorised_by_employee_id FROM documents_to_be_destroyed",
            "ba": "The virtual table lists unique identifiers of employees who have authorized the destruction of documents from the 'documents_to_be_destroyed' table.",
            "question": "Show the ids of all employees who have authorized destruction."
        },
        {
            "sample_id": 4169,
            "gold_sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
            "gold_complexity": 7,
            "vt": "SELECT ref_calendar.day_number, all_documents.date_stored FROM all_documents JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
            "ba": "The virtual table provides a view of the day number in the year and the date when each document was stored. It combines data from the 'all_documents' table and the 'ref_calendar' table, linking them through the date stored in the documents and the calendar date.",
            "question": "What is the day Number and date of all the documents?"
        },
        {
            "sample_id": 4182,
            "gold_sql": "SELECT count(*) FROM ROLES",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM roles",
            "ba": "The virtual table provides a count of all unique roles from the 'roles' table. This count can be useful for understanding the total number of distinct roles available in the system.",
            "question": "Count the total number of roles listed."
        },
        {
            "sample_id": 4166,
            "gold_sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM all_documents WHERE all_documents.document_type_code = None.\"cv\" OR all_documents.document_type_code = None.\"bk\"",
            "ba": "The virtual table counts the total number of documents in the 'all_documents' table that are of specific types, identified by their document type codes. The placeholder in the WHERE clause represents the document type codes for which the count is being calculated.",
            "question": "How many documents have document type code CV or BK?"
        },
        {
            "sample_id": 4184,
            "gold_sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES",
            "gold_complexity": 8,
            "vt": "SELECT roles.role_code, roles.role_name, roles.role_description FROM roles",
            "ba": "The virtual table describes the unique codes, names, and descriptions of roles from the 'roles' table. This information is essential for understanding the different roles available within the organization.",
            "question": "What are all the role codes, role names, and role descriptions?"
        },
        {
            "sample_id": 4239,
            "gold_sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
            "gold_complexity": 8,
            "vt": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
            "ba": "The virtual table identifies employees who have not destroyed any documents. It does this by selecting the unique identifiers of all employees from the 'Employees' table and excluding those who have been involved in the destruction of documents, as indicated by their IDs in the 'Documents_to_be_destroyed' table.",
            "question": "Show the ids of all employees who don't destroy any document."
        },
        {
            "sample_id": 4168,
            "gold_sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
            "gold_complexity": 6,
            "vt": "SELECT all_documents.date_stored FROM all_documents WHERE all_documents.document_name = None.\"marry cv\"",
            "ba": "The virtual table retrieves the storage date of documents from the 'all_documents' table based on a specific document name. The placeholder in the WHERE clause represents the name of the document being queried.",
            "question": "When was the document named \"Marry CV\" stored? Give me the date."
        },
        {
            "sample_id": 4197,
            "gold_sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code",
            "gold_complexity": 8,
            "vt": "SELECT employees.role_code, COUNT(*) FROM employees GROUP BY employees.role_code",
            "ba": "The virtual table summarizes the number of employees grouped by their role codes from the 'employees' table. The placeholder in the SELECT statement represents the role code, while the COUNT function calculates the total number of employees for each role.",
            "question": "Show all role codes and the number of employees in each role."
        },
        {
            "sample_id": 4170,
            "gold_sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
            "gold_complexity": 7,
            "vt": "SELECT ref_calendar.day_number, all_documents.date_stored FROM all_documents JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
            "ba": "The virtual table describes the day number of the year and the date when documents were stored from the 'all_documents' table, joined with the 'ref_calendar' table to correlate the storage date with its corresponding day number.",
            "question": "Return the day Number and stored date for all the documents."
        },
        {
            "sample_id": 4165,
            "gold_sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM all_documents WHERE all_documents.document_type_code = None.\"cv\" OR all_documents.document_type_code = None.\"bk\"",
            "ba": "The virtual table counts the total number of documents from the 'all_documents' table that are of specific types, identified by their document type codes. The placeholder in the WHERE clause allows for filtering based on the document type codes, which can be modified to specify different types of documents.",
            "question": "Show the number of documents with document type code CV or BK."
        },
        {
            "sample_id": 4191,
            "gold_sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'",
            "gold_complexity": 10,
            "vt": "SELECT employees.employee_name, employees.role_code, employees.date_of_birth FROM employees WHERE employees.employee_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names, role codes, and birth dates of employees from the 'employees' table who match a specific employee name. The placeholder in the WHERE clause represents the name of the employee being queried.",
            "question": "Show the name, role code, and date of birth for the employee with name 'Armani'."
        },
        {
            "sample_id": 4161,
            "gold_sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
            "gold_complexity": 8,
            "vt": "SELECT ref_document_types.document_type_name, ref_document_types.document_type_description FROM ref_document_types WHERE ref_document_types.document_type_code = None.\"rv\"",
            "ba": "The virtual table describes the name and description of a specific document type from the 'ref_document_types' table. The placeholder in the WHERE clause represents the unique code identifying the document type.",
            "question": "What is the name and description for document type code RV?"
        },
        {
            "sample_id": 4200,
            "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT employees.role_code FROM employees GROUP BY employees.role_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique role codes from the 'employees' table, grouping the results by each role code and ordering them based on the count of employees in each role. The placeholder in the LIMIT clause allows for specifying the maximum number of role codes to return.",
            "question": "Find the code of the role that have the most employees."
        },
        {
            "sample_id": 4217,
            "gold_sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
            "gold_complexity": 9,
            "vt": "SELECT document_locations.date_in_location_from, document_locations.date_in_locaton_to FROM document_locations JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE all_documents.document_name = None.\"robin cv\"",
            "ba": "The virtual table describes the date range during which a specific document was located in a particular place. It retrieves the start and end dates from the 'document_locations' table, joining it with the 'all_documents' table to filter by the document's name. The placeholder in the WHERE clause represents the name of the document being queried.",
            "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?"
        },
        {
            "sample_id": 4190,
            "gold_sql": "SELECT count(*) FROM Employees",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM employees",
            "ba": "The virtual table provides a count of all employees from the 'employees' table.",
            "question": "Find the number of employees we have."
        },
        {
            "sample_id": 4215,
            "gold_sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
            "gold_complexity": 8,
            "vt": "SELECT document_locations.location_code, document_locations.date_in_location_from, document_locations.date_in_locaton_to FROM document_locations",
            "ba": "The virtual table describes the location details of documents from the 'document_locations' table, including the location code and the date range during which the document was in that location. The placeholders represent specific values for filtering or further specification.",
            "question": "Show the location code, the starting date and ending data in that location for all the documents."
        },
        {
            "sample_id": 4164,
            "gold_sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_document_types.document_type_code FROM ref_document_types WHERE ref_document_types.document_type_name = None.\"paper\"",
            "ba": "The virtual table describes the unique code identifying document types from the 'ref_document_types' table for a specific document type name. The placeholder in the WHERE clause represents the name of the document type being queried.",
            "question": "Find the code of the document type \"Paper\"."
        },
        {
            "sample_id": 4196,
            "gold_sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"",
            "gold_complexity": 6,
            "vt": "SELECT employees.employee_name FROM employees WHERE employees.role_code = None.\"hr\"",
            "ba": "The virtual table describes the names of employees from the 'employees' table who hold a specific role. The placeholder in the WHERE clause represents the role code for which the employee names are being queried.",
            "question": "Which employees have the role with code \"HR\"? Find their names."
        },
        {
            "sample_id": 4211,
            "gold_sql": "SELECT DISTINCT location_code FROM Document_locations",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT document_locations.location_code FROM document_locations",
            "ba": "The virtual table lists unique location codes from the 'document_locations' table, which indicates where documents are stored.",
            "question": "What are the different location codes for documents?"
        },
        {
            "sample_id": 4174,
            "gold_sql": "SELECT count(*) FROM Ref_locations",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ref_locations",
            "ba": "The virtual table provides a count of all unique locations from the 'ref_locations' table. This count helps in understanding the total number of distinct locations available in the database.",
            "question": "How many locations are listed in the database?"
        },
        {
            "sample_id": 4219,
            "gold_sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
            "gold_complexity": 8,
            "vt": "SELECT document_locations.location_code, COUNT(*) FROM document_locations GROUP BY document_locations.location_code",
            "ba": "The virtual table summarizes the count of documents stored at each location by grouping the results based on the location code from the 'document_locations' table.",
            "question": "Show the location codes and the number of documents in each location."
        },
        {
            "sample_id": 4195,
            "gold_sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"",
            "gold_complexity": 6,
            "vt": "SELECT employees.employee_name FROM employees WHERE employees.role_code = None.\"hr\"",
            "ba": "The virtual table describes the names of employees from the 'employees' table who hold a specific role. The placeholder in the WHERE clause represents the role code for which the employee names are being queried.",
            "question": "Show the names of all the employees with role \"HR\"."
        },
        {
            "sample_id": 4172,
            "gold_sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"",
            "gold_complexity": 7,
            "vt": "SELECT ref_document_types.document_type_name FROM all_documents JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE all_documents.document_name = None.\"how to read a book\"",
            "ba": "The virtual table retrieves the name of the document type from the 'ref_document_types' table based on the document name from the 'all_documents' table. It uses a JOIN operation to connect these two tables through the 'document_type_code'. The placeholder in the WHERE clause represents the specific document name being queried.",
            "question": "Find the document type name of the document named \"How to read a book\"."
        },
        {
            "sample_id": 4225,
            "gold_sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT ref_locations.location_name, document_locations.location_code FROM document_locations JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY document_locations.location_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of location names and their corresponding codes from the 'document_locations' table, which indicates where documents are stored. It joins with the 'ref_locations' table to retrieve the location names based on the location codes. The results are grouped by location code to aggregate the number of documents at each location, and the output is ordered by the count of documents in descending order, limited to a specified number of results.",
            "question": "Show the location name and code with the least documents."
        },
        {
            "sample_id": 4159,
            "gold_sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types",
            "gold_complexity": 6,
            "vt": "SELECT ref_document_types.document_type_code, ref_document_types.document_type_name FROM ref_document_types",
            "ba": "The virtual table describes the unique codes and names of document types from the 'ref_document_types' table. This allows users to retrieve a list of all available document types along with their corresponding codes.",
            "question": "List all document type codes and document type names."
        },
        {
            "sample_id": 4162,
            "gold_sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
            "gold_complexity": 8,
            "vt": "SELECT ref_document_types.document_type_name, ref_document_types.document_type_description FROM ref_document_types WHERE ref_document_types.document_type_code = None.\"rv\"",
            "ba": "The virtual table describes the name and description of a specific document type from the 'ref_document_types' table. The placeholder in the WHERE clause represents the unique code identifying the document type.",
            "question": "Give me the name and description of the document type code RV."
        },
        {
            "sample_id": 4158,
            "gold_sql": "SELECT count(*) FROM Ref_document_types",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ref_document_types",
            "ba": "The virtual table counts the total number of document types available in the 'ref_document_types' table. This provides an overview of how many distinct types of documents are defined in the system.",
            "question": "How many document types are there?"
        },
        {
            "sample_id": 4183,
            "gold_sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES",
            "gold_complexity": 8,
            "vt": "SELECT roles.role_code, roles.role_name, roles.role_description FROM roles",
            "ba": "The virtual table describes the unique codes, names, and descriptions of roles from the 'roles' table. This information is essential for understanding the different roles available within the organization.",
            "question": "List all role codes, role names, and role descriptions."
        },
        {
            "sample_id": 4226,
            "gold_sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT ref_locations.location_name, document_locations.location_code FROM document_locations JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY document_locations.location_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of location names and their corresponding codes from the 'document_locations' table, which indicates where documents are stored. It joins with the 'ref_locations' table to retrieve the location names based on the location codes. The results are grouped by location code to aggregate the number of documents at each location, and the output is ordered by the count of documents in descending order, limited to a specified number of results.",
            "question": "What are the name and code of the location with the smallest number of documents?"
        },
        {
            "sample_id": 4241,
            "gold_sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
            "gold_complexity": 7,
            "vt": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
            "ba": "The virtual table provides a list of unique employee IDs involved in the destruction of documents. It combines the IDs of employees who authorized the destruction and those who actually destroyed the documents from the 'Documents_to_be_destroyed' table.",
            "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this."
        },
        {
            "sample_id": 4229,
            "gold_sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
            "gold_complexity": 8,
            "vt": "SELECT documents_to_be_destroyed.destruction_authorised_by_employee_id, COUNT(*) FROM documents_to_be_destroyed GROUP BY documents_to_be_destroyed.destruction_authorised_by_employee_id",
            "ba": "The virtual table summarizes the number of documents scheduled for destruction, grouped by the employee who authorized the destruction. It provides a count of how many documents each employee has authorized for destruction.",
            "question": "Show the id of each employee and the number of document destruction authorised by that employee."
        },
        {
            "sample_id": 4201,
            "gold_sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3",
            "gold_complexity": 8,
            "vt": "SELECT employees.role_code FROM employees GROUP BY employees.role_code HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique role codes from the 'employees' table, specifically those roles that have a count of employees greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of employees required for each role.",
            "question": "Show all role codes with at least 3 employees."
        },
        {
            "sample_id": 4207,
            "gold_sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"",
            "gold_complexity": 7,
            "vt": "SELECT employees.employee_name FROM employees JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE roles.role_name = None.\"editor\"",
            "ba": "The virtual table describes the names of employees from the 'employees' table who hold the role of an editor. It joins the 'employees' table with the 'roles' table to filter based on the role name.",
            "question": "Show the names of employees with role name Editor."
        },
        {
            "sample_id": 4213,
            "gold_sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
            "gold_complexity": 8,
            "vt": "SELECT ref_locations.location_name FROM all_documents JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE all_documents.document_name = None.\"robin cv\"",
            "ba": "The virtual table describes the names of locations where a specific document, identified by its name, is stored. It retrieves this information by joining the 'all_documents' table with the 'document_locations' table to link documents with their respective locations, and then further joins with the 'ref_locations' table to get the location names. The placeholder in the WHERE clause represents the name of the document being queried.",
            "question": "Show the location name for document \"Robin CV\"."
        },
        {
            "sample_id": 4194,
            "gold_sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"",
            "gold_complexity": 6,
            "vt": "SELECT employees.employee_id FROM employees WHERE employees.employee_name = None.\"ebba\"",
            "ba": "The virtual table retrieves the unique identifier of an employee from the 'employees' table based on the specified employee name. The placeholder in the WHERE clause represents the name of the employee being queried.",
            "question": "Show the id of the employee named Ebba."
        },
        {
            "sample_id": 4206,
            "gold_sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"",
            "gold_complexity": 9,
            "vt": "SELECT roles.role_name, roles.role_description FROM employees JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE employees.employee_name = None.\"ebba\"",
            "ba": "The virtual table describes the role name and role description of an employee from the 'employees' table by joining it with the 'roles' table based on the role code. The placeholder in the WHERE clause represents the name of the employee whose role information is being queried.",
            "question": "Show the name and description of the role played by the employee named Ebba."
        },
        {
            "sample_id": 4205,
            "gold_sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"",
            "gold_complexity": 9,
            "vt": "SELECT roles.role_name, roles.role_description FROM employees JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE employees.employee_name = None.\"ebba\"",
            "ba": "The virtual table describes the role name and role description of an employee from the 'employees' table by joining it with the 'roles' table based on the role code. The placeholder in the WHERE clause represents the name of the employee whose role information is being queried.",
            "question": "What is the role name and role description for employee called Ebba?"
        },
        {
            "sample_id": 4181,
            "gold_sql": "SELECT count(*) FROM ROLES",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM roles",
            "ba": "The virtual table provides a count of all unique roles from the 'roles' table. This count helps in understanding the total number of distinct roles available in the system.",
            "question": "How many roles are there?"
        },
        {
            "sample_id": 4186,
            "gold_sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"",
            "gold_complexity": 8,
            "vt": "SELECT roles.role_name, roles.role_description FROM roles WHERE roles.role_code = None.\"mg\"",
            "ba": "The virtual table describes the role name and description from the 'roles' table for a specific role code. The placeholder in the WHERE clause represents the unique code identifying the role.",
            "question": "Find the name and description of the role with code \"MG\"."
        },
        {
            "sample_id": 4188,
            "gold_sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"",
            "gold_complexity": 6,
            "vt": "SELECT roles.role_description FROM roles WHERE roles.role_name = None.\"proof reader\"",
            "ba": "The virtual table describes the role description of a specific role from the 'roles' table. The placeholder in the WHERE clause represents the name of the role being queried.",
            "question": "What is the description of the role named \"Proof Reader\"?"
        },
        {
            "sample_id": 4227,
            "gold_sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",
            "gold_complexity": 5,
            "vt": "SELECT employees.employee_name, employees.employee_name FROM documents_to_be_destroyed JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
            "ba": "The virtual table describes the names of employees who authorized and executed the destruction of documents from the 'documents_to_be_destroyed' table. It joins the 'documents_to_be_destroyed' table with the 'employees' table twice to retrieve the names of both the authorizing and destroying employees.",
            "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?"
        },
        {
            "sample_id": 4214,
            "gold_sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
            "gold_complexity": 8,
            "vt": "SELECT ref_locations.location_name FROM all_documents JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE all_documents.document_name = None.\"robin cv\"",
            "ba": "The virtual table describes the names of locations where a specific document, identified by its name, is stored. It retrieves this information by joining the 'all_documents' table with the 'document_locations' table to link documents with their respective locations, and then further joins with the 'ref_locations' table to get the location names. The placeholder in the WHERE clause represents the name of the document being queried.",
            "question": "What is the location name of the document \"Robin CV\"?"
        },
        {
            "sample_id": 4176,
            "gold_sql": "SELECT location_code ,  location_name FROM Ref_locations",
            "gold_complexity": 6,
            "vt": "SELECT ref_locations.location_code, ref_locations.location_name FROM ref_locations",
            "ba": "The virtual table provides a list of location codes and names from the 'ref_locations' table, which contains details about various locations.",
            "question": "What are all the location codes and location names?"
        },
        {
            "sample_id": 4230,
            "gold_sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
            "gold_complexity": 8,
            "vt": "SELECT documents_to_be_destroyed.destruction_authorised_by_employee_id, COUNT(*) FROM documents_to_be_destroyed GROUP BY documents_to_be_destroyed.destruction_authorised_by_employee_id",
            "ba": "The virtual table summarizes the number of documents scheduled for destruction, grouped by the employee who authorized the destruction. It provides a count of how many documents each employee has authorized for destruction.",
            "question": "What are the id of each employee and the number of document destruction authorised by that employee?"
        }
    ],
    "customers_and_invoices": [
        {
            "sample_id": 1572,
            "gold_sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_first_name, accounts.customer_id FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY accounts.customer_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of customers along with their associated account IDs from the 'accounts' and 'customers' tables. It groups the results by customer ID and filters to include only those customers who have a specified minimum number of accounts, represented by a numeric placeholder.",
            "question": "What are the first names and ids for customers who have two or more accounts?"
        },
        {
            "sample_id": 1592,
            "gold_sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT financial_transactions.account_id FROM financial_transactions GROUP BY financial_transactions.account_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique account identifiers from the 'financial_transactions' table, grouping the results by account ID. It orders the accounts based on the number of transactions associated with each account and limits the output to a specified number of accounts.",
            "question": "What is the id of the account with the most transactions?"
        },
        {
            "sample_id": 1553,
            "gold_sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
            "gold_complexity": 13,
            "vt": "SELECT accounts.account_id, accounts.date_account_opened, accounts.account_name, accounts.other_account_details FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the account details of customers from the 'accounts' table who have a specific first name. The selected columns include the account ID, the date the account was opened, the account name, and any additional details about the account. The placeholder in the WHERE clause represents the first name of the customer.",
            "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'."
        },
        {
            "sample_id": 1599,
            "gold_sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
            "gold_complexity": 8,
            "vt": "SELECT financial_transactions.invoice_number, COUNT(*) FROM financial_transactions GROUP BY financial_transactions.invoice_number",
            "ba": "The virtual table summarizes the total number of financial transactions associated with each invoice from the 'financial_transactions' table. The placeholder in the SELECT clause represents the invoice number, while the COUNT function aggregates the number of transactions for each invoice.",
            "question": "Show the invoice number and the number of transactions for each invoice."
        },
        {
            "sample_id": 1582,
            "gold_sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM financial_transactions JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE accounts.account_name = None.\"337\"",
            "ba": "The virtual table provides a count of financial transactions associated with a specific account name from the 'financial_transactions' and 'accounts' tables. The placeholder in the WHERE clause represents the account name being queried.",
            "question": "Count the number of financial transactions that the account with the name 337 has."
        },
        {
            "sample_id": 1577,
            "gold_sql": "SELECT count(*) FROM Financial_transactions",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM financial_transactions",
            "ba": "The virtual table provides a count of all financial transactions recorded in the 'financial_transactions' table. This count represents the total number of transactions that have occurred, regardless of their type or amount.",
            "question": "How many transactions do we have?"
        },
        {
            "sample_id": 1602,
            "gold_sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT invoices.invoice_number, invoices.invoice_date FROM financial_transactions JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY financial_transactions.invoice_number ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a summary of invoices along with their issue dates, filtered by the number of financial transactions associated with each invoice. The query joins the 'financial_transactions' table with the 'invoices' table based on the invoice number, groups the results by invoice number to count the transactions, and orders them to show the most frequently transacted invoices, limiting the output to a specified number of results.",
            "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?"
        },
        {
            "sample_id": 1591,
            "gold_sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT financial_transactions.account_id FROM financial_transactions GROUP BY financial_transactions.account_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique account identifiers from the 'financial_transactions' table, grouping the results by account ID. It orders the accounts based on the number of transactions associated with each account and limits the output to a specified number of accounts.",
            "question": "Show the account id with most number of transactions."
        },
        {
            "sample_id": 1567,
            "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT accounts.customer_id, customers.customer_first_name, customers.customer_last_name FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY accounts.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique customers along with their first and last names from the 'customers' table, based on the accounts they hold. It joins the 'accounts' table with the 'customers' table using the customer ID, groups the results by customer ID to ensure uniqueness, and orders the results by the count of accounts each customer has. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the customer id, first and last name with most number of accounts."
        },
        {
            "sample_id": 1585,
            "gold_sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
            "gold_complexity": 9,
            "vt": "SELECT financial_transactions.transaction_id FROM financial_transactions WHERE financial_transactions.transaction_amount > (SELECT AVG(financial_transactions.transaction_amount) FROM Financial_transactions)",
            "ba": "The virtual table retrieves the unique identifiers of financial transactions from the 'financial_transactions' table where the transaction amount exceeds the average transaction amount across all transactions.",
            "question": "Show ids for all transactions whose amounts are greater than the average."
        },
        {
            "sample_id": 1547,
            "gold_sql": "SELECT count(*) FROM Accounts",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM accounts",
            "ba": "The virtual table provides a count of all accounts from the 'accounts' table, which contains information about customer accounts including their unique identifiers and the date they were opened.",
            "question": "Show the number of accounts."
        },
        {
            "sample_id": 1565,
            "gold_sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), accounts.customer_id FROM accounts GROUP BY accounts.customer_id",
            "ba": "The virtual table summarizes the number of accounts associated with each customer from the 'accounts' table. The placeholder in the SELECT statement represents the count of accounts, while the GROUP BY clause groups the results by each unique customer identifier.",
            "question": "How many accounts does each customer have? List the number and customer id."
        },
        {
            "sample_id": 1569,
            "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
            "gold_complexity": 13,
            "vt": "SELECT accounts.customer_id, customers.customer_first_name, customers.customer_last_name, COUNT(*) FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY accounts.customer_id",
            "ba": "The virtual table summarizes the number of accounts associated with each customer, displaying the customer's unique identifier, first name, and last name. It combines data from the 'accounts' and 'customers' tables, grouping the results by customer ID to count the total accounts for each customer.",
            "question": "Show id, first name and last name for all customers and the number of accounts."
        },
        {
            "sample_id": 1610,
            "gold_sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
            "gold_complexity": 11,
            "vt": "SELECT orders.order_id, orders.order_details FROM invoices JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY orders.order_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the order IDs and details from the 'orders' table that are associated with invoices. It groups the results by order ID and filters to include only those orders that have more than a specified number of associated invoices, represented by a numeric placeholder.",
            "question": "Return the order ids and details for orderes with two or more invoices."
        },
        {
            "sample_id": 1579,
            "gold_sql": "SELECT count(*) ,  account_id FROM Financial_transactions",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*), financial_transactions.account_id FROM financial_transactions",
            "ba": "The virtual table summarizes the total number of financial transactions grouped by account ID from the 'financial_transactions' table. The placeholder in the SELECT clause represents the count of transactions for each account.",
            "question": "How many transaction does each account have? Show the number and account id."
        },
        {
            "sample_id": 1611,
            "gold_sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT customers.customer_last_name, orders.customer_id, customers.phone_number FROM orders JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY orders.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of customer last names, their associated customer IDs, and phone numbers from the 'customers' and 'orders' tables. It groups the results by customer ID to aggregate the data based on the number of orders each customer has placed. The results are ordered by the count of orders in descending order, and a limit is applied to restrict the number of records returned based on a specified numeric value.",
            "question": "What is the customer last name, id and phone number with most number of orders?"
        },
        {
            "sample_id": 1568,
            "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT accounts.customer_id, customers.customer_first_name, customers.customer_last_name FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY accounts.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique customer identifiers along with their first and last names from the 'accounts' and 'customers' tables. It joins these tables based on the customer ID, groups the results by customer ID to ensure uniqueness, and orders the results by the count of accounts associated with each customer. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Return the id and full name of the customer with the most accounts."
        },
        {
            "sample_id": 1621,
            "gold_sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
            "gold_complexity": 10,
            "vt": "SELECT products.product_name, COUNT(*) FROM order_items JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY products.product_name",
            "ba": "The virtual table summarizes the total quantity of each product ordered from the 'Products' table by joining it with the 'order_items' and 'orders' tables. The result displays the product names along with their respective order counts.",
            "question": "Show all product names and the number of customers having an order on each product."
        },
        {
            "sample_id": 1562,
            "gold_sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT customers.customer_first_name, customers.customer_last_name, customers.phone_number FROM customers JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table describes the distinct first and last names along with the phone numbers of customers from the 'customers' table who have associated accounts. The join operation links the 'customers' table with the 'accounts' table based on the customer ID, ensuring that only customers with accounts are included in the results.",
            "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?"
        },
        {
            "sample_id": 1573,
            "gold_sql": "SELECT count(*) FROM Customers",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all unique customers from the 'customers' table.",
            "question": "Show the number of customers."
        },
        {
            "sample_id": 1597,
            "gold_sql": "SELECT DISTINCT product_color FROM Products",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT products.product_color FROM products",
            "ba": "The virtual table lists all unique colors of products available in the 'products' table. The use of DISTINCT ensures that each color is only represented once, regardless of how many products share that color.",
            "question": "Show all product colors."
        },
        {
            "sample_id": 1626,
            "gold_sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
            "gold_complexity": 8,
            "vt": "SELECT order_items.order_id, SUM(order_items.product_quantity) FROM order_items GROUP BY order_items.order_id",
            "ba": "The virtual table summarizes the total quantity of products ordered for each order from the 'order_items' table. It groups the results by the unique order identifier, allowing users to see how many items were included in each order.",
            "question": "Give the order ids for all orders, as well as the total product quantity in each."
        },
        {
            "sample_id": 1576,
            "gold_sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
            "gold_complexity": 8,
            "vt": "SELECT customers.gender, COUNT(*) FROM customers GROUP BY customers.gender",
            "ba": "The virtual table summarizes the count of customers grouped by their gender from the 'customers' table. The query retrieves the gender of each customer and counts how many customers belong to each gender category.",
            "question": "How many customers are there of each gender?"
        },
        {
            "sample_id": 1601,
            "gold_sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT invoices.invoice_number, invoices.invoice_date FROM financial_transactions JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY financial_transactions.invoice_number ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a summary of invoices along with their corresponding issue dates, filtered by the number of financial transactions associated with each invoice. The query aggregates the financial transactions by invoice number, allowing users to see which invoices have the most transactions. The placeholder in the LIMIT clause indicates the maximum number of results to return, which can be adjusted as needed.",
            "question": "What is the invoice number and invoice date for the invoice with most number of transactions?"
        },
        {
            "sample_id": 1548,
            "gold_sql": "SELECT count(*) FROM Accounts",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM accounts",
            "ba": "The virtual table provides a count of all accounts from the 'accounts' table, which contains information about customer accounts including their unique identifiers and the date they were opened.",
            "question": "How many accounts are there?"
        },
        {
            "sample_id": 1606,
            "gold_sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
            "gold_complexity": 9,
            "vt": "SELECT invoices.invoice_date, invoices.order_id, orders.order_details FROM invoices JOIN Orders AS T2 ON T1.order_id = T2.order_id",
            "ba": "The virtual table describes the invoice date, order ID, and order details from the 'invoices' and 'orders' tables. It joins these two tables based on the order ID to provide a comprehensive view of the invoices associated with each order.",
            "question": "What are the invoice dates, order ids, and order details for all invoices?"
        },
        {
            "sample_id": 1616,
            "gold_sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
            "gold_complexity": 9,
            "vt": "SELECT products.product_name, SUM(order_items.product_quantity) FROM order_items JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY products.product_name",
            "ba": "The virtual table summarizes the total quantity of each product ordered from the 'order_items' table, displaying the product name and the sum of quantities ordered. It joins the 'order_items' table with the 'products' table to retrieve the product names corresponding to their IDs, and groups the results by product name to aggregate the quantities.",
            "question": "What are the different product names, and what is the sum of quantity ordered for each product?"
        },
        {
            "sample_id": 1598,
            "gold_sql": "SELECT DISTINCT product_color FROM Products",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT products.product_color FROM products",
            "ba": "The virtual table lists all unique colors of products available in the 'products' table.",
            "question": "What are the different product colors?"
        },
        {
            "sample_id": 1554,
            "gold_sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
            "gold_complexity": 13,
            "vt": "SELECT accounts.account_id, accounts.date_account_opened, accounts.account_name, accounts.other_account_details FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the account details of customers from the 'accounts' table who have a specific first name. The selected columns include the account ID, the date the account was opened, the account name, and any additional details about the account. The placeholder in the WHERE clause represents the first name of the customer.",
            "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?"
        },
        {
            "sample_id": 1561,
            "gold_sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT customers.customer_first_name, customers.customer_last_name, customers.phone_number FROM customers JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table provides a distinct list of customers' first and last names along with their phone numbers from the 'customers' table. It joins the 'customers' table with the 'accounts' table to ensure that only customers with associated accounts are included in the results.",
            "question": "Show the unique first names, last names, and phone numbers for all customers with any account."
        },
        {
            "sample_id": 1590,
            "gold_sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
            "gold_complexity": 11,
            "vt": "SELECT accounts.account_name, financial_transactions.account_id, COUNT(*) FROM financial_transactions JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY financial_transactions.account_id",
            "ba": "The virtual table describes the account names and their associated financial transactions from the 'accounts' and 'financial_transactions' tables. It counts the number of transactions for each account, grouping the results by account ID.",
            "question": "Return the names and ids of each account, as well as the number of transactions."
        },
        {
            "sample_id": 1556,
            "gold_sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
            "gold_complexity": 10,
            "vt": "SELECT accounts.account_name, accounts.other_account_details FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = None.\"meaghan\" AND customers.customer_last_name = None.\"keeling\"",
            "ba": "The virtual table describes the account names and additional details of accounts associated with customers from the 'accounts' table. It filters the results based on the first and last names of the customers, using placeholders for the customer's first and last names.",
            "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?"
        },
        {
            "sample_id": 1558,
            "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_first_name, customers.customer_last_name FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE accounts.account_name = None.\"900\"",
            "ba": "The virtual table describes the first and last names of customers associated with a specific account from the 'accounts' and 'customers' tables. The placeholder in the WHERE clause represents the account name that is being queried.",
            "question": "What are the full names of customers with the account name 900?"
        },
        {
            "sample_id": 1589,
            "gold_sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
            "gold_complexity": 11,
            "vt": "SELECT accounts.account_name, financial_transactions.account_id, COUNT(*) FROM financial_transactions JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY financial_transactions.account_id",
            "ba": "The virtual table describes the account names and their associated financial transactions from the 'accounts' and 'financial_transactions' tables. It counts the number of transactions for each account, grouping the results by account ID.",
            "question": "Show the account name, id and the number of transactions for each account."
        },
        {
            "sample_id": 1594,
            "gold_sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
            "gold_complexity": 11,
            "vt": "SELECT financial_transactions.account_id, accounts.account_name FROM financial_transactions JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY financial_transactions.account_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the account IDs and names from the 'financial_transactions' and 'accounts' tables, where the transactions are grouped by account ID. It filters the results to include only those accounts that have a specified minimum number of transactions associated with them.",
            "question": "What are the ids and names of accounts with 4 or more transactions?"
        },
        {
            "sample_id": 1586,
            "gold_sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
            "gold_complexity": 9,
            "vt": "SELECT financial_transactions.transaction_id FROM financial_transactions WHERE financial_transactions.transaction_amount > (SELECT AVG(financial_transactions.transaction_amount) FROM Financial_transactions)",
            "ba": "The virtual table retrieves the unique identifiers of financial transactions from the 'financial_transactions' table where the transaction amount exceeds the average transaction amount across all transactions.",
            "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?"
        },
        {
            "sample_id": 1624,
            "gold_sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
            "gold_complexity": 9,
            "vt": "SELECT order_items.order_id, COUNT(DISTINCT product_id) FROM order_items GROUP BY order_items.order_id",
            "ba": "The virtual table summarizes the number of distinct products associated with each order from the 'order_items' table. It groups the results by the 'order_id' to provide a count of unique products for every order.",
            "question": "How many different products correspond to each order id?"
        },
        {
            "sample_id": 1575,
            "gold_sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
            "gold_complexity": 8,
            "vt": "SELECT customers.gender, COUNT(*) FROM customers GROUP BY customers.gender",
            "ba": "The virtual table summarizes the number of customers grouped by their gender from the 'customers' table. The query counts the total number of customers for each gender category.",
            "question": "Show the number of customers for each gender."
        },
        {
            "sample_id": 1574,
            "gold_sql": "SELECT count(*) FROM Customers",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all unique customers from the 'customers' table.",
            "question": "Count the number of customers."
        },
        {
            "sample_id": 1615,
            "gold_sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
            "gold_complexity": 9,
            "vt": "SELECT products.product_name, SUM(order_items.product_quantity) FROM order_items JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY products.product_name",
            "ba": "The virtual table summarizes the total quantity of each product ordered from the 'order_items' table, joining it with the 'products' table to retrieve the product names. The results are grouped by product name to provide a total count for each distinct product.",
            "question": "Show all product names and the total quantity ordered for each product name."
        },
        {
            "sample_id": 1622,
            "gold_sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
            "gold_complexity": 10,
            "vt": "SELECT products.product_name, COUNT(*) FROM order_items JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY products.product_name",
            "ba": "The virtual table summarizes the count of ordered products by their names from the 'order_items' table, joining with the 'products' and 'orders' tables to gather necessary information. The result will show how many times each product has been ordered.",
            "question": "What are teh names of the different products, as well as the number of customers who have ordered each product."
        },
        {
            "sample_id": 1557,
            "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_first_name, customers.customer_last_name FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE accounts.account_name = None.\"900\"",
            "ba": "The virtual table describes the first and last names of customers associated with a specific account from the 'accounts' and 'customers' tables. The placeholder in the WHERE clause represents the account name that is being queried.",
            "question": "Show the first name and last name for the customer with account name 900."
        },
        {
            "sample_id": 1580,
            "gold_sql": "SELECT count(*) ,  account_id FROM Financial_transactions",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*), financial_transactions.account_id FROM financial_transactions",
            "ba": "The virtual table provides a count of financial transactions grouped by account identifier from the 'financial_transactions' table. The placeholder represents the account ID for which the transaction count is being retrieved.",
            "question": "Count the number of financial transactions that correspond to each account id."
        },
        {
            "sample_id": 1583,
            "gold_sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
            "gold_complexity": 7,
            "vt": "SELECT AVG(financial_transactions.transaction_amount), MIN(financial_transactions.transaction_amount), MAX(financial_transactions.transaction_amount), SUM(financial_transactions.transaction_amount) FROM financial_transactions",
            "ba": "The virtual table provides aggregate financial data from the 'financial_transactions' table, including the average, minimum, maximum, and total amount of transactions. This allows users to analyze the overall financial activity by summarizing key metrics related to transaction amounts.",
            "question": "What is the average, minimum, maximum, and total transaction amount?"
        },
        {
            "sample_id": 1560,
            "gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM customers WHERE NOT customers.customer_id IN (SELECT customers.customer_id FROM Accounts)",
            "ba": "The virtual table counts the number of customers from the 'customers' table who do not have an associated account in the 'accounts' table. The subquery identifies customer IDs that are present in the 'accounts' table, and the main query filters out these customers to provide the count of those without accounts.",
            "question": "Count the number of customers who do not have an account."
        },
        {
            "sample_id": 1628,
            "gold_sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM products WHERE NOT products.product_id IN (SELECT products.product_id FROM Order_items)",
            "ba": "The virtual table counts the number of products from the 'products' table that are not included in any order items from the 'order_items' table. The subquery identifies all product IDs that have been ordered, and the main query counts those products that are absent from this list.",
            "question": "Count the number of products that were never ordered."
        },
        {
            "sample_id": 1612,
            "gold_sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT customers.customer_last_name, orders.customer_id, customers.phone_number FROM orders JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY orders.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of customer last names, their associated customer IDs, and phone numbers from the 'customers' and 'orders' tables. It groups the results by customer ID to aggregate the data based on the number of orders each customer has placed. The results are ordered by the count of orders in descending order, and a limit is applied to restrict the number of records returned.",
            "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders."
        },
        {
            "sample_id": 1571,
            "gold_sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_first_name, accounts.customer_id FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY accounts.customer_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of customers along with their associated account IDs from the 'accounts' and 'customers' tables. It groups the results by customer ID and filters to include only those customers who have a specified minimum number of accounts, represented by a numeric placeholder.",
            "question": "Show first name and id for all customers with at least 2 accounts."
        },
        {
            "sample_id": 1614,
            "gold_sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
            "gold_complexity": 6,
            "vt": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
            "ba": "The virtual table lists the names of products from the 'Products' table that are not included in any orders. It uses an EXCEPT clause to exclude product names that appear in the 'Order_items' table, ensuring that only products that have never been ordered are displayed.",
            "question": "What are the names of products that have never been ordered?"
        }
    ],
    "phone_1": [
        {
            "sample_id": 1039,
            "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT phone.hardware_model_name FROM screen_mode JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE screen_mode.type = None.\"graphics\" OR t2.company_name = None.\"nokia corporation\"",
            "ba": "The virtual table retrieves distinct hardware model names of phones from the 'phone' table that are associated with specific screen modes from the 'screen_mode' table. It filters the results based on the type of screen mode being 'graphics' or the company name being 'nokia corporation'.",
            "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\""
        },
        {
            "sample_id": 1037,
            "gold_sql": "SELECT T1.WiFi , T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = \"LG-P760\";",
            "gold_complexity": 10,
            "vt": "SELECT chip_model.wifi, screen_mode.type FROM chip_model JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE phone.hardware_model_name = None.\"lg-p760\"",
            "ba": "The virtual table describes the WiFi capabilities and the type of screen mode for phones that have a specific hardware model name. The placeholders in the WHERE clause represent the hardware model name of the phone.",
            "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?"
        },
        {
            "sample_id": 1023,
            "gold_sql": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004;",
            "gold_complexity": 6,
            "vt": "SELECT chip_model.model_name FROM chip_model WHERE chip_model.launch_year BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of chip models from the 'chip_model' table that were launched within a specific range of years. The placeholders in the WHERE clause represent the start and end years for filtering the chip models based on their launch year.",
            "question": "the names of models that launched between 2002 and 2004."
        },
        {
            "sample_id": 1034,
            "gold_sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
            "gold_complexity": 8,
            "vt": "SELECT phone.company_name FROM phone GROUP BY phone.company_name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of companies that manufactured phones, specifically those that have produced more than a specified number of phone models. The placeholder in the HAVING clause represents the minimum count of phone models a company must have to be included in the results.",
            "question": "List the name of the company that produced more than one phone model."
        },
        {
            "sample_id": 1041,
            "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT phone.hardware_model_name, phone.company_name FROM screen_mode JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE screen_mode.used_kb BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct hardware model names and company names of phones that utilize specific screen modes, filtered by the amount of kilobytes used by those screen modes. The placeholders in the WHERE clause represent the range of kilobytes used.",
            "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15."
        },
        {
            "sample_id": 1050,
            "gold_sql": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
            "gold_complexity": 10,
            "vt": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'",
            "ba": "The virtual table lists the names of chip models from the 'chip_model' table that are not used in any phone records where the accreditation type is 'Full'. This is achieved by selecting all model names and excluding those that are referenced in the 'phone' table under the specified accreditation type.",
            "question": "Find the names of the chip models that are not used by any phone with full accreditation type."
        },
        {
            "sample_id": 1028,
            "gold_sql": "SELECT avg(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\";",
            "gold_complexity": 7,
            "vt": "SELECT AVG(chip_model.rom_mib) FROM chip_model JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE phone.company_name = None.\"nokia corporation\"",
            "ba": "The virtual table calculates the average amount of ROM in MiB for chip models used in phones manufactured by a specific company. It joins the 'chip_model' table with the 'phone' table based on the chip model name, filtering the results to include only those associated with the specified company name.",
            "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?"
        },
        {
            "sample_id": 1040,
            "gold_sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name  =  \"Nokia Corporation\" AND T1.Type != \"Text\";",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT phone.hardware_model_name FROM screen_mode JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.company_name = None.\"nokia corporation\" AND screen_mode.type <> None.\"text\"",
            "ba": "The virtual table retrieves distinct hardware model names of phones from the 'phone' table that are associated with specific screen modes. It filters the results to include only those phones manufactured by a specific company and excludes screen modes of a certain type.",
            "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text."
        },
        {
            "sample_id": 1029,
            "gold_sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB  >  32;",
            "gold_complexity": 11,
            "vt": "SELECT phone.hardware_model_name, phone.company_name FROM chip_model JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE chip_model.launch_year = [placeholder-type:numeric] OR chip_model.ram_mib > [placeholder-type:numeric]",
            "ba": "The virtual table describes the hardware model names and company names of phones that use specific chip models launched in a certain year or with a certain amount of RAM. The placeholders in the WHERE clause represent the launch year and the RAM size for filtering the results.",
            "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32."
        },
        {
            "sample_id": 1048,
            "gold_sql": "SELECT model_name FROM chip_model ORDER BY launch_year",
            "gold_complexity": 6,
            "vt": "SELECT chip_model.model_name FROM chip_model ORDER BY chip_model.launch_year",
            "ba": "The virtual table lists the names of chip models from the 'chip_model' table, ordered by their launch year. This allows users to see the progression of chip models over time.",
            "question": "List all the model names sorted by their launch year."
        },
        {
            "sample_id": 1049,
            "gold_sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(chip_model.ram_mib) FROM chip_model WHERE NOT chip_model.model_name IN (SELECT phone.chip_model FROM phone)",
            "ba": "The virtual table calculates the average amount of RAM in MiB for chip models that are not used in any phone. It filters out chip models that are referenced in the phone table, ensuring that only those models that have not been associated with any phone are considered in the average calculation.",
            "question": "Find the average ram mib size of the chip models that are never used by any phone."
        },
        {
            "sample_id": 1024,
            "gold_sql": "SELECT Model_name ,  RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT chip_model.model_name, chip_model.ram_mib FROM chip_model ORDER BY chip_model.ram_mib LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and RAM sizes of chip models from the 'chip_model' table, ordered by the amount of RAM in MiB. The placeholder in the LIMIT clause allows the user to specify how many results they want to retrieve.",
            "question": "Which model has the least amount of RAM? List the model name and the amount of RAM."
        },
        {
            "sample_id": 1038,
            "gold_sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;",
            "gold_complexity": 10,
            "vt": "SELECT phone.hardware_model_name FROM chip_model JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE screen_mode.type = None.\"text\" OR chip_model.ram_mib > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the hardware model names of phones that are associated with specific chip models and screen modes. It filters the results based on the type of screen mode or the amount of RAM in the chip model, using placeholders for dynamic values.",
            "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32."
        },
        {
            "sample_id": 1032,
            "gold_sql": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";",
            "gold_complexity": 9,
            "vt": "SELECT phone.hardware_model_name, phone.company_name FROM screen_mode JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE screen_mode.type = None.\"graphics\"",
            "ba": "The virtual table describes the hardware model names and company names of phones that utilize a specific graphics mode from the 'screen_mode' table. The placeholder in the WHERE clause represents the type of graphics mode being queried.",
            "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\""
        },
        {
            "sample_id": 1035,
            "gold_sql": "SELECT max(used_kb) , min(used_kb) , avg(used_kb) FROM screen_mode;",
            "gold_complexity": 6,
            "vt": "SELECT MAX(screen_mode.used_kb), MIN(screen_mode.used_kb), AVG(screen_mode.used_kb) FROM screen_mode",
            "ba": "The virtual table provides statistical information about the amount of kilobytes used by different screen modes from the 'screen_mode' table. It calculates the maximum, minimum, and average values of the 'used_kb' column, which indicates how much memory is utilized by each screen mode.",
            "question": "List the maximum, minimum and average number of used kb in screen mode."
        },
        {
            "sample_id": 1047,
            "gold_sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM chip_model WHERE chip_model.wifi = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of chip models from the 'chip_model' table that have specific WiFi capabilities. The placeholder in the WHERE clause represents the WiFi capability being queried.",
            "question": "Count the number of chip model that do not have wifi."
        },
        {
            "sample_id": 1026,
            "gold_sql": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM phone WHERE phone.company_name = None.\"nokia corporation\"",
            "ba": "The virtual table counts the number of phones manufactured by a specific company, in this case, 'nokia corporation'. The placeholder in the WHERE clause represents the company's name.",
            "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?"
        }
    ],
    "soccer_2": [
        {
            "sample_id": 4949,
            "gold_sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
            "gold_complexity": 8,
            "vt": "SELECT player.pname, player.hs FROM player WHERE player.hs < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and high schools of players from the 'player' table who attended high schools with an enrollment number less than a specified value. The placeholder in the WHERE clause represents the maximum enrollment number.",
            "question": "Find the name and training hours of players whose hours are below 1500."
        },
        {
            "sample_id": 4972,
            "gold_sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
            "gold_complexity": 8,
            "vt": "SELECT college.cname FROM college WHERE college.enr > [placeholder-type:numeric] ORDER BY college.cname",
            "ba": "The virtual table lists the names of colleges from the 'college' table that have an enrollment number greater than a specified value. The placeholder in the WHERE clause represents the minimum enrollment number required to filter the colleges.",
            "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?"
        },
        {
            "sample_id": 4945,
            "gold_sql": "SELECT count(*) FROM College WHERE enr  >  15000",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM college WHERE college.enr > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of colleges from the 'college' table that have an enrollment number greater than a specified value. The placeholder in the WHERE clause represents the minimum enrollment number to filter the colleges.",
            "question": "How many colleges has more than 15000 students?"
        },
        {
            "sample_id": 5034,
            "gold_sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT college.cname FROM college WHERE college.enr > (SELECT MIN(college.enr) FROM college WHERE state = 'FL')",
            "ba": "The virtual table lists the distinct names of colleges from the 'college' table that have an enrollment number greater than the minimum enrollment number of colleges located in Florida. The placeholder in the subquery represents the state name.",
            "question": "What are the names of the colleges that are larger than at least one college in Florida?"
        },
        {
            "sample_id": 4977,
            "gold_sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT tryout.ppos FROM tryout GROUP BY tryout.ppos ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the positions that players are trying out for from the 'tryout' table. It groups the results by position and orders them based on the count of players trying out for each position, limiting the results to a specified number.",
            "question": "Which position is most popular among players in the tryout?"
        },
        {
            "sample_id": 4938,
            "gold_sql": "SELECT sum(enr) FROM College",
            "gold_complexity": 4,
            "vt": "SELECT SUM(college.enr) FROM college",
            "ba": "The virtual table calculates the total enrollment number of students across all colleges listed in the 'college' table.",
            "question": "How many students are enrolled in college?"
        },
        {
            "sample_id": 4989,
            "gold_sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT college.state FROM college JOIN tryout AS T2 ON T1.cName = T2.cName WHERE tryout.decision = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves distinct states from the 'college' table where players have participated in tryouts and received a specific decision. The placeholder in the WHERE clause represents the decision made regarding the player's tryout.",
            "question": "Find the states where have some college students in tryout and their decisions are yes."
        },
        {
            "sample_id": 5024,
            "gold_sql": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*) FROM (SELECT tryout.cname FROM tryout WHERE tryout.ppos = '[placeholder-type:string]' INTERSECT SELECT tryout.cname FROM tryout WHERE tryout.ppos = '[placeholder-type:string]')",
            "ba": "The virtual table counts the number of colleges where players are trying out for a specific position. It does this by selecting the college names from the 'tryout' table where the position matches the specified placeholder, and then using an INTERSECT to find colleges that have players trying out for the same position.",
            "question": "How many schools have students playing in goalie and mid-field positions?"
        },
        {
            "sample_id": 4982,
            "gold_sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
            "gold_complexity": 9,
            "vt": "SELECT MIN(player.hs), tryout.ppos FROM tryout JOIN player AS T2 ON T1.pID = T2.pID GROUP BY tryout.ppos",
            "ba": "The virtual table provides the minimum high school attended by players grouped by the position they are trying out for. It combines data from the 'tryout' and 'player' tables, focusing on the player's high school and the position they are auditioning for.",
            "question": "For each position, what is the minimum time students spent practicing?"
        },
        {
            "sample_id": 4969,
            "gold_sql": "SELECT * FROM College ORDER BY enr",
            "gold_complexity": 6,
            "vt": "SELECT * FROM college ORDER BY college.enr",
            "ba": "The virtual table displays all columns from the 'college' table, sorted by the enrollment number of students in ascending order. This allows users to see the details of each college along with their respective enrollment figures.",
            "question": "List all information about college sorted by enrollment number in the ascending order."
        },
        {
            "sample_id": 4942,
            "gold_sql": "SELECT count(*) FROM College",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM college",
            "ba": "The virtual table provides the total number of colleges listed in the 'college' table.",
            "question": "How many different colleges are there?"
        },
        {
            "sample_id": 5037,
            "gold_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
            "gold_complexity": 12,
            "vt": "SELECT SUM(college.enr) FROM college WHERE NOT college.cname IN (SELECT college.cname FROM tryout WHERE pPos = \"goalie\")",
            "ba": "The virtual table calculates the total enrollment number of students from the 'college' table, excluding those colleges where players trying out for the position of 'goalie' are present. The query uses a subquery to filter out colleges based on the tryout position.",
            "question": "What is the total number of enrollment of schools that do not have any goalie player?"
        },
        {
            "sample_id": 5026,
            "gold_sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
            "gold_complexity": 7,
            "vt": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
            "ba": "The virtual table lists the names of colleges where players trying out for the position of 'mid' are participating, excluding those colleges where players are trying out for the position of 'goalie'.",
            "question": "What are the names of the schools with some players in the mid position but no goalies?"
        },
        {
            "sample_id": 4975,
            "gold_sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT tryout.cname FROM tryout ORDER BY tryout.cname",
            "ba": "The virtual table lists the distinct names of colleges from the 'tryout' table, which records the tryouts for players at various colleges. The result is ordered alphabetically by the college name.",
            "question": "Find the name of different colleges involved in the tryout in alphabetical order."
        },
        {
            "sample_id": 5009,
            "gold_sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
            "gold_complexity": 7,
            "vt": "SELECT tryout.cname FROM tryout JOIN player AS T2 ON T1.pID = T2.pID WHERE player.pname LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the names of colleges from the 'tryout' table where a specific player, identified by their name, has participated in a tryout. The query joins the 'tryout' table with the 'player' table to filter the results based on the player's name using a placeholder for string values.",
            "question": "Which colleges do the tryout players whose name starts with letter D go to?"
        },
        {
            "sample_id": 4970,
            "gold_sql": "SELECT * FROM College ORDER BY enr",
            "gold_complexity": 6,
            "vt": "SELECT * FROM college ORDER BY college.enr",
            "ba": "The virtual table retrieves all columns from the 'college' table and orders the results by the enrollment number of students in ascending order.",
            "question": "What information do you have on colleges sorted by increasing enrollment numbers?"
        },
        {
            "sample_id": 4992,
            "gold_sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
            "gold_complexity": 9,
            "vt": "SELECT player.pname, tryout.cname FROM player JOIN tryout AS T2 ON T1.pID = T2.pID WHERE tryout.decision = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of players and the colleges where they participated in tryouts, filtered by the decision made regarding their tryout. The placeholder in the WHERE clause represents the decision status of the tryout.",
            "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?"
        },
        {
            "sample_id": 4952,
            "gold_sql": "SELECT count(DISTINCT cName) FROM tryout",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT cName) FROM tryout",
            "ba": "The virtual table counts the distinct colleges from the 'tryout' table where players have participated in tryouts.",
            "question": "How many different colleges were represented at tryouts?"
        },
        {
            "sample_id": 5003,
            "gold_sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
            "gold_complexity": 8,
            "vt": "SELECT AVG(player.hs), MAX(player.hs) FROM player JOIN tryout AS T2 ON T1.pID = T2.pID WHERE tryout.decision = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average and maximum high school attended by players who participated in tryouts, filtered by the decision made regarding their tryout.",
            "question": "Find the average and maximum hours for the students whose tryout decision is yes."
        },
        {
            "sample_id": 4993,
            "gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
            "gold_complexity": 7,
            "vt": "SELECT player.pname FROM player JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY player.pname",
            "ba": "The virtual table lists the names of players from the 'player' table who are participating in tryouts. It joins the 'player' table with the 'tryout' table based on the player's unique identifier, ensuring that only players who have a corresponding entry in the tryout records are included. The results are ordered by the players' names.",
            "question": "Find the name of all students who were in the tryout sorted in alphabetic order."
        },
        {
            "sample_id": 4962,
            "gold_sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
            "gold_complexity": 6,
            "vt": "SELECT AVG(college.enr) FROM college WHERE college.state = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average enrollment number of colleges located in a specific state. The placeholder in the WHERE clause represents the state name.",
            "question": "What is average number of students enrolled in Florida colleges?"
        },
        {
            "sample_id": 4976,
            "gold_sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT tryout.cname FROM tryout ORDER BY tryout.cname",
            "ba": "The virtual table lists the unique names of colleges from the 'tryout' table, sorted in alphabetical order. This allows users to see all colleges where tryouts are being held without duplicates.",
            "question": "What are the different names of the colleges involved in the tryout in alphabetical order?"
        },
        {
            "sample_id": 4998,
            "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
            "gold_complexity": 7,
            "vt": "SELECT college.state FROM college JOIN tryout AS T2 ON T1.cName = T2.cName WHERE tryout.ppos = '[placeholder-type:string]'",
            "ba": "The virtual table describes the states of colleges where players are trying out for a specific position. The query joins the 'college' and 'tryout' tables based on the college name, filtering the results to show only those tryouts that match the specified position.",
            "question": "What are the states of the colleges where students who tried out for the striker position attend?"
        },
        {
            "sample_id": 4953,
            "gold_sql": "SELECT count(DISTINCT pPos) FROM tryout",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT pPos) FROM tryout",
            "ba": "The virtual table counts the distinct positions that players are trying out for in the 'tryout' table.",
            "question": "What are the unique types of player positions in the tryout?"
        },
        {
            "sample_id": 5032,
            "gold_sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT college.state FROM college WHERE college.enr < (SELECT MAX(college.enr) FROM college)",
            "ba": "The virtual table retrieves distinct states from the 'college' table where the enrollment number of students is less than the maximum enrollment number across all colleges. This allows us to identify states of colleges that have fewer students than the largest college.",
            "question": "What are the states with colleges that have enrollments less than the some other college?"
        },
        {
            "sample_id": 4981,
            "gold_sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos",
            "gold_complexity": 9,
            "vt": "SELECT MIN(player.hs), tryout.ppos FROM tryout JOIN player AS T2 ON T1.pID = T2.pID GROUP BY tryout.ppos",
            "ba": "The virtual table retrieves the minimum high school attended by players grouped by their positions in tryouts. It combines data from the 'tryout' and 'player' tables based on the player's unique identifier, allowing us to see which position corresponds to the lowest high school identifier for each position.",
            "question": "What is minimum hours of the students playing in different position?"
        },
        {
            "sample_id": 5012,
            "gold_sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
            "gold_complexity": 7,
            "vt": "SELECT tryout.cname FROM tryout WHERE tryout.decision = '[placeholder-type:string]' AND tryout.ppos = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the names of colleges from the 'tryout' table where a specific decision was made regarding a player's tryout for a particular position. The placeholders represent the decision and position criteria.",
            "question": "What college has a student who successfully made the team in the role of a goalie?"
        },
        {
            "sample_id": 4973,
            "gold_sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
            "gold_complexity": 8,
            "vt": "SELECT player.pname FROM player WHERE player.ycard = '[placeholder-type:string]' ORDER BY player.hs",
            "ba": "The virtual table describes the names of players from the 'player' table who have a specific year of eligibility. The results are ordered by the high school they attended.",
            "question": "Find the name of players whose card is yes in the descending order of training hours."
        },
        {
            "sample_id": 4996,
            "gold_sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
            "gold_complexity": 9,
            "vt": "SELECT player.pname, player.hs FROM player JOIN tryout AS T2 ON T1.pID = T2.pID WHERE tryout.decision = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and high schools of players who participated in tryouts, filtered by the decision made regarding their tryout. The query joins the 'player' and 'tryout' tables based on the player's unique identifier, allowing us to access player details alongside their tryout results. The placeholder in the WHERE clause represents the decision made about the player's tryout.",
            "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?"
        },
        {
            "sample_id": 4944,
            "gold_sql": "SELECT count(*) FROM Player WHERE HS  >  1000",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM player WHERE player.hs > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of players from the 'player' table who attended high schools with an enrollment number greater than a specified value. The placeholder in the WHERE clause represents the minimum enrollment number of the high schools.",
            "question": "How many different players trained for more than 1000 hours?"
        },
        {
            "sample_id": 4951,
            "gold_sql": "SELECT count(DISTINCT cName) FROM tryout",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT cName) FROM tryout",
            "ba": "The virtual table counts the distinct colleges from the 'tryout' table where players have participated in tryouts. This provides insight into how many unique colleges are involved in the tryout process.",
            "question": "How many different colleges do attend the tryout test?"
        },
        {
            "sample_id": 5035,
            "gold_sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
            "gold_complexity": 11,
            "vt": "SELECT college.cname FROM college WHERE college.enr > (SELECT MAX(college.enr) FROM college WHERE state = 'FL')",
            "ba": "The virtual table lists the names of colleges from the 'college' table that have an enrollment number greater than the maximum enrollment number of colleges located in Florida. The query uses a subquery to find the maximum enrollment in Florida and compares it to the enrollment of other colleges.",
            "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state."
        },
        {
            "sample_id": 5025,
            "gold_sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
            "gold_complexity": 7,
            "vt": "SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie'",
            "ba": "The virtual table lists the names of colleges where players trying out for the position of 'mid' are participating, excluding those colleges where players are trying out for the position of 'goalie'.",
            "question": "Find the names of schools that have some players in the mid position but not in the goalie position."
        },
        {
            "sample_id": 4943,
            "gold_sql": "SELECT count(*) FROM Player WHERE HS  >  1000",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM player WHERE player.hs > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of players from the 'player' table who attended high schools with an enrollment number greater than a specified value. The placeholder in the WHERE clause represents the enrollment number of students at the high school.",
            "question": "How many players have more than 1000 hours of training?"
        },
        {
            "sample_id": 4937,
            "gold_sql": "SELECT sum(enr) FROM College",
            "gold_complexity": 4,
            "vt": "SELECT SUM(college.enr) FROM college",
            "ba": "The virtual table calculates the total enrollment number of students across all colleges listed in the 'college' table.",
            "question": "What is the total enrollment number of all colleges?"
        },
        {
            "sample_id": 5031,
            "gold_sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT college.state FROM college WHERE college.enr < (SELECT MAX(college.enr) FROM college)",
            "ba": "The virtual table retrieves distinct states from the 'college' table where the enrollment number of students is less than the maximum enrollment number across all colleges. This allows us to identify states of colleges that have fewer students than the largest college.",
            "question": "Find the states where have the colleges whose enrollments are less than the largest size."
        },
        {
            "sample_id": 4958,
            "gold_sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM tryout WHERE tryout.ppos = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of players who are trying out for a specific position from the 'tryout' table. The placeholder in the WHERE clause represents the position that the user is interested in.",
            "question": "What is the number of students playing as a goalie?"
        },
        {
            "sample_id": 5020,
            "gold_sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
            "gold_complexity": 7,
            "vt": "SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'",
            "ba": "The virtual table identifies colleges where players are trying out for both the 'goalie' and 'mid' positions. It uses an INTERSECT operation to find common colleges from two separate queries based on player positions.",
            "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field."
        },
        {
            "sample_id": 4988,
            "gold_sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT college.state FROM college JOIN tryout AS T2 ON T1.cName = T2.cName",
            "ba": "The virtual table retrieves a list of distinct states where colleges are located, based on the tryouts held at those colleges. It joins the 'college' table with the 'tryout' table to filter the results accordingly.",
            "question": "What are the different states that have students trying out?"
        },
        {
            "sample_id": 4980,
            "gold_sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), tryout.cname FROM tryout GROUP BY tryout.cname ORDER BY COUNT(*)",
            "ba": "The virtual table provides a count of players participating in tryouts for each college, grouped by the college name and ordered by the number of participants in ascending order.",
            "question": "How many students participated in tryouts for each college by descennding count?"
        },
        {
            "sample_id": 5001,
            "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
            "gold_complexity": 8,
            "vt": "SELECT college.state FROM college JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE player.pname = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the state of the college where a specific player is trying out. It joins the 'college', 'tryout', and 'player' tables to filter the results based on the player's name.",
            "question": "Find the state of the college which player Charles is attending."
        },
        {
            "sample_id": 5038,
            "gold_sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
            "gold_complexity": 12,
            "vt": "SELECT SUM(college.enr) FROM college WHERE NOT college.cname IN (SELECT college.cname FROM tryout WHERE pPos = \"goalie\")",
            "ba": "The virtual table calculates the total enrollment number of students from the 'college' table, excluding those colleges where players trying out for the position of 'goalie' are present. The subquery identifies the colleges associated with players trying out for that specific position, and the main query sums the enrollment numbers of the remaining colleges.",
            "question": "What is the total number of students enrolled in schools without any goalies?"
        },
        {
            "sample_id": 5006,
            "gold_sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
            "gold_complexity": 7,
            "vt": "SELECT AVG(player.hs) FROM player JOIN tryout AS T2 ON T1.pID = T2.pID WHERE tryout.decision = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average high school attended by players who participated in tryouts and received a specific decision. The query joins the 'player' and 'tryout' tables based on the player's unique identifier, filtering the results based on the decision made regarding the player's tryout.",
            "question": "What is the average number of hours spent practicing for students who got rejected?"
        },
        {
            "sample_id": 4959,
            "gold_sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",
            "gold_complexity": 6,
            "vt": "SELECT AVG(player.hs), MAX(player.hs), MIN(player.hs) FROM player",
            "ba": "The virtual table calculates the average, maximum, and minimum values of the high school attended by players from the 'player' table. The placeholders represent the high school data being analyzed.",
            "question": "Find the max, average and min training hours of all players."
        },
        {
            "sample_id": 4983,
            "gold_sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT college.cname FROM college ORDER BY college.enr LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of colleges from the 'college' table, ordered by the enrollment number of students, and limits the results to a specified number of colleges.",
            "question": "What are the names of schools with the top 3 largest size?"
        },
        {
            "sample_id": 4963,
            "gold_sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
            "gold_complexity": 6,
            "vt": "SELECT player.pname FROM player WHERE player.hs BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of players from the 'player' table who attended high schools with enrollment numbers within a specified range. The placeholders represent the lower and upper limits of the enrollment numbers.",
            "question": "What are the names of players whose training hours is between 500 and 1500?"
        },
        {
            "sample_id": 4954,
            "gold_sql": "SELECT count(DISTINCT pPos) FROM tryout",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT pPos) FROM tryout",
            "ba": "The virtual table counts the distinct positions that players are trying out for from the 'tryout' table.",
            "question": "What are the different types of player positions?"
        },
        {
            "sample_id": 5000,
            "gold_sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
            "gold_complexity": 8,
            "vt": "SELECT player.pname FROM player JOIN tryout AS T2 ON T1.pID = T2.pID WHERE tryout.decision = '[placeholder-type:string]' AND tryout.ppos = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of players who participated in tryouts and received a specific decision for a particular position. The placeholders in the WHERE clause represent the decision made regarding the player's tryout and the position they are trying out for.",
            "question": "What are the names of all students who successfully tried out for the position of striker?"
        },
        {
            "sample_id": 5028,
            "gold_sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
            "gold_complexity": 8,
            "vt": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'",
            "ba": "The virtual table identifies the states of colleges where players are trying out for the position of 'mid' but not for the position of 'goalie'. It uses a join between the 'college' and 'tryout' tables based on the college name, filtering the results based on the player's position in two separate queries and excluding the states from the second query from the first.",
            "question": "What are the names of all the states with college students playing in the mid position but no goalies?"
        },
        {
            "sample_id": 5017,
            "gold_sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
            "gold_complexity": 12,
            "vt": "SELECT cName FROM College WHERE enr < 13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr > 15000 AND state = \"LA\"",
            "ba": "The virtual table lists the names of colleges from the 'college' table that meet specific enrollment criteria based on their state. It includes colleges in Arizona with an enrollment number less than 13000 and colleges in Louisiana with an enrollment number greater than 15000.",
            "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment."
        },
        {
            "sample_id": 4950,
            "gold_sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
            "gold_complexity": 8,
            "vt": "SELECT player.pname, player.hs FROM player WHERE player.hs < [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and high schools of players from the 'player' table who attended high schools with an enrollment number less than a specified value. The placeholder in the WHERE clause represents the maximum enrollment number of students at the high school.",
            "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?"
        },
        {
            "sample_id": 5008,
            "gold_sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
            "gold_complexity": 11,
            "vt": "SELECT MAX(player.hs), tryout.ppos FROM player JOIN tryout AS T2 ON T1.pID = T2.pID WHERE player.hs > [placeholder-type:numeric] GROUP BY tryout.ppos",
            "ba": "The virtual table retrieves the highest high school attended by players along with the positions they are trying out for. It filters players based on a minimum high school value and groups the results by position.",
            "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?"
        },
        {
            "sample_id": 5033,
            "gold_sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT college.cname FROM college WHERE college.enr > (SELECT MIN(college.enr) FROM college WHERE state = 'FL')",
            "ba": "The virtual table lists the distinct names of colleges from the 'college' table that have an enrollment number greater than the minimum enrollment number of colleges located in Florida. The placeholder in the subquery represents the state name.",
            "question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state."
        },
        {
            "sample_id": 5007,
            "gold_sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
            "gold_complexity": 11,
            "vt": "SELECT MAX(player.hs), tryout.ppos FROM player JOIN tryout AS T2 ON T1.pID = T2.pID WHERE player.hs > [placeholder-type:numeric] GROUP BY tryout.ppos",
            "ba": "The virtual table retrieves the highest high school attended by players along with the positions they are trying out for. It filters players based on a minimum high school identifier and groups the results by position.",
            "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?"
        },
        {
            "sample_id": 4978,
            "gold_sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT tryout.ppos FROM tryout GROUP BY tryout.ppos ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the positions that players are trying out for from the 'tryout' table. It groups the results by position and orders them based on the count of players trying out for each position, limiting the results to a specified number.",
            "question": "What was the most popular position at tryouts?"
        },
        {
            "sample_id": 5029,
            "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM (SELECT college.state FROM college JOIN tryout AS T2 ON T1.cName = T2.cName WHERE tryout.ppos = '[placeholder-type:string]' EXCEPT SELECT college.state FROM college JOIN tryout AS T2 ON T1.cName = T2.cName WHERE tryout.ppos = '[placeholder-type:string]')",
            "ba": "The virtual table counts the number of unique states where colleges are located, based on the positions players are trying out for. It uses a subquery to find states for a specific position and excludes those states for another position, allowing for a comparison of tryout locations.",
            "question": "How many states that have some college students playing in the mid position but not in the goalie position."
        },
        {
            "sample_id": 5039,
            "gold_sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(DISTINCT state) FROM college WHERE college.enr > (SELECT AVG(college.enr) FROM college)",
            "ba": "The virtual table counts the distinct states from the 'college' table where the enrollment number of students is greater than the average enrollment number across all colleges. The placeholder in the query represents the condition for filtering colleges based on their enrollment numbers.",
            "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?"
        },
        {
            "sample_id": 4940,
            "gold_sql": "SELECT avg(enr) FROM College",
            "gold_complexity": 4,
            "vt": "SELECT AVG(college.enr) FROM college",
            "ba": "The virtual table calculates the average enrollment number of students across all colleges listed in the 'college' table.",
            "question": "How many students, on average, does each college have enrolled?"
        },
        {
            "sample_id": 4986,
            "gold_sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
            "gold_complexity": 10,
            "vt": "SELECT college.cname, college.state, MIN(college.enr) FROM college GROUP BY college.state",
            "ba": "The virtual table summarizes the names of colleges and their respective states, along with the minimum enrollment number of students for each state. The data is grouped by state to provide a clear overview of the colleges with the least enrollment in each state.",
            "question": "What is the name of the school with smallest enrollment size per state?"
        },
        {
            "sample_id": 4948,
            "gold_sql": "SELECT avg(HS) FROM Player",
            "gold_complexity": 4,
            "vt": "SELECT AVG(player.hs) FROM player",
            "ba": "The virtual table calculates the average high school attended by players from the 'player' table. The placeholder represents the high school name.",
            "question": "How many hours do the players train on average?"
        },
        {
            "sample_id": 5040,
            "gold_sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(DISTINCT state) FROM college WHERE college.enr > (SELECT AVG(college.enr) FROM college)",
            "ba": "The virtual table counts the distinct states from the 'college' table where the enrollment number of students exceeds the average enrollment number across all colleges. This helps in identifying how many different states have colleges with above-average student enrollments.",
            "question": "How many states have a college with more students than average?"
        },
        {
            "sample_id": 4987,
            "gold_sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT college.state FROM college JOIN tryout AS T2 ON T1.cName = T2.cName",
            "ba": "The virtual table retrieves a distinct list of states from the 'college' table where tryouts are held, by joining it with the 'tryout' table based on the college name.",
            "question": "Find the states where have some college students in tryout."
        },
        {
            "sample_id": 4941,
            "gold_sql": "SELECT count(*) FROM College",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM college",
            "ba": "The virtual table provides the total number of colleges listed in the 'college' table.",
            "question": "How many colleges in total?"
        }
    ],
    "bike_1": [
        {
            "sample_id": 124,
            "gold_sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
            "gold_complexity": 10,
            "vt": "SELECT weather.zip_code, AVG(weather.mean_temperature_f) FROM weather WHERE weather.date LIKE None.\"8/%\" GROUP BY weather.zip_code",
            "ba": "The virtual table provides the average mean temperature in Fahrenheit for different zip codes based on weather reports. The placeholder in the WHERE clause is used to filter the records for a specific date format, indicating that the query is interested in weather data from a particular month.",
            "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?"
        },
        {
            "sample_id": 118,
            "gold_sql": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
            "gold_complexity": 8,
            "vt": "SELECT AVG(station.lat), AVG(station.long) FROM station WHERE station.city = None.\"san jose\"",
            "ba": "The virtual table calculates the average latitude and longitude of bike stations located in a specific city. The placeholder in the WHERE clause represents the name of the city for which the average coordinates are being calculated.",
            "question": "What is the average latitude and longitude in San Jose?"
        },
        {
            "sample_id": 206,
            "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
            "gold_complexity": 12,
            "vt": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100",
            "ba": "The virtual table identifies zip codes that meet specific criteria based on weather and trip data. It selects zip codes from the 'weather' table where the average mean humidity is less than 70, and intersects this with zip codes from the 'trip' table that have at least 100 trips recorded.",
            "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?"
        },
        {
            "sample_id": 188,
            "gold_sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT trip.id, trip.duration FROM trip ORDER BY trip.duration LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of trip identifiers and their corresponding durations from the 'trip' table, ordered by the duration of the trips. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "What are the ids of the trips that lasted the longest and how long did they last?"
        },
        {
            "sample_id": 176,
            "gold_sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
            "gold_complexity": 11,
            "vt": "SELECT weather.date, weather.mean_temperature_f, weather.mean_humidity FROM weather ORDER BY weather.max_gust_speed_mph LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of weather conditions, specifically the date, mean temperature in Fahrenheit, and mean humidity for each weather report. The results are ordered by the maximum gust speed recorded in miles per hour, and the number of records returned is limited by a placeholder for numeric values.",
            "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?"
        },
        {
            "sample_id": 193,
            "gold_sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT trip.start_station_name FROM trip WHERE trip.duration < [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique names of bike stations from the 'trip' table where the duration of trips is less than a specified value. The placeholder in the WHERE clause represents the maximum duration of the trips to be considered.",
            "question": "List all the distinct stations from which a trip of duration below 100 started."
        },
        {
            "sample_id": 210,
            "gold_sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM station, trip AS T2, station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE station.city = None.\"mountain view\" AND station.city = None.\"palo alto\"",
            "ba": "The virtual table counts the number of trips that started from stations located in specific cities, namely 'mountain view' and 'palo alto'. It involves joining the 'station' table with the 'trip' table to correlate the start and end stations of each trip, while filtering the results based on the city names.",
            "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?"
        },
        {
            "sample_id": 126,
            "gold_sql": "SELECT count(DISTINCT bike_id) FROM trip",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT bike_id) FROM trip",
            "ba": "The virtual table counts the distinct number of bikes used in trips recorded in the 'trip' table.",
            "question": "How many different bike ids are there?"
        },
        {
            "sample_id": 157,
            "gold_sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
            "gold_complexity": 10,
            "vt": "SELECT weather.zip_code, COUNT(*) FROM weather WHERE weather.max_wind_speed_mph >= [placeholder-type:numeric] GROUP BY weather.zip_code",
            "ba": "The virtual table summarizes the number of weather reports for each zip code where the maximum wind speed recorded is above a specified threshold. The placeholder in the WHERE clause represents the minimum wind speed that must be met for the reports to be counted.",
            "question": "For each zip code, return how many times max wind speed reached 25?"
        },
        {
            "sample_id": 146,
            "gold_sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
            "gold_complexity": 11,
            "vt": "SELECT weather.cloud_cover FROM weather WHERE weather.zip_code = [placeholder-type:numeric] GROUP BY weather.cloud_cover ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the cloud cover data from the 'weather' table for a specific zip code. It groups the results by cloud cover values and orders them based on the count of occurrences, limiting the output to a specified number of results.",
            "question": "What are the 3 most common cloud covers in the zip code of 94107?"
        },
        {
            "sample_id": 179,
            "gold_sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
            "gold_complexity": 10,
            "vt": "SELECT trip.start_station_id, trip.start_station_name FROM trip GROUP BY trip.start_station_name HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the start station IDs and names from the 'trip' table, grouped by the station name. It filters the results to include only those stations that have a count of trips greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of trips required for a station to be included in the results.",
            "question": "Find the ids and names of stations from which at least 200 trips started."
        },
        {
            "sample_id": 129,
            "gold_sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM station WHERE station.city = None.\"mountain view\"",
            "ba": "The virtual table counts the number of bike stations located in a specific city from the 'station' table. The placeholder in the WHERE clause represents the name of the city being queried.",
            "question": "How many stations does Mountain View city has?"
        },
        {
            "sample_id": 199,
            "gold_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
            "gold_complexity": 6,
            "vt": "SELECT weather.date FROM weather WHERE weather.mean_sea_level_pressure_inches BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates of weather reports from the 'weather' table where the mean sea level pressure falls within a specified range. The placeholders represent the lower and upper bounds of the pressure values.",
            "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?"
        },
        {
            "sample_id": 202,
            "gold_sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT weather.date, weather.max_temperature_f - weather.min_temperature_f FROM weather ORDER BY weather.max_temperature_f - weather.min_temperature_f LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the date and the temperature range (difference between maximum and minimum temperatures) from the 'weather' table. The placeholder in the LIMIT clause allows users to specify the number of records they want to retrieve.",
            "question": "What are the days that had the smallest temperature range, and what was that range?"
        },
        {
            "sample_id": 177,
            "gold_sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
            "gold_complexity": 10,
            "vt": "SELECT station.city, COUNT(*) FROM station GROUP BY station.city HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of bike stations located in each city from the 'station' table. It groups the results by city and filters to only include cities that have a specified minimum number of stations, represented by a placeholder for numeric values.",
            "question": "List the name and the number of stations for all the cities that have at least 15 stations."
        },
        {
            "sample_id": 198,
            "gold_sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
            "gold_complexity": 11,
            "vt": "SELECT trip.id FROM trip WHERE trip.duration >= (SELECT AVG(trip.duration) FROM trip WHERE zip_code = 94103)",
            "ba": "The virtual table retrieves the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips starting from a specific zip code. The placeholder in the subquery represents the zip code for which the average trip duration is calculated.",
            "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?"
        },
        {
            "sample_id": 127,
            "gold_sql": "SELECT count(DISTINCT city) FROM station",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT city) FROM station",
            "ba": "The virtual table counts the number of distinct cities from the 'station' table where bike stations are located. The result will provide insight into how many unique cities have bike stations.",
            "question": "What is the number of distinct cities the stations are located at?"
        },
        {
            "sample_id": 189,
            "gold_sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
            "gold_complexity": 11,
            "vt": "SELECT station.name, station.long, AVG(trip.duration) FROM station JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY trip.start_station_id",
            "ba": "The virtual table provides the names and longitude coordinates of bike stations along with the average duration of trips that started at each station. It combines data from the 'station' and 'trip' tables, grouping the results by the station identifier to calculate the average trip duration for each starting station.",
            "question": "For each station, return its longitude and the average duration of trips that started from the station."
        },
        {
            "sample_id": 154,
            "gold_sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
            "gold_complexity": 8,
            "vt": "SELECT weather.date, weather.zip_code FROM weather WHERE weather.max_temperature_f >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the dates and zip codes of weather reports from the 'weather' table where the maximum temperature is above a specified threshold. The placeholder in the WHERE clause represents the minimum temperature value to filter the results.",
            "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?"
        },
        {
            "sample_id": 148,
            "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT weather.zip_code FROM weather GROUP BY weather.zip_code ORDER BY AVG(weather.mean_sea_level_pressure_inches) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique zip codes from the 'weather' table, grouping them to ensure each zip code appears only once. It orders the results based on the average mean sea level pressure for each zip code, allowing for an analysis of weather patterns across different regions. The query limits the number of results returned based on a specified numeric placeholder, which can be adjusted by the user to control how many zip codes are displayed.",
            "question": "What is the zip code that has the lowest average mean sea level pressure?"
        },
        {
            "sample_id": 182,
            "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
            "gold_complexity": 8,
            "vt": "SELECT weather.zip_code FROM weather GROUP BY weather.zip_code HAVING AVG(weather.mean_visibility_miles) < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the zip codes from the 'weather' table, grouping them to find those with an average mean visibility below a specified threshold. The placeholder in the HAVING clause represents the numeric value for the average mean visibility limit.",
            "question": "For each zip code, select all those that have an average mean visiblity below 10."
        },
        {
            "sample_id": 172,
            "gold_sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
            "gold_complexity": 12,
            "vt": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\"",
            "ba": "The virtual table lists the names of bike stations that have an average availability of more than 10 bikes, excluding those located in San Jose. It combines data from the 'station' and 'status' tables, grouping by station ID to calculate the average number of bikes available.",
            "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?"
        },
        {
            "sample_id": 205,
            "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
            "gold_complexity": 12,
            "vt": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100",
            "ba": "The virtual table identifies zip codes that meet specific weather and trip criteria. It selects zip codes from the 'weather' table where the average mean humidity is less than 70, and intersects this with zip codes from the 'trip' table that have at least 100 trips recorded.",
            "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place."
        },
        {
            "sample_id": 139,
            "gold_sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT station.lat, station.long, station.city FROM station JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY trip.duration LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the latitude and longitude coordinates along with the city name of bike stations from the 'station' table. It joins with the 'trip' table to filter the results based on trips that started at these stations, ordering the results by the duration of the trips. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "What is the latitude, longitude, city of the station from which the shortest trip started?"
        },
        {
            "sample_id": 134,
            "gold_sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT trip.start_station_name, trip.start_station_id FROM trip WHERE trip.start_date LIKE None.\"8/%\" GROUP BY trip.start_station_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of bike trip starting stations from the 'trip' table, filtering trips that started in a specific month. The results are grouped by the station name and ordered by the count of trips, allowing users to see the most popular starting stations for that month. The placeholder in the LIMIT clause represents the maximum number of results to return.",
            "question": "What are the start station's name and id for the one that had the most start trips in August?"
        },
        {
            "sample_id": 125,
            "gold_sql": "SELECT count(DISTINCT bike_id) FROM trip",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT bike_id) FROM trip",
            "ba": "The virtual table counts the distinct number of bikes used in trips recorded in the 'trip' table.",
            "question": "From the trip record, find the number of unique bikes."
        },
        {
            "sample_id": 158,
            "gold_sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
            "gold_complexity": 10,
            "vt": "SELECT weather.zip_code, COUNT(*) FROM weather WHERE weather.max_wind_speed_mph >= [placeholder-type:numeric] GROUP BY weather.zip_code",
            "ba": "The virtual table summarizes the number of weather reports for each zip code where the maximum wind speed exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum wind speed in miles per hour that is being queried.",
            "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?"
        },
        {
            "sample_id": 195,
            "gold_sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70",
            "ba": "The virtual table identifies unique zip codes from the 'weather' table that do not have any recorded maximum dew point above a certain threshold. This allows users to find areas where the weather conditions are likely to be more comfortable, specifically avoiding high humidity levels indicated by the dew point.",
            "question": "Find all the zip codes in which the max dew point have never reached 70."
        },
        {
            "sample_id": 204,
            "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT station.id, station.name FROM station JOIN status AS T2 ON T1.id = T2.station_id WHERE status.bikes_available > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique bike stations along with their identifiers from the 'station' table, filtered to show only those stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to access the availability of bikes at each station, using a placeholder for the minimum number of bikes available.",
            "question": "What are the different ids and names of the stations that have had more than 12 bikes available?"
        },
        {
            "sample_id": 169,
            "gold_sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
            "gold_complexity": 14,
            "vt": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7",
            "ba": "The virtual table identifies bike stations that are located at a latitude greater than a specified value, while excluding those stations that have a minimum number of bikes available below a certain threshold. This is achieved by selecting the unique identifiers of the stations from the 'station' table and removing those that are present in the 'status' table with insufficient bike availability.",
            "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?"
        },
        {
            "sample_id": 175,
            "gold_sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
            "gold_complexity": 11,
            "vt": "SELECT weather.date, weather.mean_temperature_f, weather.mean_humidity FROM weather ORDER BY weather.max_gust_speed_mph LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of weather conditions, specifically the date, mean temperature in Fahrenheit, and mean humidity percentage from the 'weather' table. The results are ordered by the maximum gust speed in miles per hour, and the number of records returned is limited by a placeholder for numeric values.",
            "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?"
        },
        {
            "sample_id": 178,
            "gold_sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
            "gold_complexity": 10,
            "vt": "SELECT station.city, COUNT(*) FROM station GROUP BY station.city HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of bike stations located in each city from the 'station' table. It groups the results by city and filters to include only those cities that have a specified minimum number of stations, represented by a placeholder for numeric values.",
            "question": "What is the name of every city that has at least 15 stations and how many stations does it have?"
        },
        {
            "sample_id": 132,
            "gold_sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT station.name FROM station JOIN status AS T2 ON T1.id = T2.station_id WHERE status.bikes_available = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of bike stations from the 'station' table that currently have a specific number of bikes available. The query joins the 'station' table with the 'status' table to filter the results based on the availability of bikes at each station. The placeholder in the WHERE clause represents the number of bikes available.",
            "question": "What are the different names for each station that has ever had 7 bikes available?"
        },
        {
            "sample_id": 200,
            "gold_sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
            "gold_complexity": 6,
            "vt": "SELECT weather.date FROM weather WHERE weather.mean_sea_level_pressure_inches BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates of weather reports from the 'weather' table where the mean sea level pressure falls within a specified range. The placeholders represent the lower and upper bounds of the pressure values.",
            "question": "What are the dates that have an average sea level pressure between 30.3 and 31?"
        },
        {
            "sample_id": 192,
            "gold_sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
            "gold_complexity": 11,
            "vt": "SELECT station.name, station.lat, MIN(trip.duration) FROM station JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY trip.end_station_id",
            "ba": "The virtual table describes the names and latitude coordinates of bike stations from the 'station' table, along with the minimum trip duration for trips that ended at each station. The query joins the 'station' table with the 'trip' table based on the station's identifier, grouping the results by the end station's ID to aggregate the minimum duration of trips.",
            "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?"
        },
        {
            "sample_id": 166,
            "gold_sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM trip JOIN station AS T2 ON T1.end_station_id = T2.id WHERE station.city <> None.\"san francisco\"",
            "ba": "The virtual table counts the number of trips that ended at stations located in cities other than San Francisco. It joins the 'trip' table with the 'station' table to access the city information for each station based on the end station ID.",
            "question": "How many trips did not end in San Francisco?"
        },
        {
            "sample_id": 116,
            "gold_sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT trip.start_station_name, trip.end_station_name FROM trip ORDER BY trip.id LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the start and end station names of bike trips from the 'trip' table, ordered by the unique trip identifier. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What is the station station and end station for the trips with the three smallest ids?"
        },
        {
            "sample_id": 163,
            "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT trip.id FROM trip JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY station.dock_count LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of trips from the 'trip' table, specifically focusing on trips that started at bike stations. It joins the 'trip' table with the 'station' table to access information about the starting stations, and it orders the results based on the number of docks available at each station. The query limits the number of results returned based on a specified numeric placeholder.",
            "question": "Which trip started from the station with the largest dock count? Give me the trip id."
        },
        {
            "sample_id": 165,
            "gold_sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM trip JOIN station AS T2 ON T1.end_station_id = T2.id WHERE station.city <> None.\"san francisco\"",
            "ba": "The virtual table counts the number of trips that ended at stations located outside of San Francisco. It joins the 'trip' table with the 'station' table to access the city information for each station based on the end station ID.",
            "question": "Count the number of trips that did not end in San Francisco city."
        },
        {
            "sample_id": 191,
            "gold_sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
            "gold_complexity": 11,
            "vt": "SELECT station.name, station.lat, MIN(trip.duration) FROM station JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY trip.end_station_id",
            "ba": "The virtual table describes the names and latitude coordinates of bike stations from the 'station' table, along with the minimum trip duration for trips that ended at each station. The query joins the 'station' table with the 'trip' table based on the station's identifier, grouping the results by the end station's ID to aggregate the minimum duration of trips.",
            "question": "For each station, find its latitude and the minimum duration of trips that ended at the station."
        },
        {
            "sample_id": 174,
            "gold_sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT station.name, station.lat, station.city FROM station ORDER BY station.lat LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names, latitude coordinates, and cities of bike stations from the 'station' table. The results are ordered by latitude, and a placeholder is used to limit the number of records returned.",
            "question": "What is the name, latitude, and city of the station that is located the furthest South?"
        },
        {
            "sample_id": 187,
            "gold_sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT trip.id, trip.duration FROM trip ORDER BY trip.duration LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of trip identifiers and their corresponding durations from the 'trip' table, ordered by the duration of the trips. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return.",
            "question": "What are the ids and durations of the trips with the top 3 durations?"
        },
        {
            "sample_id": 190,
            "gold_sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
            "gold_complexity": 11,
            "vt": "SELECT station.name, station.long, AVG(trip.duration) FROM station JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY trip.start_station_id",
            "ba": "The virtual table provides the names and longitude coordinates of bike stations along with the average duration of trips that started at each station. It combines data from the 'station' and 'trip' tables, grouping the results by the station identifier to calculate the average trip duration for each starting station.",
            "question": "For each start station id, what is its name, longitude and average duration of trips started there?"
        },
        {
            "sample_id": 203,
            "gold_sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT station.id, station.name FROM station JOIN status AS T2 ON T1.id = T2.station_id WHERE status.bikes_available > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique bike stations along with their identifiers from the 'station' table, filtered to show only those stations that currently have a certain number of bikes available. The query joins the 'station' table with the 'status' table to access the availability of bikes at each station, using a placeholder for the minimum number of bikes available.",
            "question": "What are the id and name of the stations that have ever had more than 12 bikes available?"
        },
        {
            "sample_id": 147,
            "gold_sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT weather.zip_code FROM weather GROUP BY weather.zip_code ORDER BY AVG(weather.mean_sea_level_pressure_inches) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique zip codes from the 'weather' table, grouping them to ensure each zip code appears only once. It orders the results based on the average mean sea level pressure for each zip code, allowing users to identify which zip codes have the highest average pressure. The query limits the number of results returned based on a specified numeric placeholder.",
            "question": "What is the zip code in which the average mean sea level pressure is the lowest?"
        },
        {
            "sample_id": 133,
            "gold_sql": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT trip.start_station_name, trip.start_station_id FROM trip WHERE trip.start_date LIKE None.\"8/%\" GROUP BY trip.start_station_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of bike trip starting stations from the 'trip' table, filtering trips that started in a specific month (August) and grouping them by station name. The results are ordered by the number of trips starting from each station, with a limit on the number of stations returned.",
            "question": "Which start station had the most trips starting from August? Give me the name and id of the station."
        },
        {
            "sample_id": 164,
            "gold_sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT trip.id FROM trip JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY station.dock_count LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of trips from the 'trip' table, specifically focusing on trips that started at bike stations. It joins the 'trip' table with the 'station' table to access information about the starting stations, and it orders the results based on the number of docks available at each station. The query limits the results to a specified number of trips using a placeholder for numeric values.",
            "question": "What is the id of the trip that started from the station with the highest dock count?"
        },
        {
            "sample_id": 119,
            "gold_sql": "SELECT id FROM trip ORDER BY duration LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT trip.id FROM trip ORDER BY trip.duration LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers of trips from the 'trip' table, ordered by the duration of each trip. The placeholder in the LIMIT clause allows for specifying the maximum number of trip IDs to return.",
            "question": "What is the id of the trip that has the shortest duration?"
        },
        {
            "sample_id": 138,
            "gold_sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM weather WHERE weather.mean_humidity > [placeholder-type:numeric] AND weather.mean_visibility_miles > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of weather reports from the 'weather' table where the mean humidity exceeds a specified threshold and the mean visibility in miles is also above a certain level. The placeholders represent the numeric values for mean humidity and mean visibility that the user can specify.",
            "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?"
        },
        {
            "sample_id": 128,
            "gold_sql": "SELECT count(DISTINCT city) FROM station",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT city) FROM station",
            "ba": "The virtual table counts the distinct cities from the 'station' table where bike stations are located. The placeholder in the COUNT function represents the unique city names.",
            "question": "How many different cities have these stations?"
        },
        {
            "sample_id": 207,
            "gold_sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
            "gold_complexity": 14,
            "vt": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100",
            "ba": "The virtual table lists the names of bike stations located in a specific city, excluding those stations that have been used as end stations for more than a specified number of trips.",
            "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?"
        },
        {
            "sample_id": 197,
            "gold_sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
            "gold_complexity": 11,
            "vt": "SELECT trip.id FROM trip WHERE trip.duration >= (SELECT AVG(trip.duration) FROM trip WHERE zip_code = 94103)",
            "ba": "The virtual table lists the unique identifiers of trips from the 'trip' table that have a duration greater than or equal to the average duration of trips starting from a specific zip code. The placeholder in the subquery represents the zip code for which the average trip duration is calculated.",
            "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103."
        },
        {
            "sample_id": 162,
            "gold_sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
            "gold_complexity": 7,
            "vt": "SELECT trip.id, station.installation_date FROM trip JOIN station AS T2 ON T1.end_station_id = T2.id",
            "ba": "The virtual table describes the unique identifiers of trips along with the installation dates of the bike stations where these trips ended. It combines data from the 'trip' table and the 'station' table based on the relationship between the end station ID in the trip and the station ID.",
            "question": "What is the installation date for each ending station on all the trips?"
        },
        {
            "sample_id": 168,
            "gold_sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
            "gold_complexity": 9,
            "vt": "SELECT weather.date FROM weather WHERE weather.zip_code = [placeholder-type:numeric] AND weather.events <> None.\"fog\" AND weather.events <> None.\"rain\"",
            "ba": "The virtual table retrieves the dates of weather reports from the 'weather' table for a specific zip code, filtering out any reports that include fog or rain events.",
            "question": "On which day has it neither been foggy nor rained in the zip code of 94107?"
        },
        {
            "sample_id": 114,
            "gold_sql": "SELECT city ,  max(lat) FROM station GROUP BY city",
            "gold_complexity": 8,
            "vt": "SELECT station.city, MAX(station.lat) FROM station GROUP BY station.city",
            "ba": "The virtual table summarizes the maximum latitude of bike stations grouped by city from the 'station' table. The placeholder in the SELECT clause represents the city name, while the MAX function is used to find the highest latitude for each city.",
            "question": "For each city, what is the highest latitude for its stations?"
        },
        {
            "sample_id": 161,
            "gold_sql": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
            "gold_complexity": 7,
            "vt": "SELECT trip.id, station.installation_date FROM trip JOIN station AS T2 ON T1.end_station_id = T2.id",
            "ba": "The virtual table describes the unique identifiers of trips along with the installation dates of the bike stations where the trips ended. It combines data from the 'trip' table and the 'station' table, linking them through the end station's identifier.",
            "question": "For each trip, return its ending station's installation date."
        },
        {
            "sample_id": 153,
            "gold_sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
            "gold_complexity": 8,
            "vt": "SELECT weather.date, weather.zip_code FROM weather WHERE weather.max_temperature_f >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the dates and zip codes of weather reports from the 'weather' table where the maximum temperature recorded is above a specified threshold. The placeholder in the WHERE clause represents the minimum temperature value to filter the results.",
            "question": "When and in what zip code did max temperature reach 80?"
        },
        {
            "sample_id": 184,
            "gold_sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
            "gold_complexity": 8,
            "vt": "SELECT station.city FROM station GROUP BY station.city ORDER BY MAX(station.lat)",
            "ba": "The virtual table lists the cities where bike stations are located, grouping the results by city and ordering them by the maximum latitude of the stations in each city.",
            "question": "For each city, list their names in decreasing order by their highest station latitude."
        },
        {
            "sample_id": 110,
            "gold_sql": "SELECT date FROM weather WHERE max_temperature_f  >  85",
            "gold_complexity": 6,
            "vt": "SELECT weather.date FROM weather WHERE weather.max_temperature_f > [placeholder-type:numeric]",
            "ba": "The virtual table describes the dates of weather reports from the 'weather' table where the maximum temperature exceeds a specified threshold. The placeholder in the WHERE clause represents the maximum temperature value to filter the results.",
            "question": "What are the dates with a maximum temperature higher than 85?"
        },
        {
            "sample_id": 209,
            "gold_sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM station, trip AS T2, station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE station.city = None.\"mountain view\" AND station.city = None.\"palo alto\"",
            "ba": "The virtual table counts the number of trips that started at bike stations located in specific cities, namely 'mountain view' and 'palo alto'. It involves joining the 'station' table with the 'trip' table to filter trips based on their starting and ending stations, while also ensuring that the starting stations are in the specified cities.",
            "question": "How many trips started from Mountain View city and ended at Palo Alto city?"
        },
        {
            "sample_id": 130,
            "gold_sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM station WHERE station.city = None.\"mountain view\"",
            "ba": "The virtual table counts the number of bike stations located in a specific city from the 'station' table. The placeholder in the WHERE clause represents the name of the city being queried.",
            "question": "How many stations are in Mountain View?"
        },
        {
            "sample_id": 183,
            "gold_sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
            "gold_complexity": 8,
            "vt": "SELECT station.city FROM station GROUP BY station.city ORDER BY MAX(station.lat)",
            "ba": "The virtual table lists the cities where bike stations are located, grouping the results by city and ordering them by the maximum latitude of the stations in each city.",
            "question": "List all the cities in a decreasing order of each city's stations' highest latitude."
        }
    ],
    "e_government": [
        {
            "sample_id": 6318,
            "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT individuals.individual_last_name FROM organizations JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE organizations.uk_vat_number = (SELECT MAX(organizations.uk_vat_number) FROM organizations) ORDER BY organization_contact_individuals.date_contact_to LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the last names of individuals who have contacted the organization with the highest VAT registration number. It joins the 'organizations' table with the 'organization_contact_individuals' table to link organizations with their respective contacts, and then further joins with the 'individuals' table to get the last names of those individuals. The results are ordered by the contact end date and limited to a specified number of entries.",
            "question": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?"
        },
        {
            "sample_id": 6332,
            "gold_sql": "SELECT count(DISTINCT payment_method_code) FROM parties",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT payment_method_code) FROM parties",
            "ba": "The virtual table counts the distinct payment method codes used by parties in the 'parties' table. This provides insight into the variety of payment methods available.",
            "question": "Count the number of different payment method codes used by parties."
        },
        {
            "sample_id": 6327,
            "gold_sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
            "gold_complexity": 8,
            "vt": "SELECT parties.payment_method_code FROM parties GROUP BY parties.payment_method_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the unique payment methods used by parties, showing only those payment methods that have been utilized by more than a specified number of parties. The placeholder in the HAVING clause represents the minimum count of parties that must have used each payment method for it to be included in the results.",
            "question": "Find the payment method code used by more than 3 parties."
        },
        {
            "sample_id": 6322,
            "gold_sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
            "gold_complexity": 6,
            "vt": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id",
            "ba": "The virtual table lists the names of services from the 'services' table that are not booked by any party in the 'party_services' table. It uses an EXCEPT clause to exclude those services that have been associated with any party bookings.",
            "question": "What are the names of the services that have never been used?"
        },
        {
            "sample_id": 6326,
            "gold_sql": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM addresses WHERE addresses.state_province_county = None.\"colorado\"",
            "ba": "The virtual table counts the number of addresses from the 'addresses' table that are located in a specific state, province, or county. The placeholder in the WHERE clause represents the name of the state, province, or county being queried.",
            "question": "Count the number of cities in the state of Colorado."
        },
        {
            "sample_id": 6329,
            "gold_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
            "gold_complexity": 6,
            "vt": "SELECT organizations.organization_name FROM organizations WHERE organizations.organization_name LIKE None.\"%party%\"",
            "ba": "The virtual table lists the names of organizations from the 'organizations' table that contain the word 'party' in their name. The placeholder in the WHERE clause allows for flexible searching of organization names based on a specified pattern.",
            "question": "Find the name of organizations whose names contain \"Party\"."
        },
        {
            "sample_id": 6339,
            "gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT individuals.individual_last_name FROM individuals JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id",
            "ba": "The virtual table lists the distinct last names of individuals who are associated with organizations through contact records. It retrieves this information by joining the 'individuals' table with the 'organization_contact_individuals' table based on the unique identifier for individuals.",
            "question": "Find the last name of the individuals that have been contact individuals of an organization."
        },
        {
            "sample_id": 6340,
            "gold_sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT individuals.individual_last_name FROM individuals JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id",
            "ba": "The virtual table lists the distinct last names of individuals who are associated with organizations as contact persons. It retrieves this information by joining the 'individuals' table with the 'organization_contact_individuals' table based on the unique identifier for individuals.",
            "question": "What are the last names of individuals who have been contact individuals for an organization?"
        },
        {
            "sample_id": 6319,
            "gold_sql": "SELECT count(*) FROM services",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM services",
            "ba": "The virtual table provides a count of all services available in the 'services' table. This count helps in understanding the total number of distinct services offered.",
            "question": "How many services are there?"
        },
        {
            "sample_id": 6335,
            "gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
            "gold_complexity": 6,
            "vt": "SELECT addresses.state_province_county FROM addresses WHERE addresses.line_1_number_building LIKE None.\"%6862 kaitlyn knolls%\"",
            "ba": "The virtual table retrieves the state, province, or county information from the 'addresses' table for addresses that match a specific building number and name pattern. The placeholder in the LIKE clause allows for flexible searching of address lines that contain a certain string.",
            "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?"
        },
        {
            "sample_id": 6331,
            "gold_sql": "SELECT count(DISTINCT payment_method_code) FROM parties",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT payment_method_code) FROM parties",
            "ba": "The virtual table counts the distinct payment method codes used by parties in the 'parties' table. This provides insight into the variety of payment methods available or utilized by different parties.",
            "question": "How many distinct payment methods are used by parties?"
        },
        {
            "sample_id": 6336,
            "gold_sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
            "gold_complexity": 6,
            "vt": "SELECT addresses.state_province_county FROM addresses WHERE addresses.line_1_number_building LIKE None.\"%6862 kaitlyn knolls%\"",
            "ba": "The virtual table retrieves the state, province, or county from the 'addresses' table for addresses that include a specific building number and name in the primary address line.",
            "question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\"."
        },
        {
            "sample_id": 6311,
            "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
            "gold_complexity": 6,
            "vt": "SELECT organizations.organization_name FROM organizations ORDER BY organizations.date_formed",
            "ba": "The virtual table lists the names of organizations from the 'organizations' table, ordered by the date they were formed. This allows users to see the organizations in chronological order of their establishment.",
            "question": "List all the name of organizations in order of the date formed."
        },
        {
            "sample_id": 6310,
            "gold_sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT parties.party_email FROM parties JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE party_forms.form_id = (SELECT party_forms.form_id FROM party_forms GROUP BY form_id ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the email addresses of parties from the 'parties' table who have completed the most common form, as determined by the highest count of submissions in the 'party_forms' table.",
            "question": "What are the party emails associated with parties that used the party form that is the most common?"
        },
        {
            "sample_id": 6301,
            "gold_sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
            "gold_complexity": 10,
            "vt": "SELECT individuals.individual_first_name, individuals.individual_middle_name, individuals.individual_last_name FROM individuals ORDER BY individuals.individual_last_name",
            "ba": "The virtual table describes the first, middle, and last names of individuals from the 'individuals' table, ordered by their last names.",
            "question": "List every individual's first name, middle name and last name in alphabetical order by last name."
        },
        {
            "sample_id": 6312,
            "gold_sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
            "gold_complexity": 6,
            "vt": "SELECT organizations.organization_name FROM organizations ORDER BY organizations.date_formed",
            "ba": "The virtual table lists the names of organizations from the 'organizations' table, ordered by the date they were formed. This allows users to see the organizations in chronological order of their establishment.",
            "question": "What are the names of organizations, ordered by the date they were formed, ascending?"
        },
        {
            "sample_id": 6305,
            "gold_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT forms.form_name FROM forms JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY party_forms.form_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of forms from the 'forms' table that are associated with parties through the 'party_forms' table. It groups the results by form ID and orders them based on the count of associations, limiting the output to a specified number of results.",
            "question": "Find the name of the most popular party form."
        },
        {
            "sample_id": 6317,
            "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT individuals.individual_last_name FROM organizations JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE organizations.uk_vat_number = (SELECT MAX(organizations.uk_vat_number) FROM organizations) ORDER BY organization_contact_individuals.date_contact_to LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the last names of individuals who have contacted organizations, specifically focusing on the organization with the highest VAT registration number. The query joins the 'organizations' table with the 'organization_contact_individuals' table to link individuals to their respective organizations, and it filters the results based on the maximum VAT number found in the 'organizations' table. The results are ordered by the contact end date and limited to a specified number of entries.",
            "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number."
        },
        {
            "sample_id": 6330,
            "gold_sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
            "gold_complexity": 6,
            "vt": "SELECT organizations.organization_name FROM organizations WHERE organizations.organization_name LIKE None.\"%party%\"",
            "ba": "The virtual table lists the names of organizations from the 'organizations' table that contain the word 'party' in their name. The placeholder in the WHERE clause allows for flexible searching of organization names based on a specified pattern.",
            "question": "What are the names of organizations that contain the word \"Party\"?"
        },
        {
            "sample_id": 6302,
            "gold_sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
            "gold_complexity": 10,
            "vt": "SELECT individuals.individual_first_name, individuals.individual_middle_name, individuals.individual_last_name FROM individuals ORDER BY individuals.individual_last_name",
            "ba": "The virtual table describes the first, middle, and last names of individuals from the 'individuals' table, sorted by their last names.",
            "question": "What are the first, middle, and last names of all individuals, ordered by last name?"
        },
        {
            "sample_id": 6306,
            "gold_sql": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT forms.form_name FROM forms JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY party_forms.form_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of forms from the 'forms' table that are associated with parties through the 'party_forms' table. It groups the results by form ID and orders them based on the count of associations, limiting the output to a specified number of results.",
            "question": "What is the name of the party form that is most common?"
        },
        {
            "sample_id": 6324,
            "gold_sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
            "gold_complexity": 7,
            "vt": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
            "ba": "The virtual table combines the town or city names and the state, province, or county names from the 'addresses' table into a single list. This allows users to see all unique locations associated with the addresses.",
            "question": "What are the names of all cities and states?"
        },
        {
            "sample_id": 6315,
            "gold_sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT individuals.individual_last_name FROM organizations JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE organizations.organization_name = None.\"labour party\" ORDER BY organization_contact_individuals.date_contact_to LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the last names of individuals who have contacted a specific organization, in this case, the 'labour party'. It joins the 'organizations' table with the 'organization_contact_individuals' table to link individuals to the organization, and then further joins with the 'individuals' table to get the last names. The results are ordered by the end date of the contact period and limited to a specified number of entries.",
            "question": "Find the last name of the latest contact individual of the organization \"Labour Party\"."
        },
        {
            "sample_id": 6307,
            "gold_sql": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
            "gold_complexity": 8,
            "vt": "SELECT parties.payment_method_code, parties.party_phone FROM parties WHERE parties.party_email = enrico09@example.\"enrico09@example.com\"",
            "ba": "The virtual table describes the payment method code and phone number of a party from the 'parties' table who has a specific email address. The placeholder in the WHERE clause represents the party's email address.",
            "question": "Find the payment method and phone of the party with email \"enrico09@example.com\"."
        }
    ],
    "election_representative": [
        {
            "sample_id": 1185,
            "gold_sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
            "gold_complexity": 7,
            "vt": "SELECT representative.lifespan FROM election JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY election.vote_percent",
            "ba": "The virtual table retrieves the lifespan of representatives from the 'representative' table, based on their association with elections in the 'election' table. The results are ordered by the percentage of votes received in those elections.",
            "question": "What are the lifespans of representatives in descending order of vote percent?"
        },
        {
            "sample_id": 1192,
            "gold_sql": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"",
            "gold_complexity": 8,
            "vt": "SELECT Party FROM representative WHERE State = \"New York\" INTERSECT SELECT Party FROM representative WHERE State = \"Pennsylvania\"",
            "ba": "The virtual table identifies the political parties that have representatives in both New York and Pennsylvania. It uses an INTERSECT operation to find common parties between the two states.",
            "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state."
        },
        {
            "sample_id": 1187,
            "gold_sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
            "gold_complexity": 8,
            "vt": "SELECT representative.party, COUNT(*) FROM representative GROUP BY representative.party",
            "ba": "The virtual table summarizes the count of representatives grouped by their political party affiliation from the 'representative' table.",
            "question": "What are the different parties of representative? Show the party name and the number of representatives in each party."
        },
        {
            "sample_id": 1181,
            "gold_sql": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
            "gold_complexity": 7,
            "vt": "SELECT representative.name, election.date FROM election JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID",
            "ba": "The virtual table describes the names of representatives along with the dates of the elections they were associated with. It combines data from the 'election' and 'representative' tables using a join on the representative identifier.",
            "question": "What are the names of representatives and the dates of elections they participated in."
        },
        {
            "sample_id": 1178,
            "gold_sql": "SELECT Name ,  Party FROM representative",
            "gold_complexity": 6,
            "vt": "SELECT representative.name, representative.party FROM representative",
            "ba": "The virtual table describes the names and political party affiliations of representatives from the 'representative' table.",
            "question": "What are the names and parties of representatives?"
        },
        {
            "sample_id": 1177,
            "gold_sql": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
            "gold_complexity": 5,
            "vt": "SELECT MIN(election.vote_percent), MAX(election.vote_percent) FROM election",
            "ba": "The virtual table provides the minimum and maximum vote percentages from the 'election' table, which records various details about elections, including the percentage of votes received.",
            "question": "What are the minimum and maximum vote percents of elections?"
        },
        {
            "sample_id": 1183,
            "gold_sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
            "gold_complexity": 7,
            "vt": "SELECT representative.name FROM election JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY election.votes",
            "ba": "The virtual table describes the names of representatives from the 'representative' table who are associated with elections in the 'election' table. The results are ordered by the total number of votes received in each election.",
            "question": "What are the names of representatives in descending order of votes?"
        },
        {
            "sample_id": 1189,
            "gold_sql": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3",
            "gold_complexity": 8,
            "vt": "SELECT representative.party FROM representative GROUP BY representative.party HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the political parties represented by representatives, specifically focusing on those parties that have a significant number of representatives. The placeholder in the HAVING clause indicates the minimum count of representatives required for a party to be included in the results.",
            "question": "What parties have at least three representatives?"
        },
        {
            "sample_id": 1191,
            "gold_sql": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
            "gold_complexity": 10,
            "vt": "SELECT representative.name FROM representative WHERE NOT election.representative_id IN (SELECT election.representative_id FROM election)",
            "ba": "The virtual table lists the names of representatives who have not participated in any election. It retrieves data from the 'representative' table and filters out those whose IDs are found in the 'election' table, indicating their participation.",
            "question": "List the names of representatives that have not participated in elections listed here."
        },
        {
            "sample_id": 1174,
            "gold_sql": "SELECT count(*) FROM election",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM election",
            "ba": "The virtual table provides the total count of elections recorded in the 'election' table.",
            "question": "How many elections are there?"
        },
        {
            "sample_id": 1186,
            "gold_sql": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
            "gold_complexity": 7,
            "vt": "SELECT AVG(election.votes) FROM election JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE representative.party = None.\"republican\"",
            "ba": "The virtual table calculates the average number of votes received in elections associated with representatives from a specific political party. It joins the 'election' table with the 'representative' table based on the representative's ID, and filters the results to include only those representatives affiliated with the specified party.",
            "question": "What is the average number of votes of representatives from party \"Republican\"?"
        },
        {
            "sample_id": 1190,
            "gold_sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT representative.state FROM representative GROUP BY representative.state HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of states represented by representatives who have a minimum number of representatives, as specified by the placeholder. It groups the representatives by their state and filters the results to include only those states that meet or exceed the specified count.",
            "question": "What states have at least two representatives?"
        }
    ],
    "county_public_safety": [
        {
            "sample_id": 2555,
            "gold_sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT county_public_safety.location FROM county_public_safety GROUP BY county_public_safety.location ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique geographical locations of counties from the 'county_public_safety' table. The results are grouped by location and ordered by the count of occurrences, allowing the user to limit the number of locations returned based on a specified numeric value.",
            "question": "What is the location shared by most counties?"
        },
        {
            "sample_id": 2543,
            "gold_sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
            "gold_complexity": 7,
            "vt": "SELECT city.name, county_public_safety.name FROM city JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
            "ba": "The virtual table describes the names of cities along with their corresponding county names by joining the 'city' and 'county_public_safety' tables based on the county identifier. The placeholder in the JOIN clause represents the relationship between cities and their respective counties.",
            "question": "Show names of cities and names of counties they are in."
        },
        {
            "sample_id": 2532,
            "gold_sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
            "gold_complexity": 5,
            "vt": "SELECT MIN(county_public_safety.crime_rate), MAX(county_public_safety.crime_rate) FROM county_public_safety",
            "ba": "The virtual table provides the minimum and maximum crime rates from the 'county_public_safety' table, which contains various statistics related to public safety in different counties.",
            "question": "Return the minimum and maximum crime rates across all counties."
        },
        {
            "sample_id": 2550,
            "gold_sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM city WHERE county_public_safety.county_id IN (SELECT county_public_safety.county_id FROM county_public_safety WHERE population > 20000)",
            "ba": "The virtual table counts the number of cities that belong to counties with a population greater than a specified threshold. It utilizes a subquery to first identify the county IDs from the 'county_public_safety' table where the population exceeds 20000, and then counts the cities associated with those counties.",
            "question": "How many cities are in counties that have populations of over 20000?"
        },
        {
            "sample_id": 2527,
            "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
            "gold_complexity": 6,
            "vt": "SELECT county_public_safety.name FROM county_public_safety ORDER BY county_public_safety.population",
            "ba": "The virtual table lists the names of counties from the 'county_public_safety' table, ordered by their population size. This allows users to see which counties have the largest populations at a glance.",
            "question": "List the names of counties in descending order of population."
        },
        {
            "sample_id": 2564,
            "gold_sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
            "gold_complexity": 6,
            "vt": "SELECT county_public_safety.case_burden FROM county_public_safety ORDER BY county_public_safety.population",
            "ba": "The virtual table retrieves the average number of cases handled by police from the 'county_public_safety' table, sorted by the total population of each county. This allows for an analysis of case burden in relation to the population size.",
            "question": "What are the case burdens of counties, ordered descending by population?"
        },
        {
            "sample_id": 2528,
            "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
            "gold_complexity": 6,
            "vt": "SELECT county_public_safety.name FROM county_public_safety ORDER BY county_public_safety.population",
            "ba": "The virtual table lists the names of counties from the 'county_public_safety' table, ordered by their population size. This allows users to see which counties have the largest populations at a glance.",
            "question": "What are the names of the counties of public safety, ordered by population descending?"
        },
        {
            "sample_id": 2533,
            "gold_sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
            "gold_complexity": 6,
            "vt": "SELECT county_public_safety.crime_rate FROM county_public_safety ORDER BY county_public_safety.police_officers",
            "ba": "The virtual table provides the crime rates from the 'county_public_safety' table, ordered by the number of police officers in each county. This allows for an analysis of how the presence of police officers may relate to crime rates across different counties.",
            "question": "Show the crime rates of counties in ascending order of number of police officers."
        },
        {
            "sample_id": 2535,
            "gold_sql": "SELECT Name FROM city ORDER BY Name ASC",
            "gold_complexity": 6,
            "vt": "SELECT city.name FROM city ORDER BY city.name",
            "ba": "The virtual table lists the names of cities from the 'city' table, sorted in alphabetical order.",
            "question": "What are the names of cities in ascending alphabetical order?"
        },
        {
            "sample_id": 2540,
            "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT county_public_safety.name FROM county_public_safety ORDER BY county_public_safety.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of counties from the 'county_public_safety' table, ordered by their population. The placeholder in the LIMIT clause allows the user to specify the maximum number of counties to retrieve.",
            "question": "What is the name of the county with the greatest population?"
        },
        {
            "sample_id": 2536,
            "gold_sql": "SELECT Name FROM city ORDER BY Name ASC",
            "gold_complexity": 6,
            "vt": "SELECT city.name FROM city ORDER BY city.name",
            "ba": "The virtual table lists the names of cities from the 'city' table, ordered alphabetically by city name.",
            "question": "Return the names of cities, ordered alphabetically."
        },
        {
            "sample_id": 2548,
            "gold_sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
            "gold_complexity": 13,
            "vt": "SELECT county_public_safety.name FROM city WHERE county_public_safety.county_id = (SELECT county_public_safety.county_id FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)",
            "ba": "The virtual table retrieves the name of the county from the 'county_public_safety' table that has the highest number of police officers. It does this by first selecting the county_id of the county with the maximum number of police officers and then using that county_id to get the corresponding county name.",
            "question": "What are the names of cities that are in the county with the most police officers?"
        },
        {
            "sample_id": 2549,
            "gold_sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM city WHERE county_public_safety.county_id IN (SELECT county_public_safety.county_id FROM county_public_safety WHERE population > 20000)",
            "ba": "The virtual table counts the number of cities that belong to counties with a population greater than a specified threshold. It utilizes a subquery to first identify the county IDs from the 'county_public_safety' table where the population exceeds 20000, and then counts the cities associated with those counties.",
            "question": "Show the number of cities in counties that have a population more than 20000."
        },
        {
            "sample_id": 2544,
            "gold_sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
            "gold_complexity": 7,
            "vt": "SELECT city.name, county_public_safety.name FROM city JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
            "ba": "The virtual table describes the names of cities along with their corresponding county names by joining the 'city' and 'county_public_safety' tables based on the county identifier. The placeholder in the JOIN clause represents the relationship between cities and their respective counties.",
            "question": "What are the names of cities, as well as the names of the counties they correspond to?"
        },
        {
            "sample_id": 2542,
            "gold_sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5",
            "gold_complexity": 7,
            "vt": "SELECT city.name FROM city ORDER BY city.white LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of cities from the 'city' table, ordered by the number of White residents in each city. The placeholder in the LIMIT clause allows for specifying the maximum number of city names to return.",
            "question": "What are the names of the five cities with the greatest proportion of white people?"
        },
        {
            "sample_id": 2537,
            "gold_sql": "SELECT Hispanic FROM city WHERE Black  >  10",
            "gold_complexity": 6,
            "vt": "SELECT city.hispanic FROM city WHERE city.black > [placeholder-type:numeric]",
            "ba": "The virtual table describes the number of Hispanic residents in cities where the number of Black residents exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum number of Black residents.",
            "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?"
        },
        {
            "sample_id": 2525,
            "gold_sql": "SELECT count(*) FROM county_public_safety",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM county_public_safety",
            "ba": "The virtual table provides a count of all entries in the 'county_public_safety' table, which contains various details about counties, including their population, police force, and crime statistics.",
            "question": "How many counties are there?"
        },
        {
            "sample_id": 2558,
            "gold_sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
            "gold_complexity": 10,
            "vt": "SELECT county_public_safety.name FROM county_public_safety WHERE NOT county_public_safety.county_id IN (SELECT county_public_safety.county_id FROM city)",
            "ba": "The virtual table lists the names of counties from the 'county_public_safety' table that do not have any associated cities. This is determined by checking which county IDs are not present in the 'city' table.",
            "question": "What are the names of counties that do not contain any cities?"
        },
        {
            "sample_id": 2554,
            "gold_sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "gold_complexity": 8,
            "vt": "SELECT county_public_safety.police_force, COUNT(*) FROM county_public_safety GROUP BY county_public_safety.police_force",
            "ba": "The virtual table summarizes the number of counties grouped by their police force descriptions from the 'county_public_safety' table. It provides insights into how many counties have similar police force characteristics.",
            "question": "How many counties correspond to each police force?"
        },
        {
            "sample_id": 2534,
            "gold_sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC",
            "gold_complexity": 6,
            "vt": "SELECT county_public_safety.crime_rate FROM county_public_safety ORDER BY county_public_safety.police_officers",
            "ba": "The virtual table provides the crime rate from the 'county_public_safety' table, ordered by the number of police officers in each county. This allows for an analysis of how the presence of police officers may relate to the crime rate across different counties.",
            "question": "What are the crime rates of counties sorted by number of offices ascending?"
        },
        {
            "sample_id": 2539,
            "gold_sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT county_public_safety.name FROM county_public_safety ORDER BY county_public_safety.population LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of counties from the 'county_public_safety' table, ordered by their population. The placeholder in the LIMIT clause allows the user to specify how many county names to retrieve.",
            "question": "List the name of the county with the largest population."
        },
        {
            "sample_id": 2530,
            "gold_sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT county_public_safety.police_force FROM county_public_safety WHERE county_public_safety.location <> None.\"east\"",
            "ba": "The virtual table provides a distinct list of police force descriptions from the 'county_public_safety' table, filtering out counties located in the eastern region. The placeholder in the WHERE clause indicates that the location should not be equal to a specific value representing the eastern area.",
            "question": "What are the different police forces of counties that are not located in the East?"
        },
        {
            "sample_id": 2557,
            "gold_sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
            "gold_complexity": 10,
            "vt": "SELECT county_public_safety.name FROM county_public_safety WHERE NOT county_public_safety.county_id IN (SELECT county_public_safety.county_id FROM city)",
            "ba": "The virtual table lists the names of counties from the 'county_public_safety' table that do not have any associated cities. This is determined by checking which county IDs are not present in the 'city' table.",
            "question": "List the names of counties that do not have any cities."
        },
        {
            "sample_id": 2545,
            "gold_sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
            "gold_complexity": 7,
            "vt": "SELECT city.white, county_public_safety.crime_rate FROM city JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
            "ba": "The virtual table describes the number of White residents in each city along with the corresponding crime rate from the county they belong to. The query joins the 'city' table with the 'county_public_safety' table based on the county identifier, allowing for the retrieval of demographic and safety data in a combined view.",
            "question": "Show white percentages of cities and the crime rates of counties they are in."
        }
    ],
    "news_report": [
        {
            "sample_id": 2805,
            "gold_sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
            "gold_complexity": 8,
            "vt": "SELECT journalist.name, event.date FROM news_report JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID",
            "ba": "The virtual table describes the names of journalists and the dates of events they covered. It combines data from the 'news_report', 'event', and 'journalist' tables, linking them through their respective identifiers.",
            "question": "Show the names of journalists and the dates of the events they reported."
        },
        {
            "sample_id": 2808,
            "gold_sql": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT journalist.name FROM news_report JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY journalist.name HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of journalists who have covered more than a specified number of events. It combines data from the 'news_report', 'event', and 'journalist' tables, filtering based on the count of reports written by each journalist.",
            "question": "Show the names of journalists that have reported more than one event."
        },
        {
            "sample_id": 2797,
            "gold_sql": "SELECT Nationality ,  Age FROM journalist",
            "gold_complexity": 6,
            "vt": "SELECT journalist.nationality, journalist.age FROM journalist",
            "ba": "The virtual table describes the nationalities and ages of journalists from the 'journalist' table.",
            "question": "What are the nationalities and ages of journalists?"
        },
        {
            "sample_id": 2796,
            "gold_sql": "SELECT Name FROM journalist ORDER BY Years_working ASC",
            "gold_complexity": 6,
            "vt": "SELECT journalist.name FROM journalist ORDER BY journalist.years_working",
            "ba": "The virtual table lists the names of journalists from the 'journalist' table, ordered by the number of years they have been working in the field. This allows for an understanding of the experience level of journalists based on their years of service.",
            "question": "List the names of journalists in ascending order of years working."
        },
        {
            "sample_id": 2810,
            "gold_sql": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
            "gold_complexity": 5,
            "vt": "SELECT AVG(event.event_attendance), MAX(event.event_attendance) FROM event",
            "ba": "The virtual table calculates the average and maximum attendance of events from the 'event' table. The placeholders represent the aggregate values of event attendance.",
            "question": "what are the average and maximum attendances of all events?"
        },
        {
            "sample_id": 2809,
            "gold_sql": "SELECT Name FROM journalist WHERE journalist_ID NOT IN (SELECT journalist_ID FROM news_report)",
            "gold_complexity": 10,
            "vt": "SELECT journalist.name FROM journalist WHERE NOT journalist.journalist_id IN (SELECT journalist.journalist_id FROM news_report)",
            "ba": "The virtual table lists the names of journalists from the 'journalist' table who have not written any news reports. The subquery identifies the journalist IDs that are present in the 'news_report' table, and the main query filters out these IDs to find those journalists who are not associated with any reports.",
            "question": "List the names of journalists who have not reported any event."
        },
        {
            "sample_id": 2812,
            "gold_sql": "SELECT venue ,  name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
            "gold_complexity": 9,
            "vt": "SELECT event.venue, event.name FROM event ORDER BY event.event_attendance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of venues and names of events from the 'event' table, ordered by the number of attendees. The placeholder in the LIMIT clause allows the user to specify how many results they want to retrieve.",
            "question": "List the event venues and names that have the top 2 most number of people attended."
        },
        {
            "sample_id": 2811,
            "gold_sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type",
            "gold_complexity": 11,
            "vt": "SELECT AVG(journalist.age), AVG(journalist.years_working), news_report.work_type FROM journalist JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY news_report.work_type",
            "ba": "The virtual table provides the average age and average years of experience of journalists, grouped by the type of work they have reported on. It combines data from the 'journalist' and 'news_report' tables, linking them through the journalist's identifier.",
            "question": "Find the average age and experience working length of journalists working on different role type."
        },
        {
            "sample_id": 2795,
            "gold_sql": "SELECT count(*) FROM journalist",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM journalist",
            "ba": "The virtual table provides the total count of journalists from the 'journalist' table.",
            "question": "How many journalists are there?"
        },
        {
            "sample_id": 2807,
            "gold_sql": "SELECT T3.Name ,  COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name",
            "gold_complexity": 10,
            "vt": "SELECT journalist.name, COUNT(*) FROM news_report JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY journalist.name",
            "ba": "The virtual table summarizes the names of journalists and the count of reports they have written, by joining the 'news_report' table with the 'event' and 'journalist' tables. It groups the results by the journalist's name to provide a count of their contributions.",
            "question": "Show the names of journalists and the number of events they reported."
        }
    ],
    "culture_company": [
        {
            "sample_id": 6971,
            "gold_sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
            "gold_complexity": 7,
            "vt": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990",
            "ba": "The virtual table identifies publishers of books discussed in the book club for the years 1989 and 1990. It uses an INTERSECT operation to find common publishers between the two years.",
            "question": "Show publishers with a book published in 1989 and a book in 1990."
        },
        {
            "sample_id": 6979,
            "gold_sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT movie.title, movie.director FROM movie WHERE movie.year <= [placeholder-type:numeric] ORDER BY movie.gross_worldwide LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the titles and directors of movies from the 'movie' table that were released on or before a specified year. The results are ordered by the worldwide gross revenue of the movies, and the number of results returned is limited to a specified count.",
            "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?"
        },
        {
            "sample_id": 6957,
            "gold_sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
            "gold_complexity": 8,
            "vt": "SELECT book_club.book_title, book_club.author_or_editor FROM book_club WHERE book_club.year > [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles and authors or editors of books from the 'book_club' table that were published or discussed after a specific year. The placeholder in the WHERE clause represents the year threshold for filtering the results.",
            "question": "show the titles, and authors or editors for all books made after the year 1989."
        },
        {
            "sample_id": 6962,
            "gold_sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
            "gold_complexity": 10,
            "vt": "SELECT book_club.year, book_club.book_title, book_club.publisher FROM book_club ORDER BY book_club.year",
            "ba": "The virtual table presents the year, title, and publisher of books discussed in the book club, sorted by the year of discussion.",
            "question": "What are the years, titles, and publishers for all books, ordered by year descending?"
        },
        {
            "sample_id": 6964,
            "gold_sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
            "gold_complexity": 8,
            "vt": "SELECT book_club.publisher, COUNT(*) FROM book_club GROUP BY book_club.publisher",
            "ba": "The virtual table summarizes the number of book club entries grouped by each publisher from the 'book_club' table. The placeholder in the SELECT statement represents the publisher's name, and the COUNT function is used to count the total entries for each publisher.",
            "question": "How many books are there for each publisher?"
        },
        {
            "sample_id": 6972,
            "gold_sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
            "gold_complexity": 7,
            "vt": "SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990",
            "ba": "The virtual table identifies publishers of books discussed in the book club for the years 1989 and 1990. It uses an INTERSECT operation to find common publishers between these two years.",
            "question": "What are the publishers who have published a book in both 1989 and 1990?"
        },
        {
            "sample_id": 6980,
            "gold_sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT movie.title, movie.director FROM movie WHERE movie.year <= [placeholder-type:numeric] ORDER BY movie.gross_worldwide LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the titles and directors of movies from the 'movie' table that were released in or before a specified year. The results are ordered by the worldwide gross revenue of the movies, and the number of results returned is limited to a specified amount.",
            "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross."
        },
        {
            "sample_id": 6969,
            "gold_sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT book_club.category FROM book_club WHERE book_club.year > [placeholder-type:numeric] GROUP BY book_club.category HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the categories of books discussed in the 'book_club' table that were published after a certain year. The results are grouped by category, and only those categories with a minimum number of discussions are included, as specified by a placeholder.",
            "question": "List categories that have at least two books after year 1989."
        },
        {
            "sample_id": 6956,
            "gold_sql": "SELECT count(*) FROM book_club",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM book_club",
            "ba": "The virtual table provides a count of all entries in the 'book_club' table, which contains information about various book discussions, including details such as the year of publication, author or editor, book title, publisher, category, and the outcome of the discussions.",
            "question": "Count the number of book clubs."
        },
        {
            "sample_id": 6959,
            "gold_sql": "SELECT DISTINCT publisher FROM book_club",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT book_club.publisher FROM book_club",
            "ba": "The virtual table lists the unique publishers from the 'book_club' table, which contains information about various book clubs, including the publisher of the books discussed.",
            "question": "Show all distinct publishers for books."
        },
        {
            "sample_id": 6963,
            "gold_sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher",
            "gold_complexity": 8,
            "vt": "SELECT book_club.publisher, COUNT(*) FROM book_club GROUP BY book_club.publisher",
            "ba": "The virtual table summarizes the number of book club entries grouped by the publisher of the books discussed in the book clubs. The placeholder in the SELECT statement represents the publisher's name, and the COUNT function is used to count the number of entries for each publisher.",
            "question": "Show all publishers and the number of books for each publisher."
        },
        {
            "sample_id": 6965,
            "gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT book_club.publisher FROM book_club GROUP BY book_club.publisher ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the publishers of books discussed in the book clubs, grouping the results by publisher and ordering them based on the number of discussions. The placeholder in the LIMIT clause allows for specifying the maximum number of publishers to return.",
            "question": "What is the publisher with most number of books?"
        },
        {
            "sample_id": 6989,
            "gold_sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
            "gold_complexity": 10,
            "vt": "SELECT movie.title, book_club.book_title FROM movie JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE culture_company.incorporated_in = '[placeholder-type:string]'",
            "ba": "The virtual table describes the titles of movies and the corresponding book titles discussed in book clubs, filtered by the year a cultural company was incorporated. The placeholders in the WHERE clause represent the year of incorporation.",
            "question": "Show the movie titles and book titles for all companies in China."
        },
        {
            "sample_id": 6984,
            "gold_sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
            "gold_complexity": 6,
            "vt": "SELECT movie.director FROM movie WHERE movie.year = [placeholder-type:numeric] OR movie.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of directors from the 'movie' table for movies released in specific years. The placeholders represent the years of interest.",
            "question": "Which directors had a movie in either 1999 or 2000?"
        },
        {
            "sample_id": 6958,
            "gold_sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
            "gold_complexity": 8,
            "vt": "SELECT book_club.book_title, book_club.author_or_editor FROM book_club WHERE book_club.year > [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles and authors or editors of books from the 'book_club' table that were published or discussed after a specific year. The placeholder in the WHERE clause represents the year threshold for filtering the results.",
            "question": "What are the titles and authors or editors that correspond to books made after 1989?"
        },
        {
            "sample_id": 6983,
            "gold_sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
            "gold_complexity": 6,
            "vt": "SELECT movie.director FROM movie WHERE movie.year = [placeholder-type:numeric] OR movie.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of directors from the 'movie' table for movies released in specific years. The placeholders represent the years of interest.",
            "question": "Show all director names who have a movie in the year 1999 or 2000."
        },
        {
            "sample_id": 6986,
            "gold_sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
            "gold_complexity": 8,
            "vt": "SELECT AVG(movie.budget_million), MAX(movie.budget_million), MIN(movie.budget_million) FROM movie WHERE movie.year < [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average, maximum, and minimum budgets of movies from the 'movie' table that were released before a specific year. The placeholder in the WHERE clause represents the year to filter the movies.",
            "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000."
        },
        {
            "sample_id": 6966,
            "gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT book_club.publisher FROM book_club GROUP BY book_club.publisher ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the publishers of books discussed in the book clubs, grouping the results by publisher and ordering them based on the number of discussions associated with each publisher. The placeholder in the LIMIT clause allows for specifying the maximum number of publishers to return.",
            "question": "Return the publisher that has published the most books."
        },
        {
            "sample_id": 6985,
            "gold_sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
            "gold_complexity": 8,
            "vt": "SELECT AVG(movie.budget_million), MAX(movie.budget_million), MIN(movie.budget_million) FROM movie WHERE movie.year < [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average, maximum, and minimum budgets of movies from the 'movie' table that were released before a specific year. The placeholder in the WHERE clause represents the year of interest.",
            "question": "What is the average, maximum, and minimum budget for all movies before 2000."
        },
        {
            "sample_id": 6961,
            "gold_sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
            "gold_complexity": 10,
            "vt": "SELECT book_club.year, book_club.book_title, book_club.publisher FROM book_club ORDER BY book_club.year",
            "ba": "The virtual table presents the year, title, and publisher of books discussed in the book club, sorted by the year of discussion.",
            "question": "Show the years, book titles, and publishers for all books, in descending order by year."
        },
        {
            "sample_id": 6978,
            "gold_sql": "SELECT COUNT (DISTINCT director) FROM movie",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT director) FROM movie",
            "ba": "The virtual table counts the number of unique directors from the 'movie' table.",
            "question": "Count the number of different directors."
        }
    ],
    "tracking_software_problems": [
        {
            "sample_id": 5373,
            "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT product.product_name FROM product ORDER BY product.product_name",
            "ba": "The virtual table lists all unique product names from the 'product' table, sorted in alphabetical order. The placeholder indicates that the user can modify the query to include specific filtering or additional columns if needed.",
            "question": "List the names of all the distinct product names in alphabetical order?"
        },
        {
            "sample_id": 5355,
            "gold_sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT problem_log.problem_id, problem_log.problem_log_id FROM staff JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE staff.staff_first_name = None.\"rylan\" AND staff.staff_last_name = None.\"homenick\"",
            "ba": "The virtual table retrieves distinct problem IDs and their corresponding log IDs from the 'problem_log' table, specifically for logs assigned to a staff member with a given first and last name. It involves joining the 'staff' table with the 'problem_log' table based on the staff member's ID, filtering the results to match the specified staff member's name.",
            "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick."
        },
        {
            "sample_id": 5349,
            "gold_sql": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
            "gold_complexity": 8,
            "vt": "SELECT problem_log.problem_log_id, problem_log.log_entry_date FROM problem_log WHERE problem_log.problem_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers and log entry dates of problem logs from the 'problem_log' table that are associated with a specific problem identified by its ID. The placeholder in the WHERE clause represents the problem ID.",
            "question": "Find all the ids and dates of the logs for the problem whose id is 10."
        },
        {
            "sample_id": 5351,
            "gold_sql": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
            "gold_complexity": 6,
            "vt": "SELECT problem_log.problem_log_id, problem_log.log_entry_description FROM problem_log",
            "ba": "The virtual table describes the unique identifiers and log entry descriptions of problem logs from the 'problem_log' table. This allows users to view specific details about each log entry related to problems.",
            "question": "List all the log ids and their descriptions from the problem logs."
        },
        {
            "sample_id": 5371,
            "gold_sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), product.product_id FROM problems JOIN product AS T2 ON T1.product_id = T2.product_id WHERE problems.date_problem_reported > None.\"1986-11-13\" GROUP BY product.product_id",
            "ba": "The virtual table provides a count of problems reported for each product from the 'problems' table, grouped by product ID. It filters the results to include only those problems that were reported after a specific date, using a placeholder for the date value.",
            "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?"
        },
        {
            "sample_id": 5369,
            "gold_sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), product.product_id FROM problems JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY product.product_id",
            "ba": "The virtual table provides a count of problems associated with each product from the 'problems' table, grouped by the product identifier. It joins the 'problems' table with the 'product' table to retrieve the product details alongside the count of related problems.",
            "question": "For each product which has problems, what are the number of problems and the product id?"
        },
        {
            "sample_id": 5368,
            "gold_sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
            "gold_complexity": 6,
            "vt": "SELECT problems.problem_id FROM problems WHERE problems.date_problem_reported < None.\"1978-06-26\"",
            "ba": "The virtual table retrieves the unique identifiers of problems from the 'problems' table that were reported before a specific date. The placeholder in the WHERE clause represents the date for filtering the reported problems.",
            "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems."
        },
        {
            "sample_id": 5376,
            "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT product.product_name FROM product ORDER BY product.product_id",
            "ba": "The virtual table lists the unique names of products from the 'product' table, sorted by their unique identifiers.",
            "question": "What is the list of distinct product names sorted by product id?"
        },
        {
            "sample_id": 5386,
            "gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT product.product_name FROM problems JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY product.product_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of products associated with problems, grouped by product name and ordered by the count of problems for each product. The placeholder in the LIMIT clause allows the user to specify the maximum number of product names to retrieve.",
            "question": "What are the three products that have the most problems?s"
        },
        {
            "sample_id": 5389,
            "gold_sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
            "gold_complexity": 12,
            "vt": "SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
            "ba": "The virtual table describes the first and last names of staff members who reported problems related to a specific product, excluding those who reported problems for another specified product. The placeholders in the WHERE clause represent the names of the products.",
            "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?"
        },
        {
            "sample_id": 5391,
            "gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
            "gold_complexity": 12,
            "vt": "SELECT T2.product_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1, product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
            "ba": "The virtual table identifies products that have been reported as problems by both specified staff members. It retrieves the product names from the 'product' table, filtering the results based on the first and last names of the staff members who reported the problems. The use of INTERSECT ensures that only products reported by both staff members are included in the final result.",
            "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?"
        },
        {
            "sample_id": 5377,
            "gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
            "gold_complexity": 11,
            "vt": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
            "ba": "The virtual table retrieves the product IDs associated with problems reported by specific staff members. It combines results from two queries using a UNION, where each query selects product IDs from the 'problems' table joined with the 'staff' table based on the staff member's first and last names.",
            "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?"
        },
        {
            "sample_id": 5374,
            "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT product.product_name FROM product ORDER BY product.product_name",
            "ba": "The virtual table lists all unique product names from the 'product' table, sorted in alphabetical order. This allows users to see a distinct list of products available without duplicates.",
            "question": "Sort all the distinct product names in alphabetical order."
        },
        {
            "sample_id": 5356,
            "gold_sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT problem_log.problem_id, problem_log.problem_log_id FROM staff JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE staff.staff_first_name = None.\"rylan\" AND staff.staff_last_name = None.\"homenick\"",
            "ba": "The virtual table retrieves distinct problem IDs and their corresponding log IDs from the 'problem_log' table, specifically for logs assigned to a staff member with a given first and last name. It involves joining the 'staff' table with the 'problem_log' table based on the staff member's ID, filtering the results to match the specified staff member's name.",
            "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?"
        },
        {
            "sample_id": 5359,
            "gold_sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), product.product_name FROM product JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY product.product_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of problems associated with each product by counting the entries in the 'problems' table and grouping them by the product name from the 'product' table. The result is ordered by the count of problems in descending order, and a limit is applied to restrict the number of results returned.",
            "question": "How many problems does the product with the most problems have? List the number of the problems and product name."
        },
        {
            "sample_id": 5365,
            "gold_sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
            "gold_complexity": 6,
            "vt": "SELECT problems.problem_id FROM problems WHERE problems.date_problem_reported > None.\"1978-06-26\"",
            "ba": "The virtual table retrieves the unique identifiers of problems from the 'problems' table that were reported after a specific date. The placeholder in the WHERE clause represents the date after which the problems were reported.",
            "question": "What are the ids of the problems which are reported after 1978-06-26?"
        },
        {
            "sample_id": 5379,
            "gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
            "gold_complexity": 11,
            "vt": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
            "ba": "The virtual table identifies the product IDs associated with problems reported by a specific staff member and also authorized for closure by another staff member. It uses two separate queries to find product IDs based on the first and last names of the staff members involved in reporting and closing the problems, respectively. The intersection of these two sets of product IDs provides the final result.",
            "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?"
        },
        {
            "sample_id": 5360,
            "gold_sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), product.product_name FROM product JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY product.product_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of problems associated with each product, displaying the product name alongside the total number of related problems. The results are grouped by product name and ordered by the count of problems, with a limit on the number of results returned.",
            "question": "Which product has the most problems? Give me the number of problems and the product name."
        },
        {
            "sample_id": 5362,
            "gold_sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
            "gold_complexity": 7,
            "vt": "SELECT problems.problem_description FROM problems JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE staff.staff_first_name = None.\"christop\"",
            "ba": "The virtual table describes the problem descriptions from the 'problems' table that were reported by a specific staff member. The query joins the 'problems' table with the 'staff' table to filter the results based on the first name of the staff member, using a placeholder for the first name.",
            "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems."
        },
        {
            "sample_id": 5354,
            "gold_sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT staff.staff_first_name, staff.staff_last_name FROM staff JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE problem_log.problem_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first and last names of staff members from the 'staff' table who are assigned to a specific problem log entry. The placeholder in the WHERE clause represents the unique identifier of the problem log entry.",
            "question": "Which staff members are assigned to the problem with id 1? Give me their first and last names."
        },
        {
            "sample_id": 5345,
            "gold_sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT problem_log.problem_log_id FROM problem_log ORDER BY problem_log.log_entry_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of problem log entries from the 'problem_log' table, ordered by the date of the log entry. The placeholder in the LIMIT clause allows for specifying the maximum number of entries to return.",
            "question": "What is the id of the problem log that is created most recently?"
        },
        {
            "sample_id": 5352,
            "gold_sql": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
            "gold_complexity": 6,
            "vt": "SELECT problem_log.problem_log_id, problem_log.log_entry_description FROM problem_log",
            "ba": "The virtual table describes the unique identifiers and log entry descriptions of problem logs from the 'problem_log' table. The query retrieves all entries without any filtering conditions, allowing users to see all log entries recorded.",
            "question": "What are the log id and entry description of each problem?"
        },
        {
            "sample_id": 5375,
            "gold_sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT product.product_name FROM product ORDER BY product.product_id",
            "ba": "The virtual table lists the unique names of products from the 'product' table, sorted by their unique identifier.",
            "question": "List all the distinct product names ordered by product id?"
        },
        {
            "sample_id": 5347,
            "gold_sql": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT problem_log.problem_log_id, problem_log.problem_id FROM problem_log ORDER BY problem_log.log_entry_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers for problem log entries and their associated problems from the 'problem_log' table. The results are ordered by the date of the log entry, and a limit is applied to control the number of entries returned.",
            "question": "What is the oldest log id and its corresponding problem id?"
        },
        {
            "sample_id": 5385,
            "gold_sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT product.product_name FROM problems JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY product.product_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of products associated with problems, grouping them by product name and ordering the results based on the count of related problems. The placeholder in the LIMIT clause allows for specifying the maximum number of product names to return.",
            "question": "Find the top 3 products which have the largest number of problems?"
        },
        {
            "sample_id": 5358,
            "gold_sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM product JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE product.product_name = None.\"voluptatem\"",
            "ba": "The virtual table counts the number of problems associated with a specific product name from the 'product' table. It joins the 'product' table with the 'problems' table based on the product identifier, filtering for a particular product name using a placeholder.",
            "question": "How many problems did the product called \"voluptatem\" have in record?"
        },
        {
            "sample_id": 5367,
            "gold_sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
            "gold_complexity": 6,
            "vt": "SELECT problems.problem_id FROM problems WHERE problems.date_problem_reported < None.\"1978-06-26\"",
            "ba": "The virtual table retrieves the unique identifiers of problems from the 'problems' table that were reported before a specific date. The placeholder in the WHERE clause represents the date for filtering the reported problems.",
            "question": "What are the ids of the problems which are reported before 1978-06-26?"
        },
        {
            "sample_id": 5380,
            "gold_sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
            "gold_complexity": 11,
            "vt": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
            "ba": "The virtual table identifies the product IDs associated with problems reported by a specific staff member and also authorized for closure by another staff member. It uses two separate queries to find product IDs based on the first and last names of the staff members involved in reporting and closing the problems, respectively. The intersection of these two sets of product IDs is returned, indicating products that meet both criteria.",
            "question": "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids."
        }
    ],
    "museum_visit": [
        {
            "sample_id": 7420,
            "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(*) FROM visitor WHERE NOT visitor.id IN (SELECT visit.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
            "ba": "The virtual table counts the number of visitors who have not visited any museum established after the year 2010. It does this by first identifying the visitor IDs from the 'visit' table that correspond to museums in the 'museum' table with an 'open_year' greater than 2010, and then counting all visitors whose IDs are not in that list.",
            "question": "Find the number of visitors who did not visit any museum opened after 2010."
        },
        {
            "sample_id": 7417,
            "gold_sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
            "gold_complexity": 5,
            "vt": "SELECT AVG(visit.num_of_ticket), MAX(visit.num_of_ticket) FROM visit",
            "ba": "The virtual table calculates the average and maximum number of tickets purchased from the 'visit' table.",
            "question": "What are the average and maximum number of tickets bought in all visits?"
        },
        {
            "sample_id": 7406,
            "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
            "gold_complexity": 6,
            "vt": "SELECT AVG(visitor.age) FROM visitor WHERE visitor.level_of_membership <= [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average age of visitors from the 'visitor' table who have a membership level less than or equal to a specified value. The placeholder in the WHERE clause represents the membership level.",
            "question": "What is the average age of the visitors whose membership level is not higher than 4?"
        },
        {
            "sample_id": 7404,
            "gold_sql": "SELECT count(*) FROM visitor WHERE age  <  30",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM visitor WHERE visitor.age < [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of visitors from the 'visitor' table who are younger than a specified age. The placeholder in the WHERE clause represents the age limit for filtering the visitors.",
            "question": "How many visitors below age 30 are there?"
        },
        {
            "sample_id": 7412,
            "gold_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
            "gold_complexity": 13,
            "vt": "SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY visitor.id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers, names, and ages of visitors who have made more than a specified number of visits to the museum. The query joins the 'visitor' table with the 'visit' table to aggregate the visit counts for each visitor, filtering those with a visit count greater than a placeholder value.",
            "question": "find the id, name and age for visitors who visited some museums more than once."
        },
        {
            "sample_id": 7418,
            "gold_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
            "gold_complexity": 7,
            "vt": "SELECT SUM(visit.total_spent) FROM visitor JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE visitor.level_of_membership = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the total amount spent by visitors who have a specific level of membership. It aggregates the 'total_spent' from the 'visit' table, joining it with the 'visitor' table to filter based on the 'level_of_membership'.",
            "question": "What is the total ticket expense of the visitors whose membership level is 1?"
        },
        {
            "sample_id": 7414,
            "gold_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT visit.museum_id, museum.name FROM museum JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY visit.museum_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of museum identifiers and their corresponding names from the 'museum' table, along with the number of visits to each museum. It joins the 'museum' table with the 'visit' table to aggregate the visit counts for each museum, grouping the results by museum identifier and ordering them by the number of visits. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What are the id and name of the museum visited most times?"
        },
        {
            "sample_id": 7407,
            "gold_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
            "gold_complexity": 10,
            "vt": "SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > [placeholder-type:numeric] ORDER BY visitor.age",
            "ba": "The virtual table describes the names and membership levels of visitors from the 'visitor' table who have a membership level greater than a specified value. The results are ordered by the age of the visitors.",
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."
        },
        {
            "sample_id": 7411,
            "gold_sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
            "gold_complexity": 10,
            "vt": "SELECT museum.name FROM museum WHERE museum.num_of_staff > (SELECT MIN(museum.num_of_staff) FROM museum WHERE open_year > 2010)",
            "ba": "The virtual table lists the names of museums from the 'museum' table that have a number of staff greater than the minimum number of staff employed at museums established after the year 2010. The query uses a subquery to determine this minimum staff count.",
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010."
        },
        {
            "sample_id": 7413,
            "gold_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT visit.visitor_id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY visit.visitor_id ORDER BY SUM(visit.total_spent) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of visitors along with their membership levels, based on their total spending during visits to museums. It combines data from the 'visitor' and 'visit' tables, grouping the results by each visitor's unique identifier and ordering them by the total amount spent, with a limit on the number of results returned.",
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?"
        }
    ],
    "gymnast": [
        {
            "sample_id": 1743,
            "gold_sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
            "gold_complexity": 4,
            "vt": "SELECT AVG(gymnast.horizontal_bar_points) FROM gymnast",
            "ba": "The virtual table calculates the average points scored by gymnasts in the horizontal bar event from the 'gymnast' table.",
            "question": "Return the average horizontal bar points across all gymnasts."
        },
        {
            "sample_id": 1775,
            "gold_sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC",
            "gold_complexity": 7,
            "vt": "SELECT people.age FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY gymnast.total_points",
            "ba": "The virtual table retrieves the ages of gymnasts from the 'people' table, joining it with the 'gymnast' table based on their unique identifiers. The results are ordered by the total points scored by the gymnasts across all events.",
            "question": "What are the ages of the gymnasts, ordered descending by their total points?"
        },
        {
            "sample_id": 1766,
            "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY people.height",
            "ba": "The virtual table describes the names of gymnasts from the 'gymnast' table, joined with the 'people' table to include only those gymnasts who have a corresponding entry in the 'people' table. The results are ordered by the height of the individuals, allowing for a sorted list of names based on their height.",
            "question": "List the names of gymnasts in ascending order by their heights."
        },
        {
            "sample_id": 1753,
            "gold_sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people ORDER BY people.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of individuals from the 'people' table, ordered by their age. The placeholder in the LIMIT clause allows for specifying the maximum number of names to retrieve.",
            "question": "What are the names of the five oldest people?"
        },
        {
            "sample_id": 1742,
            "gold_sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
            "gold_complexity": 4,
            "vt": "SELECT AVG(gymnast.horizontal_bar_points) FROM gymnast",
            "ba": "The virtual table calculates the average points scored by gymnasts in the horizontal bar event from the 'gymnast' table.",
            "question": "What is the average horizontal bar points for all gymnasts?"
        },
        {
            "sample_id": 1758,
            "gold_sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT people.hometown FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE gymnast.total_points > [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique hometowns of gymnasts from the 'gymnast' table who have achieved a total score above a specified threshold. The query joins the 'gymnast' table with the 'people' table to access the hometown information, using a placeholder for the total points condition.",
            "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?"
        },
        {
            "sample_id": 1739,
            "gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
            "gold_complexity": 6,
            "vt": "SELECT gymnast.total_points FROM gymnast ORDER BY gymnast.total_points",
            "ba": "The virtual table displays the total points scored by gymnasts from the 'gymnast' table, ordered in descending order based on their total points.",
            "question": "What are the total points for all gymnasts, ordered by total points descending?"
        },
        {
            "sample_id": 1744,
            "gold_sql": "SELECT Name FROM People ORDER BY Name ASC",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people ORDER BY people.name",
            "ba": "The virtual table lists the names of individuals from the 'people' table, sorted in alphabetical order. This allows for easy viewing of all names without any filtering conditions.",
            "question": "What are the names of people in ascending alphabetical order?"
        },
        {
            "sample_id": 1771,
            "gold_sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20",
            "gold_complexity": 9,
            "vt": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
            "ba": "The virtual table identifies the hometowns of individuals from the 'people' table who are either older than 23 years or younger than 20 years. The use of the INTERSECT operator ensures that only the hometowns common to both age groups are returned.",
            "question": "From which hometowns did both people older than 23 and younger than 20 come from?"
        },
        {
            "sample_id": 1760,
            "gold_sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
            "gold_complexity": 9,
            "vt": "SELECT people.hometown, COUNT(*) FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY people.hometown",
            "ba": "The virtual table summarizes the number of gymnasts from each hometown by joining the 'gymnast' and 'people' tables based on their unique identifiers. It groups the results by the hometown of the gymnasts, allowing us to see how many gymnasts come from each location.",
            "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?"
        },
        {
            "sample_id": 1768,
            "gold_sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
            "ba": "The virtual table identifies unique hometowns from the 'people' table that are not associated with any gymnast in the 'gymnast' table. It uses a combination of SELECT DISTINCT to gather unique hometowns and an EXCEPT clause to filter out those that are linked to gymnasts.",
            "question": "List the distinct hometowns that are not associated with any gymnast."
        },
        {
            "sample_id": 1754,
            "gold_sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT gymnast.total_points FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY people.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the total points scored by gymnasts from the 'gymnast' table, joining it with the 'people' table to associate each gymnast with their respective age. The results are ordered by age, and a limit is applied to restrict the number of records returned.",
            "question": "What is the total point count of the youngest gymnast?"
        },
        {
            "sample_id": 1759,
            "gold_sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT people.hometown FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE gymnast.total_points > [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique hometowns of gymnasts from the 'gymnast' table who have achieved a total score above a specified threshold. The query joins the 'gymnast' table with the 'people' table to access the hometown information, using a placeholder for the total points condition.",
            "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5."
        },
        {
            "sample_id": 1745,
            "gold_sql": "SELECT Name FROM People ORDER BY Name ASC",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people ORDER BY people.name",
            "ba": "The virtual table lists the names of individuals from the 'people' table, sorted in alphabetical order. This allows for easy viewing of all names without any filtering conditions.",
            "question": "Return the names of people, ordered alphabetically."
        },
        {
            "sample_id": 1736,
            "gold_sql": "SELECT count(*) FROM gymnast",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM gymnast",
            "ba": "The virtual table counts the total number of gymnasts in the 'gymnast' table.",
            "question": "How many gymnasts are there?"
        },
        {
            "sample_id": 1763,
            "gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT people.hometown FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY people.hometown ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the hometowns of gymnasts by joining the 'gymnast' and 'people' tables. It groups the results by hometown and orders them based on the count of gymnasts from each hometown, limiting the output to a specified number of results.",
            "question": "Return the hometown that is most common among gymnasts."
        },
        {
            "sample_id": 1761,
            "gold_sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
            "gold_complexity": 9,
            "vt": "SELECT people.hometown, COUNT(*) FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY people.hometown",
            "ba": "The virtual table summarizes the number of gymnasts from each hometown by joining the 'gymnast' and 'people' tables based on their unique identifiers. It groups the results by the hometown of the gymnasts, allowing us to see how many gymnasts come from each location.",
            "question": "How many gymnasts are from each hometown?"
        },
        {
            "sample_id": 1765,
            "gold_sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
            "gold_complexity": 9,
            "vt": "SELECT people.hometown FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY people.hometown HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the hometowns of gymnasts from the 'people' table, filtering for those hometowns that have a certain number of gymnasts associated with them. The query joins the 'gymnast' and 'people' tables on their respective IDs and groups the results by hometown, only including those with a count of gymnasts that meets or exceeds a specified threshold.",
            "question": "Give the hometowns from which two or more gymnasts are from."
        },
        {
            "sample_id": 1741,
            "gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
            "gold_complexity": 6,
            "vt": "SELECT gymnast.total_points FROM gymnast ORDER BY gymnast.floor_exercise_points",
            "ba": "The virtual table retrieves the total points scored by gymnasts from the 'gymnast' table, ordered by their points in the floor exercise event. The placeholder in the ORDER BY clause indicates that the results will be sorted based on the floor exercise points.",
            "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?"
        },
        {
            "sample_id": 1740,
            "gold_sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
            "gold_complexity": 6,
            "vt": "SELECT gymnast.total_points FROM gymnast ORDER BY gymnast.floor_exercise_points",
            "ba": "The virtual table displays the total points scored by gymnasts from the 'gymnast' table, ordered by their points in the floor exercise event. This allows for an analysis of gymnasts' overall performance based on their scores in a specific event.",
            "question": "List the total points of gymnasts in descending order of floor exercise points."
        },
        {
            "sample_id": 1751,
            "gold_sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT people.age FROM people ORDER BY people.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the ages of individuals from the 'people' table, sorted by their height in ascending order, and limits the results to a specified number of entries.",
            "question": "Return the age of the person with the greatest height."
        },
        {
            "sample_id": 1769,
            "gold_sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
            "ba": "The virtual table identifies unique hometowns from the 'people' table that are not associated with any gymnast in the 'gymnast' table. It uses a combination of SELECT DISTINCT to gather unique hometowns and EXCEPT to filter out those that are linked to gymnasts.",
            "question": "From which hometowns did no gymnasts come from?"
        },
        {
            "sample_id": 1756,
            "gold_sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
            "gold_complexity": 5,
            "vt": "SELECT AVG(people.age) FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
            "ba": "The virtual table calculates the average age of gymnasts by joining the 'gymnast' and 'people' tables based on their unique identifiers. The placeholder in the SELECT clause represents the average age of all gymnasts.",
            "question": "What is the average age of all gymnasts?"
        },
        {
            "sample_id": 1747,
            "gold_sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
            "gold_complexity": 5,
            "vt": "SELECT people.name FROM gymnast JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID",
            "ba": "The virtual table describes the names of people who are gymnasts by joining the 'gymnast' and 'people' tables based on their unique identifiers. The placeholder in the JOIN clause represents the relationship between the gymnast and the person.",
            "question": "Return the names of the gymnasts."
        }
    ],
    "local_govt_mdm": [
        {
            "sample_id": 2642,
            "gold_sql": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
            "gold_complexity": 9,
            "vt": "SELECT cmi_cross_references.source_system_code, benefits_overpayments.council_tax_id FROM cmi_cross_references JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY benefits_overpayments.council_tax_id",
            "ba": "The virtual table describes the source system codes from the 'cmi_cross_references' table along with the associated council tax IDs from the 'benefits_overpayments' table. The join condition links the cross-reference IDs between these two tables, allowing for a combined view of the data. The results are ordered by the council tax ID.",
            "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id."
        },
        {
            "sample_id": 2643,
            "gold_sql": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
            "gold_complexity": 9,
            "vt": "SELECT cmi_cross_references.source_system_code, cmi_cross_references.master_customer_id, parking_fines.council_tax_id FROM cmi_cross_references JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id",
            "ba": "The virtual table describes the source system code and master customer ID from the 'cmi_cross_references' table, along with the council tax ID associated with parking fines. The query joins the 'cmi_cross_references' table with the 'parking_fines' table based on their common identifier, allowing for the retrieval of relevant data across these linked tables.",
            "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?"
        },
        {
            "sample_id": 2644,
            "gold_sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
            "gold_complexity": 8,
            "vt": "SELECT rent_arrears.council_tax_id FROM rent_arrears JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE customer_master_index.cmi_details <> '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the council tax identifiers associated with rent arrears from the 'rent_arrears' table. It joins the 'rent_arrears' table with the 'cmi_cross_references' table to link the rent arrears to the corresponding cross-reference. Additionally, it joins with the 'customer_master_index' table to filter based on specific customer details. The placeholder in the WHERE clause represents the details of the customer that should not match.",
            "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?"
        },
        {
            "sample_id": 2651,
            "gold_sql": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
            "gold_complexity": 6,
            "vt": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
            "ba": "The virtual table lists all unique cross-reference IDs from the 'cmi_cross_references' table that do not have corresponding entries in the 'parking_fines' table. This allows for identifying cross-references that are not associated with any parking fines.",
            "question": "Which cmi cross reference id is not related to any parking taxes?"
        },
        {
            "sample_id": 2641,
            "gold_sql": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
            "gold_complexity": 11,
            "vt": "SELECT cmi_cross_references.cmi_cross_ref_id, cmi_cross_references.master_customer_id, COUNT(*) FROM business_rates JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY cmi_cross_references.cmi_cross_ref_id",
            "ba": "The virtual table summarizes the count of business rates associated with each cross-reference in the customer master index. It retrieves the unique cross-reference ID and the corresponding master customer ID, grouping the results by the cross-reference ID to provide a count of related business rates.",
            "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n"
        },
        {
            "sample_id": 2649,
            "gold_sql": "SELECT count(*) FROM rent_arrears",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM rent_arrears",
            "ba": "The virtual table provides a count of all records in the 'rent_arrears' table, which tracks instances of rent arrears associated with customers.",
            "question": "How many council taxes are collected for renting arrears ?"
        },
        {
            "sample_id": 2645,
            "gold_sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'",
            "gold_complexity": 7,
            "vt": "SELECT electoral_register.electoral_register_id FROM electoral_register JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE cmi_cross_references.source_system_code = '[placeholder-type:string]' OR cmi_cross_references.source_system_code = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the unique identifiers from the electoral register for entries that are linked to specific cross-references in the customer master index. The query filters these entries based on the source system code, allowing for multiple source codes to be specified.",
            "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?"
        },
        {
            "sample_id": 2640,
            "gold_sql": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
            "gold_complexity": 11,
            "vt": "SELECT cmi_cross_references.cmi_cross_ref_id, cmi_cross_references.source_system_code FROM cmi_cross_references JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY cmi_cross_references.cmi_cross_ref_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique cross-reference IDs and their associated source system codes from the 'cmi_cross_references' table. It joins with the 'council_tax' table to filter the results based on the cross-reference IDs that are linked to council tax records. The results are grouped by the cross-reference ID, and only those with a count of associated records greater than or equal to a specified number are included.",
            "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code."
        }
    ],
    "behavior_monitoring": [
        {
            "sample_id": 3104,
            "gold_sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT detention.detention_type_code, ref_detention_type.detention_type_description FROM detention JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY detention.detention_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of different types of detentions recorded in the 'detention' table, along with their descriptions from the 'ref_detention_type' table. It groups the results by the unique detention type code and orders them based on the count of occurrences, allowing users to limit the number of results returned.",
            "question": "What are the code and description of the least frequent detention type ?"
        },
        {
            "sample_id": 3088,
            "gold_sql": "SELECT count(DISTINCT student_id) FROM Students_in_Detention",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT student_id) FROM students_in_detention",
            "ba": "The virtual table provides a count of unique students who are currently in detention by querying the 'students_in_detention' table. The use of COUNT(DISTINCT student_id) ensures that each student is only counted once, regardless of how many detentions they may be involved in.",
            "question": "How many distinct students have been in detention?"
        },
        {
            "sample_id": 3085,
            "gold_sql": "SELECT detention_summary FROM Detention",
            "gold_complexity": 4,
            "vt": "SELECT detention.detention_summary FROM detention",
            "ba": "The virtual table provides a summary of detentions recorded in the 'detention' table. The placeholder represents the specific details of the detention summary that can be filtered or modified as needed.",
            "question": "Return all detention summaries."
        },
        {
            "sample_id": 3114,
            "gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"",
            "gold_complexity": 7,
            "vt": "SELECT addresses.zip_postcode FROM addresses JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE teachers.first_name = None.\"lyla\"",
            "ba": "The virtual table retrieves the postal code from the 'addresses' table for teachers with a specific first name. It involves a join between the 'addresses' and 'teachers' tables based on the address identifier, allowing us to filter the results by the teacher's first name.",
            "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?"
        },
        {
            "sample_id": 3094,
            "gold_sql": "SELECT city FROM Addresses ORDER BY city",
            "gold_complexity": 6,
            "vt": "SELECT addresses.city FROM addresses ORDER BY addresses.city",
            "ba": "The virtual table lists all unique cities from the 'addresses' table, sorted in alphabetical order. This allows users to see the different cities where addresses are located.",
            "question": "List all cities of addresses in alphabetical order."
        },
        {
            "sample_id": 3095,
            "gold_sql": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name",
            "gold_complexity": 8,
            "vt": "SELECT teachers.first_name, teachers.last_name FROM teachers ORDER BY teachers.last_name",
            "ba": "The virtual table describes the first and last names of all teachers from the 'teachers' table, sorted by their last names. This allows for an organized view of the teachers' names.",
            "question": "Find the first names and last names of teachers in alphabetical order of last name."
        },
        {
            "sample_id": 3092,
            "gold_sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'",
            "gold_complexity": 6,
            "vt": "SELECT teachers.first_name FROM teachers WHERE teachers.email_address LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the first names of teachers from the 'teachers' table based on a specified email address pattern. The placeholder in the WHERE clause allows for filtering teachers whose email addresses match a certain format.",
            "question": "Find the first names of teachers whose email address contains the word \"man\"."
        },
        {
            "sample_id": 3086,
            "gold_sql": "SELECT cell_mobile_number ,  email_address FROM STUDENTS",
            "gold_complexity": 6,
            "vt": "SELECT students.cell_mobile_number, students.email_address FROM students",
            "ba": "The virtual table describes the mobile phone numbers and email addresses of students from the 'students' table. The query retrieves these contact details for all students.",
            "question": "Return the cell phone number and email address for all students."
        },
        {
            "sample_id": 3100,
            "gold_sql": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT detention.teacher_id, teachers.last_name FROM detention JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE detention.detention_type_code = None.\"after\" GROUP BY detention.teacher_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of teachers who are overseeing detentions of a specific type. It selects the teacher's ID and last name from the 'detention' table, joining it with the 'teachers' table to get the last names. The results are filtered based on a specific detention type code, and the output is grouped by teacher ID to count the number of detentions each teacher is overseeing. Finally, the results are ordered by the count of detentions, limiting the output to a specified number of records.",
            "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?"
        },
        {
            "sample_id": 3115,
            "gold_sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
            "gold_complexity": 7,
            "vt": "SELECT teachers.email_address FROM addresses JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE addresses.zip_postcode = None.\"918\"",
            "ba": "The virtual table retrieves the email addresses of teachers from the 'Teachers' table who are associated with addresses in a specific postal code. The query joins the 'addresses' table with the 'Teachers' table using the address identifier, filtering results based on the specified postal code.",
            "question": "What are the email addresses of teachers whose address has zip code \"918\"?"
        },
        {
            "sample_id": 3111,
            "gold_sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"",
            "gold_complexity": 7,
            "vt": "SELECT student_addresses.monthly_rental FROM addresses JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE addresses.state_province_county = None.\"texas\"",
            "ba": "The virtual table retrieves the monthly rental costs for students' addresses from the 'addresses' table, specifically filtering for addresses located in a certain state, represented by a placeholder.",
            "question": "What are the monthly rentals of student addresses in Texas state?"
        },
        {
            "sample_id": 3089,
            "gold_sql": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"",
            "gold_complexity": 6,
            "vt": "SELECT teachers.gender FROM teachers WHERE teachers.last_name = None.\"medhurst\"",
            "ba": "The virtual table retrieves the gender of teachers from the 'teachers' table based on a specific last name. The placeholder in the WHERE clause represents the last name of the teacher being queried.",
            "question": "What is the gender of the teacher with last name \"Medhurst\"?"
        },
        {
            "sample_id": 3102,
            "gold_sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT student_addresses.address_id, addresses.city FROM addresses JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY student_addresses.address_id ORDER BY AVG(student_addresses.monthly_rental) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique address IDs along with the corresponding city names from the 'addresses' table. It joins the 'addresses' table with the 'student_addresses' table to associate each address with its respective student. The results are grouped by address ID and ordered by the average monthly rental cost of the addresses, allowing users to see which addresses are most commonly associated with students, limited to a specified number of results.",
            "question": "Find the id and city of the student address with the highest average monthly rental."
        },
        {
            "sample_id": 3093,
            "gold_sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC",
            "gold_complexity": 6,
            "vt": "SELECT * FROM assessment_notes ORDER BY assessment_notes.date_of_notes",
            "ba": "The virtual table retrieves all assessment notes from the 'assessment_notes' table, sorted by the date when the notes were made. This allows users to view the complete set of notes in chronological order.",
            "question": "List all information about the assessment notes sorted by date in ascending order."
        },
        {
            "sample_id": 3090,
            "gold_sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_incident_type.incident_type_description FROM ref_incident_type WHERE ref_incident_type.incident_type_code = None.\"violence\"",
            "ba": "The virtual table describes the incident type description from the 'ref_incident_type' table for a specific incident type code. The placeholder in the WHERE clause represents the unique code for the incident type, which in this case is related to violence.",
            "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?"
        },
        {
            "sample_id": 3117,
            "gold_sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id",
            "gold_complexity": 6,
            "vt": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id",
            "ba": "The virtual table lists the last names of teachers from the 'Teachers' table who are not overseeing any detentions. It uses an EXCEPT clause to exclude those teachers who are linked to any records in the 'Detention' table.",
            "question": "Find the last names of teachers who are not involved in any detention."
        },
        {
            "sample_id": 3097,
            "gold_sql": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT assessment_notes.student_id, students.first_name FROM assessment_notes JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY assessment_notes.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of student IDs and their corresponding first names from the 'assessment_notes' table. It joins the 'assessment_notes' table with the 'students' table to retrieve the first names of students associated with assessment notes. The results are grouped by student ID to ensure each student appears only once, and they are ordered by the count of assessment notes associated with each student. The limit placeholder allows for specifying the maximum number of results to return.",
            "question": "Find the id and first name of the student that has the most number of assessment notes?"
        },
        {
            "sample_id": 3096,
            "gold_sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
            "gold_complexity": 6,
            "vt": "SELECT * FROM student_addresses ORDER BY student_addresses.monthly_rental",
            "ba": "The virtual table provides a comprehensive view of student addresses, including details such as the start and end dates of residence, monthly rental costs, and any additional information related to the addresses. The results are ordered by the monthly rental cost, allowing for easy identification of the most and least expensive addresses associated with students.",
            "question": "Find all information about student addresses, and sort by monthly rental in descending order."
        },
        {
            "sample_id": 3084,
            "gold_sql": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"",
            "gold_complexity": 8,
            "vt": "SELECT behavior_incident.date_incident_start, behavior_incident.date_incident_end FROM behavior_incident WHERE behavior_incident.incident_type_code = None.\"noise\"",
            "ba": "The virtual table describes the start and end dates of behavior incidents from the 'behavior_incident' table that are classified under a specific incident type, represented by a placeholder for the incident type code.",
            "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?"
        },
        {
            "sample_id": 3087,
            "gold_sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
            "gold_complexity": 7,
            "vt": "SELECT students.email_address FROM students WHERE students.first_name = None.\"emma\" AND students.last_name = None.\"rohan\"",
            "ba": "The virtual table retrieves the email addresses of students from the 'students' table who have a specific first name and last name. The placeholders in the WHERE clause represent the first and last names of the student being queried.",
            "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
        },
        {
            "sample_id": 3116,
            "gold_sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM students WHERE NOT students.student_id IN (SELECT students.student_id FROM Behavior_Incident)",
            "ba": "The virtual table counts the number of students who have not been involved in any behavior incidents. It does this by selecting from the 'students' table and excluding those student IDs that appear in the 'Behavior_Incident' table.",
            "question": "How many students are not involved in any behavior incident?"
        },
        {
            "sample_id": 3107,
            "gold_sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"",
            "gold_complexity": 9,
            "vt": "SELECT behavior_incident.date_incident_start, behavior_incident.date_incident_end FROM behavior_incident JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE students.last_name = None.\"fahey\"",
            "ba": "The virtual table provides the start and end dates of behavior incidents from the 'behavior_incident' table for a specific student identified by their last name. The query joins the 'behavior_incident' table with the 'students' table to filter incidents related to that student.",
            "question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\"."
        },
        {
            "sample_id": 3080,
            "gold_sql": "SELECT date_of_notes FROM Assessment_Notes",
            "gold_complexity": 4,
            "vt": "SELECT assessment_notes.date_of_notes FROM assessment_notes",
            "ba": "The virtual table retrieves the dates of assessment notes recorded in the 'assessment_notes' table. This table links students and teachers, capturing the date when each note was made.",
            "question": "What are the dates of the assessment notes?"
        },
        {
            "sample_id": 3098,
            "gold_sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 12,
            "vt": "SELECT assessment_notes.teacher_id, teachers.first_name FROM assessment_notes JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY assessment_notes.teacher_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of teachers who have made assessment notes, displaying their unique identifiers and first names. It aggregates the data by teacher, counting the number of notes each teacher has made, and orders the results to show the top teachers based on the count of their notes. The placeholder in the LIMIT clause allows for specifying how many top teachers to retrieve.",
            "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?"
        }
    ],
    "perpetrator": [
        {
            "sample_id": 2303,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE perpetrator.country <> None.\"china\"",
            "ba": "The virtual table retrieves the names of individuals from the 'people' table who are associated with incidents recorded in the 'perpetrator' table, specifically excluding those incidents that occurred in China. The query uses a JOIN operation to link the two tables based on the 'people_id' foreign key relationship, ensuring that only relevant names are selected based on the specified condition.",
            "question": "What are the names of perpetrators whose country is not \"China\"?"
        },
        {
            "sample_id": 2310,
            "gold_sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT perpetrator.country, COUNT(*) FROM perpetrator GROUP BY perpetrator.country HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of incidents involving perpetrators, grouped by country. It filters the results to only include countries with a specified minimum number of incidents, represented by a placeholder for numeric values.",
            "question": "What are the countries that have at least two perpetrators?"
        },
        {
            "sample_id": 2315,
            "gold_sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT perpetrator.date FROM people JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY people.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates of incidents involving perpetrators, joining the 'people' table to link each incident to the associated person. The results are ordered by the height of the individuals, and a limit is applied to restrict the number of records returned based on a specified numeric value.",
            "question": "Show the date of the tallest perpetrator."
        },
        {
            "sample_id": 2306,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
            "gold_complexity": 8,
            "vt": "SELECT people.name FROM people JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE perpetrator.country = None.\"china\" OR perpetrator.country = None.\"japan\"",
            "ba": "The virtual table describes the names of people associated with incidents involving perpetrators from specific countries. It retrieves data from the 'people' table and joins it with the 'perpetrator' table based on the people_id. The query filters the results to include only those incidents that occurred in either China or Japan.",
            "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
        },
        {
            "sample_id": 2307,
            "gold_sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
            "gold_complexity": 7,
            "vt": "SELECT people.height FROM people JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY perpetrator.injured",
            "ba": "The virtual table retrieves the height of individuals from the 'people' table who are linked to incidents recorded in the 'perpetrator' table. The results are ordered based on the number of injured individuals in each incident, allowing for an analysis of height in relation to the severity of incidents.",
            "question": "What are the heights of perpetrators in descending order of the number of people they injured?"
        },
        {
            "sample_id": 2299,
            "gold_sql": "SELECT avg(Injured) FROM perpetrator",
            "gold_complexity": 4,
            "vt": "SELECT AVG(perpetrator.injured) FROM perpetrator",
            "ba": "The virtual table calculates the average number of people injured in incidents recorded in the 'perpetrator' table.",
            "question": "What is the average number of people injured by all perpetrators?"
        },
        {
            "sample_id": 2314,
            "gold_sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT LOCATION) FROM perpetrator",
            "ba": "The virtual table counts the distinct geographical locations from the 'perpetrator' table where incidents have occurred. This provides insight into the variety of locations involved in incidents without duplicating any location.",
            "question": "How many distinct locations of perpetrators are there?"
        },
        {
            "sample_id": 2296,
            "gold_sql": "SELECT count(*) FROM perpetrator",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM perpetrator",
            "ba": "The virtual table provides a count of all incidents recorded in the 'perpetrator' table, which includes various details about each incident such as the perpetrator's unique identifier, the associated person's identifier, the date and year of the incident, the geographical location, the country, and the number of people killed or injured.",
            "question": "How many perpetrators are there?"
        },
        {
            "sample_id": 2316,
            "gold_sql": "SELECT max(YEAR) FROM perpetrator;",
            "gold_complexity": 4,
            "vt": "SELECT MAX(perpetrator.year) FROM perpetrator",
            "ba": "The virtual table retrieves the most recent year from the 'perpetrator' table, indicating the latest incident involving perpetrators.",
            "question": "In which year did the most recent crime happen?"
        },
        {
            "sample_id": 2311,
            "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY perpetrator.year",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are linked to incidents recorded in the 'perpetrator' table. The results are ordered by the year of the incident, allowing for a chronological view of the data.",
            "question": "List the names of perpetrators in descending order of the year."
        },
        {
            "sample_id": 2301,
            "gold_sql": "SELECT Name FROM People ORDER BY Height ASC",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people ORDER BY people.height",
            "ba": "The virtual table lists the names of individuals from the 'people' table, sorted by their height in ascending order.",
            "question": "What are the names of people in ascending order of height?"
        },
        {
            "sample_id": 2305,
            "gold_sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
            "gold_complexity": 7,
            "vt": "SELECT SUM(perpetrator.killed) FROM people JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE people.height > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total number of people killed in incidents involving perpetrators, filtered by the height of the individuals in the 'people' table. The placeholder in the WHERE clause represents the minimum height of the individuals being considered.",
            "question": "What is the total kills of the perpetrators with height more than 1.84."
        }
    ],
    "coffee_shop": [
        {
            "sample_id": 806,
            "gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT happy_hour.month FROM happy_hour GROUP BY happy_hour.month HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the months during which happy hour events are held, specifically focusing on those months that have more than a specified number of events. The placeholder in the HAVING clause represents the minimum count of events required for a month to be included in the results.",
            "question": "Which months have more than 2 happy hours?"
        },
        {
            "sample_id": 802,
            "gold_sql": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
            "gold_complexity": 12,
            "vt": "SELECT shop.address, shop.num_of_staff FROM shop WHERE NOT shop.shop_id IN (SELECT shop.shop_id FROM happy_hour)",
            "ba": "The virtual table provides the addresses and number of staff for shops that are not hosting any happy hour events. It filters out shops that have participated in happy hours by checking their IDs against those in the happy_hour table.",
            "question": "Find the address and staff number of the shops that do not have any happy hour."
        },
        {
            "sample_id": 800,
            "gold_sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
            "gold_complexity": 6,
            "vt": "SELECT AVG(shop.num_of_staff), AVG(shop.score) FROM shop",
            "ba": "The virtual table calculates the average number of staff and the average rating score of shops from the 'shop' table.",
            "question": "What are the average score and average staff number of all shops?"
        },
        {
            "sample_id": 805,
            "gold_sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT happy_hour.month FROM happy_hour GROUP BY happy_hour.month ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the months during which happy hour events are held, grouped by month and ordered by the number of events in each month. The placeholder allows for limiting the number of results returned based on a specified numeric value.",
            "question": "Which month has the most happy hours?"
        },
        {
            "sample_id": 804,
            "gold_sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT happy_hour.shop_id, COUNT(*) FROM happy_hour GROUP BY happy_hour.shop_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of happy hour events hosted by each shop, providing a count of events per shop. The placeholder in the LIMIT clause allows users to specify the maximum number of shops to display in the results.",
            "question": "which shop has happy hour most frequently? List its id and number of happy hours."
        },
        {
            "sample_id": 799,
            "gold_sql": "SELECT address FROM shop ORDER BY open_year",
            "gold_complexity": 6,
            "vt": "SELECT shop.address FROM shop ORDER BY shop.open_year",
            "ba": "The virtual table lists the addresses of all shops from the 'shop' table, ordered by the year they were established. This allows users to see the locations of shops in chronological order of their opening.",
            "question": "Show the shop addresses ordered by their opening year."
        },
        {
            "sample_id": 793,
            "gold_sql": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
            "gold_complexity": 10,
            "vt": "SELECT member.time_of_purchase, member.age, member.address FROM member ORDER BY member.time_of_purchase",
            "ba": "The virtual table provides a list of members along with their purchase timestamps, ages, and addresses from the 'member' table, ordered by the time of purchase.",
            "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time."
        },
        {
            "sample_id": 801,
            "gold_sql": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)",
            "gold_complexity": 11,
            "vt": "SELECT shop.shop_id, shop.address FROM shop WHERE shop.score < (SELECT AVG(shop.score) FROM shop)",
            "ba": "The virtual table lists the unique identifiers and addresses of shops from the 'shop' table that have a rating score lower than the average score of all shops. The query uses a subquery to calculate the average score, and the placeholder represents the condition for filtering shops based on their score.",
            "question": "Find the id and address of the shops whose score is below the average score."
        },
        {
            "sample_id": 791,
            "gold_sql": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'",
            "gold_complexity": 6,
            "vt": "SELECT member.name FROM member WHERE member.address = '[placeholder-type:string]' OR member.address = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of members from the 'member' table who reside at either of two specified addresses. The placeholders in the WHERE clause represent the addresses being queried.",
            "question": "Give me the names of members whose address is in Harford or Waterbury."
        },
        {
            "sample_id": 798,
            "gold_sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
            "gold_complexity": 7,
            "vt": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'",
            "ba": "The virtual table provides a list of addresses of members from the 'member' table, excluding those members who hold a specific type of membership card, identified as 'Black'. This is achieved by using the EXCEPT clause to filter out the addresses of members with the specified membership card.",
            "question": "Which address do not have any member with the black membership card?"
        }
    ],
    "architecture": [
        {
            "sample_id": 6946,
            "gold_sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
            "gold_complexity": 11,
            "vt": "SELECT architect.id, architect.name FROM architect JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY architect.id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers and names of architects who have designed two or more bridges. It utilizes a JOIN operation to link the 'architect' table with the 'bridge' table based on the architect's ID, and it groups the results by architect ID to count the number of bridges associated with each architect. The placeholder in the HAVING clause represents the minimum number of bridges an architect must have designed to be included in the results.",
            "question": "What are the ids and names of the architects who built at least 3 bridges ?"
        },
        {
            "sample_id": 6943,
            "gold_sql": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT architect.name, architect.nationality FROM architect JOIN mill AS t2 ON T1.id = T2.architect_id",
            "ba": "The virtual table describes the distinct names and nationalities of architects from the 'architect' table who are associated with mills. The query uses a JOIN operation to link the 'architect' table with the 'mill' table based on the architect's unique identifier, ensuring that only architects who have designed mills are included in the results.",
            "question": "What are the distinct names and nationalities of the architects who have ever built a mill?"
        },
        {
            "sample_id": 6948,
            "gold_sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
            "gold_complexity": 15,
            "vt": "SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 2 UNION SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 1",
            "ba": "The virtual table identifies architects who have designed a specific number of bridges and mills. It selects the unique identifier, name, and gender of architects from the 'architect' table. The query combines results from two separate conditions: one for architects who have designed exactly two bridges and another for those who have designed exactly one mill. The use of JOINs links the architects to their respective structures based on the architect's ID, and the GROUP BY clause ensures that the results are aggregated correctly based on the number of structures designed.",
            "question": "What are the ids, names and genders of the architects who built two bridges or one mill?"
        },
        {
            "sample_id": 6938,
            "gold_sql": "SELECT count(*) FROM architect WHERE gender  =  'female'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM architect WHERE architect.gender = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of architects from the 'architect' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the architects being queried.",
            "question": "How many architects are female?"
        },
        {
            "sample_id": 6952,
            "gold_sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT mill.type, COUNT(*) FROM mill GROUP BY mill.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of mills from the 'mill' table, counting how many mills exist for each type. The results are grouped by the type of mill and ordered by the count of mills in descending order, with a limit on the number of results returned based on a specified numeric value.",
            "question": "What is the most common mill type, and how many are there?"
        },
        {
            "sample_id": 6947,
            "gold_sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT architect.id, architect.name, architect.nationality FROM architect JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY architect.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of architects along with their unique identifiers, names, and nationalities. It aggregates the data by counting the number of mills associated with each architect, allowing users to see which architects have designed the most mills. The results are ordered by this count, and a placeholder is included to limit the number of results returned.",
            "question": "What is the id, name and nationality of the architect who built most mills?"
        },
        {
            "sample_id": 6945,
            "gold_sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT mill.type FROM mill JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = '[placeholder-type:string]' OR T2.nationality = '[placeholder-type:string]'",
            "ba": "The virtual table lists the distinct types of mills from the 'mill' table that are associated with architects of specific nationalities. The query joins the 'mill' table with the 'architect' table to filter mills based on the nationality of their architects. The placeholders in the WHERE clause represent the nationalities being queried.",
            "question": "What are the distinct types of mills that are built by American or Canadian architects?"
        },
        {
            "sample_id": 6950,
            "gold_sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
            "gold_complexity": 6,
            "vt": "SELECT mill.name FROM mill WHERE mill.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of mills from the 'mill' table that match a specific pattern. The placeholder in the WHERE clause allows for filtering mills based on a partial or full name provided by the user.",
            "question": "Which of the mill names contains the french word 'Moulin'?"
        },
        {
            "sample_id": 6940,
            "gold_sql": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
            "gold_complexity": 7,
            "vt": "SELECT MAX(bridge.length_meters), architect.name FROM bridge JOIN architect AS T2 ON T1.architect_id = T2.id",
            "ba": "The virtual table provides the maximum length of bridges in meters along with the names of the architects who designed them. It combines data from the 'bridge' and 'architect' tables, linking them through the architect's unique identifier.",
            "question": "What is the maximum length in meters for the bridges and what are the architects' names?"
        },
        {
            "sample_id": 6951,
            "gold_sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT mill.name FROM mill JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE bridge.length_meters > [placeholder-type:numeric]",
            "ba": "The virtual table lists the distinct names of mills from the 'mill' table that are associated with architects who have also designed bridges longer than a specified length in meters. The query joins the 'mill' and 'bridge' tables through the 'architect' table, ensuring that only mills linked to architects with bridges exceeding the given length are included.",
            "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?"
        }
    ],
    "products_for_hire": [
        {
            "sample_id": 1975,
            "gold_sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
            "gold_complexity": 8,
            "vt": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'",
            "ba": "The virtual table retrieves the monetary value of discount coupons from the 'discount_coupons' table for customers classified as 'good' and 'bad'. It uses an INTERSECT operation to find common coupon amounts associated with both types of customers.",
            "question": "What are the coupon amount of the coupons owned by both good and bad customers?"
        },
        {
            "sample_id": 1968,
            "gold_sql": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT product_type_code) FROM products_for_hire",
            "ba": "The virtual table counts the distinct types of products available for hire from the 'products_for_hire' table. This provides insight into the variety of product types offered.",
            "question": "How many different product types are there?"
        },
        {
            "sample_id": 1973,
            "gold_sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
            "gold_complexity": 6,
            "vt": "SELECT products_for_hire.daily_hire_cost FROM products_for_hire WHERE products_for_hire.product_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table provides the daily hire cost of products available for hire from the 'products_for_hire' table, filtered by a specific product name using a placeholder for string values.",
            "question": "What are the daily hire costs for the products with substring 'Book' in its name?"
        },
        {
            "sample_id": 1972,
            "gold_sql": "SELECT DISTINCT payment_type_code FROM payments",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT payments.payment_type_code FROM payments",
            "ba": "The virtual table displays distinct payment types from the 'payments' table, which records all payment transactions made by customers. The placeholder in the SELECT statement allows for the retrieval of unique payment type codes used in the transactions.",
            "question": "What are all the distinct payment types?"
        },
        {
            "sample_id": 1970,
            "gold_sql": "SELECT avg(amount_due) FROM payments",
            "gold_complexity": 4,
            "vt": "SELECT AVG(payments.amount_due) FROM payments",
            "ba": "The virtual table calculates the average amount due from all payment transactions recorded in the 'payments' table. This provides insight into the typical payment obligations customers have for their bookings.",
            "question": "What is the average amount due for all the payments?"
        },
        {
            "sample_id": 1965,
            "gold_sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
            "gold_complexity": 7,
            "vt": "SELECT products_for_hire.product_description FROM products_booked JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE products_booked.booked_amount = [placeholder-type:numeric]",
            "ba": "The virtual table describes the detailed description of products available for hire that have been booked, filtered by the total amount for the booked products. The placeholder in the WHERE clause represents the booked amount.",
            "question": "What is the product description of the product booked with an amount of 102.76?"
        },
        {
            "sample_id": 1971,
            "gold_sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",
            "gold_complexity": 6,
            "vt": "SELECT MAX(products_booked.booked_count), MIN(products_booked.booked_count), AVG(products_booked.booked_count) FROM products_booked",
            "ba": "The virtual table provides statistical insights into the number of products booked by customers. It calculates the maximum, minimum, and average count of products booked from the 'products_booked' table.",
            "question": "What are the maximum, minimum, and average booked count for the products booked?"
        },
        {
            "sample_id": 1961,
            "gold_sql": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_id, customers.first_name, COUNT(*) FROM customers JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers.customer_id",
            "ba": "The virtual table provides a summary of customers along with their unique identifiers and first names, counting the number of bookings associated with each customer. It aggregates the data by customer ID to show how many bookings each customer has made.",
            "question": "How many bookings did each customer make? List the customer id, first name, and the count."
        },
        {
            "sample_id": 1966,
            "gold_sql": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
            "gold_complexity": 10,
            "vt": "SELECT bookings.booking_start_date, bookings.booking_end_date FROM products_for_hire JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE products_for_hire.product_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the start and end dates of bookings for a specific product available for hire. It joins the 'products_for_hire' table with the 'products_booked' table to link booked products with their respective bookings, and filters the results based on the product name provided as a placeholder.",
            "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?"
        },
        {
            "sample_id": 1963,
            "gold_sql": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT bookings.booking_id, bookings.amount_of_refund FROM bookings JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY bookings.booking_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of booking IDs along with the total refund amounts from the 'bookings' table. It joins the 'bookings' table with the 'payments' table to aggregate the data based on the booking ID. The results are grouped by booking ID and ordered by the count of associated payments, with a limit on the number of results returned.",
            "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
        }
    ],
    "inn_1": [
        {
            "sample_id": 2601,
            "gold_sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM rooms WHERE rooms.bedtype = None.\"king\"",
            "ba": "The virtual table counts the number of rooms from the 'rooms' table that have a specific bed type. The placeholder in the WHERE clause represents the bed type being queried.",
            "question": "Find the number of rooms with a king bed."
        },
        {
            "sample_id": 2584,
            "gold_sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.roomname, rooms.decor FROM rooms WHERE rooms.bedtype = '[placeholder-type:string]' ORDER BY rooms.baseprice",
            "ba": "The virtual table describes the names and decor of rooms from the 'rooms' table that have a specific type of bed. The results are ordered by the base price of the rooms.",
            "question": "What are the names and decor of rooms with a king bed? Sort them by their price"
        },
        {
            "sample_id": 2624,
            "gold_sql": "SELECT count(DISTINCT bedType) FROM Rooms;",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT bedType) FROM rooms",
            "ba": "The virtual table counts the distinct types of beds available in the 'rooms' table. This provides insight into the variety of bed types offered across all rooms.",
            "question": "Find the number of distinct bed types available in this inn."
        },
        {
            "sample_id": 2582,
            "gold_sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
            "gold_complexity": 6,
            "vt": "SELECT SUM(rooms.beds) FROM rooms WHERE rooms.bedtype = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total number of beds available in rooms of a specific bed type from the 'rooms' table. The placeholder in the WHERE clause represents the type of beds being queried.",
            "question": "Find the total number of king beds available."
        },
        {
            "sample_id": 2617,
            "gold_sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.decor, COUNT(*) FROM rooms WHERE rooms.baseprice > [placeholder-type:numeric] GROUP BY rooms.decor",
            "ba": "The virtual table provides a summary of the different room decorations available in the 'rooms' table, along with the count of rooms that have a base price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum base price for filtering the rooms.",
            "question": "Find the number of rooms with price higher than 120 for different decor."
        },
        {
            "sample_id": 2576,
            "gold_sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;",
            "gold_complexity": 16,
            "vt": "SELECT rooms.roomname, reservations.rate, reservations.checkin, reservations.checkout FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY reservations.room ORDER BY reservations.rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the room names, rates, check-in and check-out dates for reservations. It combines data from the 'reservations' and 'rooms' tables, grouping the results by room identifier and ordering them by the rate charged for each reservation. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Return the name, rate, check in and check out date for the room with the highest rate."
        },
        {
            "sample_id": 2570,
            "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.roomname FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY reservations.room ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of rooms from the 'rooms' table that have been reserved, grouped by the room identifier. It orders the results based on the number of reservations for each room and limits the output to a specified number of results.",
            "question": "Which room has the largest number of reservations?"
        },
        {
            "sample_id": 2621,
            "gold_sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
            "gold_complexity": 7,
            "vt": "SELECT rooms.roomname FROM rooms WHERE rooms.bedtype = None.\"king\" OR rooms.bedtype = None.\"queen\"",
            "ba": "The virtual table lists the names of rooms from the 'rooms' table that have either a king or queen bed type. The placeholders in the WHERE clause represent the bed types being queried.",
            "question": "List the name of rooms with king or queen bed."
        },
        {
            "sample_id": 2626,
            "gold_sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomid, rooms.roomname FROM rooms ORDER BY rooms.baseprice LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and names of rooms from the 'rooms' table, ordered by their base price. The placeholder in the LIMIT clause indicates the maximum number of rooms to be displayed.",
            "question": "What are the name and id of the three highest priced rooms?"
        },
        {
            "sample_id": 2631,
            "gold_sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room",
            "gold_complexity": 11,
            "vt": "SELECT rooms.roomname, COUNT(*), reservations.room FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY reservations.room",
            "ba": "The virtual table summarizes the number of reservations for each room by displaying the room name and the count of reservations associated with that room. It joins the 'reservations' table with the 'rooms' table based on the room identifier, allowing us to group the results by room to see how many times each room has been reserved.",
            "question": "Return the name and number of reservations made for each of the rooms."
        },
        {
            "sample_id": 2635,
            "gold_sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
            "gold_complexity": 6,
            "vt": "SELECT rooms.roomname FROM rooms WHERE rooms.baseprice BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of rooms from the 'rooms' table that have a base price within a specified range. The placeholders in the WHERE clause represent the minimum and maximum base prices for filtering the results.",
            "question": "Find the name of rooms whose base price is between 120 and 150."
        },
        {
            "sample_id": 2571,
            "gold_sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
            "gold_complexity": 7,
            "vt": "SELECT reservations.kids FROM reservations WHERE reservations.firstname = None.\"roy\" AND reservations.lastname = None.\"sweazy\"",
            "ba": "The virtual table retrieves the number of kids from the 'reservations' table for a specific guest identified by their first and last name. The placeholders in the WHERE clause represent the first and last names of the guest.",
            "question": "How many kids stay in the rooms reserved by ROY SWEAZY?"
        },
        {
            "sample_id": 2611,
            "gold_sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.decor, COUNT(*) FROM rooms WHERE rooms.bedtype = None.\"king\" GROUP BY rooms.decor",
            "ba": "The virtual table provides a count of rooms grouped by their decor style, specifically filtering for rooms that have a king bed type. The placeholder in the WHERE clause indicates the bed type being queried.",
            "question": "Find the number of rooms with king bed for each decor type."
        },
        {
            "sample_id": 2580,
            "gold_sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
            "gold_complexity": 8,
            "vt": "SELECT reservations.kids FROM reservations WHERE reservations.checkin = None.\"2010-09-21\" AND reservations.firstname = None.\"damien\" AND reservations.lastname = None.\"trachsel\"",
            "ba": "The virtual table retrieves the number of kids from the 'reservations' table for a specific reservation made by a guest with a given first and last name on a particular check-in date. The placeholders in the WHERE clause represent the check-in date, first name, and last name of the guest.",
            "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010."
        },
        {
            "sample_id": 2591,
            "gold_sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';",
            "gold_complexity": 6,
            "vt": "SELECT SUM(rooms.maxoccupancy) FROM rooms WHERE rooms.decor = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total maximum occupancy of rooms from the 'rooms' table that have a specific decor style. The placeholder in the WHERE clause represents the type of decor being queried.",
            "question": "What is the total number of people who could stay in the modern rooms in this inn?"
        },
        {
            "sample_id": 2568,
            "gold_sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomname, rooms.roomid FROM rooms WHERE rooms.baseprice > [placeholder-type:numeric] AND rooms.maxoccupancy > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and unique identifiers of rooms from the 'rooms' table that have a base price exceeding a specified amount and can accommodate more than a certain number of occupants. The placeholders in the WHERE clause represent the minimum base price and maximum occupancy requirements.",
            "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people."
        },
        {
            "sample_id": 2578,
            "gold_sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";",
            "gold_complexity": 8,
            "vt": "SELECT reservations.adults FROM reservations WHERE reservations.checkin = None.\"2010-10-23\" AND reservations.firstname = None.\"conrad\" AND reservations.lastname = None.\"selbig\"",
            "ba": "The virtual table retrieves the number of adults from the 'reservations' table for a specific reservation based on the check-in date and the guest's first and last name. The placeholders in the WHERE clause represent the check-in date and the guest's name.",
            "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010."
        },
        {
            "sample_id": 2610,
            "gold_sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
            "gold_complexity": 8,
            "vt": "SELECT rooms.roomname, rooms.bedtype FROM rooms WHERE rooms.decor = None.\"traditional\"",
            "ba": "The virtual table describes the names and types of beds available in rooms from the 'rooms' table that have a traditional decor. The placeholder in the WHERE clause represents the specific decor type being queried.",
            "question": "What are the bed type and name of all the rooms with traditional decor?"
        },
        {
            "sample_id": 2595,
            "gold_sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE rooms.maxoccupancy = reservations.adults + reservations.kids",
            "ba": "The virtual table counts the number of reservations from the 'reservations' table that match the maximum occupancy of the corresponding rooms from the 'rooms' table. It uses a join to connect the two tables based on the room identifier, and checks if the total number of adults and kids in each reservation equals the maximum occupancy allowed for that room.",
            "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids."
        },
        {
            "sample_id": 2603,
            "gold_sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
            "gold_complexity": 8,
            "vt": "SELECT rooms.bedtype, COUNT(*) FROM rooms GROUP BY rooms.bedtype",
            "ba": "The virtual table summarizes the count of rooms grouped by their bed type from the 'rooms' table. The placeholder in the SELECT clause represents the bed type of the rooms.",
            "question": "Find the number of rooms for each bed type."
        },
        {
            "sample_id": 2567,
            "gold_sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomname, rooms.roomid FROM rooms WHERE rooms.baseprice > [placeholder-type:numeric] AND rooms.maxoccupancy > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and unique identifiers of rooms from the 'rooms' table that have a base price greater than a specified amount and can accommodate more than a specified number of occupants. The placeholders in the WHERE clause represent the minimum base price and maximum occupancy limits.",
            "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids."
        },
        {
            "sample_id": 2600,
            "gold_sql": "SELECT count(*) FROM Rooms;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM rooms",
            "ba": "The virtual table counts the total number of rooms available in the 'rooms' table.",
            "question": "What is the total number of rooms available in this inn?"
        },
        {
            "sample_id": 2615,
            "gold_sql": "SELECT roomName FROM Rooms ORDER BY basePrice;",
            "gold_complexity": 6,
            "vt": "SELECT rooms.roomname FROM rooms ORDER BY rooms.baseprice",
            "ba": "The virtual table lists the names of rooms from the 'rooms' table, ordered by their base price per night. This allows users to see the available rooms sorted by cost.",
            "question": "List the name of all rooms sorted by their prices."
        },
        {
            "sample_id": 2614,
            "gold_sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.decor, AVG(rooms.baseprice), MIN(rooms.baseprice) FROM rooms GROUP BY rooms.decor",
            "ba": "The virtual table provides a summary of room decor along with the average and minimum base price of rooms grouped by their decor type. This allows users to understand the pricing structure in relation to the aesthetic features of the rooms.",
            "question": "What is the average minimum and price of the rooms for each different decor."
        },
        {
            "sample_id": 2609,
            "gold_sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
            "gold_complexity": 8,
            "vt": "SELECT rooms.roomname, rooms.bedtype FROM rooms WHERE rooms.decor = None.\"traditional\"",
            "ba": "The virtual table describes the names and types of beds available in rooms from the 'rooms' table that have a traditional decor. The placeholder in the WHERE clause represents the specific decor type being queried.",
            "question": "List the type of bed and name of all traditional rooms."
        },
        {
            "sample_id": 2608,
            "gold_sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomid, rooms.roomname FROM rooms ORDER BY rooms.baseprice LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and names of rooms from the 'rooms' table, ordered by their base price. The placeholder in the LIMIT clause allows for specifying the maximum number of rooms to be displayed.",
            "question": "Which room has the highest base price?"
        },
        {
            "sample_id": 2589,
            "gold_sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
            "gold_complexity": 8,
            "vt": "SELECT rooms.bedtype, AVG(rooms.baseprice) FROM rooms GROUP BY rooms.bedtype",
            "ba": "The virtual table provides the average base price of rooms grouped by the type of beds available in each room. The placeholder in the SELECT statement represents the bed type, while the AVG function calculates the average price for each group.",
            "question": "What is the average base price of different bed type? List bed type and average base price."
        },
        {
            "sample_id": 2594,
            "gold_sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.decor FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY rooms.decor ORDER BY COUNT(rooms.decor) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique room decorations from the 'rooms' table that have been reserved, along with a count of how many times each decoration has been booked. The placeholder in the LIMIT clause represents the maximum number of decoration types to return.",
            "question": "What is the least popular kind of decor?"
        },
        {
            "sample_id": 2625,
            "gold_sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomid, rooms.roomname FROM rooms ORDER BY rooms.baseprice LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and names of rooms from the 'rooms' table, ordered by their base price. The placeholder in the LIMIT clause allows for specifying the maximum number of rooms to be displayed.",
            "question": "Find the name and id of the top 3 expensive rooms."
        },
        {
            "sample_id": 2636,
            "gold_sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150",
            "gold_complexity": 6,
            "vt": "SELECT rooms.roomname FROM rooms WHERE rooms.baseprice BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of rooms from the 'rooms' table that have a base price within a specified range. The placeholders in the WHERE clause represent the minimum and maximum base prices for filtering the results.",
            "question": "Which rooms cost between 120 and 150? Give me the room names."
        },
        {
            "sample_id": 2599,
            "gold_sql": "SELECT count(*) FROM Rooms;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM rooms",
            "ba": "The virtual table counts the total number of rooms available in the 'rooms' table.",
            "question": "How many rooms are there?"
        },
        {
            "sample_id": 2629,
            "gold_sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*) FROM rooms WHERE NOT rooms.roomid IN (SELECT DISTINCT reservations.room FROM reservations)",
            "ba": "The virtual table counts the number of rooms from the 'rooms' table that are not currently reserved, as indicated by the absence of their identifiers in the 'reservations' table. The placeholder in the query allows for dynamic filtering based on room identifiers.",
            "question": "Find the number of rooms that do not have any reservation."
        },
        {
            "sample_id": 2618,
            "gold_sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.decor, COUNT(*) FROM rooms WHERE rooms.baseprice > [placeholder-type:numeric] GROUP BY rooms.decor",
            "ba": "The virtual table provides a summary of the different room decorations available in the 'rooms' table, along with the count of rooms that have a base price exceeding a specified amount. The placeholder in the WHERE clause represents the minimum base price for filtering the rooms.",
            "question": "How many rooms cost more than 120, for each different decor?"
        },
        {
            "sample_id": 2596,
            "gold_sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE rooms.maxoccupancy = reservations.adults + reservations.kids",
            "ba": "The virtual table counts the number of reservations from the 'reservations' table that match the maximum occupancy of the corresponding rooms from the 'rooms' table. It uses a join to connect the two tables based on the room identifier, and checks if the total number of adults and kids in each reservation equals the maximum occupancy allowed for that room.",
            "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?"
        },
        {
            "sample_id": 2569,
            "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.roomname FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY reservations.room ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of rooms from the 'rooms' table that have been reserved, showing the most frequently booked rooms based on the number of reservations. The placeholder in the LIMIT clause represents the maximum number of room names to be displayed.",
            "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations."
        },
        {
            "sample_id": 2583,
            "gold_sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;",
            "gold_complexity": 10,
            "vt": "SELECT rooms.roomname, rooms.decor FROM rooms WHERE rooms.bedtype = '[placeholder-type:string]' ORDER BY rooms.baseprice",
            "ba": "The virtual table describes the names and decor of rooms from the 'rooms' table that have a specific type of bed. The results are ordered by the base price of the rooms.",
            "question": "List the names and decor of rooms that have a king bed. Sort the list by their price."
        },
        {
            "sample_id": 2588,
            "gold_sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
            "gold_complexity": 6,
            "vt": "SELECT rooms.decor FROM rooms WHERE rooms.roomname = None.\"recluse and defiance\"",
            "ba": "The virtual table describes the decor of a specific room from the 'rooms' table based on its name. The placeholder in the WHERE clause represents the name of the room being queried.",
            "question": "Return the decor of the room named \"Recluse and defiance\"."
        },
        {
            "sample_id": 2587,
            "gold_sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
            "gold_complexity": 6,
            "vt": "SELECT rooms.decor FROM rooms WHERE rooms.roomname = None.\"recluse and defiance\"",
            "ba": "The virtual table describes the decor of a specific room from the 'rooms' table based on its name. The placeholder in the WHERE clause represents the name of the room being queried.",
            "question": "What is the decor of room Recluse and defiance?"
        },
        {
            "sample_id": 2622,
            "gold_sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
            "gold_complexity": 7,
            "vt": "SELECT rooms.roomname FROM rooms WHERE rooms.bedtype = None.\"king\" OR rooms.bedtype = None.\"queen\"",
            "ba": "The virtual table describes the names of rooms from the 'rooms' table that have either a king or queen bed type. The placeholders in the WHERE clause represent the bed types being queried.",
            "question": "What are the names of rooms that have either king or queen bed?"
        },
        {
            "sample_id": 2579,
            "gold_sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
            "gold_complexity": 8,
            "vt": "SELECT reservations.kids FROM reservations WHERE reservations.checkin = None.\"2010-09-21\" AND reservations.firstname = None.\"damien\" AND reservations.lastname = None.\"trachsel\"",
            "ba": "The virtual table retrieves the number of kids from the 'reservations' table for a specific reservation made by a guest with a given first and last name on a particular check-in date. The placeholders in the WHERE clause represent the check-in date, first name, and last name of the guest.",
            "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?"
        },
        {
            "sample_id": 2607,
            "gold_sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomid, rooms.roomname FROM rooms ORDER BY rooms.baseprice LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique identifiers and names of rooms from the 'rooms' table, ordered by their base price. The placeholder in the LIMIT clause indicates the maximum number of rooms to be displayed.",
            "question": "Find the id and name of the most expensive base price room."
        },
        {
            "sample_id": 2586,
            "gold_sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomname, rooms.baseprice FROM rooms ORDER BY rooms.baseprice LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the names and base prices of rooms from the 'rooms' table, sorted by the base price in ascending order. The placeholder in the LIMIT clause indicates the maximum number of room entries to return.",
            "question": "What are the room name and base price of the room with the lowest base price?"
        },
        {
            "sample_id": 2572,
            "gold_sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
            "gold_complexity": 7,
            "vt": "SELECT reservations.kids FROM reservations WHERE reservations.firstname = None.\"roy\" AND reservations.lastname = None.\"sweazy\"",
            "ba": "The virtual table retrieves the number of kids from the 'reservations' table for a specific guest identified by their first and last name. The placeholders in the WHERE clause represent the first and last names of the guest.",
            "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ."
        },
        {
            "sample_id": 2633,
            "gold_sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
            "gold_complexity": 9,
            "vt": "SELECT rooms.roomname FROM reservations JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY reservations.room HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of rooms from the 'rooms' table that have been reserved more than a specified number of times. The query joins the 'reservations' table with the 'rooms' table based on the room identifier, groups the results by room, and filters to include only those rooms that exceed the specified reservation count.",
            "question": "Find the names of rooms that have been reserved for more than 60 times."
        }
    ],
    "cre_Docs_and_Epenses": [
        {
            "sample_id": 6419,
            "gold_sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
            "gold_complexity": 8,
            "vt": "SELECT ref_document_types.document_type_code, ref_document_types.document_type_name, ref_document_types.document_type_description FROM ref_document_types",
            "ba": "The virtual table describes the unique codes, names, and descriptions of document types from the 'ref_document_types' table.",
            "question": "What are the codes, names, and descriptions of the different document types?"
        },
        {
            "sample_id": 6381,
            "gold_sql": "SELECT account_id ,  account_details FROM Accounts",
            "gold_complexity": 6,
            "vt": "SELECT accounts.account_id, accounts.account_details FROM accounts",
            "ba": "The virtual table provides a view of account identifiers and their corresponding details from the 'accounts' table. The data is linked to specific statements through foreign keys, allowing for a comprehensive understanding of each account's relationship with its statement.",
            "question": "What are the ids and details of all accounts?"
        },
        {
            "sample_id": 6394,
            "gold_sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
            "gold_complexity": 10,
            "vt": "SELECT documents.document_type_code, documents.document_name, documents.document_description FROM documents WHERE documents.document_name = '[placeholder-type:string]' OR documents.document_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the document type code, name, and description of documents from the 'documents' table that match specific document names. The placeholders in the WHERE clause represent the names of the documents being queried.",
            "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'."
        },
        {
            "sample_id": 6409,
            "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT documents.project_id FROM documents GROUP BY documents.project_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the project IDs from the 'documents' table that have a count of associated documents greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of documents required for a project.",
            "question": "What are project ids of projects that have 2 or more corresponding documents?"
        },
        {
            "sample_id": 6387,
            "gold_sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
            "gold_complexity": 9,
            "vt": "SELECT accounts.statement_id, statements.statement_details, accounts.account_details FROM accounts JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
            "ba": "The virtual table presents the statement ID, details of the statement, and account details from the 'accounts' table, joined with the 'statements' table based on the statement ID. This allows for a comprehensive view of accounts linked to their respective statements.",
            "question": "What are the statement ids, statement details, and account details, for all accounts?"
        },
        {
            "sample_id": 6447,
            "gold_sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "gold_complexity": 8,
            "vt": "SELECT documents_with_expenses.budget_type_code, COUNT(*) FROM documents_with_expenses GROUP BY documents_with_expenses.budget_type_code",
            "ba": "The virtual table summarizes the count of documents associated with each budget type from the 'documents_with_expenses' table. The placeholder in the SELECT statement represents the budget type code, and the COUNT function aggregates the number of documents for each unique budget type code.",
            "question": "What are the different budget type codes, and how many documents are there for each?"
        },
        {
            "sample_id": 6434,
            "gold_sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
            "gold_complexity": 6,
            "vt": "SELECT ref_budget_codes.budget_type_code, ref_budget_codes.budget_type_description FROM ref_budget_codes",
            "ba": "The virtual table provides a list of budget type codes and their corresponding descriptions from the 'ref_budget_codes' table. This table contains unique codes that represent different types of budgets along with detailed descriptions for each type.",
            "question": "List all budget type codes and descriptions."
        },
        {
            "sample_id": 6380,
            "gold_sql": "SELECT account_id ,  account_details FROM Accounts",
            "gold_complexity": 6,
            "vt": "SELECT accounts.account_id, accounts.account_details FROM accounts",
            "ba": "The virtual table provides a view of account identifiers and their corresponding details from the 'accounts' table. The data is linked to specific statements through foreign keys, allowing for a comprehensive understanding of each account's information.",
            "question": "Show all account ids and account details."
        },
        {
            "sample_id": 6408,
            "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT documents.project_id FROM documents GROUP BY documents.project_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the project IDs from the 'documents' table that have a count of associated documents greater than or equal to a specified number. This allows users to identify projects that have a significant number of documents linked to them.",
            "question": "Show the ids for projects with at least 2 documents."
        },
        {
            "sample_id": 6379,
            "gold_sql": "SELECT count(*) FROM Accounts",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM accounts",
            "ba": "The virtual table counts the total number of accounts from the 'accounts' table.",
            "question": "Count the number of accounts."
        },
        {
            "sample_id": 6401,
            "gold_sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), documents.project_id FROM documents WHERE documents.document_type_code = None.\"bk\" GROUP BY documents.project_id",
            "ba": "The virtual table counts the number of documents associated with each project, filtered by a specific document type code. The placeholder in the WHERE clause represents the document type code that is being queried.",
            "question": "Count the number of documents with the type code BK that correspond to each product id."
        },
        {
            "sample_id": 6461,
            "gold_sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
            "gold_complexity": 8,
            "vt": "SELECT MAX(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
            "ba": "The virtual table retrieves the maximum account details from the 'Accounts' table and also lists account details that contain the number '5'.",
            "question": "Return the account details with the greatest value, as well as those that include the character 5."
        },
        {
            "sample_id": 6384,
            "gold_sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
            "gold_complexity": 6,
            "vt": "SELECT statements.statement_id, statements.statement_details FROM statements",
            "ba": "The virtual table provides a list of statement IDs and their corresponding details from the 'statements' table.",
            "question": "List all statement ids and statement details."
        },
        {
            "sample_id": 6427,
            "gold_sql": "SELECT project_id ,  project_details FROM Projects",
            "gold_complexity": 6,
            "vt": "SELECT projects.project_id, projects.project_details FROM projects",
            "ba": "The virtual table describes the unique identifiers and details of projects from the 'projects' table.",
            "question": "What are the ids and details for each project?"
        },
        {
            "sample_id": 6382,
            "gold_sql": "SELECT count(*) FROM Statements",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM statements",
            "ba": "The virtual table provides a count of all statements recorded in the 'statements' table. This count represents the total number of unique statements available in the database.",
            "question": "How many statements do we have?"
        },
        {
            "sample_id": 6404,
            "gold_sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id",
            "gold_complexity": 8,
            "vt": "SELECT documents.project_id, COUNT(*) FROM documents GROUP BY documents.project_id",
            "ba": "The virtual table summarizes the number of documents associated with each project by grouping the documents based on their project identifiers. The result will show each project's ID along with the count of documents linked to it.",
            "question": "Show project ids and the number of documents in each project."
        },
        {
            "sample_id": 6392,
            "gold_sql": "SELECT count(*) FROM Documents",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM documents",
            "ba": "The virtual table provides a count of all documents present in the 'documents' table, which contains various details about each document including its unique identifier, type, project association, date, name, description, and other related information.",
            "question": "Show the number of documents."
        },
        {
            "sample_id": 6435,
            "gold_sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
            "gold_complexity": 6,
            "vt": "SELECT ref_budget_codes.budget_type_code, ref_budget_codes.budget_type_description FROM ref_budget_codes",
            "ba": "The virtual table provides a list of budget type codes and their corresponding descriptions from the 'ref_budget_codes' table. This allows users to understand the different types of budgets available in the system.",
            "question": "What are the type codes and descriptions of each budget type?"
        },
        {
            "sample_id": 6407,
            "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT documents.project_id FROM documents GROUP BY documents.project_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique project identifiers from the 'documents' table, grouping the results by project ID. It orders the projects based on the count of associated documents and limits the output to a specified number of projects.",
            "question": "Return the id of the project that has the fewest corresponding documents."
        },
        {
            "sample_id": 6418,
            "gold_sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
            "gold_complexity": 8,
            "vt": "SELECT ref_document_types.document_type_code, ref_document_types.document_type_name, ref_document_types.document_type_description FROM ref_document_types",
            "ba": "The virtual table describes the unique codes, names, and descriptions of document types from the 'ref_document_types' table.",
            "question": "Show all document type codes, document type names, document type descriptions."
        },
        {
            "sample_id": 6423,
            "gold_sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
            "gold_complexity": 9,
            "vt": "SELECT ref_document_types.document_type_name, ref_document_types.document_type_description, documents.document_date FROM ref_document_types JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code",
            "ba": "The virtual table describes the names and descriptions of document types along with the creation dates of the associated documents. It combines information from the 'ref_document_types' table and the 'documents' table based on the matching document type code.",
            "question": "Return the type name, type description, and date of creation for each document."
        },
        {
            "sample_id": 6388,
            "gold_sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID",
            "gold_complexity": 8,
            "vt": "SELECT accounts.statement_id, COUNT(*) FROM accounts GROUP BY accounts.statement_id",
            "ba": "The virtual table summarizes the number of accounts associated with each statement from the 'accounts' table. The placeholder in the SELECT clause represents the statement identifier, while the COUNT function aggregates the total number of accounts linked to each statement.",
            "question": "Show all statement id and the number of accounts for each statement."
        },
        {
            "sample_id": 6406,
            "gold_sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT documents.project_id FROM documents GROUP BY documents.project_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique project identifiers from the 'documents' table, grouping the results by project ID. It orders the projects based on the count of associated documents and limits the output to a specified number of projects.",
            "question": "What is the id of the project with least number of documents?"
        },
        {
            "sample_id": 6429,
            "gold_sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
            "gold_complexity": 11,
            "vt": "SELECT projects.project_id, projects.project_details FROM projects JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY projects.project_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the unique identifiers and details of projects from the 'projects' table that have more than a specified number of associated documents. The placeholder in the HAVING clause represents the minimum count of documents required for a project to be included in the results.",
            "question": "Return the ids and details corresponding to projects for which there are more than two documents."
        },
        {
            "sample_id": 6445,
            "gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
            "gold_complexity": 7,
            "vt": "SELECT documents_with_expenses.document_id FROM documents_with_expenses JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE ref_budget_codes.budget_type_description = None.\"government\"",
            "ba": "The virtual table retrieves the unique identifiers of documents associated with expenses from the 'documents_with_expenses' table, specifically filtering for those documents that are linked to a budget type described as 'government'.",
            "question": "Give the ids for documents that have the budget description 'Government'."
        },
        {
            "sample_id": 6383,
            "gold_sql": "SELECT count(*) FROM Statements",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM statements",
            "ba": "The virtual table counts the total number of statements recorded in the 'statements' table.",
            "question": "Count the number of statements."
        },
        {
            "sample_id": 6378,
            "gold_sql": "SELECT count(*) FROM Accounts",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM accounts",
            "ba": "The virtual table provides a count of all accounts from the 'accounts' table. This count represents the total number of unique accounts recorded in the database.",
            "question": "How many accounts do we have?"
        },
        {
            "sample_id": 6386,
            "gold_sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
            "gold_complexity": 9,
            "vt": "SELECT accounts.statement_id, statements.statement_details, accounts.account_details FROM accounts JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
            "ba": "The virtual table presents the statement ID, details of the statement, and account details from the 'accounts' table, joined with the 'statements' table based on the statement ID. The placeholders represent the necessary identifiers for filtering or further querying.",
            "question": "Show statement id, statement detail, account detail for accounts."
        },
        {
            "sample_id": 6402,
            "gold_sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
            "gold_complexity": 9,
            "vt": "SELECT documents.document_name, documents.document_date FROM documents JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE projects.project_details = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and creation dates of documents from the 'documents' table that are linked to specific projects. The placeholder in the WHERE clause represents the details of the project being queried.",
            "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'."
        },
        {
            "sample_id": 6449,
            "gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT documents_with_expenses.budget_type_code FROM documents_with_expenses GROUP BY documents_with_expenses.budget_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique budget type codes from the 'documents_with_expenses' table, grouping them to count occurrences and ordering the results based on the count. The placeholder allows for limiting the number of results returned.",
            "question": "Give the budget type code that is most common among documents with expenses."
        },
        {
            "sample_id": 6413,
            "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT documents.document_type_code FROM documents GROUP BY documents.document_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique document type codes from the 'documents' table, grouping them to count occurrences and ordering them by the count. The placeholder allows for limiting the number of results returned based on a specified numeric value.",
            "question": "Return the code of the document type that is most common."
        },
        {
            "sample_id": 6425,
            "gold_sql": "SELECT count(*) FROM Projects",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM projects",
            "ba": "The virtual table counts the total number of projects in the 'projects' table.",
            "question": "How many projects are there?"
        },
        {
            "sample_id": 6398,
            "gold_sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_name, documents.document_id FROM documents WHERE documents.document_type_code = None.\"bk\"",
            "ba": "The virtual table describes the names and unique identifiers of documents from the 'documents' table that are associated with a specific document type. The placeholder in the WHERE clause represents the document type code.",
            "question": "Find names and ids of all documents with document type code BK."
        },
        {
            "sample_id": 6416,
            "gold_sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
            "gold_complexity": 9,
            "vt": "SELECT statements.statement_details, documents.document_name FROM statements JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE statements.statement_details = '[placeholder-type:string]'",
            "ba": "The virtual table describes the details of statements along with the names of documents associated with those statements. It retrieves the statement details from the 'statements' table and the document name from the 'documents' table, linking them through their respective identifiers. The placeholder in the WHERE clause represents a specific detail of the statement that is being queried.",
            "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'."
        },
        {
            "sample_id": 6385,
            "gold_sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
            "gold_complexity": 6,
            "vt": "SELECT statements.statement_id, statements.statement_details FROM statements",
            "ba": "The virtual table retrieves the unique identifier and detailed information for each statement from the 'statements' table.",
            "question": "What are the ids and details of all statements?"
        },
        {
            "sample_id": 6446,
            "gold_sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "gold_complexity": 8,
            "vt": "SELECT documents_with_expenses.budget_type_code, COUNT(*) FROM documents_with_expenses GROUP BY documents_with_expenses.budget_type_code",
            "ba": "The virtual table summarizes the count of documents associated with each budget type from the 'documents_with_expenses' table. The placeholder in the SELECT statement represents the budget type code, and the COUNT function aggregates the number of documents for each unique budget type code.",
            "question": "Show budget type codes and the number of documents in each budget type."
        },
        {
            "sample_id": 6458,
            "gold_sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
            "gold_complexity": 8,
            "vt": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'",
            "ba": "The virtual table retrieves the document dates from the 'Documents' table for documents that are associated with two specific budget types: 'GV' and 'SF'. It uses an INTERSECT operation to ensure that only the dates common to both budget types are returned.",
            "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?"
        },
        {
            "sample_id": 6444,
            "gold_sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
            "gold_complexity": 7,
            "vt": "SELECT documents_with_expenses.document_id FROM documents_with_expenses JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE ref_budget_codes.budget_type_description = None.\"government\"",
            "ba": "The virtual table retrieves the unique identifiers of documents associated with expenses from the 'documents_with_expenses' table, specifically filtering for those documents that are linked to a budget type described as 'government'.",
            "question": "Show ids for all documents with budget types described as 'Government'."
        },
        {
            "sample_id": 6454,
            "gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
            "gold_complexity": 7,
            "vt": "SELECT documents.document_id FROM documents JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE documents.document_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the unique identifiers of documents from the 'documents' table that are associated with expenses. It filters the results based on a specified document name using a placeholder for string values.",
            "question": "What are the ids of documents with letter 's' in the name with any expense budgets."
        },
        {
            "sample_id": 6439,
            "gold_sql": "SELECT count(*) FROM Documents_with_expenses",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM documents_with_expenses",
            "ba": "The virtual table provides a count of all documents that are associated with expenses from the 'documents_with_expenses' table. This count helps in understanding the total number of documents that have financial implications.",
            "question": "Count the number of documents with expenses."
        },
        {
            "sample_id": 6390,
            "gold_sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT accounts.statement_id, statements.statement_details FROM accounts JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY accounts.statement_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table presents a summary of account statements by linking the 'accounts' table with the 'statements' table. It retrieves the statement ID and details for each account, grouping the results by statement ID to aggregate the accounts associated with each statement. The results are ordered by the count of accounts per statement, and a placeholder is used to limit the number of results returned.",
            "question": "Show the statement id and the statement detail for the statement with most number of accounts."
        },
        {
            "sample_id": 6415,
            "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_type_code FROM documents GROUP BY documents.document_type_code HAVING COUNT(*) < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique document type codes from the 'documents' table, grouping them to count how many documents exist for each type. It filters the results to only include those document types that have fewer than a specified number of documents associated with them.",
            "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
        },
        {
            "sample_id": 6393,
            "gold_sql": "SELECT count(*) FROM Documents",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM documents",
            "ba": "The virtual table provides a count of all documents present in the 'documents' table. This count gives an overview of the total number of documents recorded in the database.",
            "question": "Count the number of documents."
        },
        {
            "sample_id": 6417,
            "gold_sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
            "gold_complexity": 9,
            "vt": "SELECT statements.statement_details, documents.document_name FROM statements JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE statements.statement_details = '[placeholder-type:string]'",
            "ba": "The virtual table describes the details of statements along with the names of documents associated with those statements. It retrieves the statement details from the 'statements' table and the document name from the 'documents' table, linking them through their respective identifiers. The placeholder in the WHERE clause represents a specific detail of the statement that is being queried.",
            "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?"
        },
        {
            "sample_id": 6455,
            "gold_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
            "gold_complexity": 7,
            "vt": "SELECT documents.document_id FROM documents JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE documents.document_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the unique identifiers of documents from the 'documents' table that are associated with expenses. It filters the results based on a specified document name using a placeholder for string values.",
            "question": "Give the ids of documents that have expenses and contain the letter s in their names."
        },
        {
            "sample_id": 6411,
            "gold_sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_type_code, COUNT(*) FROM documents GROUP BY documents.document_type_code",
            "ba": "The virtual table summarizes the count of documents grouped by their type from the 'documents' table. Each document is associated with a specific type indicated by 'document_type_code'. The result will show how many documents exist for each type, providing insights into the distribution of document types.",
            "question": "How many documents are there of each type?"
        },
        {
            "sample_id": 6450,
            "gold_sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
            "gold_complexity": 6,
            "vt": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses",
            "ba": "The virtual table identifies the unique document IDs from the 'Documents' table that are not associated with any expenses in the 'Documents_with_expenses' table. This is achieved by selecting all document IDs from 'Documents' and excluding those found in 'Documents_with_expenses'.",
            "question": "What are the ids of documents which don't have expense budgets?"
        },
        {
            "sample_id": 6448,
            "gold_sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT documents_with_expenses.budget_type_code FROM documents_with_expenses GROUP BY documents_with_expenses.budget_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique budget type codes from the 'documents_with_expenses' table, grouping them to count occurrences and ordering the results based on the count. The placeholder allows for limiting the number of results returned.",
            "question": "What is the budget type code with most number of documents."
        },
        {
            "sample_id": 6414,
            "gold_sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_type_code FROM documents GROUP BY documents.document_type_code HAVING COUNT(*) < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique document type codes from the 'documents' table, grouping them to count how many documents exist for each type. It filters the results to only include those document types that have fewer than a specified number of documents associated with them.",
            "question": "Show the document type code with fewer than 3 documents."
        },
        {
            "sample_id": 6426,
            "gold_sql": "SELECT project_id ,  project_details FROM Projects",
            "gold_complexity": 6,
            "vt": "SELECT projects.project_id, projects.project_details FROM projects",
            "ba": "The virtual table describes the unique identifiers and details of projects from the 'projects' table.",
            "question": "List ids and details for all projects."
        }
    ],
    "product_catalog": [
        {
            "sample_id": 318,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY catalog_contents.price_in_dollars LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of catalog entries from the 'catalog_contents' table, ordered by their price in dollars. The query limits the number of results returned based on a specified numeric value.",
            "question": "Find the entry name of the catalog with the highest price (in USD)."
        },
        {
            "sample_id": 334,
            "gold_sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
            "gold_complexity": 9,
            "vt": "SELECT attribute_definitions.attribute_name, attribute_definitions.attribute_id FROM attribute_definitions JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE catalog_contents_additional_attributes.attribute_value = [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and unique identifiers of attributes from the 'attribute_definitions' table that are linked to specific entries in the 'catalog_contents_additional_attributes' table. The placeholder in the WHERE clause represents a numeric value associated with the attribute.",
            "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID."
        },
        {
            "sample_id": 330,
            "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
            "gold_complexity": 7,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE catalog_contents_additional_attributes.catalog_level_number = None.\"8\"",
            "ba": "The virtual table describes the names of catalog entries from the 'catalog_contents' table that are associated with a specific level number in the catalog structure. The query joins the 'catalog_contents' table with the 'catalog_contents_additional_attributes' table to filter entries based on the specified catalog level number.",
            "question": "What are the names of catalog entries with level number 8?"
        },
        {
            "sample_id": 311,
            "gold_sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT catalogs.catalog_publisher FROM catalogs GROUP BY catalogs.catalog_publisher ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the publishers of catalogs from the 'catalogs' table, grouping them to count how many catalogs each publisher has. The result is ordered by the number of catalogs in descending order, and a placeholder is used to limit the number of publishers returned.",
            "question": "Which catalog publisher has published the most catalogs?"
        },
        {
            "sample_id": 309,
            "gold_sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT (catalogs.catalog_publisher) FROM catalogs WHERE catalogs.catalog_publisher LIKE None.\"%murray%\"",
            "ba": "The virtual table retrieves distinct publishers from the 'catalogs' table whose names contain the substring 'murray'.",
            "question": "Find all the catalog publishers whose name contains \"Murray\""
        },
        {
            "sample_id": 332,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
            "gold_complexity": 8,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.length < [placeholder-type:numeric] OR catalog_contents.width > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of catalog entries from the 'catalog_contents' table that meet specific dimensional criteria. The placeholders in the WHERE clause represent numeric values for length and width measurements.",
            "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names."
        },
        {
            "sample_id": 326,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY catalog_contents.capacity LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of catalog entries from the 'catalog_contents' table, ordered by their capacity. The placeholder in the LIMIT clause allows the user to specify the maximum number of entries to retrieve.",
            "question": "Which catalog content has the smallest capacity? Return the catalog entry name."
        },
        {
            "sample_id": 310,
            "gold_sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT (catalogs.catalog_publisher) FROM catalogs WHERE catalogs.catalog_publisher LIKE None.\"%murray%\"",
            "ba": "The virtual table retrieves distinct publishers from the 'catalogs' table whose names contain a specific substring. The placeholder in the WHERE clause allows for filtering based on the publisher's name, enabling users to search for publishers that match their criteria.",
            "question": "Which catalog publishers have substring \"Murray\" in their names?"
        },
        {
            "sample_id": 338,
            "gold_sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT catalogs.date_of_latest_revision FROM catalogs GROUP BY catalogs.date_of_latest_revision HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides the latest revision dates of catalogs from the 'catalogs' table, grouped by the date of the latest revision. The placeholder in the HAVING clause represents a numeric value that specifies the minimum count of catalogs that must share the same latest revision date to be included in the results.",
            "question": "On which days more than one revisions were made on catalogs."
        },
        {
            "sample_id": 331,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
            "gold_complexity": 8,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.length < [placeholder-type:numeric] OR catalog_contents.width > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of catalog entries from the 'catalog_contents' table that either have a length less than a specified value or a width greater than a specified value. The placeholders in the WHERE clause represent numeric values for length and width.",
            "question": "Find the names of the products with length smaller than 3 or height greater than 5."
        },
        {
            "sample_id": 328,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
            "gold_complexity": 6,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.product_stock_number LIKE None.\"2%\"",
            "ba": "The virtual table describes the names of catalog entries from the 'catalog_contents' table where the product stock number matches a specific pattern. The placeholder in the WHERE clause represents a pattern for filtering stock numbers.",
            "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names."
        },
        {
            "sample_id": 315,
            "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE catalog_contents_additional_attributes.attribute_value = (SELECT catalog_contents_additional_attributes.attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table describes the names of catalog entries from the 'catalog_contents' table that are associated with the most frequently occurring attribute value in the 'catalog_contents_additional_attributes' table. The query uses a JOIN to link the two tables based on the catalog entry identifier and filters the results to include only those entries that match the most common attribute value.",
            "question": "What are the entry names of catalog with the attribute possessed by most entries."
        },
        {
            "sample_id": 327,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
            "gold_complexity": 6,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents WHERE catalog_contents.product_stock_number LIKE None.\"2%\"",
            "ba": "The virtual table retrieves the names of catalog entries from the 'catalog_contents' table where the product stock number matches a specific pattern. The placeholder in the LIKE clause allows for dynamic input to filter entries based on their stock number.",
            "question": "Find the names of all the products whose stock number starts with \"2\"."
        },
        {
            "sample_id": 329,
            "gold_sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
            "gold_complexity": 7,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE catalog_contents_additional_attributes.catalog_level_number = None.\"8\"",
            "ba": "The virtual table describes the names of catalog entries from the 'catalog_contents' table that are associated with a specific level number in the catalog structure. The query joins the 'catalog_contents' table with the 'catalog_contents_additional_attributes' table to filter entries based on the specified catalog level number.",
            "question": "Find the names of catalog entries with level number 8."
        },
        {
            "sample_id": 324,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY catalog_contents.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of catalog entries from the 'catalog_contents' table, ordered by their height. The placeholder in the LIMIT clause represents the maximum number of entries to be returned.",
            "question": "Which catalog content has the highest height? Give me the catalog entry name."
        },
        {
            "sample_id": 305,
            "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
            "gold_complexity": 6,
            "vt": "SELECT attribute_definitions.attribute_data_type FROM attribute_definitions WHERE attribute_definitions.attribute_name = None.\"green\"",
            "ba": "The virtual table retrieves the data type of a specific attribute from the 'attribute_definitions' table based on the attribute's name. The placeholder in the WHERE clause represents the name of the attribute being queried.",
            "question": "What is the attribute data type of the attribute with name \"Green\"?"
        },
        {
            "sample_id": 302,
            "gold_sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT (catalog_contents.catalog_entry_name) FROM catalog_contents",
            "ba": "The virtual table lists unique catalog entry names from the 'catalog_contents' table.",
            "question": "What are all the catalog entry names?"
        },
        {
            "sample_id": 337,
            "gold_sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT catalogs.date_of_latest_revision FROM catalogs GROUP BY catalogs.date_of_latest_revision HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides the latest revision dates of catalogs from the 'catalogs' table, grouped by the revision date. It filters the results to include only those dates that have more than a specified number of catalogs associated with them, indicated by a numeric placeholder.",
            "question": "Find the dates on which more than one revisions were made."
        },
        {
            "sample_id": 313,
            "gold_sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
            "gold_complexity": 9,
            "vt": "SELECT catalogs.catalog_name, catalogs.date_of_publication FROM catalogs JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_structure.catalog_level_number > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and publication dates of catalogs from the 'catalogs' table that are associated with a specific catalog level in the 'catalog_structure' table. The placeholder in the WHERE clause represents a numeric value indicating the minimum catalog level number to filter the results.",
            "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5."
        },
        {
            "sample_id": 335,
            "gold_sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
            "gold_complexity": 8,
            "vt": "SELECT catalog_contents.catalog_entry_name, catalog_contents.capacity FROM catalog_contents WHERE catalog_contents.price_in_dollars > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and capacities of catalog entries from the 'catalog_contents' table where the price in dollars exceeds a specified amount. The placeholder in the WHERE clause represents the price threshold.",
            "question": "Find the name and capacity of products with price greater than 700 (in USD)."
        },
        {
            "sample_id": 306,
            "gold_sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
            "gold_complexity": 6,
            "vt": "SELECT attribute_definitions.attribute_data_type FROM attribute_definitions WHERE attribute_definitions.attribute_name = None.\"green\"",
            "ba": "The virtual table retrieves the data type of a specific attribute from the 'attribute_definitions' table based on the attribute's name. The placeholder in the WHERE clause represents the name of the attribute being queried.",
            "question": "Find the attribute data type for the attribute named \"Green\"."
        },
        {
            "sample_id": 340,
            "gold_sql": "SELECT count(*) FROM catalog_contents",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM catalog_contents",
            "ba": "The virtual table provides a count of all entries in the 'catalog_contents' table, which contains detailed information about various catalog entries.",
            "question": "Find the total number of catalog contents."
        },
        {
            "sample_id": 325,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY catalog_contents.capacity LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of catalog entries from the 'catalog_contents' table, ordered by their capacity. The placeholder in the LIMIT clause allows the user to specify the maximum number of entries to retrieve.",
            "question": "Find the name of the product that has the smallest capacity."
        },
        {
            "sample_id": 323,
            "gold_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT catalog_contents.catalog_entry_name FROM catalog_contents ORDER BY catalog_contents.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of catalog entries from the 'catalog_contents' table, ordered by their height. The placeholder in the LIMIT clause allows the user to specify the maximum number of entries to retrieve.",
            "question": "What is the product with the highest height? Give me the catalog entry name."
        },
        {
            "sample_id": 322,
            "gold_sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
            "gold_complexity": 5,
            "vt": "SELECT AVG(catalog_contents.price_in_euros), MIN(catalog_contents.price_in_euros) FROM catalog_contents",
            "ba": "The virtual table calculates the average and minimum price in euros of products listed in the 'catalog_contents' table. The placeholders represent the specific price values that will be computed based on the entries in the catalog.",
            "question": "Give me the average and minimum price (in Euro) of the products."
        }
    ],
    "insurance_fnol": [
        {
            "sample_id": 921,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_name FROM customers JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE services.service_name = None.\"close a policy\" OR services.service_name = None.\"upgrade a policy\"",
            "ba": "The virtual table retrieves the names of customers who have reported a loss related to specific services, namely 'close a policy' or 'upgrade a policy'. It joins the 'customers' table with the 'first_notification_of_loss' table to link customers to their loss notifications, and further joins with the 'services' table to filter based on the service names.",
            "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\"."
        },
        {
            "sample_id": 919,
            "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
            "gold_complexity": 6,
            "vt": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
            "ba": "The virtual table lists the names of customers from the 'customers' table who have not reported any loss notifications. It does this by excluding those customers who are linked to any records in the 'first_notification_of_loss' table, which indicates they have reported a loss.",
            "question": "Find the names of users who do not have a first notification of loss record."
        },
        {
            "sample_id": 906,
            "gold_sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT claims.effective_date FROM claims JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY claims.claim_id ORDER BY SUM(settlements.settlement_amount) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the effective dates of claims from the 'claims' table, joining it with the 'settlements' table to aggregate the total settlement amounts for each claim. The results are grouped by claim ID and ordered by the total settlement amount, limiting the output to a specified number of records.",
            "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim."
        },
        {
            "sample_id": 901,
            "gold_sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
            "gold_complexity": 5,
            "vt": "SELECT SUM(settlements.settlement_amount), AVG(settlements.settlement_amount) FROM settlements",
            "ba": "The virtual table calculates the total and average settlement amounts from the 'settlements' table. The placeholders represent the values for the total and average amounts of settlements that have been processed.",
            "question": "Find the total and average amount of settlements."
        },
        {
            "sample_id": 918,
            "gold_sql": "SELECT count(*) FROM services",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM services",
            "ba": "The virtual table counts the total number of services available in the 'services' table.",
            "question": "Count the total number of available services."
        },
        {
            "sample_id": 897,
            "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT available_policies.customer_phone FROM available_policies WHERE available_policies.policy_type_code = (SELECT available_policies.policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the contact phone numbers of customers from the 'available_policies' table who have the most common type of insurance policy. The query identifies the policy type that appears most frequently and uses it to filter the results.",
            "question": "What are all the customer phone numbers under the most popular policy type?"
        },
        {
            "sample_id": 891,
            "gold_sql": "SELECT customer_phone FROM available_policies",
            "gold_complexity": 4,
            "vt": "SELECT available_policies.customer_phone FROM available_policies",
            "ba": "The virtual table retrieves the contact phone numbers of customers from the 'available_policies' table. The placeholder in the SELECT clause represents the customer's phone number.",
            "question": "Find all the phone numbers."
        },
        {
            "sample_id": 914,
            "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 17,
            "vt": "SELECT DISTINCT available_policies.policy_type_code FROM customers JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE customers.customer_name = (SELECT customers.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves distinct policy type codes from the 'available_policies' table for the customer who has the highest number of policies. It joins the 'customers' table with 'customers_policies' to link customers to their policies, and then joins with 'available_policies' to get the policy details. The inner query identifies the customer with the most policies by counting the number of policies associated with each customer and ordering them in descending order.",
            "question": "List all the policy types used by the customer enrolled in the most policies."
        },
        {
            "sample_id": 904,
            "gold_sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
            "gold_complexity": 9,
            "vt": "SELECT services.service_name FROM first_notification_of_loss JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY first_notification_of_loss.service_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of services associated with first notifications of loss, grouped by service. It filters the results to include only those services that have been reported more than a specified number of times.",
            "question": "Which services have been used more than twice in first notification of loss? Return the service name."
        },
        {
            "sample_id": 925,
            "gold_sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
            "gold_complexity": 6,
            "vt": "SELECT customers.customer_id FROM customers WHERE customers.customer_name LIKE None.\"%diana%\"",
            "ba": "The virtual table retrieves the unique identifier of customers from the 'customers' table whose names contain a specific substring, represented by a placeholder.",
            "question": "Find the IDs of customers whose name contains \"Diana\"."
        },
        {
            "sample_id": 913,
            "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 17,
            "vt": "SELECT DISTINCT available_policies.policy_type_code FROM customers JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE customers.customer_name = (SELECT customers.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves distinct policy type codes from the 'available_policies' table for the customer who has the highest number of policies. It joins the 'customers' table with the 'customers_policies' table to link customers to their policies, and then joins with the 'available_policies' table to get the relevant policy details. The inner query identifies the customer with the most policies by counting the number of policies associated with each customer and ordering them in descending order.",
            "question": "What are all the policy types of the customer that has the most policies listed?"
        },
        {
            "sample_id": 909,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_name FROM customers JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY customers.customer_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who have associated policies, grouping the results by customer name and ordering them based on the number of policies they hold. The placeholder in the LIMIT clause allows for specifying the maximum number of customer names to return.",
            "question": "What is the name of the customer who has the most policies listed?"
        },
        {
            "sample_id": 931,
            "gold_sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
            "gold_complexity": 9,
            "vt": "SELECT customers_policies.date_opened, customers_policies.date_closed FROM customers JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE customers.customer_name LIKE None.\"%diana%\"",
            "ba": "The virtual table describes the opening and closing dates of insurance policies for customers whose names match a specific pattern. The query joins the 'customers' table with the 'customers_policies' table to link customer information with their respective policies, filtering based on the customer's name.",
            "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\""
        },
        {
            "sample_id": 896,
            "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT available_policies.policy_type_code FROM available_policies GROUP BY available_policies.policy_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique policy type codes from the 'available_policies' table, grouped by the policy type code. It orders the results based on the count of each policy type and limits the output to a specified number of entries.",
            "question": "Which policy type appears most frequently in the available policies?"
        },
        {
            "sample_id": 895,
            "gold_sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT available_policies.policy_type_code FROM available_policies GROUP BY available_policies.policy_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique policy type codes from the 'available_policies' table, grouped by the policy type code. It orders the results based on the count of each policy type and limits the output to a specified number of entries.",
            "question": "Which policy type has the most records in the database?"
        },
        {
            "sample_id": 920,
            "gold_sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
            "gold_complexity": 6,
            "vt": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
            "ba": "The virtual table lists the names of customers from the 'customers' table who have not reported any loss notifications. It does this by excluding those customers who are linked to any records in the 'first_notification_of_loss' table.",
            "question": "Which customers do not have a first notification of loss record? Give me the customer names."
        },
        {
            "sample_id": 922,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_name FROM customers JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE services.service_name = None.\"close a policy\" OR services.service_name = None.\"upgrade a policy\"",
            "ba": "The virtual table retrieves the names of customers from the 'customers' table who have reported a first notification of loss related to specific services, namely 'close a policy' or 'upgrade a policy'.",
            "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names."
        },
        {
            "sample_id": 902,
            "gold_sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
            "gold_complexity": 5,
            "vt": "SELECT SUM(settlements.settlement_amount), AVG(settlements.settlement_amount) FROM settlements",
            "ba": "The virtual table calculates the total and average settlement amounts from the 'settlements' table. The placeholders represent the aggregated values of the settlement amounts.",
            "question": "Return the sum and average of all settlement amounts."
        },
        {
            "sample_id": 927,
            "gold_sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
            "gold_complexity": 5,
            "vt": "SELECT MAX(settlements.settlement_amount), MIN(settlements.settlement_amount) FROM settlements",
            "ba": "The virtual table provides the maximum and minimum settlement amounts from the 'settlements' table, which records the financial agreements made for claims.",
            "question": "What are the maximum and minimum settlement amount on record?"
        },
        {
            "sample_id": 911,
            "gold_sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT available_policies.policy_type_code FROM customers JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE customers.customer_name = None.\"dayana robel\"",
            "ba": "The virtual table retrieves distinct policy type codes from the 'available_policies' table for a specific customer. It joins the 'customers' table with the 'customers_policies' table to link customers to their policies, and then joins with the 'available_policies' table to get the relevant policy details. The placeholder in the WHERE clause represents the customer's name.",
            "question": "What are all the policy types of the customer named \"Dayana Robel\"?"
        },
        {
            "sample_id": 898,
            "gold_sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT available_policies.customer_phone FROM available_policies WHERE available_policies.policy_type_code = (SELECT available_policies.policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the contact phone numbers of customers from the 'available_policies' table who have the most common type of insurance policy. The query identifies the policy type that appears most frequently and uses it to filter the results.",
            "question": "Find the phone numbers of customers using the most common policy type among the available policies."
        },
        {
            "sample_id": 924,
            "gold_sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
            "gold_complexity": 10,
            "vt": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"",
            "ba": "The virtual table identifies customers who have both closed a policy and applied for a new policy. It retrieves the names of these customers by joining the 'customers' table with the 'first_notification_of_loss' table and the 'services' table. The query uses an INTERSECT operation to find common customers between two conditions: those who have a service name of 'Close a policy' and those with a service name of 'New policy application'.",
            "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names."
        },
        {
            "sample_id": 892,
            "gold_sql": "SELECT customer_phone FROM available_policies",
            "gold_complexity": 4,
            "vt": "SELECT available_policies.customer_phone FROM available_policies",
            "ba": "The virtual table retrieves the contact phone numbers of customers from the 'available_policies' table. The placeholder in the SELECT clause represents the customer's phone number.",
            "question": "What are all the phone numbers?"
        },
        {
            "sample_id": 930,
            "gold_sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
            "gold_complexity": 8,
            "vt": "SELECT customers.customer_id, customers.customer_name FROM customers ORDER BY customers.customer_id",
            "ba": "The virtual table lists the unique identifiers and names of all customers from the 'customers' table, ordered by their unique customer IDs.",
            "question": "What is the ordered list of customer ids?"
        },
        {
            "sample_id": 917,
            "gold_sql": "SELECT count(*) FROM services",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM services",
            "ba": "The virtual table provides a count of all available services from the 'services' table. This count helps in understanding the total number of services offered.",
            "question": "How many services are there?"
        }
    ],
    "music_1": [
        {
            "sample_id": 3523,
            "gold_sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT song.song_name, song.releasedate FROM song ORDER BY song.releasedate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles and release dates of songs from the 'song' table, ordered by their release date. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What is the name of the song that was released most recently?"
        },
        {
            "sample_id": 3621,
            "gold_sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
            "ba": "The virtual table identifies unique music artists from the 'artist' table who are from Bangladesh, excluding those artists whose songs have a rating greater than 7 from the 'song' table. The query uses the EXCEPT clause to filter out artists based on their song ratings.",
            "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?"
        },
        {
            "sample_id": 3537,
            "gold_sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT artist.artist_name, artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY song.rating LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names and countries of artists from the 'artist' table, joining it with the 'song' table to associate each artist with their songs. The results are ordered by the rating of the songs, and a limit is applied to control the number of records returned.",
            "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?"
        },
        {
            "sample_id": 3602,
            "gold_sql": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 12,
            "vt": "SELECT artist.artist_name, COUNT(*) FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY song.artist_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of music artists along with the count of songs they have performed. It aggregates the data from the 'artist' and 'song' tables, grouping the results by artist name and ordering them by the number of songs in descending order. The placeholder in the LIMIT clause allows for specifying the maximum number of artists to return.",
            "question": "Find the names and number of works of the three artists who have produced the most songs."
        },
        {
            "sample_id": 3582,
            "gold_sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
            "gold_complexity": 7,
            "vt": "SELECT artist.artist_name FROM artist WHERE artist.country = None.\"uk\" AND artist.gender = None.\"male\"",
            "ba": "The virtual table lists the names of male artists from the 'artist' table who are from the UK. The placeholders in the WHERE clause represent the country and gender criteria for filtering the artists.",
            "question": "What are the names of artists who are Male and are from UK?"
        },
        {
            "sample_id": 3616,
            "gold_sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
            "gold_complexity": 13,
            "vt": "SELECT files.duration, files.file_size, files.formats FROM files JOIN song AS T2 ON T1.f_id = T2.f_id WHERE song.genre_is = None.\"pop\" ORDER BY song.song_name",
            "ba": "The virtual table describes the duration, file size, and formats of audio files from the 'files' table that are associated with songs of the genre 'pop'. The query joins the 'files' table with the 'song' table to filter the results based on the genre of the songs. The placeholder in the WHERE clause represents the specific genre being queried.",
            "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?"
        },
        {
            "sample_id": 3605,
            "gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY song.artist_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the countries of artists from the 'artist' table, joining it with the 'song' table to associate each artist with their songs. It groups the results by artist name and orders them based on the count of songs associated with each artist, limiting the output to a specified number of results.",
            "question": "What country is the artist who made the fewest songs from?"
        },
        {
            "sample_id": 3583,
            "gold_sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
            "gold_complexity": 7,
            "vt": "SELECT artist.artist_name FROM artist WHERE artist.country = None.\"uk\" AND artist.gender = None.\"male\"",
            "ba": "The virtual table lists the names of male artists from the 'artist' table who are from the UK. The placeholders in the WHERE clause represent the country and gender criteria for filtering the artists.",
            "question": "What are the names of all male British artists?"
        },
        {
            "sample_id": 3531,
            "gold_sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT artist.artist_name, artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE song.rating > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique artist names and their corresponding countries from the 'artist' table, filtered by the rating of their songs. The placeholder in the WHERE clause represents a numeric value for the song rating.",
            "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?"
        },
        {
            "sample_id": 3597,
            "gold_sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
            "gold_complexity": 13,
            "vt": "SELECT MIN(files.duration), MIN(song.rating), song.genre_is FROM files JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY song.genre_is ORDER BY song.genre_is",
            "ba": "The virtual table provides the minimum duration of audio files and the minimum rating of songs, grouped by their respective genres. It combines data from the 'files' and 'song' tables, ensuring that the results are organized by genre.",
            "question": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?"
        },
        {
            "sample_id": 3573,
            "gold_sql": "SELECT song_name FROM song ORDER BY resolution",
            "gold_complexity": 6,
            "vt": "SELECT song.song_name FROM song ORDER BY song.resolution",
            "ba": "The virtual table lists the titles of songs from the 'song' table, ordered by their audio resolution. This allows users to see the song names sorted according to the quality of the audio file.",
            "question": "What are the names of all songs that are ordered by their resolution numbers?"
        },
        {
            "sample_id": 3587,
            "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
            "gold_complexity": 11,
            "vt": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
            "ba": "The virtual table retrieves the titles of songs that are available in 'mp3' format and have an audio resolution lower than a specified value. It combines data from the 'files' and 'song' tables using a join on the file identifier, ensuring that only songs meeting both criteria are selected.",
            "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?"
        },
        {
            "sample_id": 3530,
            "gold_sql": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT artist.artist_name, artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE song.rating > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique artist names and their corresponding countries from the 'artist' table, filtered by the rating of their songs. The placeholder in the WHERE clause represents a numeric value for the song rating.",
            "question": "List the name and country of origin for all singers who have produced songs with rating above 9."
        },
        {
            "sample_id": 3606,
            "gold_sql": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
            "gold_complexity": 11,
            "vt": "SELECT song.song_name FROM song WHERE song.rating < (SELECT MIN(song.rating) FROM song WHERE languages = 'english')",
            "ba": "The virtual table lists the titles of songs from the 'song' table that have a rating lower than the minimum rating of songs available in English. The subquery identifies the minimum rating among English songs, and this value is used to filter the main query results.",
            "question": "What are the names of the songs whose rating is below the rating of all songs in English?"
        },
        {
            "sample_id": 3594,
            "gold_sql": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
            "gold_complexity": 13,
            "vt": "SELECT MAX(files.duration), MAX(song.resolution), song.languages FROM files JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY song.languages ORDER BY song.languages",
            "ba": "The virtual table provides the maximum duration of audio files and their corresponding maximum resolution, grouped by the languages in which the songs are available. It combines data from the 'files' and 'song' tables based on the file identifier, allowing users to see the longest audio files and their highest resolutions for each language.",
            "question": "What are the maximum duration and resolution of songs grouped and ordered by languages?"
        },
        {
            "sample_id": 3528,
            "gold_sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
            "gold_complexity": 6,
            "vt": "SELECT files.f_id FROM files WHERE files.formats = None.\"mp3\"",
            "ba": "The virtual table retrieves the unique identifiers of files from the 'files' table that are available in a specific format. The placeholder in the WHERE clause represents the desired audio format.",
            "question": "What are the id of songs whose format is mp3."
        },
        {
            "sample_id": 3525,
            "gold_sql": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT files.f_id FROM files ORDER BY files.duration LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of audio files from the 'files' table, ordering them by their duration. The placeholder in the LIMIT clause allows the user to specify the maximum number of results to return.",
            "question": "Find the id of the song that lasts the longest."
        },
        {
            "sample_id": 3600,
            "gold_sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
            "gold_complexity": 13,
            "vt": "SELECT artist.artist_name, artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE song.resolution > [placeholder-type:numeric] GROUP BY song.artist_name HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and countries of artists from the 'artist' table who have songs with a resolution greater than a specified value. The query joins the 'artist' table with the 'song' table to filter artists based on the resolution of their songs. Additionally, it groups the results by artist name and ensures that only those artists with a certain number of songs are included in the final output.",
            "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900."
        },
        {
            "sample_id": 3552,
            "gold_sql": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
            "gold_complexity": 9,
            "vt": "SELECT AVG(files.duration) FROM files JOIN song AS T2 ON T1.f_id = T2.f_id WHERE files.formats = None.\"mp3\" AND song.resolution < [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average duration of audio files from the 'files' table that are in 'mp3' format and have a resolution less than a specified value. The query joins the 'files' table with the 'song' table based on the unique file identifier to ensure that only relevant files associated with songs are considered.",
            "question": "What is the average duration of songs that have mp3 format and resolution below 800?"
        },
        {
            "sample_id": 3577,
            "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
            "gold_complexity": 11,
            "vt": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\"",
            "ba": "The virtual table retrieves the titles of songs from two different sources: first, it selects songs from the 'song' table that are associated with files having a duration starting with '4:' (indicating a duration of 4 minutes), and second, it selects songs from the 'song' table that are available in English. The results from both queries are combined using a UNION to ensure that all unique song titles are returned.",
            "question": "What are the names of all songs that are approximately 4 minutes long or are in English?"
        },
        {
            "sample_id": 3559,
            "gold_sql": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT artist.gender, artist.artist_name FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY song.resolution LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of artists along with their gender from the 'artist' table, by joining it with the 'song' table to associate each artist with their songs. The results are ordered by the resolution of the songs, and a limit is applied to control the number of records returned.",
            "question": "What is the gender and name of the artist who sang the song with the smallest resolution?"
        },
        {
            "sample_id": 3535,
            "gold_sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT song.artist_name FROM song JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY files.duration LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of artists from the 'song' table, joining it with the 'files' table to access the file details associated with each song. The results are ordered by the duration of the audio files, and a limit is applied to restrict the number of returned artist names based on a specified numeric value.",
            "question": "What are the names of the artists who sang the shortest song?"
        },
        {
            "sample_id": 3571,
            "gold_sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
            "gold_complexity": 8,
            "vt": "SELECT genre.g_name, genre.rating FROM genre ORDER BY genre.g_name",
            "ba": "The virtual table describes the names and ratings of music genres from the 'genre' table, sorted in alphabetical order by genre name.",
            "question": "What are the names of all genres in alphabetical order, combined with its ratings?"
        },
        {
            "sample_id": 3551,
            "gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
            "gold_complexity": 8,
            "vt": "SELECT artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE artist.gender = None.\"female\" AND song.languages = None.\"bangla\"",
            "ba": "The virtual table retrieves the countries of female artists who have songs available in Bangla. It joins the 'artist' table with the 'song' table based on the artist's name, filtering for female artists and songs that are in the Bangla language.",
            "question": "What countries are the female artists who sung in the language Bangla from?"
        },
        {
            "sample_id": 3561,
            "gold_sql": "SELECT count(*) ,  formats FROM files GROUP BY formats",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), files.formats FROM files GROUP BY files.formats",
            "ba": "The virtual table provides a count of audio files grouped by their available formats from the 'files' table. The placeholder in the SELECT statement indicates that the count of files will be displayed alongside the formats they are available in.",
            "question": "How many songs were released for each format?"
        },
        {
            "sample_id": 3539,
            "gold_sql": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM files WHERE files.duration LIKE None.\"4:%\"",
            "ba": "The virtual table counts the number of audio files from the 'files' table that have a duration starting with '4:', indicating that these files are approximately four minutes long.",
            "question": "What is the count of the songs that last approximately 4 minutes?"
        },
        {
            "sample_id": 3569,
            "gold_sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
            "gold_complexity": 9,
            "vt": "SELECT artist.artist_name, artist.gender FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE song.releasedate LIKE None.\"%mar%\"",
            "ba": "The virtual table describes the names and genders of artists from the 'artist' table who have songs released in a specific month, indicated by a placeholder in the WHERE clause.",
            "question": "What are the names and genders of all artists who released songs in the month of March?"
        },
        {
            "sample_id": 3546,
            "gold_sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
            "gold_complexity": 9,
            "vt": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages = \"english\"",
            "ba": "The virtual table identifies artists from the 'artist' table who are from the UK and have songs available in English. It combines two sets of data: one set of artists filtered by their country and another set of songs filtered by the language in which they are available.",
            "question": "Find the names of the artists who are from UK and have produced English songs."
        },
        {
            "sample_id": 3556,
            "gold_sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
            "gold_complexity": 8,
            "vt": "SELECT AVG(song.rating), song.languages FROM song GROUP BY song.languages",
            "ba": "The virtual table calculates the average rating of songs grouped by the languages in which they are available. It provides insights into how different languages correlate with song ratings.",
            "question": "What is the average rating of songs for each language?"
        },
        {
            "sample_id": 3579,
            "gold_sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT song.languages FROM song GROUP BY song.languages ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique languages in which songs are available from the 'song' table. It groups the songs by their languages and orders them based on the count of songs available in each language, limiting the results to a specified number.",
            "question": "What are the languages that are used most often in songs?"
        },
        {
            "sample_id": 3536,
            "gold_sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
            "gold_complexity": 10,
            "vt": "SELECT artist.artist_name, artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY song.rating LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of music artists along with their countries, by joining the 'artist' and 'song' tables. The results are ordered by the rating of the songs, and a limit is applied to restrict the number of records returned.",
            "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs."
        },
        {
            "sample_id": 3544,
            "gold_sql": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT files.formats FROM files GROUP BY files.formats ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the different formats of audio files from the 'files' table, grouped by format type. It orders the results based on the count of files in each format and limits the output to a specified number of formats.",
            "question": "What is the most popular file format?"
        },
        {
            "sample_id": 3614,
            "gold_sql": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
            "gold_complexity": 12,
            "vt": "SELECT song.f_id, song.genre_is, song.artist_name FROM song WHERE song.languages = None.\"english\" ORDER BY song.rating",
            "ba": "The virtual table retrieves the unique identifier, genre, and artist name of songs from the 'song' table that are available in English. The results are ordered by the song's rating.",
            "question": "List the id, genre and artist name of English songs ordered by rating."
        },
        {
            "sample_id": 3554,
            "gold_sql": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), artist.gender FROM artist GROUP BY artist.gender",
            "ba": "The virtual table provides a count of artists grouped by their gender from the 'artist' table. The placeholder in the SELECT statement indicates that the query will return the number of artists for each gender category.",
            "question": "What is the number of artists for each gender?"
        },
        {
            "sample_id": 3612,
            "gold_sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 12,
            "vt": "SELECT artist.artist_name FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE song.languages = None.\"bangla\" GROUP BY song.artist_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of artists from the 'artist' table who have songs available in a specific language. It joins the 'artist' table with the 'song' table to filter artists based on the language of their songs. The results are grouped by artist name and ordered by the count of songs, with a limit on the number of results returned.",
            "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla."
        },
        {
            "sample_id": 3564,
            "gold_sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
            "gold_complexity": 11,
            "vt": "SELECT song.song_name FROM song WHERE song.rating < (SELECT MAX(song.rating) FROM song WHERE genre_is = \"blues\")",
            "ba": "The virtual table retrieves the titles of songs from the 'song' table that have a rating lower than the highest rating of songs in the 'blues' genre. The subquery identifies the maximum rating for songs categorized under the 'blues' genre, and the main query filters songs based on this value.",
            "question": "What are the names of all songs that have a lower rating than some song of blues genre?"
        },
        {
            "sample_id": 3604,
            "gold_sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY song.artist_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the countries of artists from the 'artist' table, joining it with the 'song' table to associate each artist with their songs. It groups the results by artist name and orders them based on the count of songs associated with each artist, limiting the results to a specified number of entries.",
            "question": "Find the country of origin for the artist who made the least number of songs?"
        },
        {
            "sample_id": 3547,
            "gold_sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
            "gold_complexity": 9,
            "vt": "SELECT artist_name FROM artist WHERE country = \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages = \"english\"",
            "ba": "The virtual table identifies artists from the 'artist' table who are from the UK and have songs available in English. It combines two sets of data: one set of artists filtered by their country and another set of songs filtered by the language in which they are available. The intersection of these two sets provides a list of artists that meet both criteria.",
            "question": "What are the names of the artists that are from the UK and sang songs in English?"
        },
        {
            "sample_id": 3619,
            "gold_sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8",
            "ba": "The virtual table identifies distinct music artists who have songs available in English but excludes those whose songs have a rating greater than a specified threshold. It combines data from the 'song' table, filtering based on the language and rating criteria.",
            "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?"
        },
        {
            "sample_id": 3578,
            "gold_sql": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT song.languages FROM song GROUP BY song.languages ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique languages in which songs are available from the 'song' table. It groups the results by the 'languages' column and orders them based on the count of songs available in each language, limiting the output to a specified number of languages.",
            "question": "What is the language used most often in the songs?"
        },
        {
            "sample_id": 3527,
            "gold_sql": "SELECT song_name FROM song WHERE languages  =  \"english\"",
            "gold_complexity": 6,
            "vt": "SELECT song.song_name FROM song WHERE song.languages = None.\"english\"",
            "ba": "The virtual table describes the titles of songs from the 'song' table that are available in English. The placeholder in the WHERE clause represents the language filter for the songs.",
            "question": "What are the names of all songs in English?"
        },
        {
            "sample_id": 3592,
            "gold_sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
            "gold_complexity": 8,
            "vt": "SELECT MAX(song.resolution), MIN(song.resolution) FROM files JOIN song AS T2 ON T1.f_id = T2.f_id WHERE files.duration LIKE None.\"3:%\"",
            "ba": "The virtual table provides the maximum and minimum audio resolutions of songs from the 'song' table, filtered by the duration of the associated files. The placeholder in the WHERE clause indicates a specific duration format that starts with '3:'.",
            "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?"
        },
        {
            "sample_id": 3562,
            "gold_sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT song.song_name FROM song WHERE song.resolution > (SELECT MIN(song.resolution) FROM song WHERE languages = \"english\")",
            "ba": "The virtual table lists distinct song titles from the 'song' table that have a resolution higher than the minimum resolution of songs available in English. The subquery identifies the minimum resolution of English songs, and the main query filters for songs with a higher resolution than that value.",
            "question": "Find the distinct names of all songs that have a higher resolution than some songs in English."
        },
        {
            "sample_id": 3541,
            "gold_sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM artist WHERE artist.country = None.\"bangladesh\"",
            "ba": "The virtual table counts the number of artists from a specific country, which in this case is Bangladesh. The placeholder in the WHERE clause represents the country name.",
            "question": "How many Bangladeshi artists are listed?"
        },
        {
            "sample_id": 3596,
            "gold_sql": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
            "gold_complexity": 13,
            "vt": "SELECT MIN(files.duration), MIN(song.rating), song.genre_is FROM files JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY song.genre_is ORDER BY song.genre_is",
            "ba": "The virtual table provides the minimum duration of audio files and the minimum rating of songs, grouped by their genre. It combines data from the 'files' and 'song' tables, ensuring that the results are organized by genre.",
            "question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?"
        },
        {
            "sample_id": 3585,
            "gold_sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
            "gold_complexity": 7,
            "vt": "SELECT song.song_name FROM song WHERE song.genre_is = None.\"modern\" OR song.languages = None.\"english\"",
            "ba": "The virtual table describes the titles of songs from the 'song' table that belong to a specific genre or are available in a specific language. The placeholders in the WHERE clause represent the genre and language criteria.",
            "question": "What are the names of the songs that are modern or sung in English?"
        },
        {
            "sample_id": 3586,
            "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
            "gold_complexity": 11,
            "vt": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution < 1000",
            "ba": "The virtual table retrieves the titles of songs that are available in 'mp3' format and have an audio resolution lower than a specified value. It combines data from the 'files' and 'song' tables using a join on the file identifier, ensuring that only songs meeting both criteria are selected.",
            "question": "Return the names of songs for which format is mp3 and resolution is below 1000."
        },
        {
            "sample_id": 3560,
            "gold_sql": "SELECT count(*) ,  formats FROM files GROUP BY formats",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), files.formats FROM files GROUP BY files.formats",
            "ba": "The virtual table provides a count of audio files grouped by their available formats from the 'files' table. The placeholder in the SELECT statement indicates that the count of files will be displayed alongside the formats they are available in.",
            "question": "For each file format, return the number of artists who released songs in that format."
        },
        {
            "sample_id": 3576,
            "gold_sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
            "gold_complexity": 11,
            "vt": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages = \"english\"",
            "ba": "The virtual table retrieves the titles of songs from two different sources: first, it selects songs from the 'song' table that are associated with files having a duration starting with '4' minutes, and second, it selects songs from the 'song' table that are available in English. The results from both queries are combined using a UNION to ensure unique song titles are returned.",
            "question": "List the names of all songs that have 4 minute duration or are in English."
        },
        {
            "sample_id": 3601,
            "gold_sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
            "gold_complexity": 13,
            "vt": "SELECT artist.artist_name, artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE song.resolution > [placeholder-type:numeric] GROUP BY song.artist_name HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and countries of artists from the 'artist' table who have songs with a resolution greater than a specified value. The query joins the 'artist' table with the 'song' table to filter artists based on the resolution of their songs. Additionally, it groups the results by artist name and ensures that only those artists with a certain number of songs are included in the final output.",
            "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?"
        },
        {
            "sample_id": 3533,
            "gold_sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT files.file_size, files.formats FROM files JOIN song AS T2 ON T1.f_id = T2.f_id WHERE song.resolution < [placeholder-type:numeric]",
            "ba": "The virtual table displays the distinct file sizes and formats of audio files from the 'files' table that are associated with songs having a resolution lower than a specified value. The query joins the 'files' table with the 'song' table based on the unique file identifier, ensuring that only relevant files linked to songs are considered. The placeholder in the WHERE clause represents the maximum resolution threshold for filtering the results.",
            "question": "What are the file sizes and formats for all songs with a resolution lower than 800?"
        },
        {
            "sample_id": 3618,
            "gold_sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT artist_name FROM song WHERE languages = \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8",
            "ba": "The virtual table lists unique artist names from the 'song' table who have songs available in English but excludes those artists whose songs have a rating greater than 8.",
            "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8."
        },
        {
            "sample_id": 3566,
            "gold_sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
            "gold_complexity": 9,
            "vt": "SELECT artist.artist_name, artist.country FROM artist JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE song.song_name LIKE None.\"%love%\"",
            "ba": "The virtual table describes the names and countries of artists from the 'artist' table who have performed songs with titles that include the word 'love'. The query joins the 'artist' table with the 'song' table to filter based on the song title using a placeholder for string values.",
            "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?"
        },
        {
            "sample_id": 3581,
            "gold_sql": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT song.artist_name FROM song WHERE song.resolution > [placeholder-type:numeric] GROUP BY song.languages ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of artists from the 'song' table whose songs have a resolution greater than a specified value. The results are grouped by the languages in which the songs are available, and the output is ordered by the count of songs in each language group. Additionally, a limit is applied to restrict the number of results returned.",
            "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?"
        },
        {
            "sample_id": 3593,
            "gold_sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
            "gold_complexity": 8,
            "vt": "SELECT MAX(song.resolution), MIN(song.resolution) FROM files JOIN song AS T2 ON T1.f_id = T2.f_id WHERE files.duration LIKE None.\"3:%\"",
            "ba": "The virtual table provides the maximum and minimum audio resolution of songs from the 'song' table, filtered by the duration of the associated files. The placeholder in the WHERE clause indicates a specific duration format that the user can modify.",
            "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?"
        },
        {
            "sample_id": 3610,
            "gold_sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
            "gold_complexity": 11,
            "vt": "SELECT song.f_id FROM song WHERE song.resolution > (SELECT AVG(song.resolution) FROM song WHERE genre_is = \"modern\")",
            "ba": "The virtual table retrieves the unique identifiers of songs from the 'song' table that have a resolution greater than the average resolution of songs in the 'modern' genre. The placeholder in the subquery represents the genre for which the average resolution is calculated.",
            "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?"
        },
        {
            "sample_id": 3608,
            "gold_sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
            "gold_complexity": 11,
            "vt": "SELECT song.f_id FROM song WHERE song.resolution > (SELECT MAX(song.resolution) FROM song WHERE rating < 8)",
            "ba": "The virtual table retrieves the unique identifiers of songs from the 'song' table that have a resolution greater than the maximum resolution of songs with a rating less than 8. The placeholder in the subquery represents the condition for filtering songs based on their rating.",
            "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?"
        },
        {
            "sample_id": 3548,
            "gold_sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
            "gold_complexity": 10,
            "vt": "SELECT f_id FROM files WHERE formats = \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution < 1000",
            "ba": "The virtual table identifies audio files that are in 'mp4' format and have a resolution lower than 1000. It combines results from the 'files' table, filtering for the specified format, and the 'song' table, filtering for the specified resolution.",
            "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000."
        },
        {
            "sample_id": 3620,
            "gold_sql": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT artist_name FROM artist WHERE country = \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7",
            "ba": "The virtual table identifies unique music artists from the 'artist' table who are from Bangladesh, excluding those artists whose songs have a rating greater than 7 from the 'song' table. The query uses the EXCEPT clause to filter out artists based on their song ratings.",
            "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7."
        },
        {
            "sample_id": 3575,
            "gold_sql": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
            "gold_complexity": 10,
            "vt": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720",
            "ba": "The virtual table retrieves unique file identifiers from two different tables: 'files' and 'song'. It filters the 'files' table to include only those files that are in the 'mp4' format, and it also selects file identifiers from the 'song' table where the audio resolution is greater than 720. The use of UNION ensures that the results from both queries are combined, providing a comprehensive list of file identifiers that meet either of the specified criteria.",
            "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?"
        }
    ],
    "customers_card_transactions": [
        {
            "sample_id": 670,
            "gold_sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
            "gold_complexity": 8,
            "vt": "SELECT accounts.account_id, accounts.customer_id, accounts.account_name FROM accounts",
            "ba": "The virtual table describes the account details from the 'accounts' table, including the unique identifier for each account, the associated customer identifier, and the name of the account. This allows users to retrieve specific information about accounts linked to customers.",
            "question": "What are the account ids, customer ids, and account names for all the accounts?"
        },
        {
            "sample_id": 728,
            "gold_sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
            "gold_complexity": 13,
            "vt": "SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = \"Credit\"",
            "ba": "The virtual table identifies customers who do not have a credit card associated with them. It selects the customer ID and first name from the 'Customers' table and excludes those customers who have a credit card by performing a join between the 'Customers_cards' and 'Customers' tables based on the customer ID, filtering for credit card types.",
            "question": "What are the ids and first names of customers who do not hold a credit card?"
        },
        {
            "sample_id": 744,
            "gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT financial_transactions.transaction_type FROM financial_transactions GROUP BY financial_transactions.transaction_type ORDER BY SUM(financial_transactions.transaction_amount) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of financial transactions recorded in the 'financial_transactions' table. It groups the transactions by their type and orders them based on the total amount of each transaction type, limiting the results to a specified number of types.",
            "question": "Return the type of transaction with the highest total amount."
        },
        {
            "sample_id": 732,
            "gold_sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT card_type_code) FROM customers_cards",
            "ba": "The virtual table counts the distinct types of cards from the 'customers_cards' table. This provides insight into the variety of card types associated with customers.",
            "question": "How many different card types are there?"
        },
        {
            "sample_id": 685,
            "gold_sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 8,
            "vt": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table provides a list of customers who do not have any associated accounts. It retrieves the first and last names of all customers from the 'Customers' table and excludes those who have accounts by performing a join with the 'Accounts' table based on the customer_id.",
            "question": "Show the first names and last names of customers without any account."
        },
        {
            "sample_id": 710,
            "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM customers_cards JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = None.\"blanche\" AND customers.customer_last_name = None.\"huels\" AND customers_cards.card_type_code = None.\"credit\"",
            "ba": "The virtual table counts the number of credit cards associated with a specific customer identified by their first and last names. It joins the 'customers_cards' table with the 'customers' table to link card information to customer details, filtering based on the customer's first name, last name, and the type of card.",
            "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has."
        },
        {
            "sample_id": 718,
            "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT customers_cards.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers_cards JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers_cards.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of customer information associated with their cards. It retrieves the customer ID along with the first and last names of customers linked to those cards. The data is grouped by customer ID to aggregate the results, and it is ordered by the count of associated records, limiting the output to a specified number of results.",
            "question": "Return the id and full name of the customer who has the fewest accounts."
        },
        {
            "sample_id": 708,
            "gold_sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM customers_cards WHERE customers_cards.card_type_code = None.\"debit\"",
            "ba": "The virtual table counts the number of debit cards from the 'customers_cards' table. The placeholder in the WHERE clause represents the card type code for debit cards.",
            "question": "Count the number of customer cards of the type Debit."
        },
        {
            "sample_id": 742,
            "gold_sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
            "gold_complexity": 8,
            "vt": "SELECT financial_transactions.transaction_type, COUNT(*) FROM financial_transactions GROUP BY financial_transactions.transaction_type",
            "ba": "The virtual table summarizes the count of financial transactions grouped by their type from the 'financial_transactions' table. Each transaction type is represented, allowing users to see how many transactions fall under each category.",
            "question": "What are the different transaction types, and how many transactions of each have taken place?"
        },
        {
            "sample_id": 717,
            "gold_sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT customers_cards.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers_cards JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY customers_cards.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of customer information associated with their cards. It retrieves the customer ID along with the first and last names of customers linked to the cards. The data is grouped by customer ID to aggregate the results, and it is ordered by the count of associated records, limiting the output to a specified number of results.",
            "question": "What is the customer id, first and last name with least number of accounts."
        },
        {
            "sample_id": 733,
            "gold_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT financial_transactions.transaction_type FROM financial_transactions",
            "ba": "The virtual table lists all unique transaction types from the 'financial_transactions' table.",
            "question": "Show all transaction types."
        },
        {
            "sample_id": 689,
            "gold_sql": "SELECT count(DISTINCT customer_id) FROM Accounts",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT customer_id) FROM accounts",
            "ba": "The virtual table counts the number of distinct customers associated with accounts in the 'accounts' table. The placeholder represents the unique customer identifier.",
            "question": "How many customers have an account?"
        },
        {
            "sample_id": 734,
            "gold_sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT financial_transactions.transaction_type FROM financial_transactions",
            "ba": "The virtual table lists all unique transaction types from the 'financial_transactions' table. This allows users to see the different types of transactions recorded without duplicates.",
            "question": "What are the different types of transactions?"
        },
        {
            "sample_id": 730,
            "gold_sql": "SELECT DISTINCT card_type_code FROM Customers_Cards",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT customers_cards.card_type_code FROM customers_cards",
            "ba": "The virtual table retrieves distinct card type codes from the 'customers_cards' table, which contains information about various cards linked to customers.",
            "question": "What are the different card type codes?"
        },
        {
            "sample_id": 673,
            "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_first_name, customers.customer_last_name, customers.customer_phone FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE accounts.account_name = None.\"162\"",
            "ba": "The virtual table describes the first and last names along with the phone number of customers associated with a specific account name from the 'accounts' and 'customers' tables. The placeholder in the WHERE clause represents the account name being queried.",
            "question": "What is the first name, last name, and phone of the customer with account name 162?"
        },
        {
            "sample_id": 700,
            "gold_sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
            "gold_complexity": 10,
            "vt": "SELECT customers_cards.card_id, customers_cards.customer_id, customers_cards.card_type_code, customers_cards.card_number FROM customers_cards",
            "ba": "The virtual table describes the card details associated with customers from the 'customers_cards' table. It includes the card ID, customer ID, card type code, and card number, which are essential for identifying and managing customer cards.",
            "question": "What are card ids, customer ids, card types, and card numbers for each customer card?"
        },
        {
            "sample_id": 725,
            "gold_sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
            "gold_complexity": 9,
            "vt": "SELECT customers_cards.card_type_code, COUNT(DISTINCT customer_id) FROM customers_cards GROUP BY customers_cards.card_type_code",
            "ba": "The virtual table summarizes the number of distinct customers associated with each type of card from the 'customers_cards' table. The placeholder in the SELECT statement represents the card type code, while the COUNT function is used to count unique customer IDs for each card type.",
            "question": "Show all card type codes and the number of customers holding cards in each type."
        },
        {
            "sample_id": 737,
            "gold_sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
            "gold_complexity": 5,
            "vt": "SELECT AVG(financial_transactions.transaction_amount), SUM(financial_transactions.transaction_amount) FROM financial_transactions",
            "ba": "The virtual table calculates the average and total amount of financial transactions recorded in the 'financial_transactions' table. It provides insights into the overall transaction volume and average transaction size.",
            "question": "What is the average and total transaction amount?"
        },
        {
            "sample_id": 743,
            "gold_sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT financial_transactions.transaction_type FROM financial_transactions GROUP BY financial_transactions.transaction_type ORDER BY SUM(financial_transactions.transaction_amount) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of financial transactions recorded in the 'financial_transactions' table. It groups the transactions by their type and orders them based on the total amount of each transaction type, limiting the results to a specified number of types.",
            "question": "What is the transaction type that has processed the greatest total amount in transactions?"
        },
        {
            "sample_id": 738,
            "gold_sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
            "gold_complexity": 5,
            "vt": "SELECT AVG(financial_transactions.transaction_amount), SUM(financial_transactions.transaction_amount) FROM financial_transactions",
            "ba": "The virtual table calculates the average and total amount of financial transactions recorded in the 'financial_transactions' table.",
            "question": "Return the average transaction amount, as well as the total amount of all transactions."
        },
        {
            "sample_id": 740,
            "gold_sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
            "gold_complexity": 9,
            "vt": "SELECT customers_cards.card_type_code, COUNT(*) FROM financial_transactions JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY customers_cards.card_type_code",
            "ba": "The virtual table summarizes the count of financial transactions grouped by the type of card used. It retrieves the card type code from the 'customers_cards' table and counts the number of transactions associated with each card type.",
            "question": "What are the different card types, and how many transactions have been made with each?"
        },
        {
            "sample_id": 709,
            "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM customers_cards JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = None.\"blanche\" AND customers.customer_last_name = None.\"huels\" AND customers_cards.card_type_code = None.\"credit\"",
            "ba": "The virtual table counts the number of credit cards associated with a specific customer identified by their first and last names. It joins the 'customers_cards' table with the 'customers' table to link card information to customer details, filtering for a specific first name and last name, as well as the card type code for credit cards.",
            "question": "How many credit cards does customer Blanche Huels have?"
        },
        {
            "sample_id": 711,
            "gold_sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
            "gold_complexity": 8,
            "vt": "SELECT customers_cards.customer_id, COUNT(*) FROM customers_cards GROUP BY customers_cards.customer_id",
            "ba": "The virtual table summarizes the number of cards associated with each customer from the 'customers_cards' table. The placeholder in the SELECT statement represents the customer identifier, and the COUNT function is used to aggregate the total number of cards per customer.",
            "question": "Show all customer ids and the number of cards owned by each customer."
        },
        {
            "sample_id": 698,
            "gold_sql": "SELECT count(*) FROM Customers_cards",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers_cards",
            "ba": "The virtual table provides a count of all customer cards from the 'customers_cards' table. This count represents the total number of unique cards issued to customers.",
            "question": "How many customer cards are there?"
        },
        {
            "sample_id": 704,
            "gold_sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_first_name, customers.customer_last_name, customers.customer_phone FROM customers_cards JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers_cards.card_number = None.\"4560596484842\"",
            "ba": "The virtual table describes the first and last names and phone numbers of customers who hold a specific card. It retrieves this information by joining the 'customers_cards' table with the 'customers' table based on the customer identifier. The placeholder in the WHERE clause represents the card number being queried.",
            "question": "Return the full name and phone of the customer who has card number 4560596484842."
        },
        {
            "sample_id": 687,
            "gold_sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customers.customer_first_name, customers.customer_last_name FROM customers JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table retrieves distinct first and last names of customers from the 'customers' table who have associated accounts in the 'accounts' table. The join condition links the 'customer_id' from the 'customers' table to the 'customer_id' in the 'accounts' table, ensuring that only customers with accounts are included in the result.",
            "question": "Show distinct first and last names for all customers with an account."
        },
        {
            "sample_id": 677,
            "gold_sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
            "gold_complexity": 8,
            "vt": "SELECT accounts.customer_id, COUNT(*) FROM accounts GROUP BY accounts.customer_id",
            "ba": "The virtual table summarizes the number of accounts associated with each customer from the 'accounts' table. The placeholder in the SELECT statement represents the customer identifier, and the COUNT function is used to aggregate the total number of accounts per customer.",
            "question": "Show all customer ids and the number of accounts for each customer."
        },
        {
            "sample_id": 735,
            "gold_sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT transaction_type) FROM financial_transactions",
            "ba": "The virtual table counts the distinct types of transactions recorded in the 'financial_transactions' table. This provides insight into the variety of transaction types that have occurred.",
            "question": "Show the number of transaction types."
        },
        {
            "sample_id": 741,
            "gold_sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
            "gold_complexity": 8,
            "vt": "SELECT financial_transactions.transaction_type, COUNT(*) FROM financial_transactions GROUP BY financial_transactions.transaction_type",
            "ba": "The virtual table summarizes the count of financial transactions grouped by their type from the 'financial_transactions' table. Each transaction type is represented, allowing users to see how many transactions fall under each category.",
            "question": "Show the transaction type and the number of transactions."
        },
        {
            "sample_id": 706,
            "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM customers_cards JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = None.\"art\" AND customers.customer_last_name = None.\"turcotte\"",
            "ba": "The virtual table counts the number of customer cards associated with customers who have a specific first and last name. It joins the 'customers_cards' table with the 'customers' table to link card information to customer details, filtering based on the customer's first and last names.",
            "question": "Count the number of cards the customer with the first name Art and last name Turcotte has."
        },
        {
            "sample_id": 739,
            "gold_sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
            "gold_complexity": 9,
            "vt": "SELECT customers_cards.card_type_code, COUNT(*) FROM financial_transactions JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY customers_cards.card_type_code",
            "ba": "The virtual table summarizes the count of financial transactions grouped by card type from the 'customers_cards' table. It joins the 'financial_transactions' table with the 'customers_cards' table using the card identifier, allowing us to analyze how many transactions are associated with each type of card.",
            "question": "Show the card type codes and the number of transactions."
        },
        {
            "sample_id": 688,
            "gold_sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customers.customer_first_name, customers.customer_last_name FROM customers JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table describes the distinct first and last names of customers from the 'customers' table who are linked to accounts in the 'accounts' table. The join condition connects the two tables based on the customer_id, ensuring that only customers with associated accounts are included in the results.",
            "question": "What are the full names of customers who have accounts?"
        },
        {
            "sample_id": 714,
            "gold_sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT customers_cards.customer_id, COUNT(*) FROM customers_cards GROUP BY customers_cards.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of cards associated with each customer from the 'customers_cards' table. It groups the results by 'customer_id' and counts the total number of cards for each customer. The results are ordered by the count of cards in descending order, and a placeholder is used to limit the number of results returned.",
            "question": "Return the id of the customer who has the most cards, as well as the number of cards."
        },
        {
            "sample_id": 705,
            "gold_sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM customers_cards JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = None.\"art\" AND customers.customer_last_name = None.\"turcotte\"",
            "ba": "The virtual table counts the number of customer cards associated with customers whose first name is 'art' and last name is 'turcotte'. It joins the 'customers_cards' table with the 'customers' table to link customer information with their respective cards.",
            "question": "How many cards does customer Art Turcotte have?"
        },
        {
            "sample_id": 696,
            "gold_sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_phone, customers.customer_email FROM customers WHERE customers.customer_first_name = None.\"aniyah\" AND customers.customer_last_name = None.\"feest\"",
            "ba": "The virtual table describes the phone number and email address of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.",
            "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest."
        },
        {
            "sample_id": 676,
            "gold_sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM accounts JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.customer_first_name = None.\"art\" AND customers.customer_last_name = None.\"turcotte\"",
            "ba": "The virtual table counts the number of accounts associated with customers who have a specific first and last name. It joins the 'accounts' table with the 'customers' table based on the customer_id to filter the results accordingly.",
            "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has."
        },
        {
            "sample_id": 668,
            "gold_sql": "SELECT count(*) FROM Accounts",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM accounts",
            "ba": "The virtual table provides a count of all accounts present in the 'accounts' table. This count gives an overview of the total number of accounts without detailing individual account information.",
            "question": "Count the number of accounts."
        },
        {
            "sample_id": 691,
            "gold_sql": "SELECT count(*) FROM Customers",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all customers from the 'customers' table.",
            "question": "How many customers do we have?"
        },
        {
            "sample_id": 671,
            "gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
            "gold_complexity": 6,
            "vt": "SELECT accounts.other_account_details FROM accounts WHERE accounts.account_name = None.\"338\"",
            "ba": "The virtual table describes the additional details related to accounts from the 'accounts' table for a specific account name. The placeholder in the WHERE clause represents the name of the account being queried.",
            "question": "Show other account details for account with name 338."
        },
        {
            "sample_id": 745,
            "gold_sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
            "gold_complexity": 8,
            "vt": "SELECT financial_transactions.account_id, COUNT(*) FROM financial_transactions GROUP BY financial_transactions.account_id",
            "ba": "The virtual table summarizes the number of financial transactions associated with each account from the 'financial_transactions' table. It groups the results by the account identifier, allowing users to see how many transactions have been made for each account.",
            "question": "Show the account id and the number of transactions for each account"
        },
        {
            "sample_id": 672,
            "gold_sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
            "gold_complexity": 6,
            "vt": "SELECT accounts.other_account_details FROM accounts WHERE accounts.account_name = None.\"338\"",
            "ba": "The virtual table describes the additional details related to accounts from the 'accounts' table for a specific account name. The placeholder in the WHERE clause represents the name of the account being queried.",
            "question": "What are the other account details for the account with the name 338?"
        },
        {
            "sample_id": 701,
            "gold_sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
            "gold_complexity": 8,
            "vt": "SELECT customers_cards.date_valid_from, customers_cards.date_valid_to FROM customers_cards WHERE customers_cards.card_number = None.\"4560596484842\"",
            "ba": "The virtual table provides information about the validity period of a specific card from the 'customers_cards' table. The placeholders in the WHERE clause represent the card number being queried.",
            "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'."
        },
        {
            "sample_id": 712,
            "gold_sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
            "gold_complexity": 8,
            "vt": "SELECT customers_cards.customer_id, COUNT(*) FROM customers_cards GROUP BY customers_cards.customer_id",
            "ba": "The virtual table summarizes the number of cards associated with each customer from the 'customers_cards' table. The placeholder in the SELECT clause represents the customer identifier, and the COUNT function is used to aggregate the total number of cards per customer.",
            "question": "What are the different customer ids, and how many cards does each one hold?"
        },
        {
            "sample_id": 695,
            "gold_sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_phone, customers.customer_email FROM customers WHERE customers.customer_first_name = None.\"aniyah\" AND customers.customer_last_name = None.\"feest\"",
            "ba": "The virtual table describes the phone number and email address of customers from the 'customers' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the customer.",
            "question": "What is the phone and email for customer with first name Aniyah and last name Feest?"
        },
        {
            "sample_id": 721,
            "gold_sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT customers_cards.card_type_code FROM customers_cards GROUP BY customers_cards.card_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different types of cards associated with customers by selecting the card type code from the 'customers_cards' table. It groups the results by card type code and orders them based on the count of each type, limiting the output to a specified number of results.",
            "question": "What is the card type code with most number of cards?"
        },
        {
            "sample_id": 679,
            "gold_sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT accounts.customer_id, COUNT(*) FROM accounts GROUP BY accounts.customer_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of accounts associated with each customer from the 'accounts' table. It groups the results by 'customer_id' and orders them based on the count of accounts, allowing for a limit on the number of results returned.",
            "question": "Show the customer id and number of accounts with most accounts."
        },
        {
            "sample_id": 686,
            "gold_sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
            "gold_complexity": 8,
            "vt": "SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
            "ba": "The virtual table provides a list of customers who do not have any associated accounts. It retrieves the first and last names of all customers from the 'Customers' table and excludes those who have accounts by performing a join with the 'Accounts' table based on the customer_id.",
            "question": "What are the full names of customers who do not have any accounts?"
        },
        {
            "sample_id": 699,
            "gold_sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
            "gold_complexity": 10,
            "vt": "SELECT customers_cards.card_id, customers_cards.customer_id, customers_cards.card_type_code, customers_cards.card_number FROM customers_cards",
            "ba": "The virtual table provides details about customer cards from the 'customers_cards' table, including the card ID, customer ID, card type code, and card number.",
            "question": "Show ids, customer ids, card type codes, card numbers for all cards."
        }
    ],
    "twitter_1": [
        {
            "sample_id": 283,
            "gold_sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
            "gold_complexity": 6,
            "vt": "SELECT tweets.text FROM tweets WHERE tweets.text LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the content of tweets from the 'tweets' table that match a specific text pattern. The placeholder in the LIKE clause allows for flexible searching of tweet content based on user input.",
            "question": "Return the text of tweets about the topic 'intern'."
        },
        {
            "sample_id": 286,
            "gold_sql": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT user_profiles.name, user_profiles.email FROM user_profiles JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY follows.f1 HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and email addresses of users from the 'user_profiles' table who are followed by more than a specified number of followers. The query joins the 'user_profiles' table with the 'follows' table to identify users based on their follower relationships, and it groups the results by the user identifier to count the number of followers for each user. The placeholder in the HAVING clause represents the minimum number of followers required to be included in the results.",
            "question": "Find the name and email for the users who have more than one follower."
        },
        {
            "sample_id": 285,
            "gold_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
            "gold_complexity": 14,
            "vt": "SELECT user_profiles.name FROM user_profiles JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY follows.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift')",
            "ba": "The virtual table describes the names of users from the 'user_profiles' table who are followed by more users than a specific user, identified by their name. It uses a JOIN operation to connect the 'user_profiles' and 'follows' tables, grouping the results by the user identifier and applying a HAVING clause to filter those with a follower count greater than that of the specified user.",
            "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\"."
        },
        {
            "sample_id": 280,
            "gold_sql": "SELECT count(DISTINCT UID) FROM tweets",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT UID) FROM tweets",
            "ba": "The virtual table counts the distinct users who have posted tweets from the 'tweets' table. The placeholder in the COUNT function represents the unique user identifiers.",
            "question": "Find the number of users who posted some tweets."
        },
        {
            "sample_id": 287,
            "gold_sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
            "gold_complexity": 9,
            "vt": "SELECT user_profiles.name FROM user_profiles JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY tweets.uid HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of users from the 'user_profiles' table who have posted more than a specified number of tweets. It joins the 'user_profiles' table with the 'tweets' table based on the user identifier, and groups the results by user to count the number of tweets each user has made. The placeholder in the HAVING clause represents the minimum number of tweets a user must have posted to be included in the results.",
            "question": "Find the names of users who have more than one tweet."
        },
        {
            "sample_id": 275,
            "gold_sql": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'",
            "gold_complexity": 6,
            "vt": "SELECT user_profiles.partitionid FROM user_profiles WHERE user_profiles.name = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the partition identifier for a user from the 'user_profiles' table based on the user's name. The placeholder in the WHERE clause represents the specific name of the user being queried.",
            "question": "What is the partition id of the user named \"Iron Man\"."
        },
        {
            "sample_id": 278,
            "gold_sql": "SELECT count(*) FROM follows GROUP BY f1",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM follows GROUP BY follows.f1",
            "ba": "The virtual table counts the number of followers for each user from the 'follows' table. The result is grouped by the user identifier of the followed users, allowing us to see how many followers each user has.",
            "question": "Find the number of followers for each user."
        },
        {
            "sample_id": 297,
            "gold_sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT user_profiles.name, COUNT(*) FROM user_profiles JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY tweets.uid HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of users from the 'user_profiles' table along with the count of their tweets. It filters the results to show only those users who have posted more than a specified number of tweets. The placeholder in the HAVING clause represents the minimum tweet count required for inclusion in the results.",
            "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them."
        },
        {
            "sample_id": 291,
            "gold_sql": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT user_profiles.name, user_profiles.email FROM user_profiles ORDER BY user_profiles.followers LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and email addresses of users from the 'user_profiles' table, ordered by the number of followers they have. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "Find the name and email of the user followed by the least number of people."
        },
        {
            "sample_id": 299,
            "gold_sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
            "gold_complexity": 10,
            "vt": "SELECT AVG(user_profiles.followers) FROM user_profiles WHERE tweets.uid IN (SELECT tweets.uid FROM tweets)",
            "ba": "The virtual table calculates the average number of followers for users who have posted tweets. It retrieves the follower count from the 'user_profiles' table for users whose unique identifiers are present in the 'tweets' table.",
            "question": "Find the average number of followers for the users who had some tweets."
        },
        {
            "sample_id": 294,
            "gold_sql": "SELECT text FROM tweets ORDER BY createdate",
            "gold_complexity": 6,
            "vt": "SELECT tweets.text FROM tweets ORDER BY tweets.createdate",
            "ba": "The virtual table retrieves the content of tweets from the 'tweets' table, ordered by the date and time they were created. This allows users to see the tweets in chronological order.",
            "question": "List the text of all tweets in the order of date."
        },
        {
            "sample_id": 288,
            "gold_sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
            "gold_complexity": 9,
            "vt": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Susan\"",
            "ba": "The virtual table identifies users who are followed by both 'Mary' and 'Susan'. It does this by joining the 'user_profiles' table with the 'follows' table to find the identifiers of users being followed by each of them, and then uses the INTERSECT operator to find common users in both sets.",
            "question": "Find the id of users who are followed by Mary and Susan."
        },
        {
            "sample_id": 295,
            "gold_sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
            "gold_complexity": 9,
            "vt": "SELECT user_profiles.name, COUNT(*) FROM user_profiles JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY tweets.uid",
            "ba": "The virtual table describes the names of users along with the count of their tweets from the 'user_profiles' and 'tweets' tables. The query joins these two tables on the user identifier, allowing us to aggregate the number of tweets for each user.",
            "question": "Find the name of each user and number of tweets tweeted by each of them."
        },
        {
            "sample_id": 279,
            "gold_sql": "SELECT count(*) FROM tweets",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM tweets",
            "ba": "The virtual table counts the total number of tweets from the 'tweets' table.",
            "question": "Find the number of tweets in record."
        },
        {
            "sample_id": 277,
            "gold_sql": "SELECT count(*) FROM follows",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM follows",
            "ba": "The virtual table counts the total number of follow relationships from the 'follows' table, which indicates how many users are being followed in the system.",
            "question": "How many followers does each user have?"
        },
        {
            "sample_id": 281,
            "gold_sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
            "gold_complexity": 8,
            "vt": "SELECT user_profiles.name, user_profiles.email FROM user_profiles WHERE user_profiles.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and email addresses of users from the 'user_profiles' table whose names match a specific pattern. The placeholder in the WHERE clause represents the name pattern to search for.",
            "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019."
        }
    ],
    "station_weather": [
        {
            "sample_id": 3154,
            "gold_sql": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",
            "gold_complexity": 9,
            "vt": "SELECT train.train_number, train.time FROM train WHERE train.origin = '[placeholder-type:string]' AND train.destination = '[placeholder-type:string]'",
            "ba": "The virtual table describes the train number and scheduled time of trains from the 'train' table that depart from a specific origin and arrive at a specific destination. The placeholders in the WHERE clause represent the origin and destination stations.",
            "question": "Find the number and time of the train that goes from Chennai to Guruvayur."
        },
        {
            "sample_id": 3165,
            "gold_sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT train.origin FROM train GROUP BY train.origin HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the origins of trains from the 'train' table that have more than a specified number of services. The placeholder in the HAVING clause represents the minimum count of trains originating from each station.",
            "question": "Find the origins from which more than 1 train starts."
        },
        {
            "sample_id": 3162,
            "gold_sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT station.id, station.local_authority FROM weekly_weather JOIN station AS t2 ON t1.station_id = t2.id GROUP BY weekly_weather.station_id ORDER BY AVG(weekly_weather.high_temperature) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of station IDs along with their corresponding local authorities, derived from the 'station' table. It joins the 'weekly_weather' table to aggregate weather data, specifically calculating the average high temperature for each station. The results are grouped by station ID and ordered by the average high temperature, allowing users to see which stations have the highest average temperatures. The placeholder in the LIMIT clause allows users to specify how many records they want to retrieve.",
            "question": "Find the id and local authority of the station with has the highest average high temperature."
        },
        {
            "sample_id": 3151,
            "gold_sql": "SELECT train_number ,  name FROM train ORDER BY TIME",
            "gold_complexity": 8,
            "vt": "SELECT train.train_number, train.name FROM train ORDER BY train.time",
            "ba": "The virtual table lists the train numbers and names from the 'train' table, ordered by the scheduled time of the trains.",
            "question": "show all train numbers and names ordered by their time from early to late."
        },
        {
            "sample_id": 3163,
            "gold_sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
            "gold_complexity": 11,
            "vt": "SELECT station.id, station.local_authority FROM weekly_weather JOIN station AS t2 ON t1.station_id = t2.id GROUP BY weekly_weather.station_id HAVING MAX(weekly_weather.precipitation) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the local authorities responsible for stations that have recorded significant precipitation. It joins the 'weekly_weather' table with the 'station' table to filter and group the data based on the maximum precipitation recorded for each station.",
            "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50."
        },
        {
            "sample_id": 3152,
            "gold_sql": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
            "gold_complexity": 10,
            "vt": "SELECT train.time, train.train_number FROM train WHERE train.destination = '[placeholder-type:string]' ORDER BY train.time",
            "ba": "The virtual table provides the scheduled times and train numbers for trains that arrive at a specific destination. The placeholder in the WHERE clause represents the destination station's name, allowing users to filter the results based on their desired arrival point.",
            "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time."
        },
        {
            "sample_id": 3164,
            "gold_sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
            "gold_complexity": 6,
            "vt": "SELECT MIN(weekly_weather.low_temperature), MAX(weekly_weather.wind_speed_mph) FROM weekly_weather",
            "ba": "The virtual table provides the minimum low temperature and maximum wind speed recorded from the 'weekly_weather' table. The placeholders represent the specific weather data being queried.",
            "question": "show the lowest low temperature and highest wind speed in miles per hour."
        },
        {
            "sample_id": 3160,
            "gold_sql": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
            "gold_complexity": 10,
            "vt": "SELECT train.name, train.time FROM station JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE station.local_authority = None.\"chiltern\"",
            "ba": "The virtual table describes the names and scheduled times of trains that stop at stations managed by a specific local authority. The query joins the 'station', 'route', and 'train' tables to filter the results based on the local authority's name.",
            "question": "Find names and times of trains that run through stations for the local authority Chiltern."
        },
        {
            "sample_id": 3159,
            "gold_sql": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"",
            "gold_complexity": 9,
            "vt": "SELECT MAX(weekly_weather.low_temperature), AVG(weekly_weather.precipitation) FROM weekly_weather JOIN station AS t2 ON t1.station_id = t2.id WHERE station.network_name = None.\"amersham\"",
            "ba": "The virtual table provides the maximum low temperature and average precipitation recorded for a specific transport network station. It combines data from the 'weekly_weather' table and the 'station' table, filtering results based on the network name of the station.",
            "question": "Give me the maximum low temperature and average precipitation at the Amersham station."
        }
    ],
    "department_management": [
        {
            "sample_id": 0,
            "gold_sql": "SELECT count(*) FROM head WHERE age  >  56",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM head WHERE head.age > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of department heads from the 'head' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.",
            "question": "How many heads of the departments are older than 56 ?"
        },
        {
            "sample_id": 1,
            "gold_sql": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
            "gold_complexity": 10,
            "vt": "SELECT head.name, head.born_state, head.age FROM head ORDER BY head.age",
            "ba": "The virtual table describes the names, birth states, and ages of department heads from the 'head' table, ordered by their age. This allows users to see the demographic details of department heads in a structured manner.",
            "question": "List the name, born state and age of the heads of departments ordered by age."
        },
        {
            "sample_id": 5,
            "gold_sql": "SELECT name FROM head WHERE born_state != 'California'",
            "gold_complexity": 6,
            "vt": "SELECT head.name FROM head WHERE head.born_state <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of department heads from the 'head' table who were not born in a specified state. The placeholder in the WHERE clause represents the state name that is being excluded.",
            "question": "What are the names of the heads who are born outside the California state?"
        },
        {
            "sample_id": 14,
            "gold_sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
            "gold_complexity": 13,
            "vt": "SELECT department.department_id, department.name, COUNT(*) FROM management JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY department.department_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of departments along with their unique identifiers and the count of heads managing each department. It filters the results to show only those departments that have more than a specified number of heads managing them.",
            "question": "Which department has more than 1 head at a time? List the id, name and the number of heads."
        },
        {
            "sample_id": 13,
            "gold_sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
            "gold_complexity": 9,
            "vt": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
            "ba": "The virtual table retrieves the states of birth of department heads from the 'head' table for two specific departments, 'Treasury' and 'Homeland Security'. It uses joins to connect the 'department', 'management', and 'head' tables based on their relationships. The result is filtered to show only the states that are common to both departments.",
            "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born."
        },
        {
            "sample_id": 11,
            "gold_sql": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM department WHERE NOT department.department_id IN (SELECT department.department_id FROM management)",
            "ba": "The virtual table counts the number of departments from the 'department' table that do not have a corresponding entry in the 'management' table, indicating that these departments do not have a head assigned to them.",
            "question": "How many departments are led by heads who are not mentioned?"
        },
        {
            "sample_id": 8,
            "gold_sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT department.creation FROM department GROUP BY department.creation ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique creation dates of departments from the 'department' table, grouping the results by the creation date and ordering them based on the count of departments established on each date. The placeholder in the LIMIT clause allows for specifying the maximum number of unique creation dates to return.",
            "question": "In which year were most departments established?"
        },
        {
            "sample_id": 9,
            "gold_sql": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'",
            "gold_complexity": 9,
            "vt": "SELECT department.name, department.num_employees FROM department JOIN management AS T2 ON T1.department_id = T2.department_id WHERE management.temporary_acting = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and total number of employees in departments from the 'department' table, filtered by whether the department head is temporarily acting in their position. The placeholder in the WHERE clause represents the status of the head's position.",
            "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?"
        },
        {
            "sample_id": 2,
            "gold_sql": "SELECT creation ,  name ,  budget_in_billions FROM department",
            "gold_complexity": 8,
            "vt": "SELECT department.creation, department.name, department.budget_in_billions FROM department",
            "ba": "The virtual table describes the creation date, name, and annual budget of departments from the 'department' table.",
            "question": "List the creation year, name and budget of each department."
        }
    ],
    "insurance_and_eClaims": [
        {
            "sample_id": 1525,
            "gold_sql": "SELECT count(*) FROM claims_processing_stages",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM claims_processing_stages",
            "ba": "The virtual table provides a count of all unique claim processing stages from the 'claims_processing_stages' table. This count can be useful for understanding the total number of distinct stages involved in the claims processing workflow.",
            "question": "How many claim processing stages are there in total?"
        },
        {
            "sample_id": 1530,
            "gold_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
            "gold_complexity": 6,
            "vt": "SELECT customers.customer_details FROM customers WHERE customers.customer_details LIKE None.\"%diana%\"",
            "ba": "The virtual table retrieves detailed information about customers from the 'customers' table whose details contain a specific substring. The placeholder in the WHERE clause represents the substring to search for within the customer details.",
            "question": "Which customers have the substring \"Diana\" in their names? Return the customer details."
        },
        {
            "sample_id": 1528,
            "gold_sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT claims_processing_stages.claim_status_name FROM claims_processing JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY claims_processing.claim_stage_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the claim processing stages by retrieving the names of the current statuses of claims from the 'claims_processing_stages' table. It joins the 'claims_processing' table to associate each claim with its processing stage, groups the results by the claim stage, and orders them based on the count of claims in each stage. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Which claim processing stage has the most claims? Show the claim status name."
        },
        {
            "sample_id": 1532,
            "gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT customers.customer_details FROM policies JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE policies.policy_type_code = None.\"deputy\"",
            "ba": "The virtual table retrieves distinct customer details from the 'customers' table for customers who have a specific type of insurance policy. The query joins the 'policies' table with the 'customers' table based on the customer ID, filtering for policies of a certain type using a placeholder.",
            "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details."
        },
        {
            "sample_id": 1508,
            "gold_sql": "SELECT customer_details FROM customers ORDER BY customer_details",
            "gold_complexity": 6,
            "vt": "SELECT customers.customer_details FROM customers ORDER BY customers.customer_details",
            "ba": "The virtual table describes the detailed information of customers from the 'customers' table, sorted in ascending order based on the customer details. This allows for an organized view of customer information.",
            "question": "Sort the customer names in alphabetical order."
        },
        {
            "sample_id": 1534,
            "gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT customers.customer_details FROM policies JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE policies.policy_type_code = None.\"deputy\" OR policies.policy_type_code = None.\"uniform\"",
            "ba": "The virtual table retrieves distinct customer details from the 'customers' table for customers who have specific types of insurance policies. It joins the 'policies' table with the 'customers' table based on the customer identifier, filtering for policies of type 'deputy' or 'uniform'.",
            "question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details."
        },
        {
            "sample_id": 1533,
            "gold_sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT customers.customer_details FROM policies JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE policies.policy_type_code = None.\"deputy\" OR policies.policy_type_code = None.\"uniform\"",
            "ba": "The virtual table retrieves distinct customer details from the 'customers' table for customers who have specific types of insurance policies. It joins the 'policies' table with the 'customers' table based on the customer identifier, filtering for policies that are either of type 'deputy' or 'uniform'.",
            "question": "Find the names of customers who either have an deputy policy or uniformed policy."
        },
        {
            "sample_id": 1541,
            "gold_sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
            "gold_complexity": 6,
            "vt": "SELECT claims_processing_stages.claim_status_description FROM claims_processing_stages WHERE claims_processing_stages.claim_status_name = None.\"open\"",
            "ba": "The virtual table describes the status description of claims processing stages from the 'claims_processing_stages' table for claims that are currently open. The placeholder in the WHERE clause represents the claim status name that is being filtered.",
            "question": "What is the description of the claim status \"Open\"?"
        },
        {
            "sample_id": 1516,
            "gold_sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
            "gold_complexity": 5,
            "vt": "SELECT SUM(claim_headers.amount_piad), AVG(claim_headers.amount_piad) FROM claim_headers",
            "ba": "The virtual table summarizes the total and average amounts paid for claims from the 'claim_headers' table. It provides insights into the financial outcomes of claims processed, allowing for an understanding of both the total payouts and the average payout per claim.",
            "question": "What are the total amount and average amount paid in claim headers?"
        },
        {
            "sample_id": 1514,
            "gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT policies.policy_type_code FROM policies GROUP BY policies.policy_type_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of insurance policies from the 'policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.",
            "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes."
        },
        {
            "sample_id": 1513,
            "gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT policies.policy_type_code FROM policies GROUP BY policies.policy_type_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the types of insurance policies from the 'policies' table that have been issued more than a specified number of times. The placeholder in the HAVING clause represents the minimum count of policies required to be included in the results.",
            "question": "Find all the policy types that are used by more than 2 customers."
        },
        {
            "sample_id": 1512,
            "gold_sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT policies.policy_type_code FROM policies GROUP BY policies.policy_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different types of insurance policies available in the 'policies' table. It groups the policies by their type code and orders them based on the count of each type, allowing users to see the most common policy types. The placeholder in the LIMIT clause represents the maximum number of policy types to be displayed.",
            "question": "Find the type code of the most frequently used policy."
        },
        {
            "sample_id": 1539,
            "gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_details FROM policies JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY customers.customer_details ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves detailed information about customers from the 'customers' table who have insurance policies. It joins the 'policies' table to link each policy to its respective customer. The results are grouped by customer details to avoid duplicates and ordered by the count of policies associated with each customer, limiting the output to a specified number of records.",
            "question": "Find the name of the customer that has been involved in the most policies."
        },
        {
            "sample_id": 1517,
            "gold_sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT SUM(claim_headers.amount_claimed) FROM claim_headers JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE claims_documents.created_date = (SELECT claims_documents.created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
            "ba": "The virtual table summarizes the total amount claimed from the 'claim_headers' table, specifically for claims that have associated documents created on the earliest date recorded in the 'claims_documents' table. It utilizes a JOIN to link the 'claim_headers' and 'claims_documents' tables based on their identifiers, ensuring that only relevant claims are considered based on the creation date of the documents.",
            "question": "Find the total amount claimed in the most recently created document."
        },
        {
            "sample_id": 1546,
            "gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_details FROM policies JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE policies.start_date = (SELECT MAX(policies.start_date) FROM policies)",
            "ba": "The virtual table retrieves detailed information about customers from the 'customers' table who have the most recently started insurance policy. It uses a JOIN operation to link the 'policies' table with the 'customers' table based on the customer identifier, and filters the results to only include policies that have the latest start date.",
            "question": "Find the customer who started a policy most recently."
        },
        {
            "sample_id": 1519,
            "gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_details FROM claim_headers JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE claim_headers.amount_claimed = (SELECT MAX(claim_headers.amount_claimed) FROM claim_headers)",
            "ba": "The virtual table retrieves detailed information about customers associated with the highest claimed amount from the claims made. It joins the 'claim_headers' table with the 'policies' table to link claims to their respective policies, and then further joins with the 'customers' table to get customer details. The query filters for the maximum amount claimed across all claims.",
            "question": "What is the name of the customer who has made the largest amount of claim in a single claim?"
        },
        {
            "sample_id": 1535,
            "gold_sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
            "gold_complexity": 8,
            "vt": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
            "ba": "The virtual table combines detailed information about customers and staff members from the 'customers' and 'staff' tables respectively. It uses a UNION to merge the results, allowing for a comprehensive view of both customer and staff details in a single output.",
            "question": "Find the names of all the customers and staff members."
        },
        {
            "sample_id": 1518,
            "gold_sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
            "gold_complexity": 14,
            "vt": "SELECT SUM(claim_headers.amount_claimed) FROM claim_headers JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE claims_documents.created_date = (SELECT claims_documents.created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
            "ba": "The virtual table calculates the total amount claimed from the 'claim_headers' table by joining it with the 'claims_documents' table. It filters the results to include only those claims that have a document created on the earliest created date found in the 'claims_documents' table.",
            "question": "How much amount in total were claimed in the most recently created document?"
        },
        {
            "sample_id": 1537,
            "gold_sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
            "gold_complexity": 8,
            "vt": "SELECT policies.policy_type_code, COUNT(*) FROM policies GROUP BY policies.policy_type_code",
            "ba": "The virtual table summarizes the count of insurance policies grouped by their type from the 'policies' table. Each unique policy type is represented along with the total number of policies of that type.",
            "question": "Find the number of records of each policy type and its type code."
        },
        {
            "sample_id": 1523,
            "gold_sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
            "gold_complexity": 7,
            "vt": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id",
            "ba": "The virtual table provides a list of customer details from the 'customers' table, excluding those customers who have associated insurance policies in the 'policies' table. The query uses an EXCEPT clause to filter out customer details that are linked to any policy, ensuring that only customers without policies are displayed.",
            "question": "Find the names of customers who have no policies associated."
        },
        {
            "sample_id": 1529,
            "gold_sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
            "gold_complexity": 6,
            "vt": "SELECT customers.customer_details FROM customers WHERE customers.customer_details LIKE None.\"%diana%\"",
            "ba": "The virtual table retrieves detailed information about customers from the 'customers' table whose details contain a specific substring. The placeholder in the WHERE clause represents the substring to search for within the customer details.",
            "question": "Find the names of customers whose name contains \"Diana\"."
        },
        {
            "sample_id": 1515,
            "gold_sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
            "gold_complexity": 5,
            "vt": "SELECT SUM(claim_headers.amount_piad), AVG(claim_headers.amount_piad) FROM claim_headers",
            "ba": "The virtual table summarizes the total and average amounts paid for claims from the 'claim_headers' table. It provides insights into the financial outcomes of claims processed, allowing users to understand the overall payout and average payout per claim.",
            "question": "Find the total and average amount paid in claim headers."
        },
        {
            "sample_id": 1521,
            "gold_sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_details FROM claim_headers JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE claim_headers.amount_piad = (SELECT MIN(claim_headers.amount_piad) FROM claim_headers)",
            "ba": "The virtual table retrieves detailed information about customers associated with the claim that has the lowest amount paid. It joins the 'claim_headers' table with the 'policies' table to link claims to their respective policies, and then joins with the 'customers' table to get customer details. The query filters for the claim with the minimum amount paid using a subquery.",
            "question": "What is the name of the customer who has made the minimum amount of payment in one claim?"
        },
        {
            "sample_id": 1540,
            "gold_sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT customers.customer_details FROM policies JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY customers.customer_details ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves detailed information about customers from the 'customers' table who have insurance policies. It joins the 'policies' table to link each policy to its respective customer. The results are grouped by customer details to avoid duplicates and ordered by the count of policies associated with each customer, limiting the output to a specified number of records.",
            "question": "Which customer have the most policies? Give me the customer details."
        }
    ],
    "protein_institute": [
        {
            "sample_id": 1913,
            "gold_sql": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building",
            "gold_complexity": 6,
            "vt": "SELECT AVG(building.floors), MAX(building.floors), MIN(building.floors) FROM building",
            "ba": "The virtual table calculates the average, maximum, and minimum number of floors from the 'building' table.",
            "question": "What are the average, maximum, and minimum number of floors for all buildings?"
        },
        {
            "sample_id": 1925,
            "gold_sql": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
            "gold_complexity": 9,
            "vt": "SELECT institution.institution, COUNT(*) FROM institution JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY institution.institution_id",
            "ba": "The virtual table provides a count of proteins associated with each institution from the 'institution' table. It joins the 'institution' table with the 'protein' table based on the institution's identifier, allowing us to aggregate the number of proteins linked to each institution.",
            "question": "Show institution names along with the number of proteins for each institution."
        },
        {
            "sample_id": 1923,
            "gold_sql": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
            "gold_complexity": 13,
            "vt": "SELECT building.name, building.height_feet FROM building JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE institution.founded > [placeholder-type:numeric] GROUP BY building.building_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and heights of buildings from the 'building' table that are associated with institutions founded after a certain year. The query groups the results by building and filters to include only those buildings linked to at least a specified number of institutions.",
            "question": "Show the names and heights of buildings with at least two institutions founded after 1880."
        },
        {
            "sample_id": 1929,
            "gold_sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM institution WHERE NOT institution.institution_id IN (SELECT institution.institution_id FROM protein)",
            "ba": "The virtual table counts the number of institutions from the 'institution' table that do not have any associated proteins in the 'protein' table. The subquery identifies all institution IDs that are linked to proteins, and the main query counts those institutions that are not included in that list.",
            "question": "How many institutions do not have an associated protein in our record?"
        },
        {
            "sample_id": 1910,
            "gold_sql": "SELECT count(*) FROM building",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM building",
            "ba": "The virtual table provides a count of all buildings recorded in the 'building' table. This count represents the total number of unique buildings without any specific filtering or conditions applied.",
            "question": "How many buildings are there?"
        },
        {
            "sample_id": 1916,
            "gold_sql": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
            "gold_complexity": 10,
            "vt": "SELECT institution.institution, institution.location FROM institution WHERE institution.founded > [placeholder-type:numeric] AND institution.type = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names and locations of institutions from the 'institution' table that were founded after a specific year and belong to a certain type of institution. The placeholders in the WHERE clause represent the founding year and the type of institution.",
            "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\"."
        },
        {
            "sample_id": 1922,
            "gold_sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
            "gold_complexity": 9,
            "vt": "SELECT building.name, COUNT(*) FROM building JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY building.building_id",
            "ba": "The virtual table provides a count of institutions associated with each building, displaying the name of the building and the total number of institutions linked to it. The query joins the 'building' table with the 'institution' table based on the building's unique identifier, grouping the results by each building to aggregate the count of institutions.",
            "question": "For each building, show the name of the building and the number of institutions in it."
        },
        {
            "sample_id": 1920,
            "gold_sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
            "gold_complexity": 10,
            "vt": "SELECT building.name FROM building WHERE NOT building.building_id IN (SELECT building.building_id FROM institution)",
            "ba": "The virtual table lists the names of buildings from the 'building' table that are not associated with any institution. This is determined by checking which building IDs do not appear in the 'institution' table, effectively filtering out buildings that have institutions linked to them.",
            "question": "Show the name of buildings that do not have any institution."
        },
        {
            "sample_id": 1919,
            "gold_sql": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
            "gold_complexity": 8,
            "vt": "SELECT institution.type FROM institution WHERE institution.founded > [placeholder-type:numeric] AND institution.enrollment >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the types of institutions from the 'institution' table that were founded after a specific year and have an enrollment count greater than or equal to a specified number. The placeholders in the WHERE clause represent the year of founding and the minimum enrollment count.",
            "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment."
        },
        {
            "sample_id": 1924,
            "gold_sql": "SELECT DISTINCT TYPE FROM institution",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT institution.type FROM institution",
            "ba": "The virtual table lists the distinct types of institutions from the 'institution' table. Each type represents a category such as university or college, providing insight into the variety of institutions present.",
            "question": "Show all the distinct institution types."
        },
        {
            "sample_id": 1918,
            "gold_sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT institution.type FROM institution GROUP BY institution.type ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different types of institutions from the 'institution' table, grouped by their type. It counts the number of institutions for each type and orders them, limiting the results to a specified number of types.",
            "question": "Show the institution type with the largest number of institutions."
        },
        {
            "sample_id": 1917,
            "gold_sql": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE",
            "gold_complexity": 10,
            "vt": "SELECT institution.type, COUNT(*), SUM(institution.enrollment) FROM institution GROUP BY institution.type",
            "ba": "The virtual table summarizes the types of institutions and their total enrollment numbers from the 'institution' table. It groups the results by the type of institution, providing a count of institutions for each type and the total enrollment across those institutions.",
            "question": "Show institution types, along with the number of institutions and total enrollment for each type."
        }
    ],
    "decoration_competition": [
        {
            "sample_id": 4481,
            "gold_sql": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country",
            "gold_complexity": 8,
            "vt": "SELECT member.country, COUNT(*) FROM member GROUP BY member.country",
            "ba": "The virtual table summarizes the number of members from each country by counting the occurrences of members grouped by their country of residence. The placeholder in the SELECT statement allows for dynamic querying based on the country.",
            "question": "Show the different countries and the number of members from each."
        },
        {
            "sample_id": 4490,
            "gold_sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
            "gold_complexity": 7,
            "vt": "SELECT member.name FROM member JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY round.rank_in_round",
            "ba": "The virtual table lists the names of members from the 'member' table who participated in rounds of competition, ordered by their rank in those rounds. The query joins the 'member' table with the 'round' table to associate each member with their respective competition results, using the member's unique identifier to link the two tables.",
            "question": "Show the names of members in ascending order of their rank in rounds."
        },
        {
            "sample_id": 4491,
            "gold_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)",
            "gold_complexity": 10,
            "vt": "SELECT member.name FROM member WHERE NOT member.member_id IN (SELECT member.member_id FROM round)",
            "ba": "The virtual table lists the names of members from the 'member' table who have not participated in any rounds of competition. The query uses a subquery to identify member IDs that are present in the 'round' table, ensuring that only those members who are not linked to any round are selected.",
            "question": "List the names of members who did not participate in any round."
        },
        {
            "sample_id": 4488,
            "gold_sql": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID",
            "gold_complexity": 7,
            "vt": "SELECT member.name, round.decoration_theme FROM member JOIN round AS T2 ON T1.Member_ID = T2.Member_ID",
            "ba": "The virtual table describes the names of members and their corresponding decoration themes from the 'member' and 'round' tables. The join operation links members to their respective rounds based on the member's unique identifier, allowing us to retrieve the relevant information about each member's performance in a specific round.",
            "question": "Show the names of members and the decoration themes they have."
        },
        {
            "sample_id": 4483,
            "gold_sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT member.country FROM member GROUP BY member.country HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the countries of members from the 'member' table, filtering to show only those countries that have more than a specified number of members. The placeholder in the HAVING clause represents the minimum count of members required for a country to be included in the results.",
            "question": "Which countries have more than two members?"
        },
        {
            "sample_id": 4479,
            "gold_sql": "SELECT Name ,  Country FROM member",
            "gold_complexity": 6,
            "vt": "SELECT member.name, member.country FROM member",
            "ba": "The virtual table describes the names and countries of members from the 'member' table.",
            "question": "What are the names and countries of members?"
        },
        {
            "sample_id": 4484,
            "gold_sql": "SELECT Leader_Name ,  College_Location FROM college",
            "gold_complexity": 6,
            "vt": "SELECT college.leader_name, college.college_location FROM college",
            "ba": "The virtual table describes the leader's name and geographical location of colleges from the 'college' table.",
            "question": "Show the leader names and locations of colleges."
        },
        {
            "sample_id": 4478,
            "gold_sql": "SELECT Name FROM member ORDER BY Name ASC",
            "gold_complexity": 6,
            "vt": "SELECT member.name FROM member ORDER BY member.name",
            "ba": "The virtual table lists the names of all members from the 'member' table, sorted in alphabetical order.",
            "question": "List the names of members in ascending alphabetical order."
        },
        {
            "sample_id": 4477,
            "gold_sql": "SELECT count(*) FROM member",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM member",
            "ba": "The virtual table counts the total number of members in the 'member' table.",
            "question": "How many members are there?"
        }
    ],
    "student_1": [
        {
            "sample_id": 4088,
            "gold_sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), list.classroom FROM list GROUP BY list.classroom",
            "ba": "The virtual table provides a count of students grouped by their designated classrooms from the 'list' table.",
            "question": "How many students does one classroom have?"
        },
        {
            "sample_id": 4029,
            "gold_sql": "SELECT DISTINCT classroom ,  grade FROM list",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT list.classroom, list.grade FROM list",
            "ba": "The virtual table provides a distinct list of classrooms and their corresponding grade levels from the 'list' table, which contains information about students.",
            "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number."
        },
        {
            "sample_id": 4056,
            "gold_sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
            "gold_complexity": 10,
            "vt": "SELECT teachers.firstname, teachers.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.firstname = None.\"evelina\" AND list.lastname = None.\"bromley\"",
            "ba": "The virtual table describes the first and last names of teachers from the 'teachers' table who share the same classroom as a specific student identified by their first and last name from the 'list' table. The placeholders in the WHERE clause represent the student's first and last names.",
            "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers."
        },
        {
            "sample_id": 4084,
            "gold_sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
            "gold_complexity": 10,
            "vt": "SELECT list.classroom, COUNT(*) FROM list WHERE list.grade = None.\"4\" GROUP BY list.classroom",
            "ba": "The virtual table summarizes the number of students in each classroom who are in the 4th grade. It retrieves the classroom information from the 'list' table and counts the number of students per classroom, grouping the results by classroom.",
            "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it."
        },
        {
            "sample_id": 4040,
            "gold_sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT teachers.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.grade = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct last names of teachers from the 'teachers' table who share a classroom with students of a specific grade level. The placeholder in the WHERE clause represents the grade level of the students.",
            "question": "what are the last names of the teachers who teach grade 5?"
        },
        {
            "sample_id": 4025,
            "gold_sql": "SELECT firstname FROM list WHERE classroom  =  108",
            "gold_complexity": 6,
            "vt": "SELECT list.firstname FROM list WHERE list.classroom = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of students from the 'list' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.",
            "question": "Find the first names of students studying in room 108."
        },
        {
            "sample_id": 4067,
            "gold_sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.firstname = None.\"madlock\" AND list.lastname = None.\"ray\"",
            "ba": "The virtual table counts the number of students from the 'list' table who are in the same classroom as a specific teacher. It joins the 'list' table with the 'teachers' table based on the classroom assignment. The placeholders represent the first and last names of the student being queried.",
            "question": "How many teachers does the student named MADLOCK RAY have?"
        },
        {
            "sample_id": 4059,
            "gold_sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE teachers.firstname = None.\"loria\" AND teachers.lastname = None.\"ondersma\"",
            "ba": "The virtual table counts the number of students from the 'list' table who are in the same classroom as a specific teacher. The query joins the 'list' table with the 'teachers' table based on the classroom assignment and filters the results to match a specific teacher's first and last name.",
            "question": "How many students does LORIA ONDERSMA teaches?"
        },
        {
            "sample_id": 4060,
            "gold_sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE teachers.firstname = None.\"loria\" AND teachers.lastname = None.\"ondersma\"",
            "ba": "The virtual table counts the number of students from the 'list' table who are in the same classroom as a specific teacher. The query joins the 'list' table with the 'teachers' table based on the classroom assignment and filters the results to match a specific teacher's first and last name.",
            "question": "Count the number of students the teacher LORIA ONDERSMA teaches."
        },
        {
            "sample_id": 4083,
            "gold_sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
            "gold_complexity": 10,
            "vt": "SELECT list.classroom, COUNT(*) FROM list WHERE list.grade = None.\"4\" GROUP BY list.classroom",
            "ba": "The virtual table summarizes the number of students in each classroom who are in the 4th grade. It retrieves the classroom information from the 'list' table and counts the number of students per classroom, grouping the results by classroom.",
            "question": "Report the total number of students for each fourth-grade classroom."
        },
        {
            "sample_id": 4062,
            "gold_sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE teachers.firstname = None.\"kawa\" AND teachers.lastname = None.\"gordon\"",
            "ba": "The virtual table counts the number of students from the 'list' table who are in the same classroom as a specific teacher. The query joins the 'list' table with the 'teachers' table based on the classroom assignment. It filters the results to include only those classrooms where the teacher's first name is a specific value and the last name is another specific value.",
            "question": "Find the number of students taught by the teacher KAWA GORDON."
        },
        {
            "sample_id": 4074,
            "gold_sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
            "gold_complexity": 11,
            "vt": "SELECT list.grade, COUNT(DISTINCT classroom), COUNT(*) FROM list GROUP BY list.grade",
            "ba": "The virtual table summarizes the number of distinct classrooms and total students for each academic grade level from the 'list' table.",
            "question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade."
        },
        {
            "sample_id": 4027,
            "gold_sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT list.firstname FROM list WHERE list.classroom = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first names of students from the 'list' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.",
            "question": "What are the first names of students studying in room 107?"
        },
        {
            "sample_id": 4052,
            "gold_sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
            "gold_complexity": 10,
            "vt": "SELECT list.firstname, list.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE teachers.firstname = None.\"otha\" AND teachers.lastname = None.\"moyer\"",
            "ba": "The virtual table describes the first and last names of students from the 'list' table who are in the same classroom as a specific teacher. The query joins the 'list' and 'teachers' tables based on the classroom assignment, filtering for a particular teacher's first and last name using placeholders.",
            "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students."
        },
        {
            "sample_id": 4021,
            "gold_sql": "SELECT count(*) FROM list",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM list",
            "ba": "The virtual table provides a count of all students from the 'list' table.",
            "question": "Find the number of students in total."
        },
        {
            "sample_id": 4034,
            "gold_sql": "SELECT DISTINCT grade FROM list WHERE classroom  =  105",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT list.grade FROM list WHERE list.classroom = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct academic grade levels of students from the 'list' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.",
            "question": "Which grade is studying in room 105?"
        },
        {
            "sample_id": 4035,
            "gold_sql": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT list.classroom FROM list WHERE list.grade = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct classrooms from the 'list' table where students are in a specific grade level. The placeholder in the WHERE clause represents the grade level of the students.",
            "question": "Which classrooms are used by grade 4?"
        },
        {
            "sample_id": 4054,
            "gold_sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
            "gold_complexity": 10,
            "vt": "SELECT list.firstname, list.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE teachers.firstname = None.\"marrotte\" AND teachers.lastname = None.\"kirk\"",
            "ba": "The virtual table describes the first and last names of students from the 'list' table who are in the same classroom as a specific teacher. The query joins the 'list' and 'teachers' tables based on the classroom assignment, filtering for a particular teacher's first and last name using placeholders.",
            "question": "Which are the first and last names of the students taught by MARROTTE KIRK?"
        },
        {
            "sample_id": 4042,
            "gold_sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT teachers.firstname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.grade = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first names of teachers from the 'teachers' table who share a classroom with students of a specific grade level. The placeholder in the WHERE clause represents the grade level of the students.",
            "question": "What are the first names of the teachers who teach grade 1?"
        },
        {
            "sample_id": 4030,
            "gold_sql": "SELECT DISTINCT classroom ,  grade FROM list",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT list.classroom, list.grade FROM list",
            "ba": "The virtual table describes the distinct classrooms and their corresponding grade levels from the 'list' table, which contains information about students.",
            "question": "What are the grade number and classroom number of each class in the list?"
        },
        {
            "sample_id": 4077,
            "gold_sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT list.classroom FROM list GROUP BY list.classroom ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique classrooms from the 'list' table, which contains student information. It groups the results by classroom and orders them based on the number of students in each classroom, limiting the output to a specified number of classrooms.",
            "question": "Which classroom has the most students?"
        },
        {
            "sample_id": 4086,
            "gold_sql": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT teachers.firstname, teachers.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY teachers.firstname, teachers.lastname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the first and last names of teachers from the 'teachers' table who share a classroom with students listed in the 'list' table. The results are grouped by the teachers' names and ordered by the count of students in each classroom, with a limit on the number of results returned.",
            "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher."
        },
        {
            "sample_id": 4044,
            "gold_sql": "SELECT firstname FROM teachers WHERE classroom  =  110",
            "gold_complexity": 6,
            "vt": "SELECT teachers.firstname FROM teachers WHERE teachers.classroom = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of teachers from the 'teachers' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.",
            "question": "Which teachers teach in classroom 110? Give me their first names."
        },
        {
            "sample_id": 4050,
            "gold_sql": "SELECT DISTINCT firstname ,  lastname FROM list",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT list.firstname, list.lastname FROM list",
            "ba": "The virtual table describes the distinct first and last names of students from the 'list' table.",
            "question": "Show each student's first name and last name."
        },
        {
            "sample_id": 4069,
            "gold_sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
            "gold_complexity": 13,
            "vt": "SELECT DISTINCT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = \"OTHA\" AND T2.lastname = \"MOYER\"",
            "ba": "The virtual table identifies distinct students from the 'list' table who are in the first grade and are assigned to classrooms that have teachers. It excludes those students who are taught by a specific teacher named OTHA MOYER.",
            "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names."
        },
        {
            "sample_id": 4041,
            "gold_sql": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT teachers.firstname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.grade = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct first names of teachers from the 'teachers' table who are assigned to the same classroom as students in a specific grade level. The placeholder in the WHERE clause represents the grade level of the students.",
            "question": "Find the first names of the teachers that teach first grade."
        },
        {
            "sample_id": 4073,
            "gold_sql": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
            "gold_complexity": 11,
            "vt": "SELECT list.grade, COUNT(DISTINCT classroom), COUNT(*) FROM list GROUP BY list.grade",
            "ba": "The virtual table summarizes the number of distinct classrooms and total students for each academic grade level from the 'list' table.",
            "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade."
        },
        {
            "sample_id": 4072,
            "gold_sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT list.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.grade = [placeholder-type:numeric] AND teachers.firstname <> None.\"covin\" AND teachers.lastname <> None.\"jerome\"",
            "ba": "The virtual table retrieves distinct last names of students from the 'list' table who are in a specific grade and share a classroom with teachers whose first name is not 'covin' and last name is not 'jerome'.",
            "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students."
        },
        {
            "sample_id": 4080,
            "gold_sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
            "gold_complexity": 8,
            "vt": "SELECT list.classroom, COUNT(*) FROM list GROUP BY list.classroom",
            "ba": "The virtual table summarizes the number of students in each classroom by counting the entries in the 'list' table and grouping them by the 'classroom' column.",
            "question": "For each classroom, show the classroom number and find how many students are using it."
        },
        {
            "sample_id": 4022,
            "gold_sql": "SELECT count(*) FROM list",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM list",
            "ba": "The virtual table provides a count of all students from the 'list' table.",
            "question": "How many students are there?"
        },
        {
            "sample_id": 4081,
            "gold_sql": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
            "gold_complexity": 10,
            "vt": "SELECT list.classroom, COUNT(*) FROM list WHERE list.grade = None.\"0\" GROUP BY list.classroom",
            "ba": "The virtual table summarizes the number of students in each classroom who are in a specific grade level. It retrieves the classroom information from the 'list' table and counts the number of students per classroom, filtering for those in grade '0'.",
            "question": "For each grade 0 classroom, report the total number of students."
        },
        {
            "sample_id": 4047,
            "gold_sql": "SELECT DISTINCT firstname ,  lastname FROM teachers",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT teachers.firstname, teachers.lastname FROM teachers",
            "ba": "The virtual table retrieves the distinct first and last names of teachers from the 'teachers' table.",
            "question": "Report the first name and last name of all the teachers."
        },
        {
            "sample_id": 4049,
            "gold_sql": "SELECT DISTINCT firstname ,  lastname FROM list",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT list.firstname, list.lastname FROM list",
            "ba": "The virtual table describes the distinct first and last names of students from the 'list' table.",
            "question": "Report the first name and last name of all the students."
        },
        {
            "sample_id": 4079,
            "gold_sql": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
            "gold_complexity": 8,
            "vt": "SELECT list.classroom, COUNT(*) FROM list GROUP BY list.classroom",
            "ba": "The virtual table summarizes the number of students in each classroom by counting the entries in the 'list' table and grouping them by the 'classroom' column.",
            "question": "Report the number of students in each classroom."
        },
        {
            "sample_id": 4071,
            "gold_sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT list.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.grade = [placeholder-type:numeric] AND teachers.firstname <> None.\"covin\" AND teachers.lastname <> None.\"jerome\"",
            "ba": "The virtual table identifies distinct last names of students from the 'list' table who are in a specific grade and share a classroom with teachers whose first name is not 'covin' and last name is not 'jerome'.",
            "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME."
        },
        {
            "sample_id": 4066,
            "gold_sql": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.firstname = None.\"chrissy\" AND list.lastname = None.\"nabozny\"",
            "ba": "The virtual table counts the number of students from the 'list' table who are in the same classroom as a specific teacher. It joins the 'list' table with the 'teachers' table based on the classroom assignment. The query filters for a specific student identified by their first and last name using placeholders.",
            "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY."
        },
        {
            "sample_id": 4076,
            "gold_sql": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
            "gold_complexity": 9,
            "vt": "SELECT list.classroom, COUNT(DISTINCT grade) FROM list GROUP BY list.classroom",
            "ba": "The virtual table summarizes the number of distinct academic grade levels for students in each classroom from the 'list' table.",
            "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room."
        },
        {
            "sample_id": 4058,
            "gold_sql": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
            "gold_complexity": 8,
            "vt": "SELECT teachers.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.firstname = None.\"gell\" AND list.lastname = None.\"tami\"",
            "ba": "The virtual table describes the last names of teachers from the 'teachers' table who share the same classroom as a specific student identified by their first and last name. The placeholders in the WHERE clause represent the student's first and last names.",
            "question": "What are the last names of the teachers who teach the student called GELL TAMI?"
        },
        {
            "sample_id": 4043,
            "gold_sql": "SELECT firstname FROM teachers WHERE classroom  =  110",
            "gold_complexity": 6,
            "vt": "SELECT teachers.firstname FROM teachers WHERE teachers.classroom = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of teachers from the 'teachers' table who are assigned to a specific classroom. The placeholder in the WHERE clause represents the classroom number.",
            "question": "Find the first names of all the teachers that teach in classroom 110."
        },
        {
            "sample_id": 4039,
            "gold_sql": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT teachers.lastname FROM list JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE list.grade = [placeholder-type:numeric]",
            "ba": "The virtual table describes the distinct last names of teachers from the 'teachers' table who share a classroom with students of a specific grade level. The placeholder in the WHERE clause represents the grade level of the students.",
            "question": "Find the last names of the teachers that teach fifth grade."
        }
    ],
    "document_management": [
        {
            "sample_id": 4530,
            "gold_sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
            "gold_complexity": 8,
            "vt": "SELECT images.image_name, images.image_url FROM images ORDER BY images.image_name",
            "ba": "The virtual table describes the names and URLs of images from the 'images' table, sorted by the image name. This allows users to retrieve a list of images along with their respective links for easy access.",
            "question": "List all the image name and URLs in the order of their names."
        },
        {
            "sample_id": 4527,
            "gold_sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT roles.role_description FROM roles WHERE roles.role_code = (SELECT roles.role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the description of the role associated with the user who has the most frequent role based on their login. It first identifies the role code of the user by counting the occurrences of each role code from the 'users' table, filtering by the specified user login. The result is then used to fetch the corresponding role description from the 'roles' table.",
            "question": "What is the description of the most popular role among users that have logged in?"
        },
        {
            "sample_id": 4526,
            "gold_sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT roles.role_description FROM roles WHERE roles.role_code = (SELECT roles.role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the role description of the most frequently assigned role for a specific user based on their login. It first identifies the role code associated with the user by filtering the 'users' table using the user_login placeholder. Then, it groups the results by role_code and orders them by the count of occurrences in descending order, limiting the result to the top one. Finally, it uses this role_code to fetch the corresponding role description from the 'roles' table.",
            "question": "Find the description of the most popular role among the users that have logged in."
        },
        {
            "sample_id": 4532,
            "gold_sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), users.role_code FROM users GROUP BY users.role_code",
            "ba": "The virtual table provides a count of users grouped by their role codes from the 'users' table. This allows for an overview of how many users are assigned to each role.",
            "question": "Find the number of users in each role."
        },
        {
            "sample_id": 4515,
            "gold_sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT users.user_name, users.password FROM users GROUP BY users.role_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the usernames and passwords of users from the 'users' table, grouped by their role codes. It orders the results based on the count of users in each role and limits the output to a specified number of entries.",
            "question": "What are the usernames and passwords of users that have the most common role?"
        },
        {
            "sample_id": 4497,
            "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_type_code FROM documents GROUP BY documents.document_type_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct document types from the 'documents' table that have been accessed more than a specified number of times. The placeholder in the HAVING clause represents the minimum access count threshold.",
            "question": "What are the codes of types of documents of which there are for or more?"
        },
        {
            "sample_id": 4531,
            "gold_sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
            "gold_complexity": 8,
            "vt": "SELECT images.image_name, images.image_url FROM images ORDER BY images.image_name",
            "ba": "The virtual table displays the names and URLs of images from the 'images' table, sorted by the image name. This allows users to easily access and view the images based on their names.",
            "question": "What are the names and urls of images, sorted alphabetically?"
        },
        {
            "sample_id": 4503,
            "gold_sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT document_structures.document_structure_description FROM documents JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY documents.document_structure_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves descriptions of document structures from the 'document_structures' table, based on the documents that reference them. It groups the results by the document structure code to aggregate the data and orders the results by the count of documents associated with each structure. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Return the structure description of the document that has been accessed the fewest number of times."
        },
        {
            "sample_id": 4521,
            "gold_sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT documents.document_name FROM documents JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY documents.document_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of documents from the 'documents' table, grouped by their unique document codes. It joins with the 'document_sections' table to count the number of sections associated with each document. The results are ordered by the count of sections in descending order, and a limit is applied to restrict the number of documents returned based on a specified numeric value.",
            "question": "Return the name of the document that has the most sections."
        },
        {
            "sample_id": 4513,
            "gold_sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
            "gold_complexity": 10,
            "vt": "SELECT documents.document_name FROM documents WHERE NOT documents.document_code IN (SELECT documents.document_code FROM document_sections)",
            "ba": "The virtual table lists the names of documents from the 'documents' table that do not have any associated sections. This is determined by checking which document codes are not present in the 'document_sections' table, indicating that those documents are standalone without any defined sections.",
            "question": "What are the names of documents that do not have any sections?"
        },
        {
            "sample_id": 4529,
            "gold_sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT AVG(documents.access_count) FROM documents GROUP BY documents.document_structure_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average access count of documents grouped by their document structure code. It orders the results based on the count of documents in each group and limits the output to a specified number of results.",
            "question": "What is the average access count of documents that have the least common structure?"
        },
        {
            "sample_id": 4501,
            "gold_sql": "SELECT avg(access_count) FROM documents",
            "gold_complexity": 4,
            "vt": "SELECT AVG(documents.access_count) FROM documents",
            "ba": "The virtual table calculates the average access count of documents from the 'documents' table. This provides insight into how frequently documents are accessed, which can be useful for understanding user engagement and document popularity.",
            "question": "Find the average access count across all documents?"
        },
        {
            "sample_id": 4494,
            "gold_sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT documents.document_name, documents.access_count FROM documents ORDER BY documents.access_count LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the names and access counts of documents from the 'documents' table, ordered by the number of times they have been accessed. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?"
        },
        {
            "sample_id": 4509,
            "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_type_code FROM documents GROUP BY documents.document_type_code HAVING SUM(documents.access_count) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of document types from the 'documents' table, specifically focusing on those that have been accessed more than a specified number of times. The placeholder in the HAVING clause represents the minimum access count threshold for filtering the results.",
            "question": "Return the codes of the document types that do not have a total access count of over 10000."
        },
        {
            "sample_id": 4523,
            "gold_sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
            "gold_complexity": 6,
            "vt": "SELECT documents.document_name FROM documents WHERE documents.document_name LIKE None.\"%cv%\"",
            "ba": "The virtual table retrieves the names of documents from the 'documents' table that contain a specific substring in their names. The placeholder in the LIKE clause allows for dynamic searching of document names based on user input.",
            "question": "What are the names of documents that contain the substring \"CV\"?"
        },
        {
            "sample_id": 4535,
            "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_type_code FROM documents GROUP BY documents.document_type_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct document types from the 'documents' table that have been accessed more than a specified number of times. The placeholder in the HAVING clause represents the minimum access count threshold.",
            "question": "Give the codes of document types that have more than 2 corresponding documents."
        },
        {
            "sample_id": 4522,
            "gold_sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
            "gold_complexity": 6,
            "vt": "SELECT documents.document_name FROM documents WHERE documents.document_name LIKE None.\"%cv%\"",
            "ba": "The virtual table retrieves the names of documents from the 'documents' table that contain a specific substring in their names. The placeholder in the LIKE clause allows for dynamic searching of document names based on user input.",
            "question": "List all the document names which contains \"CV\"."
        },
        {
            "sample_id": 4493,
            "gold_sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_name, documents.access_count FROM documents ORDER BY documents.document_name",
            "ba": "The virtual table lists the names and access counts of documents from the 'documents' table, ordered by the document name.",
            "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?"
        },
        {
            "sample_id": 4507,
            "gold_sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 12,
            "vt": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 3",
            "ba": "The virtual table provides a list of document names that are the most frequently accessed based on two criteria: the type of document and the structure of the document. It retrieves the top three document names for each grouping, ensuring that only the most popular documents are displayed.",
            "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?"
        },
        {
            "sample_id": 4502,
            "gold_sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT document_structures.document_structure_description FROM documents JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY documents.document_structure_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the document structure descriptions from the 'document_structures' table, which are associated with documents in the 'documents' table. The query groups the results by the document structure code and orders them based on the count of documents associated with each structure, limiting the output to a specified number of results.",
            "question": "What is the structure of the document with the least number of accesses?"
        },
        {
            "sample_id": 4496,
            "gold_sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_type_code FROM documents GROUP BY documents.document_type_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct document types from the 'documents' table that have been accessed more than a specified number of times. The placeholder in the HAVING clause represents the minimum access count required for the document types to be included in the results.",
            "question": "Find the types of documents with more than 4 documents."
        },
        {
            "sample_id": 4505,
            "gold_sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"",
            "gold_complexity": 6,
            "vt": "SELECT documents.document_type_code FROM documents WHERE documents.document_name = None.\"david cv\"",
            "ba": "The virtual table retrieves the document type code from the 'documents' table for a specific document identified by its name. The placeholder in the WHERE clause represents the name of the document being queried.",
            "question": "Return the type code of the document named \"David CV\"."
        },
        {
            "sample_id": 4492,
            "gold_sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_name, documents.access_count FROM documents ORDER BY documents.document_name",
            "ba": "The virtual table presents the names and access counts of documents from the 'documents' table, sorted by the document name. This allows users to see which documents are most frequently accessed and provides an overview of document usage.",
            "question": "Find the name and access counts of all documents, in alphabetic order of the document name."
        },
        {
            "sample_id": 4528,
            "gold_sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT AVG(documents.access_count) FROM documents GROUP BY documents.document_structure_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average access count of documents grouped by their document structure code. It orders the results based on the count of documents in each group and limits the output to a specified number of results.",
            "question": "Find the average access count of documents with the least popular structure."
        },
        {
            "sample_id": 4524,
            "gold_sql": "SELECT count(*) FROM users WHERE user_login  =  1",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM users WHERE users.user_login = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of users from the 'users' table who have a specific login username. The placeholder in the WHERE clause represents the user's login name.",
            "question": "How many users are logged in?"
        },
        {
            "sample_id": 4533,
            "gold_sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), users.role_code FROM users GROUP BY users.role_code",
            "ba": "The virtual table provides a count of users grouped by their role codes from the 'users' table. This allows for an understanding of how many users are assigned to each role within the system.",
            "question": "What are the different role codes for users, and how many users have each?"
        }
    ],
    "driving_school": [
        {
            "sample_id": 6651,
            "gold_sql": "SELECT first_name ,  last_name FROM Customers;",
            "gold_complexity": 6,
            "vt": "SELECT customers.first_name, customers.last_name FROM customers",
            "ba": "The virtual table describes the first and last names of customers from the 'customers' table. This query retrieves the names of all customers without any filtering conditions.",
            "question": "List the first name and last name of all customers."
        },
        {
            "sample_id": 6702,
            "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM lessons JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.first_name = None.\"ray\"",
            "ba": "The virtual table counts the number of lessons from the 'lessons' table that are associated with customers whose first name matches a specific value. It joins the 'lessons' table with the 'customers' table to filter the results based on the customer's first name.",
            "question": "How many lessons did the customer with the first name Ray take?"
        },
        {
            "sample_id": 6693,
            "gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
            "gold_complexity": 10,
            "vt": "SELECT lessons.lesson_id FROM lessons JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\" AND staff.nickname LIKE None.\"%s%\"",
            "ba": "The virtual table retrieves the lesson IDs from the 'lessons' table for lessons conducted by a specific staff member identified by their first name, last name, and nickname. The query joins the 'lessons' table with the 'staff' table to filter the results based on the staff member's details.",
            "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'."
        },
        {
            "sample_id": 6658,
            "gold_sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_status_code, customers.cell_mobile_phone_number, customers.email_address FROM customers WHERE customers.first_name = None.\"marina\" OR customers.last_name = None.\"kohler\"",
            "ba": "The virtual table describes the status, mobile phone number, and email address of customers from the 'customers' table who have a specific first name or last name. The placeholders in the WHERE clause represent the first and last names of the customers being queried.",
            "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?"
        },
        {
            "sample_id": 6633,
            "gold_sql": "SELECT count(*) FROM Staff;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM staff",
            "ba": "The virtual table counts the total number of staff members from the 'staff' table.",
            "question": "How many staff in total?"
        },
        {
            "sample_id": 6680,
            "gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
            "gold_complexity": 8,
            "vt": "SELECT addresses.zip_postcode FROM customers JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE customers.first_name = None.\"carole\" AND customers.last_name = None.\"bernhard\"",
            "ba": "The virtual table retrieves the postal code of customers from the 'customers' table by joining it with the 'addresses' table based on the customer's address ID. The query filters the results to find a specific customer using their first and last names.",
            "question": "What is the zip code of the customer Carole Bernhard?"
        },
        {
            "sample_id": 6696,
            "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM lessons JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE staff.first_name LIKE None.\"%a%\"",
            "ba": "The virtual table counts the number of lessons conducted by staff members whose first name contains a specific character or string. It joins the 'lessons' table with the 'staff' table to filter the results based on the staff's first name.",
            "question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?"
        },
        {
            "sample_id": 6616,
            "gold_sql": "SELECT vehicle_id FROM Vehicles;",
            "gold_complexity": 4,
            "vt": "SELECT vehicles.vehicle_id FROM vehicles",
            "ba": "The virtual table lists the unique identifiers of vehicles from the 'vehicles' table.",
            "question": "What are the ids of all vehicles?"
        },
        {
            "sample_id": 6703,
            "gold_sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
            "gold_complexity": 6,
            "vt": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
            "ba": "The virtual table identifies the last names of individuals who are both customers and staff members. It uses an INTERSECT operation to find common last names from the 'Customers' and 'Staff' tables.",
            "question": "Which last names are both used by customers and by staff?"
        },
        {
            "sample_id": 6619,
            "gold_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
            "gold_complexity": 6,
            "vt": "SELECT vehicles.vehicle_details FROM vehicles WHERE vehicles.vehicle_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the detailed information about vehicles from the 'vehicles' table based on a specific vehicle identifier. The placeholder in the WHERE clause represents the unique identifier for the vehicle.",
            "question": "Show the detail of vehicle with id 1."
        },
        {
            "sample_id": 6679,
            "gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
            "gold_complexity": 8,
            "vt": "SELECT addresses.zip_postcode FROM customers JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE customers.first_name = None.\"carole\" AND customers.last_name = None.\"bernhard\"",
            "ba": "The virtual table retrieves the postal code of customers from the 'customers' table by joining it with the 'addresses' table. The join is based on the customer's address identifier, allowing access to the address details associated with each customer. The query filters the results to find a specific customer by their first and last name.",
            "question": "What is zip code of customer with first name as Carole and last name as Bernhard?"
        },
        {
            "sample_id": 6672,
            "gold_sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",
            "gold_complexity": 6,
            "vt": "SELECT MAX(customers.amount_outstanding), MIN(customers.amount_outstanding), AVG(customers.amount_outstanding) FROM customers",
            "ba": "The virtual table provides a summary of the outstanding amounts owed by customers from the 'customers' table. It calculates the maximum, minimum, and average outstanding amounts, which helps in understanding the financial status of the customer base.",
            "question": "What is the maximum, minimum, and average amount of money outsanding for all customers?"
        },
        {
            "sample_id": 6667,
            "gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_status_code FROM customers GROUP BY customers.customer_status_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the distinct customer status codes from the 'customers' table, grouping them to count how many customers fall under each status. The result is ordered by the count of customers in each status, and the number of results returned is limited by a numeric placeholder.",
            "question": "Which customer status code has least number of customers?"
        },
        {
            "sample_id": 6688,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
            "gold_complexity": 11,
            "vt": "SELECT customers.first_name, customers.last_name FROM customer_payments JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_payments.customer_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers who have made more than a specified number of payments. It retrieves this information by joining the 'customer_payments' table with the 'customers' table based on the customer ID, and groups the results by customer ID to count the number of payments made.",
            "question": "What are the first and last names of all customers with more than 2 payments?"
        },
        {
            "sample_id": 6668,
            "gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
            "gold_complexity": 9,
            "vt": "SELECT customers.customer_status_code FROM customers GROUP BY customers.customer_status_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the distinct customer status codes from the 'customers' table, grouping them to count how many customers fall under each status. The result is ordered by the count of customers in each status, and a limit is applied to restrict the number of status codes returned based on a specified numeric value.",
            "question": "What is the status code with the least number of customers?"
        },
        {
            "sample_id": 6626,
            "gold_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
            "gold_complexity": 7,
            "vt": "SELECT staff.date_joined_staff FROM staff WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table retrieves the date when a specific staff member joined from the 'staff' table. The placeholders in the WHERE clause represent the first and last names of the staff member being queried.",
            "question": "When did the staff member named Janessa Sawayn join the company?"
        },
        {
            "sample_id": 6685,
            "gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM customers WHERE NOT customers.customer_id IN (SELECT customers.customer_id FROM Customer_Payments)",
            "ba": "The virtual table counts the number of customers who have not made any payments. It does this by selecting from the 'customers' table and excluding those customer IDs that are present in the 'customer_payments' table.",
            "question": "List the number of customers that did not have any payment history."
        },
        {
            "sample_id": 6671,
            "gold_sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",
            "gold_complexity": 6,
            "vt": "SELECT MAX(customers.amount_outstanding), MIN(customers.amount_outstanding), AVG(customers.amount_outstanding) FROM customers",
            "ba": "The virtual table provides a summary of the outstanding amounts owed by customers from the 'customers' table. It calculates the maximum, minimum, and average outstanding amounts, which are useful for understanding the financial status of the customer base.",
            "question": "What is maximum, minimum and average amount of outstanding of customer?"
        },
        {
            "sample_id": 6687,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
            "gold_complexity": 11,
            "vt": "SELECT customers.first_name, customers.last_name FROM customer_payments JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_payments.customer_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of customers who have made more than a specified number of payments. It retrieves this information by joining the 'customer_payments' table with the 'customers' table based on the customer ID, and groups the results by customer ID to count the number of payments made by each customer.",
            "question": "List first name and last name of customers that have more than 2 payments."
        },
        {
            "sample_id": 6647,
            "gold_sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT addresses.city, COUNT(*) FROM addresses JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY addresses.city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of staff members located in each city by joining the 'addresses' and 'staff' tables. It groups the results by city and orders them based on the count of staff members, allowing for a limit on the number of results returned.",
            "question": "Which city lives most of staffs? List the city name and number of staffs."
        },
        {
            "sample_id": 6694,
            "gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
            "gold_complexity": 10,
            "vt": "SELECT lessons.lesson_id FROM lessons JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\" AND staff.nickname LIKE None.\"%s%\"",
            "ba": "The virtual table retrieves the unique identifiers of lessons from the 'lessons' table that are conducted by a specific staff member identified by their first name, last name, and nickname. The placeholders in the WHERE clause represent the staff member's first name, last name, and a pattern for their nickname.",
            "question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?"
        },
        {
            "sample_id": 6654,
            "gold_sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
            "gold_complexity": 8,
            "vt": "SELECT customers.email_address, customers.date_of_birth FROM customers WHERE customers.first_name = None.\"carole\"",
            "ba": "The virtual table describes the email addresses and birth dates of customers from the 'customers' table who have a specific first name. The placeholder in the WHERE clause represents the first name of the customer.",
            "question": "What are the email addresses and date of births for all customers who have a first name of Carole?"
        },
        {
            "sample_id": 6627,
            "gold_sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
            "gold_complexity": 7,
            "vt": "SELECT staff.date_left_staff FROM staff WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table retrieves the date when a specific staff member, identified by their first and last name, left the staff. It queries the 'staff' table to find the relevant record based on the provided names.",
            "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?"
        },
        {
            "sample_id": 6662,
            "gold_sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
            "gold_complexity": 7,
            "vt": "SELECT customers.date_became_customer FROM customers WHERE customers.first_name = None.\"carole\" AND customers.last_name = None.\"bernhard\"",
            "ba": "The virtual table retrieves the date when a specific customer became a customer from the 'customers' table. The placeholders in the WHERE clause represent the first and last names of the customer being queried.",
            "question": "When did Carole Bernhard first become a customer?"
        },
        {
            "sample_id": 6657,
            "gold_sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
            "gold_complexity": 11,
            "vt": "SELECT customers.customer_status_code, customers.cell_mobile_phone_number, customers.email_address FROM customers WHERE customers.first_name = None.\"marina\" OR customers.last_name = None.\"kohler\"",
            "ba": "The virtual table describes the status, mobile phone number, and email address of customers from the 'customers' table who have a specific first name or last name. The placeholders in the WHERE clause represent the first and last names of the customers being queried.",
            "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?"
        },
        {
            "sample_id": 6661,
            "gold_sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
            "gold_complexity": 7,
            "vt": "SELECT customers.date_became_customer FROM customers WHERE customers.first_name = None.\"carole\" AND customers.last_name = None.\"bernhard\"",
            "ba": "The virtual table retrieves the date when a specific customer became a customer from the 'customers' table. The placeholders in the WHERE clause represent the first and last names of the customer being queried.",
            "question": "When did customer with first name as Carole and last name as Bernhard became a customer?"
        },
        {
            "sample_id": 6618,
            "gold_sql": "SELECT count(*) FROM Vehicles;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM vehicles",
            "ba": "The virtual table counts the total number of vehicles recorded in the 'vehicles' table.",
            "question": "How many vehicles exist?"
        },
        {
            "sample_id": 6705,
            "gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
            "gold_complexity": 7,
            "vt": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
            "ba": "The virtual table identifies the first names of staff members who are not conducting any lessons. It does this by selecting the first names from the 'Staff' table and excluding those who are linked to any records in the 'Lessons' table through a join on the staff_id.",
            "question": "What is the first name of the staff who did not give any lesson?"
        },
        {
            "sample_id": 6666,
            "gold_sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
            "gold_complexity": 8,
            "vt": "SELECT customers.customer_status_code, COUNT(*) FROM customers GROUP BY customers.customer_status_code",
            "ba": "The virtual table summarizes the number of customers grouped by their current status from the 'customers' table. The placeholder in the SELECT clause represents the customer status code, while the COUNT function aggregates the total number of customers for each status.",
            "question": "For each customer status code, how many customers are classified that way?"
        },
        {
            "sample_id": 6655,
            "gold_sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",
            "gold_complexity": 8,
            "vt": "SELECT customers.phone_number, customers.email_address FROM customers WHERE customers.amount_outstanding > [placeholder-type:numeric]",
            "ba": "The virtual table describes the phone numbers and email addresses of customers from the 'customers' table who have an outstanding amount greater than a specified value. The placeholder in the WHERE clause represents the minimum outstanding amount.",
            "question": "List phone number and email address of customer with more than 2000 outstanding balance."
        },
        {
            "sample_id": 6645,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
            "gold_complexity": 9,
            "vt": "SELECT staff.first_name, staff.last_name FROM addresses JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE addresses.city = None.\"damianfort\"",
            "ba": "The virtual table describes the first and last names of staff members from the 'staff' table who are located in a specific city. The query joins the 'addresses' table to filter staff based on their address's city, using a placeholder for the city name.",
            "question": "Find out the first name and last name of staff lived in city Damianfort."
        },
        {
            "sample_id": 6670,
            "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM lessons JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.first_name = None.\"rylan\" AND customers.last_name = None.\"goodwin\" AND lessons.lesson_status_code = None.\"completed\"",
            "ba": "The virtual table counts the number of completed lessons attended by a specific customer identified by their first and last name. It joins the 'lessons' table with the 'customers' table to filter the results based on the customer's name and the status of the lessons.",
            "question": "How many lessons did the customer Ryan Goodwin complete?"
        },
        {
            "sample_id": 6615,
            "gold_sql": "SELECT vehicle_id FROM Vehicles;",
            "gold_complexity": 4,
            "vt": "SELECT vehicles.vehicle_id FROM vehicles",
            "ba": "The virtual table retrieves the unique identifiers for each vehicle from the 'vehicles' table.",
            "question": "List all vehicle id"
        },
        {
            "sample_id": 6623,
            "gold_sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
            "gold_complexity": 7,
            "vt": "SELECT staff.date_of_birth FROM staff WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table retrieves the date of birth of a specific staff member from the 'staff' table based on their first and last names. The placeholders in the WHERE clause represent the first and last names of the staff member being queried.",
            "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?"
        },
        {
            "sample_id": 6681,
            "gold_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT addresses.city FROM customers JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY addresses.city ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of cities from the 'addresses' table where customers are located. It joins the 'customers' table with the 'addresses' table based on the customer address ID, groups the results by city, and orders them by the count of customers in each city. The placeholder in the LIMIT clause allows for specifying the maximum number of cities to return.",
            "question": "Which city does has most number of customers?"
        },
        {
            "sample_id": 6636,
            "gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
            "gold_complexity": 8,
            "vt": "SELECT addresses.city FROM addresses JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table describes the cities of staff members from the 'addresses' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the staff member being queried.",
            "question": "In what city does Janessa Sawayn live?"
        },
        {
            "sample_id": 6646,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
            "gold_complexity": 9,
            "vt": "SELECT staff.first_name, staff.last_name FROM addresses JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE addresses.city = None.\"damianfort\"",
            "ba": "The virtual table describes the first and last names of staff members from the 'staff' table who are located in a specific city. The query joins the 'addresses' table to filter staff based on their address city, using a placeholder for the city name.",
            "question": "What is the first and last name of all employees who live in the city Damianfort?"
        },
        {
            "sample_id": 6634,
            "gold_sql": "SELECT count(*) FROM Staff;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM staff",
            "ba": "The virtual table provides a count of all staff members from the 'staff' table.",
            "question": "How many employees are there?"
        },
        {
            "sample_id": 6622,
            "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
            "gold_complexity": 8,
            "vt": "SELECT staff.first_name, staff.middle_name, staff.last_name FROM staff",
            "ba": "The virtual table describes the first, middle, and last names of staff members from the 'staff' table. This allows users to retrieve the full names of staff without specifying any conditions.",
            "question": "What are the first, middle, and last names of all staff?"
        },
        {
            "sample_id": 6689,
            "gold_sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
            "gold_complexity": 8,
            "vt": "SELECT customer_payments.payment_method_code, COUNT(*) FROM customer_payments GROUP BY customer_payments.payment_method_code",
            "ba": "The virtual table summarizes the payment methods used by customers in the 'customer_payments' table. It counts the number of payments made for each payment method, providing insights into the popularity of different payment methods.",
            "question": "List all payment methods and number of payments using each payment methods."
        },
        {
            "sample_id": 6653,
            "gold_sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
            "gold_complexity": 8,
            "vt": "SELECT customers.email_address, customers.date_of_birth FROM customers WHERE customers.first_name = None.\"carole\"",
            "ba": "The virtual table describes the email address and date of birth of customers from the 'customers' table who have a specific first name. The placeholder in the WHERE clause represents the first name of the customer.",
            "question": "List email address and birthday of customer whose first name as Carole."
        },
        {
            "sample_id": 6635,
            "gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
            "gold_complexity": 8,
            "vt": "SELECT addresses.city FROM addresses JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table describes the cities of staff members from the 'addresses' table who have a specific first and last name. The placeholders in the WHERE clause represent the first and last names of the staff member being queried.",
            "question": "Which city does staff with first name as Janessa and last name as Sawayn live?"
        },
        {
            "sample_id": 6664,
            "gold_sql": "SELECT count(*) FROM Customers;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM customers",
            "ba": "The virtual table provides a count of all customers from the 'customers' table.",
            "question": "How many customers are there?"
        },
        {
            "sample_id": 6692,
            "gold_sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM lessons WHERE lessons.lesson_status_code = None.\"cancelled\"",
            "ba": "The virtual table counts the total number of lessons from the 'lessons' table that are not marked as cancelled. The placeholder in the WHERE clause represents the lesson status code for cancelled lessons.",
            "question": "How many lessons have been cancelled?"
        },
        {
            "sample_id": 6652,
            "gold_sql": "SELECT first_name ,  last_name FROM Customers;",
            "gold_complexity": 6,
            "vt": "SELECT customers.first_name, customers.last_name FROM customers",
            "ba": "The virtual table describes the first and last names of customers from the 'customers' table. The query is designed to retrieve the names of all customers without any filtering conditions.",
            "question": "What are the first and last names for all customers?"
        },
        {
            "sample_id": 6686,
            "gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM customers WHERE NOT customers.customer_id IN (SELECT customers.customer_id FROM Customer_Payments)",
            "ba": "The virtual table counts the number of customers from the 'customers' table who have not made any payments. It uses a subquery to identify customers who have made payments by checking their IDs in the 'customer_payments' table. The result will provide the total number of customers without any payment records.",
            "question": "How many customers have no payment histories?"
        },
        {
            "sample_id": 6617,
            "gold_sql": "SELECT count(*) FROM Vehicles;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM vehicles",
            "ba": "The virtual table counts the total number of vehicles recorded in the 'vehicles' table.",
            "question": "How many vehicle in total?"
        },
        {
            "sample_id": 6642,
            "gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
            "gold_complexity": 8,
            "vt": "SELECT addresses.zip_postcode FROM addresses JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table retrieves the postal code from the 'addresses' table for a specific staff member identified by their first and last name. It involves a join between the 'addresses' and 'staff' tables based on the staff's address ID.",
            "question": "What is the zip code of the hosue of the employee named Janessa Sawayn?"
        },
        {
            "sample_id": 6706,
            "gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
            "gold_complexity": 7,
            "vt": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
            "ba": "The virtual table identifies the first names of staff members who are not conducting any lessons. It does this by selecting the first names from the 'Staff' table and excluding those who are linked to any records in the 'Lessons' table through a join on the staff_id.",
            "question": "What is the first name of all employees who do not give any lessons?"
        },
        {
            "sample_id": 6640,
            "gold_sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
            "gold_complexity": 8,
            "vt": "SELECT SUM(lessons.lesson_time) FROM lessons JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.first_name = None.\"rylan\" AND customers.last_name = None.\"goodwin\"",
            "ba": "The virtual table calculates the total lesson time from the 'lessons' table for a specific customer identified by their first and last name. It joins the 'lessons' table with the 'customers' table to filter the records based on the customer's name.",
            "question": "How long is the total lesson time took by the customer named Rylan Goodwin?"
        },
        {
            "sample_id": 6625,
            "gold_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
            "gold_complexity": 7,
            "vt": "SELECT staff.date_joined_staff FROM staff WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table retrieves the date when a specific staff member joined the organization from the 'staff' table. The placeholders in the WHERE clause represent the first and last names of the staff member being queried.",
            "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?"
        },
        {
            "sample_id": 6701,
            "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM lessons JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.first_name = None.\"ray\"",
            "ba": "The virtual table counts the number of lessons from the 'lessons' table that are associated with customers who have a specific first name. It joins the 'lessons' table with the 'customers' table using the customer ID to filter the results based on the customer's first name.",
            "question": "How many lesson does customer with first name Ray took?"
        },
        {
            "sample_id": 6660,
            "gold_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
            "gold_complexity": 6,
            "vt": "SELECT customers.date_of_birth FROM customers WHERE customers.customer_status_code = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the date of birth of customers from the 'customers' table who have a specific status code. The placeholder in the WHERE clause represents the customer's status code.",
            "question": "What is the date of birth of every customer whose status code is 'Good Customer'?"
        },
        {
            "sample_id": 6684,
            "gold_sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
            "gold_complexity": 8,
            "vt": "SELECT SUM(customer_payments.amount_payment) FROM customer_payments JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE customers.first_name = None.\"carole\" AND customers.last_name = None.\"bernhard\"",
            "ba": "The virtual table calculates the total amount of payments made by a specific customer identified by their first and last name. It aggregates the 'amount_payment' from the 'customer_payments' table, joining it with the 'customers' table to filter the results based on the customer's name.",
            "question": "What is the total amount of moeny paid by the customer Carole Bernhard?"
        },
        {
            "sample_id": 6699,
            "gold_sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
            "gold_complexity": 8,
            "vt": "SELECT AVG(lessons.price) FROM lessons JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE staff.first_name = None.\"janessa\" AND staff.last_name = None.\"sawayn\"",
            "ba": "The virtual table calculates the average price of lessons conducted by a specific staff member identified by their first and last name. It joins the 'lessons' table with the 'staff' table to filter the lessons based on the staff member's name.",
            "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?"
        }
    ],
    "employee_hire_evaluation": [
        {
            "sample_id": 7252,
            "gold_sql": "SELECT count(*) FROM employee",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM employee",
            "ba": "The virtual table counts the total number of employees from the 'employee' table.",
            "question": "How many employees are there?"
        },
        {
            "sample_id": 7254,
            "gold_sql": "SELECT name FROM employee ORDER BY age",
            "gold_complexity": 6,
            "vt": "SELECT employee.name FROM employee ORDER BY employee.age",
            "ba": "The virtual table lists the names of employees from the 'employee' table, sorted by their age. This allows for an easy view of employees in order of their age, from youngest to oldest.",
            "question": "Sort employee names by their age in ascending order."
        },
        {
            "sample_id": 7276,
            "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT shop.name FROM hiring JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY hiring.shop_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of shops from the 'shop' table that have hired employees, grouped by shop ID. The results are ordered by the number of employees hired at each shop, and the query limits the output to a specified number of shops.",
            "question": "What is the name of the shop that is hiring the largest number of employees?"
        },
        {
            "sample_id": 7258,
            "gold_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT employee.city FROM employee WHERE employee.age < [placeholder-type:numeric] GROUP BY employee.city HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the cities of employees from the 'employee' table who are younger than a specified age. It groups the results by city and filters to include only those cities that have more than a specified number of employees.",
            "question": "Which cities do more than one employee under age 30 come from?"
        },
        {
            "sample_id": 7289,
            "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT LOCATION) FROM shop",
            "ba": "The virtual table counts the distinct geographical locations of shops from the 'shop' table.",
            "question": "Count the number of distinct store locations."
        },
        {
            "sample_id": 7271,
            "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT employee.name FROM employee JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY evaluation.employee_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of employees from the 'employee' table who have been evaluated, grouping the results by employee ID and ordering them based on the count of evaluations they have received. The query limits the results to a specified number of employees.",
            "question": "Which employee received the most awards in evaluations? Give me the employee name."
        },
        {
            "sample_id": 7274,
            "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "gold_complexity": 10,
            "vt": "SELECT employee.name FROM employee WHERE NOT employee.employee_id IN (SELECT employee.employee_id FROM evaluation)",
            "ba": "The virtual table lists the names of employees from the 'employee' table who have not received any evaluations. It filters out employees whose IDs are present in the 'evaluation' table, indicating they have been evaluated.",
            "question": "Find the names of employees who never won any award in the evaluation."
        },
        {
            "sample_id": 7267,
            "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
            "gold_complexity": 10,
            "vt": "SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products",
            "ba": "The virtual table provides a list of shop names, their locations, and districts from the 'shop' table, ordered by the total number of products available in each shop.",
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop."
        },
        {
            "sample_id": 7279,
            "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "gold_complexity": 10,
            "vt": "SELECT shop.name FROM shop WHERE NOT shop.shop_id IN (SELECT shop.shop_id FROM hiring)",
            "ba": "The virtual table lists the names of shops from the 'shop' table that do not have any employees hired from the 'hiring' table. The subquery checks for shop IDs in the 'hiring' table to filter out those shops that have employees associated with them.",
            "question": "Which shops run with no employees? Find the shop names"
        },
        {
            "sample_id": 7284,
            "gold_sql": "SELECT * FROM hiring",
            "gold_complexity": 4,
            "vt": "SELECT * FROM hiring",
            "ba": "The virtual table provides a comprehensive view of the hiring records from the 'hiring' table, which includes details about employees and the shops they are associated with.",
            "question": "Give me all the information about hiring."
        },
        {
            "sample_id": 7265,
            "gold_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
            "gold_complexity": 5,
            "vt": "SELECT MIN(shop.number_products), MAX(shop.number_products) FROM shop",
            "ba": "The virtual table provides the minimum and maximum number of products available across all shops from the 'shop' table. The placeholders represent the aggregated values of the number of products in the shops.",
            "question": "What are the minimum and maximum number of products across all the shops?"
        },
        {
            "sample_id": 7266,
            "gold_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
            "gold_complexity": 10,
            "vt": "SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products",
            "ba": "The virtual table provides a list of shop names, their locations, and districts from the 'shop' table, ordered by the total number of products available in each shop.",
            "question": "Return the name, location and district of all shops in descending order of number of products."
        },
        {
            "sample_id": 7278,
            "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "gold_complexity": 10,
            "vt": "SELECT shop.name FROM shop WHERE NOT shop.shop_id IN (SELECT shop.shop_id FROM hiring)",
            "ba": "The virtual table lists the names of shops from the 'shop' table that do not have any employees hired from the 'hiring' table. The subquery identifies the shop IDs that have employees hired, and the main query filters out those shops from the results.",
            "question": "Find the name of the shops that do not hire any employee."
        },
        {
            "sample_id": 7288,
            "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT LOCATION) FROM shop",
            "ba": "The virtual table counts the distinct geographical locations of shops from the 'shop' table.",
            "question": "How many different store locations are there?"
        },
        {
            "sample_id": 7283,
            "gold_sql": "SELECT sum(bonus) FROM evaluation",
            "gold_complexity": 4,
            "vt": "SELECT SUM(evaluation.bonus) FROM evaluation",
            "ba": "The virtual table calculates the total bonus awarded to employees from the 'evaluation' table. It uses the SUM function to aggregate the bonus amounts across all evaluations.",
            "question": "Find the total amount of bonus given in all the evaluations."
        },
        {
            "sample_id": 7287,
            "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
            "gold_complexity": 9,
            "vt": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "ba": "The virtual table identifies districts that have shops with a number of products less than 3000 and also those with more than 10000 products. It uses the INTERSECT operator to find common districts that meet both conditions.",
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products."
        },
        {
            "sample_id": 7286,
            "gold_sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
            "gold_complexity": 9,
            "vt": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "ba": "The virtual table identifies districts that have shops with a number of products less than 3000 and also those with more than 10000 products. It uses the INTERSECT operator to find common districts that meet both conditions.",
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?"
        },
        {
            "sample_id": 7275,
            "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "gold_complexity": 10,
            "vt": "SELECT employee.name FROM employee WHERE NOT employee.employee_id IN (SELECT employee.employee_id FROM evaluation)",
            "ba": "The virtual table lists the names of employees from the 'employee' table who have not received any evaluations. The subquery identifies employees who have been evaluated, and the main query filters out these employees from the list.",
            "question": "What are the names of the employees who never received any evaluation?"
        },
        {
            "sample_id": 7277,
            "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT shop.name FROM hiring JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY hiring.shop_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of shops from the 'shop' table that have hired employees, grouped by shop ID. The query counts the number of employees hired at each shop and orders the results, limiting the output to a specified number of shops.",
            "question": "Which shop has the most employees? Give me the shop name."
        },
        {
            "sample_id": 7260,
            "gold_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), shop.location FROM shop GROUP BY shop.location",
            "ba": "The virtual table provides a count of shops grouped by their geographical locations. It aggregates the total number of shops present in each location, allowing users to see how many shops are located in each distinct area.",
            "question": "Find the number of shops in each location."
        },
        {
            "sample_id": 7280,
            "gold_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), shop.name FROM hiring JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY shop.name",
            "ba": "The virtual table provides a count of employees hired at each shop, along with the name of the shop. It aggregates the data from the 'hiring' table and joins it with the 'shop' table to retrieve the shop names. The result is grouped by shop name to show the total number of hires per shop.",
            "question": "Find the number of employees hired in each shop; show the shop name as well."
        },
        {
            "sample_id": 7262,
            "gold_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT shop.manager_name, shop.district FROM shop ORDER BY shop.number_products LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of shop managers and their respective districts from the 'shop' table, ordered by the number of products available in each shop. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return.",
            "question": "Find the manager name and district of the shop whose number of products is the largest."
        }
    ],
    "tracking_grants_for_research": [
        {
            "sample_id": 4353,
            "gold_sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT organisations.organisation_id, organisations.organisation_type, organisations.organisation_details FROM organisations JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY organisations.organisation_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of organisations along with their types and details, specifically focusing on those that employ research staff. It aggregates the data by organisation ID and orders the results based on the count of associated research staff, limiting the output to a specified number of organisations.",
            "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail."
        },
        {
            "sample_id": 4366,
            "gold_sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
            "gold_complexity": 9,
            "vt": "SELECT organisations.organisation_details FROM organisations JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE organisation_types.organisation_type_description = '[placeholder-type:string]' ORDER BY organisations.organisation_details",
            "ba": "The virtual table retrieves the details of organisations from the 'organisations' table that match a specific type of organisation. It joins the 'organisations' table with the 'organisation_types' table to filter based on the description of the organisation type. The results are ordered by the organisation details.",
            "question": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?"
        },
        {
            "sample_id": 4388,
            "gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
            "gold_complexity": 5,
            "vt": "SELECT research_outcomes.outcome_description FROM research_outcomes JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code",
            "ba": "The virtual table describes the outcome descriptions of research outcomes that are linked to specific project outcomes. It retrieves the descriptions from the 'research_outcomes' table and joins it with the 'project_outcomes' table based on the matching outcome codes.",
            "question": "List the description of the outcomes for all projects."
        },
        {
            "sample_id": 4347,
            "gold_sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT project_staff.date_from FROM project_staff ORDER BY project_staff.date_from LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the start dates of staff members involved in various projects from the 'project_staff' table. The results are ordered by the start date, and a placeholder is used to limit the number of records returned.",
            "question": "When did the first staff for the projects started working?"
        },
        {
            "sample_id": 4370,
            "gold_sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM project_staff WHERE project_staff.role_code = '[placeholder-type:string]' OR project_staff.date_from < '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of staff members associated with projects based on their role or the start date of their involvement.",
            "question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?"
        },
        {
            "sample_id": 4358,
            "gold_sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
            "gold_complexity": 6,
            "vt": "SELECT document_types.document_type_code FROM document_types WHERE document_types.document_description LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the unique document type codes from the 'document_types' table that match a specific description. The placeholder in the WHERE clause allows for filtering based on a partial or full description of the document type.",
            "question": "What is the type of the document whose description starts with the word 'Initial'?"
        },
        {
            "sample_id": 4333,
            "gold_sql": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2",
            "gold_complexity": 17,
            "vt": "SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING COUNT(*) > 2",
            "ba": "The virtual table retrieves task details and their associated IDs from the 'Tasks' table, along with the project ID from the 'Projects' table. It filters the results to include only those projects with a specific detail, and also includes tasks from projects that have more than two associated outcomes.",
            "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?"
        },
        {
            "sample_id": 4350,
            "gold_sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT projects.project_details, projects.project_id FROM projects JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY projects.project_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of project details and their unique identifiers from the 'projects' table. It joins with the 'project_outcomes' table to aggregate the outcomes associated with each project. The results are grouped by project ID and ordered by the count of associated outcomes, allowing for a limit on the number of projects returned based on a specified numeric value.",
            "question": "What are the details and id of the project with the most outcomes?"
        },
        {
            "sample_id": 4372,
            "gold_sql": "SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT project_staff.date_to FROM project_staff ORDER BY project_staff.date_to LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the end dates of staff members' involvement in various projects from the 'project_staff' table. The placeholder in the LIMIT clause allows for specifying the maximum number of records to return.",
            "question": "What is the last date that a staff member left a project?"
        },
        {
            "sample_id": 4338,
            "gold_sql": "SELECT count(DISTINCT role_code) FROM Project_Staff",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT role_code) FROM project_staff",
            "ba": "The virtual table counts the distinct roles assigned to staff members involved in various projects from the 'project_staff' table. This provides insight into the diversity of roles present across all projects.",
            "question": "How many different roles are there on the project staff?"
        },
        {
            "sample_id": 4385,
            "gold_sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
            "gold_complexity": 8,
            "vt": "SELECT project_staff.role_code FROM project_staff WHERE project_staff.date_from > '[placeholder-type:string]' AND project_staff.date_to < '[placeholder-type:string]'",
            "ba": "The virtual table describes the role codes of staff members associated with projects, filtered by their involvement dates. The placeholders in the WHERE clause represent the start and end dates for the staff members' participation in the projects.",
            "question": "What are the staff roles of the staff who"
        },
        {
            "sample_id": 4346,
            "gold_sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
            "gold_complexity": 6,
            "vt": "SELECT staff_roles.role_description FROM staff_roles WHERE staff_roles.role_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the role descriptions of staff members from the 'staff_roles' table based on a specific role code. The placeholder in the WHERE clause represents the unique code for the staff member's role.",
            "question": "What is the complete description of the job of a researcher?"
        },
        {
            "sample_id": 4380,
            "gold_sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
            "gold_complexity": 6,
            "vt": "SELECT research_staff.staff_details FROM research_staff ORDER BY research_staff.staff_details",
            "ba": "The virtual table lists the details of research staff members from the 'research_staff' table, ordered by their details.",
            "question": "What details are there on the research staff? List the result in ascending alphabetical order."
        },
        {
            "sample_id": 4342,
            "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'",
            "gold_complexity": 8,
            "vt": "SELECT projects.project_details FROM projects JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE research_outcomes.outcome_description LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the project details from the 'projects' table that are associated with specific research outcomes. It joins the 'projects' table with the 'project_outcomes' table to link projects to their outcomes, and further joins with the 'research_outcomes' table to filter based on a specific outcome description. The placeholder in the WHERE clause represents the description of the research outcome being searched for.",
            "question": "What are the details for the project whose research has been published?"
        },
        {
            "sample_id": 4368,
            "gold_sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM project_outcomes WHERE project_outcomes.outcome_code = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of project outcomes from the 'project_outcomes' table that match a specific outcome code. The placeholder in the WHERE clause represents the outcome code being queried.",
            "question": "How many patents outcomes were listed for all the projects?"
        },
        {
            "sample_id": 4360,
            "gold_sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'",
            "gold_complexity": 9,
            "vt": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
            "ba": "The virtual table retrieves the start dates of grants that have both 'Regular' and 'Initial Application' document types associated with them. It does this by joining the Grants, Documents, and Document_Types tables based on their respective foreign key relationships.",
            "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?"
        },
        {
            "sample_id": 4327,
            "gold_sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
            "gold_complexity": 11,
            "vt": "SELECT documents.sent_date FROM documents JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE grants.grant_amount > [placeholder-type:numeric] AND organisation_types.organisation_type_description = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the sent dates of documents from the 'documents' table, filtering based on the grant amount and the description of the organisation type. It joins the 'grants' table to link documents to their respective grants, the 'organisations' table to associate grants with organisations, and the 'organisation_types' table to filter by organisation type description.",
            "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described"
        },
        {
            "sample_id": 4365,
            "gold_sql": "SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_type_description  =  'Sponsor' ORDER BY organisation_details",
            "gold_complexity": 9,
            "vt": "SELECT organisations.organisation_details FROM organisations JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE organisation_types.organisation_type_description = '[placeholder-type:string]' ORDER BY organisations.organisation_details",
            "ba": "The virtual table describes the details of organisations from the 'organisations' table that match a specific organisation type. It joins with the 'organisation_types' table to filter based on the organisation type description provided by the user. The results are ordered by the organisation details.",
            "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order."
        },
        {
            "sample_id": 4348,
            "gold_sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT project_staff.date_from FROM project_staff ORDER BY project_staff.date_from LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table displays the start dates of staff members involved in various projects, sorted in ascending order. The placeholder allows for limiting the number of results returned, enabling users to specify how many start dates they wish to see.",
            "question": "When did the first staff member start working?"
        },
        {
            "sample_id": 4367,
            "gold_sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM project_outcomes WHERE project_outcomes.outcome_code = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of project outcomes from the 'project_outcomes' table that match a specific outcome code. The placeholder in the WHERE clause represents the outcome code being queried.",
            "question": "How many Patent outcomes are generated from all the projects?"
        },
        {
            "sample_id": 4321,
            "gold_sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
            "gold_complexity": 11,
            "vt": "SELECT organisations.organisation_id, organisations.organisation_details FROM grants JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisations.organisation_id HAVING SUM(grants.grant_amount) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of organisations along with their details that have received grants exceeding a specified total amount. It aggregates the grant amounts for each organisation and filters the results to include only those organisations whose total grant amount surpasses a given threshold.",
            "question": "Find the organisation ids and details of the organisations which are involved in"
        },
        {
            "sample_id": 4354,
            "gold_sql": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT organisations.organisation_id, organisations.organisation_type, organisations.organisation_details FROM organisations JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY organisations.organisation_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of organisations along with their types and details, specifically focusing on those that employ research staff. It aggregates the data by organisation ID and orders the results based on the count of associated research staff, limiting the output to a specified number of organisations.",
            "question": "What are the ids, types, and details of the organization with the most research staff?"
        },
        {
            "sample_id": 4373,
            "gold_sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'",
            "gold_complexity": 8,
            "vt": "SELECT research_outcomes.outcome_description FROM research_outcomes JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE projects.project_details = '[placeholder-type:string]'",
            "ba": "The virtual table describes the outcome descriptions of research outcomes associated with specific projects. It retrieves the outcome descriptions from the 'research_outcomes' table by joining it with the 'project_outcomes' table to link the outcomes to their respective projects, and then further joins with the 'projects' table to filter based on the project details. The placeholder in the WHERE clause represents the specific project details being queried.",
            "question": "What are the result description of the project whose detail is 'sint'?"
        },
        {
            "sample_id": 4344,
            "gold_sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC",
            "gold_complexity": 11,
            "vt": "SELECT project_staff.project_id, COUNT(*) FROM project_staff JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY project_staff.project_id ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the number of staff members associated with each project from the 'project_staff' table. It joins the 'project_staff' table with the 'projects' table to ensure that only valid projects are considered. The results are grouped by the project ID, allowing for a count of staff members per project, and are ordered by the count in ascending order.",
            "question": "For each project id, how many staff does it have? List them in increasing order."
        },
        {
            "sample_id": 4336,
            "gold_sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'",
            "gold_complexity": 8,
            "vt": "SELECT project_staff.date_from, project_staff.date_to FROM project_staff WHERE project_staff.role_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the start and end dates of staff members involved in projects from the 'project_staff' table who hold a specific role. The placeholder in the WHERE clause represents the role code of the staff member.",
            "question": "When did researchers start and stop working?"
        },
        {
            "sample_id": 4364,
            "gold_sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'",
            "gold_complexity": 7,
            "vt": "SELECT organisation_types.organisation_type_description FROM organisation_types JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE organisations.organisation_details = '[placeholder-type:string]'",
            "ba": "The virtual table describes the organisation type descriptions from the 'organisation_types' table for organisations that match specific details. The placeholder in the WHERE clause represents the details of the organisation.",
            "question": "What is the type description of the organization whose detail is listed as 'quo'?"
        },
        {
            "sample_id": 4369,
            "gold_sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM project_staff WHERE project_staff.role_code = '[placeholder-type:string]' OR project_staff.date_from < '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of staff members associated with projects based on their role or the start date of their involvement.",
            "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?"
        },
        {
            "sample_id": 4359,
            "gold_sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'",
            "gold_complexity": 9,
            "vt": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
            "ba": "The virtual table retrieves the start dates of grants that have both 'Regular' and 'Initial Application' document types associated with them. It does this by joining the 'Grants', 'Documents', and 'Document_Types' tables based on their respective foreign key relationships, filtering the results to include only those grants that meet both document type criteria.",
            "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date."
        },
        {
            "sample_id": 4340,
            "gold_sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id",
            "gold_complexity": 8,
            "vt": "SELECT SUM(grants.grant_amount), grants.organisation_id FROM grants GROUP BY grants.organisation_id",
            "ba": "The virtual table summarizes the total grant amounts received by each organisation from the 'grants' table. It groups the results by the unique identifier of the organisation, allowing users to see the total funding allocated to each organisation.",
            "question": "What is the total amount of grant money given to each organization and what is its id?"
        },
        {
            "sample_id": 4378,
            "gold_sql": "SELECT project_details FROM Projects WHERE organisation_id IN ( SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY count(*) DESC LIMIT 1 )",
            "gold_complexity": 14,
            "vt": "SELECT projects.project_details FROM projects WHERE projects.organisation_id IN (SELECT projects.organisation_id FROM Projects GROUP BY organisation_id ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the project details from the 'projects' table for the organisation that has the highest number of associated projects. It uses a subquery to identify the organisation_id with the most projects by grouping the projects by organisation_id and counting them, then ordering the results in descending order and limiting the output to the top result.",
            "question": "What are the details for the projects which were launched by the organization with the most projects?"
        },
        {
            "sample_id": 4362,
            "gold_sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT documents.grant_id, COUNT(*) FROM documents GROUP BY documents.grant_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of documents associated with each grant by counting the documents grouped by their grant ID. The result is ordered by the count of documents in descending order, and a placeholder is used to limit the number of results returned.",
            "question": "For each grant id, how many documents does it have, and which one has the most?"
        },
        {
            "sample_id": 4313,
            "gold_sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'",
            "gold_complexity": 10,
            "vt": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16'",
            "ba": "The virtual table retrieves the grant amounts from the 'Grants' table that are associated with documents sent before a specific date and also have grant end dates after another specified date. It uses an intersection to ensure that only the grant amounts meeting both conditions are returned.",
            "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?"
        },
        {
            "sample_id": 4383,
            "gold_sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), projects.project_details FROM projects JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY projects.project_id",
            "ba": "The virtual table summarizes the number of tasks associated with each project along with the project details from the 'projects' table. It uses a JOIN operation to connect the 'projects' table with the 'tasks' table based on the project identifier, grouping the results by each project to count the tasks.",
            "question": "How many tasks does each project have? List the task count and the project detail."
        },
        {
            "sample_id": 4329,
            "gold_sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
            "gold_complexity": 10,
            "vt": "SELECT documents.response_received_date FROM documents JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE document_types.document_description = '[placeholder-type:string]' OR grants.grant_amount > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the response received dates of documents from the 'documents' table. It joins with the 'document_types' table to filter based on the document description and with the 'grants' table to apply a condition on the grant amount. The placeholders allow for dynamic input of the document description and grant amount.",
            "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?"
        },
        {
            "sample_id": 4351,
            "gold_sql": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
            "gold_complexity": 10,
            "vt": "SELECT projects.project_details FROM projects WHERE NOT project_outcomes.project_id IN (SELECT project_outcomes.project_id FROM Project_outcomes)",
            "ba": "The virtual table lists the details of projects from the 'projects' table that do not have any associated outcomes in the 'project_outcomes' table. The query uses a subquery to filter out projects that have outcomes, ensuring only those without any outcomes are selected.",
            "question": "Which projects have no outcome? List the project details."
        },
        {
            "sample_id": 4382,
            "gold_sql": "SELECT count(*) FROM Tasks",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM tasks",
            "ba": "The virtual table provides a count of all tasks associated with various projects in the database. It aggregates the total number of tasks without filtering by any specific criteria, allowing users to understand the overall task volume across all projects.",
            "question": "How many tasks are there?"
        },
        {
            "sample_id": 4317,
            "gold_sql": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
            "gold_complexity": 8,
            "vt": "SELECT SUM(grants.grant_amount) FROM grants JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE organisation_types.organisation_type_description = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total grant amount from the 'grants' table, filtering by the type of organisation. It joins the 'grants' table with the 'organisations' table to link each grant to its respective organisation, and then further joins with the 'organisation_types' table to filter based on the organisation type description provided by the user.",
            "question": "What is the total grant amount of the organisations described as research?"
        },
        {
            "sample_id": 4323,
            "gold_sql": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT organisations.organisation_type, organisations.organisation_id FROM organisations JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY organisations.organisation_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the organisation types and their identifiers from the 'organisations' table, specifically focusing on those organisations that employ research staff. It aggregates the data by grouping the organisations based on their unique identifiers and counts the number of research staff associated with each organisation type. The results are ordered by the count of research staff, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "What is the organisation type and id of the organisation which has the most number of research staff?"
        },
        {
            "sample_id": 4379,
            "gold_sql": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
            "gold_complexity": 6,
            "vt": "SELECT research_staff.staff_details FROM research_staff ORDER BY research_staff.staff_details",
            "ba": "The virtual table lists the details of research staff members from the 'research_staff' table, ordered by their details.",
            "question": "List the research staff details, and order in ascending order."
        },
        {
            "sample_id": 4345,
            "gold_sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'",
            "gold_complexity": 6,
            "vt": "SELECT staff_roles.role_description FROM staff_roles WHERE staff_roles.role_code = '[placeholder-type:string]'",
            "ba": "The virtual table describes the role descriptions of staff members from the 'staff_roles' table based on a specific role code. The placeholder in the WHERE clause represents the unique code for the staff member's role.",
            "question": "What is the complete description of the researcher role."
        },
        {
            "sample_id": 4386,
            "gold_sql": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
            "gold_complexity": 8,
            "vt": "SELECT project_staff.role_code FROM project_staff WHERE project_staff.date_from > '[placeholder-type:string]' AND project_staff.date_to < '[placeholder-type:string]'",
            "ba": "The virtual table describes the role codes of staff members associated with projects, filtered by their involvement dates. The placeholders in the WHERE clause represent the start and end dates for the staff members' participation in the projects.",
            "question": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?"
        },
        {
            "sample_id": 4357,
            "gold_sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
            "gold_complexity": 6,
            "vt": "SELECT document_types.document_type_code FROM document_types WHERE document_types.document_description LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the unique document type codes from the 'document_types' table that match a specific description. The placeholder in the WHERE clause allows for filtering based on a partial or full description of the document type.",
            "question": "Which document type is described with the prefix 'Initial'?"
        },
        {
            "sample_id": 4330,
            "gold_sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
            "gold_complexity": 10,
            "vt": "SELECT documents.response_received_date FROM documents JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE document_types.document_description = '[placeholder-type:string]' OR grants.grant_amount > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the response received dates of documents from the 'documents' table. It joins with the 'document_types' table to filter based on the document description and with the 'grants' table to apply a condition on the grant amount. The placeholders allow for dynamic input of the document description and grant amount.",
            "question": "What is the response received date for the document described as Regular that was granted more than 100 dollars?"
        },
        {
            "sample_id": 4384,
            "gold_sql": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), projects.project_details FROM projects JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY projects.project_id",
            "ba": "The virtual table summarizes the number of tasks associated with each project along with the project details from the 'projects' table. It uses a JOIN operation to combine data from the 'projects' table and the 'tasks' table, grouping the results by project ID to count the tasks for each project.",
            "question": "For each project id, how many tasks are there?"
        },
        {
            "sample_id": 4375,
            "gold_sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT projects.organisation_id, COUNT(*) FROM projects JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY projects.organisation_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of projects associated with each organisation by counting the projects grouped by their organisation ID. It retrieves the organisation ID from the 'projects' table and counts the number of related entries in the 'project_outcomes' table. The results are ordered by the count of projects, and a limit is applied to restrict the number of results returned.",
            "question": "List the organisation id with the maximum outcome count, and the count."
        },
        {
            "sample_id": 4315,
            "gold_sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'",
            "gold_complexity": 8,
            "vt": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'",
            "ba": "The virtual table retrieves project details from the 'Projects' table for projects that have both 'Paper' and 'Patent' as outcomes. It uses an INTERSECT operation to ensure that only projects meeting both criteria are included in the results.",
            "question": "List the project details of the project both producing patent and paper as outcomes."
        }
    ],
    "flight_4": [
        {
            "sample_id": 6869,
            "gold_sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
            "gold_complexity": 14,
            "vt": "SELECT COUNT(*) FROM routes WHERE routes.dst_apid IN (SELECT airports.apid FROM airports WHERE country = 'Canada') AND routes.src_apid IN (SELECT airports.apid FROM airports WHERE country = 'United States')",
            "ba": "The virtual table counts the number of routes from the 'routes' table that have a destination airport located in Canada and a source airport located in the United States. The placeholders in the query represent the countries for filtering the airports.",
            "question": "How many routes go from the United States to Canada?"
        },
        {
            "sample_id": 6821,
            "gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM airports JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE airports.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of airports that have routes leading to them from a specific country. It joins the 'airports' table with the 'routes' table based on the destination airport ID, filtering the results by the specified country.",
            "question": "How many routes end in a Canadian airport?"
        },
        {
            "sample_id": 6800,
            "gold_sql": "SELECT count(*) FROM airlines",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM airlines",
            "ba": "The virtual table counts the total number of airlines from the 'airlines' table.",
            "question": "How many airlines are there?"
        },
        {
            "sample_id": 6797,
            "gold_sql": "SELECT name FROM airports WHERE city  =  'Goroka'",
            "gold_complexity": 6,
            "vt": "SELECT airports.name FROM airports WHERE airports.city = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of airports located in a specific city from the 'airports' table. The placeholder in the WHERE clause represents the name of the city.",
            "question": "What are the names of the airports in the city of Goroka?"
        },
        {
            "sample_id": 6820,
            "gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM airports JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE airports.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of airports that have routes leading to them from a specific country. It joins the 'airports' table with the 'routes' table based on the destination airport ID, filtering the results by the specified country.",
            "question": "Find the number of routes whose destination airports are in Canada."
        },
        {
            "sample_id": 6841,
            "gold_sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), airports.country FROM airports GROUP BY airports.country ORDER BY COUNT(*)",
            "ba": "The virtual table provides a count of airports grouped by their respective countries, allowing users to see how many airports exist in each country. The results are ordered by the count of airports in ascending order.",
            "question": "What is the number of airports per country, ordered from most to least?"
        },
        {
            "sample_id": 6858,
            "gold_sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
            "gold_complexity": 8,
            "vt": "SELECT airports.city FROM airports GROUP BY airports.city HAVING COUNT(*) = [placeholder-type:numeric]",
            "ba": "The virtual table lists the cities where airports are located, specifically those cities that have a number of airports equal to a specified count. The placeholder in the HAVING clause represents the number of airports in those cities.",
            "question": "Find the cities which have exactly two airports."
        },
        {
            "sample_id": 6853,
            "gold_sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), airports.name FROM airports JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY airports.name",
            "ba": "The virtual table provides a count of routes originating from each airport along with the airport's name. It combines data from the 'airports' table and the 'routes' table, specifically focusing on the source airport ID to determine how many routes are associated with each airport.",
            "question": "For each airport name, how many routes start at that airport?"
        },
        {
            "sample_id": 6875,
            "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT airports.name FROM airports JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE airports.country = '[placeholder-type:string]' GROUP BY airports.name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of airports from the 'airports' table that are used as source airports in the 'routes' table, filtered by a specific country. The query groups the results by airport name and orders them based on the number of routes originating from each airport, limiting the output to a specified number of results.",
            "question": "What is the name of the airport with the most number of routes that start in China?"
        },
        {
            "sample_id": 6816,
            "gold_sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT city) FROM airports WHERE airports.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the distinct cities from the 'airports' table where the airports are located in a specific country. The placeholder in the WHERE clause represents the country's name.",
            "question": "How many different cities do have some airport in the country of Greenland?"
        },
        {
            "sample_id": 6856,
            "gold_sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
            "gold_complexity": 8,
            "vt": "SELECT AVG(airports.elevation), airports.country FROM airports GROUP BY airports.country",
            "ba": "The virtual table calculates the average elevation of airports grouped by their respective countries from the 'airports' table. The placeholder in the SELECT clause represents the average elevation, while the country is displayed alongside it.",
            "question": "Find the average elevation of all airports for each country."
        },
        {
            "sample_id": 6876,
            "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT airports.name FROM airports JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE airports.country = '[placeholder-type:string]' GROUP BY airports.name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of airports from the 'airports' table that are located in a specific country. It joins the 'airports' table with the 'routes' table to filter for destination airports based on the specified country. The results are grouped by airport name and ordered by the count of routes to each airport, with a limit on the number of results returned.",
            "question": "Find the busiest destination airport that runs most number of routes in China."
        },
        {
            "sample_id": 6840,
            "gold_sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), airports.country FROM airports GROUP BY airports.country ORDER BY COUNT(*)",
            "ba": "The virtual table provides a count of airports grouped by their respective countries, allowing users to see how many airports are located in each country. The results are ordered by the count of airports in ascending order.",
            "question": "How many airports are there per country? Order the countries by decreasing number of airports."
        },
        {
            "sample_id": 6807,
            "gold_sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'",
            "gold_complexity": 6,
            "vt": "SELECT airports.name FROM airports WHERE airports.country = '[placeholder-type:string]' OR airports.country = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of airports located in specific countries from the 'airports' table. The placeholders in the WHERE clause represent the names of the countries being queried.",
            "question": "What are the names of all airports in Cuba or Argentina?"
        },
        {
            "sample_id": 6835,
            "gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT airlines.country FROM airlines GROUP BY airlines.country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of countries where airlines are based, grouped by country and ordered by the number of airlines in each country. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to return.",
            "question": "What is the name of the country with the most number of home airlines?"
        },
        {
            "sample_id": 6814,
            "gold_sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM airports WHERE airports.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of airports from the 'airports' table that match a specific name pattern. The placeholder in the WHERE clause represents the name of the airport being searched for.",
            "question": "Find the number of airports whose name contain the word 'International'."
        },
        {
            "sample_id": 6874,
            "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT airports.name FROM airports JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE airports.country = '[placeholder-type:string]' GROUP BY airports.name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of airports from the 'airports' table that are located in a specific country. It joins the 'airports' table with the 'routes' table to filter the source airports based on the specified country. The results are grouped by airport name and ordered by the count of routes originating from each airport, with a limit on the number of results returned.",
            "question": "Find the busiest source airport that runs most number of routes in China."
        },
        {
            "sample_id": 6868,
            "gold_sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
            "gold_complexity": 14,
            "vt": "SELECT COUNT(*) FROM routes WHERE routes.dst_apid IN (SELECT airports.apid FROM airports WHERE country = 'Canada') AND routes.src_apid IN (SELECT airports.apid FROM airports WHERE country = 'United States')",
            "ba": "The virtual table counts the number of routes from the 'routes' table that have a destination airport located in Canada and a source airport located in the United States. The placeholders in the query represent the countries for filtering the airports.",
            "question": "Find the number of routes from the United States to Canada."
        },
        {
            "sample_id": 6806,
            "gold_sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'",
            "gold_complexity": 6,
            "vt": "SELECT airports.name FROM airports WHERE airports.country = '[placeholder-type:string]' OR airports.country = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of airports located in specific countries from the 'airports' table. The placeholders in the WHERE clause represent the names of the countries being queried.",
            "question": "Find the name of the airports located in Cuba or Argentina."
        },
        {
            "sample_id": 6826,
            "gold_sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT airports.name, airports.city, routes.dst_apid FROM airports JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY routes.dst_apid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and cities of airports along with their destination airport IDs from the 'airports' and 'routes' tables. It joins these tables based on the destination airport ID, groups the results by destination airport ID, and orders them by the count of routes to each destination, limiting the results to a specified number.",
            "question": "Find the name and city of the airport which is the destination of the most number of routes."
        },
        {
            "sample_id": 6815,
            "gold_sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM airports WHERE airports.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of airports from the 'airports' table that match a specific name pattern. The placeholder in the WHERE clause represents the name of the airport being searched for.",
            "question": "How many airports' names have the word Interanation in them?"
        },
        {
            "sample_id": 6873,
            "gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT airlines.name FROM airlines JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY airlines.name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of airlines from the 'airlines' table that are associated with routes in the 'routes' table. The results are grouped by airline name and ordered by the count of routes each airline operates, with a limit on the number of results returned based on a specified numeric placeholder.",
            "question": "What is the name of the airline with the most routes?"
        },
        {
            "sample_id": 6809,
            "gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
            "gold_complexity": 6,
            "vt": "SELECT airlines.country FROM airlines WHERE airlines.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the country of an airline from the 'airlines' table based on a specified airline name. The placeholder in the WHERE clause allows for dynamic input of the airline's name to filter the results accordingly.",
            "question": "What are the countries of all airlines whose names start with Orbit?"
        },
        {
            "sample_id": 6830,
            "gold_sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 14,
            "vt": "SELECT airports.name, airports.city, routes.src_apid FROM airports JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY routes.src_apid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and cities of airports along with their source airport IDs from the 'airports' table, joined with the 'routes' table. The results are grouped by the source airport ID and ordered by the count of routes associated with each source airport, limiting the output to a specified number of records.",
            "question": "Find the name and city of the airport which is the source for the most number of flight routes."
        },
        {
            "sample_id": 6864,
            "gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM routes JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE airports.country = '[placeholder-type:string]' AND airlines.name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of routes from the 'routes' table that connect to airports in a specific country and are operated by a specific airline. The placeholders in the WHERE clause represent the country of the airport and the name of the airline.",
            "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'."
        },
        {
            "sample_id": 6872,
            "gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT airlines.name FROM airlines JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY airlines.name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of airlines from the 'airlines' table that are associated with routes in the 'routes' table. The results are grouped by airline name and ordered by the count of routes each airline operates, with a limit on the number of results returned based on a specified numeric placeholder.",
            "question": "Find the name of airline which runs the most number of routes."
        },
        {
            "sample_id": 6851,
            "gold_sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
            "gold_complexity": 10,
            "vt": "SELECT airports.city FROM airports GROUP BY airports.city HAVING COUNT(*) > [placeholder-type:numeric] ORDER BY COUNT(*)",
            "ba": "The virtual table lists the cities from the 'airports' table that have more than a specified number of airports. The placeholder in the HAVING clause represents the minimum count of airports required for a city to be included in the results.",
            "question": "What are the cities that have more than 2 airports sorted by number of airports?"
        },
        {
            "sample_id": 6803,
            "gold_sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM airlines WHERE airlines.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of airlines from the 'airlines' table that are based in a specific country. The placeholder in the WHERE clause represents the name of the country.",
            "question": "What is the number of airlines based in Russia?"
        },
        {
            "sample_id": 6857,
            "gold_sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
            "gold_complexity": 8,
            "vt": "SELECT AVG(airports.elevation), airports.country FROM airports GROUP BY airports.country",
            "ba": "The virtual table calculates the average elevation of airports grouped by their respective countries from the 'airports' table. The placeholder in the SELECT clause represents the average elevation, while the country is displayed alongside it.",
            "question": "For each country, what is the average elevation of that country's airports?"
        },
        {
            "sample_id": 6805,
            "gold_sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
            "gold_complexity": 6,
            "vt": "SELECT MAX(airports.elevation) FROM airports WHERE airports.country = '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the maximum elevation of airports located in a specific country from the 'airports' table. The placeholder in the WHERE clause represents the name of the country.",
            "question": "What is the highest elevation of an airport in the country of Iceland?"
        },
        {
            "sample_id": 6839,
            "gold_sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT airlines.country, COUNT(*) FROM airlines GROUP BY airlines.country ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the number of airlines grouped by their country of origin. It retrieves the country name from the 'airlines' table and counts the total number of airlines for each country, ordering the results by the count in ascending order.",
            "question": "How many airlines operate out of each country in descending order?"
        },
        {
            "sample_id": 6847,
            "gold_sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM (SELECT airports.city FROM airports GROUP BY city HAVING COUNT(*) > 3)",
            "ba": "The virtual table counts the number of cities that have more than three airports listed in the 'airports' table. It first selects the city names from the 'airports' table, groups them by city, and then filters those groups to only include cities with a count greater than three. Finally, it counts the number of such cities.",
            "question": "What is the count of cities with more than 3 airports?"
        },
        {
            "sample_id": 6802,
            "gold_sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM airlines WHERE airlines.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of airlines from the 'airlines' table that are based in a specific country. The placeholder in the WHERE clause represents the country's name.",
            "question": "How many airlines does Russia has?"
        },
        {
            "sample_id": 6798,
            "gold_sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
            "gold_complexity": 12,
            "vt": "SELECT airports.name, airports.city, airports.country, airports.elevation FROM airports WHERE airports.city = '[placeholder-type:string]'",
            "ba": "The virtual table describes the names, cities, countries, and elevations of airports from the 'airports' table that are located in a specific city. The placeholder in the WHERE clause represents the name of the city.",
            "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York."
        },
        {
            "sample_id": 6862,
            "gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM routes JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE airports.country = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of routes from the 'routes' table that connect to airports located in a specific country. It joins the 'routes' table with the 'airports' table based on the destination airport ID, filtering the results to include only those airports that are in the specified country.",
            "question": "Find the number of routes with destination airports in Italy."
        },
        {
            "sample_id": 6849,
            "gold_sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT airports.city, COUNT(*) FROM airports GROUP BY airports.city HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of airports located in each city from the 'airports' table. It groups the results by city and filters to show only those cities that have more than a specified number of airports, represented by a placeholder for numeric values.",
            "question": "What are the names of all cities with more than one airport and how many airports do they have?"
        },
        {
            "sample_id": 6825,
            "gold_sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT airports.name, airports.city, airports.country FROM airports ORDER BY airports.elevation LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of airport names, cities, and countries from the 'airports' table, sorted by their elevation. The placeholder in the LIMIT clause allows the user to specify the maximum number of records to return.",
            "question": "What is the name, city, and country of the airport with the highest elevation?"
        },
        {
            "sample_id": 6848,
            "gold_sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT airports.city, COUNT(*) FROM airports GROUP BY airports.city HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the number of airports located in each city, filtering to show only those cities that have more than a specified number of airports. The placeholder in the HAVING clause represents the minimum count of airports required for a city to be included in the results.",
            "question": "List the cities which have more than one airport and number of airports."
        },
        {
            "sample_id": 6842,
            "gold_sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), airports.city FROM airports WHERE airports.country = '[placeholder-type:string]' GROUP BY airports.city ORDER BY COUNT(*)",
            "ba": "The virtual table provides a count of airports grouped by city for a specific country. The placeholder in the WHERE clause represents the country's name, allowing users to filter the results based on their input.",
            "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports."
        },
        {
            "sample_id": 6810,
            "gold_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
            "gold_complexity": 6,
            "vt": "SELECT airports.name FROM airports WHERE airports.elevation BETWEEN -[placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of airports from the 'airports' table that have an elevation within a specified range. The placeholders in the BETWEEN clause represent the minimum and maximum elevation values.",
            "question": "Find the name of airports whose altitude is between -50 and 50."
        },
        {
            "sample_id": 6812,
            "gold_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT airports.country FROM airports ORDER BY airports.elevation LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the countries of airports from the 'airports' table, ordered by their elevation. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to retrieve.",
            "question": "Which country is the airport that has the highest altitude located in?"
        },
        {
            "sample_id": 6846,
            "gold_sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM (SELECT airports.city FROM airports GROUP BY city HAVING COUNT(*) > 3)",
            "ba": "The virtual table counts the number of cities that have more than three airports listed in the 'airports' table. It first groups the airports by city and filters those groups to only include cities with a count greater than three, and then counts the resulting groups.",
            "question": "How many cities are there that have more than 3 airports?"
        },
        {
            "sample_id": 6834,
            "gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT airlines.country FROM airlines GROUP BY airlines.country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique countries from which airlines operate, grouped by country and ordered by the number of airlines in each country. The placeholder in the LIMIT clause allows the user to specify the maximum number of countries to return.",
            "question": "Which countries has the most number of airlines?"
        },
        {
            "sample_id": 6865,
            "gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM routes JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE airports.country = '[placeholder-type:string]' AND airlines.name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of routes from the 'routes' table that connect to airports in a specific country and are operated by a specific airline. The placeholders in the WHERE clause represent the country of the airport and the name of the airline.",
            "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?"
        },
        {
            "sample_id": 6832,
            "gold_sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT dst_apid) FROM airlines JOIN routes AS T2 ON T1.alid = T2.alid WHERE airlines.name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the distinct destination airport IDs from the 'routes' table, which are associated with a specific airline. The query joins the 'airlines' table to filter the results based on the airline's name provided as a placeholder.",
            "question": "Find the number of different airports which are the destinations of the American Airlines."
        },
        {
            "sample_id": 6843,
            "gold_sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), airports.city FROM airports WHERE airports.country = '[placeholder-type:string]' GROUP BY airports.city ORDER BY COUNT(*)",
            "ba": "The virtual table provides a count of airports grouped by city for a specific country. The placeholder in the WHERE clause represents the country's name, allowing users to filter the results based on their input.",
            "question": "How many airports are there per city in the US ordered from most to least?"
        },
        {
            "sample_id": 6867,
            "gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM airports JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE airports.name = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of routes that have a specific destination airport name from the 'airports' table. It joins the 'airports' table with the 'routes' table based on the destination airport ID, filtering for the specified airport name.",
            "question": "What is the number of routes that end at John F Kennedy International Airport?"
        },
        {
            "sample_id": 6808,
            "gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
            "gold_complexity": 6,
            "vt": "SELECT airlines.country FROM airlines WHERE airlines.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves the country of an airline from the 'airlines' table based on a specified airline name. The placeholder in the WHERE clause allows for filtering by the airline's name using a string value.",
            "question": "Find the country of the airlines whose name starts with 'Orbit'."
        },
        {
            "sample_id": 6844,
            "gold_sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
            "gold_complexity": 10,
            "vt": "SELECT airports.city FROM airports WHERE airports.country = '[placeholder-type:string]' GROUP BY airports.city HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table describes the cities of airports located in a specific country, filtering for those cities that have more than a specified number of airports. The placeholder in the WHERE clause represents the country's name, and the placeholder in the HAVING clause represents the minimum count of airports required in those cities.",
            "question": "Return the cities with more than 3 airports in the United States."
        }
    ],
    "performance_attendance": [
        {
            "sample_id": 1314,
            "gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT performance.location FROM performance GROUP BY performance.location ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the unique locations of performances from the 'performance' table, grouped by location and ordered by the number of performances held at each location. The placeholder in the LIMIT clause represents the maximum number of locations to return.",
            "question": "Show the most common location of performances."
        },
        {
            "sample_id": 1310,
            "gold_sql": "SELECT Attendance FROM performance WHERE LOCATION  =  \"TD Garden\" OR LOCATION  =  \"Bell Centre\"",
            "gold_complexity": 7,
            "vt": "SELECT performance.attendance FROM performance WHERE performance.location = None.\"td garden\" OR performance.location = None.\"bell centre\"",
            "ba": "The virtual table retrieves the attendance numbers from the 'performance' table for performances held at specific locations. The placeholders in the WHERE clause represent the names of the venues where the performances take place.",
            "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\""
        },
        {
            "sample_id": 1316,
            "gold_sql": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000",
            "gold_complexity": 9,
            "vt": "SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000",
            "ba": "The virtual table identifies locations of performances from the 'performance' table that have a high attendance (greater than 2000) and also those with a low attendance (less than 1000). The use of INTERSECT allows us to find common locations that meet both criteria, which is unusual since a location typically cannot host performances with both high and low attendance simultaneously.",
            "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees."
        },
        {
            "sample_id": 1319,
            "gold_sql": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"",
            "gold_complexity": 8,
            "vt": "SELECT performance.date FROM member_attendance JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE member.role = None.\"violin\"",
            "ba": "The virtual table provides the dates of performances attended by members who hold the role of 'violin' within the organization. It combines data from the 'member', 'performance', and 'member_attendance' tables, filtering based on the member's role.",
            "question": "Show the dates of performances with attending members whose roles are \"Violin\"."
        },
        {
            "sample_id": 1311,
            "gold_sql": "SELECT avg(Attendance) FROM performance",
            "gold_complexity": 4,
            "vt": "SELECT AVG(performance.attendance) FROM performance",
            "ba": "The virtual table calculates the average attendance of performances from the 'performance' table. It does not require any specific filtering, thus providing a general overview of attendance across all performances.",
            "question": "What is the average number of attendees for performances?"
        },
        {
            "sample_id": 1321,
            "gold_sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
            "gold_complexity": 10,
            "vt": "SELECT member.name FROM member WHERE NOT member.member_id IN (SELECT member.member_id FROM member_attendance)",
            "ba": "The virtual table describes the names of members from the 'member' table who have not attended any performance events. The subquery identifies members who have participated in performances, and the main query filters out these members from the list.",
            "question": "List the names of members who did not attend any performance."
        },
        {
            "sample_id": 1315,
            "gold_sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT performance.location FROM performance GROUP BY performance.location HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the locations of performances from the 'performance' table where the number of performances held at each location meets or exceeds a specified threshold. The placeholder in the HAVING clause represents the minimum count of performances required at each location.",
            "question": "Show the locations that have at least two performances."
        },
        {
            "sample_id": 1312,
            "gold_sql": "SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT performance.date FROM performance ORDER BY performance.attendance LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of performance dates from the 'performance' table, ordered by the number of attendees present at each performance. The placeholder in the LIMIT clause allows for specifying the maximum number of performance dates to retrieve.",
            "question": "What is the date of the performance with the highest number of attendees?"
        },
        {
            "sample_id": 1318,
            "gold_sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
            "gold_complexity": 10,
            "vt": "SELECT member.name, performance.location FROM member_attendance JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY member.name",
            "ba": "The virtual table describes the names of members and the locations of performances they attended. It combines data from the 'member', 'performance', and 'member_attendance' tables, linking members to their attendance at specific performances.",
            "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names."
        }
    ],
    "epinions_1": [
        {
            "sample_id": 1697,
            "gold_sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM item WHERE NOT item.i_id IN (SELECT item.i_id FROM review)",
            "ba": "The virtual table counts the number of items from the 'item' table that do not have any associated reviews in the 'review' table. The subquery selects item identifiers from the 'review' table, and the main query filters out these identifiers from the total items.",
            "question": "Find the number of items that did not receive any review."
        },
        {
            "sample_id": 1717,
            "gold_sql": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM useracct WHERE NOT review.u_id IN (SELECT review.u_id FROM review)",
            "ba": "The virtual table counts the number of user accounts from the 'useracct' table that do not have any associated reviews in the 'review' table. The subquery identifies users who have written reviews, and the main query counts those users who are not included in that list.",
            "question": "Find the number of users who did not write any review."
        },
        {
            "sample_id": 1691,
            "gold_sql": "SELECT count(*) FROM review",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM review",
            "ba": "The virtual table counts the total number of reviews present in the 'review' table.",
            "question": "Find the number of reviews."
        },
        {
            "sample_id": 1707,
            "gold_sql": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT item.title, item.i_id FROM item JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY review.i_id ORDER BY AVG(review.rating) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles and unique identifiers of items from the 'item' table, which are joined with the 'review' table to calculate the average rating for each item. The results are grouped by item identifier and ordered by the average rating, limiting the output to a specified number of items.",
            "question": "Find the name and id of the item with the highest average rating."
        },
        {
            "sample_id": 1709,
            "gold_sql": "SELECT T1.name ,  avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id",
            "gold_complexity": 9,
            "vt": "SELECT useracct.name, AVG(review.rating) FROM useracct JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY review.u_id",
            "ba": "The virtual table describes the average rating given by users for items they have reviewed, along with the names of those users. It combines data from the 'useracct' and 'review' tables, grouping the results by user identifier to calculate the average rating for each user.",
            "question": "For each user, return the name and the average rating of reviews given by them."
        },
        {
            "sample_id": 1715,
            "gold_sql": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
            "gold_complexity": 10,
            "vt": "SELECT item.title FROM item WHERE NOT item.i_id IN (SELECT item.i_id FROM review)",
            "ba": "The virtual table lists the titles of items from the 'item' table that do not have any associated reviews. The subquery identifies the item IDs that have been reviewed, and the main query filters out these items to show only those that remain unreviewed.",
            "question": "Find the names of the items that did not receive any review."
        },
        {
            "sample_id": 1695,
            "gold_sql": "SELECT count(DISTINCT u_id) FROM review",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT u_id) FROM review",
            "ba": "The virtual table counts the number of distinct users who have written reviews for items in the 'review' table. The placeholder in the COUNT function indicates that it will return the total number of unique user identifiers (u_id) from the reviews.",
            "question": "How many different users wrote some reviews?"
        },
        {
            "sample_id": 1702,
            "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
            "gold_complexity": 10,
            "vt": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5",
            "ba": "The virtual table identifies items that have received both high and low ratings from users. It selects the titles of items from the 'item' table that have a rating greater than 8 in one query and those that have a rating less than 5 in another query, using an INTERSECT to find items that meet both conditions.",
            "question": "Find the titles of items that received both a rating higher than 8 and a rating below 5."
        },
        {
            "sample_id": 1701,
            "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5",
            "gold_complexity": 7,
            "vt": "SELECT item.title FROM item JOIN review AS T2 ON T1.i_id = T2.i_id WHERE review.rating < [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles of items from the 'item' table that have received a rating lower than a specified value. The query joins the 'item' table with the 'review' table to filter items based on their ratings, using a placeholder for the numeric rating threshold.",
            "question": "Find the titles of items that received any rating below 5."
        },
        {
            "sample_id": 1690,
            "gold_sql": "SELECT * FROM item",
            "gold_complexity": 4,
            "vt": "SELECT * FROM item",
            "ba": "The virtual table retrieves all columns from the 'item' table, which contains information about various items including their unique identifiers and titles.",
            "question": "List all information in the item table."
        },
        {
            "sample_id": 1699,
            "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  =  10",
            "gold_complexity": 7,
            "vt": "SELECT item.title FROM item JOIN review AS T2 ON T1.i_id = T2.i_id WHERE review.rating = [placeholder-type:numeric]",
            "ba": "The virtual table describes the titles of items from the 'item' table that have received a specific rating in the 'review' table. The placeholder in the WHERE clause represents the rating value.",
            "question": "Find the names of goods that receive a rating of 10."
        },
        {
            "sample_id": 1696,
            "gold_sql": "SELECT count(DISTINCT i_id) FROM review",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT i_id) FROM review",
            "ba": "The virtual table counts the distinct items that have been reviewed in the 'review' table. The placeholder indicates that the count is based on unique item identifiers.",
            "question": "How many different items were reviewed by some users?"
        },
        {
            "sample_id": 1714,
            "gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.target_u_id ORDER BY trust LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT useracct.name FROM useracct JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust.trust LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of users from the 'useracct' table who are trusted by other users. It joins the 'useracct' table with the 'trust' table to filter users based on their trust relationships. The results are ordered by the trust level, and a placeholder is used to limit the number of results returned.",
            "question": "Find the name of the target user with the lowest trust score."
        },
        {
            "sample_id": 1704,
            "gold_sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT item.title FROM item JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY review.i_id ORDER BY AVG(review.rating) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the titles of items from the 'item' table, joining it with the 'review' table to calculate the average rating for each item. The results are grouped by item identifier and ordered by the average rating in ascending order, limiting the output to a specified number of items.",
            "question": "Find the name of the item with the lowest average rating."
        },
        {
            "sample_id": 1689,
            "gold_sql": "SELECT i_id FROM item WHERE title  =  \"orange\"",
            "gold_complexity": 6,
            "vt": "SELECT item.i_id FROM item WHERE item.title = None.\"orange\"",
            "ba": "The virtual table retrieves the unique identifier of items from the 'item' table based on a specific title. The placeholder in the WHERE clause represents the title of the item being queried.",
            "question": "Find the id of the item whose title is \"orange\"."
        },
        {
            "sample_id": 1694,
            "gold_sql": "SELECT min(rank) FROM review",
            "gold_complexity": 4,
            "vt": "SELECT MIN(review.rank) FROM review",
            "ba": "The virtual table calculates the minimum rank of reviews from the 'review' table. This provides insight into the lowest-ranked review for items, which can be useful for understanding overall item performance or user feedback.",
            "question": "Find the highest rank of all reviews."
        },
        {
            "sample_id": 1698,
            "gold_sql": "SELECT name FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
            "gold_complexity": 10,
            "vt": "SELECT useracct.name FROM useracct WHERE NOT review.u_id IN (SELECT review.u_id FROM review)",
            "ba": "The virtual table lists the names of users from the 'useracct' table who have not written any reviews in the 'review' table. The query uses a subquery to identify users who have submitted reviews and filters them out from the main selection.",
            "question": "Find the names of users who did not leave any review."
        },
        {
            "sample_id": 1712,
            "gold_sql": "SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id  =  T2.source_u_id GROUP BY T2.source_u_id ORDER BY avg(trust) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT useracct.name FROM useracct JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY trust.source_u_id ORDER BY AVG(trust.trust) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of users from the 'useracct' table who have trusted other users, aggregated by the average trust level. The query joins the 'useracct' table with the 'trust' table to filter and group users based on their trust relationships, and it limits the results to a specified number of users.",
            "question": "Find the name of the source user with the highest average trust score."
        }
    ],
    "company_office": [
        {
            "sample_id": 4551,
            "gold_sql": "SELECT name FROM buildings ORDER BY Height DESC",
            "gold_complexity": 6,
            "vt": "SELECT buildings.name FROM buildings ORDER BY buildings.height",
            "ba": "The virtual table lists the names of buildings from the 'buildings' table, ordered by their height in meters. This allows users to see the buildings arranged from the shortest to the tallest.",
            "question": "What are the names of buildings sorted in descending order of building height?"
        },
        {
            "sample_id": 4563,
            "gold_sql": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
            "gold_complexity": 8,
            "vt": "SELECT companies.industry, COUNT(*) FROM companies GROUP BY companies.industry",
            "ba": "The virtual table summarizes the number of companies operating in each industry by grouping the data from the 'companies' table based on the 'industry' column. The result will show the industry type alongside the count of companies within that industry.",
            "question": "Whah are the name of each industry and the number of companies in that industry?"
        },
        {
            "sample_id": 4558,
            "gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT buildings.name FROM office_locations JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY office_locations.building_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of buildings that have office locations occupied by companies. It joins the 'office_locations' table with the 'buildings' table to get the building names and groups the results by building ID to count how many companies occupy each building. The results are ordered by the number of companies in descending order, and a limit is applied to restrict the number of buildings returned based on a specified numeric value.",
            "question": "Show the name of the building that has the most company offices."
        },
        {
            "sample_id": 4549,
            "gold_sql": "SELECT count(DISTINCT Industry) FROM Companies",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Industry) FROM companies",
            "ba": "The virtual table counts the distinct industries represented in the 'companies' table. This provides insight into the diversity of industries present within the dataset.",
            "question": "Count the number of distinct company industries."
        },
        {
            "sample_id": 4561,
            "gold_sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
            "gold_complexity": 8,
            "vt": "SELECT buildings.name FROM buildings WHERE buildings.status = None.\"on-hold\" ORDER BY buildings.stories",
            "ba": "The virtual table lists the names of buildings from the 'buildings' table that are currently on hold. The results are ordered by the number of stories in each building.",
            "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories."
        },
        {
            "sample_id": 4573,
            "gold_sql": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM companies WHERE companies.industry = None.\"banking\" OR companies.industry = None.\"conglomerate\"",
            "ba": "The virtual table counts the number of companies from the 'companies' table that belong to specific industries, namely 'banking' or 'conglomerate'. The placeholders in the WHERE clause represent the industry types being queried.",
            "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?"
        },
        {
            "sample_id": 4574,
            "gold_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT companies.headquarters FROM companies GROUP BY companies.headquarters HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the headquarters locations of companies from the 'companies' table, grouping them by headquarters and filtering to include only those locations that have more than a specified number of companies associated with them. The placeholder in the HAVING clause represents the minimum count of companies required at each headquarters location.",
            "question": "Show the headquarters shared by more than two companies."
        },
        {
            "sample_id": 4571,
            "gold_sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"",
            "gold_complexity": 8,
            "vt": "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\"",
            "ba": "The virtual table identifies the industries of companies that have headquarters in both the USA and China. It uses an INTERSECT operation to find common industries between the two sets of companies based on their headquarters location.",
            "question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?"
        },
        {
            "sample_id": 4567,
            "gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT companies.industry FROM companies GROUP BY companies.industry ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique industries from the 'companies' table, grouped by industry type. It counts the number of companies in each industry and orders the results based on this count. The placeholder in the LIMIT clause allows the user to specify how many unique industries they want to retrieve.",
            "question": "Which industry has the most companies?"
        },
        {
            "sample_id": 4575,
            "gold_sql": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
            "gold_complexity": 8,
            "vt": "SELECT companies.headquarters FROM companies GROUP BY companies.headquarters HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the headquarters locations of companies from the 'companies' table, grouping them by headquarters and filtering to include only those locations that have more than a specified number of companies associated with them. The placeholder in the HAVING clause represents the minimum count of companies required at each headquarters location.",
            "question": "Which headquarter locations are used by more than 2 companies?"
        },
        {
            "sample_id": 4550,
            "gold_sql": "SELECT name FROM buildings ORDER BY Height DESC",
            "gold_complexity": 6,
            "vt": "SELECT buildings.name FROM buildings ORDER BY buildings.height",
            "ba": "The virtual table lists the names of buildings from the 'buildings' table, ordered by their height in meters. This allows users to see which buildings are the tallest in the dataset.",
            "question": "List the names of buildings in descending order of building height."
        },
        {
            "sample_id": 4559,
            "gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT buildings.name FROM office_locations JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY office_locations.building_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of buildings that have office locations occupied by companies. It joins the 'office_locations' table with the 'buildings' table to get the building names and groups the results by building ID to count how many companies occupy each building. The results are ordered by the number of companies in each building, and a limit is applied to restrict the number of buildings returned based on a specified numeric value.",
            "question": "Which building has the largest number of company offices? Give me the building name."
        },
        {
            "sample_id": 4554,
            "gold_sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
            "gold_complexity": 8,
            "vt": "SELECT companies.name, buildings.name FROM office_locations JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
            "ba": "The virtual table describes the names of companies and the names of buildings they occupy by joining the 'office_locations', 'buildings', and 'companies' tables. The join conditions link the office locations to their respective buildings and companies.",
            "question": "List the name of a building along with the name of a company whose office is in the building."
        },
        {
            "sample_id": 4547,
            "gold_sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
            "gold_complexity": 7,
            "vt": "SELECT MAX(companies.sales_billion), MIN(companies.sales_billion) FROM companies WHERE companies.industry <> None.\"banking\"",
            "ba": "The virtual table provides the maximum and minimum annual sales revenue of companies from the 'companies' table, excluding those in the banking industry. The placeholders represent the industry type to filter out companies accordingly.",
            "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry."
        },
        {
            "sample_id": 4555,
            "gold_sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
            "gold_complexity": 8,
            "vt": "SELECT companies.name, buildings.name FROM office_locations JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
            "ba": "The virtual table describes the names of companies and the names of buildings they occupy by joining the 'office_locations', 'buildings', and 'companies' tables. The join conditions link the office locations to their respective buildings and companies.",
            "question": "For each company, return the company name and the name of the building its office is located in."
        },
        {
            "sample_id": 4539,
            "gold_sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
            "gold_complexity": 6,
            "vt": "SELECT companies.name FROM companies ORDER BY companies.market_value_billion",
            "ba": "The virtual table lists the names of companies from the 'companies' table, ordered by their market value in billions. This allows users to see the companies ranked by their market value.",
            "question": "Sort the company names in descending order of the company's market value."
        },
        {
            "sample_id": 4570,
            "gold_sql": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"",
            "gold_complexity": 8,
            "vt": "SELECT Industry FROM Companies WHERE Headquarters = \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = \"China\"",
            "ba": "The virtual table identifies the industries of companies that have their headquarters in both the USA and China. It uses an INTERSECT operation to find common industries between the two sets of companies based on their headquarters' locations.",
            "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\"."
        },
        {
            "sample_id": 4566,
            "gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT companies.industry FROM companies GROUP BY companies.industry ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique industries from the 'companies' table, grouped by industry type. It counts the number of companies in each industry and orders the results based on this count. The placeholder allows the user to specify a limit on the number of industries returned.",
            "question": "List the industry shared by the most companies."
        },
        {
            "sample_id": 4565,
            "gold_sql": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
            "gold_complexity": 8,
            "vt": "SELECT companies.industry FROM companies GROUP BY companies.industry ORDER BY COUNT(*)",
            "ba": "The virtual table provides a list of unique industries from the 'companies' table, grouped by industry type. It orders the results based on the count of companies within each industry, allowing users to see which industries have the most companies associated with them.",
            "question": "Sort all the industries in descending order of the count of companies in each industry"
        },
        {
            "sample_id": 4537,
            "gold_sql": "SELECT count(*) FROM Companies",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM companies",
            "ba": "The virtual table provides a count of all companies listed in the 'companies' table. This count represents the total number of unique companies present in the database.",
            "question": "Count the number of companies."
        },
        {
            "sample_id": 4556,
            "gold_sql": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT buildings.name FROM office_locations JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY office_locations.building_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of buildings that have more than a specified number of companies occupying their office spaces. It combines data from the 'office_locations', 'buildings', and 'companies' tables, ensuring that only buildings with a significant number of companies are included in the results.",
            "question": "Show the names of the buildings that have more than one company offices."
        },
        {
            "sample_id": 4553,
            "gold_sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT buildings.stories FROM buildings ORDER BY buildings.height LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the number of stories from the 'buildings' table, ordered by the height of the buildings. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "What is the stories of highest building?"
        },
        {
            "sample_id": 4568,
            "gold_sql": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
            "gold_complexity": 10,
            "vt": "SELECT buildings.name FROM buildings WHERE NOT buildings.id IN (SELECT office_locations.building_id FROM Office_locations)",
            "ba": "The virtual table lists the names of buildings from the 'buildings' table that are not currently occupied by any company, as indicated by the absence of their IDs in the 'office_locations' table.",
            "question": "List the names of buildings that have no company office."
        },
        {
            "sample_id": 4540,
            "gold_sql": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
            "gold_complexity": 6,
            "vt": "SELECT companies.name FROM companies WHERE companies.headquarters <> '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of companies from the 'companies' table that do not have their headquarters in a specified location. The placeholder in the WHERE clause represents the headquarters location that is being excluded.",
            "question": "What are the names of companies whose headquarters are not \"USA\"?"
        }
    ],
    "products_gen_characteristics": [
        {
            "sample_id": 5590,
            "gold_sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
            "gold_complexity": 10,
            "vt": "SELECT characteristic_name, other_characteristic_details, characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name, t1.other_characteristic_details, t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id",
            "ba": "The virtual table provides a list of characteristic names, additional details, and data types from the 'characteristics' table that are not associated with any products in the 'product_characteristics' table. This is achieved by selecting the relevant columns from 'characteristics' and excluding those that have a matching characteristic ID in 'product_characteristics'.",
            "question": "Give the names, details, and data types of characteristics that are not found in any product."
        },
        {
            "sample_id": 5577,
            "gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"",
            "gold_complexity": 7,
            "vt": "SELECT ref_product_categories.unit_of_measure FROM products JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE products.product_name = None.\"cumin\"",
            "ba": "The virtual table retrieves the unit of measure for a specific product category associated with a product named 'cumin'. It joins the 'products' table with the 'ref_product_categories' table based on the product category code to access the relevant unit of measure.",
            "question": "What is the unit of measurement of product named \"cumin\"?"
        },
        {
            "sample_id": 5571,
            "gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_product_categories.unit_of_measure FROM ref_product_categories WHERE ref_product_categories.product_category_code = None.\"herbs\"",
            "ba": "The virtual table retrieves the unit of measure for a specific product category from the 'ref_product_categories' table. The placeholder in the WHERE clause represents the unique code for the product category, which in this case is 'herbs'.",
            "question": "What is the unit of measuerment of the product category code \"Herbs\"?"
        },
        {
            "sample_id": 5517,
            "gold_sql": "SELECT color_description FROM ref_colors",
            "gold_complexity": 4,
            "vt": "SELECT ref_colors.color_description FROM ref_colors",
            "ba": "The virtual table retrieves the descriptions of colors from the 'ref_colors' table.",
            "question": "List the description of all the colors."
        },
        {
            "sample_id": 5537,
            "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
            "gold_complexity": 7,
            "vt": "SELECT ref_colors.color_description FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE products.product_name = None.\"catnip\"",
            "ba": "The virtual table describes the color of a specific product from the 'products' table by joining it with the 'ref_colors' table. The placeholder in the WHERE clause represents the name of the product for which the color description is being queried.",
            "question": "What is the color description of the product with name \"catnip\"?"
        },
        {
            "sample_id": 5541,
            "gold_sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
            "gold_complexity": 12,
            "vt": "SELECT products.product_id, ref_colors.color_description FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY products.product_id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of product IDs along with their corresponding color descriptions from the 'products' table. It joins the 'ref_colors' table to get the color descriptions and the 'product_characteristics' table to filter products based on the number of characteristics they have. The placeholder in the HAVING clause represents the minimum count of characteristics a product must have to be included in the results.",
            "question": "Find the id and color description of the products with at least 2 characteristics."
        },
        {
            "sample_id": 5545,
            "gold_sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
            "gold_complexity": 11,
            "vt": "SELECT products.product_name, products.typical_buying_price, products.typical_selling_price FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE ref_colors.color_description = None.\"yellow\"",
            "ba": "The virtual table describes the product name, typical buying price, and typical selling price of products from the 'products' table that are associated with a specific color. The query joins the 'products' table with the 'ref_colors' table to filter products based on the color description, which is represented by a placeholder.",
            "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?"
        },
        {
            "sample_id": 5538,
            "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
            "gold_complexity": 7,
            "vt": "SELECT ref_colors.color_description FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE products.product_name = None.\"catnip\"",
            "ba": "The virtual table describes the color description of a specific product from the 'products' table by joining it with the 'ref_colors' table. The placeholder in the WHERE clause represents the name of the product for which the color description is being queried.",
            "question": "Give the color description for the product 'catnip'."
        },
        {
            "sample_id": 5570,
            "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE ref_colors.color_description = None.\"white\" OR characteristics.characteristic_name = None.\"hot\"",
            "ba": "The virtual table counts the number of products that either have a specific color description or a specific characteristic name. It joins multiple tables to gather the necessary information: 'products', 'product_characteristics', 'characteristics', and 'ref_colors'. The query filters the results based on the color description being 'white' or the characteristic name being 'hot'.",
            "question": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?"
        },
        {
            "sample_id": 5536,
            "gold_sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
            "gold_complexity": 7,
            "vt": "SELECT ref_product_categories.product_category_description FROM ref_product_categories JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE products.product_description LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the product categories from the 'ref_product_categories' table that are associated with products having a specific description. The placeholder in the WHERE clause represents the product description to filter the results.",
            "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?"
        },
        {
            "sample_id": 5510,
            "gold_sql": "SELECT count(*) FROM products",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM products",
            "ba": "The virtual table provides a count of all products available in the 'products' table.",
            "question": "Count the number of products."
        },
        {
            "sample_id": 5518,
            "gold_sql": "SELECT color_description FROM ref_colors",
            "gold_complexity": 4,
            "vt": "SELECT ref_colors.color_description FROM ref_colors",
            "ba": "The virtual table retrieves the descriptions of colors from the 'ref_colors' table.",
            "question": "What are the descriptions for each color?"
        },
        {
            "sample_id": 5565,
            "gold_sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT products.product_name FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE characteristics.characteristic_name = None.\"warm\"",
            "ba": "The virtual table lists distinct product names from the 'products' table that are associated with a specific characteristic name. It joins the 'products' table with the 'product_characteristics' table to link products to their characteristics, and further joins with the 'characteristics' table to filter based on the characteristic name provided.",
            "question": "List the all the distinct names of the products with the characteristic name 'warm'."
        },
        {
            "sample_id": 5547,
            "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE products.product_name = None.\"sesame\"",
            "ba": "The virtual table counts the number of products from the 'products' table that have a specific name. It joins the 'products' table with the 'product_characteristics' table to potentially filter or gather additional information about the products, but in this case, it focuses on counting products with a specific name.",
            "question": "How many characteristics does the product named \"sesame\" have?"
        },
        {
            "sample_id": 5582,
            "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
            "gold_complexity": 10,
            "vt": "SELECT products.product_name FROM products JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE ref_colors.color_description = None.\"white\" AND ref_product_categories.unit_of_measure <> None.\"handful\"",
            "ba": "The virtual table describes the names of products from the 'products' table that are associated with a specific color and product category. It filters the results to include only those products that have a color description of 'white' and are not measured in 'handful'.",
            "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?"
        },
        {
            "sample_id": 5520,
            "gold_sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT characteristics.characteristic_name FROM characteristics",
            "ba": "The virtual table lists all unique characteristic names from the 'characteristics' table.",
            "question": "What are the different names of the product characteristics?"
        },
        {
            "sample_id": 5530,
            "gold_sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
            "gold_complexity": 8,
            "vt": "SELECT products.product_category_code, products.typical_buying_price FROM products WHERE products.product_name = None.\"cumin\"",
            "ba": "The virtual table retrieves the product category code and typical buying price of products from the 'products' table that match a specific product name. The placeholder in the WHERE clause represents the name of the product being queried.",
            "question": "Return the category code and typical price of 'cumin'."
        },
        {
            "sample_id": 5516,
            "gold_sql": "SELECT product_name ,  typical_buying_price FROM products",
            "gold_complexity": 6,
            "vt": "SELECT products.product_name, products.typical_buying_price FROM products",
            "ba": "The virtual table provides the product names and their typical buying prices from the 'products' table.",
            "question": "Return the names and typical buying prices for all products."
        },
        {
            "sample_id": 5579,
            "gold_sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"",
            "gold_complexity": 9,
            "vt": "SELECT ref_product_categories.unit_of_measure, ref_product_categories.product_category_code FROM products JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE products.product_name = None.\"chervil\"",
            "ba": "The virtual table retrieves the unit of measure and product category code for a specific product from the 'products' table by joining it with the 'ref_product_categories' table. The placeholder in the WHERE clause represents the name of the product being queried.",
            "question": "Find the unit of measurement and product category code of product named \"chervil\"."
        },
        {
            "sample_id": 5529,
            "gold_sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
            "gold_complexity": 8,
            "vt": "SELECT products.product_category_code, products.typical_buying_price FROM products WHERE products.product_name = None.\"cumin\"",
            "ba": "The virtual table retrieves the product category code and typical buying price of products from the 'products' table that match a specific product name. The placeholder in the WHERE clause represents the name of the product being queried.",
            "question": "What is the category and typical buying price  of the product with name \"cumin\"?"
        },
        {
            "sample_id": 5587,
            "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT characteristics.characteristic_name FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY characteristics.characteristic_name ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of characteristics associated with products, grouping them by characteristic name and ordering them based on their frequency of occurrence. The result is limited to a specified number of characteristic names.",
            "question": "What is the characteristic name used by most number of the products?"
        },
        {
            "sample_id": 5524,
            "gold_sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
            "gold_complexity": 11,
            "vt": "SELECT products.product_name, ref_colors.color_description, products.product_description FROM products JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE products.product_category_code = None.\"herbs\"",
            "ba": "The virtual table describes the product names, their corresponding color descriptions, and product descriptions from the 'products' table, filtered by a specific product category. The placeholder in the WHERE clause represents the product category code for 'herbs'.",
            "question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?"
        },
        {
            "sample_id": 5573,
            "gold_sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_product_categories.product_category_description FROM ref_product_categories WHERE ref_product_categories.product_category_code = None.\"spices\"",
            "ba": "The virtual table describes the product category description from the 'ref_product_categories' table for a specific product category code. The placeholder in the WHERE clause represents the product category code.",
            "question": "Find the product category description of the product category with code \"Spices\"."
        },
        {
            "sample_id": 5556,
            "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
            "gold_complexity": 9,
            "vt": "SELECT characteristics.characteristic_name FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"sesame\" AND characteristics.characteristic_type_code = None.\"grade\"",
            "ba": "The virtual table describes the names of characteristics associated with a specific product from the 'products' table, filtered by the product's name and the type of characteristic. The placeholders in the WHERE clause represent the product's name and the characteristic type code.",
            "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?"
        },
        {
            "sample_id": 5583,
            "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT ref_colors.color_description FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY ref_colors.color_description ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of unique color descriptions from the 'ref_colors' table, based on the products available in the 'products' table. It joins the two tables on the color code, groups the results by color description, and orders them by the count of products associated with each color. The query limits the results to a specified number of entries.",
            "question": "What is the description of the color for most products?"
        },
        {
            "sample_id": 5567,
            "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE ref_colors.color_description = None.\"red\" AND characteristics.characteristic_name = None.\"slow\"",
            "ba": "The virtual table counts the number of products that have a specific color and a specific characteristic. It joins multiple tables to gather the necessary information: 'products' for product details, 'product_characteristics' to link products with their characteristics, 'characteristics' to access characteristic names, and 'ref_colors' to filter by color description. The placeholders in the WHERE clause represent the specific color and characteristic name being queried.",
            "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\"."
        },
        {
            "sample_id": 5559,
            "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"flax\"",
            "ba": "The virtual table counts the number of products that have a specific name, joining multiple tables to gather the necessary information. It connects the 'products' table with the 'product_characteristics' table to link products with their characteristics, and further joins the 'characteristics' table to access detailed information about those characteristics. The placeholder in the WHERE clause represents the product name being queried.",
            "question": "Find the number of characteristics that the product \"flax\" has."
        },
        {
            "sample_id": 5511,
            "gold_sql": "SELECT count(*) FROM ref_colors",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ref_colors",
            "ba": "The virtual table counts the total number of unique colors available in the 'ref_colors' table.",
            "question": "How many colors are there?"
        },
        {
            "sample_id": 5509,
            "gold_sql": "SELECT count(*) FROM products",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM products",
            "ba": "The virtual table provides a count of all products available in the 'products' table.",
            "question": "How many products are there?"
        },
        {
            "sample_id": 5560,
            "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"flax\"",
            "ba": "The virtual table counts the number of products that have a specific name, 'flax', by joining the 'products' table with the 'product_characteristics' and 'characteristics' tables. The join conditions link the product identifiers and characteristic identifiers to gather relevant data across these tables.",
            "question": "Count the number of characteristics of the 'flax' product."
        },
        {
            "sample_id": 5519,
            "gold_sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT characteristics.characteristic_name FROM characteristics",
            "ba": "The virtual table lists all unique characteristic names from the 'characteristics' table.",
            "question": "Find the names of all the product characteristics."
        },
        {
            "sample_id": 5554,
            "gold_sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"",
            "gold_complexity": 10,
            "vt": "SELECT characteristics.characteristic_name, characteristics.characteristic_data_type FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"cumin\"",
            "ba": "The virtual table describes the names and data types of characteristics associated with a specific product from the 'products' table. The query joins the 'products' table with the 'product_characteristics' table to link products to their characteristics, and then further joins with the 'characteristics' table to retrieve the relevant characteristic details. The placeholder in the WHERE clause represents the name of the product for which the characteristics are being queried.",
            "question": "What are the names and data types of the characteristics of the 'cumin' product?"
        },
        {
            "sample_id": 5549,
            "gold_sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT t3.characteristic_name) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"sesame\"",
            "ba": "The virtual table counts the distinct characteristic names associated with a specific product from the 'products' table. It joins the 'product_characteristics' table to link products with their characteristics and then joins the 'characteristics' table to access the characteristic names. The placeholder in the WHERE clause represents the name of the product for which the distinct characteristics are being counted.",
            "question": "How many distinct characteristic names does the product \"cumin\" have?"
        },
        {
            "sample_id": 5532,
            "gold_sql": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"",
            "gold_complexity": 6,
            "vt": "SELECT products.product_category_code FROM products WHERE products.product_name = None.\"flax\"",
            "ba": "The virtual table retrieves the product category code from the 'products' table for a specific product name. The placeholder in the WHERE clause represents the name of the product being queried.",
            "question": "What is the code of the category that the product with the name 'flax' belongs to?"
        },
        {
            "sample_id": 5540,
            "gold_sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
            "gold_complexity": 9,
            "vt": "SELECT products.color_code, ref_colors.color_description FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE products.product_name = None.\"chervil\"",
            "ba": "The virtual table describes the color code and its corresponding description for a specific product from the 'products' table. It joins the 'products' table with the 'ref_colors' table to retrieve the color information based on the product name provided.",
            "question": "Return the color code and description for the product with the name 'chervil'."
        },
        {
            "sample_id": 5548,
            "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE products.product_name = None.\"sesame\"",
            "ba": "The virtual table counts the number of products that have a specific name by joining the 'products' table with the 'product_characteristics' table. The placeholder in the WHERE clause represents the product name being queried.",
            "question": "Count the number of characteristics the product 'sesame' has."
        },
        {
            "sample_id": 5544,
            "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
            "gold_complexity": 7,
            "vt": "SELECT products.product_name FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE ref_colors.color_description = None.\"white\"",
            "ba": "The virtual table retrieves the names of products from the 'products' table that are associated with a specific color. It joins the 'products' table with the 'ref_colors' table to filter products based on the color description. The placeholder in the WHERE clause represents the color description being queried.",
            "question": "What are the names of products with 'white' as their color description?"
        },
        {
            "sample_id": 5564,
            "gold_sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE characteristics.characteristic_name = None.\"hot\"",
            "ba": "The virtual table counts the number of products that have a specific characteristic name, which in this case is 'hot'. It joins the 'products' table with the 'product_characteristics' table to link products with their characteristics, and then further joins with the 'characteristics' table to filter based on the characteristic name.",
            "question": "Count the number of products with the 'hot' charactersitic."
        },
        {
            "sample_id": 5551,
            "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
            "gold_complexity": 8,
            "vt": "SELECT characteristics.characteristic_name FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"sesame\"",
            "ba": "The virtual table describes the names of characteristics associated with a specific product from the 'products' table. It joins the 'product_characteristics' table to link products with their characteristics and filters the results based on the product's name.",
            "question": "What are all the characteristic names of product \"sesame\"?"
        },
        {
            "sample_id": 5550,
            "gold_sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(DISTINCT t3.characteristic_name) FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"sesame\"",
            "ba": "The virtual table counts the distinct characteristic names associated with a specific product from the 'products' table. It joins the 'product_characteristics' table to link products with their characteristics and then joins the 'characteristics' table to access the characteristic names. The placeholder in the WHERE clause represents the name of the product being queried.",
            "question": "Count the number of different characteristic names the product 'cumin' has."
        },
        {
            "sample_id": 5561,
            "gold_sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
            "gold_complexity": 10,
            "vt": "SELECT products.product_name FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE ref_colors.color_description = None.\"red\" AND characteristics.characteristic_name = None.\"fast\"",
            "ba": "The virtual table retrieves the names of products from the 'products' table that are associated with specific characteristics and colors. It joins multiple tables to filter products based on their color description and a specific characteristic name.",
            "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\"."
        },
        {
            "sample_id": 5576,
            "gold_sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
            "gold_complexity": 8,
            "vt": "SELECT ref_product_categories.product_category_description, ref_product_categories.unit_of_measure FROM ref_product_categories WHERE ref_product_categories.product_category_code = None.\"herbs\"",
            "ba": "The virtual table describes the product category details from the 'ref_product_categories' table for a specific product category code. The placeholder in the WHERE clause represents the unique code for the product category.",
            "question": "Return the description and unit of measurement for products in the 'Herbs' category."
        },
        {
            "sample_id": 5527,
            "gold_sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM products WHERE products.product_category_code = None.\"spices\" AND products.typical_buying_price > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of products in the 'products' table that belong to a specific product category and have a typical buying price greater than a specified amount. The placeholder in the WHERE clause represents the minimum buying price for filtering the products.",
            "question": "Find the number of products with category \"Spices\" and typically sold above 1000."
        },
        {
            "sample_id": 5581,
            "gold_sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
            "gold_complexity": 10,
            "vt": "SELECT products.product_name FROM products JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE ref_colors.color_description = None.\"white\" AND ref_product_categories.unit_of_measure <> None.\"handful\"",
            "ba": "The virtual table describes the names of products from the 'products' table that are associated with a specific color and product category. It filters the results to include only those products whose color description is 'white' and whose unit of measure is not 'handful'.",
            "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\"."
        },
        {
            "sample_id": 5552,
            "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
            "gold_complexity": 8,
            "vt": "SELECT characteristics.characteristic_name FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE products.product_name = None.\"sesame\"",
            "ba": "The virtual table retrieves the names of characteristics associated with a specific product from the 'products' table. It joins the 'product_characteristics' table to link products with their characteristics and the 'characteristics' table to access the characteristic names. The placeholder in the WHERE clause represents the name of the product for which the characteristics are being queried.",
            "question": "Return the characteristic names of the 'sesame' product."
        },
        {
            "sample_id": 5515,
            "gold_sql": "SELECT product_name ,  typical_buying_price FROM products",
            "gold_complexity": 6,
            "vt": "SELECT products.product_name, products.typical_buying_price FROM products",
            "ba": "The virtual table provides the product names and their typical buying prices from the 'products' table.",
            "question": "What are the names and buying prices of all the products?"
        },
        {
            "sample_id": 5578,
            "gold_sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"",
            "gold_complexity": 7,
            "vt": "SELECT ref_product_categories.unit_of_measure FROM products JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE products.product_name = None.\"cumin\"",
            "ba": "The virtual table retrieves the unit of measure for a specific product category associated with a product named 'cumin'. It joins the 'products' table with the 'ref_product_categories' table based on the product category code to access the relevant unit of measure.",
            "question": "Give the unit of measure for the product with the name 'cumin'."
        },
        {
            "sample_id": 5572,
            "gold_sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_product_categories.unit_of_measure FROM ref_product_categories WHERE ref_product_categories.product_category_code = None.\"herbs\"",
            "ba": "The virtual table retrieves the unit of measure for a specific product category from the 'ref_product_categories' table. The placeholder in the WHERE clause represents the unique code for the product category, which in this case is 'herbs'.",
            "question": "Return the unit of measure for 'Herb' products."
        },
        {
            "sample_id": 5584,
            "gold_sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT ref_colors.color_description FROM products JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY ref_colors.color_description ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of color descriptions from the 'ref_colors' table, based on the products that are associated with each color. It groups the results by color description and orders them by the count of products associated with each color, limiting the results to a specified number.",
            "question": "Return the color description that is most common across all products."
        },
        {
            "sample_id": 5591,
            "gold_sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
            "gold_complexity": 10,
            "vt": "SELECT characteristics.characteristic_name FROM products JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY characteristics.characteristic_name HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of characteristics associated with products, filtering for those characteristics that are linked to a minimum number of products. The query joins the 'products' table with 'product_characteristics' and 'characteristics' to gather the relevant data, and groups the results by characteristic name, applying a condition to only include those with a count of associated products greater than or equal to a specified number.",
            "question": "What are characteristic names used at least twice across all products?"
        },
        {
            "sample_id": 5512,
            "gold_sql": "SELECT count(*) FROM ref_colors",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM ref_colors",
            "ba": "The virtual table counts the total number of unique colors available in the 'ref_colors' table.",
            "question": "Count the number of colors."
        }
    ],
    "company_employee": [
        {
            "sample_id": 4095,
            "gold_sql": "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters",
            "gold_complexity": 8,
            "vt": "SELECT company.headquarters, COUNT(*) FROM company GROUP BY company.headquarters",
            "ba": "The virtual table summarizes the number of companies located in each headquarters by grouping the results based on the headquarters location from the 'company' table.",
            "question": "Show the different headquarters and number of companies at each headquarter."
        },
        {
            "sample_id": 4101,
            "gold_sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
            "gold_complexity": 8,
            "vt": "SELECT people.name FROM employment JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE company.sales_in_billion > [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of people who are employed at companies with sales exceeding a specified amount in billions. The query joins the 'employment' table with the 'people' and 'company' tables to filter based on the sales figures of the companies.",
            "question": "Show the names of employees that work for companies with sales bigger than 200."
        },
        {
            "sample_id": 4089,
            "gold_sql": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM company WHERE company.headquarters = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of companies based on their headquarters location from the 'company' table. The placeholder in the WHERE clause represents the specific location of the company's headquarters.",
            "question": "How many companies are headquartered in the US?"
        },
        {
            "sample_id": 4094,
            "gold_sql": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT company.headquarters FROM company ORDER BY company.sales_in_billion LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the headquarters locations of companies from the 'company' table, ordered by their total sales revenue in billions. The placeholder in the LIMIT clause allows the user to specify the number of results to return.",
            "question": "What is the headquarter of the company with the largest sales?"
        },
        {
            "sample_id": 4091,
            "gold_sql": "SELECT Headquarters ,  Industry FROM company",
            "gold_complexity": 6,
            "vt": "SELECT company.headquarters, company.industry FROM company",
            "ba": "The virtual table describes the headquarters and industry of companies from the 'company' table. The query retrieves the location of each company's headquarters and the type of industry they operate in.",
            "question": "What are the headquarters and industries of all companies?"
        },
        {
            "sample_id": 4097,
            "gold_sql": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT company.headquarters FROM company GROUP BY company.headquarters HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the headquarters locations of companies from the 'company' table. It groups the results by headquarters and filters to include only those locations that have a count of companies greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum count of companies required at each headquarters location.",
            "question": "Show the headquarters that have at least two companies."
        },
        {
            "sample_id": 4104,
            "gold_sql": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
            "gold_complexity": 10,
            "vt": "SELECT company.name FROM company WHERE company.sales_in_billion > [placeholder-type:numeric] ORDER BY company.sales_in_billion, company.profits_in_billion",
            "ba": "The virtual table lists the names of companies from the 'company' table that have total sales revenue exceeding a specified amount. The results are ordered by sales revenue and profits, allowing users to see which companies are performing well financially.",
            "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits."
        },
        {
            "sample_id": 4090,
            "gold_sql": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
            "gold_complexity": 6,
            "vt": "SELECT company.name FROM company ORDER BY company.sales_in_billion",
            "ba": "The virtual table lists the names of companies from the 'company' table, ordered by their total sales revenue in billions. This allows users to see which companies have the highest sales figures.",
            "question": "List the names of companies by ascending number of sales."
        },
        {
            "sample_id": 4096,
            "gold_sql": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT company.headquarters FROM company GROUP BY company.headquarters ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique headquarters locations of companies from the 'company' table, grouping them to count how many companies are located at each headquarters. The results are ordered by the number of companies at each location, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Show the most common headquarter for companies."
        }
    ],
    "music_4": [
        {
            "sample_id": 6156,
            "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
            "ba": "The virtual table counts the distinct number of artists associated with the volumes in the 'volume' table. The placeholder represents the artist's unique identifier.",
            "question": "How many distinct artists do the volumes associate to?"
        },
        {
            "sample_id": 6191,
            "gold_sql": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
            "ba": "The virtual table counts the distinct number of artists associated with the volumes in the 'volume' table. The placeholder represents the artist's identifier, which is used to ensure that each artist is only counted once, regardless of how many volumes they are linked to.",
            "question": "Count the number of artists who have had volumes."
        },
        {
            "sample_id": 6163,
            "gold_sql": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
            "gold_complexity": 7,
            "vt": "SELECT volume.issue_date FROM artist JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE artist.artist = None.\"gorgoroth\"",
            "ba": "The virtual table retrieves the issue dates of volumes associated with a specific artist from the 'artist' and 'volume' tables. The placeholder in the WHERE clause represents the name of the artist being queried.",
            "question": "Return the issue dates of volumes that are by the artist named Gorgoroth."
        },
        {
            "sample_id": 6147,
            "gold_sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
            "gold_complexity": 6,
            "vt": "SELECT music_festival.date_of_ceremony, music_festival.result FROM music_festival",
            "ba": "The virtual table provides information about the dates and results of music festivals from the 'music_festival' table. The placeholders in the SELECT statement can be modified to filter or specify particular music festivals or their outcomes.",
            "question": "What are the dates of ceremony and results for each music festival?"
        },
        {
            "sample_id": 6195,
            "gold_sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
            "gold_complexity": 7,
            "vt": "SELECT volume.issue_date FROM artist JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE artist.age <= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the issue dates of volumes from the 'volume' table for artists from the 'artist' table who are of a certain age or younger. The placeholder in the WHERE clause represents the maximum age of the artists being queried.",
            "question": "Return the issue dates of volumes by artists who are at most 23 years old?"
        },
        {
            "sample_id": 6148,
            "gold_sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"",
            "gold_complexity": 6,
            "vt": "SELECT music_festival.category FROM music_festival WHERE music_festival.result = None.\"awarded\"",
            "ba": "The virtual table describes the categories of awards from the 'music_festival' table where the result indicates that no award was given. The placeholder in the WHERE clause represents the specific result status being queried.",
            "question": "What are the category of music festivals with result \"Awarded\"?"
        },
        {
            "sample_id": 6137,
            "gold_sql": "SELECT count(*) FROM artist",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM artist",
            "ba": "The virtual table counts the total number of artists in the 'artist' table.",
            "question": "Count the number of artists."
        },
        {
            "sample_id": 6180,
            "gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT volume.song FROM volume ORDER BY volume.weeks_on_top LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the song identifiers from the 'volume' table, ordered by the number of weeks each song has stayed at the top, and limits the results to a specified number of entries.",
            "question": "What is the song in the volume with the maximum weeks on top?"
        },
        {
            "sample_id": 6141,
            "gold_sql": "SELECT avg(Age) FROM artist",
            "gold_complexity": 4,
            "vt": "SELECT AVG(artist.age) FROM artist",
            "ba": "The virtual table calculates the average age of artists from the 'artist' table.",
            "question": "Return the average age across all artists."
        },
        {
            "sample_id": 6175,
            "gold_sql": "SELECT Category ,  COUNT(*) FROM music_festival GROUP BY Category",
            "gold_complexity": 8,
            "vt": "SELECT music_festival.category, COUNT(*) FROM music_festival GROUP BY music_festival.category",
            "ba": "The virtual table summarizes the number of occurrences of each category of music festivals from the 'music_festival' table. The placeholder in the SELECT statement allows for counting the number of festivals in each category, grouped accordingly.",
            "question": "Return the number of music festivals of each category."
        },
        {
            "sample_id": 6179,
            "gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT music_festival.category FROM music_festival GROUP BY music_festival.category HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the categories of music festivals from the 'music_festival' table, grouping them to count how many festivals fall under each category. The placeholder in the HAVING clause represents the minimum number of festivals required to be included in the results.",
            "question": "What are the categories of music festivals for which there have been more than 1 music festival?"
        },
        {
            "sample_id": 6189,
            "gold_sql": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT volume.issue_date FROM volume ORDER BY volume.weeks_on_top LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the issue dates of music volumes from the 'volume' table, ordered by the number of weeks each song stayed at the top. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Return the issue date of the volume that has spent the fewest weeks on top."
        },
        {
            "sample_id": 6183,
            "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
            "gold_complexity": 10,
            "vt": "SELECT artist.famous_title FROM artist WHERE NOT artist.artist_id IN (SELECT artist.artist_id FROM volume)",
            "ba": "The virtual table describes the most recognized song titles of artists from the 'artist' table who have not been featured in any volume. The subquery identifies artists that have entries in the 'volume' table, and the main query selects the famous titles of those artists who are not in that list.",
            "question": "What are the famous titles of artists who do not have any volumes?"
        },
        {
            "sample_id": 6170,
            "gold_sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",
            "gold_complexity": 8,
            "vt": "SELECT artist.famous_title, artist.age FROM artist ORDER BY artist.age",
            "ba": "The virtual table describes the most recognized song title and the age of each artist from the 'artist' table, ordered by the age of the artists.",
            "question": "Please list the age and famous title of artists in descending order of age."
        },
        {
            "sample_id": 6171,
            "gold_sql": "SELECT Famous_Title ,  Age FROM artist ORDER BY Age DESC",
            "gold_complexity": 8,
            "vt": "SELECT artist.famous_title, artist.age FROM artist ORDER BY artist.age",
            "ba": "The virtual table describes the most recognized song title and the age of each artist from the 'artist' table, sorted by the age of the artists.",
            "question": "What are the famous titles and ages of each artist, listed in descending order by age?"
        },
        {
            "sample_id": 6140,
            "gold_sql": "SELECT avg(Age) FROM artist",
            "gold_complexity": 4,
            "vt": "SELECT AVG(artist.age) FROM artist",
            "ba": "The virtual table calculates the average age of artists from the 'artist' table.",
            "question": "What is the average age of all artists?"
        },
        {
            "sample_id": 6181,
            "gold_sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT volume.song FROM volume ORDER BY volume.weeks_on_top LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the song identifiers from the 'volume' table, ordered by the number of weeks each song has stayed at the top of the charts. The placeholder in the LIMIT clause allows for specifying the maximum number of results to return.",
            "question": "Return the song in the volume that has spent the most weeks on top?"
        },
        {
            "sample_id": 6150,
            "gold_sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
            "gold_complexity": 5,
            "vt": "SELECT MAX(volume.weeks_on_top), MIN(volume.weeks_on_top) FROM volume",
            "ba": "The virtual table provides the maximum and minimum number of weeks that songs have stayed at the top from the 'volume' table. The placeholders represent the aggregate values of weeks on top for songs.",
            "question": "What are the maximum and minimum week on top of all volumes?"
        },
        {
            "sample_id": 6166,
            "gold_sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
            "gold_complexity": 7,
            "vt": "SELECT AVG(volume.weeks_on_top) FROM artist JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE artist.age <= [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average number of weeks that songs by artists aged below a certain threshold have spent at the top of the charts. It joins the 'artist' and 'volume' tables based on the artist's unique identifier, allowing for the aggregation of data related to the performance of their songs.",
            "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?"
        },
        {
            "sample_id": 6151,
            "gold_sql": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
            "gold_complexity": 5,
            "vt": "SELECT MAX(volume.weeks_on_top), MIN(volume.weeks_on_top) FROM volume",
            "ba": "The virtual table provides the maximum and minimum number of weeks that songs have stayed at the top from the 'volume' table. The placeholders represent the aggregate values of weeks on top for songs.",
            "question": "Give the maximum and minimum weeks on top across all volumes."
        },
        {
            "sample_id": 6192,
            "gold_sql": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
            "gold_complexity": 10,
            "vt": "SELECT music_festival.result, COUNT(*) FROM music_festival GROUP BY music_festival.result ORDER BY COUNT(*)",
            "ba": "The virtual table summarizes the results of music festivals by counting the occurrences of each result type. It groups the data by the result column and orders the counts in ascending order.",
            "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count."
        },
        {
            "sample_id": 6149,
            "gold_sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"",
            "gold_complexity": 6,
            "vt": "SELECT music_festival.category FROM music_festival WHERE music_festival.result = None.\"awarded\"",
            "ba": "The virtual table describes the categories of awards from the 'music_festival' table where the result indicates that no award was given. The placeholder in the WHERE clause represents the specific result status being queried.",
            "question": "Return the categories of music festivals that have the result \"Awarded\"."
        },
        {
            "sample_id": 6146,
            "gold_sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
            "gold_complexity": 6,
            "vt": "SELECT music_festival.date_of_ceremony, music_festival.result FROM music_festival",
            "ba": "The virtual table describes the dates and results of music festivals from the 'music_festival' table. The query retrieves the date of the ceremony and the outcome of the festival participation.",
            "question": "Return the dates of ceremony and the results of all music festivals"
        },
        {
            "sample_id": 6155,
            "gold_sql": "SELECT Song FROM volume ORDER BY Song",
            "gold_complexity": 6,
            "vt": "SELECT volume.song FROM volume ORDER BY volume.song",
            "ba": "The virtual table lists the songs from the 'volume' table, ordered by the song identifier. This allows users to see all songs in a sequential manner based on their identifiers.",
            "question": "What are the the songs in volumes, listed in ascending order?"
        },
        {
            "sample_id": 6187,
            "gold_sql": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
            "gold_complexity": 7,
            "vt": "SELECT music_festival.date_of_ceremony FROM music_festival WHERE music_festival.category = None.\"best song\" AND music_festival.result = None.\"awarded\"",
            "ba": "The virtual table describes the dates of ceremonies for music festivals where the category is 'best song' and the result is 'awarded'. The placeholders in the WHERE clause represent specific values for the category and result.",
            "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\"."
        },
        {
            "sample_id": 6172,
            "gold_sql": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT artist.famous_release_date FROM artist ORDER BY artist.age LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the release dates of the most recognized songs by artists from the 'artist' table, ordered by the age of the artists. The placeholder in the LIMIT clause allows for specifying the number of results to return.",
            "question": "What is the famous release date of the artist with the oldest age?"
        },
        {
            "sample_id": 6154,
            "gold_sql": "SELECT Song FROM volume ORDER BY Song",
            "gold_complexity": 6,
            "vt": "SELECT volume.song FROM volume ORDER BY volume.song",
            "ba": "The virtual table lists the songs from the 'volume' table, ordered by the song identifier. This allows users to see all songs in a sequential manner based on their identifiers.",
            "question": "Please list all songs in volumes in ascending alphabetical order."
        },
        {
            "sample_id": 6159,
            "gold_sql": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
            "gold_complexity": 7,
            "vt": "SELECT music_festival.date_of_ceremony FROM music_festival JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE volume.weeks_on_top > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the dates of ceremonies from the 'music_festival' table for festivals associated with volumes that have a specified number of weeks on top. The query joins the 'music_festival' and 'volume' tables based on the volume identifier, filtering the results to only include those volumes that have been at the top for more than a certain number of weeks.",
            "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?"
        },
        {
            "sample_id": 6167,
            "gold_sql": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
            "gold_complexity": 7,
            "vt": "SELECT AVG(volume.weeks_on_top) FROM artist JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE artist.age <= [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average number of weeks that songs by artists aged below a certain threshold have stayed at the top of the charts. It joins the 'artist' and 'volume' tables based on the artist's unique identifier, allowing for the aggregation of data related to the performance of their songs.",
            "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old."
        },
        {
            "sample_id": 6143,
            "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
            "gold_complexity": 6,
            "vt": "SELECT artist.famous_title FROM artist WHERE artist.artist = None.\"triumfall\"",
            "ba": "The virtual table describes the most recognized song title of a specific artist from the 'artist' table. The placeholder in the WHERE clause represents the name of the artist being queried.",
            "question": "Return the famous titles of the artist called \"Triumfall\"."
        },
        {
            "sample_id": 6138,
            "gold_sql": "SELECT Age FROM artist",
            "gold_complexity": 4,
            "vt": "SELECT artist.age FROM artist",
            "ba": "The virtual table retrieves the age of artists from the 'artist' table.",
            "question": "List the age of all music artists."
        },
        {
            "sample_id": 6164,
            "gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
            "gold_complexity": 7,
            "vt": "SELECT volume.song FROM artist JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE artist.age >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the song identifiers from the 'volume' table for artists who are of a certain age or older. It joins the 'artist' table to filter based on the age of the artist, using a placeholder for the age value.",
            "question": "What are the songs in volumes associated with the artist aged 32 or older?"
        },
        {
            "sample_id": 6144,
            "gold_sql": "SELECT distinct(Famous_Release_date) FROM artist",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT (artist.famous_release_date) FROM artist",
            "ba": "The virtual table retrieves distinct release dates of the most recognized songs by various artists from the 'artist' table.",
            "question": "What are the distinct Famous release dates?"
        },
        {
            "sample_id": 6165,
            "gold_sql": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
            "gold_complexity": 7,
            "vt": "SELECT volume.song FROM artist JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE artist.age >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the song identifiers from the 'volume' table for artists who are of a certain age or older. It joins the 'artist' table with the 'volume' table based on the artist's unique identifier, ensuring that only songs from qualifying artists are selected.",
            "question": "Return names of songs in volumes that are by artists that are at least 32 years old."
        },
        {
            "sample_id": 6182,
            "gold_sql": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
            "gold_complexity": 10,
            "vt": "SELECT artist.famous_title FROM artist WHERE NOT artist.artist_id IN (SELECT artist.artist_id FROM volume)",
            "ba": "The virtual table describes the most recognized song titles of artists from the 'artist' table who have not been featured in any volume. The subquery identifies artists that have entries in the 'volume' table, and the main query selects the famous titles of those artists who are not in that list.",
            "question": "Find the famous titles of artists that do not have any volume."
        },
        {
            "sample_id": 6178,
            "gold_sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1",
            "gold_complexity": 8,
            "vt": "SELECT music_festival.category FROM music_festival GROUP BY music_festival.category HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the categories of music festivals from the 'music_festival' table, grouping them to count how many festivals fall under each category. The placeholder in the HAVING clause represents the minimum count of festivals required to be included in the results.",
            "question": "Please show the categories of the music festivals with count more than 1."
        }
    ],
    "railway": [
        {
            "sample_id": 5638,
            "gold_sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT railway.builder FROM railway GROUP BY railway.builder ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the builders of railways from the 'railway' table, grouping the results by builder name and ordering them based on the count of railways built by each builder. The placeholder in the LIMIT clause allows for specifying the maximum number of builders to return.",
            "question": "Show the most common builder of railways."
        },
        {
            "sample_id": 5637,
            "gold_sql": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",
            "gold_complexity": 8,
            "vt": "SELECT railway.builder, COUNT(*) FROM railway GROUP BY railway.builder",
            "ba": "The virtual table summarizes the number of railways built by each builder from the 'railway' table. It groups the results by the builder's name and counts the total number of railways associated with each builder.",
            "question": "Show different builders of railways, along with the corresponding number of railways using each builder."
        },
        {
            "sample_id": 5635,
            "gold_sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1",
            "gold_complexity": 11,
            "vt": "SELECT train.railway_id, railway.location FROM railway JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY train.railway_id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of railway IDs and their corresponding locations from the 'railway' table, specifically for railways that have more than a specified number of trains associated with them. The query uses a JOIN operation to connect the 'railway' and 'train' tables based on the railway ID, and it groups the results by railway ID to count the number of trains linked to each railway. The HAVING clause filters the results to include only those railways that have a count of trains greater than a specified numeric value.",
            "question": "Show id and location of railways that are associated with more than one train."
        },
        {
            "sample_id": 5636,
            "gold_sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT train.railway_id, railway.builder FROM railway JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY train.railway_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of railways along with their builders, grouped by the unique railway identifier. It joins the 'railway' and 'train' tables to associate each train with its corresponding railway. The results are ordered by the count of trains associated with each railway, and a limit is applied to restrict the number of records returned based on a specified numeric value.",
            "question": "Show the id and builder of the railway that are associated with the most trains."
        },
        {
            "sample_id": 5625,
            "gold_sql": "SELECT count(*) FROM railway",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM railway",
            "ba": "The virtual table provides a count of all entries in the 'railway' table, which contains information about various railways including their unique identifiers, names, builders, construction years, number of wheels, locations, and object numbers.",
            "question": "How many railways are there?"
        },
        {
            "sample_id": 5631,
            "gold_sql": "SELECT Name ,  Arrival FROM train",
            "gold_complexity": 6,
            "vt": "SELECT train.name, train.arrival FROM train",
            "ba": "The virtual table describes the names and arrival locations of trains from the 'train' table.",
            "question": "What are the names and arrival times of trains?"
        },
        {
            "sample_id": 5643,
            "gold_sql": "SELECT DISTINCT Country FROM manager",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT manager.country FROM manager",
            "ba": "The virtual table lists the distinct countries of managers from the 'manager' table. The query uses the DISTINCT keyword to ensure that each country is only represented once in the results.",
            "question": "Show the distinct countries of managers."
        },
        {
            "sample_id": 5626,
            "gold_sql": "SELECT Builder FROM railway ORDER BY Builder ASC",
            "gold_complexity": 6,
            "vt": "SELECT railway.builder FROM railway ORDER BY railway.builder",
            "ba": "The virtual table lists the builders of railways from the 'railway' table, sorted in alphabetical order by the builder's name.",
            "question": "List the builders of railways in ascending alphabetical order."
        },
        {
            "sample_id": 5627,
            "gold_sql": "SELECT Wheels ,  LOCATION FROM railway",
            "gold_complexity": 6,
            "vt": "SELECT railway.wheels, railway.location FROM railway",
            "ba": "The virtual table describes the number of wheels and geographical location of railways from the 'railway' table.",
            "question": "List the wheels and locations of the railways."
        },
        {
            "sample_id": 5641,
            "gold_sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
            "gold_complexity": 10,
            "vt": "SELECT railway.objectnumber FROM railway WHERE NOT railway.railway_id IN (SELECT railway.railway_id FROM train)",
            "ba": "The virtual table lists the unique object numbers of railways that do not have any associated trains. It filters the 'railway' table to find those railways whose IDs are not present in the 'train' table, indicating that these railways are currently not linked to any trains.",
            "question": "List the object number of railways that do not have any trains."
        },
        {
            "sample_id": 5645,
            "gold_sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
            "gold_complexity": 8,
            "vt": "SELECT manager.country FROM manager WHERE manager.age > [placeholder-type:numeric] OR manager.age < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the countries of managers from the 'manager' table who are either older than a certain age or younger than a certain age. The placeholders in the WHERE clause represent the age limits for filtering the managers.",
            "question": "Show the countries that have managers of age above 50 or below 46."
        },
        {
            "sample_id": 5628,
            "gold_sql": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"",
            "gold_complexity": 6,
            "vt": "SELECT MAX(manager.level) FROM manager WHERE manager.country <> None.\"australia\t\"",
            "ba": "The virtual table retrieves the highest management level from the 'manager' table for managers who are not based in Australia. The placeholder in the WHERE clause indicates that the country should not be Australia.",
            "question": "What is the maximum level of managers in countries that are not \"Australia\"?"
        }
    ],
    "match_season": [
        {
            "sample_id": 1062,
            "gold_sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT match_season.position FROM match_season WHERE match_season.college = None.\"ucla\" OR match_season.college = None.\"duke\"",
            "ba": "The virtual table retrieves distinct player positions from the 'match_season' table for players who attended either UCLA or Duke. The placeholders in the WHERE clause represent the college names.",
            "question": "Show the distinct position of players from college UCLA or Duke."
        },
        {
            "sample_id": 1083,
            "gold_sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
            "gold_complexity": 9,
            "vt": "SELECT match_season.season, match_season.player, team.name FROM match_season JOIN team AS T2 ON T1.Team = T2.Team_id",
            "ba": "The virtual table provides a view of the match seasons along with the players participating in those seasons and their respective team names. It combines data from the 'match_season' table and the 'team' table using a join on the team identifier.",
            "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?"
        },
        {
            "sample_id": 1060,
            "gold_sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
            "gold_complexity": 6,
            "vt": "SELECT match_season.player FROM match_season WHERE match_season.college = None.\"ucla\"",
            "ba": "The virtual table retrieves the names of players from the 'match_season' table who attended a specific college. The placeholder in the WHERE clause represents the college's name.",
            "question": "Show the players from college UCLA."
        },
        {
            "sample_id": 1075,
            "gold_sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
            "gold_complexity": 7,
            "vt": "SELECT match_season.player FROM country JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE country.country_name = None.\"indonesia\"",
            "ba": "The virtual table retrieves the names of players from the 'match_season' table who represent a specific country, in this case, Indonesia. It joins the 'country' table to filter players based on the country they represent.",
            "question": "Who are the players from Indonesia?"
        },
        {
            "sample_id": 1072,
            "gold_sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
            "gold_complexity": 9,
            "vt": "SELECT match_season.season, match_season.player, country.country_name FROM country JOIN match_season AS T2 ON T1.Country_id = T2.Country",
            "ba": "The virtual table describes the seasons and players from the 'match_season' table along with the corresponding country names from the 'country' table. The join operation links the two tables based on the country identifier, allowing us to retrieve the relevant country name for each player in a specific season.",
            "question": "Show the season, the player, and the name of the country that player belongs to."
        },
        {
            "sample_id": 1063,
            "gold_sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT match_season.position FROM match_season WHERE match_season.college = None.\"ucla\" OR match_season.college = None.\"duke\"",
            "ba": "The virtual table retrieves distinct player positions from the 'match_season' table for players who attended either UCLA or Duke. The placeholders in the WHERE clause represent the college names being filtered.",
            "question": "What are the different positions of players from UCLA or Duke colleges?"
        },
        {
            "sample_id": 1095,
            "gold_sql": "SELECT player FROM match_season ORDER BY College ASC",
            "gold_complexity": 6,
            "vt": "SELECT match_season.player FROM match_season ORDER BY match_season.college",
            "ba": "The virtual table lists the names of players from the 'match_season' table, ordered by their college or university attended. This allows for an organized view of players based on their educational background.",
            "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?"
        },
        {
            "sample_id": 1096,
            "gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT match_season.position FROM match_season GROUP BY match_season.position ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique positions of players from the 'match_season' table, grouping them to count how many players occupy each position. The results are ordered by the count of players in each position, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "Show the most common position of players in match seasons."
        },
        {
            "sample_id": 1085,
            "gold_sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
            "gold_complexity": 7,
            "vt": "SELECT match_season.position FROM match_season JOIN team AS T2 ON T1.Team = T2.Team_id WHERE team.name = None.\"ryley goldner\"",
            "ba": "The virtual table retrieves the positions of players from the 'match_season' table who are part of a specific team identified by the team's name. The query joins the 'match_season' table with the 'team' table to filter the results based on the team name provided.",
            "question": "Return the positions of players on the team Ryley Goldner."
        },
        {
            "sample_id": 1070,
            "gold_sql": "SELECT Name FROM Team",
            "gold_complexity": 4,
            "vt": "SELECT team.name FROM team",
            "ba": "The virtual table lists the names of all teams from the 'team' table.",
            "question": "Show all team names."
        },
        {
            "sample_id": 1107,
            "gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
            "ba": "The virtual table identifies countries that have players participating in both the 'Forward' and 'Defender' positions during matches. It does this by joining the 'country' table with the 'match_season' table based on the country identifier, filtering for players in the specified positions, and using an INTERSECT to find common countries.",
            "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position."
        },
        {
            "sample_id": 1102,
            "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
            "gold_complexity": 10,
            "vt": "SELECT match_season.college FROM match_season GROUP BY match_season.college HAVING COUNT(*) >= [placeholder-type:numeric] ORDER BY match_season.college",
            "ba": "The virtual table lists the colleges from which players have participated in matches during a specific season. It groups the results by college and filters to include only those colleges that have produced a specified minimum number of players. The results are ordered alphabetically by college name.",
            "question": "Show the name of colleges that have at least two players in descending alphabetical order."
        },
        {
            "sample_id": 1106,
            "gold_sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
            "gold_complexity": 9,
            "vt": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"",
            "ba": "The virtual table identifies countries that have players participating in both the 'Forward' and 'Defender' positions during matches. It does this by joining the 'country' table with the 'match_season' table based on the country identifier, filtering for players in the specified positions, and using an INTERSECT to find common countries.",
            "question": "What are the names of countries that have both players with position forward and players with position defender?"
        },
        {
            "sample_id": 1067,
            "gold_sql": "SELECT count(DISTINCT Team) FROM match_season",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT Team) FROM match_season",
            "ba": "The virtual table counts the distinct teams from the 'match_season' table, providing insight into the number of unique teams that participated in matches during a specific season.",
            "question": "Count the number of different teams involved in match season."
        },
        {
            "sample_id": 1069,
            "gold_sql": "SELECT Player ,  Years_Played FROM player",
            "gold_complexity": 6,
            "vt": "SELECT player.player, player.years_played FROM player",
            "ba": "The virtual table describes the names and years played of players from the 'player' table.",
            "question": "Who are the different players and how many years has each played?"
        },
        {
            "sample_id": 1094,
            "gold_sql": "SELECT player FROM match_season ORDER BY College ASC",
            "gold_complexity": 6,
            "vt": "SELECT match_season.player FROM match_season ORDER BY match_season.college",
            "ba": "The virtual table lists the names of players from the 'match_season' table, ordered by their college or university attended. This allows for an organized view of players based on their educational background.",
            "question": "Return all players sorted by college in ascending alphabetical order."
        },
        {
            "sample_id": 1071,
            "gold_sql": "SELECT Name FROM Team",
            "gold_complexity": 4,
            "vt": "SELECT team.name FROM team",
            "ba": "The virtual table lists the names of all teams from the 'team' table.",
            "question": "What are the names of all teams?"
        },
        {
            "sample_id": 1086,
            "gold_sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(DISTINCT T1.College) FROM match_season JOIN team AS T2 ON T1.Team = T2.Team_id WHERE team.name = None.\"columbus crew\"",
            "ba": "The virtual table counts the distinct colleges from which players in a specific team have come, specifically focusing on the 'Columbus Crew'. The query joins the 'match_season' table with the 'team' table to filter players based on their team affiliation.",
            "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\"."
        },
        {
            "sample_id": 1092,
            "gold_sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
            "gold_complexity": 9,
            "vt": "SELECT country.country_name, COUNT(*) FROM country JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY country.country_name",
            "ba": "The virtual table summarizes the number of matches played by players from each country by counting the occurrences of each country in the match_season table. It joins the country table with the match_season table on the country identifier to aggregate the data based on country names.",
            "question": "Show the country names and the corresponding number of players."
        },
        {
            "sample_id": 1064,
            "gold_sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
            "gold_complexity": 8,
            "vt": "SELECT match_season.draft_pick_number, match_season.draft_class FROM match_season WHERE match_season.position = None.\"defender\"",
            "ba": "The virtual table provides information about the draft pick number and draft class of players from the 'match_season' table who play in the position of defender. The placeholder in the WHERE clause represents the specific position being queried.",
            "question": "Show the draft pick numbers and draft classes of players whose positions are defenders."
        },
        {
            "sample_id": 1097,
            "gold_sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT match_season.position FROM match_season GROUP BY match_season.position ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique player positions from the 'match_season' table, grouped by position and ordered by the count of occurrences. The placeholder in the LIMIT clause allows for specifying the maximum number of positions to return.",
            "question": "What is the position that is most common among players in match seasons?"
        },
        {
            "sample_id": 1079,
            "gold_sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
            "gold_complexity": 8,
            "vt": "SELECT country.official_native_language FROM country JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE match_season.college = None.\"maryland\" OR match_season.college = None.\"duke\"",
            "ba": "The virtual table retrieves the official native language of countries from the 'country' table, specifically for players who participated in matches during a season where they attended either 'maryland' or 'duke' college. The query uses a JOIN to connect the 'country' and 'match_season' tables based on the country identifier.",
            "question": "Return the official native languages of countries who have players from Maryland or Duke colleges."
        },
        {
            "sample_id": 1082,
            "gold_sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
            "gold_complexity": 9,
            "vt": "SELECT match_season.season, match_season.player, team.name FROM match_season JOIN team AS T2 ON T1.Team = T2.Team_id",
            "ba": "The virtual table provides a view of the match seasons along with the players and their corresponding team names. It combines data from the 'match_season' table and the 'team' table using a join on the team identifier.",
            "question": "Show the season, the player, and the name of the team that players belong to."
        },
        {
            "sample_id": 1077,
            "gold_sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
            "gold_complexity": 8,
            "vt": "SELECT DISTINCT match_season.position FROM country JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE country.capital = None.\"dublin\"",
            "ba": "The virtual table retrieves distinct player positions from the 'match_season' table by joining it with the 'country' table. The join is based on the country identifier, and it filters the results to include only those countries whose capital is a specific value.",
            "question": "Give the different positions of players who play for the country with the capital Dublin."
        },
        {
            "sample_id": 1056,
            "gold_sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
            "gold_complexity": 6,
            "vt": "SELECT country.official_native_language FROM country WHERE country.official_native_language LIKE None.\"%english%\"",
            "ba": "The virtual table retrieves the official native language of countries from the 'country' table where the language includes the term 'english'. The placeholder in the WHERE clause allows for filtering based on the specified language criteria.",
            "question": "Show all official native languages that contain the word \"English\"."
        },
        {
            "sample_id": 1061,
            "gold_sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
            "gold_complexity": 6,
            "vt": "SELECT match_season.player FROM match_season WHERE match_season.college = None.\"ucla\"",
            "ba": "The virtual table retrieves the names of players from the 'match_season' table who attended a specific college. The placeholder in the WHERE clause represents the college's name.",
            "question": "Who are the players from UCLA?"
        },
        {
            "sample_id": 1103,
            "gold_sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
            "gold_complexity": 10,
            "vt": "SELECT match_season.college FROM match_season GROUP BY match_season.college HAVING COUNT(*) >= [placeholder-type:numeric] ORDER BY match_season.college",
            "ba": "The virtual table lists the colleges from which players have participated in matches during a specific season. It groups the results by college and filters to include only those colleges that have produced a specified minimum number of players. The results are then ordered alphabetically by college name.",
            "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?"
        },
        {
            "sample_id": 1073,
            "gold_sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
            "gold_complexity": 9,
            "vt": "SELECT match_season.season, match_season.player, country.country_name FROM country JOIN match_season AS T2 ON T1.Country_id = T2.Country",
            "ba": "The virtual table describes the seasons and players from the 'match_season' table along with the corresponding country names from the 'country' table. The join operation links the two tables based on the country identifier, allowing us to retrieve the relevant country name for each player participating in a match during a specific season.",
            "question": "For each player, what are their name, season, and country that they belong to?"
        },
        {
            "sample_id": 1055,
            "gold_sql": "SELECT Country_name ,  Capital FROM country",
            "gold_complexity": 6,
            "vt": "SELECT country.country_name, country.capital FROM country",
            "ba": "The virtual table describes the names and capitals of countries from the 'country' table.",
            "question": "What are the names and capitals of each country?"
        },
        {
            "sample_id": 1089,
            "gold_sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
            "gold_complexity": 9,
            "vt": "SELECT player.player, player.years_played FROM player JOIN team AS T2 ON T1.Team = T2.Team_id WHERE team.name = None.\"columbus crew\"",
            "ba": "The virtual table describes the names and years played of players from the 'player' table who are part of a specific team. The query joins the 'player' table with the 'team' table to filter players based on the team's name, represented by a placeholder.",
            "question": "What are the players who played for Columbus Crew, and how many years did each play for?"
        },
        {
            "sample_id": 1052,
            "gold_sql": "SELECT count(*) FROM country",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM country",
            "ba": "The virtual table provides a count of all countries listed in the 'country' table. This count represents the total number of unique countries available in the database.",
            "question": "How many countries are there in total?"
        },
        {
            "sample_id": 1074,
            "gold_sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
            "gold_complexity": 7,
            "vt": "SELECT match_season.player FROM country JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE country.country_name = None.\"indonesia\"",
            "ba": "The virtual table retrieves the names of players from the 'match_season' table who represent a specific country, in this case, Indonesia. It joins the 'country' table to filter players based on the country they represent.",
            "question": "Which players are from Indonesia?"
        },
        {
            "sample_id": 1088,
            "gold_sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
            "gold_complexity": 9,
            "vt": "SELECT player.player, player.years_played FROM player JOIN team AS T2 ON T1.Team = T2.Team_id WHERE team.name = None.\"columbus crew\"",
            "ba": "The virtual table describes the names and years played of players from the 'player' table who are part of a specific team. The query joins the 'player' table with the 'team' table to filter players based on the team's name, represented by a placeholder.",
            "question": "Show the players and years played for players from team \"Columbus Crew\"."
        },
        {
            "sample_id": 1099,
            "gold_sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
            "gold_complexity": 9,
            "vt": "SELECT match_season.college FROM match_season GROUP BY match_season.college ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of colleges from the 'match_season' table, grouping the results by college name. It orders the colleges based on the number of matches associated with each college and limits the output to a specified number of colleges.",
            "question": "What are the three colleges from which the most players are from?"
        }
    ],
    "allergy_1": [
        {
            "sample_id": 522,
            "gold_sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy",
            "gold_complexity": 12,
            "vt": "SELECT allergy_type.allergy, allergy_type.allergytype FROM allergy_type JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE student.fname = None.\"lisa\" ORDER BY allergy_type.allergy",
            "ba": "The virtual table describes the allergies and their types for students named 'lisa'. It retrieves data from the 'allergy_type' table, which contains the names and categories of allergies, and joins it with the 'has_allergy' table to link students with their respective allergies. Additionally, it joins the 'student' table to filter the results specifically for students with the first name 'lisa'. The results are ordered by the allergy name.",
            "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names."
        },
        {
            "sample_id": 520,
            "gold_sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
            "gold_complexity": 16,
            "vt": "SELECT student.lname, student.age FROM student WHERE has_allergy.stuid IN (SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"milk\" INTERSECT SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"cat\")",
            "ba": "The virtual table describes the last names and ages of students from the 'student' table who have allergies to both milk and cats. The query uses a subquery to find students with a specific allergy and combines the results using an INTERSECT operation to ensure that only students with both allergies are selected.",
            "question": "What are the last names and ages of the students who are allergic to milk and cat?"
        },
        {
            "sample_id": 459,
            "gold_sql": "SELECT count(*) FROM Student",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM student",
            "ba": "The virtual table counts the total number of students in the 'student' table.",
            "question": "How many students are there?"
        },
        {
            "sample_id": 444,
            "gold_sql": "SELECT DISTINCT allergytype FROM Allergy_type",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT allergy_type.allergytype FROM allergy_type",
            "ba": "The virtual table lists the distinct types or categories of allergies from the 'allergy_type' table.",
            "question": "What are the different allergy types?"
        },
        {
            "sample_id": 488,
            "gold_sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
            "gold_complexity": 9,
            "vt": "SELECT student.stuid FROM student WHERE student.age = (SELECT MAX(student.age) FROM Student)",
            "ba": "The virtual table retrieves the unique identifier of the student who is the oldest in the 'student' table. It uses a subquery to find the maximum age among all students.",
            "question": "What student id corresponds to the oldest student?"
        },
        {
            "sample_id": 510,
            "gold_sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM has_allergy JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE student.sex = None.\"f\" AND has_allergy.allergy = None.\"milk\" OR has_allergy.allergy = None.\"eggs\"",
            "ba": "The virtual table counts the number of female students who have specific allergies (milk or eggs) by joining the 'has_allergy' table with the 'student' table.",
            "question": "How many students who are female are allergic to milk or eggs?"
        },
        {
            "sample_id": 493,
            "gold_sql": "SELECT age ,  count(*) FROM Student GROUP BY age",
            "gold_complexity": 8,
            "vt": "SELECT student.age, COUNT(*) FROM student GROUP BY student.age",
            "ba": "The virtual table summarizes the ages of students from the 'student' table, providing a count of how many students fall into each age category. The query groups the results by the 'age' column, allowing for an aggregated view of student demographics based on age.",
            "question": "Show all ages and corresponding number of students."
        },
        {
            "sample_id": 525,
            "gold_sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
            "gold_complexity": 15,
            "vt": "SELECT AVG(student.age) FROM student WHERE has_allergy.stuid IN (SELECT has_allergy.stuid FROM has_allergy JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE allergy_type.allergytype = None.\"food\" INTERSECT SELECT has_allergy.stuid FROM has_allergy JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE allergy_type.allergytype = None.\"animal\")",
            "ba": "The virtual table calculates the average age of students who have both food and animal allergies. It does this by first identifying students with food allergies and then intersecting that list with students who have animal allergies, ensuring that only those students who have both types of allergies are considered in the average age calculation.",
            "question": "Find the average age of the students who have allergies with food and animal types."
        },
        {
            "sample_id": 453,
            "gold_sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
            "gold_complexity": 8,
            "vt": "SELECT allergy_type.allergytype, COUNT(*) FROM allergy_type GROUP BY allergy_type.allergytype",
            "ba": "The virtual table summarizes the count of students for each type of allergy from the 'allergy_type' table. The query groups the results by the allergy type, allowing us to see how many students have each specific type of allergy.",
            "question": "Show all allergy types and the number of allergies in each type."
        },
        {
            "sample_id": 506,
            "gold_sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT has_allergy.stuid FROM has_allergy GROUP BY has_allergy.stuid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table identifies students who have multiple allergies by selecting their unique identifiers from the 'has_allergy' table. It groups the results by student ID and filters those groups to include only those with a count of allergies greater than or equal to a specified number.",
            "question": "What are the students ids of students who have more than one allergy?"
        },
        {
            "sample_id": 498,
            "gold_sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
            "gold_complexity": 8,
            "vt": "SELECT student.city_code, COUNT(*) FROM student GROUP BY student.city_code",
            "ba": "The virtual table summarizes the number of students residing in each city by grouping them based on their city code from the 'student' table.",
            "question": "How many students live in each city?"
        },
        {
            "sample_id": 491,
            "gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student.major FROM student GROUP BY student.major ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic majors from the 'student' table, grouped by the major and ordered by the count of students in each major. The placeholder in the LIMIT clause allows for specifying the maximum number of majors to return.",
            "question": "Which major has most number of students?"
        },
        {
            "sample_id": 524,
            "gold_sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.sex FROM student WHERE has_allergy.stuid IN (SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"milk\" EXCEPT SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"cat\")",
            "ba": "The virtual table describes the first names and genders of students from the 'student' table who have a specific allergy to milk but do not have an allergy to cats. The query uses a subquery to filter students based on their allergies, ensuring that only those with the specified conditions are selected.",
            "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?"
        },
        {
            "sample_id": 511,
            "gold_sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM has_allergy JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE allergy_type.allergytype = None.\"food\"",
            "ba": "The virtual table counts the number of students who have a specific type of allergy, in this case, food allergies. It joins the 'has_allergy' table with the 'allergy_type' table to filter the allergies based on their type.",
            "question": "How many students have a food allergy?"
        },
        {
            "sample_id": 463,
            "gold_sql": "SELECT count(DISTINCT advisor) FROM Student",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT advisor) FROM student",
            "ba": "The virtual table counts the distinct academic advisors from the 'student' table.",
            "question": "How many different advisors are listed?"
        },
        {
            "sample_id": 449,
            "gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
            "gold_complexity": 6,
            "vt": "SELECT allergy_type.allergytype FROM allergy_type WHERE allergy_type.allergy = None.\"cat\"",
            "ba": "The virtual table describes the type or category of allergies from the 'allergy_type' table for a specific allergy name. The placeholder in the WHERE clause represents the name of the allergy being queried.",
            "question": "What is the type of allergy Cat?"
        },
        {
            "sample_id": 484,
            "gold_sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
            "gold_complexity": 6,
            "vt": "SELECT MIN(student.age), AVG(student.age), MAX(student.age) FROM student",
            "ba": "The virtual table provides the minimum, average, and maximum ages of students from the 'student' table.",
            "question": "What is the minimum, mean, and maximum age across all students?"
        },
        {
            "sample_id": 528,
            "gold_sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
            "gold_complexity": 15,
            "vt": "SELECT student.fname, student.lname FROM student WHERE NOT has_allergy.stuid IN (SELECT has_allergy.stuid FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who do not have any food allergies. The query uses a subquery to filter out students based on their allergies by checking against the 'has_allergy' and 'allergy_type' tables.",
            "question": "What is the full name of each student who is not allergic to any type of food."
        },
        {
            "sample_id": 445,
            "gold_sql": "SELECT allergy ,  allergytype FROM Allergy_type",
            "gold_complexity": 6,
            "vt": "SELECT allergy_type.allergy, allergy_type.allergytype FROM allergy_type",
            "ba": "The virtual table describes the allergies and their types from the 'allergy_type' table. It provides a list of allergies along with their corresponding categories.",
            "question": "Show all allergies and their types."
        },
        {
            "sample_id": 447,
            "gold_sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT allergy_type.allergy FROM allergy_type WHERE allergy_type.allergytype = None.\"food\"",
            "ba": "The virtual table lists distinct allergies from the 'allergy_type' table that fall under the category of food allergies. The placeholder in the WHERE clause indicates the specific allergy type being queried.",
            "question": "Show all allergies with type food."
        },
        {
            "sample_id": 468,
            "gold_sql": "SELECT DISTINCT city_code FROM Student",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT student.city_code FROM student",
            "ba": "The virtual table retrieves distinct city codes from the 'student' table, which represents the unique locations where students reside.",
            "question": "What cities do students live in?"
        },
        {
            "sample_id": 476,
            "gold_sql": "SELECT StuID FROM Student WHERE age  >  20",
            "gold_complexity": 6,
            "vt": "SELECT student.stuid FROM student WHERE student.age > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of students from the 'student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.",
            "question": "What are the student ids for students over 20 years old?"
        },
        {
            "sample_id": 480,
            "gold_sql": "SELECT Advisor FROM Student WHERE StuID  =  1004",
            "gold_complexity": 6,
            "vt": "SELECT student.advisor FROM student WHERE student.stuid = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the academic advisor's name for a specific student identified by their unique student ID from the 'student' table.",
            "question": "Who advises student 1004?"
        },
        {
            "sample_id": 446,
            "gold_sql": "SELECT allergy ,  allergytype FROM Allergy_type",
            "gold_complexity": 6,
            "vt": "SELECT allergy_type.allergy, allergy_type.allergytype FROM allergy_type",
            "ba": "The virtual table provides a list of allergies along with their corresponding types from the 'allergy_type' table.",
            "question": "What are the allergies and their types?"
        },
        {
            "sample_id": 455,
            "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT allergy_type.allergytype FROM allergy_type GROUP BY allergy_type.allergytype ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of distinct allergy types from the 'allergy_type' table, grouped by their category. It orders the results based on the count of occurrences for each allergy type and limits the output to a specified number of results.",
            "question": "Which allergy type has most number of allergies?"
        },
        {
            "sample_id": 508,
            "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
            "gold_complexity": 6,
            "vt": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
            "ba": "The virtual table identifies students who do not have any allergies by selecting their unique identifiers from the 'student' table and excluding those who are listed in the 'has_allergy' table.",
            "question": "Which students are unaffected by allergies?"
        },
        {
            "sample_id": 478,
            "gold_sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
            "gold_complexity": 6,
            "vt": "SELECT student.city_code FROM student WHERE student.lname = None.\"kim\"",
            "ba": "The virtual table retrieves the city code of students from the 'student' table based on their last name. The placeholder in the WHERE clause represents the last name of the student being queried.",
            "question": "Give the city that the student whose family name is Kim lives in."
        },
        {
            "sample_id": 456,
            "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT allergy_type.allergytype FROM allergy_type GROUP BY allergy_type.allergytype ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct allergy types from the 'allergy_type' table, grouping them to count occurrences and ordering them based on the frequency of each type. The placeholder allows for limiting the number of results returned based on a specified numeric value.",
            "question": "Which allergy type is most common?"
        },
        {
            "sample_id": 503,
            "gold_sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM has_allergy WHERE has_allergy.allergy = None.\"cat\"",
            "ba": "The virtual table counts the number of students who have a specific allergy from the 'has_allergy' table. The placeholder in the WHERE clause represents the name of the allergy being queried.",
            "question": "How many students have cat allergies?"
        },
        {
            "sample_id": 474,
            "gold_sql": "SELECT count(*) FROM Student WHERE age  =  18",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM student WHERE student.age = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of students from the 'student' table who are of a specific age. The placeholder in the WHERE clause represents the age of the students being queried.",
            "question": "How many students are 18 years old?"
        },
        {
            "sample_id": 492,
            "gold_sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student.major FROM student GROUP BY student.major ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of academic majors from the 'student' table, grouped by the major and ordered by the count of students in each major. The placeholder in the LIMIT clause allows for specifying the maximum number of majors to return.",
            "question": "What is the largest major?"
        },
        {
            "sample_id": 452,
            "gold_sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM allergy_type WHERE allergy_type.allergytype = None.\"animal\"",
            "ba": "The virtual table counts the number of allergies from the 'allergy_type' table that belong to a specific category, which is represented by a placeholder for the allergy type.",
            "question": "How many animal type allergies exist?"
        },
        {
            "sample_id": 469,
            "gold_sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
            "gold_complexity": 10,
            "vt": "SELECT student.fname, student.lname, student.age FROM student WHERE student.sex = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first name, last name, and age of students from the 'student' table who belong to a specific gender. The placeholder in the WHERE clause represents the gender of the students.",
            "question": "Show first name, last name, age for all female students. Their sex is F."
        },
        {
            "sample_id": 479,
            "gold_sql": "SELECT Advisor FROM Student WHERE StuID  =  1004",
            "gold_complexity": 6,
            "vt": "SELECT student.advisor FROM student WHERE student.stuid = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the academic advisor's name for a specific student from the 'student' table based on the student's unique identifier.",
            "question": "Who is the advisor of student with ID 1004?"
        },
        {
            "sample_id": 451,
            "gold_sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM allergy_type WHERE allergy_type.allergytype = None.\"animal\"",
            "ba": "The virtual table counts the number of allergies from the 'allergy_type' table that belong to a specific type, in this case, 'animal'. The placeholder in the WHERE clause represents the allergy type being queried.",
            "question": "How many allergies have type animal?"
        },
        {
            "sample_id": 518,
            "gold_sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
            "gold_complexity": 9,
            "vt": "SELECT allergy_type.allergytype, COUNT(*) FROM has_allergy JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY allergy_type.allergytype",
            "ba": "The virtual table summarizes the count of students for each type of allergy by joining the 'has_allergy' table with the 'allergy_type' table. It groups the results by the allergy type, providing a clear overview of how many students have each category of allergy.",
            "question": "How many students are affected by each allergy type?"
        },
        {
            "sample_id": 504,
            "gold_sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM has_allergy WHERE has_allergy.allergy = None.\"cat\"",
            "ba": "The virtual table counts the number of students who have a specific allergy from the 'has_allergy' table. The placeholder in the WHERE clause represents the name of the allergy being queried.",
            "question": "How many students are affected by cat allergies?"
        },
        {
            "sample_id": 482,
            "gold_sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM student WHERE student.city_code = None.\"hkg\" OR student.city_code = None.\"chi\"",
            "ba": "The virtual table counts the number of students from the 'student' table who reside in specific cities identified by their city codes. The placeholders in the WHERE clause represent the city codes for which the count is being calculated.",
            "question": "Give the number of students living in either HKG or CHI."
        },
        {
            "sample_id": 523,
            "gold_sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.sex FROM student WHERE has_allergy.stuid IN (SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"milk\" EXCEPT SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"cat\")",
            "ba": "The virtual table describes the first names and genders of students from the 'student' table who have a specific allergy to milk but do not have an allergy to cats. The query uses a subquery to filter students based on their allergies, ensuring that only those with the specified conditions are selected.",
            "question": "Find the first name and gender of the student who has allergy to milk but not cat."
        },
        {
            "sample_id": 441,
            "gold_sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT allergytype) FROM allergy_type",
            "ba": "The virtual table counts the distinct types of allergies from the 'allergy_type' table.",
            "question": "How many different allergy types exist?"
        },
        {
            "sample_id": 515,
            "gold_sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
            "gold_complexity": 8,
            "vt": "SELECT has_allergy.allergy, COUNT(*) FROM has_allergy GROUP BY has_allergy.allergy",
            "ba": "The virtual table summarizes the count of students for each type of allergy recorded in the 'has_allergy' table. It groups the results by the allergy name, allowing us to see how many students have each specific allergy.",
            "question": "Show all allergies with number of students affected."
        },
        {
            "sample_id": 475,
            "gold_sql": "SELECT StuID FROM Student WHERE age  >  20",
            "gold_complexity": 6,
            "vt": "SELECT student.stuid FROM student WHERE student.age > [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of students from the 'student' table who are older than a specified age. The placeholder in the WHERE clause represents the age limit.",
            "question": "Show all student ids who are older than 20."
        },
        {
            "sample_id": 481,
            "gold_sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM student WHERE student.city_code = None.\"hkg\" OR student.city_code = None.\"chi\"",
            "ba": "The virtual table counts the number of students from the 'student' table who reside in specific cities identified by their city codes. The placeholders in the WHERE clause represent the city codes for which the count is being calculated.",
            "question": "How many students live in HKG or CHI?"
        },
        {
            "sample_id": 497,
            "gold_sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
            "gold_complexity": 8,
            "vt": "SELECT student.city_code, COUNT(*) FROM student GROUP BY student.city_code",
            "ba": "The virtual table summarizes the number of students residing in each city by grouping them based on their city codes. The placeholder in the COUNT function represents the count of students for each unique city code.",
            "question": "Show all cities and corresponding number of students."
        },
        {
            "sample_id": 509,
            "gold_sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM has_allergy JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE student.sex = None.\"f\" AND has_allergy.allergy = None.\"milk\" OR has_allergy.allergy = None.\"eggs\"",
            "ba": "The virtual table counts the number of female students who have specific allergies (milk or eggs) by joining the 'has_allergy' table with the 'student' table.",
            "question": "How many female students have milk or egg allergies?"
        },
        {
            "sample_id": 473,
            "gold_sql": "SELECT count(*) FROM Student WHERE age  =  18",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM student WHERE student.age = [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of students from the 'student' table who are of a specific age. The placeholder in the WHERE clause represents the age of the students being queried.",
            "question": "How many students are age 18?"
        },
        {
            "sample_id": 450,
            "gold_sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"",
            "gold_complexity": 6,
            "vt": "SELECT allergy_type.allergytype FROM allergy_type WHERE allergy_type.allergy = None.\"cat\"",
            "ba": "The virtual table describes the type or category of a specific allergy from the 'allergy_type' table. The placeholder in the WHERE clause represents the name of the allergy being queried.",
            "question": "What is allergy type of a cat allergy?"
        },
        {
            "sample_id": 529,
            "gold_sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
            "gold_complexity": 14,
            "vt": "SELECT COUNT(*) FROM student WHERE student.sex = None.\"m\" AND has_allergy.stuid IN (SELECT has_allergy.stuid FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
            "ba": "The virtual table counts the number of male students from the 'student' table who have a specific type of allergy categorized as 'food'. It uses a subquery to find students with food allergies by joining the 'has_allergy' and 'allergy_type' tables based on the allergy name.",
            "question": "Find the number of male (sex is 'M') students who have some food type allery."
        },
        {
            "sample_id": 458,
            "gold_sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT allergy_type.allergytype FROM allergy_type GROUP BY allergy_type.allergytype ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of distinct allergy types from the 'allergy_type' table, grouped by their category. It orders the results based on the count of occurrences for each allergy type and limits the output to a specified number of results.",
            "question": "Which allergy type is the least common?"
        },
        {
            "sample_id": 465,
            "gold_sql": "SELECT DISTINCT Major FROM Student",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT student.major FROM student",
            "ba": "The virtual table lists the distinct academic majors of students from the 'student' table.",
            "question": "Show all majors."
        },
        {
            "sample_id": 532,
            "gold_sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
            "gold_complexity": 11,
            "vt": "SELECT DISTINCT student.fname, student.city_code FROM student JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE has_allergy.allergy = None.\"milk\" OR has_allergy.allergy = None.\"cat\"",
            "ba": "The virtual table describes the first names and city codes of students from the 'student' table who have specific allergies. The query joins the 'student' table with the 'has_allergy' table to filter students based on their allergies to either milk or cats. The placeholders in the WHERE clause represent the allergy names.",
            "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?"
        },
        {
            "sample_id": 466,
            "gold_sql": "SELECT DISTINCT Major FROM Student",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT student.major FROM student",
            "ba": "The virtual table lists the distinct academic majors of students from the 'student' table.",
            "question": "What are the different majors?"
        },
        {
            "sample_id": 487,
            "gold_sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
            "gold_complexity": 9,
            "vt": "SELECT student.stuid FROM student WHERE student.age = (SELECT MAX(student.age) FROM Student)",
            "ba": "The virtual table retrieves the unique identifier of the student who is the oldest in the 'student' table. It uses a subquery to find the maximum age among all students, ensuring that only the student with the highest age is selected.",
            "question": "Show the student id of the oldest student."
        },
        {
            "sample_id": 440,
            "gold_sql": "SELECT count(DISTINCT allergy) FROM Allergy_type",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT allergy) FROM allergy_type",
            "ba": "The virtual table counts the distinct types of allergies from the 'allergy_type' table.",
            "question": "How many allergy entries are there?"
        },
        {
            "sample_id": 519,
            "gold_sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
            "gold_complexity": 16,
            "vt": "SELECT student.lname, student.age FROM student WHERE has_allergy.stuid IN (SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"milk\" INTERSECT SELECT has_allergy.stuid FROM has_allergy WHERE has_allergy.allergy = None.\"cat\")",
            "ba": "The virtual table describes the last names and ages of students from the 'student' table who have allergies to both milk and cats. The query uses a subquery to find students with a specific allergy and combines the results using an INTERSECT operation to ensure that only students with both allergies are selected.",
            "question": "Find the last name and age of the student who has allergy to both milk and cat."
        },
        {
            "sample_id": 462,
            "gold_sql": "SELECT Fname ,  Lname FROM Student",
            "gold_complexity": 6,
            "vt": "SELECT student.fname, student.lname FROM student",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who have specific allergies. The query will join the 'student' table with the 'has_allergy' table to filter students based on their allergies.",
            "question": "What are the full names of all students"
        },
        {
            "sample_id": 512,
            "gold_sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM has_allergy JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE allergy_type.allergytype = None.\"food\"",
            "ba": "The virtual table counts the number of students who have a specific type of allergy, in this case, food allergies. It joins the 'has_allergy' table with the 'allergy_type' table to filter the allergies based on their type.",
            "question": "How many students are affected by food related allergies?"
        },
        {
            "sample_id": 442,
            "gold_sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT allergytype) FROM allergy_type",
            "ba": "The virtual table counts the distinct types of allergies from the 'allergy_type' table.",
            "question": "How many distinct allergies are there?"
        }
    ],
    "candidate_poll": [
        {
            "sample_id": 2410,
            "gold_sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
            "gold_complexity": 11,
            "vt": "SELECT people.name, people.sex, MIN(candidate.oppose_rate) FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY people.sex",
            "ba": "The virtual table provides the names and genders of individuals from the 'people' table, along with the minimum opposition rate from the 'candidate' table for each gender. The data is aggregated by gender, allowing for a comparison of the lowest opposition rates faced by candidates grouped by their supporters' gender.",
            "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?"
        },
        {
            "sample_id": 2403,
            "gold_sql": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
            "gold_complexity": 8,
            "vt": "SELECT people.name FROM people WHERE people.height > [placeholder-type:numeric] OR people.height < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of individuals from the 'people' table based on their height being either greater than or less than specified numeric values. The placeholders represent the height thresholds for filtering the results.",
            "question": "find the names of people who are taller than 200 or lower than 190."
        },
        {
            "sample_id": 2421,
            "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
            "gold_complexity": 9,
            "vt": "SELECT people.name FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE people.sex = '[placeholder-type:string]' ORDER BY people.name",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are linked to candidates in the 'candidate' table, filtered by gender. The placeholder in the WHERE clause represents the gender of the individuals.",
            "question": "list all female (sex is F) candidate names in the alphabetical order."
        },
        {
            "sample_id": 2391,
            "gold_sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
            "gold_complexity": 7,
            "vt": "SELECT candidate.support_rate FROM candidate ORDER BY candidate.support_rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the support rates of candidates from the 'candidate' table, ordered by the support rate in ascending order, and limits the results to a specified number of entries.",
            "question": "what are the top 3 highest support rates?"
        },
        {
            "sample_id": 2405,
            "gold_sql": "SELECT avg(weight) ,  min(weight) ,  sex FROM people GROUP BY sex",
            "gold_complexity": 9,
            "vt": "SELECT AVG(people.weight), MIN(people.weight), people.sex FROM people GROUP BY people.sex",
            "ba": "The virtual table calculates the average and minimum weight of individuals from the 'people' table, grouped by their gender. The placeholder in the SELECT clause represents the weight values, while the grouping is done based on the gender of the individuals.",
            "question": "Find the average and minimum weight for each gender."
        },
        {
            "sample_id": 2422,
            "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
            "gold_complexity": 9,
            "vt": "SELECT people.name FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE people.sex = '[placeholder-type:string]' ORDER BY people.name",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are of a specific gender. It joins the 'people' table with the 'candidate' table based on the 'people_id' to filter candidates by their gender. The placeholder in the WHERE clause represents the gender of the individuals being queried.",
            "question": "What are the names of all female candidates in alphabetical order (sex is F)?"
        },
        {
            "sample_id": 2420,
            "gold_sql": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
            "gold_complexity": 8,
            "vt": "SELECT MAX(candidate.support_rate), MIN(candidate.consider_rate), MIN(candidate.oppose_rate) FROM candidate",
            "ba": "The virtual table provides the maximum support rate, minimum consideration rate, and minimum opposition rate of candidates from the 'candidate' table. The query aggregates data to give insights into the candidates' support and opposition levels.",
            "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?"
        },
        {
            "sample_id": 2417,
            "gold_sql": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), people.sex FROM people WHERE people.weight > [placeholder-type:numeric] GROUP BY people.sex",
            "ba": "The virtual table provides a count of individuals grouped by their gender from the 'people' table, specifically for those whose weight exceeds a certain threshold. The placeholder in the WHERE clause represents the weight limit that is being applied to filter the results.",
            "question": "how many people are there whose weight is higher than 85 for each gender?"
        },
        {
            "sample_id": 2411,
            "gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT people.sex FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY people.sex ORDER BY AVG(candidate.unsure_rate) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the average unsure rate of candidates grouped by their gender. It retrieves the gender information from the 'people' table and joins it with the 'candidate' table based on the people_id. The results are ordered by the average unsure rate, allowing for a limit on the number of records returned.",
            "question": "which gender got the highest average uncertain ratio."
        },
        {
            "sample_id": 2416,
            "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE candidate.support_rate < candidate.oppose_rate",
            "ba": "The virtual table describes the names of people from the 'people' table who are linked to candidates in the 'candidate' table where the support rate for the candidate is less than the oppose rate. This indicates that more respondents oppose the candidate than support them.",
            "question": "What are the names of candidates who have a lower support rate than oppose rate?"
        },
        {
            "sample_id": 2401,
            "gold_sql": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
            "gold_complexity": 8,
            "vt": "SELECT AVG(people.height), AVG(people.weight) FROM people WHERE people.sex = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average height and weight of individuals from the 'people' table, filtered by their gender. The placeholder in the WHERE clause represents the gender of the individuals being queried.",
            "question": "Find the average height and weight for all males (sex is M)."
        },
        {
            "sample_id": 2396,
            "gold_sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
            "gold_complexity": 10,
            "vt": "SELECT candidate.support_rate, candidate.consider_rate, candidate.oppose_rate FROM candidate ORDER BY candidate.unsure_rate",
            "ba": "The virtual table presents the support, consideration, and opposition rates of candidates from the 'candidate' table, ordered by the rate of respondents who are unsure about each candidate.",
            "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?"
        },
        {
            "sample_id": 2393,
            "gold_sql": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT candidate.candidate_id FROM candidate ORDER BY candidate.oppose_rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of candidates from the 'candidate' table, sorted by their opposing support rates. The placeholder in the LIMIT clause allows for specifying the maximum number of candidates to return.",
            "question": "Find the id of the candidate who got the lowest oppose rate."
        },
        {
            "sample_id": 2414,
            "gold_sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
            "gold_complexity": 10,
            "vt": "SELECT people.name FROM people WHERE NOT candidate.people_id IN (SELECT candidate.people_id FROM candidate)",
            "ba": "The virtual table lists the names of individuals from the 'people' table who are not associated with any candidate in the 'candidate' table. This is determined by checking that their 'people_id' does not appear in the 'candidate' table.",
            "question": "Give the names of people who did not participate in the candidate election."
        },
        {
            "sample_id": 2413,
            "gold_sql": "SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate)",
            "gold_complexity": 10,
            "vt": "SELECT people.name FROM people WHERE NOT candidate.people_id IN (SELECT candidate.people_id FROM candidate)",
            "ba": "The virtual table lists the names of individuals from the 'people' table who are not associated with any candidate in the 'candidate' table. This is determined by checking that their 'people_id' does not appear in the 'candidate' table.",
            "question": "what are the names of people who did not participate in the candidate election."
        },
        {
            "sample_id": 2389,
            "gold_sql": "SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT candidate.poll_source FROM candidate GROUP BY candidate.poll_source ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique poll sources from the 'candidate' table, grouped by the poll source and ordered by the count of occurrences. The placeholder in the LIMIT clause allows for specifying the maximum number of poll sources to return.",
            "question": "Which poll resource provided the most number of candidate information?"
        },
        {
            "sample_id": 2397,
            "gold_sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT candidate.poll_source FROM candidate ORDER BY candidate.oppose_rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the poll sources from the 'candidate' table, ordered by the rate of opposition to each candidate. The placeholder in the LIMIT clause allows for specifying the maximum number of poll sources to return.",
            "question": "which poll source does the highest oppose rate come from?"
        },
        {
            "sample_id": 2412,
            "gold_sql": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT people.sex FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY people.sex ORDER BY AVG(candidate.unsure_rate) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the average unsure rate of candidates grouped by their gender. It retrieves the gender information from the 'people' table and joins it with the 'candidate' table based on the people_id. The results are ordered by the average unsure rate, allowing for a limit on the number of results returned.",
            "question": "What is the sex of the candidate who had the highest unsure rate?"
        },
        {
            "sample_id": 2407,
            "gold_sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT people.name, people.sex FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY candidate.support_rate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names and genders of individuals from the 'people' table who are linked to their respective candidates in the 'candidate' table. The results are ordered by the support rate of the candidates, and a placeholder is used to limit the number of results returned.",
            "question": "Find the name and gender of the candidate who got the highest support rate."
        },
        {
            "sample_id": 2424,
            "gold_sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
            "gold_complexity": 9,
            "vt": "SELECT people.name FROM people WHERE people.height < (SELECT AVG(people.height) FROM people)",
            "ba": "The virtual table retrieves the names of individuals from the 'people' table who are shorter than the average height of all individuals in the same table. The query uses a subquery to calculate the average height, and the main query filters the results based on this average height.",
            "question": "What are the names of people who are shorter than average?"
        },
        {
            "sample_id": 2395,
            "gold_sql": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
            "gold_complexity": 10,
            "vt": "SELECT candidate.support_rate, candidate.consider_rate, candidate.oppose_rate FROM candidate ORDER BY candidate.unsure_rate",
            "ba": "The virtual table presents the support, consideration, and opposition rates of candidates from the 'candidate' table, ordered by the rate of respondents who are unsure about each candidate.",
            "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate."
        },
        {
            "sample_id": 2415,
            "gold_sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
            "gold_complexity": 7,
            "vt": "SELECT people.name FROM people JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE candidate.support_rate < candidate.oppose_rate",
            "ba": "The virtual table describes the names of individuals from the 'people' table who are linked to candidates in the 'candidate' table where the support rate for the candidate is less than the oppose rate. This indicates that more respondents oppose the candidate than support them.",
            "question": "Find the names of the candidates whose support percentage is lower than their oppose rate."
        },
        {
            "sample_id": 2399,
            "gold_sql": "SELECT name FROM people ORDER BY date_of_birth",
            "gold_complexity": 6,
            "vt": "SELECT people.name FROM people ORDER BY people.date_of_birth",
            "ba": "The virtual table lists the names of individuals from the 'people' table, sorted by their date of birth.",
            "question": "List all people names in the order of their date of birth from old to young."
        },
        {
            "sample_id": 2423,
            "gold_sql": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
            "gold_complexity": 9,
            "vt": "SELECT people.name FROM people WHERE people.height < (SELECT AVG(people.height) FROM people)",
            "ba": "The virtual table retrieves the names of individuals from the 'people' table who are shorter than the average height of all individuals in the same table. The query uses a subquery to calculate the average height, and the placeholder indicates that this average is dynamically determined based on the current data.",
            "question": "find the name of people whose height is lower than the average."
        }
    ],
    "dorm_1": [
        {
            "sample_id": 5693,
            "gold_sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT major), COUNT(DISTINCT city_code) FROM student",
            "ba": "The virtual table provides a count of distinct majors and distinct city codes from the 'student' table. The placeholders represent the aggregated counts of unique fields related to students' academic disciplines and their residential locations.",
            "question": "Find the numbers of different majors and cities."
        },
        {
            "sample_id": 5732,
            "gold_sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), dorm.dormid FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE dorm.student_capacity > [placeholder-type:numeric] GROUP BY dorm.dormid",
            "ba": "The virtual table provides a count of students residing in dormitories that have specific amenities, filtered by dormitories with a student capacity greater than a specified number. The query joins the 'dorm' table with the 'has_amenity' table to ensure that only those dormitories with amenities are considered, and groups the results by dormitory ID to aggregate the count of students.",
            "question": "For each dorm, how many amenities does it have?"
        },
        {
            "sample_id": 5661,
            "gold_sql": "SELECT dorm_name FROM dorm WHERE gender  =  'F'",
            "gold_complexity": 6,
            "vt": "SELECT dorm.dorm_name FROM dorm WHERE dorm.gender = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of dormitories from the 'dorm' table that are designated for a specific gender. The placeholder in the WHERE clause represents the gender designation for the dormitory.",
            "question": "Find the name of dorms only for female (F gender)."
        },
        {
            "sample_id": 5716,
            "gold_sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
            "gold_complexity": 9,
            "vt": "SELECT AVG(student.age), MAX(student.age), student.sex FROM student GROUP BY student.sex",
            "ba": "The virtual table calculates the average and maximum age of students from the 'student' table, grouped by their gender. The placeholders represent the aggregated values for age and the gender of the students.",
            "question": "What is the average and oldest age for each gender of student?"
        },
        {
            "sample_id": 5758,
            "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.age FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE NOT lives_in.dormid IN (SELECT has_amenity.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
            "ba": "The virtual table describes the first names and ages of students from the 'student' table who do not live in dormitories that have a specific amenity, in this case, a 'TV Lounge'. The query uses a JOIN to connect the 'student' table with the 'lives_in' table to filter students based on their dormitory assignments. A subquery is employed to identify dormitories that offer the specified amenity, ensuring that only students residing in dorms without that amenity are selected.",
            "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?"
        },
        {
            "sample_id": 5710,
            "gold_sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age",
            "gold_complexity": 10,
            "vt": "SELECT student.fname, student.lname FROM student WHERE student.city_code <> '[placeholder-type:string]' ORDER BY student.age",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who do not reside in a specific city, ordered by their age. The placeholder in the WHERE clause represents the city code that is being excluded.",
            "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?"
        },
        {
            "sample_id": 5679,
            "gold_sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.age), student.city_code FROM student GROUP BY student.city_code",
            "ba": "The virtual table calculates the average age of students grouped by their city of residence. It retrieves the average age from the 'student' table and categorizes the results based on the 'city_code' of each student.",
            "question": "Find the average age of all students living in the each city."
        },
        {
            "sample_id": 5760,
            "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
            "gold_complexity": 10,
            "vt": "SELECT dorm_amenity.amenity_name FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE student.lname = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of amenities available in dormitories where students with a specific last name reside. It combines data from multiple tables: 'dorm', 'has_amenity', 'dorm_amenity', 'lives_in', and 'student'. The placeholder in the WHERE clause represents the last name of the student.",
            "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?"
        },
        {
            "sample_id": 5741,
            "gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE dorm.dorm_name = '[placeholder-type:string]' AND student.sex = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of students from the 'student' table who reside in a specific dormitory and are of a certain gender. The query joins the 'student' table with the 'lives_in' table to link students to their respective dormitories, and then joins with the 'dorm' table to filter by dormitory name and student gender. The placeholders represent the dormitory name and the gender of the students.",
            "question": "Find the number of female students (with F sex) living in Smith Hall"
        },
        {
            "sample_id": 5721,
            "gold_sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), AVG(student.age), student.city_code FROM student WHERE student.sex = '[placeholder-type:string]' GROUP BY student.city_code",
            "ba": "The virtual table summarizes the number of students and their average age, grouped by the city code of their residence, specifically for students of a certain gender. The placeholder in the WHERE clause represents the gender of the students being queried.",
            "question": "Find the average age and number of male students (with sex M) from each city."
        },
        {
            "sample_id": 5680,
            "gold_sql": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
            "gold_complexity": 8,
            "vt": "SELECT AVG(student.age), student.city_code FROM student GROUP BY student.city_code",
            "ba": "The virtual table calculates the average age of students grouped by their city of residence. It retrieves the average age from the 'student' table and categorizes the results based on the 'city_code' of each student.",
            "question": "What is the average age for each city and what are those cities?"
        },
        {
            "sample_id": 5691,
            "gold_sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
            "gold_complexity": 10,
            "vt": "SELECT dorm.dorm_name, dorm.gender FROM dorm WHERE dorm.student_capacity > [placeholder-type:numeric] OR dorm.student_capacity < [placeholder-type:numeric]",
            "ba": "The virtual table provides information about dormitories, specifically their names and gender designations. It filters the dormitories based on their student capacity, allowing for the selection of those that either exceed or fall below a specified capacity threshold.",
            "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100."
        },
        {
            "sample_id": 5694,
            "gold_sql": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(DISTINCT major), COUNT(DISTINCT city_code) FROM student",
            "ba": "The virtual table provides a count of distinct majors and distinct city codes from the 'student' table. This allows for an understanding of the diversity in fields of study and the geographical distribution of students.",
            "question": "How many different majors are there and how many different city codes are there for each student?"
        },
        {
            "sample_id": 5689,
            "gold_sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
            "gold_complexity": 8,
            "vt": "SELECT dorm.student_capacity, dorm.gender FROM dorm WHERE dorm.dorm_name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table provides information about the student capacity and gender designation of a specific dormitory from the 'dorm' table. The placeholder in the WHERE clause allows for filtering based on the dormitory's name.",
            "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019."
        },
        {
            "sample_id": 5759,
            "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
            "gold_complexity": 10,
            "vt": "SELECT dorm_amenity.amenity_name FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE student.lname = '[placeholder-type:string]'",
            "ba": "The virtual table lists the names of amenities available in dormitories where students with a specific last name reside. It combines data from multiple tables: 'dorm', 'has_amenity', 'dorm_amenity', 'lives_in', and 'student'. The placeholder in the WHERE clause represents the last name of the student.",
            "question": "Find the name of amenities of the dorm where the student with last name Smith is living in."
        },
        {
            "sample_id": 5722,
            "gold_sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*), AVG(student.age), student.city_code FROM student WHERE student.sex = '[placeholder-type:string]' GROUP BY student.city_code",
            "ba": "The virtual table provides a summary of the number of students and their average age, grouped by the city code of their residence, specifically for students of a certain gender. The placeholder in the WHERE clause represents the gender of the students being queried.",
            "question": "What is the average age and how many male students are there in each city?"
        },
        {
            "sample_id": 5684,
            "gold_sql": "SELECT count(DISTINCT dormid) FROM has_amenity",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT dormid) FROM has_amenity",
            "ba": "The virtual table counts the number of distinct dormitories that have amenities available. It utilizes the 'has_amenity' table to identify which dormitories are associated with amenities.",
            "question": "How many dorms have amenities?"
        },
        {
            "sample_id": 5697,
            "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
            "gold_complexity": 9,
            "vt": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
            "ba": "The virtual table lists the names of dormitories that have a 'TV Lounge' amenity but do not have a 'Study Room' amenity. It does this by joining the 'dorm', 'has_amenity', and 'dorm_amenity' tables to filter the dormitories based on the specified amenities.",
            "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity."
        },
        {
            "sample_id": 5706,
            "gold_sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student.city_code FROM student GROUP BY student.city_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique city codes from the 'student' table, grouping the results by city code and ordering them based on the number of students residing in each city. The placeholder in the LIMIT clause allows for specifying the maximum number of city codes to return.",
            "question": "What is the code of the city with the most students?"
        },
        {
            "sample_id": 5735,
            "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
            "gold_complexity": 8,
            "vt": "SELECT student.fname FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE dorm.dorm_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the first names of students who reside in a specific dormitory. It retrieves data from the 'student' table and joins it with the 'lives_in' table to find the corresponding dormitory for each student. The query filters the results based on the dormitory name provided as a placeholder.",
            "question": "Find the first name of students who are living in the Smith Hall."
        },
        {
            "sample_id": 5754,
            "gold_sql": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
            "gold_complexity": 9,
            "vt": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
            "ba": "The virtual table lists the names of dormitories that do not have a specific amenity, in this case, a 'TV Lounge'. It retrieves dormitory names from the 'dorm' table and excludes those that are associated with the 'TV Lounge' amenity through a join with the 'has_amenity' and 'dorm_amenity' tables.",
            "question": "What are the names of the dorm that does not have a TV Lounge?"
        },
        {
            "sample_id": 5745,
            "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
            "gold_complexity": 10,
            "vt": "SELECT dorm_amenity.amenity_name FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE dorm.dorm_name = '[placeholder-type:string]' ORDER BY dorm_amenity.amenity_name",
            "ba": "The virtual table lists the names of amenities available in a specific dormitory. It retrieves data from the 'dorm', 'has_amenity', and 'dorm_amenity' tables, joining them based on their relationships. The query filters the results by the dormitory's name, which is represented by a placeholder.",
            "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names."
        },
        {
            "sample_id": 5751,
            "gold_sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT dorm.dorm_name, dorm.student_capacity FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY has_amenity.dormid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of dormitory names along with their student capacities from the 'dorm' table. It joins the 'has_amenity' table to filter dormitories based on their amenities and groups the results by dormitory ID. The results are ordered by the count of amenities available in each dormitory, and a limit is applied to restrict the number of results returned.",
            "question": "Find the name and capacity of the dorm with least number of amenities."
        },
        {
            "sample_id": 5692,
            "gold_sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
            "gold_complexity": 10,
            "vt": "SELECT dorm.dorm_name, dorm.gender FROM dorm WHERE dorm.student_capacity > [placeholder-type:numeric] OR dorm.student_capacity < [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and gender designations of dormitories from the 'dorm' table that have a student capacity exceeding or falling below a specified numeric threshold. The placeholders in the WHERE clause represent the minimum and maximum student capacity values.",
            "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?"
        },
        {
            "sample_id": 5698,
            "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
            "gold_complexity": 9,
            "vt": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
            "ba": "The virtual table lists the names of dormitories that have a 'TV Lounge' amenity but do not have a 'Study Room' amenity. It combines data from the 'dorm', 'has_amenity', and 'dorm_amenity' tables to filter the dormitories based on the specified amenities.",
            "question": "What is the name of each dorm that has a TV Lounge but no study rooms?"
        },
        {
            "sample_id": 5740,
            "gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE dorm.gender = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of students residing in dormitories that are designated for a specific gender. It joins the 'student' table with the 'lives_in' table to link students to their respective dormitories, and then joins with the 'dorm' table to filter based on the gender designation of the dormitory.",
            "question": "What are the total number of students who are living in a male dorm?"
        },
        {
            "sample_id": 5682,
            "gold_sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
            "gold_complexity": 7,
            "vt": "SELECT AVG(dorm.student_capacity), SUM(dorm.student_capacity) FROM dorm WHERE dorm.gender = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average and total student capacity of dormitories filtered by gender designation. The placeholder in the WHERE clause represents the gender of the dormitory.",
            "question": "What is the average and total capacity for all dorms who are of gender X?"
        },
        {
            "sample_id": 5749,
            "gold_sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 18,
            "vt": "SELECT student.fname FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE lives_in.dormid IN (SELECT lives_in.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table retrieves the first names of students who live in the dormitory that has the highest number of amenities available. It does this by joining the 'student' table with the 'lives_in' table to find which students reside in which dorms. Then, it uses a subquery to identify the dormitory with the most amenities by joining the 'dorm', 'has_amenity', and 'dorm_amenity' tables, grouping by dormitory ID, and ordering by the count of amenities in descending order, limiting the result to the top one.",
            "question": "Find the first name of students who are living in the dorm that has most number of amenities."
        },
        {
            "sample_id": 5712,
            "gold_sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
            "gold_complexity": 10,
            "vt": "SELECT dorm_amenity.amenity_name FROM dorm_amenity JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE dorm.dorm_name = '[placeholder-type:string]' ORDER BY dorm_amenity.amenity_name",
            "ba": "The virtual table lists the names of amenities available in a specific dormitory. It retrieves data from the 'dorm_amenity' table and joins it with the 'has_amenity' table to find which amenities are associated with each dormitory. Additionally, it joins with the 'dorm' table to filter the results based on the specified dormitory name. The placeholder in the WHERE clause represents the name of the dormitory being queried.",
            "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?"
        },
        {
            "sample_id": 5717,
            "gold_sql": "SELECT count(*) ,  major FROM student GROUP BY major",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*), student.major FROM student GROUP BY student.major",
            "ba": "The virtual table provides a count of students grouped by their major from the 'student' table. This allows for an understanding of how many students are pursuing each field of study.",
            "question": "Find the number of students in each major."
        },
        {
            "sample_id": 5715,
            "gold_sql": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
            "gold_complexity": 9,
            "vt": "SELECT AVG(student.age), MAX(student.age), student.sex FROM student GROUP BY student.sex",
            "ba": "The virtual table calculates the average and maximum age of students from the 'student' table, grouped by their gender. The placeholders represent the aggregated values for age and the gender of the students.",
            "question": "Find the average and oldest age for students with different sex."
        },
        {
            "sample_id": 5665,
            "gold_sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM student WHERE student.sex = '[placeholder-type:string]' AND student.age < [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of students from the 'student' table who meet specific criteria based on their gender and age. The placeholders in the WHERE clause represent the gender of the students and the maximum age limit for counting.",
            "question": "How many female students (sex is F) whose age is below 25?"
        },
        {
            "sample_id": 5700,
            "gold_sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
            "gold_complexity": 10,
            "vt": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20",
            "ba": "The virtual table retrieves the last names of students from the 'student' table who meet specific criteria. It includes female students residing in a particular city and male students under the age of 20. The placeholders in the WHERE clause represent the gender and city code for filtering the female students, as well as the age for filtering the male students.",
            "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?"
        },
        {
            "sample_id": 5752,
            "gold_sql": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT dorm.dorm_name, dorm.student_capacity FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY has_amenity.dormid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of dormitory names along with their student capacities from the 'dorm' table. It joins the 'has_amenity' table to filter dormitories based on their amenities and groups the results by dormitory ID. The results are ordered by the count of amenities available in each dormitory, and a limit is applied to restrict the number of results returned.",
            "question": "What is the name and capacity of the dorm with the fewest amount of amenities?"
        },
        {
            "sample_id": 5696,
            "gold_sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
            "gold_complexity": 9,
            "vt": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
            "ba": "The virtual table identifies dormitories that offer both a 'TV Lounge' and a 'Study Room' as amenities. It does this by performing an intersection of two queries, each selecting dorm names based on the presence of one of the specified amenities.",
            "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?"
        },
        {
            "sample_id": 5677,
            "gold_sql": "SELECT count(*) FROM student",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM student",
            "ba": "The virtual table provides a count of all students from the 'student' table, which includes various details about each student such as their unique identifier, names, age, gender, major, advisor, and city code.",
            "question": "How many students are there?"
        },
        {
            "sample_id": 5723,
            "gold_sql": "SELECT count(*) ,  city_code FROM student GROUP BY city_code HAVING count(*)  >  1",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), student.city_code FROM student GROUP BY student.city_code HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of students grouped by their city of residence from the 'student' table. It filters the results to only include cities where the number of students exceeds a specified threshold, represented by a placeholder for numeric values.",
            "question": "Find the number of students for the cities where have more than one student."
        },
        {
            "sample_id": 5755,
            "gold_sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.lname FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE lives_in.dormid IN (SELECT has_amenity.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
            "ba": "The virtual table describes the first and last names of students who live in dormitories that have a specific amenity, in this case, a 'TV Lounge'. The query joins the 'student' table with the 'lives_in' table to find students and their corresponding dormitory information. It then filters the dormitories based on the presence of the specified amenity by using a subquery that checks the 'has_amenity' and 'dorm_amenity' tables.",
            "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge."
        },
        {
            "sample_id": 5731,
            "gold_sql": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), dorm.dormid FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE dorm.student_capacity > [placeholder-type:numeric] GROUP BY dorm.dormid",
            "ba": "The virtual table provides a count of students residing in dormitories that have specific amenities, filtered by the dormitory's capacity. The placeholder in the WHERE clause represents the minimum student capacity required for the dormitories.",
            "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students."
        },
        {
            "sample_id": 5668,
            "gold_sql": "SELECT fname FROM student WHERE age  >  20",
            "gold_complexity": 6,
            "vt": "SELECT student.fname FROM student WHERE student.age > [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of students from the 'student' table who are older than a specified age. The placeholder in the WHERE clause represents the age threshold.",
            "question": "What are the first names of all students who are older than 20?"
        },
        {
            "sample_id": 5675,
            "gold_sql": "SELECT sum(student_capacity) FROM dorm",
            "gold_complexity": 4,
            "vt": "SELECT SUM(dorm.student_capacity) FROM dorm",
            "ba": "The virtual table calculates the total student capacity across all dormitories from the 'dorm' table. This provides an aggregate view of how many students can be accommodated in the dorms.",
            "question": "Find the total capacity of all dorms."
        },
        {
            "sample_id": 5726,
            "gold_sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.lname FROM student WHERE student.major <> (SELECT student.major FROM student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who are not enrolled in the most popular major. The subquery identifies the major that has the highest number of students, and the placeholder in the WHERE clause ensures that only students from other majors are selected.",
            "question": "What is the first and last name of the students who are not in the largest major?"
        },
        {
            "sample_id": 5687,
            "gold_sql": "SELECT count(DISTINCT gender) FROM dorm",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT gender) FROM dorm",
            "ba": "The virtual table counts the distinct gender designations available in the 'dorm' table, which represents the different gender-specific dormitories.",
            "question": "Find the number of distinct gender for dorms."
        },
        {
            "sample_id": 5739,
            "gold_sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE dorm.gender = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of students residing in dormitories filtered by gender designation. It joins the 'student' table with the 'lives_in' table to associate students with their respective dormitories, and then joins the 'dorm' table to apply the gender filter. The placeholder in the WHERE clause represents the gender designation of the dormitory.",
            "question": "Find the total number of students living in the male dorm (with gender M)."
        },
        {
            "sample_id": 5728,
            "gold_sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(*), student.sex FROM student WHERE student.age > (SELECT AVG(student.age) FROM student) GROUP BY student.sex",
            "ba": "The virtual table provides a count of students grouped by gender who are older than the average age of all students. It uses a subquery to calculate the average age and filters the main query based on this value.",
            "question": "How many students are older than average for each gender?"
        },
        {
            "sample_id": 5699,
            "gold_sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
            "gold_complexity": 10,
            "vt": "SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20",
            "ba": "The virtual table retrieves the last names of students from the 'student' table who meet specific criteria. It includes female students residing in a particular city and male students who are under a certain age. The placeholders in the WHERE clause represent the gender, city code, and age conditions.",
            "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20."
        },
        {
            "sample_id": 5664,
            "gold_sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
            "gold_complexity": 6,
            "vt": "SELECT dorm.dorm_name FROM dorm WHERE dorm.student_capacity > [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of dormitories from the 'dorm' table that have a student capacity greater than a specified number. The placeholder in the WHERE clause represents the minimum student capacity to filter the results.",
            "question": "What are the names of all the dorms that can accomdate more than 300 students?"
        },
        {
            "sample_id": 5673,
            "gold_sql": "SELECT count(*) FROM dorm_amenity",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM dorm_amenity",
            "ba": "The virtual table provides a count of all amenities available in the dormitory system. It retrieves the total number of unique amenities from the 'dorm_amenity' table, which contains information about each amenity offered in the dorms.",
            "question": "Find the number of distinct amenities."
        },
        {
            "sample_id": 5672,
            "gold_sql": "SELECT count(*) FROM dorm",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM dorm",
            "ba": "The virtual table provides a count of all dormitories available in the 'dorm' table.",
            "question": "How many dorms are in the database?"
        },
        {
            "sample_id": 5727,
            "gold_sql": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(*), student.sex FROM student WHERE student.age > (SELECT AVG(student.age) FROM student) GROUP BY student.sex",
            "ba": "The virtual table provides a count of students grouped by gender who are older than the average age of all students. It uses a subquery to calculate the average age and filters the main query based on this value.",
            "question": "Find the number of students whose age is older than the average age for each gender."
        },
        {
            "sample_id": 5756,
            "gold_sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.lname FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE lives_in.dormid IN (SELECT has_amenity.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
            "ba": "The virtual table describes the first and last names of students who live in dormitories that have a specific amenity, in this case, a 'TV Lounge'. The query joins the 'student' table with the 'lives_in' table to find students and their corresponding dormitory information. It then filters the dormitories based on the presence of the specified amenity by using a subquery that checks the 'has_amenity' and 'dorm_amenity' tables.",
            "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?"
        },
        {
            "sample_id": 5757,
            "gold_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.age FROM student JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE NOT lives_in.dormid IN (SELECT has_amenity.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')",
            "ba": "The virtual table describes the first names and ages of students from the 'student' table who do not live in dormitories that have a specific amenity, in this case, a 'TV Lounge'. The query uses a subquery to filter out dormitories that offer this amenity, ensuring that only students residing in dorms without it are selected.",
            "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge."
        },
        {
            "sample_id": 5746,
            "gold_sql": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
            "gold_complexity": 10,
            "vt": "SELECT dorm_amenity.amenity_name FROM dorm JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE dorm.dorm_name = '[placeholder-type:string]' ORDER BY dorm_amenity.amenity_name",
            "ba": "The virtual table lists the names of amenities available in a specific dormitory. It retrieves data from the 'dorm', 'has_amenity', and 'dorm_amenity' tables, joining them based on their relationships. The query filters the results by the dormitory's name, which is represented by a placeholder.",
            "question": "What amenities does Smith Hall have in alphabetical order?"
        },
        {
            "sample_id": 5703,
            "gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
            "gold_complexity": 6,
            "vt": "SELECT dorm_amenity.amenity_name FROM dorm_amenity ORDER BY dorm_amenity.amenity_name",
            "ba": "The virtual table lists all the amenities available in the dormitories, sorted by their names. It retrieves the names of amenities from the 'dorm_amenity' table.",
            "question": "List in alphabetic order all different amenities."
        },
        {
            "sample_id": 5704,
            "gold_sql": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
            "gold_complexity": 6,
            "vt": "SELECT dorm_amenity.amenity_name FROM dorm_amenity ORDER BY dorm_amenity.amenity_name",
            "ba": "The virtual table lists all the amenities available in the dormitories, sorted by their names. The query retrieves the 'amenity_name' from the 'dorm_amenity' table, which contains information about various amenities.",
            "question": "What are the different dorm amenity names in alphabetical order?"
        },
        {
            "sample_id": 5666,
            "gold_sql": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM student WHERE student.sex = '[placeholder-type:string]' AND student.age < [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of students from the 'student' table who are of a specific gender and below a certain age. The placeholders represent the gender and age criteria for filtering the results.",
            "question": "How many girl students who are younger than 25?"
        },
        {
            "sample_id": 5725,
            "gold_sql": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.lname FROM student WHERE student.major <> (SELECT student.major FROM student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1)",
            "ba": "The virtual table describes the first and last names of students from the 'student' table who are not enrolled in the most popular major. The query uses a subquery to identify the major that has the highest number of students, and the placeholder in the WHERE clause represents the condition to exclude that major.",
            "question": "Find the first and last name of students who are not in the largest major."
        },
        {
            "sample_id": 5686,
            "gold_sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
            "gold_complexity": 10,
            "vt": "SELECT dorm.dorm_name FROM dorm WHERE NOT dorm.dormid IN (SELECT dorm.dormid FROM has_amenity)",
            "ba": "The virtual table lists the names of dormitories from the 'dorm' table that do not have any amenities associated with them. The subquery identifies dormitory IDs that have amenities, and the main query filters out these IDs to return only those dormitories without amenities.",
            "question": "What are the names of all the dorms that don't have any amenities?"
        },
        {
            "sample_id": 5719,
            "gold_sql": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), AVG(student.age), student.city_code FROM student GROUP BY student.city_code",
            "ba": "The virtual table summarizes the number of students and their average age, grouped by the city code where they reside. The placeholder in the SELECT statement allows for dynamic aggregation of student data based on their city of residence.",
            "question": "Find the number and average age of students living in each city."
        },
        {
            "sample_id": 5713,
            "gold_sql": "SELECT count(*) ,  sum(student_capacity) ,  gender FROM dorm GROUP BY gender",
            "gold_complexity": 10,
            "vt": "SELECT COUNT(*), SUM(dorm.student_capacity), dorm.gender FROM dorm GROUP BY dorm.gender",
            "ba": "The virtual table summarizes the total number of dormitories and their combined student capacity, categorized by gender designation. The placeholders represent the aggregated values for the count of dormitories and the sum of their capacities, grouped by the gender of the dormitories.",
            "question": "Find the number of dorms and total capacity for each gender."
        }
    ],
    "cre_Doc_Template_Mgt": [
        {
            "sample_id": 7344,
            "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_description = None.\"book\"",
            "ba": "The virtual table retrieves the unique code representing the type of template from the 'ref_template_types' table based on a specific description of the template type. The placeholder in the WHERE clause is used to filter the results for a particular template type description.",
            "question": "What is the template type code for template type description \"Book\"."
        },
        {
            "sample_id": 7348,
            "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
            "gold_complexity": 7,
            "vt": "SELECT templates.template_id FROM ref_template_types JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE ref_template_types.template_type_description = None.\"presentation\"",
            "ba": "The virtual table retrieves the unique identifiers of templates from the 'templates' table that are associated with a specific type of template, as defined in the 'ref_template_types' table. The query filters the results based on the description of the template type, which is represented by a placeholder.",
            "question": "What are the template ids with template type description \"Presentation\"."
        },
        {
            "sample_id": 7361,
            "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "gold_complexity": 10,
            "vt": "SELECT paragraphs.document_id, COUNT(*) FROM paragraphs GROUP BY paragraphs.document_id ORDER BY paragraphs.document_id",
            "ba": "The virtual table provides a count of paragraphs associated with each document from the 'paragraphs' table. It groups the results by 'document_id' to aggregate the number of paragraphs for each document and orders the results by 'document_id'.",
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id."
        },
        {
            "sample_id": 7368,
            "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of document IDs from the 'paragraphs' table, grouping the results by each document ID and ordering them based on the count of paragraphs associated with each document. The placeholder in the LIMIT clause allows for specifying the maximum number of document IDs to return.",
            "question": "What is the document id with least number of paragraphs?"
        },
        {
            "sample_id": 7326,
            "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
            "gold_complexity": 8,
            "vt": "SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code HAVING COUNT(*) < [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique template type codes from the 'templates' table, grouping them to count how many templates exist for each type. It filters the results to only include those template types that have fewer than a specified number of templates associated with them.",
            "question": "Show all template type codes with less than three templates."
        },
        {
            "sample_id": 7336,
            "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT templates.template_type_code FROM templates JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY templates.template_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique template type codes from the 'templates' table, joining it with the 'documents' table to associate templates with their corresponding documents. It groups the results by template type code and orders them based on the count of documents associated with each template type, limiting the output to a specified number of results.",
            "question": "Which template type code is used by most number of documents?"
        },
        {
            "sample_id": 7305,
            "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT documents.template_id, templates.template_type_code FROM documents JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY documents.template_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the template IDs and their corresponding template type codes from the 'documents' and 'templates' tables. It joins these tables based on the template ID, groups the results by template ID, and orders them by the count of associated records, limiting the output to a specified number of results.",
            "question": "Return the id and type code of the template that is used for the greatest number of documents."
        },
        {
            "sample_id": 7330,
            "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
            "gold_complexity": 7,
            "vt": "SELECT templates.template_type_code FROM templates JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE documents.document_name = None.\"data base\"",
            "ba": "The virtual table retrieves the template type code from the 'templates' table by joining it with the 'documents' table. It filters the results based on a specific document name.",
            "question": "What is the template type code of the template used by document with the name \"Data base\"?"
        },
        {
            "sample_id": 7325,
            "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique template type codes from the 'templates' table, grouping them to count how many templates exist for each type. It orders the results based on the count of templates in descending order and limits the output to a specified number of results.",
            "question": "Return the type code of the template type that the most templates belong to."
        },
        {
            "sample_id": 7302,
            "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
            "gold_complexity": 8,
            "vt": "SELECT documents.template_id, COUNT(*) FROM documents GROUP BY documents.template_id",
            "ba": "The virtual table summarizes the number of documents associated with each template by grouping the results based on the template identifier from the 'documents' table.",
            "question": "Show all template ids and number of documents using each template."
        },
        {
            "sample_id": 7358,
            "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
            "gold_complexity": 7,
            "vt": "SELECT paragraphs.paragraph_text FROM paragraphs JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE documents.document_name = None.\"customer reviews\"",
            "ba": "The virtual table retrieves the text content of paragraphs associated with documents that have a specific name. It joins the 'paragraphs' table with the 'documents' table to filter the results based on the document name provided.",
            "question": "Show all paragraph texts for the document \"Customer reviews\"."
        },
        {
            "sample_id": 7332,
            "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
            "gold_complexity": 7,
            "vt": "SELECT documents.document_name FROM templates JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE templates.template_type_code = None.\"bk\"",
            "ba": "The virtual table describes the names of documents associated with templates of a specific type. It retrieves the 'document_name' from the 'documents' table by joining it with the 'templates' table based on the 'template_id'. The query filters the results to include only those templates that match a specific template type code, represented by a placeholder.",
            "question": "Show all document names using templates with template type code BK."
        },
        {
            "sample_id": 7329,
            "gold_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
            "gold_complexity": 6,
            "vt": "SELECT MIN(templates.version_number), templates.template_type_code FROM templates",
            "ba": "The virtual table provides the minimum version number of templates grouped by their template type code from the 'templates' table. The placeholder in the SELECT clause represents the version number, while the template type code is used to categorize the templates.",
            "question": "Return the lowest version number, along with its corresponding template type code."
        },
        {
            "sample_id": 7341,
            "gold_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
            "gold_complexity": 6,
            "vt": "SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types",
            "ba": "The virtual table describes the unique codes and descriptions of template types from the 'ref_template_types' table. This allows users to understand the different types of templates available in the system.",
            "question": "What are the type codes and descriptions for all template types?"
        },
        {
            "sample_id": 7293,
            "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_id, documents.document_name, documents.document_description FROM documents",
            "ba": "The virtual table describes the unique identifiers, names, and descriptions of documents from the 'documents' table.",
            "question": "What are the ids, names, and descriptions for all documents?"
        },
        {
            "sample_id": 7356,
            "gold_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
            "gold_complexity": 9,
            "vt": "SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM paragraphs JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE documents.document_name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the paragraph IDs and their corresponding text content from the 'paragraphs' table, filtered by the name of the associated document. The placeholder in the WHERE clause represents the specific document's name.",
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'."
        },
        {
            "sample_id": 7335,
            "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
            "gold_complexity": 9,
            "vt": "SELECT templates.template_type_code, COUNT(*) FROM templates JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY templates.template_type_code",
            "ba": "The virtual table summarizes the count of templates grouped by their type from the 'templates' table, joining with the 'documents' table to associate each template with its corresponding documents. The placeholder in the SELECT statement represents the template type code.",
            "question": "What are the different template type codes, and how many documents use each type?"
        },
        {
            "sample_id": 7372,
            "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
            "gold_complexity": 7,
            "vt": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "ba": "The virtual table identifies documents that contain paragraphs with specific text content. It retrieves the unique document identifiers from the 'Paragraphs' table where the paragraph text matches 'Brazil' and intersects it with those where the paragraph text matches 'Ireland'. This means it will return only those documents that have paragraphs containing both specified texts.",
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'."
        },
        {
            "sample_id": 7360,
            "gold_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "gold_complexity": 10,
            "vt": "SELECT paragraphs.document_id, COUNT(*) FROM paragraphs GROUP BY paragraphs.document_id ORDER BY paragraphs.document_id",
            "ba": "The virtual table provides a count of paragraphs associated with each document from the 'paragraphs' table. It groups the results by 'document_id' to aggregate the number of paragraphs for each document and orders the results by 'document_id'.",
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id."
        },
        {
            "sample_id": 7303,
            "gold_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
            "gold_complexity": 8,
            "vt": "SELECT documents.template_id, COUNT(*) FROM documents GROUP BY documents.template_id",
            "ba": "The virtual table summarizes the number of documents associated with each template by grouping the results based on the template identifier from the 'documents' table.",
            "question": "What are all different template ids used for documents, and how many times were each of them used?"
        },
        {
            "sample_id": 7311,
            "gold_sql": "SELECT count(*) FROM Templates",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM templates",
            "ba": "The virtual table provides a count of all templates available in the 'templates' table. This count gives an overview of the total number of templates without displaying individual details.",
            "question": "Count the number of templates."
        },
        {
            "sample_id": 7319,
            "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM templates WHERE templates.template_type_code = None.\"cv\"",
            "ba": "The virtual table counts the number of templates from the 'templates' table that match a specific template type code. The placeholder in the WHERE clause represents the template type code being queried.",
            "question": "Count the number of templates of the type CV."
        },
        {
            "sample_id": 7308,
            "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "gold_complexity": 6,
            "vt": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "ba": "The virtual table identifies the unique template IDs from the 'Templates' table that do not have any associated documents in the 'Documents' table. This is achieved by selecting all template IDs from 'Templates' and excluding those that are present in 'Documents'.",
            "question": "Show ids for all templates not used by any document."
        },
        {
            "sample_id": 7292,
            "gold_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_id, documents.document_name, documents.document_description FROM documents",
            "ba": "The virtual table describes the unique identifiers, names, and descriptions of documents from the 'documents' table.",
            "question": "List document IDs, document names, and document descriptions for all documents."
        },
        {
            "sample_id": 7370,
            "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "gold_complexity": 8,
            "vt": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id HAVING COUNT(*) BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the document IDs from the 'paragraphs' table, grouping them by document ID and filtering the results to include only those documents that have a number of associated paragraphs within a specified range.",
            "question": "What is the document id with 1 to 2 paragraphs?"
        },
        {
            "sample_id": 7324,
            "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT templates.template_type_code FROM templates GROUP BY templates.template_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves unique template type codes from the 'templates' table, grouping them to count how many templates exist for each type. The results are ordered by the count of templates in descending order, and a limit is applied to restrict the number of returned template types based on a specified numeric value.",
            "question": "Which template type code has most number of templates?"
        },
        {
            "sample_id": 7294,
            "gold_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "gold_complexity": 8,
            "vt": "SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE None.\"%w%\"",
            "ba": "The virtual table describes the names and associated template IDs of documents from the 'documents' table that contain a specific substring in their description. The placeholder in the WHERE clause represents the substring to search for within the document descriptions.",
            "question": "What is the document name and template id for document with description with the letter 'w' in it?"
        },
        {
            "sample_id": 7367,
            "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT paragraphs.document_id, documents.document_name FROM paragraphs JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY paragraphs.document_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the document IDs and names of documents associated with paragraphs from the 'paragraphs' table. It joins the 'paragraphs' table with the 'documents' table to retrieve the relevant document information. The results are grouped by document ID and ordered by the count of paragraphs associated with each document, limiting the output to a specified number of results.",
            "question": "Return the id and name of the document with the most paragraphs."
        },
        {
            "sample_id": 7304,
            "gold_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT documents.template_id, templates.template_type_code FROM documents JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY documents.template_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the template IDs and their corresponding template type codes from the 'documents' and 'templates' tables. It joins these tables based on the template ID, groups the results by template ID, and orders them by the count of associated documents, limiting the results to a specified number.",
            "question": "What is the id and type code for the template used by the most documents?"
        },
        {
            "sample_id": 7342,
            "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = None.\"ad\"",
            "ba": "The virtual table describes the template type description from the 'ref_template_types' table for a specific template type code. The placeholder in the WHERE clause represents the unique code of the template type.",
            "question": "What is the template type descriptions for template type code \"AD\"."
        },
        {
            "sample_id": 7291,
            "gold_sql": "SELECT count(*) FROM Documents",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM documents",
            "ba": "The virtual table provides a count of all documents stored in the 'documents' table. This count represents the total number of unique documents available in the database.",
            "question": "Count the number of documents."
        },
        {
            "sample_id": 7347,
            "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "ba": "The virtual table describes the distinct descriptions of template types from the 'ref_template_types' table that are associated with templates and documents. The placeholders in the JOIN clauses represent the relationships between the tables based on their foreign keys.",
            "question": "Return the different descriptions for templates that have been used in a document."
        },
        {
            "sample_id": 7343,
            "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
            "gold_complexity": 6,
            "vt": "SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_code = None.\"ad\"",
            "ba": "The virtual table describes the template type description from the 'ref_template_types' table for a specific template type code. The placeholder in the WHERE clause represents the unique code of the template type.",
            "question": "Return the template type description of the template type with the code AD."
        },
        {
            "sample_id": 7369,
            "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT paragraphs.document_id FROM paragraphs GROUP BY paragraphs.document_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves a list of document IDs from the 'paragraphs' table, grouping the results by each document ID and ordering them based on the count of paragraphs associated with each document. The placeholder in the LIMIT clause allows for specifying the maximum number of document IDs to return.",
            "question": "Return the id of the document with the fewest paragraphs."
        },
        {
            "sample_id": 7320,
            "gold_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
            "gold_complexity": 8,
            "vt": "SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > [placeholder-type:numeric]",
            "ba": "The virtual table provides the version numbers and template type codes of templates from the 'templates' table that have a version number greater than a specified value. The placeholder in the WHERE clause represents the numeric value for the version number.",
            "question": "What is the version number and template type code for the template with version number later than 5?"
        },
        {
            "sample_id": 7318,
            "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM templates WHERE templates.template_type_code = None.\"cv\"",
            "ba": "The virtual table counts the number of templates from the 'templates' table that match a specific template type code. The placeholder in the WHERE clause represents the template type code being queried.",
            "question": "How many templates have template type code CV?"
        },
        {
            "sample_id": 7349,
            "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
            "gold_complexity": 7,
            "vt": "SELECT templates.template_id FROM ref_template_types JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE ref_template_types.template_type_description = None.\"presentation\"",
            "ba": "The virtual table retrieves the unique identifiers of templates from the 'templates' table that are associated with a specific type of template, as defined in the 'ref_template_types' table. The query uses a JOIN operation to connect these two tables based on the template type code, and it filters the results based on the description of the template type.",
            "question": "Return the ids corresponding to templates with the description 'Presentation'."
        },
        {
            "sample_id": 7323,
            "gold_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
            "gold_complexity": 8,
            "vt": "SELECT templates.template_type_code, COUNT(*) FROM templates GROUP BY templates.template_type_code",
            "ba": "The virtual table summarizes the count of templates grouped by their type code from the 'templates' table. Each type code corresponds to a specific category of templates, allowing users to see how many templates exist for each type.",
            "question": "What are the different template type codes, and how many templates correspond to each?"
        },
        {
            "sample_id": 7312,
            "gold_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
            "gold_complexity": 8,
            "vt": "SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates",
            "ba": "The virtual table provides a selection of template identifiers, their version numbers, and the corresponding template type codes from the 'templates' table.",
            "question": "Show template ids, version numbers, and template type codes for all templates."
        },
        {
            "sample_id": 7300,
            "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM documents JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE templates.template_type_code = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of documents associated with a specific type of template from the 'documents' table. It joins the 'documents' table with the 'templates' table to filter based on the template type code, which is represented by a placeholder for string values.",
            "question": "How many documents are using the template with type code 'PPT'?"
        },
        {
            "sample_id": 7314,
            "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT templates.template_type_code FROM templates",
            "ba": "The virtual table retrieves distinct template type codes from the 'templates' table, which indicates the various types of templates available. This is useful for understanding the different categories of templates that exist in the database.",
            "question": "Show all distinct template type codes for all templates."
        },
        {
            "sample_id": 7366,
            "gold_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT paragraphs.document_id, documents.document_name FROM paragraphs JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY paragraphs.document_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the document IDs and names of documents associated with paragraphs from the 'paragraphs' table. It joins the 'paragraphs' table with the 'documents' table to retrieve the relevant document information. The results are grouped by document ID and ordered by the count of paragraphs associated with each document, limiting the output to a specified number of results.",
            "question": "What is the document id and name with greatest number of paragraphs?"
        },
        {
            "sample_id": 7334,
            "gold_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
            "gold_complexity": 9,
            "vt": "SELECT templates.template_type_code, COUNT(*) FROM templates JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY templates.template_type_code",
            "ba": "The virtual table summarizes the count of templates grouped by their type code from the 'templates' table. It joins with the 'documents' table to associate each template with its corresponding documents, allowing for an aggregated view of how many documents exist for each template type.",
            "question": "Show all template type codes and the number of documents using each type."
        },
        {
            "sample_id": 7354,
            "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
            "gold_complexity": 6,
            "vt": "SELECT paragraphs.other_details FROM paragraphs WHERE paragraphs.paragraph_text LIKE '[placeholder-type:string]'",
            "ba": "The virtual table retrieves additional details related to paragraphs from the 'paragraphs' table where the text content of the paragraph matches a specific pattern. The placeholder in the LIKE clause represents the text pattern to search for.",
            "question": "Show paragraph details for paragraph with text 'Korea ' ."
        },
        {
            "sample_id": 7338,
            "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
            "gold_complexity": 6,
            "vt": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "ba": "The virtual table identifies the unique template type codes from the 'Templates' table that are not associated with any documents in the 'Documents' table. It uses an EXCEPT clause to exclude those template type codes that have corresponding entries in the 'Documents' table, ensuring that only template types without any linked documents are returned.",
            "question": "Show all template type codes that are not used by any document."
        },
        {
            "sample_id": 7353,
            "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM paragraphs JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE documents.document_name = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of paragraphs associated with a specific document from the 'documents' table. It joins the 'paragraphs' table with the 'documents' table to filter the results based on the document's name, which is represented by a placeholder.",
            "question": "Count the number of paragraphs in the document named 'Summer Show'."
        },
        {
            "sample_id": 7316,
            "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
            "gold_complexity": 7,
            "vt": "SELECT templates.template_id FROM templates WHERE templates.template_type_code = None.\"pp\" OR templates.template_type_code = None.\"ppt\"",
            "ba": "The virtual table retrieves the unique identifiers of templates from the 'templates' table that are of specific types, indicated by their template type codes. The placeholders represent the template type codes for which the templates are being queried.",
            "question": "What are the ids of templates with template type code PP or PPT?"
        },
        {
            "sample_id": 7331,
            "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
            "gold_complexity": 7,
            "vt": "SELECT templates.template_type_code FROM templates JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE documents.document_name = None.\"data base\"",
            "ba": "The virtual table retrieves the template type code from the 'templates' table by joining it with the 'documents' table. It filters the results based on the document name, which is specified as a placeholder.",
            "question": "Return the template type code of the template that is used by a document named Data base."
        },
        {
            "sample_id": 7337,
            "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT templates.template_type_code FROM templates JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY templates.template_type_code ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique template type codes from the 'templates' table, joining it with the 'documents' table to associate each template with its corresponding documents. The results are grouped by the template type code and ordered by the count of documents associated with each template type, limiting the output to a specified number of results.",
            "question": "Return the code of the template type that is most commonly used in documents."
        },
        {
            "sample_id": 7301,
            "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM documents JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE templates.template_type_code = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of documents associated with templates of a specific type. It joins the 'documents' table with the 'templates' table to filter the results based on the template type code.",
            "question": "Count the number of documents that use the PPT template type."
        }
    ],
    "car_1": [
        {
            "sample_id": 7154,
            "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM countries JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY countries.countryid HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of car makers associated with each country from the 'countries' table. It joins the 'countries' table with the 'car_makers' table based on the country identifier. The result is grouped by each country, and only those countries with a count of car makers greater than a specified number are included in the output.",
            "question": "How many countries has more than 2 car makers ?"
        },
        {
            "sample_id": 7139,
            "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM cars_data WHERE cars_data.year = [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of car entries from the 'cars_data' table that were manufactured in a specific year. The placeholder in the WHERE clause represents the year of manufacture.",
            "question": "In 1980, how many cars were made?"
        },
        {
            "sample_id": 7169,
            "gold_sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
            "gold_complexity": 15,
            "vt": "SELECT T1.Id, T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING COUNT(*) > 3",
            "ba": "The virtual table identifies car makers who have produced at least two different models and have more than three distinct car names associated with those models. It combines data from the 'car_makers', 'model_list', and 'car_names' tables to filter and group the results based on the number of models and names.",
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?"
        },
        {
            "sample_id": 7166,
            "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
            "gold_complexity": 6,
            "vt": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "ba": "The virtual table lists the names of countries that do not have any associated car makers. It retrieves country names from the 'countries' table and excludes those that are linked to any entries in the 'car_makers' table.",
            "question": "What are the name of the countries where there is not a single car maker?"
        },
        {
            "sample_id": 7110,
            "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
            "gold_complexity": 6,
            "vt": "SELECT AVG(cars_data.mpg) FROM cars_data WHERE cars_data.cylinders = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average miles per gallon (mpg) of cars from the 'cars_data' table that have a specific number of cylinders. The placeholder in the WHERE clause represents the number of cylinders to filter the results.",
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?"
        },
        {
            "sample_id": 7151,
            "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT cars_data.cylinders FROM cars_data JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE car_names.model = '[placeholder-type:string]' ORDER BY cars_data.accelerate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the number of cylinders for specific car models from the 'cars_data' table. It joins with the 'car_names' table to filter results based on the car model name provided by the user. The results are ordered by the acceleration time of the cars, and a limit is applied to restrict the number of returned records.",
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?"
        },
        {
            "sample_id": 7123,
            "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
            "gold_complexity": 12,
            "vt": "SELECT countries.countryname FROM countries JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE continents.continent = '[placeholder-type:string]' GROUP BY countries.countryname HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of countries from the 'countries' table that belong to a specific continent. It joins the 'continents' table to filter countries by continent and the 'car_makers' table to ensure that only countries with a certain number of car makers are included. The placeholders represent the continent's name and the minimum count of car makers required.",
            "question": "What are the names of all European countries with at least 3 manufacturers?"
        },
        {
            "sample_id": 7165,
            "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT model_list.model FROM model_list JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE cars_data.weight < [placeholder-type:numeric] AND car_makers.fullname <> '[placeholder-type:string]'",
            "ba": "The virtual table lists distinct car models from the 'model_list' table that meet specific criteria regarding weight and car maker's full name. The placeholders allow users to specify a maximum weight for the cars and exclude a particular car maker's full name from the results.",
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?"
        },
        {
            "sample_id": 7109,
            "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM model_list JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE countries.countryname = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of car models from the 'model_list' table that are associated with car makers from a specific country. The query joins the 'model_list' with the 'car_makers' table to link car models to their respective makers, and then further joins with the 'countries' table to filter the results based on the specified country name.",
            "question": "What is the count of the car models produced in the United States?"
        },
        {
            "sample_id": 7084,
            "gold_sql": "SELECT count(*) FROM COUNTRIES;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM countries",
            "ba": "The virtual table provides a count of all countries listed in the 'countries' table.",
            "question": "How many countries are listed?"
        },
        {
            "sample_id": 7130,
            "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
            "gold_complexity": 7,
            "vt": "SELECT AVG(cars_data.edispl) FROM car_names JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE car_names.model = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the average engine displacement of car models from the 'cars_data' table, filtered by a specific car model name. The placeholder in the WHERE clause represents the name of the car model.",
            "question": "What is the average edispl of the cars of model volvo?"
        },
        {
            "sample_id": 7097,
            "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
            "gold_complexity": 9,
            "vt": "SELECT DISTINCT model_list.model FROM model_list JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE cars_data.year > [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct car models from the 'model_list' table that are associated with car names and car data. It filters the results to include only those models manufactured after a specific year, represented by a placeholder for numeric values.",
            "question": "What are the different models for the cards produced after 1980?"
        },
        {
            "sample_id": 7102,
            "gold_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), car_makers.fullname FROM model_list JOIN car_makers AS t2 ON t1.maker = t2.id GROUP BY car_makers.id",
            "ba": "The virtual table provides a count of car models grouped by the full name of each car maker. It combines data from the 'model_list' and 'car_makers' tables, linking them through the car maker's identifier. The result will show how many models each car maker has produced.",
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name ."
        },
        {
            "sample_id": 7149,
            "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "gold_complexity": 7,
            "vt": "SELECT cars_data.horsepower FROM cars_data ORDER BY cars_data.accelerate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the horsepower of cars from the 'cars_data' table, sorted by their acceleration time. The result is limited to a specified number of entries.",
            "question": "What is the horsepower of the car with the greatest accelerate?"
        },
        {
            "sample_id": 7101,
            "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT countries.countryname FROM car_makers JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY car_makers.country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of countries from which car makers originate, grouped by country and ordered by the number of car makers in each country. The placeholder in the LIMIT clause allows for specifying the maximum number of countries to return.",
            "question": "What is the name of the country with the most car makers?"
        },
        {
            "sample_id": 7124,
            "gold_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "gold_complexity": 12,
            "vt": "SELECT cars_data.horsepower, car_names.make FROM car_names JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE cars_data.cylinders = [placeholder-type:numeric] ORDER BY cars_data.horsepower LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the horsepower and make of cars from the 'cars_data' table, filtered by the number of cylinders in the car's engine. The placeholders in the WHERE clause represent the specific number of cylinders and the limit on the number of results returned.",
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?"
        },
        {
            "sample_id": 7111,
            "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
            "gold_complexity": 6,
            "vt": "SELECT AVG(cars_data.mpg) FROM cars_data WHERE cars_data.cylinders = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average miles per gallon (mpg) of cars from the 'cars_data' table that have a specific number of cylinders. The placeholder in the WHERE clause represents the number of cylinders for which the average mpg is being calculated.",
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?"
        },
        {
            "sample_id": 7153,
            "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM cars_data WHERE cars_data.accelerate > (SELECT cars_data.accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1)",
            "ba": "The virtual table counts the number of cars from the 'cars_data' table that have an acceleration time greater than the fastest car's acceleration time.",
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?"
        },
        {
            "sample_id": 7100,
            "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "gold_complexity": 10,
            "vt": "SELECT countries.countryname FROM car_makers JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY car_makers.country ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of countries from the 'countries' table that are associated with car makers. It joins the 'car_makers' table with the 'countries' table to relate car makers to their respective countries. The results are grouped by country and ordered by the count of car makers in each country, limiting the output to a specified number of countries.",
            "question": "Which of the countries has the most car makers? List the country name."
        },
        {
            "sample_id": 7152,
            "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "gold_complexity": 12,
            "vt": "SELECT COUNT(*) FROM cars_data WHERE cars_data.accelerate > (SELECT cars_data.accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1)",
            "ba": "The virtual table counts the number of cars from the 'cars_data' table that have an acceleration time greater than the fastest car's acceleration time, which is determined by a subquery that selects the maximum horsepower and orders the results accordingly.",
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?"
        },
        {
            "sample_id": 7091,
            "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
            "gold_complexity": 11,
            "vt": "SELECT car_names.model FROM car_names JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE cars_data.weight < (SELECT AVG(cars_data.weight) FROM CARS_DATA)",
            "ba": "The virtual table lists the car models from the 'car_names' table that are associated with car entries in the 'cars_data' table, specifically those that have a weight less than the average weight of all cars in the database. The query uses a subquery to calculate the average weight, and the placeholder represents this condition.",
            "question": "What is the model for the car with a weight smaller than the average?"
        },
        {
            "sample_id": 7113,
            "gold_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
            "gold_complexity": 7,
            "vt": "SELECT MIN(cars_data.weight) FROM cars_data WHERE cars_data.cylinders = [placeholder-type:numeric] AND cars_data.year = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the minimum weight of cars from the 'cars_data' table that have a specific number of cylinders and were manufactured in a specific year. The placeholders in the WHERE clause represent the number of cylinders and the year of manufacture.",
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?"
        },
        {
            "sample_id": 7081,
            "gold_sql": "SELECT count(*) FROM CONTINENTS;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM continents",
            "ba": "The virtual table provides a count of all continents from the 'continents' table. This count represents the total number of unique continents recorded in the database.",
            "question": "What is the number of continents?"
        },
        {
            "sample_id": 7090,
            "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
            "gold_complexity": 11,
            "vt": "SELECT car_names.model FROM car_names JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE cars_data.weight < (SELECT AVG(cars_data.weight) FROM CARS_DATA)",
            "ba": "The virtual table lists the car models from the 'car_names' table that are associated with car entries in the 'cars_data' table, specifically those that have a weight less than the average weight of all cars in the dataset. The query uses a subquery to calculate the average weight and filters the results accordingly.",
            "question": "Find the model of the car whose weight is below the average weight."
        },
        {
            "sample_id": 7083,
            "gold_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
            "gold_complexity": 11,
            "vt": "SELECT continents.contid, continents.continent, COUNT(*) FROM continents JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY continents.contid",
            "ba": "The virtual table summarizes the number of countries associated with each continent by joining the 'continents' and 'countries' tables. It groups the results by the unique identifier of each continent, providing a count of countries for each continent.",
            "question": "For each continent, list its id, name, and how many countries it has?"
        },
        {
            "sample_id": 7122,
            "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
            "gold_complexity": 12,
            "vt": "SELECT countries.countryname FROM countries JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE continents.continent = '[placeholder-type:string]' GROUP BY countries.countryname HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of countries from the 'countries' table that belong to a specific continent. It joins the 'continents' table to filter countries by continent and the 'car_makers' table to ensure that only countries with a certain number of car makers are included. The placeholders represent the continent's name and the minimum count of car makers required.",
            "question": "Which countries in europe have at least 3 car manufacturers?"
        },
        {
            "sample_id": 7147,
            "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct years of car models from the 'cars_data' table that fall within a specified weight range. The placeholders represent the minimum and maximum weight values for filtering the results.",
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?"
        },
        {
            "sample_id": 7119,
            "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM cars_data WHERE cars_data.horsepower > [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of car entries from the 'cars_data' table where the horsepower of the cars exceeds a specified value. The placeholder in the WHERE clause represents the minimum horsepower threshold.",
            "question": "What is the number of cars with a horsepower greater than 150?"
        },
        {
            "sample_id": 7092,
            "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT car_makers.maker FROM car_makers JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE cars_data.year = '[placeholder-type:string]'",
            "ba": "The virtual table lists distinct car makers from the 'car_makers' table based on the year of manufacture of the car models. It joins multiple tables to ensure that only car makers associated with models manufactured in a specific year are included. The placeholder in the WHERE clause represents the year of manufacture.",
            "question": "Find the name of the makers that produced some cars in the year of 1970?"
        },
        {
            "sample_id": 7129,
            "gold_sql": "select avg(horsepower) from cars_data where year  <  1980;",
            "gold_complexity": 6,
            "vt": "SELECT AVG(cars_data.horsepower) FROM cars_data WHERE cars_data.year < [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average horsepower of cars from the 'cars_data' table that were manufactured before a specific year. The placeholder in the WHERE clause represents the year of manufacture.",
            "question": "What is the average horsepower for all cars produced before 1980 ?"
        },
        {
            "sample_id": 7143,
            "gold_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
            "gold_complexity": 11,
            "vt": "SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY car_makers.id HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table lists the full names and unique identifiers of car makers from the 'car_makers' table who have produced more than a specified number of car models. The query joins the 'car_makers' table with the 'model_list' table to count the number of models associated with each maker, filtering the results to only include those makers that have produced a quantity greater than a placeholder value.",
            "question": "What are the names and ids of all makers with more than 3 models?"
        },
        {
            "sample_id": 7141,
            "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM car_makers JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE car_makers.fullname = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of car models associated with a specific car maker from the 'car_makers' table. The placeholder in the WHERE clause represents the full name of the car maker.",
            "question": "What is the number of car models created by the car maker American Motor Company?"
        },
        {
            "sample_id": 7117,
            "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
            "gold_complexity": 11,
            "vt": "SELECT countries.countryname, countries.countryid FROM countries JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY countries.countryid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and unique identifiers of countries from the 'countries' table that have a significant number of car makers associated with them. The query joins the 'countries' table with the 'car_makers' table to filter countries based on the count of car makers, using a placeholder for the minimum count required.",
            "question": "What are the names and ids of all countries with at least one car maker?"
        },
        {
            "sample_id": 7116,
            "gold_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
            "gold_complexity": 11,
            "vt": "SELECT countries.countryname, countries.countryid FROM countries JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY countries.countryid HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names and unique identifiers of countries from the 'countries' table that have a significant number of car makers associated with them. The placeholder in the HAVING clause represents the minimum count of car makers required for a country to be included in the results.",
            "question": "What are the countries having at least one car maker? List name and id."
        },
        {
            "sample_id": 7155,
            "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*) FROM countries JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY countries.countryid HAVING COUNT(*) > [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of car makers associated with each country from the 'countries' table. It joins the 'countries' table with the 'car_makers' table based on the country identifier. The result is grouped by country, and only those countries with a count of car makers greater than a specified numeric value are included in the output.",
            "question": "What is the number of countries with more than 2 car makers ?"
        },
        {
            "sample_id": 7144,
            "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
            "gold_complexity": 12,
            "vt": "SELECT DISTINCT model_list.model FROM car_names JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE car_makers.fullname = '[placeholder-type:string]' OR cars_data.weight > [placeholder-type:numeric]",
            "ba": "The virtual table lists distinct car models from the 'model_list' table based on specific conditions related to car makers and car data. The query joins multiple tables: 'car_names', 'model_list', 'car_makers', and 'cars_data' to filter the results. The placeholders represent the full name of the car maker and a numeric value for the weight of the car.",
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"
        },
        {
            "sample_id": 7093,
            "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
            "gold_complexity": 10,
            "vt": "SELECT DISTINCT car_makers.maker FROM car_makers JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE cars_data.year = '[placeholder-type:string]'",
            "ba": "The virtual table lists distinct car makers from the 'car_makers' table based on the year of manufacture of the cars. It joins multiple tables to ensure that only car makers associated with specific car models and their corresponding data are included. The placeholder in the WHERE clause represents the year of manufacture.",
            "question": "What is the name of the different car makers who produced a car in 1970?"
        },
        {
            "sample_id": 7137,
            "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM cars_data WHERE cars_data.cylinders > [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of car entries from the 'cars_data' table where the number of cylinders in the car's engine exceeds a specified value. The placeholder in the WHERE clause represents the minimum number of cylinders to filter the results.",
            "question": "What is the number of cars with more than 4 cylinders?"
        },
        {
            "sample_id": 7120,
            "gold_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
            "gold_complexity": 8,
            "vt": "SELECT AVG(cars_data.weight), cars_data.year FROM cars_data GROUP BY cars_data.year",
            "ba": "The virtual table provides the average weight of cars grouped by their manufacturing year from the 'cars_data' table. The query calculates the average weight for each year, allowing users to analyze trends in car weights over time.",
            "question": "What is the average weight of cars each year?"
        },
        {
            "sample_id": 7171,
            "gold_sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
            "gold_complexity": 15,
            "vt": "SELECT t1.countryid, t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING COUNT(*) > 3 UNION SELECT t1.countryid, t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country JOIN model_list AS t3 ON t2.id = t3.maker WHERE t3.model = 'fiat'",
            "ba": "The virtual table provides a list of countries that have more than three car makers, as well as countries that have car makers producing a specific model, in this case, 'fiat'. It combines data from the 'countries', 'car_makers', and 'model_list' tables to achieve this.",
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?"
        },
        {
            "sample_id": 7170,
            "gold_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
            "gold_complexity": 15,
            "vt": "SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING COUNT(*) > 3 UNION SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "ba": "The virtual table provides a list of countries that have more than three car makers associated with them, as well as countries that have car models specifically named 'fiat'. It combines data from the 'Countries', 'Car Makers', and 'Model List' tables to achieve this.",
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"
        },
        {
            "sample_id": 7085,
            "gold_sql": "SELECT count(*) FROM COUNTRIES;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM countries",
            "ba": "The virtual table provides a count of all countries listed in the 'countries' table.",
            "question": "How many countries exist?"
        },
        {
            "sample_id": 7107,
            "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM car_makers JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE countries.countryname = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of car makers from a specific country. It joins the 'car_makers' table with the 'countries' table to filter the results based on the country name provided in the placeholder.",
            "question": "What is the number of makers of care in France?"
        },
        {
            "sample_id": 7118,
            "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM cars_data WHERE cars_data.horsepower > [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of car entries from the 'cars_data' table where the horsepower of the cars exceeds a specified value. The placeholder in the WHERE clause represents the minimum horsepower threshold.",
            "question": "What is the number of the cars with horsepower more than 150?"
        },
        {
            "sample_id": 7108,
            "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
            "gold_complexity": 8,
            "vt": "SELECT COUNT(*) FROM model_list JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE countries.countryname = '[placeholder-type:string]'",
            "ba": "The virtual table provides a count of car models from the 'model_list' table that are associated with car makers from a specific country. The query joins the 'model_list' with the 'car_makers' table to link car models to their respective makers, and then further joins with the 'countries' table to filter the results based on the specified country name. The placeholder in the WHERE clause represents the name of the country for which the count of car models is being requested.",
            "question": "How many car models are produced in the usa?"
        },
        {
            "sample_id": 7148,
            "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "gold_complexity": 7,
            "vt": "SELECT cars_data.horsepower FROM cars_data ORDER BY cars_data.accelerate LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the horsepower of cars from the 'cars_data' table, sorted by their acceleration time. The result is limited to a specified number of entries.",
            "question": "What is the horsepower of the car with the largest accelerate?"
        },
        {
            "sample_id": 7127,
            "gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
            "gold_complexity": 8,
            "vt": "SELECT car_names.model FROM car_names JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY cars_data.mpg LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the car models from the 'car_names' table, joined with the 'cars_data' table to include only those models that have associated data on fuel efficiency. The results are ordered by miles per gallon (mpg) to show the most efficient models first, and the number of results returned is limited by a placeholder for numeric values.",
            "question": "What is the car model with the highest mpg ?"
        },
        {
            "sample_id": 7138,
            "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM cars_data WHERE cars_data.year = [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of car entries from the 'cars_data' table that were manufactured in a specific year. The placeholder in the WHERE clause represents the year of manufacture.",
            "question": "how many cars were produced in 1980?"
        },
        {
            "sample_id": 7089,
            "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "gold_complexity": 8,
            "vt": "SELECT car_names.model FROM car_names JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY cars_data.horsepower LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the car models from the 'car_names' table, joined with the 'cars_data' table to access additional information about the cars. The results are ordered by the horsepower of the cars, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "What is the model of the car with the smallest amount of horsepower?"
        },
        {
            "sample_id": 7104,
            "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
            "gold_complexity": 7,
            "vt": "SELECT cars_data.accelerate FROM cars_data JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE car_names.make = '[placeholder-type:string]'",
            "ba": "The virtual table describes the acceleration times of cars from the 'cars_data' table, filtered by a specific car make. The placeholder in the WHERE clause represents the name of the car make.",
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?"
        },
        {
            "sample_id": 7146,
            "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves distinct years of car models from the 'cars_data' table, filtering the results based on the weight of the cars. The placeholders represent the minimum and maximum weight range for which the years are to be selected.",
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?"
        },
        {
            "sample_id": 7080,
            "gold_sql": "SELECT count(*) FROM CONTINENTS;",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM continents",
            "ba": "The virtual table provides a count of all continents from the 'continents' table. This count represents the total number of unique continents recorded in the database.",
            "question": "How many continents are there?"
        },
        {
            "sample_id": 7103,
            "gold_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
            "gold_complexity": 11,
            "vt": "SELECT COUNT(*), car_makers.fullname, car_makers.id FROM model_list JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY car_makers.id",
            "ba": "The virtual table provides a count of car models grouped by each car maker's full name and unique identifier. It aggregates the number of models associated with each car maker by joining the 'model_list' table with the 'car_makers' table based on the car maker's identifier.",
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?"
        },
        {
            "sample_id": 7095,
            "gold_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
            "gold_complexity": 11,
            "vt": "SELECT car_names.make, cars_data.year FROM cars_data JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE cars_data.year = (SELECT MIN(cars_data.year) FROM CARS_DATA)",
            "ba": "The virtual table describes the make of cars and the year they were manufactured from the 'cars_data' and 'car_names' tables. It retrieves the earliest year of car models by joining these two tables based on their identifiers. The placeholder in the WHERE clause represents the condition to filter for the minimum year of car manufacture.",
            "question": "What is the maker of the carr produced in the earliest year and what year was it?"
        },
        {
            "sample_id": 7140,
            "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM car_makers JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE car_makers.fullname = '[placeholder-type:string]'",
            "ba": "The virtual table counts the number of car models associated with a specific car maker from the 'car_makers' table. The placeholder in the WHERE clause represents the full name of the car maker.",
            "question": "How many car models were produced by the maker with full name American Motor Company?"
        }
    ],
    "riding_club": [
        {
            "sample_id": 1723,
            "gold_sql": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"",
            "gold_complexity": 7,
            "vt": "SELECT player.sponsor_name FROM player WHERE player.residence = None.\"brandon\" OR player.residence = None.\"birtle\"",
            "ba": "The virtual table describes the sponsor names of players from the 'player' table who reside in specific locations. The placeholders in the WHERE clause represent the residential addresses of the players.",
            "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\"."
        },
        {
            "sample_id": 1732,
            "gold_sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)",
            "gold_complexity": 10,
            "vt": "SELECT player.player_name FROM player WHERE NOT player.player_id IN (SELECT player.player_id FROM player_coach)",
            "ba": "The virtual table lists the names of players from the 'player' table who are not associated with any coach in the 'player_coach' table. The subquery identifies players that have a coaching relationship, and the main query filters out these players to show only those without a coach.",
            "question": "List the names of players that do not have coaches."
        },
        {
            "sample_id": 1722,
            "gold_sql": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
            "gold_complexity": 8,
            "vt": "SELECT player.player_name, player.residence FROM player WHERE player.occupation <> None.\"researcher\"",
            "ba": "The virtual table describes the names and residences of players from the 'player' table who are not researchers. The placeholder in the WHERE clause represents the occupation that is being filtered out.",
            "question": "List the name and residence for players whose occupation is not \"Researcher\"."
        },
        {
            "sample_id": 1733,
            "gold_sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
            "gold_complexity": 8,
            "vt": "SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\"",
            "ba": "The virtual table identifies the residential addresses of players from the 'player' table who are male and female. It uses an INTERSECT operation to find common residences between the two groups.",
            "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
        },
        {
            "sample_id": 1727,
            "gold_sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT player.residence FROM player GROUP BY player.residence HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the residential addresses of players from the 'player' table, grouped by residence. It filters the results to include only those residences that have a count of players greater than or equal to a specified number. The placeholder in the HAVING clause represents the minimum number of players required at each residence.",
            "question": "Show the residences that have at least two players."
        },
        {
            "sample_id": 1735,
            "gold_sql": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT match_result.club_id, match_result.gold FROM match_result JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY match_result.club_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the number of gold medals won by each club in the match results. It joins the 'match_result' table with the 'coach' table to associate clubs with their coaches, groups the results by club ID, and orders them based on the count of matches, limiting the output to a specified number of clubs.",
            "question": "How many gold medals has the club with the most coaches won?"
        },
        {
            "sample_id": 1726,
            "gold_sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT player.occupation FROM player GROUP BY player.occupation ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique occupations of players from the 'player' table, ordered by the number of players in each occupation. The placeholder in the LIMIT clause allows for specifying the maximum number of occupations to return.",
            "question": "Please show the most common occupation of players."
        },
        {
            "sample_id": 1720,
            "gold_sql": "SELECT Player_name FROM player ORDER BY Votes ASC",
            "gold_complexity": 6,
            "vt": "SELECT player.player_name FROM player ORDER BY player.votes",
            "ba": "The virtual table lists the names of players from the 'player' table, ordered by the number of votes they have received. This allows for an easy view of player popularity based on votes.",
            "question": "List the names of players in ascending order of votes."
        },
        {
            "sample_id": 1734,
            "gold_sql": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
            "gold_complexity": 11,
            "vt": "SELECT club.club_id, club.club_name, COUNT(*) FROM club JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY club.club_id",
            "ba": "The virtual table provides a summary of clubs along with the count of coaches associated with each club. It retrieves the unique identifier and name of each club from the 'club' table and counts the number of coaches linked to each club by joining the 'club' table with the 'coach' table based on the club's identifier. The results are grouped by the club's unique identifier to ensure that each club is represented only once in the output, along with the total number of coaches associated with it.",
            "question": "How many coaches does each club has? List the club id, name and the number of coaches."
        },
        {
            "sample_id": 1728,
            "gold_sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID",
            "gold_complexity": 8,
            "vt": "SELECT player.player_name, coach.coach_name FROM player_coach JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID",
            "ba": "The virtual table describes the relationship between players and their coaches, displaying the names of both players and their respective coaches. The query utilizes JOIN operations to connect the 'player_coach' table with the 'coach' and 'player' tables, allowing for the retrieval of player names alongside their coach names.",
            "question": "Show the names of players and names of their coaches."
        }
    ],
    "game_injury": [
        {
            "sample_id": 1281,
            "gold_sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
            "gold_complexity": 13,
            "vt": "SELECT game.id, game.score, game.date FROM game JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY game.id HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of games from the 'game' table, including their unique identifiers, final scores, and dates. It joins with the 'injury_accident' table to filter games based on the number of injury incidents associated with each game. The placeholder in the HAVING clause represents the minimum count of injury incidents that must be met for a game to be included in the results.",
            "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?"
        },
        {
            "sample_id": 1282,
            "gold_sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT stadium.id, stadium.name FROM stadium JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY stadium.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of stadiums along with their unique identifiers. It aggregates data from the 'stadium', 'game', and 'injury_accident' tables to show how many injury incidents occurred at each stadium. The results are grouped by stadium ID and ordered by the count of injuries, allowing users to see which stadiums have the most injury incidents, limited to a specified number of results.",
            "question": "What are the id and name of the stadium where the most injury accidents happened?"
        },
        {
            "sample_id": 1284,
            "gold_sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
            "gold_complexity": 10,
            "vt": "SELECT game.season, stadium.name FROM game JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE injury_accident.injury = '[placeholder-type:string]' OR injury_accident.injury = '[placeholder-type:string]'",
            "ba": "The virtual table describes the seasons and names of stadiums where games were played that resulted in specific injuries. The placeholders in the WHERE clause represent the types of injuries being queried.",
            "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?"
        },
        {
            "sample_id": 1288,
            "gold_sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
            "gold_complexity": 9,
            "vt": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
            "ba": "The virtual table identifies the names of stadiums where both players, Walter Samuel and Thiago Motta, sustained injuries during games. It combines data from the 'game', 'stadium', and 'injury_accident' tables to find common stadiums associated with the injury incidents of these two players.",
            "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured."
        },
        {
            "sample_id": 1279,
            "gold_sql": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
            "gold_complexity": 10,
            "vt": "SELECT injury_accident.player, injury_accident.number_of_matches, injury_accident.source FROM injury_accident WHERE injury_accident.injury <> '[placeholder-type:string]'",
            "ba": "The virtual table provides information about players who have sustained injuries, specifically their names, the number of matches they missed due to the injury, and the source of information regarding the injury. The placeholder in the WHERE clause is used to filter out specific types of injuries, allowing users to focus on injuries that are not equal to a specified value.",
            "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?"
        },
        {
            "sample_id": 1283,
            "gold_sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 13,
            "vt": "SELECT stadium.id, stadium.name FROM stadium JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY stadium.id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of stadiums along with their unique identifiers. It aggregates data from the 'stadium', 'game', and 'injury_accident' tables to show how many injury incidents occurred at each stadium. The results are grouped by stadium ID and ordered by the count of injuries, allowing users to see which stadiums have the most injury incidents, limited to a specified number of results.",
            "question": "Find the id and name of the stadium where the largest number of injury accidents occurred."
        },
        {
            "sample_id": 1280,
            "gold_sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
            "gold_complexity": 7,
            "vt": "SELECT game.season FROM game JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE injury_accident.player = '[placeholder-type:string]'",
            "ba": "The virtual table provides the seasons in which games were played that involved a specific player who sustained an injury. It joins the 'game' table with the 'injury_accident' table to filter the results based on the player's name.",
            "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?"
        },
        {
            "sample_id": 1276,
            "gold_sql": "SELECT season ,  home_team ,  away_team FROM game",
            "gold_complexity": 8,
            "vt": "SELECT game.season, game.home_team, game.away_team FROM game",
            "ba": "The virtual table provides information about the season and the teams participating in games from the 'game' table. The placeholders represent the specific details of the season and teams involved.",
            "question": "List the season, home team, away team of all the games."
        },
        {
            "sample_id": 1291,
            "gold_sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",
            "gold_complexity": 9,
            "vt": "SELECT stadium.id, COUNT(*) FROM stadium JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY stadium.id",
            "ba": "The virtual table provides a count of games played at each stadium by joining the 'stadium' and 'game' tables. It groups the results by the unique identifier of each stadium, allowing users to see how many games have taken place at each venue.",
            "question": "How many games has each stadium held?"
        },
        {
            "sample_id": 1290,
            "gold_sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
            "gold_complexity": 6,
            "vt": "SELECT stadium.name FROM stadium WHERE stadium.name LIKE None.\"%bank%\"",
            "ba": "The virtual table lists the names of stadiums from the 'stadium' table that contain the word 'bank' in their name. The placeholder in the LIKE clause allows for flexible searching of stadium names based on user input.",
            "question": "Which stadium name contains the substring \"Bank\"?"
        },
        {
            "sample_id": 1278,
            "gold_sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100",
            "gold_complexity": 6,
            "vt": "SELECT stadium.average_attendance FROM stadium WHERE stadium.capacity_percentage > [placeholder-type:numeric]",
            "ba": "The virtual table provides the average attendance of stadiums from the 'stadium' table where the percentage of stadium capacity filled during games exceeds a specified threshold. The placeholder in the WHERE clause represents the minimum capacity percentage that needs to be met.",
            "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?"
        }
    ],
    "game_1": [
        {
            "sample_id": 5995,
            "gold_sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT StuID) FROM sportsinfo",
            "ba": "The virtual table counts the number of unique students from the 'sportsinfo' table who are participating in sports activities. The placeholder in the COUNT function indicates that it will return the total number of distinct student identifiers.",
            "question": "How many different students are involved in sports?"
        },
        {
            "sample_id": 6039,
            "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
            "gold_complexity": 9,
            "vt": "SELECT video_games.gname FROM plays_games JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY plays_games.gameid HAVING SUM(plays_games.hours_played) >= [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of video games from the 'video_games' table that have been played for a total of hours equal to or greater than a specified amount. The query aggregates the total hours played for each game by joining the 'plays_games' table with the 'video_games' table based on the game ID, and filters the results using a placeholder for numeric values.",
            "question": "What are the names of all the games that have been played for at least 1000 hours?"
        },
        {
            "sample_id": 6031,
            "gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
            "gold_complexity": 6,
            "vt": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
            "ba": "The virtual table identifies students who are both participating in sports and playing video games. It does this by selecting the unique student identifiers (StuID) from the 'Sportsinfo' table and intersecting them with the unique student identifiers from the 'Plays_games' table. This intersection ensures that only students who are involved in both activities are included in the result.",
            "question": "What are the ids of all students who played video games and sports?"
        },
        {
            "sample_id": 5994,
            "gold_sql": "SELECT count(DISTINCT StuID) FROM Sportsinfo",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT StuID) FROM sportsinfo",
            "ba": "The virtual table counts the number of unique students from the 'sportsinfo' table who are participating in sports activities. The placeholder in the COUNT function represents the unique student identifiers.",
            "question": "How many students play sports?"
        },
        {
            "sample_id": 5971,
            "gold_sql": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"",
            "gold_complexity": 6,
            "vt": "SELECT video_games.gname FROM video_games WHERE video_games.gtype = None.\"collectible card game\"",
            "ba": "The virtual table lists the names of video games from the 'video_games' table that belong to a specific genre, which is represented by a placeholder. The placeholder in the WHERE clause indicates the type of game being queried.",
            "question": "What are the names of all video games that are collectible cards?"
        },
        {
            "sample_id": 6009,
            "gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
            "gold_complexity": 8,
            "vt": "SELECT sportsinfo.stuid FROM sportsinfo GROUP BY sportsinfo.stuid HAVING SUM(sportsinfo.hoursperweek) > [placeholder-type:numeric]",
            "ba": "The virtual table lists unique student identifiers from the 'sportsinfo' table for students who dedicate more than a specified number of hours per week to sports activities. The placeholder in the HAVING clause represents the minimum total hours per week that a student must commit to qualify for inclusion in the results.",
            "question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?"
        },
        {
            "sample_id": 6008,
            "gold_sql": "SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING sum(hoursperweek)  >  10",
            "gold_complexity": 8,
            "vt": "SELECT sportsinfo.stuid FROM sportsinfo GROUP BY sportsinfo.stuid HAVING SUM(sportsinfo.hoursperweek) > [placeholder-type:numeric]",
            "ba": "The virtual table identifies students from the 'sportsinfo' table who dedicate more than a specified number of hours per week to sports activities. The placeholder in the HAVING clause represents the minimum total hours per week that a student must commit to qualify for this selection.",
            "question": "Show all student IDs with more than total 10 hours per week on all sports played."
        },
        {
            "sample_id": 5989,
            "gold_sql": "SELECT major ,  avg(age) ,  min(age) ,  max(age) FROM Student GROUP BY major",
            "gold_complexity": 10,
            "vt": "SELECT student.major, AVG(student.age), MIN(student.age), MAX(student.age) FROM student GROUP BY student.major",
            "ba": "The virtual table summarizes the average, minimum, and maximum ages of students grouped by their major from the 'student' table. It provides insights into the age distribution of students within each field of study.",
            "question": "What are the average, minimum, and max ages for each of the different majors?"
        },
        {
            "sample_id": 5982,
            "gold_sql": "SELECT StuID FROM Student WHERE city_code  =  \"CHI\"",
            "gold_complexity": 6,
            "vt": "SELECT student.stuid FROM student WHERE student.city_code = None.\"chi\"",
            "ba": "The virtual table retrieves the unique identifiers of students from the 'student' table who reside in a specific city, represented by a placeholder for the city code.",
            "question": "Show ids for all students who live in CHI."
        },
        {
            "sample_id": 5979,
            "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT video_games.gtype FROM video_games GROUP BY video_games.gtype ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different types or genres of video games from the 'video_games' table. It groups the video games by their genre and orders them based on the count of games in each genre, limiting the results to a specified number of genres.",
            "question": "What type has the most games?"
        },
        {
            "sample_id": 6034,
            "gold_sql": "SELECT Stuid ,  sum(hours_played) FROM Plays_games GROUP BY Stuid",
            "gold_complexity": 8,
            "vt": "SELECT plays_games.stuid, SUM(plays_games.hours_played) FROM plays_games GROUP BY plays_games.stuid",
            "ba": "The virtual table summarizes the total hours each student has spent playing video games from the 'plays_games' table. The placeholder in the SELECT statement represents the unique identifier for each student, while the SUM function aggregates the total hours played for each student.",
            "question": "Show all student ids and the number of hours played."
        },
        {
            "sample_id": 6047,
            "gold_sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")",
            "gold_complexity": 17,
            "vt": "SELECT student.lname, student.sex FROM student WHERE student.stuid IN (SELECT plays_games.stuid FROM plays_games JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE video_games.gname = None.\"call of destiny\" INTERSECT SELECT plays_games.stuid FROM plays_games JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE video_games.gname = None.\"works of widenius\")",
            "ba": "The virtual table describes the last names and gender of students who play both specified video games from the 'student' table. The query uses a subquery to find students who play 'call of destiny' and intersects it with those who play 'works of widenius'.",
            "question": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?"
        },
        {
            "sample_id": 6042,
            "gold_sql": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
            "gold_complexity": 10,
            "vt": "SELECT student.lname, student.fname FROM sportsinfo JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE sportsinfo.sportname = None.\"football\" OR sportsinfo.sportname = None.\"lacrosse\"",
            "ba": "The virtual table describes the last and first names of students from the 'student' table who are involved in either football or lacrosse. The query joins the 'sportsinfo' table to filter students based on their participation in these specific sports.",
            "question": "Find the last and first name of students who are playing Football or Lacrosse."
        },
        {
            "sample_id": 5991,
            "gold_sql": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
            "gold_complexity": 8,
            "vt": "SELECT student.advisor FROM student GROUP BY student.advisor HAVING COUNT(*) >= [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the names of academic advisors from the 'student' table, grouping the results by advisor name. It filters the results to include only those advisors who have at least a specified number of students assigned to them, indicated by a placeholder for numeric values.",
            "question": "What are the advisors"
        },
        {
            "sample_id": 6010,
            "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT student.fname, student.lname FROM sportsinfo JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY sportsinfo.stuid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students who participate in sports, grouped by their unique student identifier. The query joins the 'sportsinfo' table with the 'student' table to retrieve the names of students, and it orders the results based on the count of sports they are involved in, limiting the output to a specified number of students.",
            "question": "What is the first name and last name of the student who have most number of sports?"
        },
        {
            "sample_id": 5965,
            "gold_sql": "SELECT count(DISTINCT gtype) FROM Video_games",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT gtype) FROM video_games",
            "ba": "The virtual table counts the distinct types or genres of video games from the 'video_games' table.",
            "question": "What is the count of different game types?"
        },
        {
            "sample_id": 5968,
            "gold_sql": "SELECT gname ,  gtype FROM Video_games ORDER BY gname",
            "gold_complexity": 8,
            "vt": "SELECT video_games.gname, video_games.gtype FROM video_games ORDER BY video_games.gname",
            "ba": "The virtual table lists the names and types of all video games from the 'video_games' table, sorted by the name of the games. This allows users to see the available video games along with their respective genres.",
            "question": "Show all video games and their types in the order of their names."
        },
        {
            "sample_id": 6024,
            "gold_sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
            "gold_complexity": 9,
            "vt": "SELECT SUM(sportsinfo.hoursperweek), SUM(sportsinfo.gamesplayed) FROM sportsinfo JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE student.age < [placeholder-type:numeric]",
            "ba": "The virtual table summarizes the total hours per week and total games played by students who are younger than a specified age. It combines data from the 'sportsinfo' table and the 'student' table, filtering based on the age of the students.",
            "question": "Show total hours per week and number of games played for students under 20."
        },
        {
            "sample_id": 6027,
            "gold_sql": "SELECT count(DISTINCT StuID) FROM Plays_games",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT StuID) FROM plays_games",
            "ba": "The virtual table counts the number of distinct students who have played video games from the 'plays_games' table. This provides insight into how many unique students are engaged in gaming activities.",
            "question": "How many different students play games?"
        },
        {
            "sample_id": 6020,
            "gold_sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
            "gold_complexity": 9,
            "vt": "SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
            "ba": "The virtual table identifies male students from the 'student' table who are not participating in football as indicated in the 'sportsinfo' table. The query uses an EXCEPT clause to exclude those students who are involved in football from the list of male students.",
            "question": "Show all male student ids who don't play football."
        },
        {
            "sample_id": 6019,
            "gold_sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
            "gold_complexity": 9,
            "vt": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
            "ba": "The virtual table identifies female students who are involved in playing football. It combines data from the 'student' table and the 'sportsinfo' table using an INTERSECT operation to find common student identifiers (StuID) that meet both criteria.",
            "question": "What are the ids of all female students who play football?"
        },
        {
            "sample_id": 5973,
            "gold_sql": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"",
            "gold_complexity": 6,
            "vt": "SELECT video_games.gtype FROM video_games WHERE video_games.gname = None.\"call of destiny\"",
            "ba": "The virtual table retrieves the type or genre of a specific video game from the 'video_games' table based on its name. The placeholder in the WHERE clause represents the name of the video game being queried.",
            "question": "What type of game is Call of Destiny?"
        },
        {
            "sample_id": 6016,
            "gold_sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
            "gold_complexity": 9,
            "vt": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
            "ba": "The virtual table identifies students who are majoring in a specific field and are also participating in sports while being on a scholarship. It combines data from the 'student' and 'sportsinfo' tables using an intersection to find common student identifiers (StuID) that meet both criteria.",
            "question": "Show student ids who are on scholarship and have major 600."
        },
        {
            "sample_id": 6014,
            "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
            "gold_complexity": 6,
            "vt": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
            "ba": "The virtual table identifies students who are not participating in any sports by selecting their unique identifiers from the 'student' table and excluding those who are listed in the 'sportsinfo' table.",
            "question": "Show student ids who don't have any sports."
        },
        {
            "sample_id": 5998,
            "gold_sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
            "gold_complexity": 7,
            "vt": "SELECT student.lname FROM sportsinfo JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE sportsinfo.onscholarship = '[placeholder-type:string]'",
            "ba": "The virtual table describes the last names of students from the 'student' table who are participating in sports and are on a sports scholarship. The placeholder in the WHERE clause represents the scholarship status.",
            "question": "Show last names for all student who are on scholarship."
        },
        {
            "sample_id": 6017,
            "gold_sql": "SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
            "gold_complexity": 9,
            "vt": "SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y'",
            "ba": "The virtual table identifies students who are majoring in a specific field and are also participating in sports while being on a scholarship. It combines data from the 'student' table and the 'sportsinfo' table using an intersection to find common student identifiers (StuID). The placeholder in the WHERE clause represents the major's code, while the condition for the scholarship status is fixed as 'Y'.",
            "question": "What are the student ids for those on scholarship in major number 600?"
        },
        {
            "sample_id": 5980,
            "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT video_games.gtype FROM video_games GROUP BY video_games.gtype ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of unique video game genres from the 'video_games' table, grouped by their type. It orders the genres based on the count of games in each genre and limits the results to a specified number of genres.",
            "question": "Which game type has least number of games?"
        },
        {
            "sample_id": 6028,
            "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
            "gold_complexity": 6,
            "vt": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
            "ba": "The virtual table identifies students who are not participating in any video games by selecting their unique identifiers from the 'student' table and excluding those who are found in the 'plays_games' table.",
            "question": "Show ids of students who don't play video game."
        },
        {
            "sample_id": 6013,
            "gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT sportsinfo.sportname FROM sportsinfo WHERE sportsinfo.onscholarship = '[placeholder-type:string]' GROUP BY sportsinfo.sportname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of sports in which students are participating, specifically those who are on a sports scholarship. The results are grouped by sport name and ordered by the count of students participating in each sport, with a limit on the number of results returned.",
            "question": "What is the sport with the most scholarship students?"
        },
        {
            "sample_id": 6046,
            "gold_sql": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")",
            "gold_complexity": 17,
            "vt": "SELECT student.lname, student.sex FROM student WHERE student.stuid IN (SELECT plays_games.stuid FROM plays_games JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE video_games.gname = None.\"call of destiny\" INTERSECT SELECT plays_games.stuid FROM plays_games JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE video_games.gname = None.\"works of widenius\")",
            "ba": "The virtual table describes the last names and gender of students who play both specified video games. The query filters students based on their unique identifiers, ensuring they are included only if they play both 'call of destiny' and 'works of widenius'.",
            "question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games."
        },
        {
            "sample_id": 5999,
            "gold_sql": "SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'",
            "gold_complexity": 7,
            "vt": "SELECT student.lname FROM sportsinfo JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE sportsinfo.onscholarship = '[placeholder-type:string]'",
            "ba": "The virtual table describes the last names of students from the 'student' table who are participating in sports and are on a sports scholarship. The placeholder in the WHERE clause represents the scholarship status.",
            "question": "What are the last names for all scholarship students?"
        },
        {
            "sample_id": 6003,
            "gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
            "gold_complexity": 7,
            "vt": "SELECT SUM(sportsinfo.gamesplayed) FROM sportsinfo WHERE sportsinfo.sportname = None.\"football\" AND sportsinfo.onscholarship = '[placeholder-type:string]'",
            "ba": "The virtual table summarizes the total number of games played by students involved in football who are on a sports scholarship. The placeholder in the WHERE clause represents whether the student is on a scholarship or not.",
            "question": "What is the total number of all football games played by scholarship students?"
        },
        {
            "sample_id": 6018,
            "gold_sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
            "gold_complexity": 9,
            "vt": "SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = \"Football\"",
            "ba": "The virtual table identifies female students who are involved in playing football. It combines data from the 'student' table and the 'sportsinfo' table using an INTERSECT operation to find common student identifiers (StuID) that meet both criteria.",
            "question": "Show student ids who are female and play football."
        },
        {
            "sample_id": 6045,
            "gold_sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.age FROM student WHERE student.stuid IN (SELECT student.stuid FROM sportsinfo WHERE sportsinfo.sportname = None.\"football\" INTERSECT SELECT student.stuid FROM sportsinfo WHERE sportsinfo.sportname = None.\"lacrosse\")",
            "ba": "The virtual table describes the first names and ages of students from the 'student' table who are involved in both football and lacrosse. The query uses a subquery to find students participating in each sport and then intersects the results to identify those who play both.",
            "question": "What are the first names and ages of all students who are playing both Football and Lacrosse?"
        },
        {
            "sample_id": 5997,
            "gold_sql": "SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'",
            "gold_complexity": 6,
            "vt": "SELECT sportsinfo.stuid FROM sportsinfo WHERE sportsinfo.onscholarship = '[placeholder-type:string]'",
            "ba": "The virtual table identifies students who are participating in sports and are on a sports scholarship. It retrieves the unique student identifiers from the 'sportsinfo' table where the scholarship status matches a specified value.",
            "question": "What are the ids for all sporty students who are on scholarship?"
        },
        {
            "sample_id": 6012,
            "gold_sql": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT sportsinfo.sportname FROM sportsinfo WHERE sportsinfo.onscholarship = '[placeholder-type:string]' GROUP BY sportsinfo.sportname ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of sports in which students are participating, specifically those who are on a sports scholarship. The results are grouped by sport name and ordered by the count of students participating in each sport, with a limit on the number of results returned.",
            "question": "Which sport has most number of students on scholarship?"
        },
        {
            "sample_id": 5964,
            "gold_sql": "SELECT count(DISTINCT gtype) FROM Video_games",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT gtype) FROM video_games",
            "ba": "The virtual table counts the distinct types or genres of video games from the 'video_games' table.",
            "question": "How many video game types exist?"
        },
        {
            "sample_id": 6011,
            "gold_sql": "SELECT T2.Fname ,  T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT student.fname, student.lname FROM sportsinfo JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY sportsinfo.stuid ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the first and last names of students who participate in sports, grouped by their unique student identifier. The query joins the 'sportsinfo' table with the 'student' table to retrieve the names of students, and it orders the results based on the count of sports they are involved in, limiting the output to a specified number of students.",
            "question": "What is the first and last name of the student who played the most sports?"
        },
        {
            "sample_id": 6026,
            "gold_sql": "SELECT count(DISTINCT StuID) FROM Plays_games",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT StuID) FROM plays_games",
            "ba": "The virtual table counts the number of distinct students who have played video games from the 'plays_games' table. The placeholder represents the unique identifier for each student.",
            "question": "How many students play video games?"
        },
        {
            "sample_id": 5977,
            "gold_sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",
            "gold_complexity": 8,
            "vt": "SELECT video_games.gtype, COUNT(*) FROM video_games GROUP BY video_games.gtype",
            "ba": "The virtual table summarizes the count of video games grouped by their genre from the 'video_games' table. The placeholder in the SELECT clause represents the type of video game, while the COUNT function aggregates the total number of games for each genre.",
            "question": "What are the types of video games and how many are in each type?"
        },
        {
            "sample_id": 5987,
            "gold_sql": "SELECT Fname FROM Student WHERE Major  =  600",
            "gold_complexity": 6,
            "vt": "SELECT student.fname FROM student WHERE student.major = [placeholder-type:numeric]",
            "ba": "The virtual table describes the first names of students from the 'student' table who are enrolled in a specific major. The placeholder in the WHERE clause represents the major's name.",
            "question": "What are the first names for all students who are from the major numbered 600?"
        },
        {
            "sample_id": 6030,
            "gold_sql": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
            "gold_complexity": 6,
            "vt": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
            "ba": "The virtual table identifies students who are both participating in sports and playing video games. It does this by selecting the unique student identifiers (StuID) from the 'Sportsinfo' table and intersecting them with the unique student identifiers from the 'Plays_games' table. This intersection ensures that only students who are involved in both activities are included in the result.",
            "question": "Show ids of students who play video game and play sports."
        },
        {
            "sample_id": 6044,
            "gold_sql": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
            "gold_complexity": 16,
            "vt": "SELECT student.fname, student.age FROM student WHERE student.stuid IN (SELECT student.stuid FROM sportsinfo WHERE sportsinfo.sportname = None.\"football\" INTERSECT SELECT student.stuid FROM sportsinfo WHERE sportsinfo.sportname = None.\"lacrosse\")",
            "ba": "The virtual table describes the first names and ages of students from the 'student' table who are involved in both football and lacrosse sports. The query uses a subquery to find students participating in football and intersects it with another subquery for those participating in lacrosse, ensuring that only students who play both sports are selected.",
            "question": "Find the first name and age of the students who are playing both Football and Lacrosse."
        },
        {
            "sample_id": 5985,
            "gold_sql": "SELECT StuID FROM Student WHERE Advisor  =  1121",
            "gold_complexity": 6,
            "vt": "SELECT student.stuid FROM student WHERE student.advisor = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of students from the 'student' table who have a specific academic advisor. The placeholder in the WHERE clause represents the advisor's identifier.",
            "question": "What are the ids of all students who have advisor number 1121?"
        },
        {
            "sample_id": 6000,
            "gold_sql": "SELECT sum(gamesplayed) FROM Sportsinfo",
            "gold_complexity": 4,
            "vt": "SELECT SUM(sportsinfo.gamesplayed) FROM sportsinfo",
            "ba": "The virtual table calculates the total number of games played by students from the 'sportsinfo' table. It uses the SUM function to aggregate the 'gamesplayed' column, providing a total count of games across all students.",
            "question": "How many games are played for all students?"
        },
        {
            "sample_id": 5972,
            "gold_sql": "SELECT gtype FROM Video_games WHERE gname  =  \"Call of Destiny\"",
            "gold_complexity": 6,
            "vt": "SELECT video_games.gtype FROM video_games WHERE video_games.gname = None.\"call of destiny\"",
            "ba": "The virtual table retrieves the type or genre of a specific video game from the 'video_games' table based on its name. The placeholder in the WHERE clause represents the name of the video game being queried.",
            "question": "What is the type of video game Call of Destiny."
        },
        {
            "sample_id": 6029,
            "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
            "gold_complexity": 6,
            "vt": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
            "ba": "The virtual table identifies students who are not participating in any video games by selecting their unique identifiers from the 'student' table and excluding those who are found in the 'plays_games' table.",
            "question": "What are the ids of all students who are not video game players?"
        },
        {
            "sample_id": 5984,
            "gold_sql": "SELECT StuID FROM Student WHERE Advisor  =  1121",
            "gold_complexity": 6,
            "vt": "SELECT student.stuid FROM student WHERE student.advisor = [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the unique identifiers of students from the 'student' table who have a specific academic advisor. The placeholder in the WHERE clause represents the advisor's identifier.",
            "question": "Show ids for all students who have advisor 1121."
        },
        {
            "sample_id": 6037,
            "gold_sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT video_games.gname FROM plays_games JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY plays_games.gameid ORDER BY SUM(plays_games.hours_played) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of video games from the 'video_games' table that have been played by students, ordered by the total hours played. The query aggregates the hours played for each game and limits the results to a specified number of games.",
            "question": "What is the name of the game that has been played the most?"
        },
        {
            "sample_id": 5981,
            "gold_sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT video_games.gtype FROM video_games GROUP BY video_games.gtype ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a summary of the different types or genres of video games from the 'video_games' table. It groups the video games by their genre and orders them based on the count of games in each genre, limiting the results to a specified number of genres.",
            "question": "What is the type with the fewest games?"
        },
        {
            "sample_id": 5962,
            "gold_sql": "SELECT count(*) FROM Video_games",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM video_games",
            "ba": "The virtual table provides a count of all video games available in the 'video_games' table. This count gives an overview of the total number of unique video games without specifying any particular game or genre.",
            "question": "How many video games exist?"
        }
    ],
    "student_assessment": [
        {
            "sample_id": 98,
            "gold_sql": "SELECT first_name FROM people ORDER BY first_name",
            "gold_complexity": 6,
            "vt": "SELECT people.first_name FROM people ORDER BY people.first_name",
            "ba": "The virtual table lists the first names of all individuals from the 'people' table, sorted in alphabetical order. This allows for easy viewing of names without any filtering conditions.",
            "question": "What are the first names of the people in alphabetical order?"
        },
        {
            "sample_id": 60,
            "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
            "gold_complexity": 7,
            "vt": "SELECT people.first_name, people.last_name FROM candidates JOIN people AS T2 ON T1.candidate_id = T2.person_id",
            "ba": "The virtual table describes the first and last names of candidates by joining the 'candidates' table with the 'people' table. The join is performed on the candidate's ID and the person's ID, allowing us to retrieve the names associated with each candidate.",
            "question": "what are the first name and last name of all candidates?"
        },
        {
            "sample_id": 97,
            "gold_sql": "SELECT first_name FROM people ORDER BY first_name",
            "gold_complexity": 6,
            "vt": "SELECT people.first_name FROM people ORDER BY people.first_name",
            "ba": "The virtual table lists the first names of all individuals from the 'people' table, sorted in alphabetical order. This allows for easy viewing of names without any filtering conditions.",
            "question": "List the first names of people in alphabetical order?"
        },
        {
            "sample_id": 96,
            "gold_sql": "SELECT course_name FROM courses ORDER BY course_name",
            "gold_complexity": 6,
            "vt": "SELECT courses.course_name FROM courses ORDER BY courses.course_name",
            "ba": "The virtual table lists the names of all courses available in the 'courses' table, sorted in alphabetical order. This allows users to easily view and identify the courses offered.",
            "question": "What are the names of the courses in alphabetical order?"
        },
        {
            "sample_id": 66,
            "gold_sql": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
            "gold_complexity": 7,
            "vt": "SELECT student_course_registrations.student_id, courses.course_name FROM student_course_registrations JOIN courses AS T2 ON T1.course_id = T2.course_id",
            "ba": "The virtual table describes the student IDs along with the names of the courses they are registered for. It retrieves data from the 'student_course_registrations' table and joins it with the 'courses' table to get the course names associated with each student's registration.",
            "question": "What are the ids of all students for courses and what are the names of those courses?"
        },
        {
            "sample_id": 105,
            "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
            "gold_complexity": 9,
            "vt": "SELECT student_course_registrations.student_id FROM courses JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE courses.course_name = None.\"statistics\" ORDER BY student_course_registrations.registration_date",
            "ba": "The virtual table lists the unique identifiers of students who have registered for a specific course, in this case, the course named 'statistics'. The results are ordered by the date of registration.",
            "question": "List the id of students who registered course statistics in the order of registration date."
        },
        {
            "sample_id": 58,
            "gold_sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT student_course_registrations.student_id FROM student_course_registrations GROUP BY student_course_registrations.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists unique student identifiers from the 'student_course_registrations' table, grouping them to count the number of course registrations for each student. The results are ordered by the count of registrations in descending order, and a limit is applied to restrict the number of results returned based on a specified numeric value.",
            "question": "what is id of students who registered some courses but the least number of courses in these students?"
        },
        {
            "sample_id": 92,
            "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
            "gold_complexity": 6,
            "vt": "SELECT DISTINCT addresses.city FROM addresses JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
            "ba": "The virtual table lists distinct cities from the 'addresses' table that are associated with people through the 'people_addresses' relationship. The query joins the 'addresses' table with the 'people_addresses' table to filter and retrieve unique city names.",
            "question": "What are the different cities where people live?"
        },
        {
            "sample_id": 101,
            "gold_sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
            "gold_complexity": 8,
            "vt": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
            "ba": "The virtual table provides a list of course identifiers for a specific student by combining the courses they are registered for and the courses they have attended. It uses a UNION to merge results from two different tables: 'student_course_registrations' and 'student_course_attendance'. The placeholder in the WHERE clause represents the unique identifier of the student.",
            "question": "Find the id of courses which are registered or attended by student whose id is 121?"
        },
        {
            "sample_id": 67,
            "gold_sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT students.student_details FROM student_course_registrations JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY student_course_registrations.registration_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the detailed information of students who have registered for courses, sorted by the registration date. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What is detail of the student who most recently registered course?"
        },
        {
            "sample_id": 100,
            "gold_sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
            "gold_complexity": 6,
            "vt": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
            "ba": "The virtual table combines the unique identifiers of students who are either registered for courses or have attended courses. It pulls data from two different tables: 'student_course_registrations' for students who have registered and 'student_course_attendance' for those who have attended classes. The use of UNION ensures that each student ID is listed only once, regardless of whether they appear in one or both tables.",
            "question": "What are the ids of the students who either registered or attended a course?"
        },
        {
            "sample_id": 82,
            "gold_sql": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
            "gold_complexity": 10,
            "vt": "SELECT courses.course_name, COUNT(*) FROM students JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY student_course_registrations.course_id",
            "ba": "The virtual table summarizes the number of students registered for each course from the 'courses' table. It joins the 'students' table with the 'student_course_registrations' table to link students to their registered courses, and then groups the results by course to count the number of registrations for each course.",
            "question": "For each course id, how many students are registered and what are the course names?"
        },
        {
            "sample_id": 85,
            "gold_sql": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
            "gold_complexity": 8,
            "vt": "SELECT people.cell_mobile_number FROM candidates JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE candidate_assessments.asessment_outcome_code = None.\"fail\"",
            "ba": "The virtual table retrieves the mobile phone numbers of candidates who have undergone assessments, specifically filtering for those who did not pass their assessments. It joins the 'candidates' table with the 'candidate_assessments' table to access assessment outcomes and then links to the 'people' table to get the corresponding mobile numbers.",
            "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?"
        },
        {
            "sample_id": 108,
            "gold_sql": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
            "gold_complexity": 9,
            "vt": "SELECT student_course_attendance.student_id FROM courses JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE courses.course_name = None.\"statistics\" ORDER BY student_course_attendance.date_of_attendance",
            "ba": "The virtual table retrieves the identifiers of students who attended a specific course, in this case, the course named 'statistics'. It joins the 'courses' table with the 'student_course_attendance' table to filter the results based on the course name and orders the results by the date of attendance.",
            "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date."
        },
        {
            "sample_id": 74,
            "gold_sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
            "gold_complexity": 7,
            "vt": "SELECT candidates.candidate_id FROM people JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE people.email_address = stanley.\"stanley.monahan@example.org\"",
            "ba": "The virtual table retrieves the unique identifier of candidates from the 'candidates' table who are associated with a person in the 'people' table, filtered by a specific email address.",
            "question": "What is the id of the candidate whose email is stanley.monahan@example.org?"
        },
        {
            "sample_id": 56,
            "gold_sql": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT courses.course_name FROM courses JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY courses.course_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of courses from the 'courses' table, grouped by course ID and ordered by the number of registrations. The query limits the results to a specified number of courses.",
            "question": "which course has most number of registered students?"
        },
        {
            "sample_id": 75,
            "gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT candidate_assessments.candidate_id FROM candidate_assessments ORDER BY candidate_assessments.assessment_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the identifiers of candidates from the 'candidate_assessments' table, sorted by the date of their assessments. The placeholder in the LIMIT clause allows for specifying the maximum number of candidate IDs to return.",
            "question": "Find id of the candidate who most recently accessed the course?"
        },
        {
            "sample_id": 77,
            "gold_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT students.student_details FROM students JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY students.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of detailed information about students who are registered for courses. It aggregates the data by student ID and orders the results based on the number of course registrations, limiting the output to a specified number of students.",
            "question": "What is detail of the student who registered the most number of courses?"
        },
        {
            "sample_id": 64,
            "gold_sql": "SELECT student_id FROM student_course_attendance",
            "gold_complexity": 4,
            "vt": "SELECT student_course_attendance.student_id FROM student_course_attendance",
            "ba": "The virtual table lists the unique identifiers of students who have attended courses, as recorded in the 'student_course_attendance' table.",
            "question": "List the id of students who attended some courses?"
        },
        {
            "sample_id": 79,
            "gold_sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
            "gold_complexity": 9,
            "vt": "SELECT students.student_id, COUNT(*) FROM students JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY students.student_id",
            "ba": "The virtual table provides a count of course registrations for each student from the 'students' table. It joins the 'students' table with the 'student_course_registrations' table to aggregate the number of courses each student has registered for, grouping the results by the unique student identifier.",
            "question": "List the id of students who registered some courses and the number of their registered courses?"
        },
        {
            "sample_id": 93,
            "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT addresses.city FROM addresses JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
            "ba": "The virtual table describes the distinct cities from the 'addresses' table where students are associated with their addresses. It joins the 'addresses' table with the 'people_addresses' table to link addresses to people, and then further joins with the 'students' table to filter for those who are students.",
            "question": "Find distinct cities of address of students?"
        },
        {
            "sample_id": 88,
            "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
            "gold_complexity": 6,
            "vt": "SELECT student_course_attendance.student_id FROM student_course_attendance WHERE student_course_attendance.course_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the student IDs of students who attended a specific course from the 'student_course_attendance' table. The placeholder in the WHERE clause represents the course's identifier.",
            "question": "What are the ids of the students who registered for course 301?"
        },
        {
            "sample_id": 94,
            "gold_sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
            "gold_complexity": 7,
            "vt": "SELECT DISTINCT addresses.city FROM addresses JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
            "ba": "The virtual table describes the distinct cities from the 'addresses' table where students are associated with their addresses. The query joins the 'addresses' table with the 'people_addresses' table to link addresses to people, and then further joins with the 'students' table to filter for those who are students.",
            "question": "What are the different cities where students live?"
        },
        {
            "sample_id": 68,
            "gold_sql": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
            "gold_complexity": 8,
            "vt": "SELECT students.student_details FROM student_course_registrations JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY student_course_registrations.registration_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the detailed information of students who have registered for courses, ordered by their registration date. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What details do we have on the students who registered for courses most recently?"
        },
        {
            "sample_id": 71,
            "gold_sql": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
            "gold_complexity": 7,
            "vt": "SELECT COUNT(*) FROM courses JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE student_course_attendance.student_id = [placeholder-type:numeric]",
            "ba": "The virtual table provides a count of students who attended a specific course from the 'courses' table. It joins the 'courses' table with the 'student_course_attendance' table to filter attendance records based on a specific student identifier. The placeholder in the WHERE clause represents the unique identifier of the student whose attendance is being counted.",
            "question": "How many courses do the student whose id is 171 attend?"
        },
        {
            "sample_id": 76,
            "gold_sql": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
            "gold_complexity": 7,
            "vt": "SELECT candidate_assessments.candidate_id FROM candidate_assessments ORDER BY candidate_assessments.assessment_date LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table retrieves the identifiers of candidates from the 'candidate_assessments' table, sorted by the date of their assessments. The placeholder in the LIMIT clause allows for specifying the maximum number of candidate IDs to return.",
            "question": "What is the id of the candidate who most recently accessed the course?"
        },
        {
            "sample_id": 87,
            "gold_sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
            "gold_complexity": 6,
            "vt": "SELECT student_course_attendance.student_id FROM student_course_attendance WHERE student_course_attendance.course_id = [placeholder-type:numeric]",
            "ba": "The virtual table describes the student IDs of students who attended a specific course from the 'student_course_attendance' table. The placeholder in the WHERE clause represents the course's unique identifier.",
            "question": "What are the id of students who registered course 301?"
        },
        {
            "sample_id": 80,
            "gold_sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
            "gold_complexity": 9,
            "vt": "SELECT students.student_id, COUNT(*) FROM students JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY students.student_id",
            "ba": "The virtual table provides a count of course registrations for each student from the 'students' table. It joins the 'students' table with the 'student_course_registrations' table to aggregate the number of courses each student is registered for, grouping the results by the unique student identifier.",
            "question": "For every student who is registered for some course, how many courses are they registered for?"
        },
        {
            "sample_id": 83,
            "gold_sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
            "gold_complexity": 6,
            "vt": "SELECT candidate_assessments.candidate_id FROM candidate_assessments WHERE candidate_assessments.asessment_outcome_code = None.\"pass\"",
            "ba": "The virtual table retrieves the identifiers of candidates from the 'candidate_assessments' table who have not passed their assessments. The placeholder in the WHERE clause represents the outcome code for assessments that are considered a failure.",
            "question": "Find id of candidates whose assessment code is \"Pass\"?"
        },
        {
            "sample_id": 78,
            "gold_sql": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 10,
            "vt": "SELECT students.student_details FROM students JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY students.student_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides a list of detailed information about students who are registered for courses. It aggregates the data by student, counting the number of course registrations for each student, and orders the results based on the number of registrations. The placeholder in the LIMIT clause allows for specifying the maximum number of student details to return.",
            "question": "What are the details of the student who registered for the most number of courses?"
        },
        {
            "sample_id": 104,
            "gold_sql": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
            "gold_complexity": 10,
            "vt": "SELECT * FROM student_course_registrations WHERE NOT student_course_registrations.student_id IN (SELECT student_course_registrations.student_id FROM student_course_attendance)",
            "ba": "The virtual table retrieves all records from the 'student_course_registrations' table for students who have not attended any courses. It uses a subquery to filter out students based on their attendance records.",
            "question": "What are all details of the students who registered but did not attend any course?"
        }
    ],
    "storm_record": [
        {
            "sample_id": 2725,
            "gold_sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
            "gold_complexity": 9,
            "vt": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
            "ba": "The virtual table lists the names of storms that have affected both Afghanistan and Albania. It does this by joining the 'affected_region', 'region', and 'storm' tables to filter storms based on the regions they impacted.",
            "question": "Find the name of the storm that affected both Afghanistan and Albania regions."
        },
        {
            "sample_id": 2692,
            "gold_sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM storm WHERE storm.number_deaths > [placeholder-type:numeric]",
            "ba": "The virtual table counts the total number of storms from the 'storm' table that have a number of deaths greater than a specified value. The placeholder in the WHERE clause represents the threshold for the number of deaths.",
            "question": "Count the number of storms in which at least 1 person died."
        },
        {
            "sample_id": 2691,
            "gold_sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM storm WHERE storm.number_deaths > [placeholder-type:numeric]",
            "ba": "The virtual table counts the total number of storms from the 'storm' table that have a number of deaths greater than a specified value. The placeholder in the WHERE clause represents the threshold for the number of deaths.",
            "question": "How many storms had death records?"
        },
        {
            "sample_id": 2683,
            "gold_sql": "SELECT count(*) FROM region",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM region",
            "ba": "The virtual table counts the total number of regions from the 'region' table.",
            "question": "How many regions do we have?"
        },
        {
            "sample_id": 2698,
            "gold_sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
            "gold_complexity": 11,
            "vt": "SELECT SUM(storm.number_deaths), SUM(storm.damage_millions_usd) FROM storm WHERE storm.max_speed > (SELECT AVG(storm.max_speed) FROM storm)",
            "ba": "The virtual table summarizes the total number of deaths and estimated damage caused by storms that have a maximum wind speed greater than the average maximum wind speed of all storms. It aggregates data from the 'storm' table, focusing on the 'number_deaths' and 'damage_millions_usd' columns, while applying a condition based on the average maximum wind speed.",
            "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average."
        },
        {
            "sample_id": 2688,
            "gold_sql": "SELECT region_name FROM region ORDER BY region_name",
            "gold_complexity": 6,
            "vt": "SELECT region.region_name FROM region ORDER BY region.region_name",
            "ba": "The virtual table lists the names of all regions from the 'region' table, sorted in alphabetical order.",
            "question": "What are the names of the regions in alphabetical order?"
        },
        {
            "sample_id": 2697,
            "gold_sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)",
            "gold_complexity": 11,
            "vt": "SELECT SUM(storm.number_deaths), SUM(storm.damage_millions_usd) FROM storm WHERE storm.max_speed > (SELECT AVG(storm.max_speed) FROM storm)",
            "ba": "The virtual table summarizes the total number of deaths and estimated damage caused by storms that have a maximum wind speed greater than the average maximum wind speed of all storms. It aggregates data from the 'storm' table, focusing on the 'number_deaths' and 'damage_millions_usd' columns, while applying a condition based on the average maximum wind speed.",
            "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?"
        },
        {
            "sample_id": 2726,
            "gold_sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
            "gold_complexity": 9,
            "vt": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
            "ba": "The virtual table identifies the names of storms that have affected both Afghanistan and Albania. It does this by joining the 'affected_region', 'region', and 'storm' tables to filter storms based on the specified regions.",
            "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?"
        },
        {
            "sample_id": 2708,
            "gold_sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
            "gold_complexity": 9,
            "vt": "SELECT storm.name, COUNT(*) FROM storm JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY storm.storm_id",
            "ba": "The virtual table provides a summary of storm names along with the count of regions affected by each storm. It combines data from the 'storm' table and the 'affected_region' table, grouping the results by each unique storm identifier.",
            "question": "How many regions were affected by each storm?"
        },
        {
            "sample_id": 2706,
            "gold_sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
            "gold_complexity": 9,
            "vt": "SELECT region.region_name, COUNT(*) FROM region JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY region.region_id",
            "ba": "The virtual table summarizes the number of regions affected by storms, displaying the region names along with the count of occurrences. It joins the 'region' table with the 'affected_region' table to aggregate the data based on region identifiers.",
            "question": "How many storms occured in each region?"
        },
        {
            "sample_id": 2685,
            "gold_sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
            "gold_complexity": 8,
            "vt": "SELECT region.region_code, region.region_name FROM region ORDER BY region.region_code",
            "ba": "The virtual table lists the region codes and names from the 'region' table, ordered by the region code.",
            "question": "Show all region code and region name sorted by the codes."
        },
        {
            "sample_id": 2699,
            "gold_sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC",
            "gold_complexity": 8,
            "vt": "SELECT storm.name, storm.damage_millions_usd FROM storm ORDER BY storm.max_speed",
            "ba": "The virtual table provides the names and estimated damages of storms from the 'storm' table, ordered by their maximum wind speed. This allows users to see which storms caused the most damage and how they compare in terms of wind speed.",
            "question": "List name and damage for all storms in a descending order of max speed."
        },
        {
            "sample_id": 2723,
            "gold_sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1",
            "gold_complexity": 9,
            "vt": "SELECT region.region_name FROM affected_region JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY storm.number_deaths LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table lists the names of regions affected by storms, ordered by the number of deaths caused by those storms. The query joins the 'affected_region' table with the 'region' and 'storm' tables to retrieve the relevant region names, while limiting the results to a specified number.",
            "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people."
        },
        {
            "sample_id": 2686,
            "gold_sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
            "gold_complexity": 8,
            "vt": "SELECT region.region_code, region.region_name FROM region ORDER BY region.region_code",
            "ba": "The virtual table lists the region codes and names from the 'region' table, ordered by the region code.",
            "question": "What are the codes and names for all regions, sorted by codes?"
        },
        {
            "sample_id": 2687,
            "gold_sql": "SELECT region_name FROM region ORDER BY region_name",
            "gold_complexity": 6,
            "vt": "SELECT region.region_name FROM region ORDER BY region.region_name",
            "ba": "The virtual table lists the names of all regions from the 'region' table, sorted in alphabetical order.",
            "question": "List all region names in alphabetical order."
        },
        {
            "sample_id": 2701,
            "gold_sql": "SELECT count(DISTINCT region_id) FROM affected_region",
            "gold_complexity": 5,
            "vt": "SELECT COUNT(DISTINCT region_id) FROM affected_region",
            "ba": "The virtual table counts the distinct regions that were affected by storms from the 'affected_region' table. The placeholder in the COUNT function indicates that the query is interested in the unique identifiers of the regions.",
            "question": "How many regions are affected?"
        },
        {
            "sample_id": 2684,
            "gold_sql": "SELECT count(*) FROM region",
            "gold_complexity": 4,
            "vt": "SELECT COUNT(*) FROM region",
            "ba": "The virtual table counts the total number of regions from the 'region' table.",
            "question": "Count the number of regions."
        },
        {
            "sample_id": 2715,
            "gold_sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2",
            "ba": "The virtual table lists the names of storms from the 'storm' table that have not affected two or more regions. The query uses an EXCEPT clause to exclude storms that are linked to two or more affected regions, identified through a join with the 'affected_region' table. The placeholder in the query represents the condition for counting the number of affected regions.",
            "question": "Show all storm names except for those with at least two affected regions."
        },
        {
            "sample_id": 2713,
            "gold_sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
            "gold_complexity": 11,
            "vt": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING SUM(T2.number_city_affected) >= 10",
            "ba": "The virtual table identifies storms that have affected multiple regions and have caused significant impact in terms of the number of cities affected. It retrieves the names of storms that have been associated with at least two affected regions and where the total number of cities impacted by those storms is ten or more. The query uses a combination of JOIN operations to link the 'storm' and 'affected_region' tables, applying GROUP BY and HAVING clauses to filter the results based on the specified conditions.",
            "question": "Show storm name with at least two regions and 10 cities affected."
        },
        {
            "sample_id": 2711,
            "gold_sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
            "gold_complexity": 10,
            "vt": "SELECT storm.name FROM storm WHERE NOT storm.storm_id IN (SELECT storm.storm_id FROM affected_region)",
            "ba": "The virtual table lists the names of storms from the 'storm' table that have not affected any regions, as indicated by the absence of their storm IDs in the 'affected_region' table.",
            "question": "Show the name of storms which don't have affected region in record."
        },
        {
            "sample_id": 2693,
            "gold_sql": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
            "gold_complexity": 10,
            "vt": "SELECT storm.name, storm.dates_active, storm.number_deaths FROM storm WHERE storm.number_deaths >= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names, active dates, and number of deaths of storms from the 'storm' table that have caused a specified number of deaths. The placeholder in the WHERE clause represents the minimum number of deaths attributed to the storm.",
            "question": "List name, dates active, and number of deaths for all storms with at least 1 death."
        },
        {
            "sample_id": 2716,
            "gold_sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
            "gold_complexity": 10,
            "vt": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2",
            "ba": "The virtual table lists the names of storms from the 'storm' table that have not affected two or more regions. The query uses an EXCEPT clause to exclude storms that are linked to two or more entries in the 'affected_region' table, which indicates the number of regions impacted by each storm.",
            "question": "What are the names of storms that did not affect two or more regions?"
        },
        {
            "sample_id": 2705,
            "gold_sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
            "gold_complexity": 9,
            "vt": "SELECT region.region_name, COUNT(*) FROM region JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY region.region_id",
            "ba": "The virtual table summarizes the number of regions affected by storms, displaying the region names along with the count of occurrences. It joins the 'region' table with the 'affected_region' table to aggregate the data based on region identifiers.",
            "question": "Show the name for regions and the number of storms for each region."
        },
        {
            "sample_id": 2689,
            "gold_sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
            "gold_complexity": 6,
            "vt": "SELECT region.region_name FROM region WHERE region.region_name <> '[placeholder-type:string]'",
            "ba": "The virtual table describes the names of regions from the 'region' table that do not match a specified region name. The placeholder in the WHERE clause represents the region name to be excluded from the results.",
            "question": "Show names for all regions except for Denmark."
        },
        {
            "sample_id": 2709,
            "gold_sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT storm.name, storm.max_speed FROM storm JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY storm.storm_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the names and maximum wind speeds of storms from the 'storm' table, which are linked to the regions they affected through the 'affected_region' table. The results are grouped by storm identifier and ordered by the count of affected regions, with a limit on the number of results specified by a placeholder for numeric values.",
            "question": "What is the storm name and max speed which affected the greatest number of regions?"
        },
        {
            "sample_id": 2710,
            "gold_sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
            "gold_complexity": 12,
            "vt": "SELECT storm.name, storm.max_speed FROM storm JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY storm.storm_id ORDER BY COUNT(*) LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table provides the names and maximum wind speeds of storms from the 'storm' table, which are linked to the regions affected by those storms through the 'affected_region' table. The results are grouped by storm identifier and ordered by the count of affected regions, with a limit on the number of results specified by a placeholder for numeric values.",
            "question": "Return the name and max speed of the storm that affected the most regions."
        }
    ],
    "manufactory_1": [
        {
            "sample_id": 5301,
            "gold_sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
            "gold_complexity": 10,
            "vt": "SELECT manufacturers.name, MAX(manufacturers.revenue), manufacturers.headquarter FROM manufacturers GROUP BY manufacturers.headquarter",
            "ba": "The virtual table summarizes the names of manufacturers along with their maximum annual revenue and the location of their headquarters. The results are grouped by the headquarters location, allowing for an overview of the highest revenue generated by manufacturers in each location.",
            "question": "Find the name and revenue of the company that earns the highest revenue in each city."
        },
        {
            "sample_id": 5329,
            "gold_sql": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
            "gold_complexity": 12,
            "vt": "SELECT products.name, products.price FROM products WHERE products.price >= [placeholder-type:numeric] ORDER BY products.price, products.name",
            "ba": "The virtual table describes the names and prices of products from the 'products' table that have a price greater than or equal to a specified value. The results are ordered by price and then by product name.",
            "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order)."
        },
        {
            "sample_id": 5289,
            "gold_sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT manufacturers.name, manufacturers.headquarter, manufacturers.founder FROM manufacturers ORDER BY manufacturers.revenue LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names, headquarters, and founders of manufacturers from the 'manufacturers' table, ordered by their annual revenue. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue."
        },
        {
            "sample_id": 5268,
            "gold_sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'",
            "gold_complexity": 6,
            "vt": "SELECT manufacturers.headquarter FROM manufacturers WHERE manufacturers.founder = '[placeholder-type:string]'",
            "ba": "The virtual table describes the headquarters of manufacturers from the 'manufacturers' table who have a specific founder. The placeholder in the WHERE clause represents the name of the founder.",
            "question": "What is the headquarter of the company whose founder is James?"
        },
        {
            "sample_id": 5335,
            "gold_sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
            "gold_complexity": 9,
            "vt": "SELECT AVG(products.price), manufacturers.name FROM products JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY manufacturers.name",
            "ba": "The virtual table provides the average price of products grouped by the manufacturer name from the 'products' and 'manufacturers' tables. The join operation links products to their respective manufacturers using the manufacturer's code, allowing for aggregation of product prices by each manufacturer.",
            "question": "Select the average price of each manufacturer's products, showing the manufacturer's name."
        },
        {
            "sample_id": 5286,
            "gold_sql": "SELECT sum(revenue) FROM manufacturers WHERE Headquarter  =  'Tokyo' OR Headquarter  =  'Taiwan'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(manufacturers.revenue) FROM manufacturers WHERE manufacturers.headquarter = '[placeholder-type:string]' OR manufacturers.headquarter = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total annual revenue of manufacturers based on their headquarters' locations. The query filters manufacturers whose headquarters match either of the specified locations, represented by placeholders.",
            "question": "Return the total revenue of companies with headquarters in Tokyo or Taiwan."
        },
        {
            "sample_id": 5293,
            "gold_sql": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
            "gold_complexity": 9,
            "vt": "SELECT manufacturers.name FROM manufacturers WHERE manufacturers.revenue > (SELECT AVG(manufacturers.revenue) FROM manufacturers)",
            "ba": "The virtual table lists the names of manufacturers from the 'manufacturers' table whose annual revenue exceeds the average revenue of all manufacturers. The query uses a subquery to calculate the average revenue, and the placeholder represents this average value.",
            "question": "Find the name of companies whose revenue is greater than the average revenue of all companies."
        },
        {
            "sample_id": 5288,
            "gold_sql": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
            "gold_complexity": 8,
            "vt": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'",
            "ba": "The virtual table lists the names of products that are manufactured by both 'Creative Labs' and 'Sony'. It does this by joining the 'products' table with the 'manufacturers' table on the manufacturer code, and then filtering the results to include only those products that are associated with both manufacturers.",
            "question": "What are the names of products produced by both Creative Labs and Sony?"
        },
        {
            "sample_id": 5337,
            "gold_sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
            "gold_complexity": 11,
            "vt": "SELECT AVG(products.price), manufacturers.name FROM products JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY manufacturers.name HAVING AVG(products.price) >= [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average price of products grouped by the manufacturer's name from the 'products' and 'manufacturers' tables. It filters the results to include only those manufacturers whose average product price meets or exceeds a specified threshold.",
            "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150."
        },
        {
            "sample_id": 5282,
            "gold_sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
            "gold_complexity": 6,
            "vt": "SELECT manufacturers.founder FROM manufacturers WHERE manufacturers.name LIKE '[placeholder-type:string]'",
            "ba": "The virtual table describes the founder of a manufacturer from the 'manufacturers' table based on a specified manufacturer name. The placeholder in the WHERE clause represents the name of the manufacturer being queried.",
            "question": "Who is the founders of companies whose first letter is S?"
        },
        {
            "sample_id": 5305,
            "gold_sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
            "gold_complexity": 9,
            "vt": "SELECT AVG(products.price), manufacturers.name FROM products JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY manufacturers.name",
            "ba": "The virtual table provides the average price of products grouped by the manufacturer name. It combines data from the 'products' table and the 'manufacturers' table using a join on the manufacturer code.",
            "question": "Find the average prices of all products from each manufacture, and list each company's name."
        },
        {
            "sample_id": 5267,
            "gold_sql": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'",
            "gold_complexity": 6,
            "vt": "SELECT manufacturers.headquarter FROM manufacturers WHERE manufacturers.founder = '[placeholder-type:string]'",
            "ba": "The virtual table describes the headquarters of manufacturers from the 'manufacturers' table who have a specific founder. The placeholder in the WHERE clause represents the name of the founder.",
            "question": "Where is the headquarter of the company founded by James?"
        },
        {
            "sample_id": 5269,
            "gold_sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
            "gold_complexity": 8,
            "vt": "SELECT manufacturers.name, manufacturers.headquarter FROM manufacturers ORDER BY manufacturers.revenue",
            "ba": "The virtual table lists the names and headquarters of manufacturers from the 'manufacturers' table, ordered by their annual revenue. This allows users to see which manufacturers are the most financially successful and where they are located.",
            "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first."
        },
        {
            "sample_id": 5321,
            "gold_sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
            "gold_complexity": 6,
            "vt": "SELECT * FROM products WHERE products.price BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table retrieves all columns from the 'products' table for products whose price falls within a specified range. The placeholders represent the minimum and maximum price values.",
            "question": "Find all information of all the products with a price between $60 and $120."
        },
        {
            "sample_id": 5333,
            "gold_sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
            "gold_complexity": 8,
            "vt": "SELECT AVG(products.price), products.manufacturer FROM products GROUP BY products.manufacturer",
            "ba": "The virtual table provides the average retail price of products grouped by their respective manufacturers. It aggregates the prices of products and associates them with the unique identifier of each manufacturer.",
            "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code."
        },
        {
            "sample_id": 5284,
            "gold_sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150",
            "gold_complexity": 6,
            "vt": "SELECT manufacturers.name FROM manufacturers WHERE manufacturers.revenue BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of manufacturers from the 'manufacturers' table whose annual revenue falls within a specified range. The placeholders in the WHERE clause represent the lower and upper bounds of the revenue range.",
            "question": "What are the names of companies with revenue between 100 and 150?"
        },
        {
            "sample_id": 5270,
            "gold_sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
            "gold_complexity": 8,
            "vt": "SELECT manufacturers.name, manufacturers.headquarter FROM manufacturers ORDER BY manufacturers.revenue",
            "ba": "The virtual table lists the names and headquarters of manufacturers from the 'manufacturers' table, ordered by their annual revenue.",
            "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?"
        },
        {
            "sample_id": 5290,
            "gold_sql": "SELECT name ,  headquarter ,  founder FROM manufacturers ORDER BY revenue DESC LIMIT 1",
            "gold_complexity": 11,
            "vt": "SELECT manufacturers.name, manufacturers.headquarter, manufacturers.founder FROM manufacturers ORDER BY manufacturers.revenue LIMIT [placeholder-type:numeric]",
            "ba": "The virtual table describes the names, headquarters, and founders of manufacturers from the 'manufacturers' table, ordered by their annual revenue. The placeholder in the LIMIT clause represents the maximum number of records to return.",
            "question": "What are the names, headquarters and founders of the company with the highest revenue?"
        },
        {
            "sample_id": 5342,
            "gold_sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
            "gold_complexity": 11,
            "vt": "SELECT products.name, MAX(products.price), manufacturers.name FROM products JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY manufacturers.name",
            "ba": "The virtual table describes the names of products along with their maximum prices and the corresponding manufacturer names. It combines data from the 'products' and 'manufacturers' tables, grouping the results by manufacturer name to show the highest priced product for each manufacturer.",
            "question": "For each manufacturer name, what are the names and prices of their most expensive product?"
        },
        {
            "sample_id": 5322,
            "gold_sql": "SELECT * FROM products WHERE price BETWEEN 60 AND 120",
            "gold_complexity": 6,
            "vt": "SELECT * FROM products WHERE products.price BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric]",
            "ba": "The virtual table displays all columns from the 'products' table for products whose price falls within a specified range. The placeholders represent the minimum and maximum price values.",
            "question": "What is all the information of all the products that have a price between 60 and 120?"
        },
        {
            "sample_id": 5324,
            "gold_sql": "SELECT avg(price) FROM products",
            "gold_complexity": 4,
            "vt": "SELECT AVG(products.price) FROM products",
            "ba": "The virtual table calculates the average retail price of products from the 'products' table.",
            "question": "What is the average price across all products?"
        },
        {
            "sample_id": 5271,
            "gold_sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
            "gold_complexity": 6,
            "vt": "SELECT AVG(manufacturers.revenue), MAX(manufacturers.revenue), SUM(manufacturers.revenue) FROM manufacturers",
            "ba": "The virtual table provides aggregate financial metrics for manufacturers, including the average, maximum, and total annual revenue generated by all manufacturers listed in the 'manufacturers' table.",
            "question": "What are the average, maximum and total revenues of all companies?"
        },
        {
            "sample_id": 5313,
            "gold_sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), manufacturers.name FROM products JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY manufacturers.name",
            "ba": "The virtual table provides a count of products grouped by the manufacturer name from the 'manufacturers' table. It joins the 'products' table with the 'manufacturers' table using the manufacturer code to associate each product with its respective manufacturer. The result will show how many products each manufacturer has.",
            "question": "Find the number of products for each manufacturer, showing the name of each company."
        },
        {
            "sample_id": 5320,
            "gold_sql": "SELECT name FROM products WHERE price  <=  200",
            "gold_complexity": 6,
            "vt": "SELECT products.name FROM products WHERE products.price <= [placeholder-type:numeric]",
            "ba": "The virtual table describes the names of products from the 'products' table that have a retail price less than or equal to a specified value. The placeholder in the WHERE clause represents the maximum price limit for filtering the products.",
            "question": "What are the names of products with price at most 200?"
        },
        {
            "sample_id": 5315,
            "gold_sql": "SELECT Name FROM Products",
            "gold_complexity": 4,
            "vt": "SELECT products.name FROM products",
            "ba": "The virtual table describes the names of products from the 'products' table. The query does not include any filtering conditions, so it retrieves all product names available in the database.",
            "question": "Select the names of all the products in the store."
        },
        {
            "sample_id": 5302,
            "gold_sql": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
            "gold_complexity": 10,
            "vt": "SELECT manufacturers.name, MAX(manufacturers.revenue), manufacturers.headquarter FROM manufacturers GROUP BY manufacturers.headquarter",
            "ba": "The virtual table summarizes the names of manufacturers along with their maximum annual revenue and the location of their headquarters. The data is grouped by the headquarters location to provide insights into the highest revenue generated by manufacturers in each location.",
            "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?"
        },
        {
            "sample_id": 5306,
            "gold_sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
            "gold_complexity": 9,
            "vt": "SELECT AVG(products.price), manufacturers.name FROM products JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY manufacturers.name",
            "ba": "The virtual table provides the average price of products grouped by the manufacturer name from the 'products' and 'manufacturers' tables. The join operation links products to their respective manufacturers using the manufacturer's code, allowing for aggregation of product prices by each manufacturer.",
            "question": "What are the average prices of products for each manufacturer?"
        },
        {
            "sample_id": 5314,
            "gold_sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
            "gold_complexity": 9,
            "vt": "SELECT COUNT(*), manufacturers.name FROM products JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY manufacturers.name",
            "ba": "The virtual table summarizes the total number of products associated with each manufacturer by joining the 'products' and 'manufacturers' tables. It counts the products and groups the results by the manufacturer's name.",
            "question": "How many products are there for each manufacturer?"
        },
        {
            "sample_id": 5300,
            "gold_sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
            "gold_complexity": 8,
            "vt": "SELECT SUM(manufacturers.revenue), manufacturers.founder FROM manufacturers GROUP BY manufacturers.founder",
            "ba": "The virtual table summarizes the total annual revenue generated by each manufacturer, grouped by the founder's name. It aggregates the revenue from the 'manufacturers' table and associates it with the respective founder.",
            "question": "What is the total revenue of companies started by founder?"
        },
        {
            "sample_id": 5311,
            "gold_sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
            "gold_complexity": 9,
            "vt": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive'",
            "ba": "The virtual table lists the names of manufacturers that do not produce a specific product, in this case, a DVD drive. It uses a subquery to exclude manufacturers that are associated with the specified product name.",
            "question": "Find the name of companies that do not make DVD drive."
        },
        {
            "sample_id": 5291,
            "gold_sql": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
            "gold_complexity": 10,
            "vt": "SELECT manufacturers.name, manufacturers.headquarter, manufacturers.revenue FROM manufacturers ORDER BY manufacturers.revenue",
            "ba": "The virtual table describes the names, headquarters, and annual revenues of manufacturers from the 'manufacturers' table, ordered by their revenue. This allows users to see which manufacturers generate the most revenue and where they are located.",
            "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order."
        },
        {
            "sample_id": 5328,
            "gold_sql": "SELECT count(*) FROM products WHERE price >= 180",
            "gold_complexity": 6,
            "vt": "SELECT COUNT(*) FROM products WHERE products.price >= [placeholder-type:numeric]",
            "ba": "The virtual table counts the number of products from the 'products' table that have a price greater than or equal to a specified value. The placeholder in the WHERE clause represents the minimum price threshold for filtering the products.",
            "question": "How many products have prices of at least 180?"
        },
        {
            "sample_id": 5341,
            "gold_sql": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
            "gold_complexity": 11,
            "vt": "SELECT products.name, MAX(products.price), manufacturers.name FROM products JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY manufacturers.name",
            "ba": "The virtual table describes the names of products along with their maximum prices and the corresponding manufacturer names. It retrieves data from the 'products' table and joins it with the 'manufacturers' table based on the manufacturer code. The results are grouped by the manufacturer name to show the highest price for each product under each manufacturer.",
            "question": "Select the name of each manufacturer along with the name and price of its most expensive product."
        },
        {
            "sample_id": 5278,
            "gold_sql": "SELECT DISTINCT headquarter FROM manufacturers",
            "gold_complexity": 5,
            "vt": "SELECT DISTINCT manufacturers.headquarter FROM manufacturers",
            "ba": "The virtual table retrieves the unique headquarters locations of manufacturers from the 'manufacturers' table.",
            "question": "Give the distinct headquarters of manufacturers."
        },
        {
            "sample_id": 5343,
            "gold_sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name",
            "gold_complexity": 10,
            "vt": "SELECT products.code, products.name, MIN(products.price) FROM products GROUP BY products.name",
            "ba": "The virtual table displays the unique product codes and names from the 'products' table along with the minimum price for each product. The results are grouped by product name to ensure that each product is listed only once with its lowest price.",
            "question": "Select the code of the product that is cheapest in each product category."
        },
        {
            "sample_id": 5276,
            "gold_sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(manufacturers.revenue) FROM manufacturers WHERE manufacturers.headquarter = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total annual revenue generated by manufacturers based on their headquarters' location. The placeholder in the WHERE clause represents the specific location of the manufacturer's headquarters.",
            "question": "What is the sum of revenue from companies with headquarters in Austin?"
        },
        {
            "sample_id": 5318,
            "gold_sql": "SELECT name ,  price FROM products",
            "gold_complexity": 6,
            "vt": "SELECT products.name, products.price FROM products",
            "ba": "The virtual table describes the names and prices of products from the 'products' table.",
            "question": "What are the names and prices of all products in the store?"
        },
        {
            "sample_id": 5296,
            "gold_sql": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
            "gold_complexity": 11,
            "vt": "SELECT manufacturers.name FROM manufacturers WHERE manufacturers.revenue < (SELECT MIN(manufacturers.revenue) FROM manufacturers WHERE headquarter = 'Austin')",
            "ba": "The virtual table lists the names of manufacturers from the 'manufacturers' table whose annual revenue is less than the minimum revenue of manufacturers headquartered in Austin. The query uses a subquery to find the minimum revenue for the specified location.",
            "question": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?"
        },
        {
            "sample_id": 5309,
            "gold_sql": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
            "gold_complexity": 13,
            "vt": "SELECT COUNT(DISTINCT name) FROM products WHERE NOT manufacturers.name IN (SELECT products.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony')",
            "ba": "The virtual table counts the distinct product names from the 'products' table that are not associated with manufacturers named 'Sony'.",
            "question": "Find number of products which Sony does not make."
        },
        {
            "sample_id": 5334,
            "gold_sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer",
            "gold_complexity": 8,
            "vt": "SELECT AVG(products.price), products.manufacturer FROM products GROUP BY products.manufacturer",
            "ba": "The virtual table provides the average retail price of products grouped by their respective manufacturers. It aggregates the prices of products and associates them with the unique identifier of each manufacturer.",
            "question": "What are the average prices of products, grouped by manufacturer code?"
        },
        {
            "sample_id": 5298,
            "gold_sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
            "gold_complexity": 10,
            "vt": "SELECT SUM(manufacturers.revenue) FROM manufacturers WHERE manufacturers.revenue > (SELECT MIN(manufacturers.revenue) FROM manufacturers WHERE headquarter = 'Austin')",
            "ba": "The virtual table calculates the total revenue of manufacturers from the 'manufacturers' table whose revenue exceeds the minimum revenue of manufacturers located in a specific headquarter city. The placeholder in the subquery represents the name of the city.",
            "question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?"
        },
        {
            "sample_id": 5275,
            "gold_sql": "SELECT sum(revenue) FROM manufacturers WHERE headquarter  =  'Austin'",
            "gold_complexity": 6,
            "vt": "SELECT SUM(manufacturers.revenue) FROM manufacturers WHERE manufacturers.headquarter = '[placeholder-type:string]'",
            "ba": "The virtual table calculates the total annual revenue of manufacturers based on their headquarters location. The placeholder in the WHERE clause represents the specific location of the headquarters.",
            "question": "Find the total revenue created by the companies whose headquarter is located at Austin."
        },
        {
            "sample_id": 5299,
            "gold_sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
            "gold_complexity": 8,
            "vt": "SELECT SUM(manufacturers.revenue), manufacturers.founder FROM manufacturers GROUP BY manufacturers.founder",
            "ba": "The virtual table summarizes the total annual revenue generated by each manufacturer, grouped by the founder's name. It aggregates the revenue from the 'manufacturers' table and associates it with the respective founder.",
            "question": "Find the total revenue of companies of each founder."
        },
        {
            "sample_id": 5265,
            "gold_sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
            "gold_complexity": 6,
            "vt": "SELECT manufacturers.founder FROM manufacturers WHERE manufacturers.name = '[placeholder-type:string]'",
            "ba": "The virtual table describes the founder of a manufacturer from the 'manufacturers' table based on the specified manufacturer's name. The placeholder in the WHERE clause represents the name of the manufacturer.",
            "question": "Who is the founder of Sony?"
        },
        {
            "sample_id": 5317,
            "gold_sql": "SELECT name ,  price FROM products",
            "gold_complexity": 6,
            "vt": "SELECT products.name, products.price FROM products",
            "ba": "The virtual table describes the names and prices of products from the 'products' table.",
            "question": "Select the names and the prices of all the products in the store."
        },
        {
            "sample_id": 5297,
            "gold_sql": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
            "gold_complexity": 10,
            "vt": "SELECT SUM(manufacturers.revenue) FROM manufacturers WHERE manufacturers.revenue > (SELECT MIN(manufacturers.revenue) FROM manufacturers WHERE headquarter = 'Austin')",
            "ba": "The virtual table calculates the total revenue of manufacturers whose revenue exceeds the minimum revenue of manufacturers located in Austin. It aggregates the revenue from the 'manufacturers' table, applying a filter based on a subquery that determines the minimum revenue for those headquartered in Austin.",
            "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin."
        },
        {
            "sample_id": 5326,
            "gold_sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
            "gold_complexity": 6,
            "vt": "SELECT AVG(products.price) FROM products WHERE products.manufacturer = [placeholder-type:numeric]",
            "ba": "The virtual table calculates the average retail price of products from the 'products' table for a specific manufacturer. The placeholder in the WHERE clause represents the unique identifier of the manufacturer.",
            "question": "What is the average price of products with manufacturer codes equal to 2?"
        },
        {
            "sample_id": 5344,
            "gold_sql": "SELECT code ,  name ,  min(price) FROM products GROUP BY name",
            "gold_complexity": 10,
            "vt": "SELECT products.code, products.name, MIN(products.price) FROM products GROUP BY products.name",
            "ba": "The virtual table displays the unique product codes and names from the 'products' table along with the minimum price for each product. The query groups the results by product name to ensure that each product is listed only once, along with its lowest price.",
            "question": "What are the codes and names of the cheapest products in each category?"
        }
    ]
}