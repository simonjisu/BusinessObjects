db_id,sample_id,target_complexity,question,target,no_bos_pred,with_bos_pred,vt,ba,BO_complexity
retails,6831,26,What is the region with the most customers?,"SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1","SELECT n_regionkey, COUNT(c_custkey) AS customer_count FROM customer JOIN nation ON customer.c_nationkey = nation.n_nationkey GROUP BY n_regionkey ORDER BY customer_count DESC LIMIT 1;",SELECT region.r_name FROM region INNER JOIN nation ON region.r_regionkey = nation.n_regionkey INNER JOIN customer ON nation.n_nationkey = customer.c_nationkey GROUP BY region.r_name ORDER BY COUNT(customer.c_custkey) DESC LIMIT 1,SELECT COUNT(region.r_regionkey) FROM region INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE region.r_name = '[placeholder-type:string]',The virtual table counts the number of regions from the 'region' table that are associated with suppliers from the 'supplier' table through the 'nation' table. The placeholder in the WHERE clause represents the name of the region being queried.,8
language_corpus,5760,13,"How many times that the word pair of ""barcelona"" and ""precolombina"" occur?",SELECT SUM(occurrences) FROM biwords WHERE w1st = ( SELECT wid FROM words WHERE word = 'barcelona' ) AND w2nd = ( SELECT wid FROM words WHERE word = 'precolombina' ),SELECT occurrences FROM biwords WHERE w1st = (SELECT wid FROM words WHERE word = 'barcelona' LIMIT 1) AND w2nd = (SELECT wid FROM words WHERE word = 'precolombina' LIMIT 1) AND lid = 1;,SELECT SUM(biwords.occurrences) FROM biwords INNER JOIN words AS w1 ON biwords.w1st = w1.wid INNER JOIN words AS w2 ON biwords.w2nd = w2.wid WHERE w1.word = 'barcelona' AND w2.word = 'precolombina',SELECT SUM(biwords.occurrences) FROM words INNER JOIN biwords AS T2 ON T1.wid = T2.w1st OR T1.wid = T2.w2nd WHERE biwords.w1st IN ((SELECT words.wid FROM words WHERE word = 'nombre') OR biwords.w2nd IN (SELECT words.wid FROM words WHERE word = 'nombre')),"The virtual table calculates the total occurrences of biword pairs that include a specific word from the 'words' table. It does this by joining the 'words' table with the 'biwords' table, checking for occurrences where the first or second word in the biword pair matches the specified word. The result is a sum of all occurrences of these biword pairs.",13
synthea,1400,12,What is the most common condition among the patients who received influenza seasonal injectable preservative free immunization?,SELECT T2.DESCRIPTION FROM immunizations AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.DESCRIPTION = 'Influenza  seasonal  injectable  preservative free' GROUP BY T2.DESCRIPTION ORDER BY COUNT(T2.DESCRIPTION) DESC LIMIT 1,"SELECT conditions.description, COUNT(conditions.description) AS condition_count FROM patients JOIN immunizations ON patients.patient = immunizations.patient JOIN conditions ON patients.patient = conditions.patient WHERE immunizations.description = 'Influenza  seasonal  injectable  preservative free' GROUP BY conditions.description ORDER BY condition_count DESC LIMIT 1;",SELECT conditions.description FROM patients INNER JOIN immunizations ON patients.patient = immunizations.patient INNER JOIN conditions ON patients.patient = conditions.patient WHERE immunizations.description = 'Influenza  seasonal  injectable  preservative free' GROUP BY conditions.description ORDER BY COUNT(conditions.description) DESC LIMIT 1,SELECT patients.patient FROM patients INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN all_prevalences AS T3 ON T3.ITEM = T2.DESCRIPTION ORDER BY all_prevalences.occurrences LIMIT [placeholder-type:numeric],"The virtual table lists unique patient identifiers from the 'patients' table who have conditions that match prevalent diseases recorded in the 'all_prevalences' table. The results are filtered to include only those patients with specific conditions, and they are ordered by the number of occurrences of these conditions, with a limit on the number of results returned.",9
talkingdata,1053,23,What is the gender of the majority of Vivo phone users?,"SELECT T.gender FROM ( SELECT T2.gender, COUNT(T2.gender) AS num FROM phone_brand_device_model2 AS T1 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE T1.phone_brand = 'vivo' GROUP BY T2.gender ) AS T ORDER BY T.num DESC LIMIT 1","SELECT gender, COUNT(*) as count FROM gender_age INNER JOIN phone_brand_device_model2 ON gender_age.device_id = phone_brand_device_model2.device_id WHERE phone_brand = 'vivo' GROUP BY gender ORDER BY count DESC LIMIT 1;",SELECT CASE WHEN SUM(CASE WHEN gender_age.gender = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN gender_age.gender = 'F' THEN 1 ELSE 0 END) THEN 'M' ELSE 'F' END AS majority_gender FROM phone_brand_device_model2 INNER JOIN gender_age ON gender_age.device_id = phone_brand_device_model2.device_id WHERE phone_brand_device_model2.phone_brand = 'vivo',"SELECT SUM(CASE WHEN gender_age.gender = '[placeholder-type:string]' THEN [placeholder-type:numeric] ELSE [placeholder-type:numeric] END) * [placeholder-type:numeric] / COUNT(gender_age.device_id), SUM(CASE WHEN gender_age.gender = '[placeholder-type:string]' THEN [placeholder-type:numeric] ELSE [placeholder-type:numeric] END) * [placeholder-type:numeric] / COUNT(gender_age.device_id) FROM phone_brand_device_model2 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE phone_brand_device_model2.phone_brand = '[placeholder-type:string]'","The virtual table calculates the weighted average of two numeric values based on the gender of users associated with specific devices. It aggregates data from the 'phone_brand_device_model2' and 'gender_age' tables, filtering results by a specified phone brand. The placeholders represent the gender, numeric values for calculations, and the phone brand to filter the results.",8
simpson_episodes,4225,16,"Mention the episode ID, title and any three keywords of the episode which get the most number of votes in star classification of worst.","SELECT DISTINCT T3.episode_id, T2.title, T1.keyword FROM Keyword AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Vote AS T3 ON T2.episode_id = T3.episode_id WHERE T3.stars = 1 ORDER BY T3.votes DESC LIMIT 3;","SELECT e.episode_id, e.title, k.keyword FROM episode e JOIN vote v ON e.episode_id = v.episode_id JOIN keyword k ON e.episode_id = k.episode_id WHERE v.stars = 1 LIMIT 3;","SELECT episode.episode_id, episode.title, keyword.keyword FROM episode INNER JOIN vote ON episode.episode_id = vote.episode_id INNER JOIN keyword ON episode.episode_id = keyword.episode_id WHERE vote.stars <= 5 ORDER BY vote.votes DESC LIMIT 3",SELECT episode.title FROM episode INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE vote.votes > [placeholder-type:numeric] AND vote.stars = [placeholder-type:numeric],The virtual table describes the titles of episodes from the 'episode' table that have received a certain number of votes and a specific star rating. The placeholders in the WHERE clause represent the minimum number of votes and the exact star rating to filter the results.,9
california_schools,9465,14,"What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?","SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1","SELECT frpm.cname, AVG(satscores.avgscrmath) AS average_math_score FROM satscores JOIN frpm ON satscores.cds = frpm.cdscode GROUP BY satscores.sname ORDER BY (AVG(satscores.avgscrread) + AVG(satscores.avgscrmath) + AVG(satscores.avgscrwrite)) ASC LIMIT 1;","SELECT schools.county, satscores.avgscrmath FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE (satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite) = (SELECT MIN((satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite)) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode)",SELECT COUNT(satscores.cds) FROM satscores INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE schools.mailcity = '[placeholder-type:string]' AND (satscores.avgscrread + satscores.avgscrmath + satscores.avgscrwrite) >= [placeholder-type:numeric],"The virtual table counts the number of SAT scores from the 'satscores' table for schools located in a specific city, where the average scores in Reading, Math, and Writing meet or exceed a specified threshold. It joins the 'satscores' table with the 'schools' table based on the CDSCode to filter the results by the city name and the combined average scores.",9
mental_health_survey,4603,12,"What was the most common answer for the question ""What country do you work in?""?",SELECT T1.AnswerText FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext = 'What country do you work in?' GROUP BY T1.AnswerText ORDER BY COUNT(T1.AnswerText) DESC LIMIT 1,"SELECT answer.answertext, COUNT(answer.answertext) AS answer_count FROM answer JOIN question ON answer.questionid = question.questionid WHERE question.questiontext = 'What country do you work in?' GROUP BY answer.answertext ORDER BY answer_count DESC LIMIT 1;",SELECT answer.answertext FROM answer INNER JOIN question ON answer.questionid = question.questionid WHERE question.questiontext = 'What country do you work in?' GROUP BY answer.answertext ORDER BY COUNT(answer.answertext) DESC LIMIT 1,SELECT answer.answertext FROM answer INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE question.questionid = [placeholder-type:numeric] AND answer.answertext = '[placeholder-type:string]',The virtual table retrieves specific answers from the 'answer' table based on a given question ID and answer text. It joins the 'answer' table with the 'question' table to ensure that the answers correspond to the correct questions.,8
chicago_crime,8611,12,Which district had the most number of first degree murders? Give the district number.,SELECT T2.district_no FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.secondary_description = 'FIRST DEGREE MURDER' GROUP BY T2.district_no ORDER BY COUNT(*) DESC LIMIT 1,SELECT district_no FROM district INNER JOIN crime ON district.district_no = crime.district_no WHERE crime.fbi_code_no = 'MURDER_CODE' GROUP BY district_no ORDER BY COUNT(*) DESC LIMIT 1;,SELECT district.district_no FROM crime INNER JOIN iucr ON crime.iucr_no = iucr.iucr_no INNER JOIN district ON crime.district_no = district.district_no WHERE iucr.primary_description = 'HOMICIDE' AND iucr.secondary_description = 'FIRST DEGREE MURDER' GROUP BY district.district_no ORDER BY COUNT(*) DESC LIMIT 1,SELECT district.district_name FROM iucr INNER JOIN Crime AS T2 ON T2.iucr_no = T1.iucr_no INNER JOIN District AS T3 ON T3.district_no = T2.district_no WHERE iucr.primary_description = '[placeholder-type:string]' GROUP BY district.district_name ORDER BY COUNT(iucr.primary_description) LIMIT [placeholder-type:numeric],"The virtual table provides a list of district names from the 'district' table based on the classification of crimes recorded in the 'iucr' table. It filters the results by a specific primary description of the crime, allowing users to see which districts have reported incidents of that type. The results are grouped by district name and ordered by the count of incidents, with a limit on the number of districts returned.",13
world_development_indicators,2230,14,What is the average number of passengers carried via air transport per year by Bulgaria between 1970 to 1980? Indicate the country's system of trade.,"SELECT AVG(T1.Value), T2.SystemOfTrade FROM Indicators AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IndicatorName = 'Air transport, passengers carried' AND T1.Year >= 1970 AND T1.Year < 1981 AND T1.CountryName = 'Bulgaria'","SELECT AVG(value) AS average_passengers, country.systemoftrade FROM indicators INNER JOIN country ON indicators.countrycode = country.countrycode WHERE indicators.indicatorname = 'Air transport, passengers carried' AND indicators.countrycode = 'Bulgaria' AND indicators.year BETWEEN 1970 AND 1980;","SELECT CAST(SUM(indicators.value) AS FLOAT) / COUNT(indicators.year) AS average_passengers, country.systemoftrade FROM country INNER JOIN indicators ON country.countrycode = indicators.countrycode WHERE country.alpha2code = 'BG' AND indicators.year BETWEEN '1970' AND '1980' AND indicators.indicatorname = 'Air transport, passengers carried' GROUP BY country.systemoftrade",SELECT CAST(SUM(indicators.value) AS FLOAT) * [placeholder-type:numeric] / COUNT(indicators.year) FROM country INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE country.alpha2code = '[placeholder-type:string]' AND indicators.indicatorname = '[placeholder-type:string]',"The virtual table calculates the average value of a specific indicator for a country identified by its alpha-2 code. It sums up the values from the 'indicators' table, casts the sum to a float, and then divides it by the count of years for that indicator. The placeholders represent the alpha-2 code of the country and the name of the indicator.",9
debit_card_specializing,10910,14,Who among KAM's customers consumed the most? How much did it consume?,"SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1","SELECT c.customerid, SUM(t.amount) AS total_consumption FROM customers c JOIN transactions_1k t ON c.customerid = t.customerid WHERE c.segment = 'KAM' GROUP BY c.customerid ORDER BY total_consumption DESC LIMIT 1;","SELECT customers.customerid, SUM(yearmonth.consumption) AS total_consumption FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE customers.segment = 'KAM' GROUP BY customers.customerid ORDER BY total_consumption DESC LIMIT 1",SELECT customers.customerid FROM customers INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE yearmonth.date = '[placeholder-type:string]' AND customers.segment = '[placeholder-type:string]' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) LIMIT [placeholder-type:numeric],"The virtual table retrieves the unique customer IDs from the 'customers' table who belong to a specific segment and have consumption data for a given date. The results are grouped by customer ID and ordered by the total consumption, with a limit on the number of results returned.",13
debit_card_specializing,10894,13,"In 2012, who had the least consumption in LAM?","SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1","SELECT y.customerid, SUM(y.consumption) AS total_consumption FROM yearmonth y JOIN customers c ON y.customerid = c.customerid WHERE strftime('%Y', y.date) = '2012' AND c.segment = 'LAM' GROUP BY y.customerid ORDER BY total_consumption ASC LIMIT 1;",SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date LIKE '2012%' AND customers.segment = 'LAM' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) ASC LIMIT 1,SELECT customers.customerid FROM customers INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE yearmonth.date = '[placeholder-type:string]' AND customers.segment = '[placeholder-type:string]' GROUP BY customers.customerid ORDER BY SUM(yearmonth.consumption) LIMIT [placeholder-type:numeric],"The virtual table retrieves the unique customer IDs from the 'customers' table who belong to a specific segment and have consumption data for a given date. The results are grouped by customer ID and ordered by the total consumption, with a limit on the number of results returned.",13
software_company,8570,12,What is the income of female customers ages from 30 to 55 years old and has an occupation of machine-op-inspct?,SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct',SELECT (CAST(d.inhabitants_k AS NUMERIC) * CAST(d.income_k AS NUMERIC) * 12) AS total_income_per_year FROM customers c JOIN demog d ON c.geoid = d.geoid WHERE c.sex = 'Female' AND c.age BETWEEN 30 AND 55 AND c.occupation = 'Machine-op-inspct';,SELECT demog.income_k FROM demog JOIN customers ON demog.geoid = customers.geoid WHERE customers.sex = 'Female' AND customers.age BETWEEN 30 AND 55 AND customers.occupation = 'Machine-op-inspct',SELECT demog.income_k FROM demog WHERE demog.geoid IN (SELECT demog.geoid FROM Customers WHERE EDUCATIONNUM < 5 AND SEX = 'Female' AND MARITAL_STATUS = 'Widowed'),The virtual table retrieves the average income per inhabitant from the 'demog' table for geographic identifiers associated with female customers who have less than a specified level of education and are widowed.,15
olympics,4978,12,List out all the gold medalist winners in cycling sport.,SELECT DISTINCT T5.full_name FROM event AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.event_id INNER JOIN games_competitor AS T3 ON T2.competitor_id = T3.id INNER JOIN sport AS T4 ON T1.sport_id = T4.id INNER JOIN person AS T5 ON T3.person_id = T5.id WHERE T4.sport_name = 'Cycling' AND T2.medal_id = 1,SELECT person.full_name FROM competitor_event JOIN games_competitor ON competitor_event.competitor_id = games_competitor.id JOIN event ON competitor_event.event_id = event.id JOIN sport ON event.sport_id = sport.id JOIN medal ON competitor_event.medal_id = medal.id WHERE sport.sport_name = 'Cycling' AND medal.medal_name = 'Gold',SELECT DISTINCT person.full_name FROM person INNER JOIN games_competitor ON person.id = games_competitor.person_id INNER JOIN competitor_event ON games_competitor.id = competitor_event.competitor_id INNER JOIN event ON competitor_event.event_id = event.id INNER JOIN sport ON event.sport_id = sport.id WHERE competitor_event.medal_id = 1 AND sport.sport_name = 'Cycling',SELECT DISTINCT medal.medal_name FROM medal INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE competitor_event.competitor_id = [placeholder-type:numeric],"The virtual table lists the distinct names of medals from the 'medal' table that have been awarded to a specific competitor in the Olympic events. The query joins the 'medal' table with the 'competitor_event' table to filter the results based on the competitor's ID, represented by a placeholder for numeric values.",8
trains,717,13,Which direction do most of the trains with rectangle-shaped second cars run?,SELECT T2.direction FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T1.position = 2 AND T1.shape = 'rectangle' GROUP BY T2.direction ORDER BY COUNT(T2.id) DESC LIMIT 1,"SELECT trains.direction, COUNT(*) AS count FROM cars JOIN trains ON cars.train_id = trains.id WHERE cars.shape = 'rectangle' AND cars.position = '2' GROUP BY trains.direction ORDER BY count DESC LIMIT 1;",SELECT trains.direction FROM cars INNER JOIN trains ON cars.train_id = trains.id WHERE cars.shape = 'rectangle' AND cars.position = '2' GROUP BY trains.direction ORDER BY COUNT(*) DESC LIMIT 1,SELECT trains.direction FROM cars INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE cars.shape = '[placeholder-type:string]',"The virtual table retrieves the direction of trains associated with cars that have a specific shape. It joins the 'cars' table with the 'trains' table based on the train_id, allowing us to filter the results based on the shape of the cars.",7
law_episode,1290,12,What is the title of the episode that has the highest number of crews in the Art Department?,SELECT T2.title FROM Credit AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.category = 'Art Department' GROUP BY T2.episode_id ORDER BY COUNT(T1.category) DESC LIMIT 1,"SELECT e.title FROM episode e JOIN (SELECT episode_id, COUNT(*) AS crew_count FROM credit WHERE category = 'Art Department' GROUP BY episode_id) AS c ON e.episode_id = c.episode_id ORDER BY c.crew_count DESC LIMIT 1;",SELECT episode.title FROM episode INNER JOIN credit ON episode.episode_id = credit.episode_id WHERE credit.category = 'Art Department' GROUP BY episode.episode_id ORDER BY COUNT(credit.person_id) DESC LIMIT 1,SELECT episode.title FROM episode INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE keyword.keyword = '[placeholder-type:string]',"The virtual table describes the titles of episodes from the 'episode' table that are associated with a specific keyword. The query uses an inner join with the 'keyword' table to filter episodes based on the provided keyword, represented by a placeholder.",7
european_football_2,10447,13,Give the name of the league had the most goals in the 2016 season?,SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1,"SELECT league.name AS league_name, SUM(match.home_team_goal + match.away_team_goal) AS total_goals FROM match JOIN league ON match.league_id = league.id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY total_goals DESC LIMIT 1;",SELECT league.name FROM league JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name HAVING SUM(match.home_team_goal + match.away_team_goal) = (SELECT MAX(total_goals) FROM (SELECT SUM(home_team_goal + away_team_goal) AS total_goals FROM match WHERE season = '2015/2016' GROUP BY league_id)),SELECT league.name FROM league JOIN Match AS t2 ON t1.id = t2.league_id WHERE match.season = '[placeholder-type:string]' GROUP BY league.name HAVING COUNT(match.id) = (SELECT MAX(subquery_q0.match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id)),"The virtual table lists the names of leagues from the 'league' table that have the maximum number of matches played in a specified season. It joins the 'league' table with the 'match' table to filter leagues based on the number of matches in that season, using a subquery to determine the maximum match count for comparison.",21
european_football_2,10520,12,What is Ajax's highest chance creation passing score and what is it classified as?,"SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1","SELECT chancecreationpassing, chancecreationpassingclass FROM team_attributes INNER JOIN team ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY date DESC LIMIT 1;","SELECT MAX(team_attributes.chancecreationpassing) AS highest_chance_creation_passing_score, team_attributes.chancecreationpassingclass AS classification FROM team_attributes JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Ajax'",SELECT player_attributes.preferred_foot FROM player_attributes WHERE NOT player_attributes.potential IS NULL ORDER BY player_attributes.potential LIMIT [placeholder-type:numeric],"The virtual table retrieves the preferred foot of players from the 'player_attributes' table, specifically for those players who have a defined potential score. The results are ordered by the potential score in ascending order, and a limit is applied to restrict the number of records returned based on a specified numeric value.",9
public_review_platform,3992,13,List all the tires businesses that are opened everyday.,SELECT DISTINCT T2.business_id FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE T1.category_name = 'Tires' GROUP BY T2.business_id HAVING COUNT(day_id) = 7,"SELECT b.business_id, b.city, b.state FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN business_hours bh ON b.business_id = bh.business_id WHERE bc.category_id = (SELECT category_id FROM categories WHERE category_name = 'Tires') GROUP BY b.business_id HAVING COUNT(DISTINCT bh.day_id) = 7;",SELECT business.business_id FROM business INNER JOIN business_categories ON business.business_id = business_categories.business_id INNER JOIN categories ON business_categories.category_id = categories.category_id INNER JOIN business_hours ON business.business_id = business_hours.business_id GROUP BY business.business_id HAVING COUNT(DISTINCT business_hours.day_id) = 7 AND categories.category_name = 'Tires',SELECT categories.category_name FROM categories INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id INNER JOIN Business_Hours AS T4 ON T3.business_id = T4.business_id WHERE business.city LIKE '[placeholder-type:string]' AND business_hours.opening_time < '[placeholder-type:string]',The virtual table retrieves the names of categories from the 'categories' table for businesses located in a specific city that open before a certain time. It joins multiple tables to connect categories with businesses and their operating hours.,11
video_games,3449,16,Which platform is the most popular in Europe?,SELECT T.platform_name FROM ( SELECT T4.platform_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE T1.region_name = 'Europe' ORDER BY T2.num_sales DESC LIMIT 1 ) t,"SELECT platform.platform_name, SUM(region_sales.num_sales) AS total_sales FROM platform JOIN game_platform ON platform.id = game_platform.platform_id JOIN region_sales ON game_platform.id = region_sales.game_platform_id JOIN region ON region.id = region_sales.region_id WHERE region.region_name = 'Europe' GROUP BY platform.platform_name ORDER BY total_sales DESC LIMIT 1;",SELECT platform.platform_name FROM region INNER JOIN region_sales ON region.id = region_sales.region_id INNER JOIN game_platform ON region_sales.game_platform_id = game_platform.id INNER JOIN platform ON game_platform.platform_id = platform.id WHERE region.region_name = 'Europe' ORDER BY region_sales.num_sales DESC LIMIT 1,SELECT platform.platform_name FROM region INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN platform AS T4 ON T3.platform_id = T4.id WHERE region.region_name = '[placeholder-type:string]' ORDER BY region_sales.num_sales LIMIT [placeholder-type:numeric],"The virtual table lists the names of game platforms from the 'platform' table that are associated with a specific region. It joins multiple tables to filter the platforms based on the sales data in that region, allowing users to see which platforms are most popular in a given area.",12
formula_1,10300,12,Who was the driver that got the best lap time in the race No. 348? Give his full name.,"SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",SELECT d.forename || ' ' || d.surname AS full_name FROM laptimes lt JOIN drivers d ON lt.driverid = d.driverid WHERE lt.raceid = '348' ORDER BY lt.milliseconds ASC LIMIT 1;,"SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = '348' AND laptimes.time = (SELECT MIN(time) FROM laptimes WHERE raceid = '348')","SELECT DISTINCT drivers.forename, drivers.surname, drivers.url FROM laptimes INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE laptimes.raceid = [placeholder-type:numeric] AND laptimes.time LIKE '[placeholder-type:string]'","The virtual table provides a list of distinct drivers' first names, surnames, and URLs from the 'drivers' table who participated in a specific race identified by its race ID. The query filters the lap times based on a specific time pattern using a placeholder for string values.",14
formula_1,10413,12,What is the full name and date of birth of Austrian drivers born between 1981 and 1991?,"SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'","SELECT (forename || ' ' || surname) AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-01-20';","SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob >= '1981-01-01' AND drivers.dob <= '1991-01-20'",SELECT drivers.nationality FROM drivers WHERE NOT drivers.dob IS NULL ORDER BY drivers.dob LIMIT [placeholder-type:numeric],"The virtual table retrieves the nationalities of drivers from the 'drivers' table who have a recorded date of birth. The results are ordered by the date of birth in ascending order, and the number of results returned is limited by a placeholder for numeric values.",9
restaurant,1780,12,In which region can you find the highest number of Baskin Robbins restaurants?,SELECT T2.region AS num FROM generalinfo AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T1.label = 'baskin robbins' GROUP BY T2.region ORDER BY COUNT(T1.city) DESC LIMIT 1,"SELECT geographic.region, COUNT(*) AS num_restaurants FROM generalinfo JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.food_type = 'baskin robbins' GROUP BY geographic.region ORDER BY num_restaurants DESC LIMIT 1;",SELECT geographic.region FROM generalinfo INNER JOIN geographic ON generalinfo.city = geographic.city WHERE generalinfo.label = 'baskin robbins' GROUP BY geographic.region ORDER BY COUNT(*) DESC LIMIT 1,SELECT geographic.region FROM generalinfo INNER JOIN geographic AS T2 ON T1.city = T2.city ORDER BY generalinfo.review LIMIT [placeholder-type:numeric],"The virtual table retrieves the regions corresponding to restaurants based on their city from the 'geographic' and 'generalinfo' tables. It uses an inner join to connect the two tables through the city column, ensuring that only restaurants located in cities present in the geographic data are considered. The results are ordered by the review rating of the restaurants, and a limit is applied to control the number of results returned.",8
restaurant,1733,13,Which street in San Francisco has the most burger restaurants?,SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1,"SELECT location.street_name, COUNT(*) AS restaurant_count FROM generalinfo JOIN location ON generalinfo.id_restaurant = location.id_restaurant WHERE location.city = 'san francisco' AND generalinfo.food_type = 'burgers' GROUP BY location.street_name ORDER BY restaurant_count DESC LIMIT 1;",SELECT location.street_name FROM location JOIN generalinfo ON location.id_restaurant = generalinfo.id_restaurant WHERE location.city = 'san francisco' AND generalinfo.food_type = 'burgers' GROUP BY location.street_name ORDER BY COUNT(*) DESC LIMIT 1,SELECT location.street_name FROM location WHERE location.city = '[placeholder-type:string]',The virtual table describes the street names of restaurants located in a specific city from the 'location' table. The placeholder in the WHERE clause represents the name of the city.,6
cs_semester,958,25,What percentage of students are highly satisfied with the Intro to Database 2 course?,SELECT CAST(( SELECT COUNT(*) FROM course WHERE name = 'Intro to Database 2' AND course_id IN ( SELECT course_id FROM registration WHERE sat = ( SELECT MAX(sat) FROM registration ) ) ) AS REAL) * 100  / COUNT(T1.student_id) FROM registration AS T1 INNER JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.name = 'Intro to Database 2',SELECT (COUNT(CASE WHEN r.sat = 4 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_highly_satisfied FROM registration r JOIN course c ON r.course_id = c.course_id WHERE c.name = 'Intro to Database 2';,SELECT (COUNT(CASE WHEN registration.sat = 5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM student INNER JOIN registration ON student.student_id = registration.student_id INNER JOIN course ON registration.course_id = course.course_id WHERE course.name = 'Intro to Database 2',SELECT COUNT(student.student_id) FROM student INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE course.name = '[placeholder-type:string]' AND registration.sat = [placeholder-type:numeric] AND student.gpa = [placeholder-type:numeric],"The virtual table counts the number of students who are enrolled in a specific course and have a certain level of satisfaction with that course, as well as a specific GPA. It combines data from the 'student', 'registration', and 'course' tables to achieve this.",10
cs_semester,879,28,"For the professors who advise more than 2 students, which professor has a higher teaching ability? Give the full name.","SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, T2.teachingability FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id GROUP BY T1.prof_id HAVING COUNT(student_id) > 2 ) T ORDER BY T.teachingability DESC LIMIT 1",SELECT p.first_name || ' ' || p.last_name AS full_name FROM ra r JOIN prof p ON r.prof_id = p.prof_id GROUP BY r.prof_id HAVING COUNT(r.student_id) > 2 ORDER BY p.teachingability DESC LIMIT 1;,"SELECT prof.first_name, prof.last_name FROM prof INNER JOIN ra ON prof.prof_id = ra.prof_id GROUP BY ra.prof_id HAVING COUNT(ra.student_id) > 2 ORDER BY prof.teachingability DESC LIMIT 1","SELECT prof.first_name, prof.last_name FROM prof INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE student.f_name = '[placeholder-type:string]' AND student.l_name = '[placeholder-type:string]'","The virtual table describes the first and last names of professors who advise students with a specific first and last name. It retrieves this information by joining the 'prof' table with the 'ra' table, which links professors to their advised students, and then further joins with the 'student' table to filter based on the student's name. The placeholders in the WHERE clause represent the first and last names of the student.",11
cars,3128,13,"Which car is the cheapest? Provide its acceleration, number of cylinders, and producing year.","SELECT T1.acceleration, T1.cylinders, T2.model_year FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN price AS T3 ON T3.ID = T2.ID ORDER BY T3.price ASC LIMIT 1","SELECT data.acceleration, data.cylinders, production.model_year FROM price JOIN data ON price.id = data.id JOIN production ON production.id = price.id WHERE price.price = (SELECT MIN(price) FROM price)","SELECT data.acceleration, data.cylinders, production.model_year FROM price INNER JOIN data ON price.id = data.id INNER JOIN production ON production.id = price.id ORDER BY price.price ASC LIMIT 1","SELECT data.car_name, data.model, data.displacement / data.cylinders, production.model_year FROM data INNER JOIN production AS T2 ON T1.ID = T2.ID ORDER BY data.weight LIMIT [placeholder-type:numeric]","The virtual table describes the car name, model year, engine displacement per cylinder, and the model year of the car from the 'data' and 'production' tables. The query joins these tables based on the car ID and orders the results by the weight of the car, limiting the output to a specified number of records.",15
shakespeare,3054,12,"In Shakespeare's works between 1600 to 1610, how many of these have a character as a ""Third Servingman""?",SELECT COUNT(DISTINCT T2.work_id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.DATE BETWEEN 1600 AND 1610 AND T4.CharName = 'Third Servingman',SELECT COUNT(DISTINCT w.id) FROM works w JOIN characters c ON w.id = c.id WHERE w.date BETWEEN 1600 AND 1610 AND c.charname = 'Third Servingman';,SELECT COUNT(DISTINCT works.id) FROM works INNER JOIN chapters ON works.id = chapters.work_id INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id INNER JOIN characters ON paragraphs.character_id = characters.id WHERE works.date BETWEEN 1600 AND 1610 AND characters.charname = 'Third Servingman',SELECT COUNT(works.id) FROM works INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE chapters.act = [placeholder-type:numeric] AND works.title = '[placeholder-type:string]',The virtual table counts the number of works from the 'works' table that have chapters corresponding to a specific act and title. The placeholders represent the act number and the title of the work.,8
movie_3,9401,12,List the store ID of the films starred by Reese West with a duration of 100 minutes and below?,SELECT T4.store_id FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id INNER JOIN inventory AS T4 ON T3.film_id = T4.film_id WHERE T3.length < 100 AND T1.first_name = 'Reese' AND T1.last_name = 'West',SELECT DISTINCT store.store_id FROM store JOIN inventory ON store.store_id = inventory.store_id JOIN film ON inventory.film_id = film.film_id JOIN film_actor ON film.film_id = film_actor.film_id JOIN actor ON film_actor.actor_id = actor.actor_id WHERE actor.first_name = 'REESE' AND actor.last_name = 'WEST' AND film.length <= 100;,SELECT inventory.store_id FROM film INNER JOIN film_actor ON film.film_id = film_actor.film_id INNER JOIN inventory ON film.film_id = inventory.film_id WHERE film_actor.actor_id = (SELECT actor.actor_id FROM actor WHERE actor.first_name = 'Reese' AND actor.last_name = 'West') AND film.length <= 100,SELECT inventory.inventory_id FROM film INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE film.title = '[placeholder-type:string]',"The virtual table retrieves the unique inventory IDs of films from the 'inventory' table that match a specific film title from the 'film' table. The join operation links the two tables based on the film ID, ensuring that only the inventory records corresponding to the specified film title are selected.",7
superstore,2426,12,"Among the orders with sales value of no less than 5,000 in west superstore, how many were bought by the customers in California?","SELECT COUNT(DISTINCT T1.""Order ID"") FROM west_superstore AS T1 INNER JOIN product AS T2 ON T1.""Product ID"" = T2.""Product ID"" INNER JOIN people AS T3 ON T3.""Customer ID"" = T1.""Customer ID"" WHERE T1.Sales > 5000 AND T3.State = 'California' AND T2.Region = 'West'",SELECT COUNT(*) FROM west_superstore AS ws JOIN people AS p ON ws.customer_id = p.customer_id WHERE ws.sales >= 5000 AND p.state = 'California';,"SELECT COUNT(*) FROM west_superstore INNER JOIN people ON west_superstore.""customer id"" = people.""customer id"" WHERE west_superstore.""sales"" >= 5000 AND people.""state"" = 'California'","SELECT people.""customer name"" FROM west_superstore INNER JOIN people AS T2 ON T1.""Customer ID"" = T2.""Customer ID"" WHERE west_superstore.region = '[placeholder-type:string]' ORDER BY west_superstore.discount LIMIT [placeholder-type:numeric]","The virtual table describes the names of customers from the 'people' table who have made purchases in the 'west_superstore' based on a specific region. The query filters the results by the region of the customers and orders them by the discount applied to their purchases, limiting the number of results returned.",10
music_tracker,2076,12,List the group name has the most downloaded that have released jazz genres from 1982 or later.,SELECT T1.groupName FROM torrents AS T1 INNER JOIN tags AS T2 ON T1.id = T2.id WHERE T2.tag = 'jazz' AND T1.groupYear >= 1982 ORDER BY T1.totalSnatched DESC LIMIT 1,"SELECT torrents.groupname, SUM(torrents.totalsnatched) AS total_downloads FROM torrents JOIN tags ON torrents.id = tags.id WHERE tags.tag = 'jazz' AND torrents.groupyear >= '1982' GROUP BY torrents.groupname ORDER BY total_downloads DESC LIMIT 1;",SELECT torrents.groupname FROM torrents INNER JOIN tags ON torrents.id = tags.id WHERE tags.tag = 'jazz' AND torrents.groupyear >= '1982' GROUP BY torrents.groupname ORDER BY SUM(torrents.totalsnatched) DESC LIMIT 1,SELECT torrents.artist FROM torrents INNER JOIN tags AS T2 ON T1.id = T2.id WHERE tags.tag = '[placeholder-type:string]' AND torrents.groupyear BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric],The virtual table retrieves the artist names from the 'torrents' table by joining it with the 'tags' table based on their unique identifiers. It filters the results to include only those releases that have a specific tag and were released within a specified range of years.,9
