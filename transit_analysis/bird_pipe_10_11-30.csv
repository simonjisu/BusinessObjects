db_id,sample_id,target_complexity,question,target,no_bos_pred,with_bos_pred,vt,ba,BO_complexity
talkingdata,1112,16,What is the brand of the youngest user's device?,SELECT device_model FROM phone_brand_device_model2 WHERE device_id IN ( SELECT device_id FROM gender_age WHERE age = ( SELECT MIN(age) FROM gender_age ) ),SELECT p.phone_brand FROM gender_age g JOIN phone_brand_device_model2 p ON g.device_id = p.device_id WHERE g.age = (SELECT MIN(age) FROM gender_age),SELECT phone_brand_device_model2.phone_brand FROM phone_brand_device_model2 INNER JOIN gender_age ON phone_brand_device_model2.device_id = gender_age.device_id ORDER BY gender_age.age ASC LIMIT 1,SELECT gender_age.age FROM phone_brand_device_model2 INNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id WHERE phone_brand_device_model2.device_model = '[placeholder-type:string]',"The virtual table retrieves the age of users based on their device model from the 'phone_brand_device_model2' and 'gender_age' tables. It uses an inner join to connect these tables through the 'device_id', ensuring that only relevant records are selected. The placeholder in the WHERE clause allows for filtering by a specific device model.",7
california_schools,9459,15,"What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.","SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1","SELECT s.street, s.city, s.zip, s.state FROM satscores ss JOIN schools s ON ss.cds = s.cdscode ORDER BY (CAST(ss.numge1500 AS NUMERIC) / CAST(ss.numtsttakr AS NUMERIC)) ASC LIMIT 1;","SELECT schools.street, schools.city, schools.zip, schools.state FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE (numge1500 / numtsttakr) = (SELECT MIN(numge1500 / numtsttakr) FROM satscores WHERE numtsttakr > 0)","SELECT frpm.""school name"", schools.street, schools.city, schools.state, schools.zip FROM frpm INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE schools.county = '[placeholder-type:string]' AND frpm.""free meal count (ages 5-17)"" > [placeholder-type:numeric] AND frpm.""school type"" = '[placeholder-type:string]'","The virtual table provides a list of school names along with their street addresses, cities, states, and zip codes from the 'frpm' and 'schools' tables. It filters the results based on the specified county, a minimum count of free meals for ages 5-17, and a specific school type.",18
food_inspection,8799,12,"Which business was the first one to get a low risk violation because of ""Permit license or inspection report not posted""? Give the name of the business.","SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.""date"" = ( SELECT MIN(""date"") FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted' ) AND T1.risk_category = 'Low Risk' AND T1.description = 'Permit license or inspection report not posted'",SELECT b.name FROM businesses b JOIN violations v ON b.business_id = v.business_id WHERE v.risk_category = 'Low Risk' AND v.description = 'Permit license or inspection report not posted' AND v.date = (SELECT MIN(date) FROM violations WHERE risk_category = 'Low Risk' AND description = 'Permit license or inspection report not posted');,SELECT businesses.name FROM violations INNER JOIN businesses ON violations.business_id = businesses.business_id WHERE violations.violation_type_id = 'unknown_violation_type' AND violations.risk_category = 'Low Risk' AND violations.description = 'Permit license or inspection report not posted' ORDER BY violations.date ASC LIMIT 1,"SELECT DISTINCT businesses.business_id, violations.risk_category FROM violations INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE businesses.owner_name = '[placeholder-type:string]'","The virtual table provides a list of unique business IDs along with their associated risk categories from the 'violations' table, specifically for businesses owned by a particular individual. The query joins the 'violations' table with the 'businesses' table to filter results based on the owner's name, which is represented by a placeholder.",10
chicago_crime,8717,14,What are the general and specific descriptions of the most common crime incidents that happened in an aircraft?,"SELECT T2.primary_description, T2.secondary_description FROM Crime AS T1 INNER JOIN IUCR AS T2 ON T1.iucr_no = T2.iucr_no WHERE T1.location_description = 'AIRCRAFT' GROUP BY T1.iucr_no ORDER BY COUNT(T1.iucr_no) DESC LIMIT 1","SELECT iucr.primary_description AS general_description, iucr.secondary_description AS specific_description FROM crime JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE crime.location_description = 'AIRCRAFT' GROUP BY crime.iucr_no ORDER BY COUNT(*) DESC LIMIT 1;","SELECT iucr.primary_description, iucr.secondary_description FROM crime JOIN iucr ON crime.iucr_no = iucr.iucr_no WHERE crime.location_description = 'AIRCRAFT' GROUP BY crime.iucr_no ORDER BY COUNT(*) DESC",SELECT iucr.index_code FROM iucr WHERE iucr.primary_description = '[placeholder-type:string]',The virtual table retrieves the index code from the 'iucr' table based on a specific primary description of an incident classification. The index code indicates whether the crime is severe or less severe.,6
movie,768,13,What is the MPAA rating and title of the movie starred by Leonardo DiCaprio with highest budget?,"SELECT T1.""MPAA Rating"", T1.Title FROM movie AS T1 INNER JOIN characters AS T2 ON T1.MovieID = T2.MovieID INNER JOIN actor AS T3 ON T3.ActorID = T2.ActorID WHERE T3.Name = 'Leonardo DiCaprio' ORDER BY T1.Budget DESC LIMIT 1","SELECT movie.""mpaa rating"", movie.title FROM characters JOIN actor ON characters.actorid = actor.actorid JOIN movie ON characters.movieid = movie.movieid WHERE actor.name = 'Leonardo DiCaprio' ORDER BY movie.budget DESC LIMIT 1;","SELECT movie.title, movie.mpaa_rating FROM movie JOIN characters ON movie.movieid = characters.movieid JOIN actor ON characters.actorid = actor.actorid WHERE actor.name = 'Leonardo DiCaprio' ORDER BY movie.budget DESC LIMIT 1",SELECT movie.movieid FROM movie WHERE movie.rating BETWEEN [placeholder-type:numeric] AND [placeholder-type:numeric] AND movie.budget = [placeholder-type:numeric],The virtual table retrieves the unique identifiers of movies from the 'movie' table that fall within a specified rating range and have a specific budget. The placeholders represent the numeric values for the rating range and budget.,8
world_development_indicators,2108,12,"What is the average value of Adjusted net enrolment rate, primary, both sexes (%) indicator in Algeria from 1975 to 1980?","SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'","SELECT AVG(value) FROM indicators WHERE indicatorname = 'Adjusted net enrolment rate, primary, both sexes (%)' AND countryname = 'Algeria' AND year BETWEEN 1975 AND 1980;","SELECT AVG(value) FROM indicators WHERE countrycode = 'Algeria' AND indicatorname = 'Adjusted net enrolment rate, primary, both sexes (%)' AND year BETWEEN 1975 AND 1980",SELECT CAST(SUM(CASE WHEN indicators.value > [placeholder-type:numeric] THEN [placeholder-type:numeric] ELSE [placeholder-type:numeric] END) AS FLOAT) * [placeholder-type:numeric] / COUNT(country.countrycode) FROM indicators INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE indicators.year = [placeholder-type:numeric] AND country.region = '[placeholder-type:string]' AND indicators.indicatorname = '[placeholder-type:string]',"The virtual table calculates a weighted average of indicator values for countries in a specific region and year. It sums the values from the 'indicators' table where the value exceeds a certain threshold, applies a multiplier, and divides by the count of countries in that region. The placeholders represent the threshold value, the multiplier, the year, and the region name.",10
book_publishing_company,179,12,Name the store with ID 7066 and calculate the percentage of the the quantity ordered that were on 'Net 30' payment terms.,"SELECT T2.stor_name , CAST(SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) AS REAL) * 100 / SUM(qty) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE T1.stor_id = '7066' GROUP BY T2.stor_name","SELECT stor_name, (SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) * 100.0 / SUM(qty)) AS percentage_net_30 FROM stores JOIN sales ON stores.stor_id = sales.stor_id WHERE stores.stor_id = '7066' GROUP BY stor_name;","SELECT stor_id, (SUM(CASE WHEN payterms = 'Net 30' THEN qty ELSE 0 END) * 100.0 / SUM(qty)) AS percentage_net_30 FROM sales WHERE stor_id = 7066 GROUP BY stor_id","SELECT stores.stor_id, titles.title FROM sales INNER JOIN titles AS T2 ON T1.title_id = T2.title_id INNER JOIN stores AS T3 ON T3.stor_id = T1.stor_id WHERE stores.stor_id = (SELECT stores.stor_id FROM sales GROUP BY stor_id ORDER BY SUM(qty) DESC LIMIT 1) GROUP BY stores.stor_id, titles.title ORDER BY SUM(sales.qty) LIMIT [placeholder-type:numeric]","The virtual table provides a list of store IDs and corresponding titles from the 'sales' and 'titles' tables. It identifies the store with the highest total sales quantity and groups the results by store ID and title. The results are ordered by the total quantity sold, with a limit specified by a placeholder for numeric values.",18
software_company,8576,14,List the income and number of inhabitants of customers with a reference ID greater than the 50% of average of number of false response?,"SELECT T2.INCOME_K, T2.INHABITANTS_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID INNER JOIN Mailings1_2 AS T3 ON T1.ID = T3.REFID WHERE T3.REFID > ( SELECT 0.5 * COUNT(CASE WHEN RESPONSE = 'false' THEN 1 ELSE NULL END) / COUNT(RESPONSE) FROM Mailings1_2 )","SELECT demog.income_k, demog.inhabitants_k FROM demog JOIN customers ON demog.geoid = customers.geoid WHERE customers.id > (SELECT AVG(CASE WHEN response = False THEN 1 ELSE 0 END) * 0.5 FROM mailings3 UNION SELECT AVG(CASE WHEN response = False THEN 1 ELSE 0 END) * 0.5 FROM mailings1_2)","SELECT demog.income_k, demog.inhabitants_k FROM customers INNER JOIN demog ON customers.geoid = demog.geoid WHERE customers.id > (SELECT AVG(refid) * 0.5 FROM mailings1_2 WHERE response = 'False')",SELECT COUNT(customers.id) FROM customers INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID INNER JOIN Demog AS T3 ON T1.GEOID = T3.GEOID WHERE mailings1_2.response = '[placeholder-type:string]' ORDER BY demog.income_k LIMIT [placeholder-type:numeric],"The virtual table counts the number of customers from the 'customers' table who have responded to a mailing, joining with the 'mailings1_2' table to filter based on the response status. It also joins with the 'demog' table to potentially use demographic information, specifically filtering based on geographic identifiers. The results are ordered by average income per inhabitant and limited to a specified number of results.",11
ice_hockey_draft,6924,13,How much taller is David Bornhammar than Pauli Levokari in centimeters?,SELECT ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'David Bornhammar' ) - ( SELECT T2.height_in_cm FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.PlayerName = 'Pauli Levokari' ),SELECT (h1.height_in_cm - h2.height_in_cm) AS height_difference FROM playerinfo p1 JOIN height_info h1 ON p1.height = h1.height_id JOIN playerinfo p2 JOIN height_info h2 ON p2.height = h2.height_id WHERE p1.playername = 'David Bornhammar' AND p2.playername = 'Pauli Levokari';,SELECT (SELECT T1.height_in_cm FROM playerinfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id WHERE T1.playername = 'David Bornhammar') - (SELECT T3.height_in_cm FROM playerinfo AS T3 INNER JOIN height_info AS T4 ON T3.height = T4.height_id WHERE T3.playername = 'Pauli Levokari') AS height_difference,"SELECT (SELECT T1.PlayerName, T3.height_in_cm FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' ORDER BY T3.height_in_cm DESC).playername FROM (SELECT playerinfo.playername, height_info.height_in_cm FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' ORDER BY T3.height_in_cm DESC) AS t WHERE (SELECT T1.PlayerName, T3.height_in_cm FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20' ORDER BY T3.height_in_cm DESC).height_in_cm = (SELECT MAX(height_info.height_in_cm) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T1.height = T3.height_id WHERE T2.TEAM = 'USA U20')","The virtual table describes the player names and their heights in centimeters from the 'PlayerInfo', 'SeasonStatus', and 'height_info' tables for players belonging to the 'USA U20' team. It specifically retrieves the name of the tallest player on that team by filtering the results based on the maximum height value.",23
student_club,10848,12,List the last name of members with a major in environmental engineering and include its department and college name.,"SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'","SELECT member.last_name, major.department, 'College of Engineering' AS college FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';","SELECT member.last_name, major.department, 'Engineering College' AS college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'","SELECT member.first_name, member.last_name FROM member INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE major.department = '[placeholder-type:string]'",The virtual table describes the first and last names of members from the 'member' table who are enrolled in a specific major offered by a department. The placeholder in the WHERE clause represents the department's name.,9
hockey,7620,14,Name the goaltenders who had played in both PCHA and NHL league.,"SELECT T1.firstName, T1.lastName FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.lgID IN ('PCHA', 'NHL') GROUP BY T2.playerID HAVING COUNT(DISTINCT T2.lgID) > 1","SELECT DISTINCT m.firstname, m.lastname FROM goalies g1 JOIN master m ON g1.playerid = m.playerid WHERE g1.lgid = 'NHL' AND g1.playerid IN (SELECT g2.playerid FROM goalies g2 WHERE g2.lgid = 'PCHA')","SELECT DISTINCT master.firstname, master.lastname FROM goalies INNER JOIN teams ON goalies.tmid = teams.tmid WHERE teams.lgid = 'NHL' AND goalies.year IN (SELECT year FROM teams WHERE lgid = 'PCHA')","SELECT DISTINCT master.firstnhl - scoring.year, master.namegiven, master.firstname, master.lastname FROM scoring INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID INNER JOIN Master AS T3 ON T1.playerID = T3.playerID GROUP BY master.firstname, master.lastname, master.namegiven, master.firstnhl - scoring.year, master.firstname, master.lastname ORDER BY SUM(scoring.""+/-"") LIMIT [placeholder-type:numeric]","The virtual table provides a distinct list of players along with their first NHL season year, given name, first name, and last name. It retrieves this information by joining the 'scoring' table with the 'teams' table to associate players with their respective teams, and then with the 'master' table to access player details. The results are grouped by the player's names and first NHL season year, and ordered by the sum of their plus/minus statistics, limiting the output to a specified number of entries.",26
cookbook,8898,12,Provide the title and total time of the recipe which has the highest possibility of gaining weight.,"SELECT T1.title, T1.prep_min + T1.cook_min + T1.stnd_min FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1","SELECT r.title, (r.prep_min + r.cook_min + r.stnd_min) AS total_time FROM recipe r JOIN nutrition n ON r.recipe_id = n.recipe_id ORDER BY n.total_fat DESC LIMIT 1;","SELECT recipe.title, (recipe.prep_min + recipe.cook_min + recipe.stnd_min) AS total_time FROM recipe INNER JOIN nutrition ON recipe.recipe_id = nutrition.recipe_id ORDER BY nutrition.calories DESC LIMIT 1",SELECT recipe.title FROM recipe INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY nutrition.calories LIMIT [placeholder-type:numeric],"The virtual table lists the titles of recipes from the 'recipe' table, joined with the 'nutrition' table to access nutritional information. The results are ordered by the calorie content of the recipes, and a limit is applied to restrict the number of titles returned.",8
soccer_2016,2025,20,How many seasons did Pune Warriors participate in?,SELECT COUNT(T.Season_Year) FROM ( SELECT T4.Season_Year FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Player_Match AS T3 ON T1.Team_Id = T3.Team_Id INNER JOIN Season AS T4 ON T2.Season_Id = T4.Season_Id WHERE T1.Team_Name = 'Pune Warriors' GROUP BY T4.Season_Year ) T,SELECT COUNT(DISTINCT match.season_id) AS total_seasons FROM match JOIN team ON match.team_1 = team.team_id OR match.team_2 = team.team_id WHERE team.team_name = 'Pune Warriors';,SELECT COUNT(DISTINCT season.season_id) FROM season JOIN player_match ON season.season_id = player_match.match_id JOIN team ON player_match.team_id = team.team_id WHERE team.team_name = 'Pune Warriors',"SELECT COUNT(match.match_id) FROM ""match"" WHERE match.season_id = [placeholder-type:numeric]",The virtual table counts the total number of matches played in a specific season from the 'match' table. The placeholder in the WHERE clause represents the unique identifier for the season.,6
soccer_2016,1995,13,Provide the losing team's name in the match ID 336039.,SELECT Team_Name FROM Team WHERE Team_Id = ( SELECT CASE WHEN Team_1 = Match_Winner THEN Team_2 ELSE Team_1 END FROM Match WHERE match_id = 336039 ),SELECT team.team_name FROM match JOIN team ON (match.team_1 = team.team_id OR match.team_2 = team.team_id) WHERE match.match_id = 336039 AND team.team_id != match.match_winner;,SELECT team.team_name FROM team INNER JOIN match ON team.team_id != match.match_winner WHERE match.match_id = 336039,SELECT team.team_name FROM team INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Win_By AS T3 ON T2.win_type = T3.win_id WHERE match.match_id = [placeholder-type:numeric],"The virtual table retrieves the names of teams that have won a specific match. It joins the 'team' table with the 'match' table to identify the winning team based on the match ID, and further joins with the 'win_by' table to get the winning type associated with that match.",8
coinmarketcap,6258,12,State the transaction date and the price when Bitcoin was bottomed?,"SELECT T2.date, T2.price FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' ORDER BY T2.price LIMIT 1","SELECT date AS date, MIN(price) AS price FROM historical WHERE coin_id = (SELECT id FROM coins WHERE name = 'Bitcoin')","SELECT historical.date, historical.low FROM coins INNER JOIN historical ON coins.id = historical.coin_id WHERE coins.name = 'Bitcoin' ORDER BY historical.low ASC LIMIT 1","SELECT historical.time_high, historical.time_low, historical.date FROM coins INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE coins.name = '[placeholder-type:string]' AND STRFTIME('%Y-%m', historical.date) = '[placeholder-type:string]'","The virtual table provides information about the highest and lowest prices of a specific coin over a specified month. It retrieves the time of these price points along with the corresponding date from the 'historical' table, which is linked to the 'coins' table based on the coin's unique identifier. The placeholders allow users to specify the coin's name and the month they are interested in.",12
public_review_platform,4089,12,"For users with average ratings of 3, what kind of tip length they mostly left?",SELECT T2.tip_length FROM Users AS T1 INNER JOIN Tips AS T2 ON T1.user_id = T2.user_id WHERE T1.user_average_stars = 3 GROUP BY T2.tip_length ORDER BY COUNT(T2.tip_length) DESC LIMIT 1,"SELECT t.tip_length, COUNT(t.tip_length) AS tip_count FROM users u JOIN tips t ON u.user_id = t.user_id WHERE u.user_average_stars = 3 GROUP BY t.tip_length ORDER BY tip_count DESC LIMIT 1;",SELECT AVG(tip_length) AS average_tip_length FROM tips INNER JOIN users ON tips.user_id = users.user_id WHERE users.user_average_stars = 3,SELECT CAST(SUM(CASE WHEN categories.category_name = '[placeholder-type:string]' THEN [placeholder-type:numeric] ELSE [placeholder-type:numeric] END) AS FLOAT) / SUM(CASE WHEN categories.category_name = '[placeholder-type:string]' THEN [placeholder-type:numeric] ELSE [placeholder-type:numeric] END) FROM business_categories INNER JOIN Categories AS T2 ON T1.category_id = T2.category_id,"The virtual table calculates the average of a specific numeric value from the 'business_categories' table, filtered by a given category name. It uses a conditional sum to differentiate between the specified category and others, ensuring that the average is computed correctly based on the provided category name.",5
public_review_platform,4132,15,"Among the active businesses located at Goodyear, AZ, list the category and atrributes of business with a high review count.","SELECT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T1.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.review_count = 'High' AND T1.city = 'Goodyear' AND T1.state = 'AZ' AND T1.active = 'true'","SELECT c.category_name, a.attribute_name FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id JOIN business_attributes ba ON b.business_id = ba.business_id JOIN attributes a ON ba.attribute_id = a.attribute_id WHERE b.active = 'True' AND b.city = 'Goodyear' AND b.state = 'AZ' AND b.review_count > 100;","SELECT c.category_name, a.attribute_name FROM business b JOIN business_categories bc ON b.business_id = bc.business_id JOIN categories c ON bc.category_id = c.category_id JOIN business_attributes ba ON b.business_id = ba.business_id JOIN attributes a ON ba.attribute_id = a.attribute_id WHERE b.city = 'Goodyear' AND b.state = 'AZ' AND b.active = 'true' AND b.review_count > 100",SELECT COUNT(business.business_id) FROM business WHERE business.state LIKE '[placeholder-type:string]' AND business.active LIKE '[placeholder-type:string]' AND business.review_count LIKE '[placeholder-type:string]',"The virtual table counts the number of businesses from the 'business' table that are located in a specific state, are currently active, and have a certain number of reviews. The placeholders in the WHERE clause represent the state, active status, and review count criteria.",8
public_review_platform,3894,13,"What is the attribute value of an active business with a high review count and 3 stars which is located at Mesa, AZ?",SELECT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state LIKE 'AZ' AND T1.review_count LIKE 'High' AND T1.active LIKE 'TRUE' AND T1.city LIKE 'Mesa' AND T1.stars = 3,SELECT business_attributes.attribute_value FROM business JOIN business_attributes ON business.business_id = business_attributes.business_id WHERE business.active = 'True' AND business.review_count > 100 AND business.stars = 3 AND business.city = 'Mesa' AND business.state = 'AZ',SELECT business_attributes.attribute_value FROM attributes INNER JOIN business_attributes ON attributes.attribute_id = business_attributes.attribute_id INNER JOIN business ON business_attributes.business_id = business.business_id WHERE business.active = 'true' AND business.review_count > '100' AND business.stars = '3' AND business.city = 'Mesa' AND business.state = 'AZ',"SELECT attributes.attribute_id, business_attributes.business_id, business.city FROM attributes INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE attributes.attribute_name = '[placeholder-type:string]' AND business.active = '[placeholder-type:string]'","The virtual table retrieves the unique identifier of attributes, the business identifier, and the city of businesses that possess a specific attribute and are currently active. The placeholders in the WHERE clause represent the attribute name and the active status of the business.",13
video_games,3335,17,State the name of the publisher with the most games.,"SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(DISTINCT T1.game_id) DESC LIMIT 1 ) t",SELECT publisher.publisher_name FROM publisher JOIN game_publisher ON publisher.id = game_publisher.publisher_id GROUP BY publisher.id ORDER BY COUNT(game_publisher.game_id) DESC LIMIT 1;,"SELECT publisher.publisher_name FROM (SELECT publisher.publisher_name, COUNT(DISTINCT game_publisher.game_id) FROM game_publisher INNER JOIN publisher ON game_publisher.publisher_id = publisher.id GROUP BY game_publisher.publisher_id ORDER BY COUNT(game_publisher.game_id) DESC LIMIT 1) AS t","SELECT T.publisher_name FROM (SELECT publisher.publisher_name, COUNT(DISTINCT T2.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T2.id) DESC LIMIT 1) AS t","The virtual table identifies the publisher with the highest number of distinct games published. It does this by joining the 'game_publisher' table with the 'publisher' table, counting the distinct game IDs for each publisher, and ordering the results to find the top publisher.",17
shakespeare,3056,13,"In Act 1 Scene 2 of the Twelfth Night, what is the total number of of lines said by Viola?",SELECT COUNT(T4.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T2.Act = 1 AND T2.Scene = 2 AND T4.id = 1238 AND T4.CharName = 'Viola' AND T1.Title = 'Twelfth Night',SELECT COUNT(*) FROM paragraphs WHERE character_id = (SELECT id FROM characters WHERE charname = 'Viola') AND chapter_id = (SELECT id FROM chapters WHERE act = '1' AND scene = '2' AND work_id = (SELECT id FROM works WHERE title = 'Twelfth Night'));,SELECT SUM(paragraphs.paragraphnum) FROM chapters INNER JOIN paragraphs ON chapters.id = paragraphs.chapter_id WHERE chapters.act = '1' AND chapters.scene = '2' AND paragraphs.character_id = (SELECT id FROM characters WHERE charname = 'Viola'),SELECT SUM(paragraphs.paragraphnum) FROM chapters INNER JOIN paragraphs AS T2 ON T1.id = T2.chapter_id WHERE chapters.description = '[placeholder-type:string]',"The virtual table calculates the total number of paragraphs from the 'paragraphs' table that are associated with chapters from the 'chapters' table, filtered by a specific chapter description. The placeholder in the WHERE clause represents the chapter's description.",7
