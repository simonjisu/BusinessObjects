{"sample_id": 6500, "db_id": "scientist_1", "question": "What are the names of the scientists, and how many projects are each of them working on?", "rationale": ["Identify the columns needed: We need the names of the scientists and the count of projects they are working on.", "Determine the tables involved: We need data from the Scientists table for names and the AssignedTo table to count projects.", "Establish the relationship: Scientists are linked to projects through the AssignedTo table, where the SSN in Scientists matches the Scientist in AssignedTo.", "Use a LEFT JOIN to include all scientists, even those not assigned to any projects, ensuring we count projects correctly.", "Count the number of projects for each scientist using COUNT() and group the results by the scientist's SSN to get the count per scientist."], "pred_sql": "SELECT Scientists.Name, COUNT(AssignedTo.Project) AS ProjectCount\nFROM Scientists\nLEFT JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist\nGROUP BY Scientists.SSN;", "gold_sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "source_tables": ["assignedto", "scientists"]}
{"sample_id": 6501, "db_id": "scientist_1", "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.", "rationale": ["Identify the tables involved: Scientists, Projects, and AssignedTo.", "We need to find scientists assigned to a project, so we will join the Scientists table with the AssignedTo table on the SSN and Scientist columns.", "Next, we will join the Projects table with the AssignedTo table on the Project and Code columns to access project details.", "To find the project with the longest hours, we will use a subquery to select the maximum hours from the Projects table.", "Finally, we will filter the results to only include scientists assigned to the project that has the maximum hours, and select their SSN and Name."], "pred_sql": "SELECT Scientists.SSN, Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist JOIN Projects ON AssignedTo.Project = Projects.Code WHERE Projects.Hours = (SELECT MAX(Hours) FROM Projects);", "gold_sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6502, "db_id": "scientist_1", "question": "What are the SSN and names of scientists working on the project with the most hours?", "rationale": ["Identify the relevant tables: Scientists, Projects, and AssignedTo.", "Determine the relationship between the tables: Scientists are linked to AssignedTo by SSN, and AssignedTo is linked to Projects by Project code.", "To find the project with the most hours, we need to use a subquery to get the maximum hours from the Projects table.", "Once we have the maximum hours, we can join the tables to get the SSN and names of scientists assigned to that project.", "The final query selects the SSN and Name from the Scientists table, joining it with AssignedTo and Projects based on the conditions established."], "pred_sql": "SELECT Scientists.SSN, Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist JOIN Projects ON AssignedTo.Project = Projects.Code WHERE Projects.Hours = (SELECT MAX(Hours) FROM Projects);", "gold_sql": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6503, "db_id": "scientist_1", "question": "Find the name of scientists who are assigned to some project.", "rationale": ["Identify the tables involved: Scientists and AssignedTo.", "We need to find the names of scientists, so we will select the 'Name' column from the Scientists table.", "To find scientists assigned to projects, we need to join the Scientists table with the AssignedTo table on the SSN and Scientist columns respectively.", "Use a JOIN operation to combine the two tables based on the relationship defined by the foreign key.", "Since we want only unique names of scientists, we will use DISTINCT to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist;", "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "source_tables": ["assignedto", "scientists"]}
{"sample_id": 6504, "db_id": "scientist_1", "question": "What are the names of scientists who are assigned to any project?", "rationale": ["Identify the tables involved: Scientists and AssignedTo.", "We need to find the names of scientists, so we will select the 'Name' column from the Scientists table.", "To find scientists assigned to any project, we need to join the Scientists table with the AssignedTo table on the SSN and Scientist columns respectively.", "Use DISTINCT to ensure that we only get unique names of scientists, as a scientist may be assigned to multiple projects."], "pred_sql": "SELECT DISTINCT Scientists.Name FROM Scientists JOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist;", "gold_sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "source_tables": ["assignedto", "scientists"]}
{"sample_id": 6505, "db_id": "scientist_1", "question": "Select the project names which are not assigned yet.", "rationale": ["Identify the table that contains project names, which is the 'Projects' table.", "Determine the condition for a project to be considered 'not assigned'. This means we need to find projects whose codes are not present in the 'AssignedTo' table.", "Use a subquery to select all project codes from the 'AssignedTo' table.", "Construct the main query to select project names from the 'Projects' table where the project code is not in the list of assigned project codes."], "pred_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo);", "gold_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6506, "db_id": "scientist_1", "question": "What are the names of projects that have not been assigned?", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "We need to find projects that have not been assigned to any scientist, which means we need to look for projects whose codes are not present in the 'AssignedTo' table.", "To achieve this, we can use a subquery that selects all project codes from the 'AssignedTo' table.", "The main query will select the names of projects from the 'Projects' table where the project code is not in the list of assigned project codes from the subquery."], "pred_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo);", "gold_sql": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)", "source_tables": ["projects", "assignedto"]}
{"sample_id": 6507, "db_id": "scientist_1", "question": "Find the name of scientists who are not assigned to any project.", "rationale": ["Identify the table that contains the names of scientists, which is the 'Scientists' table.", "We need to find scientists who are not assigned to any project, which means we need to check the 'AssignedTo' table.", "To find scientists not assigned to any project, we can use a subquery that selects all SSNs from the 'AssignedTo' table.", "We will use the NOT IN clause to filter out those scientists whose SSNs are present in the subquery result.", "The final SQL query will select the 'Name' from the 'Scientists' table where the 'SSN' is not in the list of SSNs from the 'AssignedTo' table."], "pred_sql": "SELECT Name FROM Scientists WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);", "gold_sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}
{"sample_id": 6508, "db_id": "scientist_1", "question": "What are the names of scientists who have not been assigned a project?", "rationale": ["Identify the table that contains the names of scientists, which is the 'Scientists' table.", "We need to find scientists who have not been assigned any projects, which means we need to look for scientists whose SSN is not present in the 'AssignedTo' table.", "The 'AssignedTo' table links scientists to projects through the 'Scientist' column, which contains the SSN of the scientists.", "We can use a subquery to select all SSNs from the 'AssignedTo' table and then use the NOT IN clause to filter out those scientists from the 'Scientists' table."], "pred_sql": "SELECT Name FROM Scientists WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);", "gold_sql": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}
{"sample_id": 6509, "db_id": "scientist_1", "question": "Find the number of scientists who are not assigned to any project.", "rationale": ["Identify the table that contains the information about scientists, which is the 'Scientists' table.", "We need to count the number of scientists who are not assigned to any project.", "To find scientists not assigned to any project, we can use a subquery to get the list of SSNs from the 'AssignedTo' table.", "The subquery will select all 'Scientist' SSNs from the 'AssignedTo' table.", "We will use the NOT IN clause to filter out those scientists from the 'Scientists' table.", "Finally, we will use COUNT(*) to count the number of scientists who are not in the list of assigned scientists."], "pred_sql": "SELECT COUNT(*) AS Unassigned_Scientists FROM Scientists WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);", "gold_sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}
{"sample_id": 6510, "db_id": "scientist_1", "question": "How many scientists do not have any projects assigned to them?", "rationale": ["Identify the main goal: Count the number of scientists without any projects assigned.", "To find scientists without projects, we need to look at the Scientists table and compare it with the AssignedTo table.", "We can use a subquery to find all SSNs of scientists who are assigned to any project by selecting the Scientist column from the AssignedTo table.", "Then, we can use the NOT IN clause to filter out those scientists from the Scientists table.", "Finally, we count the remaining scientists who do not have any projects assigned to them."], "pred_sql": "SELECT COUNT(*) AS ScientistCount FROM Scientists WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo);", "gold_sql": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)", "source_tables": ["assignedto", "scientists"]}
{"sample_id": 6511, "db_id": "scientist_1", "question": "Find the names of scientists who are not working on the project with the highest hours.", "rationale": ["Identify the project with the highest hours by selecting the Code from the Projects table and ordering by Hours in descending order, limiting the result to 1.", "Use the result from the previous step to find all scientists assigned to that project by selecting the Scientist from the AssignedTo table where the Project matches the highest hours project code.", "Finally, select the names of scientists from the Scientists table where their SSN is not in the list of scientists assigned to the project with the highest hours."], "pred_sql": "SELECT Name FROM Scientists WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo WHERE Project = (SELECT Code FROM Projects ORDER BY Hours DESC LIMIT 1));", "gold_sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6512, "db_id": "scientist_1", "question": "What are the names of scientists who are not working on the project with the most hours?", "rationale": ["Identify the project with the most hours by selecting the Code from the Projects table, ordering by Hours in descending order, and limiting the result to 1.", "Use the result from the previous step to find all scientists assigned to that project by selecting the Scientist from the AssignedTo table where the Project matches the identified project code.", "Finally, select the names of scientists from the Scientists table where their SSN is not in the list of scientists assigned to the project with the most hours."], "pred_sql": "SELECT Name FROM Scientists WHERE SSN NOT IN (SELECT Scientist FROM AssignedTo WHERE Project = (SELECT Code FROM Projects ORDER BY Hours DESC LIMIT 1));", "gold_sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6513, "db_id": "scientist_1", "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.", "rationale": ["We need to retrieve the names of scientists, project names, and hours worked on each project.", "To get this information, we will need to join the Scientists table with the AssignedTo table on the SSN of the scientist and the Scientist column in AssignedTo.", "Next, we will join the Projects table with the AssignedTo table on the project code to get the project names and hours.", "Finally, we will order the results first by project name and then by scientist name in alphabetical order."], "pred_sql": "SELECT Scientists.Name AS ScientistName, Projects.Name AS ProjectName, Projects.Hours AS HoursWorked\nFROM Scientists\nJOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist\nJOIN Projects ON AssignedTo.Project = Projects.Code\nORDER BY Projects.Name, Scientists.Name;", "gold_sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6514, "db_id": "scientist_1", "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.", "rationale": ["Identify the tables needed: Scientists, Projects, and AssignedTo.", "Determine the columns to select: Scientist's name from Scientists, project name and hours from Projects.", "Establish the relationships between the tables using JOINs: AssignedTo links Scientists and Projects.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables.", "Add an ORDER BY clause to sort the results first by project name and then by scientist name."], "pred_sql": "SELECT Scientists.Name AS ScientistName, Projects.Name AS ProjectName, Projects.Hours \nFROM Scientists \nJOIN AssignedTo ON Scientists.SSN = AssignedTo.Scientist \nJOIN Projects ON AssignedTo.Project = Projects.Code \nORDER BY Projects.Name, Scientists.Name;", "gold_sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6515, "db_id": "scientist_1", "question": "Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.", "rationale": ["Identify the table that contains project information, which is the 'Projects' table.", "Determine that we need to find the project with the least amount of time, which corresponds to the minimum value in the 'Hours' column of the 'Projects' table.", "To find the scientists who worked on this project, we need to join the 'Projects' table with the 'AssignedTo' table on the project code.", "Next, we join the 'AssignedTo' table with the 'Scientists' table to get the names of the scientists based on their SSN.", "Finally, we select the project name and the names of the scientists, ensuring to filter the projects to only include the one with the minimum hours."], "pred_sql": "SELECT p.Name AS ProjectName, s.Name AS ScientistName \nFROM Projects p \nJOIN AssignedTo a ON p.Code = a.Project \nJOIN Scientists s ON a.Scientist = s.SSN \nWHERE p.Hours = (SELECT MIN(Hours) FROM Projects);", "gold_sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6516, "db_id": "scientist_1", "question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?", "rationale": ["Identify the relevant tables: Projects for project details and Scientists for scientist names.", "We need to find the project that requires the fewest number of hours, so we will use the MIN function on the Hours column in the Projects table.", "We will join the Projects table with the AssignedTo table to link projects with assigned scientists using the project code.", "Next, we will join the AssignedTo table with the Scientists table to get the names of the scientists using their SSN.", "Finally, we will filter the results to only include the project(s) with the minimum hours using a subquery."], "pred_sql": "SELECT P.Name AS ProjectName, S.Name AS ScientistName \nFROM Projects P \nJOIN AssignedTo A ON P.Code = A.Project \nJOIN Scientists S ON A.Scientist = S.SSN \nWHERE P.Hours = (SELECT MIN(Hours) FROM Projects);", "gold_sql": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)", "source_tables": ["projects", "assignedto", "scientists"]}
{"sample_id": 6517, "db_id": "wine_1", "question": "What is the name of the highest rated wine?", "rationale": ["Identify the table that contains the wine information, which is the 'wine' table.", "To find the highest rated wine, we need to look at the 'Score' column in the 'wine' table.", "We want to select the 'Name' of the wine with the highest score.", "To get the highest score, we can order the results by 'Score' in descending order.", "We limit the results to 1 to get only the highest rated wine."], "pred_sql": "SELECT Name FROM wine ORDER BY Score DESC LIMIT 1;", "gold_sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "source_tables": ["wine"]}
{"sample_id": 6518, "db_id": "wine_1", "question": "Give the name of the wine with the highest score.", "rationale": ["Identify the table that contains the wine names and their scores, which is the 'wine' table.", "To find the wine with the highest score, we need to sort the entries in the 'wine' table by the 'Score' column in descending order.", "Using 'ORDER BY Score DESC' will arrange the wines from highest to lowest score.", "To get only the top entry (the wine with the highest score), we will use 'LIMIT 1' to restrict the result to a single row.", "Finally, we select the 'Name' column to get the name of the wine with the highest score."], "pred_sql": "SELECT Name FROM wine ORDER BY Score DESC LIMIT 1;", "gold_sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "source_tables": ["wine"]}
{"sample_id": 6519, "db_id": "wine_1", "question": "Which winery is the wine that has the highest score from?", "rationale": ["Identify the table that contains the information about wineries and their wines, which is the 'wine' table.", "Determine that we need to find the wine with the highest score, so we will use the MAX() function on the 'Score' column.", "To find the winery associated with this highest score, we will select the 'Winery' column from the 'wine' table where the 'Score' matches the maximum score found in the previous step."], "pred_sql": "SELECT Winery FROM wine WHERE Score = (SELECT MAX(Score) FROM wine)", "gold_sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "source_tables": ["wine"]}
{"sample_id": 6520, "db_id": "wine_1", "question": "What is the winery at which the wine with the highest score was made?", "rationale": ["Identify the table that contains the information about wineries and scores, which is the 'wine' table.", "To find the winery with the highest score, we need to select the 'Winery' column from the 'wine' table.", "We need to determine the maximum score from the 'Score' column in the 'wine' table, which can be done using a subquery.", "The subquery will return the highest score, and we will use this value to filter the main query to get the corresponding winery."], "pred_sql": "SELECT Winery FROM wine WHERE Score = (SELECT MAX(Score) FROM wine);", "gold_sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "source_tables": ["wine"]}
{"sample_id": 6521, "db_id": "wine_1", "question": "Find the names of all wines produced in 2008.", "rationale": ["Identify the relevant table: The 'wine' table contains information about the wines, including their production year.", "Determine the required columns: We need the 'Name' column to get the names of the wines.", "Specify the condition: We want wines produced in the year 2008, which corresponds to the 'Year' column in the 'wine' table.", "Construct the SQL query: Use a SELECT statement to retrieve the 'Name' from the 'wine' table where the 'Year' is '2008'."], "pred_sql": "SELECT Name FROM wine WHERE Year = '2008';", "gold_sql": "SELECT Name FROM WINE WHERE YEAR  =  '2008'", "source_tables": ["wine"]}
{"sample_id": 6522, "db_id": "wine_1", "question": "What are the names of all wines produced in 2008?", "rationale": ["Identify the relevant table: The query is asking for information about wines, so we will use the 'wine' table.", "Determine the required columns: We need the names of the wines, which corresponds to the 'Name' column in the 'wine' table.", "Specify the condition: The query specifies that we are only interested in wines produced in the year 2008, which corresponds to the 'Year' column in the 'wine' table.", "Construct the SQL query: We will select the 'Name' column from the 'wine' table where the 'Year' is '2008'."], "pred_sql": "SELECT Name FROM wine WHERE Year = '2008';", "gold_sql": "SELECT Name FROM WINE WHERE YEAR  =  '2008'", "source_tables": ["wine"]}
{"sample_id": 6523, "db_id": "wine_1", "question": "List the grapes and appelations of all wines.", "rationale": ["Identify the tables involved: 'grapes', 'appellations', and 'wine'.", "Determine the columns needed: 'Grape' from 'grapes' and 'Appelation' from 'appellations'.", "Establish the relationships between the tables: 'wine' table has foreign keys referencing 'grapes' and 'appellations'.", "Use JOIN clauses to combine the tables based on the foreign key relationships: JOIN 'grapes' on 'wine.Grape = grapes.Grape' and JOIN 'appellations' on 'wine.Appelation = appellations.Appelation'.", "Construct the SELECT statement to retrieve the desired columns: SELECT grapes.Grape, appellations.Appelation."], "pred_sql": "SELECT grapes.Grape, appellations.Appelation FROM wine JOIN grapes ON wine.Grape = grapes.Grape JOIN appellations ON wine.Appelation = appellations.Appelation;", "gold_sql": "SELECT Grape ,  Appelation FROM WINE", "source_tables": ["wine"]}
{"sample_id": 6524, "db_id": "wine_1", "question": "What are the grapes and appelations of each wine?", "rationale": ["Identify the tables involved: 'wine', 'grapes', and 'appellations'.", "Determine the columns needed: 'Grape' from the 'wine' table and 'Appelation' from the 'wine' table.", "Since the question asks for grapes and appellations of each wine, we can directly select 'Grape' and 'Appelation' from the 'wine' table without needing to join with 'grapes' or 'appellations' as the necessary information is already present in the 'wine' table."], "pred_sql": "SELECT wine.Grape, wine.Appelation FROM wine;", "gold_sql": "SELECT Grape ,  Appelation FROM WINE", "source_tables": ["wine"]}
{"sample_id": 6525, "db_id": "wine_1", "question": "List the names and scores of all wines.", "rationale": ["Identify the table that contains the information about wines, which is the 'wine' table.", "Determine the specific columns needed from the 'wine' table, which are 'Name' and 'Score'.", "Construct the SQL SELECT statement to retrieve the 'Name' and 'Score' columns from the 'wine' table."], "pred_sql": "SELECT Name, Score FROM wine;", "gold_sql": "SELECT Name ,  Score FROM WINE", "source_tables": ["wine"]}
{"sample_id": 6526, "db_id": "wine_1", "question": "What are the names and scores of all wines?", "rationale": ["Identify the table that contains the information about wines, which is the 'wine' table.", "Determine the specific columns needed from the 'wine' table, which are 'Name' and 'Score'.", "Construct the SQL SELECT statement to retrieve the 'Name' and 'Score' columns from the 'wine' table."], "pred_sql": "SELECT Name, Score FROM wine;", "gold_sql": "SELECT Name ,  Score FROM WINE", "source_tables": ["wine"]}
{"sample_id": 6527, "db_id": "wine_1", "question": "List the area and county of all appelations.", "rationale": ["Identify the table that contains the required information: the 'appellations' table.", "Determine the specific columns needed: 'Area' and 'County'.", "Construct the SQL query to select these columns from the 'appellations' table."], "pred_sql": "SELECT Area, County FROM appellations;", "gold_sql": "SELECT Area ,  County FROM APPELLATIONS", "source_tables": ["appellations"]}
{"sample_id": 6528, "db_id": "wine_1", "question": "What are the areas and counties for all appelations?", "rationale": ["Identify the relevant table: The query asks for areas and counties of appellations, which are found in the 'appellations' table.", "Determine the required columns: The query specifically requests the 'Area' and 'County' columns from the 'appellations' table.", "Construct the SQL SELECT statement: Use SELECT to retrieve the specified columns from the appellations table."], "pred_sql": "SELECT Area, County FROM appellations;", "gold_sql": "SELECT Area ,  County FROM APPELLATIONS", "source_tables": ["appellations"]}
{"sample_id": 6529, "db_id": "wine_1", "question": "What are the prices of wines produced before the year of 2010?", "rationale": ["Identify the relevant table: The query is about wine prices, so we will use the 'wine' table.", "Determine the columns needed: We need the 'Price' column from the 'wine' table.", "Filter the results: We want wines produced before the year 2010, so we will add a condition to filter the 'Year' column to be less than '2010'.", "Construct the SQL query: Combine the selected columns and the filter condition into a complete SQL query."], "pred_sql": "SELECT Price FROM wine WHERE Year < '2010';", "gold_sql": "SELECT Price FROM WINE WHERE YEAR  <  2010", "source_tables": ["wine"]}
{"sample_id": 6530, "db_id": "wine_1", "question": "Return the prices of wines produced before 2010.", "rationale": ["Identify the table that contains the price information, which is the 'wine' table.", "Determine the relevant column for the price, which is 'Price'.", "Identify the condition for filtering the wines, which is that they must be produced before the year 2010.", "Construct the SQL query to select the 'Price' from the 'wine' table where the 'Year' is less than '2010'."], "pred_sql": "SELECT Price FROM wine WHERE Year < '2010';", "gold_sql": "SELECT Price FROM WINE WHERE YEAR  <  2010", "source_tables": ["wine"]}
{"sample_id": 6531, "db_id": "wine_1", "question": "List the names of all distinct wines that have scores higher than 90.", "rationale": ["Identify the table that contains the wine names and scores, which is the 'wine' table.", "We need to select distinct names of wines, so we will use the SELECT DISTINCT statement.", "The condition specified is that the score must be higher than 90, so we will add a WHERE clause to filter the results based on the 'Score' column.", "Since the 'Score' column is of type text, we will compare it as a string, hence using '90' instead of 90."], "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Score > '90';", "gold_sql": "SELECT Name FROM WINE WHERE score  >  90", "source_tables": ["wine"]}
{"sample_id": 6532, "db_id": "wine_1", "question": "What are the names of wines with scores higher than 90?", "rationale": ["Identify the table that contains the information about wines, which is the 'wine' table.", "Determine the relevant column that contains the names of the wines, which is the 'Name' column.", "Identify the column that contains the scores of the wines, which is the 'Score' column.", "Formulate a SQL query to select the 'Name' from the 'wine' table where the 'Score' is greater than 90."], "pred_sql": "SELECT Name FROM wine WHERE Score > '90';", "gold_sql": "SELECT Name FROM WINE WHERE score  >  90", "source_tables": ["wine"]}
{"sample_id": 6533, "db_id": "wine_1", "question": "List the names of all distinct wines that are made of red color grape.", "rationale": ["Identify the tables involved: 'wine' and 'grapes'.", "We need to select distinct wine names, so we will use SELECT DISTINCT on the 'Name' column from the 'wine' table.", "To filter the wines made from red grapes, we need to join the 'wine' table with the 'grapes' table on the 'Grape' column.", "Add a WHERE clause to filter the results where the 'Color' in the 'grapes' table is 'red'."], "pred_sql": "SELECT DISTINCT wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'red';", "gold_sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'Red'", "source_tables": ["wine", "grapes"]}
{"sample_id": 6534, "db_id": "wine_1", "question": "What are the names of wines made from red grapes?", "rationale": ["Identify the relevant tables: 'wine' and 'grapes'.", "Determine the relationship between the tables: 'wine' references 'grapes' through the 'Grape' column.", "Filter the results based on the color of the grapes: we need only red grapes.", "Select the 'Name' column from the 'wine' table to get the names of the wines."], "pred_sql": "SELECT wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'red';", "gold_sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'Red'", "source_tables": ["wine", "grapes"]}
{"sample_id": 6535, "db_id": "wine_1", "question": "Find the names of all distinct wines that have appellations in North Coast area.", "rationale": ["Identify the relevant tables: 'wine' and 'appellations'.", "We need to find distinct wine names, so we will use the SELECT DISTINCT statement on the 'Name' column from the 'wine' table.", "To filter wines based on their appellations, we will join the 'wine' table with the 'appellations' table using the common column 'Appelation'.", "We need to specify the condition that the appellation's area is 'North Coast', which will be included in the WHERE clause."], "pred_sql": "SELECT DISTINCT wine.Name FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.Area = 'North Coast';", "gold_sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  'North Coast'", "source_tables": ["wine", "appellations"]}
{"sample_id": 6536, "db_id": "wine_1", "question": "What are the distinct names of wines that have appellations in the North Coast area?", "rationale": ["Identify the relevant tables: 'wine' and 'appellations'.", "We need to find distinct wine names, so we will use the SELECT DISTINCT statement on the 'Name' column from the 'wine' table.", "To filter wines based on their appellations, we will join the 'wine' table with the 'appellations' table using the common column 'Appelation'.", "We need to specify the condition that the appellation's area is 'North Coast', which will be done in the WHERE clause.", "Combine all these elements to form the complete SQL query."], "pred_sql": "SELECT DISTINCT wine.Name FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.Area = 'North Coast';", "gold_sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  'North Coast'", "source_tables": ["wine", "appellations"]}
{"sample_id": 6537, "db_id": "wine_1", "question": "How many wines are produced at Robert Biale winery?", "rationale": ["Identify the table that contains information about wines, which is the 'wine' table.", "Determine the relevant column that indicates the winery, which is 'Winery'.", "The user is interested in counting the number of wines produced by 'Robert Biale', so we will use the COUNT() function.", "Construct the SQL query to select the count of wines from the 'wine' table where the 'Winery' column matches 'Robert Biale'."], "pred_sql": "SELECT COUNT(*) FROM wine WHERE Winery = 'Robert Biale';", "gold_sql": "SELECT count(*) FROM WINE WHERE Winery  =  'Robert Biale'", "source_tables": ["wine"]}
{"sample_id": 6538, "db_id": "wine_1", "question": "Count the number of wines produced at Robert Biale winery.", "rationale": ["Identify the table that contains information about wines, which is the 'wine' table.", "Determine the relevant column to filter by winery, which is 'Winery'.", "Specify the winery of interest, which is 'Robert Biale'.", "Use the COUNT() function to count the number of entries that match the specified winery.", "Construct the SQL query to select the count of wines from the 'wine' table where the winery is 'Robert Biale'."], "pred_sql": "SELECT COUNT(*) FROM wine WHERE Winery = 'Robert Biale';", "gold_sql": "SELECT count(*) FROM WINE WHERE Winery  =  'Robert Biale'", "source_tables": ["wine"]}
{"sample_id": 6539, "db_id": "wine_1", "question": "How many appelations are in Napa Country?", "rationale": ["Identify the table that contains information about appellations, which is the 'appellations' table.", "Determine the relevant column for the county, which is 'County'.", "Specify the condition to filter the results to only include appellations in Napa County.", "Use the COUNT() function to count the number of rows that meet the specified condition."], "pred_sql": "SELECT COUNT(*) FROM appellations WHERE County = 'Napa'", "gold_sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  'Napa'", "source_tables": ["appellations"]}
{"sample_id": 6540, "db_id": "wine_1", "question": "Count the number of appelations in Napa County.", "rationale": ["Identify the table that contains the information about appellations, which is the 'appellations' table.", "Determine the column that specifies the county, which is the 'County' column in the 'appellations' table.", "The user wants to count the number of appellations in Napa County, so we will use the COUNT() function to count the rows where the 'County' is 'Napa'.", "Construct the SQL query using the SELECT statement to count the rows from the 'appellations' table with the specified condition."], "pred_sql": "SELECT COUNT(*) FROM appellations WHERE County = 'Napa';", "gold_sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  'Napa'", "source_tables": ["appellations"]}
{"sample_id": 6541, "db_id": "wine_1", "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.", "rationale": ["Identify the relevant tables: 'wine' and 'appellations'.", "We need to find the average price of wines, so we will use the AVG() function on the 'Price' column from the 'wine' table.", "To filter the wines produced in Sonoma County, we need to join the 'wine' table with the 'appellations' table on the 'Appelation' column.", "Add a WHERE clause to filter the results to only include those from Sonoma County."], "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.County = 'Sonoma';", "gold_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma'", "source_tables": ["wine", "appellations"]}
{"sample_id": 6542, "db_id": "wine_1", "question": "What is the average price of wines produced in appelations in Sonoma County?", "rationale": ["Identify the relevant tables: 'wine' and 'appellations' are needed to find the average price of wines in Sonoma County.", "Determine the relationship between the tables: 'wine' has a foreign key 'Appelation' that relates to 'appellations'.", "Filter the results to only include wines from appellations located in Sonoma County by using a WHERE clause on the 'County' column of the 'appellations' table.", "Calculate the average price of the wines using the AVG() function on the 'Price' column from the 'wine' table."], "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.County = 'Sonoma';", "gold_sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma'", "source_tables": ["wine", "appellations"]}
{"sample_id": 6543, "db_id": "wine_1", "question": "What are the names and scores of wines that are made of white color grapes?", "rationale": ["Identify the relevant tables: 'wine' and 'grapes'.", "Determine the columns needed: 'Name' and 'Score' from the 'wine' table.", "Establish the relationship between the tables: 'wine.Grape' corresponds to 'grapes.Grape'.", "Filter the results to include only those wines made from grapes that are white in color by adding a WHERE clause for 'grapes.Color = 'white'.", "Construct the SQL SELECT statement to retrieve the desired columns with the appropriate JOIN and WHERE conditions."], "pred_sql": "SELECT wine.Name, wine.Score FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'white';", "gold_sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'White'", "source_tables": ["wine", "grapes"]}
{"sample_id": 6544, "db_id": "wine_1", "question": "Give the names and scores of wines made from white grapes.", "rationale": ["Identify the tables involved: 'wine' and 'grapes'.", "Determine the columns needed: 'Name' and 'Score' from the 'wine' table.", "Establish the relationship between the tables: 'wine.Grape' corresponds to 'grapes.Grape'.", "Filter the results to include only wines made from white grapes by adding a WHERE clause that checks 'grapes.Color' for 'white'.", "Construct the SQL SELECT statement to retrieve the desired columns with the appropriate JOIN and WHERE conditions."], "pred_sql": "SELECT wine.Name, wine.Score FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'white';", "gold_sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'White'", "source_tables": ["wine", "grapes"]}
{"sample_id": 6545, "db_id": "wine_1", "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "rationale": ["Identify the relevant tables: 'wine' and 'appellations'.", "We need to find the maximum price of wines, so we will use the MAX() function on the 'Price' column from the 'wine' table.", "The query requires filtering wines produced before the year 2005, so we will add a condition for 'Year' in the WHERE clause.", "We also need to filter the wines based on the appellation's area, specifically 'Central Coast', which requires a join between the 'wine' and 'appellations' tables on the 'Appelation' column.", "Construct the SQL query to select the maximum price from the 'wine' table, joining with the 'appellations' table, and applying the necessary filters."], "pred_sql": "SELECT MAX(Price) FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE appellations.Area = 'Central Coast' AND wine.Year < '2005';", "gold_sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  'Central Coast' AND T2.year  <  2005", "source_tables": ["wine", "appellations"]}
{"sample_id": 6546, "db_id": "wine_1", "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "rationale": ["Identify the relevant tables: 'wine' and 'appellations'.", "We need to find wines from a specific area (Central Coast) and produced before 2005.", "First, filter the 'appellations' table to get the appellations in the 'Central Coast' area.", "Use a subquery to select the 'Appelation' names from the 'appellations' table where 'Area' is 'Central Coast'.", "Next, filter the 'wine' table to find wines that match the appellations from the subquery and were produced before 2005.", "Finally, use the MAX() function to get the maximum price from the filtered results."], "pred_sql": "SELECT MAX(Price) FROM wine WHERE Appelation IN (SELECT Appelation FROM appellations WHERE Area = 'Central Coast') AND Year < '2005';", "gold_sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  'Central Coast' AND T2.year  <  2005", "source_tables": ["wine", "appellations"]}
{"sample_id": 6547, "db_id": "wine_1", "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "rationale": ["Identify the relevant tables: 'grapes' for grape varieties and 'wine' for wine details.", "We need to find white color grapes, so we will filter the 'grapes' table by the 'Color' column.", "We also need to filter wines with scores higher than 90, so we will filter the 'wine' table by the 'Score' column.", "To connect the two tables, we will use the 'Grape' column which is common in both tables.", "We will use a JOIN operation to combine the 'grapes' and 'wine' tables based on the 'Grape' column.", "Finally, we will select distinct grape names that meet both conditions (white color and score > 90)."], "pred_sql": "SELECT DISTINCT g.Grape FROM grapes g JOIN wine w ON g.Grape = w.Grape WHERE g.Color = 'white' AND w.Score > '90';", "gold_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'White' AND T2.score  >  90", "source_tables": ["wine", "grapes"]}
{"sample_id": 6548, "db_id": "wine_1", "question": "Find the white grape used to produce wines with scores above 90.", "rationale": ["Identify the relevant tables: 'grapes' and 'wine'.", "We need to find white grapes, so we will filter the 'grapes' table by the 'Color' column where it equals 'white'.", "We also need to filter wines with scores above 90, so we will filter the 'wine' table by the 'Score' column where it is greater than '90'.", "Since we need to find the grapes used in wines with scores above 90, we will join the 'grapes' table with the 'wine' table on the 'Grape' column.", "Finally, we will select distinct grape names to avoid duplicates."], "pred_sql": "SELECT DISTINCT grapes.Grape FROM grapes JOIN wine ON grapes.Grape = wine.Grape WHERE grapes.Color = 'white' AND wine.Score > '90';", "gold_sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'White' AND T2.score  >  90", "source_tables": ["wine", "grapes"]}
{"sample_id": 6549, "db_id": "wine_1", "question": "What are the wines that have prices higher than 50 and made of Red color grapes?", "rationale": ["Identify the relevant tables: 'wine' and 'grapes'.", "Determine the columns needed: all columns from 'wine' and the color from 'grapes'.", "Establish the condition for price: wine.Price > 50.", "Establish the condition for grape color: grapes.Color = 'red'.", "Join the 'wine' table with the 'grapes' table on the Grape column to filter wines based on grape color.", "Construct the SQL SELECT statement to retrieve the desired data."], "pred_sql": "SELECT wine.* FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE wine.Price > 50 AND grapes.Color = 'red';", "gold_sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'Red' AND T2.price  >  50", "source_tables": ["wine", "grapes"]}
{"sample_id": 6550, "db_id": "wine_1", "question": "What are the names of wines made from red grapes and with prices above 50?", "rationale": ["Identify the relevant tables: 'wine' and 'grapes'.", "We need to find wines made from red grapes, so we will filter the 'grapes' table for rows where 'Color' is 'red'.", "We also need to filter the 'wine' table for wines with a 'Price' greater than 50.", "To combine the information from both tables, we will use a JOIN on the 'Grape' column, which is common to both tables.", "Finally, we will select the 'Name' of the wines that meet both criteria."], "pred_sql": "SELECT wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE grapes.Color = 'red' AND wine.Price > '50';", "gold_sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  'Red' AND T2.price  >  50", "source_tables": ["wine", "grapes"]}
{"sample_id": 6551, "db_id": "wine_1", "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?", "rationale": ["Identify the relevant tables: 'wine' and 'appellations'.", "Determine the columns needed: 'Name' and 'Price' from 'wine', and 'Appelation' from 'wine' to join with 'appellations'.", "Establish the join condition: 'wine.Appelation' should match 'appellations.Appelation'.", "Set the conditions for the query: price should be less than 50 and the county should be 'Monterey'.", "Construct the SQL SELECT statement to retrieve the desired columns with the specified conditions."], "pred_sql": "SELECT wine.Name, wine.Price, wine.Appelation FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE wine.Price < 50 AND appellations.County = 'Monterey';", "gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Monterey' AND T2.price  <  50", "source_tables": ["wine", "appellations"]}
{"sample_id": 6552, "db_id": "wine_1", "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.", "rationale": ["Identify the relevant tables: 'wine' and 'appellations'.", "We need to select the 'Name' of the wine, so we will include 'wine.Name' in the SELECT statement.", "We need to filter wines based on their price, specifically those with prices below 50. Since prices are stored as text, we will compare them as strings, but we will assume they are formatted correctly for this comparison.", "We also need to filter wines based on their appellation, specifically those located in Monterey County. This requires a JOIN between the 'wine' and 'appellations' tables on the 'Appelation' column.", "Construct the WHERE clause to include both conditions: price below 50 and county being Monterey."], "pred_sql": "SELECT wine.Name FROM wine JOIN appellations ON wine.Appelation = appellations.Appelation WHERE wine.Price < '50' AND appellations.County = 'Monterey';", "gold_sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Monterey' AND T2.price  <  50", "source_tables": ["wine", "appellations"]}
{"sample_id": 6553, "db_id": "wine_1", "question": "What are the numbers of wines for different grapes?", "rationale": ["Identify the relevant table: The 'wine' table contains information about different wines and their associated grape varieties.", "Determine the required information: We need to count the number of wines for each grape variety.", "Use the COUNT() function to count the number of entries for each grape variety.", "Group the results by the 'Grape' column to get the count for each distinct grape variety.", "Construct the SQL query to select the 'Grape' and the count of wines, grouping by 'Grape'."], "pred_sql": "SELECT Grape, COUNT(*) AS NumberOfWines FROM wine GROUP BY Grape;", "gold_sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "source_tables": ["wine"]}
{"sample_id": 6554, "db_id": "wine_1", "question": "How many wines are there for each grape?", "rationale": ["Identify the relevant table: The 'wine' table contains information about the wines and their associated grape varieties.", "Determine the required output: We need to count the number of wines for each grape variety.", "Use the COUNT() function to count the number of entries for each grape variety.", "Group the results by the 'Grape' column to get the count for each unique grape variety.", "Construct the SQL query using SELECT, COUNT(), and GROUP BY clauses."], "pred_sql": "SELECT Grape, COUNT(*) AS WineCount FROM wine GROUP BY Grape;", "gold_sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "source_tables": ["wine"]}
{"sample_id": 6555, "db_id": "wine_1", "question": "What are the average prices of wines for different years?", "rationale": ["Identify the relevant table: The 'wine' table contains the price and year information.", "Determine the required calculation: We need to calculate the average price of wines, which can be done using the AVG() function.", "Group the results by year: To get the average price for each year, we will use the GROUP BY clause on the 'Year' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT Year, AVG(Price) AS Average_Price FROM wine GROUP BY Year;", "gold_sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}
{"sample_id": 6556, "db_id": "wine_1", "question": "What is the average prices of wines for each each?", "rationale": ["Identify the relevant table: The 'wine' table contains the price information.", "Determine the required calculation: We need to calculate the average price of wines, which can be done using the AVG() function.", "Group the results: Since we want the average price for each appellation, we will use the GROUP BY clause on the 'Appelation' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() function and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT AVG(Price) AS Average_Price, Appelation FROM wine GROUP BY Appelation;", "gold_sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}
{"sample_id": 6557, "db_id": "wine_1", "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "rationale": ["Identify the main requirement: to find distinct names of wines with prices higher than some wines from John Anthony winery.", "Determine the relevant table: the 'wine' table contains the necessary information about wines, including their names and prices.", "Use a subquery to find the minimum price of wines from the John Anthony winery. This will help in comparing other wines' prices against it.", "Construct the main query to select distinct wine names from the 'wine' table where the price is greater than the minimum price obtained from the subquery."], "pred_sql": "SELECT DISTINCT w1.Name FROM wine w1 WHERE w1.Price > (SELECT MIN(w2.Price) FROM wine w2 WHERE w2.Winery = 'John Anthony');", "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  'John Anthony')", "source_tables": ["wine"]}
{"sample_id": 6558, "db_id": "wine_1", "question": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "rationale": ["Identify the main requirement: to find distinct names of wines with prices higher than those from John Anthony winery.", "Determine the relevant table: the 'wine' table contains the necessary information about wines, including their names and prices.", "Use a subquery to find the maximum price of wines from the John Anthony winery: SELECT MAX(Price) FROM wine WHERE Winery = 'John Anthony'.", "Incorporate the subquery into the main query to filter wines with prices greater than the maximum price found in the subquery.", "Select distinct names of wines that meet the price condition: SELECT DISTINCT Name FROM wine WHERE Price > (subquery)."], "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Price > (SELECT MAX(Price) FROM wine WHERE Winery = 'John Anthony')", "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  'John Anthony')", "source_tables": ["wine"]}
{"sample_id": 6559, "db_id": "wine_1", "question": "List the names of all distinct wines in alphabetical order.", "rationale": ["Identify the table that contains the wine names, which is the 'wine' table.", "To get distinct wine names, use the DISTINCT keyword in the SELECT statement.", "Specify the column 'Name' to select the wine names.", "To order the results alphabetically, use the ORDER BY clause with 'Name' and specify ASC for ascending order."], "pred_sql": "SELECT DISTINCT Name FROM wine ORDER BY Name ASC;", "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "source_tables": ["wine"]}
{"sample_id": 6560, "db_id": "wine_1", "question": "What are the names of wines, sorted in alphabetical order?", "rationale": ["Identify the table that contains the information about wines, which is the 'wine' table.", "Determine the specific column that contains the names of the wines, which is the 'Name' column.", "Formulate a SQL SELECT statement to retrieve the 'Name' column from the 'wine' table.", "Add an ORDER BY clause to sort the results in alphabetical order by the 'Name' column."], "pred_sql": "SELECT Name FROM wine ORDER BY Name ASC;", "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "source_tables": ["wine"]}
{"sample_id": 6561, "db_id": "wine_1", "question": "List the names of all distinct wines ordered by price.", "rationale": ["Identify the table that contains the wine names, which is the 'wine' table.", "To get distinct wine names, use the DISTINCT keyword in the SELECT statement.", "We need to select the 'Name' column from the 'wine' table.", "To order the results by price, we will include the 'ORDER BY' clause with the 'Price' column."], "pred_sql": "SELECT DISTINCT Name FROM wine ORDER BY Price;", "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "source_tables": ["wine"]}
{"sample_id": 6562, "db_id": "wine_1", "question": "What are the names of wines, sorted by price ascending?", "rationale": ["Identify the table that contains the wine names, which is the 'wine' table.", "Select the 'Name' column from the 'wine' table to get the names of the wines.", "To sort the results by price, include the 'Price' column in the ORDER BY clause.", "Specify 'ASC' to sort the prices in ascending order."], "pred_sql": "SELECT Name FROM wine ORDER BY Price ASC;", "gold_sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "source_tables": ["wine"]}
{"sample_id": 6563, "db_id": "wine_1", "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?", "rationale": ["Identify the relevant tables: 'appellations' for area and 'wine' for wine production details.", "We need to find the area of the appellation that produces the highest number of wines, so we will join the 'appellations' table with the 'wine' table on the 'Appelation' column.", "We need to filter the wines produced before the year 2010, so we will add a WHERE clause to filter 'Year < 2010'.", "To find the area with the highest number of wines, we will group the results by 'Area' and count the number of wines for each area using COUNT(w.No).", "We will order the results in descending order based on the count of wines to get the area with the highest production first.", "Finally, we will limit the results to 1 to get only the top area."], "pred_sql": "SELECT a.Area\nFROM appellations a\nJOIN wine w ON a.Appelation = w.Appelation\nWHERE w.Year < '2010'\nGROUP BY a.Area\nORDER BY COUNT(w.No) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "source_tables": ["wine", "appellations"]}
{"sample_id": 6564, "db_id": "wine_1", "question": "What is the area for the appelation which produced the most wines prior to 2010?", "rationale": ["Identify the relevant tables: 'appellations' for area and 'wine' for production details.", "We need to find the appellation that produced the most wines prior to 2010, so we will join the 'appellations' and 'wine' tables on the 'Appelation' column.", "Filter the wines to only include those produced before the year 2010 using a WHERE clause.", "Group the results by the appellation to count the number of wines produced for each appellation.", "Order the grouped results by the count of wines in descending order to find the appellation with the most wines.", "Select the 'Area' from the 'appellations' table for the top result, limiting the output to 1."], "pred_sql": "SELECT a.Area FROM appellations a JOIN wine w ON a.Appelation = w.Appelation WHERE w.Year < '2010' GROUP BY a.No ORDER BY COUNT(w.No) DESC LIMIT 1;", "gold_sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "source_tables": ["wine", "appellations"]}
{"sample_id": 6565, "db_id": "wine_1", "question": "What is the color of the grape whose wine products has the highest average price?", "rationale": ["Identify the relevant tables: 'grapes' for grape color and 'wine' for wine prices.", "Join the 'grapes' table with the 'wine' table on the 'Grape' column to access both grape colors and wine prices.", "Group the results by grape ID to calculate the average price of wines for each grape variety.", "Order the results by the average price in descending order to find the grape with the highest average price.", "Limit the results to 1 to get only the top result, which corresponds to the grape with the highest average price."], "pred_sql": "SELECT g.Color FROM grapes g JOIN wine w ON g.Grape = w.Grape GROUP BY g.ID ORDER BY AVG(w.Price) DESC LIMIT 1;", "gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "source_tables": ["wine", "grapes"]}
{"sample_id": 6566, "db_id": "wine_1", "question": "Give the color of the grape whose wine products have the highest average price?", "rationale": ["Identify the relevant tables: 'grapes' for grape color and 'wine' for wine prices.", "Join the 'grapes' table with the 'wine' table on the 'Grape' column to associate each wine with its grape variety.", "Group the results by grape color to calculate the average price of wines for each color.", "Use the AVG() function to compute the average price of wines for each grape color.", "Order the results in descending order based on the average price to find the highest average price.", "Limit the results to 1 to get the color of the grape with the highest average price."], "pred_sql": "SELECT g.Color FROM grapes g JOIN wine w ON g.Grape = w.Grape GROUP BY g.Color ORDER BY AVG(w.Price) DESC LIMIT 1;", "gold_sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "source_tables": ["wine", "grapes"]}
{"sample_id": 6567, "db_id": "wine_1", "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "rationale": ["Identify the table that contains the wine names, which is the 'wine' table.", "Determine the relevant column for the wine names, which is 'Name'.", "Identify the condition for the years: we want wines produced before 2000 or after 2010.", "Use the 'Year' column to filter the results based on the specified conditions.", "Since we want distinct names, use the DISTINCT keyword to ensure no duplicates in the results."], "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Year < '2000' OR Year > '2010';", "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "source_tables": ["wine"]}
{"sample_id": 6568, "db_id": "wine_1", "question": "Give the distinct names of wines made before 2000 or after 2010.", "rationale": ["Identify the table that contains the wine names, which is the 'wine' table.", "Determine the relevant column for the wine names, which is 'Name'.", "Identify the column that contains the year of production, which is 'Year'.", "Formulate the condition to filter wines made before 2000 or after 2010 using the WHERE clause.", "Use the DISTINCT keyword to ensure that only unique wine names are returned."], "pred_sql": "SELECT DISTINCT Name FROM wine WHERE Year < '2000' OR Year > '2010';", "gold_sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "source_tables": ["wine"]}
{"sample_id": 6569, "db_id": "wine_1", "question": "Find the distinct winery of wines having price between 50 and 100.", "rationale": ["Identify the table that contains the winery information, which is the 'wine' table.", "Determine the relevant column for winery names, which is 'Winery'.", "Specify the condition for the price of the wines, which should be between 50 and 100.", "Use the DISTINCT keyword to ensure that only unique winery names are returned.", "Construct the SQL query to select distinct winery names from the 'wine' table where the price is within the specified range."], "pred_sql": "SELECT DISTINCT Winery FROM wine WHERE Price BETWEEN '50' AND '100';", "gold_sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "source_tables": ["wine"]}
{"sample_id": 6570, "db_id": "wine_1", "question": "What are the distinct wineries which produce wines costing between 50 and 100?", "rationale": ["Identify the table that contains information about wineries, which is the 'wine' table.", "Determine the relevant column for wineries, which is 'Winery'.", "We need to find distinct wineries, so we will use the DISTINCT keyword.", "Next, we need to filter the wines based on their price, which is in the 'Price' column.", "The price range specified is between 50 and 100, so we will use the BETWEEN operator to filter the results accordingly."], "pred_sql": "SELECT DISTINCT Winery FROM wine WHERE Price BETWEEN '50' AND '100';", "gold_sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "source_tables": ["wine"]}
{"sample_id": 6571, "db_id": "wine_1", "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "rationale": ["Identify the relevant table: The 'wine' table contains the information about wines, including their prices, cases, year of production, and grape variety.", "Determine the required fields: We need to calculate the average price and average cases of wines, so we will use the AVG() function on the 'Price' and 'Cases' columns.", "Set the conditions: We need to filter the results to include only wines produced in the year 2009 and made from the Zinfandel grape. This will be done using the WHERE clause.", "Construct the SQL query: Combine the SELECT statement with the AVG() functions, the FROM clause to specify the 'wine' table, and the WHERE clause to apply the filters."], "pred_sql": "SELECT AVG(Price) AS Average_Price, AVG(Cases) AS Average_Cases FROM wine WHERE Year = '2009' AND Grape = 'Zinfandel';", "gold_sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  'Zinfandel'", "source_tables": ["wine"]}
{"sample_id": 6572, "db_id": "wine_1", "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "rationale": ["Identify the relevant table: The 'wine' table contains information about wines, including their price and cases.", "Determine the columns needed: We need the average price and average cases, so we will use the AVG() function on the 'Price' and 'Cases' columns.", "Filter the results: We need to filter the wines to only include those made from 'Zinfandel' grapes and produced in the year '2009'.", "Construct the SQL query: Use the SELECT statement to get the average price and cases, applying the necessary filters in the WHERE clause."], "pred_sql": "SELECT AVG(Price) AS Average_Price, AVG(Cases) AS Average_Cases FROM wine WHERE Grape = 'Zinfandel' AND Year = '2009';", "gold_sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  'Zinfandel'", "source_tables": ["wine"]}
{"sample_id": 6573, "db_id": "wine_1", "question": "What are the maximum price and score of wines produced by St. Helena appelation?", "rationale": ["Identify the relevant table: The query pertains to wine prices and scores, so we will use the 'wine' table.", "Determine the required fields: We need the maximum price and maximum score, which correspond to the 'Price' and 'Score' columns in the 'wine' table.", "Apply the appropriate aggregate functions: To find the maximum values, we will use the MAX() function for both 'Price' and 'Score'.", "Filter the results: We need to restrict our query to wines produced in the 'St. Helena' appellation, which will be done using a WHERE clause.", "Construct the SQL query: Combine all the elements into a complete SQL statement that selects the maximum price and score for the specified appellation."], "pred_sql": "SELECT MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine WHERE Appelation = 'St. Helena';", "gold_sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  'St. Helena'", "source_tables": ["wine"]}
{"sample_id": 6574, "db_id": "wine_1", "question": "Give the maximum price and score for wines produced in the appelation St. Helena.", "rationale": ["Identify the relevant table: The 'wine' table contains the information about wines, including their prices and scores.", "Determine the required fields: We need to find the maximum price and maximum score, so we will use the MAX() function on the 'Price' and 'Score' columns.", "Specify the condition: We need to filter the results to only include wines produced in the appellation 'St. Helena'.", "Construct the SQL query: Combine the selected fields, the aggregation functions, and the condition into a complete SQL query."], "pred_sql": "SELECT MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine WHERE Appelation = 'St. Helena';", "gold_sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  'St. Helena'", "source_tables": ["wine"]}
{"sample_id": 6575, "db_id": "wine_1", "question": "What are the maximum price and score of wines in each year?", "rationale": ["Identify the relevant table: The 'wine' table contains the necessary columns for price and score.", "Determine the columns needed: We need 'Year', 'Price', and 'Score' from the 'wine' table.", "Use aggregate functions: To find the maximum price and score, we will use the MAX() function.", "Group the results: Since we want the maximum price and score for each year, we will use GROUP BY on the 'Year' column."], "pred_sql": "SELECT Year, MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine GROUP BY Year;", "gold_sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}
{"sample_id": 6576, "db_id": "wine_1", "question": "What are the maximum price and score of wines for each year?", "rationale": ["Identify the relevant table: The 'wine' table contains the necessary columns for price and score.", "Determine the columns needed: We need the 'Year', 'Price', and 'Score' columns.", "Use aggregate functions: To find the maximum price and score, we will use the MAX() function.", "Group the results: Since we want the maximum price and score for each year, we will use GROUP BY on the 'Year' column."], "pred_sql": "SELECT Year, MAX(Price) AS MaxPrice, MAX(Score) AS MaxScore FROM wine GROUP BY Year;", "gold_sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "source_tables": ["wine"]}
{"sample_id": 6577, "db_id": "wine_1", "question": "What are the average price and score of wines grouped by appelation?", "rationale": ["Identify the required data: average price and score of wines.", "Determine the relevant table: the 'wine' table contains the necessary columns for price and score.", "Use the AVG() function to calculate the average price and score.", "Group the results by the 'Appelation' column to get averages for each appellation."], "pred_sql": "SELECT wine.Appelation, AVG(wine.Price) AS Average_Price, AVG(wine.Score) AS Average_Score FROM wine GROUP BY wine.Appelation;", "gold_sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "source_tables": ["wine"]}
{"sample_id": 6578, "db_id": "wine_1", "question": "What are the average price and score of wines for each appelation?", "rationale": ["Identify the relevant table: The 'wine' table contains the necessary information about wines, including their prices and scores.", "Determine the required calculations: We need to calculate the average price and average score for wines, which can be done using the AVG() function in SQL.", "Group the results by appellation: To get the average price and score for each appellation, we will use the GROUP BY clause on the 'Appelation' column.", "Construct the SQL query: Combine the SELECT statement with the AVG() functions and the GROUP BY clause to form the complete SQL query."], "pred_sql": "SELECT wine.Appelation, AVG(wine.Price) AS Average_Price, AVG(wine.Score) AS Average_Score FROM wine GROUP BY wine.Appelation;", "gold_sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "source_tables": ["wine"]}
{"sample_id": 6579, "db_id": "wine_1", "question": "Find the wineries that have at least four wines.", "rationale": ["Identify the table that contains winery information, which is the 'wine' table.", "To find wineries with at least four wines, we need to group the results by the 'Winery' column.", "Use the COUNT function to count the number of wines for each winery.", "Apply the HAVING clause to filter the grouped results to only include wineries that have four or more wines."], "pred_sql": "SELECT Winery FROM wine GROUP BY Winery HAVING COUNT(*) >= 4;", "gold_sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "source_tables": ["wine"]}
{"sample_id": 6580, "db_id": "wine_1", "question": "Which wineries produce at least four wines?", "rationale": ["Identify the table that contains information about wineries, which is the 'wine' table.", "We need to group the results by the 'Winery' column to count the number of wines produced by each winery.", "Use the COUNT function to count the number of wines for each winery.", "Apply a HAVING clause to filter the results to only include wineries that produce at least four wines."], "pred_sql": "SELECT Winery FROM wine GROUP BY Winery HAVING COUNT(*) >= 4;", "gold_sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "source_tables": ["wine"]}
{"sample_id": 6581, "db_id": "wine_1", "question": "Find the country of all appelations who have at most three wines.", "rationale": ["Identify the relevant tables: 'appellations' for appellation details and 'wine' for wine details.", "We need to find appellations with at most three wines, so we will join the 'appellations' table with the 'wine' table on the 'Appelation' column.", "Use the COUNT function to count the number of wines associated with each appellation.", "Group the results by appellation to aggregate the wine counts.", "Use the HAVING clause to filter the grouped results to include only those with a count of wines less than or equal to three.", "Select the 'County' from the 'appellations' table for the filtered results."], "pred_sql": "SELECT a.County FROM appellations a JOIN wine w ON a.Appelation = w.Appelation GROUP BY a.Appelation HAVING COUNT(w.No) <= 3;", "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "source_tables": ["wine", "appellations"]}
{"sample_id": 6582, "db_id": "wine_1", "question": "What are the countries for appelations with at most 3 wines?", "rationale": ["Identify the relevant tables: 'appellations' and 'wine'.", "We need to find appellations that have at most 3 wines associated with them.", "Join the 'appellations' table with the 'wine' table on the 'Appelation' column.", "Group the results by the appellation identifier ('No' in the 'appellations' table) to count the number of wines per appellation.", "Use the HAVING clause to filter groups that have 3 or fewer wines.", "Select the 'County' and 'State' from the 'appellations' table to get the countries for those appellations."], "pred_sql": "SELECT DISTINCT a.County, a.State FROM appellations a JOIN wine w ON a.Appelation = w.Appelation GROUP BY a.No HAVING COUNT(w.No) <= 3;", "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "source_tables": ["wine", "appellations"]}
{"sample_id": 6583, "db_id": "wine_1", "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "rationale": ["Identify the main requirement: to find names of wines produced before a certain year.", "Determine the year to compare against: this is the minimum production year of wines from the Brander winery.", "Construct a subquery to find the minimum year of production for wines by Brander winery: SELECT MIN(Year) FROM wine WHERE Winery = 'Brander'.", "Use the result of the subquery to filter the main query: SELECT Name FROM wine WHERE Year < (subquery).", "Combine the subquery with the main query to form the complete SQL statement."], "pred_sql": "SELECT Name FROM wine WHERE Year < (SELECT MIN(Year) FROM wine WHERE Winery = 'Brander')", "gold_sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  'Brander')", "source_tables": ["wine"]}
{"sample_id": 6584, "db_id": "wine_1", "question": "What are the names of wines produced before any wine from the Brander winery?", "rationale": ["Identify the table that contains the wine information, which is the 'wine' table.", "We need to select the 'Name' of the wines, so we will use SELECT Name.", "We need to filter the wines produced before any wine from the Brander winery. This requires a subquery.", "The subquery will select the minimum 'Year' from the 'wine' table where the 'Winery' is 'Brander'.", "The main query will then filter wines where the 'Year' is less than the result of the subquery."], "pred_sql": "SELECT Name FROM wine WHERE Year < (SELECT MIN(Year) FROM wine WHERE Winery = 'Brander')", "gold_sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  'Brander')", "source_tables": ["wine"]}
{"sample_id": 6585, "db_id": "wine_1", "question": "What are the names of wines that are more expensive then all wines made in the year 2006?", "rationale": ["Identify the main requirement: to find the names of wines that are more expensive than all wines made in the year 2006.", "To achieve this, we need to compare the price of each wine to the maximum price of wines produced in 2006.", "We will use a subquery to find the maximum price of wines from the year 2006: (SELECT MAX(Price) FROM wine WHERE Year = '2006').", "The main query will select the names of wines from the 'wine' table where their price is greater than the result of the subquery.", "Combine these elements to form the final SQL query."], "pred_sql": "SELECT Name FROM wine WHERE Price > (SELECT MAX(Price) FROM wine WHERE Year = '2006')", "gold_sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}
{"sample_id": 6586, "db_id": "wine_1", "question": "Give the names of wines with prices above any wine produced in 2006.", "rationale": ["Identify the main requirement: to find names of wines with prices above any wine produced in 2006.", "Determine the relevant table: the 'wine' table contains the necessary information about wine names and prices.", "To find the maximum price of wines produced in 2006, a subquery is needed: SELECT MAX(Price) FROM wine WHERE Year = '2006'.", "The main query will select the names of wines from the 'wine' table where their price is greater than the result of the subquery.", "Combine the subquery with the main query using a WHERE clause to filter the results accordingly."], "pred_sql": "SELECT Name FROM wine WHERE Price > (SELECT MAX(Price) FROM wine WHERE Year = '2006')", "gold_sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "source_tables": ["wine"]}
{"sample_id": 6587, "db_id": "wine_1", "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "rationale": ["Identify the relevant tables: 'wine' and 'grapes'.", "We need to count the number of wines made from white grapes, so we will join the 'wine' table with the 'grapes' table on the 'Grape' column.", "Filter the results to include only those grapes that are of 'white' color using a WHERE clause.", "Group the results by 'Winery' to count the number of wines per winery.", "Order the results in descending order based on the count of wines to get the top wineries.", "Limit the results to the top 3 wineries."], "pred_sql": "SELECT Winery, COUNT(*) AS WineCount\nFROM wine\nJOIN grapes ON wine.Grape = grapes.Grape\nWHERE grapes.Color = 'white'\nGROUP BY Winery\nORDER BY WineCount DESC\nLIMIT 3;", "gold_sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["wine", "grapes"]}
{"sample_id": 6588, "db_id": "wine_1", "question": "Which 3 wineries produce the most wines made from white grapes?", "rationale": ["Identify the relevant tables: 'wine' for wineries and 'grapes' for grape colors.", "Filter the 'grapes' table to find all grape varieties that are classified as 'white'.", "Join the 'wine' table with the 'grapes' table based on the grape variety to filter wines made from white grapes.", "Group the results by 'Winery' to count the number of wines produced by each winery.", "Order the results in descending order based on the count of wines to find the top producers.", "Limit the results to the top 3 wineries."], "pred_sql": "SELECT Winery, COUNT(*) AS WineCount\nFROM wine\nWHERE Grape IN (SELECT Grape FROM grapes WHERE Color = 'white')\nGROUP BY Winery\nORDER BY WineCount DESC\nLIMIT 3;", "gold_sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  'White' GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "source_tables": ["wine", "grapes"]}
{"sample_id": 6589, "db_id": "wine_1", "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "rationale": ["Identify the columns needed: Grape, Winery, and Year from the wine table.", "Determine the condition: Price must be greater than 100.", "Specify the table to query: wine.", "Use the SELECT statement to retrieve the specified columns.", "Add the WHERE clause to filter results based on the price condition.", "Use the ORDER BY clause to sort the results by year."], "pred_sql": "SELECT wine.Grape, wine.Winery, wine.Year FROM wine WHERE wine.Price > 100 ORDER BY wine.Year;", "gold_sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "source_tables": ["wine"]}
{"sample_id": 6590, "db_id": "wine_1", "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "rationale": ["Identify the relevant table: The 'wine' table contains the information about wines, including their price, grape variety, winery, and year.", "Select the required columns: We need to retrieve the 'Grape', 'Winery', and 'Year' columns from the 'wine' table.", "Apply the filter condition: We need to filter the results to include only those wines where the 'Price' is greater than 100.", "Sort the results: The results should be sorted by the 'Year' column in ascending order."], "pred_sql": "SELECT wine.Grape, wine.Winery, wine.Year FROM wine WHERE wine.Price > 100 ORDER BY wine.Year;", "gold_sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "source_tables": ["wine"]}
{"sample_id": 6591, "db_id": "wine_1", "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "rationale": ["Identify the columns needed: grape, appelation, and name of wines.", "Determine the tables involved: 'grapes' for grape varieties and 'wine' for wine details.", "Establish the relationship between the tables: 'wine' has a foreign key 'Grape' that references 'grapes'.", "Set the condition for filtering: select wines with a score greater than 93.", "Specify the ordering requirement: order the results by the name of the wine.", "Construct the SQL query using SELECT, JOIN, WHERE, and ORDER BY clauses."], "pred_sql": "SELECT grapes.Grape, wine.Appelation, wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape WHERE wine.Score > 93 ORDER BY wine.Name;", "gold_sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "source_tables": ["wine"]}
{"sample_id": 6592, "db_id": "wine_1", "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "rationale": ["Identify the tables needed: grapes, appellations, and wine.", "Determine the columns to select: Grape from grapes, Appelation from appellations, and Name from wine.", "Establish the relationships between the tables using JOINs: wine.Grape with grapes.Grape and wine.Appelation with appellations.Appelation.", "Add a WHERE clause to filter wines with scores above 93.", "Sort the results by the Name of the wine."], "pred_sql": "SELECT grapes.Grape, appellations.Appelation, wine.Name FROM wine JOIN grapes ON wine.Grape = grapes.Grape JOIN appellations ON wine.Appelation = appellations.Appelation WHERE wine.Score > 93 ORDER BY wine.Name;", "gold_sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "source_tables": ["wine"]}
{"sample_id": 6593, "db_id": "wine_1", "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "rationale": ["Identify the relevant tables: 'appellations' and 'wine'.", "We need to find appellations that produce wines after the year 2008, so we will filter the 'wine' table based on the 'Year' column.", "We also need to exclude those in the 'Central Coast' area, which is a property of the 'appellations' table.", "Join the 'appellations' table with the 'wine' table on the 'Appelation' column to combine the relevant data.", "Use a SELECT statement to get distinct appellations that meet the criteria of the year and area."], "pred_sql": "SELECT DISTINCT a.Appelation \nFROM appellations a \nJOIN wine w ON a.Appelation = w.Appelation \nWHERE w.Year > '2008' \nAND a.Area != 'Central Coast';", "gold_sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  'Central Coast'", "source_tables": ["wine", "appellations"]}
{"sample_id": 6594, "db_id": "wine_1", "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?", "rationale": ["Identify the relevant tables: 'wine' for wine production details and 'appellations' for appellation information.", "We need to select distinct appellations, so we will use SELECT DISTINCT on the Appelation column from the appellations table.", "Join the 'wine' table with the 'appellations' table on the Appelation column to link wines with their respective appellations.", "Filter the results to include only wines produced after the year 2008 by using the condition 'w.Year > '2008'.", "Add another condition to exclude wines from the 'Central Coast' area using 'a.Area != 'Central Coast'.", "Combine all these elements into a complete SQL query."], "pred_sql": "SELECT DISTINCT a.Appelation \nFROM wine w \nJOIN appellations a ON w.Appelation = a.Appelation \nWHERE w.Year > '2008' \nAND a.Area != 'Central Coast';", "gold_sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  'Central Coast'", "source_tables": ["wine", "appellations"]}
{"sample_id": 6595, "db_id": "wine_1", "question": "Find the average price of wines that are not produced from Sonoma county.", "rationale": ["Identify the main objective: Calculate the average price of wines not produced from Sonoma county.", "Determine the relevant tables: The 'wine' table for wine prices and the 'appellations' table to filter by county.", "Use a subquery to find all appellations in Sonoma county: SELECT Appelation FROM appellations WHERE County = 'Sonoma'.", "Filter the main query to exclude wines from these appellations: WHERE Appelation NOT IN (subquery).", "Calculate the average price using AVG(Price): SELECT AVG(Price) AS Average_Price."], "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine WHERE Appelation NOT IN (SELECT Appelation FROM appellations WHERE County = 'Sonoma');", "gold_sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "source_tables": ["wine", "appellations"]}
{"sample_id": 6596, "db_id": "wine_1", "question": "What is the average price for wines not produced in Sonoma county?", "rationale": ["Identify the relevant table for wine prices, which is the 'wine' table.", "To find the average price, we will use the AVG() function on the 'Price' column in the 'wine' table.", "We need to filter out wines produced in Sonoma county. This requires a subquery to find all appellations in Sonoma county.", "The subquery will select the 'Appelation' from the 'appellations' table where the 'County' is 'Sonoma'.", "The main query will then select the average price from the 'wine' table where the 'Appelation' is not in the list returned by the subquery."], "pred_sql": "SELECT AVG(Price) AS Average_Price FROM wine WHERE Appelation NOT IN (SELECT Appelation FROM appellations WHERE County = 'Sonoma');", "gold_sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "source_tables": ["wine", "appellations"]}
{"sample_id": 6597, "db_id": "wine_1", "question": "Find the county where produces the most number of wines with score higher than 90.", "rationale": ["Identify the relevant tables: 'wine' for wine details and 'appellations' for county information.", "We need to count the number of wines with a score higher than 90, so we will filter the 'wine' table using a WHERE clause.", "Join the 'wine' table with the 'appellations' table on the Appelation column to access county information.", "Group the results by county to count the number of wines per county.", "Order the results in descending order based on the count of wines to find the county with the most wines.", "Limit the results to 1 to get only the county with the highest count."], "pred_sql": "SELECT a.County, COUNT(w.No) AS WineCount\nFROM wine w\nJOIN appellations a ON w.Appelation = a.Appelation\nWHERE w.Score > 90\nGROUP BY a.County\nORDER BY WineCount DESC\nLIMIT 1;", "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "source_tables": ["wine", "appellations"]}
{"sample_id": 6598, "db_id": "wine_1", "question": "What is the county that produces the most wines scoring higher than 90?", "rationale": ["Identify the relevant tables: 'wine' for wine details and 'appellations' for county information.", "We need to find wines with a score higher than 90, so we will filter the 'wine' table using a WHERE clause.", "To get the county information, we will join the 'wine' table with the 'appellations' table on the 'Appelation' column.", "We will group the results by 'County' to count the number of wines per county that meet the score criteria.", "We will use COUNT() to count the number of wines for each county and order the results in descending order to find the county with the most wines.", "Finally, we will limit the results to 1 to get only the county that produces the most wines scoring higher than 90."], "pred_sql": "SELECT a.County, COUNT(w.No) AS WineCount\nFROM wine w\nJOIN appellations a ON w.Appelation = a.Appelation\nWHERE w.Score > 90\nGROUP BY a.County\nORDER BY WineCount DESC\nLIMIT 1;", "gold_sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "source_tables": ["wine", "appellations"]}
{"sample_id": 6599, "db_id": "train_station", "question": "How many train stations are there?", "rationale": ["Identify the requirement: The user wants to know the total number of train stations.", "Determine the relevant table: The 'station' table contains the information about train stations.", "Use the COUNT() function to count the number of entries in the 'station' table.", "Construct the SQL query to select the count from the 'station' table."], "pred_sql": "SELECT COUNT(*) AS Number_of_Stations FROM station;", "gold_sql": "SELECT count(*) FROM station", "source_tables": ["station"]}
{"sample_id": 6600, "db_id": "train_station", "question": "Show the name, location, and number of platforms for all stations.", "rationale": ["Identify the required columns: Name, Location, and Number_of_Platforms from the station table.", "Determine the table to query: the station table contains all the necessary information.", "Construct the SQL SELECT statement to retrieve the specified columns from the station table."], "pred_sql": "SELECT Name, Location, Number_of_Platforms FROM station;", "gold_sql": "SELECT name ,  LOCATION ,  number_of_platforms FROM station", "source_tables": ["station"]}
{"sample_id": 6601, "db_id": "train_station", "question": "What are all locations of train stations?", "rationale": ["Identify the table that contains the information about train stations, which is the 'station' table.", "Determine the specific column that holds the location data, which is the 'Location' column.", "Construct a SQL query to select all entries from the 'Location' column in the 'station' table."], "pred_sql": "SELECT Location FROM station;", "gold_sql": "SELECT DISTINCT LOCATION FROM station", "source_tables": ["station"]}
{"sample_id": 6602, "db_id": "train_station", "question": "Show the names and total passengers for all train stations not in London.", "rationale": ["Identify the relevant table: The query requires information about train stations, so we will use the 'station' table.", "Determine the required columns: We need to select the 'Name' and 'Total_Passengers' columns from the 'station' table.", "Apply the filter condition: We need to exclude stations located in London. This can be done using a WHERE clause that checks if the 'Location' does not contain 'London'.", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to form the complete SQL query."], "pred_sql": "SELECT Name, Total_Passengers FROM station WHERE Location NOT LIKE '%London%';", "gold_sql": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'", "source_tables": ["station"]}
{"sample_id": 6603, "db_id": "train_station", "question": "Show the names and main services for train stations that have the top three total number of passengers.", "rationale": ["Identify the relevant table: The query requires information about train stations, which is found in the 'station' table.", "Determine the required columns: The user wants to see the 'Name' and 'Main_Services' of the stations.", "Sort the results: To find the top three stations by total passengers, we need to order the results by 'Total_Passengers' in descending order.", "Limit the results: We only need the top three entries, so we will use the LIMIT clause to restrict the output to three rows."], "pred_sql": "SELECT Name, Main_Services FROM station ORDER BY Total_Passengers DESC LIMIT 3;", "gold_sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3", "source_tables": ["station"]}
{"sample_id": 6604, "db_id": "train_station", "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?", "rationale": ["Identify the relevant table: The 'station' table contains the 'Total_Passengers' column and the 'Location' column.", "Determine the required calculations: We need to calculate the average and maximum of the 'Total_Passengers' column.", "Filter the results: We need to include only those stations located in 'London' or 'Glasgow'.", "Construct the SQL query: Use the SELECT statement to calculate AVG and MAX on 'Total_Passengers' with a WHERE clause to filter by 'Location'."], "pred_sql": "SELECT AVG(Total_Passengers) AS Average_Passengers, MAX(Total_Passengers) AS Max_Passengers FROM station WHERE Location IN ('London', 'Glasgow');", "gold_sql": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'", "source_tables": ["station"]}
{"sample_id": 6605, "db_id": "train_station", "question": "Show all locations and the total number of platforms and passengers for all train stations in each location.", "rationale": ["Identify the relevant table: The 'station' table contains the necessary columns: 'Location', 'Number_of_Platforms', and 'Total_Passengers'.", "Determine the required output: We need to show the 'Location', total number of platforms, and total number of passengers for each location.", "Use aggregation: To get the total number of platforms and passengers for each location, we will use the SUM() function.", "Group the results: To ensure that the totals are calculated for each unique location, we will use the GROUP BY clause on the 'Location' column."], "pred_sql": "SELECT Location, SUM(Number_of_Platforms) AS Total_Platforms, SUM(Total_Passengers) AS Total_Passengers\nFROM station\nGROUP BY Location;", "gold_sql": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION", "source_tables": ["station"]}
{"sample_id": 6606, "db_id": "train_station", "question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.", "rationale": ["Identify the table that contains the location information, which is the 'station' table.", "Determine the conditions specified in the input query: at least 15 platforms and more than 25 total passengers.", "Translate the conditions into SQL WHERE clause: Number_of_Platforms >= '15' and Total_Passengers > '25'.", "Use SELECT DISTINCT to ensure unique locations are returned.", "Construct the SQL query to select the Location from the station table where the conditions are met."], "pred_sql": "SELECT DISTINCT s.Location \nFROM station s \nWHERE s.Number_of_Platforms >= '15' \nAND s.Total_Passengers > '25';", "gold_sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25", "source_tables": ["station"]}
{"sample_id": 6607, "db_id": "train_station", "question": "Show all locations which don't have a train station with at least 15 platforms.", "rationale": ["Identify the relevant table: We need to work with the 'station' table since it contains information about locations and the number of platforms.", "Determine the condition: We want to find locations that do not have a train station with at least 15 platforms.", "Create a subquery: The subquery will select Station_IDs from the 'station' table where the Number_of_Platforms is greater than or equal to 15.", "Use the NOT IN clause: The main query will select distinct locations from the 'station' table where the Station_ID is not in the list generated by the subquery."], "pred_sql": "SELECT DISTINCT Location FROM station WHERE Station_ID NOT IN (SELECT Station_ID FROM station WHERE Number_of_Platforms >= '15')", "gold_sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15", "source_tables": ["station"]}
{"sample_id": 6608, "db_id": "train_station", "question": "Show the location with most number of train stations.", "rationale": ["Identify the relevant table: The 'station' table contains the 'Location' and is where we can count the number of stations.", "Use COUNT(*) to count the number of stations for each location.", "Group the results by 'Location' to aggregate the counts for each unique location.", "Order the results in descending order based on the count of stations to find the location with the most stations.", "Limit the results to 1 to get only the top location."], "pred_sql": "SELECT Location, COUNT(*) AS Number_of_Stations\nFROM station\nGROUP BY Location\nORDER BY Number_of_Stations DESC\nLIMIT 1;", "gold_sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "source_tables": ["station"]}
{"sample_id": 6609, "db_id": "train_station", "question": "Show the name, time, and service for all trains.", "rationale": ["Identify the table that contains the required information: The 'train' table has the columns 'Name', 'Time', and 'Service'.", "Formulate the SQL SELECT statement to retrieve the specified columns from the 'train' table.", "Construct the final SQL query: SELECT Name, Time, Service FROM train;"], "pred_sql": "SELECT Name, Time, Service FROM train;", "gold_sql": "SELECT name ,  TIME ,  service FROM train", "source_tables": ["train"]}
{"sample_id": 6610, "db_id": "train_station", "question": "Show the number of trains", "rationale": ["Identify the requirement: The user wants to know the number of trains.", "Determine the relevant table: The 'train' table contains the information about trains.", "Use the COUNT() function to count the total number of entries in the 'train' table.", "Construct the SQL query to select the count from the 'train' table."], "pred_sql": "SELECT COUNT(*) AS Number_of_Trains FROM train;", "gold_sql": "SELECT count(*) FROM train", "source_tables": ["train"]}
{"sample_id": 6611, "db_id": "train_station", "question": "Show the name and service for all trains in order by time.", "rationale": ["Identify the table that contains the required information: The 'train' table has the columns 'Name' and 'Service'.", "Determine the columns to select: We need to select 'Name' and 'Service'.", "Specify the order of the results: The results should be ordered by the 'Time' column.", "Construct the SQL query using the SELECT statement, specifying the columns and the ORDER BY clause."], "pred_sql": "SELECT Name, Service FROM train ORDER BY Time;", "gold_sql": "SELECT name ,  service FROM train ORDER BY TIME", "source_tables": ["train"]}
{"sample_id": 6612, "db_id": "train_station", "question": "Show the station name and number of trains in each station.", "rationale": ["Identify the required columns: station name and number of trains.", "The station name is in the 'station' table under the 'Name' column.", "To count the number of trains per station, we need to join the 'station' table with the 'train_station' table using the 'Station_ID'.", "Use a LEFT JOIN to ensure we include stations even if they have no trains.", "Count the 'Train_ID' from the 'train_station' table to get the number of trains for each station.", "Group the results by 'Station_ID' to aggregate the count of trains for each station."], "pred_sql": "SELECT s.Name, COUNT(ts.Train_ID) AS Number_of_Trains\nFROM station s\nLEFT JOIN train_station ts ON s.Station_ID = ts.Station_ID\nGROUP BY s.Station_ID;", "gold_sql": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id", "source_tables": ["station", "train_station"]}
{"sample_id": 6613, "db_id": "train_station", "question": "show the train name and station name for each train.", "rationale": ["Identify the tables involved: We need data from the 'train' and 'station' tables, and we will use the 'train_station' table to link them.", "Determine the columns to select: We want to show the train name and station name, which are 'Name' from the 'train' table and 'Name' from the 'station' table.", "Establish the relationships: The 'train' table is linked to the 'train_station' table via 'Train_ID', and the 'station' table is linked to the 'train_station' table via 'Station_ID'.", "Construct the SQL query: Use JOINs to combine the tables based on the relationships identified, and select the desired columns."], "pred_sql": "SELECT train.Name AS Train_Name, station.Name AS Station_Name FROM train JOIN train_station ON train.Train_ID = train_station.Train_ID JOIN station ON train_station.Station_ID = station.Station_ID;", "gold_sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id", "source_tables": ["train", "station", "train_station"]}
{"sample_id": 6614, "db_id": "train_station", "question": "Show all train names and times in stations in London in descending order by train time.", "rationale": ["Identify the tables needed: 'train', 'train_station', and 'station'.", "We need to select the 'Name' and 'Time' columns from the 'train' table.", "To get the relevant train information, we need to join the 'train' table with the 'train_station' table on 'Train_ID'.", "Next, we join the 'train_station' table with the 'station' table on 'Station_ID' to filter by location.", "We filter the results to include only those stations located in London using a WHERE clause with 'LIKE'.", "Finally, we order the results by 'Time' in descending order."], "pred_sql": "SELECT train.Name, train.Time \nFROM train \nJOIN train_station ON train.Train_ID = train_station.Train_ID \nJOIN station ON train_station.Station_ID = station.Station_ID \nWHERE station.Location LIKE '%London%' \nORDER BY train.Time DESC;", "gold_sql": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC", "source_tables": ["train", "station", "train_station"]}
{"sample_id": 6615, "db_id": "train_station", "question": "Show the station name with greatest number of trains.", "rationale": ["Identify the relevant tables: We need to find the station name and the number of trains, so we will use the 'station' and 'train_station' tables.", "Join the tables: We will join the 'station' table with the 'train_station' table on the 'Station_ID' to link stations with their respective trains.", "Group by station: We will group the results by 'Station_ID' to count the number of trains associated with each station.", "Count the trains: Use COUNT(ts.Train_ID) to count the number of trains for each station.", "Order the results: We will order the results in descending order based on the count of trains to find the station with the greatest number of trains.", "Limit the results: Finally, we will limit the results to 1 to get only the station with the greatest number of trains."], "pred_sql": "SELECT s.Name\nFROM station s\nJOIN train_station ts ON s.Station_ID = ts.Station_ID\nGROUP BY s.Station_ID\nORDER BY COUNT(ts.Train_ID) DESC\nLIMIT 1;", "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["station", "train_station"]}
{"sample_id": 6616, "db_id": "train_station", "question": "Show the station name with at least two trains.", "rationale": ["We need to select the station names that have at least two trains.", "To do this, we will join the 'station' table with the 'train_station' table on the 'Station_ID'.", "We will group the results by 'Station_ID' to aggregate the number of trains associated with each station.", "Using the HAVING clause, we will filter the groups to include only those with a count of Train_IDs that is 2 or more."], "pred_sql": "SELECT s.Name\nFROM station s\nJOIN train_station ts ON s.Station_ID = ts.Station_ID\nGROUP BY s.Station_ID\nHAVING COUNT(ts.Train_ID) >= 2;", "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2", "source_tables": ["station", "train_station"]}
{"sample_id": 6617, "db_id": "train_station", "question": "Show all locations with only 1 station.", "rationale": ["Identify the requirement to show locations with only one station.", "To achieve this, we need to group the stations by their Location.", "Using the GROUP BY clause allows us to aggregate the data based on the Location.", "We need to count the number of stations in each location, which can be done using COUNT(Station_ID).", "To filter the results to only those locations with one station, we use the HAVING clause with the condition COUNT(Station_ID) = 1."], "pred_sql": "SELECT Location FROM station GROUP BY Location HAVING COUNT(Station_ID) = 1;", "gold_sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1", "source_tables": ["station"]}
{"sample_id": 6618, "db_id": "train_station", "question": "Show station names without any trains.", "rationale": ["Identify the requirement: We need to find station names that do not have any associated trains.", "To achieve this, we will use a subquery to find all Station_IDs that are linked to trains in the train_station table.", "We will then select the names from the station table where the Station_ID is not in the list of Station_IDs obtained from the subquery.", "The final SQL query will select the Name from the station table with the specified condition."], "pred_sql": "SELECT Name FROM station WHERE Station_ID NOT IN (SELECT Station_ID FROM train_station);", "gold_sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)", "source_tables": ["station", "train_station"]}
{"sample_id": 6619, "db_id": "train_station", "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?", "rationale": ["Identify the tables involved: We need to access the 'station' table for station names and the 'train_station' table to link trains to stations.", "We need to find stations that serve both 'Ananthapuri Express' and 'Guruvayur Express'. This requires joining the 'station' table with the 'train_station' table and the 'train' table.", "First, we will create a query to find all stations that serve 'Ananthapuri Express'.", "Next, we will create a second query to find all stations that serve 'Guruvayur Express'.", "To find stations that serve both trains, we can use the INTERSECT operator to get the common results from both queries."], "pred_sql": "SELECT s.Name FROM station s JOIN train_station ts1 ON s.Station_ID = ts1.Station_ID JOIN train t1 ON ts1.Train_ID = t1.Train_ID WHERE t1.Name = 'Ananthapuri Express' INTERSECT SELECT s.Name FROM station s JOIN train_station ts2 ON s.Station_ID = ts2.Station_ID JOIN train t2 ON ts2.Train_ID = t2.Train_ID WHERE t2.Name = 'Guruvayur Express';", "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  'Guruvayur Express'", "source_tables": ["train", "station", "train_station"]}
{"sample_id": 6620, "db_id": "train_station", "question": "Find the names of the trains that do not pass any station located in London.", "rationale": ["Identify the main goal: We need to find the names of trains that do not pass through any station located in London.", "To achieve this, we will first need to identify the Train_IDs of trains that do pass through stations in London.", "We can do this by joining the train_station table with the station table on the Station_ID, filtering for stations where the Location is 'London'.", "Next, we will select the Train_IDs from this result set.", "Finally, we will select the names of trains from the train table where the Train_ID is not in the list of Train_IDs that pass through London stations."], "pred_sql": "SELECT DISTINCT train.Name \nFROM train \nWHERE train.Train_ID NOT IN (\n    SELECT train_station.Train_ID \n    FROM train_station \n    JOIN station ON train_station.Station_ID = station.Station_ID \n    WHERE station.Location = 'London'\n);", "gold_sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  'London')", "source_tables": ["train", "station", "train_station"]}
{"sample_id": 6621, "db_id": "train_station", "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.", "rationale": ["Identify the relevant table: The query requires information about stations, so we will use the 'station' table.", "Select the required columns: We need the 'Name' and 'Location' of the stations, so we will select these columns from the 'station' table.", "Determine the ordering criteria: The stations should be ordered by their yearly entry exit and interchange amounts. We will sum 'Annual_entry_exit' and 'Annual_interchanges' for ordering.", "Convert the text fields to integers: Since 'Annual_entry_exit' and 'Annual_interchanges' are stored as text, we need to cast them to integers for proper numerical ordering.", "Construct the SQL query: Combine the SELECT statement with the ORDER BY clause to form the complete SQL query."], "pred_sql": "SELECT Name, Location FROM station ORDER BY CAST(Annual_entry_exit AS INTEGER) + CAST(Annual_interchanges AS INTEGER) DESC;", "gold_sql": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges", "source_tables": ["station"]}
{"sample_id": 6622, "db_id": "driving_school", "question": "List all vehicle id", "rationale": ["Identify the table that contains the vehicle information, which is the 'Vehicles' table.", "Determine the specific column needed to fulfill the request, which is 'vehicle_id'.", "Construct the SQL query to select the 'vehicle_id' from the 'Vehicles' table."], "pred_sql": "SELECT vehicle_id FROM Vehicles;", "gold_sql": "SELECT vehicle_id FROM Vehicles;", "source_tables": ["vehicles"]}
{"sample_id": 6623, "db_id": "driving_school", "question": "What are the ids of all vehicles?", "rationale": ["Identify the table that contains vehicle information, which is the 'Vehicles' table.", "Determine the specific column that holds the unique identifiers for vehicles, which is 'vehicle_id'.", "Construct a SQL query to select the 'vehicle_id' from the 'Vehicles' table."], "pred_sql": "SELECT vehicle_id FROM Vehicles;", "gold_sql": "SELECT vehicle_id FROM Vehicles;", "source_tables": ["vehicles"]}
{"sample_id": 6624, "db_id": "driving_school", "question": "How many vehicle in total?", "rationale": ["Identify the table that contains vehicle information, which is the 'Vehicles' table.", "To find the total number of vehicles, we need to count the entries in the 'Vehicles' table.", "Use the COUNT() function to count all rows in the 'Vehicles' table.", "Construct the SQL query to select the count of vehicles from the 'Vehicles' table."], "pred_sql": "SELECT COUNT(*) AS total_vehicles FROM Vehicles;", "gold_sql": "SELECT count(*) FROM Vehicles;", "source_tables": ["vehicles"]}
{"sample_id": 6625, "db_id": "driving_school", "question": "How many vehicles exist?", "rationale": ["Identify the requirement: Count the number of vehicles.", "Determine the relevant table: The Vehicles table contains the information about vehicles.", "Use the COUNT() function to count the total number of entries in the Vehicles table.", "Construct the SQL query to select the count from the Vehicles table."], "pred_sql": "SELECT COUNT(*) AS vehicle_count FROM Vehicles;", "gold_sql": "SELECT count(*) FROM Vehicles;", "source_tables": ["vehicles"]}
{"sample_id": 6626, "db_id": "driving_school", "question": "Show the detail of vehicle with id 1.", "rationale": ["Identify the table that contains vehicle details, which is the 'Vehicles' table.", "Determine the specific vehicle to retrieve by its unique identifier, which is 'vehicle_id'.", "Construct the SQL query to select all columns from the 'Vehicles' table where 'vehicle_id' equals '1'."], "pred_sql": "SELECT * FROM Vehicles WHERE vehicle_id = '1';", "gold_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "source_tables": ["vehicles"]}
{"sample_id": 6627, "db_id": "driving_school", "question": "What are the details of the car with id 1?", "rationale": ["Identify the table that contains the information about vehicles, which is the 'Vehicles' table.", "Determine the specific column that contains the unique identifier for each vehicle, which is 'vehicle_id'.", "Formulate a SQL query to select all columns from the 'Vehicles' table where the 'vehicle_id' matches the provided id, which is '1'."], "pred_sql": "SELECT * FROM Vehicles WHERE vehicle_id = '1';", "gold_sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "source_tables": ["vehicles"]}
{"sample_id": 6628, "db_id": "driving_school", "question": "List the first name middle name and last name of all staff.", "rationale": ["Identify the table that contains staff information, which is the 'Staff' table.", "Determine the specific columns needed from the 'Staff' table, which are 'first_name', 'middle_name', and 'last_name'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Staff' table."], "pred_sql": "SELECT first_name, middle_name, last_name FROM Staff;", "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "source_tables": ["staff"]}
{"sample_id": 6629, "db_id": "driving_school", "question": "What are the first, middle, and last names of all staff?", "rationale": ["Identify the table that contains staff information, which is the 'Staff' table.", "Determine the specific columns needed for the output, which are 'first_name', 'middle_name', and 'last_name'.", "Construct the SQL SELECT statement to retrieve these columns from the 'Staff' table."], "pred_sql": "SELECT first_name, middle_name, last_name FROM Staff;", "gold_sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "source_tables": ["staff"]}
{"sample_id": 6630, "db_id": "driving_school", "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?", "rationale": ["Identify the table that contains the staff member's information, which is the 'Staff' table.", "Determine the columns needed for the query: we need the 'date_of_birth' of the staff member.", "Specify the conditions to filter the results: we want the staff member with the first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL SELECT statement to retrieve the 'date_of_birth' from the 'Staff' table where the specified conditions are met."], "pred_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6631, "db_id": "driving_school", "question": "What is the date of birth for the staff member named Janessa Sawayn?", "rationale": ["Identify the relevant table: The query is asking for information about a staff member, so we will use the 'Staff' table.", "Determine the columns needed: We need the 'date_of_birth' column from the 'Staff' table.", "Specify the conditions: We need to filter the results to find the staff member with the first name 'Janessa' and the last name 'Sawayn'.", "Construct the SQL query: Using the SELECT statement to retrieve the 'date_of_birth' where the first and last names match the specified values."], "pred_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT date_of_birth FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6632, "db_id": "driving_school", "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?", "rationale": ["Identify the relevant table: The query pertains to staff members, so we will use the 'Staff' table.", "Determine the columns needed: We need the 'date_joined_staff' column to find out when the staff member joined the company.", "Specify the conditions: We need to filter the results to find the staff member with the first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL query: Using the SELECT statement to retrieve the 'date_joined_staff' from the 'Staff' table with the specified conditions."], "pred_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6633, "db_id": "driving_school", "question": "When did the staff member named Janessa Sawayn join the company?", "rationale": ["Identify the relevant table: The question pertains to staff members, so we will use the Staff table.", "Determine the columns needed: We need the 'date_joined_staff' column to find out when the staff member joined.", "Filter the results: We need to filter the staff member by their first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL query: Using the SELECT statement to retrieve the 'date_joined_staff' for the specified staff member."], "pred_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT date_joined_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6634, "db_id": "driving_school", "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?", "rationale": ["Identify the relevant table: The query pertains to staff members, so we will use the 'Staff' table.", "Determine the columns needed: We need the 'date_left_staff' column to find out when the staff member left the company.", "Specify the conditions: We need to filter the results to find the staff member with the first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL query: Using the SELECT statement to retrieve 'date_left_staff' from the 'Staff' table with the specified conditions."], "pred_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6635, "db_id": "driving_school", "question": "When did the staff member Janessa Sawayn leave the company?", "rationale": ["Identify the relevant table: The question pertains to staff members, so we will use the Staff table.", "Determine the columns needed: We need the 'date_left_staff' column to find out when the staff member left the company.", "Filter the records: We need to filter the records to find the specific staff member named Janessa Sawayn. This requires checking both the first name and last name columns.", "Construct the SQL query: Using the SELECT statement to retrieve the 'date_left_staff' for the staff member with the specified first and last name."], "pred_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT date_left_staff FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6636, "db_id": "driving_school", "question": "How many staff have the first name Ludie?", "rationale": ["Identify the table that contains staff information, which is the 'Staff' table.", "Determine the column that holds the first names of the staff, which is 'first_name'.", "Formulate a query to count the number of staff members with the first name 'Ludie'.", "Use the COUNT() function to get the total number of records that match the condition.", "Construct the final SQL query to select the count from the 'Staff' table where the first name is 'Ludie'."], "pred_sql": "SELECT COUNT(*) AS staff_count FROM Staff WHERE first_name = 'Ludie';", "gold_sql": "SELECT count(*) FROM Staff WHERE first_name = 'Ludie';", "source_tables": ["staff"]}
{"sample_id": 6637, "db_id": "driving_school", "question": "How many employees have a first name of Ludie?", "rationale": ["Identify the table that contains employee information, which is the Staff table.", "Determine the column that holds the first names of employees, which is the first_name column in the Staff table.", "Formulate a query to count the number of employees with the first name 'Ludie' using the COUNT() function.", "Construct the SQL query to select the count from the Staff table where the first_name matches 'Ludie'."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM Staff WHERE first_name = 'Ludie';", "gold_sql": "SELECT count(*) FROM Staff WHERE first_name = 'Ludie';", "source_tables": ["staff"]}
{"sample_id": 6638, "db_id": "driving_school", "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?", "rationale": ["Identify the table that contains the required information: The 'Staff' table contains the 'nickname', 'first_name', and 'last_name' columns.", "Determine the conditions for the query: We need to filter the results where 'first_name' is 'Janessa' and 'last_name' is 'Sawayn'.", "Construct the SQL SELECT statement: We will select the 'nickname' from the 'Staff' table based on the specified conditions."], "pred_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6639, "db_id": "driving_school", "question": "What is the nickname of the employee named Janessa Sawayn?", "rationale": ["Identify the table that contains employee information, which is the Staff table.", "Determine the columns needed to answer the query, specifically the nickname column.", "Filter the results based on the first name and last name of the employee, which are 'Janessa' and 'Sawayn' respectively.", "Construct the SQL SELECT statement to retrieve the nickname for the specified employee."], "pred_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT nickname FROM Staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "source_tables": ["staff"]}
{"sample_id": 6640, "db_id": "driving_school", "question": "How many staff in total?", "rationale": ["Identify the requirement: Count the total number of staff members.", "Determine the relevant table: The 'Staff' table contains the information about staff members.", "Use the COUNT() function to count the number of entries in the 'Staff' table.", "Construct the SQL query to select the count from the 'Staff' table."], "pred_sql": "SELECT COUNT(*) AS total_staff FROM Staff;", "gold_sql": "SELECT count(*) FROM Staff;", "source_tables": ["staff"]}
{"sample_id": 6641, "db_id": "driving_school", "question": "How many employees are there?", "rationale": ["Identify the table that contains employee information, which is the 'Staff' table.", "To find the number of employees, we need to count the number of records in the 'Staff' table.", "Use the COUNT() function to count the total number of entries in the 'Staff' table.", "Construct the SQL query to select the count from the 'Staff' table."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM Staff;", "gold_sql": "SELECT count(*) FROM Staff;", "source_tables": ["staff"]}
{"sample_id": 6642, "db_id": "driving_school", "question": "Which city does staff with first name as Janessa and last name as Sawayn live?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between the tables: Staff has a foreign key (staff_address_id) that links to Addresses (address_id).", "Specify the columns needed: We need the 'city' from the Addresses table.", "Filter the Staff table for the specific staff member by first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL query using INNER JOIN to combine the two tables based on the address ID, and apply the WHERE clause for filtering."], "pred_sql": "SELECT city FROM Addresses INNER JOIN Staff ON Addresses.address_id = Staff.staff_address_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';", "gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6643, "db_id": "driving_school", "question": "In what city does Janessa Sawayn live?", "rationale": ["Identify the relevant tables: We need to find the city where Janessa Sawayn lives, which involves the Staff and Addresses tables.", "Determine the relationship: The Staff table has a foreign key (staff_address_id) that links to the Addresses table (address_id).", "Select the necessary columns: We need the 'city' from the Addresses table.", "Filter the results: We need to filter the Staff table to find the record for Janessa Sawayn using her first and last name.", "Construct the SQL query: Combine the SELECT statement with the INNER JOIN and WHERE clause to get the desired result."], "pred_sql": "SELECT city FROM Addresses INNER JOIN Staff ON Addresses.address_id = Staff.staff_address_id WHERE first_name = 'Janessa' AND last_name = 'Sawayn';", "gold_sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6644, "db_id": "driving_school", "question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the columns needed: country and state_province_county from Addresses.", "Establish the relationship between Staff and Addresses using the staff_address_id foreign key.", "Filter the Staff table for the specific first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL SELECT statement to retrieve the desired columns from the joined tables."], "pred_sql": "SELECT a.country, a.state_province_county \nFROM Staff s \nJOIN Addresses a ON s.staff_address_id = a.address_id \nWHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';", "gold_sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6645, "db_id": "driving_school", "question": "In which country and state does Janessa Sawayn live?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the columns needed: country and state_province_county from Addresses.", "Establish the relationship between Staff and Addresses using the staff_address_id foreign key.", "Filter the Staff table to find the record for Janessa Sawayn using her first and last name."], "pred_sql": "SELECT a.country, a.state_province_county \nFROM Staff s \nJOIN Addresses a ON s.staff_address_id = a.address_id \nWHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';", "gold_sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6646, "db_id": "driving_school", "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?", "rationale": ["Identify the relevant tables: Lessons and Customers.", "Determine the relationship between the tables: Lessons has a foreign key customer_id that links to Customers.", "We need to sum the lesson_time for a specific customer identified by first name 'Rylan' and last name 'Goodwin'.", "Construct the SQL query to join the Lessons and Customers tables on customer_id, filter by the specified first and last name, and sum the lesson_time."], "pred_sql": "SELECT SUM(Lessons.lesson_time) AS total_lesson_time\nFROM Lessons\nJOIN Customers ON Lessons.customer_id = Customers.customer_id\nWHERE Customers.first_name = 'Rylan' AND Customers.last_name = 'Goodwin';", "gold_sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin';", "source_tables": ["lessons", "customers"]}
{"sample_id": 6647, "db_id": "driving_school", "question": "How long is the total lesson time took by the customer named Rylan Goodwin?", "rationale": ["Identify the relevant tables: Lessons and Customers are needed to find the total lesson time for a specific customer.", "Determine the relationship between the tables: Lessons has a foreign key customer_id that links to Customers.", "Filter the Customers table to find the customer named 'Rylan Goodwin' using their first and last names.", "Use the SUM function to calculate the total lesson time from the Lessons table for the identified customer."], "pred_sql": "SELECT SUM(Lessons.lesson_time) AS total_lesson_time\nFROM Lessons\nJOIN Customers ON Lessons.customer_id = Customers.customer_id\nWHERE Customers.first_name = 'Rylan' AND Customers.last_name = 'Goodwin';", "gold_sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin';", "source_tables": ["lessons", "customers"]}
{"sample_id": 6648, "db_id": "driving_school", "question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between Staff and Addresses: Staff has a foreign key (staff_address_id) that links to Addresses (address_id).", "We need to retrieve the zip code, which is in the Addresses table (zip_postcode).", "Filter the Staff table to find the specific staff member by first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL query to join the Staff and Addresses tables on the staff_address_id and address_id, and select the zip_postcode for the filtered staff member."], "pred_sql": "SELECT a.zip_postcode FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';", "gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6649, "db_id": "driving_school", "question": "What is the zip code of the hosue of the employee named Janessa Sawayn?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between Staff and Addresses: Staff has a foreign key (staff_address_id) that links to Addresses (address_id).", "The query needs to find the zip code, which is in the Addresses table.", "Filter the Staff table to find the employee named Janessa Sawayn by using the first_name and last_name columns.", "Join the Staff table with the Addresses table on the staff_address_id and address_id columns to access the zip_postcode.", "Select the zip_postcode from the joined tables where the employee's name matches."], "pred_sql": "SELECT a.zip_postcode FROM Staff s JOIN Addresses a ON s.staff_address_id = a.address_id WHERE s.first_name = 'Janessa' AND s.last_name = 'Sawayn';", "gold_sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6650, "db_id": "driving_school", "question": "How many staff live in state Georgia?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between Staff and Addresses using the foreign key (staff_address_id).", "We need to count the number of staff members, so we will use the COUNT() function.", "Filter the results to only include staff members who live in the state of Georgia by adding a WHERE clause that checks the state_province_county column in the Addresses table."], "pred_sql": "SELECT COUNT(*) AS staff_count FROM Staff INNER JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'Georgia';", "gold_sql": "SELECT count(*) FROM Addresses WHERE state_province_county = 'Georgia';", "source_tables": ["addresses"]}
{"sample_id": 6651, "db_id": "driving_school", "question": "How many employees live in Georgia?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between Staff and Addresses: Staff has a foreign key (staff_address_id) that links to Addresses (address_id).", "We need to count the number of employees, so we will use the COUNT() function.", "Filter the results to only include employees living in Georgia by adding a WHERE clause that checks the state_province_county column in the Addresses table."], "pred_sql": "SELECT COUNT(*) AS employee_count FROM Staff INNER JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'Georgia';", "gold_sql": "SELECT count(*) FROM Addresses WHERE state_province_county = 'Georgia';", "source_tables": ["addresses"]}
{"sample_id": 6652, "db_id": "driving_school", "question": "Find out the first name and last name of staff lived in city Damianfort.", "rationale": ["Identify the columns needed: first_name and last_name from the Staff table.", "Determine the relationship between Staff and Addresses tables using the staff_address_id foreign key.", "Use a JOIN clause to combine Staff and Addresses tables based on the staff_address_id and address_id.", "Filter the results to only include staff members who live in the city 'Damianfort' using a WHERE clause."], "pred_sql": "SELECT Staff.first_name, Staff.last_name \nFROM Staff \nJOIN Addresses ON Staff.staff_address_id = Addresses.address_id \nWHERE Addresses.city = 'Damianfort';", "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = 'Damianfort';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6653, "db_id": "driving_school", "question": "What is the first and last name of all employees who live in the city Damianfort?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the columns needed: first_name and last_name from Staff.", "Establish the relationship between Staff and Addresses using the staff_address_id and address_id foreign key.", "Filter the results to include only those addresses where the city is 'Damianfort'.", "Construct the SQL SELECT statement to retrieve the first and last names of the employees based on the specified criteria."], "pred_sql": "SELECT first_name, last_name FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id WHERE Addresses.city = 'Damianfort';", "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = 'Damianfort';", "source_tables": ["addresses", "staff"]}
{"sample_id": 6654, "db_id": "driving_school", "question": "Which city lives most of staffs? List the city name and number of staffs.", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between Staff and Addresses using the foreign key (staff_address_id).", "Select the city from the Addresses table and count the number of staff members from the Staff table.", "Group the results by city to get the count of staff in each city.", "Order the results in descending order to find the city with the most staff members."], "pred_sql": "SELECT city, COUNT(*) AS number_of_staffs\nFROM Staff\nJOIN Addresses ON Staff.staff_address_id = Addresses.address_id\nGROUP BY city\nORDER BY number_of_staffs DESC;", "gold_sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["addresses", "staff"]}
{"sample_id": 6655, "db_id": "driving_school", "question": "In which city do the most employees live and how many of them live there?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between Staff and Addresses using the foreign key (staff_address_id).", "Select the city from the Addresses table and count the number of employees (staff) living in each city.", "Group the results by city to aggregate the employee counts.", "Order the results in descending order based on the employee count to find the city with the most employees.", "Limit the results to 1 to get only the city with the highest count."], "pred_sql": "SELECT city, COUNT(*) AS employee_count\nFROM Staff\nJOIN Addresses ON Staff.staff_address_id = Addresses.address_id\nGROUP BY city\nORDER BY employee_count DESC\nLIMIT 1;", "gold_sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["addresses", "staff"]}
{"sample_id": 6656, "db_id": "driving_school", "question": "List the states which have between 2 to 4 staffs living there.", "rationale": ["Identify the relevant tables: Staff and Addresses.", "Determine the relationship between Staff and Addresses using the foreign key (staff_address_id).", "Select the state, which is represented by the column 'state_province_county' in the Addresses table.", "Group the results by 'state_province_county' to aggregate the staff count per state.", "Use the HAVING clause to filter states that have a count of staff between 2 and 4."], "pred_sql": "SELECT state_province_county FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY state_province_county HAVING COUNT(staff_id) BETWEEN 2 AND 4;", "gold_sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["addresses", "staff"]}
{"sample_id": 6657, "db_id": "driving_school", "question": "What are the names of the states that have 2 to 4 employees living there?", "rationale": ["Identify the relevant tables: Staff and Addresses.", "We need to find the states where employees live, so we will join the Staff table with the Addresses table using the staff_address_id and address_id.", "We will group the results by state_province_county to count the number of employees in each state.", "We will use the HAVING clause to filter the groups to only include those with a count of employees between 2 and 4."], "pred_sql": "SELECT state_province_county FROM Staff JOIN Addresses ON Staff.staff_address_id = Addresses.address_id GROUP BY state_province_county HAVING COUNT(staff_id) BETWEEN 2 AND 4;", "gold_sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "source_tables": ["addresses", "staff"]}
{"sample_id": 6658, "db_id": "driving_school", "question": "List the first name and last name of all customers.", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "Determine the specific columns needed for the output, which are 'first_name' and 'last_name'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'Customers' table."], "pred_sql": "SELECT first_name, last_name FROM Customers;", "gold_sql": "SELECT first_name ,  last_name FROM Customers;", "source_tables": ["customers"]}
{"sample_id": 6659, "db_id": "driving_school", "question": "What are the first and last names for all customers?", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "Determine the specific columns needed for the query, which are 'first_name' and 'last_name'.", "Construct the SQL SELECT statement to retrieve the first and last names from the Customers table."], "pred_sql": "SELECT first_name, last_name FROM Customers;", "gold_sql": "SELECT first_name ,  last_name FROM Customers;", "source_tables": ["customers"]}
{"sample_id": 6660, "db_id": "driving_school", "question": "List email address and birthday of customer whose first name as Carole.", "rationale": ["Identify the table that contains the required information: Customers table has the email address and date of birth.", "Determine the columns needed: email_address and date_of_birth.", "Specify the condition to filter the records: first_name should be 'Carole'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Customers table with the given condition."], "pred_sql": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = 'Carole';", "gold_sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = 'Carole'", "source_tables": ["customers"]}
{"sample_id": 6661, "db_id": "driving_school", "question": "What are the email addresses and date of births for all customers who have a first name of Carole?", "rationale": ["Identify the table that contains the required information: Customers.", "Determine the specific columns needed: email_address and date_of_birth.", "Apply a filter to select only those customers with a first name of 'Carole'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Customers table with the appropriate WHERE clause."], "pred_sql": "SELECT email_address, date_of_birth FROM Customers WHERE first_name = 'Carole';", "gold_sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = 'Carole'", "source_tables": ["customers"]}
{"sample_id": 6662, "db_id": "driving_school", "question": "List phone number and email address of customer with more than 2000 outstanding balance.", "rationale": ["Identify the table that contains the required information: Customers table has phone_number and email_address.", "Determine the condition for filtering customers: We need customers with an outstanding balance greater than 2000.", "Construct the SQL SELECT statement to retrieve phone_number and email_address from the Customers table where the amount_outstanding is greater than 2000."], "pred_sql": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > '2000'", "gold_sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "source_tables": ["customers"]}
{"sample_id": 6663, "db_id": "driving_school", "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?", "rationale": ["Identify the relevant table: Customers, as it contains the phone numbers, email addresses, and outstanding balances.", "Select the columns needed: phone_number and email_address.", "Apply the condition to filter customers with an outstanding balance greater than 2000 using the WHERE clause."], "pred_sql": "SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > '2000'", "gold_sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "source_tables": ["customers"]}
{"sample_id": 6664, "db_id": "driving_school", "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?", "rationale": ["Identify the relevant table: Customers, as it contains the required fields: customer_status_code, cell_mobile_phone_number, and email_address.", "Determine the conditions for filtering the records: last name should be 'Kohler' or first name should be 'Marina'.", "Construct the SELECT statement to retrieve the specified fields from the Customers table based on the conditions identified."], "pred_sql": "SELECT customer_status_code, cell_mobile_phone_number, email_address FROM Customers WHERE last_name = 'Kohler' OR first_name = 'Marina';", "gold_sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = 'Marina' OR last_name  =  'Kohler'", "source_tables": ["customers"]}
{"sample_id": 6665, "db_id": "driving_school", "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?", "rationale": ["Identify the relevant table: Customers, as it contains the required fields: customer_status_code, phone_number, and email_address.", "Determine the conditions for filtering: last name is 'Kohler' or first name is 'Marina'.", "Construct the SELECT statement to retrieve the specified fields from the Customers table based on the conditions identified."], "pred_sql": "SELECT customer_status_code, phone_number, email_address FROM Customers WHERE last_name = 'Kohler' OR first_name = 'Marina';", "gold_sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = 'Marina' OR last_name  =  'Kohler'", "source_tables": ["customers"]}
{"sample_id": 6666, "db_id": "driving_school", "question": "When are the birthdays of customer who are classified as 'Good Customer' status?", "rationale": ["Identify the relevant table: Customers, as it contains customer information including their status and date of birth.", "Determine the columns needed: We need the 'date_of_birth' column for the customers classified as 'Good Customer'.", "Apply the condition to filter customers: Use a WHERE clause to filter customers based on the 'customer_status_code' being 'Good Customer'.", "Construct the SQL SELECT statement to retrieve the required data."], "pred_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer';", "gold_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "source_tables": ["customers"]}
{"sample_id": 6667, "db_id": "driving_school", "question": "What is the date of birth of every customer whose status code is 'Good Customer'?", "rationale": ["Identify the table that contains customer information, which is the Customers table.", "Determine the specific column needed for the output, which is the date_of_birth column.", "Identify the condition that needs to be met, which is that the customer_status_code must be 'Good Customer'.", "Construct the SQL query to select the date_of_birth from the Customers table where the customer_status_code matches the specified condition."], "pred_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer';", "gold_sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "source_tables": ["customers"]}
{"sample_id": 6668, "db_id": "driving_school", "question": "When did customer with first name as Carole and last name as Bernhard became a customer?", "rationale": ["Identify the relevant table: Customers, as it contains information about customers including their names and the date they became customers.", "Determine the columns needed: We need the 'date_became_customer' column to find out when the customer became a customer.", "Filter the results based on the customer's first name and last name: We will use a WHERE clause to specify that the first name must be 'Carole' and the last name must be 'Bernhard'.", "Construct the SQL SELECT statement to retrieve the desired information."], "pred_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard';", "gold_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard';", "source_tables": ["customers"]}
{"sample_id": 6669, "db_id": "driving_school", "question": "When did Carole Bernhard first become a customer?", "rationale": ["Identify the relevant table: Customers, as it contains information about customers including their names and the date they became customers.", "Determine the columns needed: We need the 'date_became_customer' column to find out when Carole Bernhard first became a customer.", "Filter the records: We need to filter the records by the first name 'Carole' and last name 'Bernhard' to find the specific customer.", "Use a SELECT statement to retrieve the date_became_customer for the specified customer.", "Limit the results to 1 to ensure we only get the first occurrence, in case there are duplicates."], "pred_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard' LIMIT 1;", "gold_sql": "SELECT date_became_customer FROM Customers WHERE first_name = 'Carole' AND last_name = 'Bernhard';", "source_tables": ["customers"]}
{"sample_id": 6670, "db_id": "driving_school", "question": "How many customers in total?", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "To find the total number of customers, we need to count the entries in the 'Customers' table.", "Use the COUNT() function to count all rows in the 'Customers' table.", "Select the count with an alias 'total_customers' for clarity."], "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers;", "gold_sql": "SELECT count(*) FROM Customers;", "source_tables": ["customers"]}
{"sample_id": 6671, "db_id": "driving_school", "question": "How many customers are there?", "rationale": ["Identify the table that contains customer information, which is the 'Customers' table.", "To find out how many customers there are, we need to count the number of entries in the 'Customers' table.", "Use the COUNT() function to count all rows in the 'Customers' table.", "Construct the SQL query to select the count of customers from the 'Customers' table."], "pred_sql": "SELECT COUNT(*) AS total_customers FROM Customers;", "gold_sql": "SELECT count(*) FROM Customers;", "source_tables": ["customers"]}
{"sample_id": 6672, "db_id": "driving_school", "question": "List all customer status codes and the number of customers having each status code.", "rationale": ["Identify the relevant table: The Customers table contains the customer status codes and customer identifiers.", "Determine the required fields: We need to select the customer_status_code and count the number of customers for each status code.", "Use the COUNT() function to count the number of customers for each status code.", "Group the results by customer_status_code to aggregate the counts for each unique status code."], "pred_sql": "SELECT customer_status_code, COUNT(customer_id) AS number_of_customers FROM Customers GROUP BY customer_status_code;", "gold_sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "source_tables": ["customers"]}
{"sample_id": 6673, "db_id": "driving_school", "question": "For each customer status code, how many customers are classified that way?", "rationale": ["Identify the relevant table: The Customers table contains the customer status code and customer identifiers.", "Determine the required information: We need to count the number of customers for each status code.", "Use the COUNT() function to count customers: This function will count the number of customer_id entries for each status code.", "Group the results by customer status code: This will allow us to get the count for each unique status code.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and GROUP BY clause."], "pred_sql": "SELECT customer_status_code, COUNT(customer_id) AS customer_count\nFROM Customers\nGROUP BY customer_status_code;", "gold_sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "source_tables": ["customers"]}
{"sample_id": 6674, "db_id": "driving_school", "question": "Which customer status code has least number of customers?", "rationale": ["Identify the relevant table: The query pertains to customer status, so we will use the Customers table.", "Determine the required information: We need to find the customer status code that has the least number of customers.", "Group the results: We will group the results by customer_status_code to count the number of customers for each status.", "Count the customers: Use COUNT(customer_id) to count the number of customers for each status code.", "Order the results: We will order the results in ascending order based on the count of customers to get the status with the least number.", "Limit the results: Finally, we will limit the results to 1 to get only the status code with the least number of customers."], "pred_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1;", "gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["customers"]}
{"sample_id": 6675, "db_id": "driving_school", "question": "What is the status code with the least number of customers?", "rationale": ["Identify the relevant table: The query requires information from the Customers table, specifically the customer_status_code and customer_id.", "Group the results: To find the status code with the least number of customers, we need to group the results by customer_status_code.", "Count the customers: For each status code, we will count the number of customers associated with that status code using COUNT(customer_id).", "Order the results: We will order the results in ascending order based on the count of customers to get the status code with the least number of customers at the top.", "Limit the results: Finally, we will limit the results to 1 to get only the status code with the least number of customers."], "pred_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1;", "gold_sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "source_tables": ["customers"]}
{"sample_id": 6676, "db_id": "driving_school", "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?", "rationale": ["Identify the relevant tables: Lessons and Customers.", "Determine the relationship between the tables: Lessons has a foreign key referencing Customers.", "Filter the Customers table for the specific first name 'Rylan' and last name 'Goodwin'.", "Add a condition to count only the lessons that have a status indicating they were completed.", "Use COUNT(*) to get the total number of completed lessons for the specified customer."], "pred_sql": "SELECT COUNT(*) AS completed_lessons_count \nFROM Lessons \nJOIN Customers ON Lessons.customer_id = Customers.customer_id \nWHERE Customers.first_name = 'Rylan' \nAND Customers.last_name = 'Goodwin' \nAND Lessons.lesson_status_code = 'completed';", "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed';", "source_tables": ["lessons", "customers"]}
{"sample_id": 6677, "db_id": "driving_school", "question": "How many lessons did the customer Ryan Goodwin complete?", "rationale": ["Identify the relevant tables: Lessons and Customers.", "Determine the relationship between the tables: Lessons has a foreign key customer_id that links to Customers.", "Filter the Customers table to find the specific customer by first name 'Ryan' and last name 'Goodwin'.", "Count the number of lessons associated with that customer using COUNT(*) function.", "Construct the SQL query to join the Lessons and Customers tables, apply the filter, and count the lessons."], "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Ryan' AND Customers.last_name = 'Goodwin';", "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Rylan' AND T2.last_name = 'Goodwin' AND T1.lesson_status_code = 'Completed';", "source_tables": ["lessons", "customers"]}
{"sample_id": 6678, "db_id": "driving_school", "question": "What is maximum, minimum and average amount of outstanding of customer?", "rationale": ["Identify the relevant table: The 'Customers' table contains the 'amount_outstanding' column which holds the data we need.", "Determine the required calculations: We need to find the maximum, minimum, and average of the 'amount_outstanding' column.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum, minimum, and average values from the 'amount_outstanding' column in the 'Customers' table."], "pred_sql": "SELECT MAX(amount_outstanding) AS max_outstanding, MIN(amount_outstanding) AS min_outstanding, AVG(amount_outstanding) AS avg_outstanding FROM Customers;", "gold_sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "source_tables": ["customers"]}
{"sample_id": 6679, "db_id": "driving_school", "question": "What is the maximum, minimum, and average amount of money outsanding for all customers?", "rationale": ["Identify the relevant table: The 'Customers' table contains the 'amount_outstanding' column which holds the data we need.", "Determine the required calculations: We need to find the maximum, minimum, and average of the 'amount_outstanding' values.", "Construct the SQL query: Use the SELECT statement to retrieve the maximum, minimum, and average values from the 'amount_outstanding' column in the 'Customers' table."], "pred_sql": "SELECT MAX(amount_outstanding) AS max_outstanding, MIN(amount_outstanding) AS min_outstanding, AVG(amount_outstanding) AS avg_outstanding FROM Customers;", "gold_sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "source_tables": ["customers"]}
{"sample_id": 6680, "db_id": "driving_school", "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.", "rationale": ["Identify the table that contains customer information, which is the Customers table.", "Determine the columns needed for the output, which are first_name and last_name.", "Identify the condition for filtering customers based on the amount outstanding, which is between 1000 and 3000.", "Construct the SQL SELECT statement to retrieve the specified columns from the Customers table with the appropriate WHERE clause."], "pred_sql": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN '1000' AND '3000';", "gold_sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "source_tables": ["customers"]}
{"sample_id": 6681, "db_id": "driving_school", "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?", "rationale": ["Identify the table that contains customer information, which is the Customers table.", "Determine the columns needed for the output, which are first_name and last_name.", "Identify the condition for filtering customers based on the amount outstanding, which is between 1000 and 3000 dollars.", "Construct the SQL SELECT statement to retrieve the first and last names of customers who meet the specified condition."], "pred_sql": "SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN '1000' AND '3000';", "gold_sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "source_tables": ["customers"]}
{"sample_id": 6682, "db_id": "driving_school", "question": "List first name and last name of customers lived in city Lockmanfurt.", "rationale": ["Identify the relevant tables: Customers and Addresses.", "Determine the columns needed: first_name and last_name from Customers.", "Establish the relationship between Customers and Addresses using the foreign key customer_address_id.", "Filter the results to include only those customers who live in the city 'Lockmanfurt'.", "Construct the SQL query using a JOIN to combine the Customers and Addresses tables based on the address_id."], "pred_sql": "SELECT Customers.first_name, Customers.last_name \nFROM Customers \nJOIN Addresses ON Customers.customer_address_id = Addresses.address_id \nWHERE Addresses.city = 'Lockmanfurt';", "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = 'Lockmanfurt';", "source_tables": ["addresses", "customers"]}
{"sample_id": 6683, "db_id": "driving_school", "question": "What are the first and last names of all customers who lived in Lockmanfurt?", "rationale": ["Identify the relevant tables: Customers and Addresses.", "Determine the columns needed: first_name and last_name from Customers.", "Establish the relationship between Customers and Addresses using the foreign key customer_address_id.", "Filter the results to include only those customers whose address city is 'Lockmanfurt'.", "Construct the SQL SELECT statement to retrieve the desired columns with the appropriate JOIN and WHERE clause."], "pred_sql": "SELECT first_name, last_name FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Addresses.city = 'Lockmanfurt';", "gold_sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = 'Lockmanfurt';", "source_tables": ["addresses", "customers"]}
{"sample_id": 6684, "db_id": "driving_school", "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?", "rationale": ["Identify the relevant tables: Customers and Addresses.", "Determine the relationship between Customers and Addresses using the foreign key customer_address_id.", "Select the country from the Addresses table.", "Filter the Customers table to find the customer with first name 'Carole' and last name 'Bernhard'.", "Construct the SQL query to join the two tables and apply the necessary filters."], "pred_sql": "SELECT Addresses.country FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';", "gold_sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"]}
{"sample_id": 6685, "db_id": "driving_school", "question": "What is the country in which the customer Carole Bernhard lived?", "rationale": ["Identify the relevant tables: Customers and Addresses.", "Determine the relationship between Customers and Addresses using the foreign key customer_address_id.", "Select the country column from the Addresses table.", "Filter the Customers table to find the specific customer by first name 'Carole' and last name 'Bernhard'.", "Construct the SQL query using JOIN to combine the two tables based on the address ID."], "pred_sql": "SELECT Addresses.country FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';", "gold_sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"]}
{"sample_id": 6686, "db_id": "driving_school", "question": "What is zip code of customer with first name as Carole and last name as Bernhard?", "rationale": ["Identify the relevant tables: Customers and Addresses.", "Determine the columns needed: zip_postcode from Addresses and first_name, last_name from Customers.", "Establish the relationship between Customers and Addresses using the foreign key customer_address_id.", "Formulate the SQL query to select the zip_postcode where the first name is 'Carole' and the last name is 'Bernhard'."], "pred_sql": "SELECT Addresses.zip_postcode FROM Customers JOIN Addresses ON Customers.customer_address_id = Addresses.address_id WHERE Customers.first_name = 'Carole' AND Customers.last_name = 'Bernhard';", "gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"]}
{"sample_id": 6687, "db_id": "driving_school", "question": "What is the zip code of the customer Carole Bernhard?", "rationale": ["Identify the relevant tables: Customers and Addresses.", "Determine the relationship between Customers and Addresses using the foreign key customer_address_id.", "Select the zip_postcode from the Addresses table.", "Filter the Customers table to find the specific customer by first name 'Carole' and last name 'Bernhard'."], "pred_sql": "SELECT a.zip_postcode FROM Customers c JOIN Addresses a ON c.customer_address_id = a.address_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';", "gold_sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard'", "source_tables": ["addresses", "customers"]}
{"sample_id": 6688, "db_id": "driving_school", "question": "Which city does has most number of customers?", "rationale": ["Identify the relevant tables: Customers and Addresses, since we need customer information and their corresponding addresses.", "We need to count the number of customers per city, so we will use the COUNT() function on the customer_id from the Customers table.", "To get the city for each customer, we will join the Customers table with the Addresses table on the address_id.", "We will group the results by city to aggregate the customer counts for each city.", "Finally, we will order the results in descending order based on the customer count and limit the results to 1 to get the city with the most customers."], "pred_sql": "SELECT city, COUNT(customer_id) AS customer_count\nFROM Addresses\nJOIN Customers ON Addresses.address_id = Customers.customer_address_id\nGROUP BY city\nORDER BY customer_count DESC\nLIMIT 1;", "gold_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["addresses", "customers"]}
{"sample_id": 6689, "db_id": "driving_school", "question": "What is the city with the most customers?", "rationale": ["Identify the relevant tables: Customers and Addresses.", "We need to count the number of customers in each city, so we will join the Customers table with the Addresses table on the address_id.", "Select the city and count the number of customers (customer_id) for each city.", "Group the results by city to aggregate the customer counts.", "Order the results by the customer count in descending order to find the city with the most customers.", "Limit the results to 1 to get only the city with the highest count."], "pred_sql": "SELECT city, COUNT(customer_id) AS customer_count FROM Addresses JOIN Customers ON Addresses.address_id = Customers.customer_address_id GROUP BY city ORDER BY customer_count DESC LIMIT 1;", "gold_sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "source_tables": ["addresses", "customers"]}
{"sample_id": 6690, "db_id": "driving_school", "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?", "rationale": ["Identify the relevant tables: Customers and Customer_Payments.", "Determine the relationship between Customers and Customer_Payments: Customers.customer_id is linked to Customer_Payments.customer_id.", "We need to filter the customers by first name 'Carole' and last name 'Bernhard'.", "We need to calculate the total amount paid by this customer, which requires summing the amount_payment from the Customer_Payments table.", "Construct the SQL query using a JOIN to connect Customers and Customer_Payments, applying the necessary filters and aggregation."], "pred_sql": "SELECT SUM(cp.amount_payment) AS total_paid\nFROM Customers c\nJOIN Customer_Payments cp ON c.customer_id = cp.customer_id\nWHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';", "gold_sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' AND T2.last_name = 'Bernhard'", "source_tables": ["customers", "customer_payments"]}
{"sample_id": 6691, "db_id": "driving_school", "question": "What is the total amount of moeny paid by the customer Carole Bernhard?", "rationale": ["Identify the relevant tables: Customers and Customer_Payments.", "Determine the relationship between Customers and Customer_Payments using the customer_id.", "Select the total amount paid by the customer, which requires summing the amount_payment from Customer_Payments.", "Filter the results to only include the customer with the first name 'Carole' and last name 'Bernhard'.", "Construct the SQL query to perform the above operations."], "pred_sql": "SELECT SUM(cp.amount_payment) AS total_amount_paid \nFROM Customers c \nJOIN Customer_Payments cp ON c.customer_id = cp.customer_id \nWHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';", "gold_sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Carole' AND T2.last_name = 'Bernhard'", "source_tables": ["customers", "customer_payments"]}
{"sample_id": 6692, "db_id": "driving_school", "question": "List the number of customers that did not have any payment history.", "rationale": ["Identify the Customers table to get the list of customers.", "We need to count customers who have no payment history.", "To find customers without payment history, we can use a subquery to select customer_ids from the Customer_Payments table.", "The main query will count all customers whose customer_id is not in the list of customer_ids from the subquery."], "pred_sql": "SELECT COUNT(*) AS number_of_customers_without_payments\nFROM Customers\nWHERE customer_id NOT IN (\n    SELECT customer_id\n    FROM Customer_Payments\n);", "gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "source_tables": ["customers", "customer_payments"]}
{"sample_id": 6693, "db_id": "driving_school", "question": "How many customers have no payment histories?", "rationale": ["Identify the Customers table as it contains customer information.", "Determine that we need to count customers who have no payment histories.", "To find customers with no payment histories, we can use a subquery to select customer_ids from the Customer_Payments table.", "The main query will count all customers whose customer_id is not in the list of customer_ids from the Customer_Payments subquery."], "pred_sql": "SELECT COUNT(*) AS customer_count FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payments);", "gold_sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "source_tables": ["customers", "customer_payments"]}
{"sample_id": 6694, "db_id": "driving_school", "question": "List first name and last name of customers that have more than 2 payments.", "rationale": ["Identify the relevant tables: Customers and Customer_Payments.", "We need to list the first name and last name of customers, so we will select 'first_name' and 'last_name' from the Customers table.", "To find customers with more than 2 payments, we will join the Customers table with the Customer_Payments table on the customer_id.", "We will group the results by customer_id to aggregate the payment counts for each customer.", "Using the HAVING clause, we will filter the groups to include only those with a count of payments greater than 2."], "pred_sql": "SELECT C.first_name, C.last_name \nFROM Customers C \nJOIN Customer_Payments CP ON C.customer_id = CP.customer_id \nGROUP BY C.customer_id \nHAVING COUNT(CP.datetime_payment) > 2;", "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "source_tables": ["customers", "customer_payments"]}
{"sample_id": 6695, "db_id": "driving_school", "question": "What are the first and last names of all customers with more than 2 payments?", "rationale": ["Identify the relevant tables: Customers and Customer_Payments.", "We need to retrieve the first and last names of customers, so we will select 'first_name' and 'last_name' from the Customers table.", "To find customers with more than 2 payments, we need to join the Customers table with the Customer_Payments table on the customer_id.", "We will group the results by customer_id to aggregate the payment counts for each customer.", "Using the HAVING clause, we will filter the groups to include only those customers who have more than 2 payments."], "pred_sql": "SELECT DISTINCT c.first_name, c.last_name \nFROM Customers c \nJOIN Customer_Payments cp ON c.customer_id = cp.customer_id \nGROUP BY c.customer_id \nHAVING COUNT(cp.datetime_payment) > 2;", "gold_sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "source_tables": ["customers", "customer_payments"]}
{"sample_id": 6696, "db_id": "driving_school", "question": "List all payment methods and number of payments using each payment methods.", "rationale": ["Identify the relevant table: Customer_Payments contains the payment method information.", "Select the payment_method_code to list the different payment methods.", "Count the number of payments for each payment method using COUNT(*) function.", "Group the results by payment_method_code to aggregate the counts for each method."], "pred_sql": "SELECT payment_method_code, COUNT(*) AS number_of_payments FROM Customer_Payments GROUP BY payment_method_code;", "gold_sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}
{"sample_id": 6697, "db_id": "driving_school", "question": "For each payment method, how many payments were made?", "rationale": ["Identify the relevant table: Customer_Payments contains the payment information.", "Determine the columns needed: payment_method_code to group by and a count of payments.", "Use the COUNT() function to count the number of payments for each payment method.", "Group the results by payment_method_code to get the count for each method."], "pred_sql": "SELECT payment_method_code, COUNT(*) AS payment_count FROM Customer_Payments GROUP BY payment_method_code;", "gold_sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "source_tables": ["customer_payments"]}
{"sample_id": 6698, "db_id": "driving_school", "question": "How many lessons were in cancelled state?", "rationale": ["Identify the table that contains the lesson information, which is the 'Lessons' table.", "Determine the column that indicates the status of the lesson, which is 'lesson_status_code'.", "Specify the status we are interested in, which is 'cancelled'.", "Use the COUNT() function to count the number of lessons that have the status 'cancelled'.", "Construct the SQL query to select the count of cancelled lessons from the Lessons table."], "pred_sql": "SELECT COUNT(*) AS cancelled_lessons_count FROM Lessons WHERE lesson_status_code = 'cancelled';", "gold_sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = 'Cancelled';", "source_tables": ["lessons"]}
{"sample_id": 6699, "db_id": "driving_school", "question": "How many lessons have been cancelled?", "rationale": ["Identify the relevant table: The query is about lessons, so we will use the Lessons table.", "Determine the condition: We need to count lessons that have been cancelled, which implies looking for a specific status code in the lesson_status_code column.", "Construct the SQL query: We will use the COUNT() function to count the number of records that meet the condition of being cancelled."], "pred_sql": "SELECT COUNT(*) AS cancelled_lessons_count FROM Lessons WHERE lesson_status_code = 'cancelled';", "gold_sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = 'Cancelled';", "source_tables": ["lessons"]}
{"sample_id": 6700, "db_id": "driving_school", "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.", "rationale": ["Identify the relevant tables: Lessons and Staff.", "Determine the columns needed: lesson_id from Lessons and staff_id from Staff.", "Establish the relationship between the tables: Lessons.staff_id = Staff.staff_id.", "Filter the results based on the staff member's first name (Janessa), last name (Sawayn), and nickname containing the letter 's'.", "Construct the SQL query using SELECT to retrieve lesson_id, JOIN to combine Lessons and Staff, and WHERE to apply the filters."], "pred_sql": "SELECT lesson_id FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn' AND Staff.nickname LIKE '%s%';", "gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%';", "source_tables": ["lessons", "staff"]}
{"sample_id": 6701, "db_id": "driving_school", "question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?", "rationale": ["Identify the relevant tables: Lessons and Staff.", "We need to find lesson IDs from the Lessons table.", "We need to join the Lessons table with the Staff table on the staff_id column.", "Filter the results to only include staff members with the first name 'Janessa' and last name 'Sawayn'.", "Additionally, filter the staff members whose nickname contains the letter 's'.", "Select the lesson_id from the filtered results."], "pred_sql": "SELECT Lessons.lesson_id \nFROM Lessons \nJOIN Staff ON Lessons.staff_id = Staff.staff_id \nWHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn' AND Staff.nickname LIKE '%s%';", "gold_sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn' AND nickname LIKE '%s%';", "source_tables": ["lessons", "staff"]}
{"sample_id": 6702, "db_id": "driving_school", "question": "How many lessons taught by staff whose first name has letter 'a' in it?", "rationale": ["Identify the relevant tables: Lessons and Staff.", "We need to count the number of lessons, so we will use the COUNT() function.", "To find lessons taught by staff with 'a' in their first name, we will join the Lessons table with the Staff table on the staff_id.", "The condition for filtering staff is that their first name contains the letter 'a', which can be checked using the LIKE operator with wildcards.", "Construct the SQL query to select the count of lessons based on the above conditions."], "pred_sql": "SELECT COUNT(*) AS lesson_count \nFROM Lessons \nJOIN Staff ON Lessons.staff_id = Staff.staff_id \nWHERE Staff.first_name LIKE '%a%';", "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "source_tables": ["lessons", "staff"]}
{"sample_id": 6703, "db_id": "driving_school", "question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?", "rationale": ["Identify the relevant tables: Lessons and Staff.", "We need to count the number of lessons, so we will use the COUNT() function.", "To find lessons taught by staff members with 'a' in their first name, we will join the Lessons table with the Staff table on the staff_id.", "The condition for filtering staff members is that their first name contains the letter 'a', which can be checked using the LIKE operator with wildcards.", "Finally, we will select the count of lessons that meet these criteria."], "pred_sql": "SELECT COUNT(*) AS lesson_count \nFROM Lessons \nJOIN Staff ON Lessons.staff_id = Staff.staff_id \nWHERE Staff.first_name LIKE '%a%';", "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE '%a%'", "source_tables": ["lessons", "staff"]}
{"sample_id": 6704, "db_id": "driving_school", "question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?", "rationale": ["Identify the relevant tables: Lessons and Staff.", "Determine the relationship between the tables: Lessons has a foreign key staff_id that links to Staff.", "We need to sum the lesson time, so we will use the SUM() function on the lesson_time column from the Lessons table.", "Filter the results to only include lessons taught by staff with the first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL query using the SELECT statement to retrieve the total lesson time, joining the Lessons and Staff tables on the staff_id."], "pred_sql": "SELECT SUM(Lessons.lesson_time) AS total_lesson_time\nFROM Lessons\nJOIN Staff ON Lessons.staff_id = Staff.staff_id\nWHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';", "gold_sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}
{"sample_id": 6705, "db_id": "driving_school", "question": "What is the total time for all lessons taught by Janessa Sawayn?", "rationale": ["Identify the relevant tables: Lessons and Staff.", "Determine the relationship between the tables: Lessons has a foreign key staff_id that links to Staff.", "Filter the Staff table to find the staff member named Janessa Sawayn.", "Use the JOIN clause to combine Lessons and Staff based on the staff_id.", "Calculate the total time for all lessons taught by Janessa Sawayn using the SUM function on the lesson_time column."], "pred_sql": "SELECT SUM(Lesson_Time) AS total_time FROM Lessons JOIN Staff ON Lessons.staff_id = Staff.staff_id WHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';", "gold_sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}
{"sample_id": 6706, "db_id": "driving_school", "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?", "rationale": ["Identify the relevant tables: Lessons and Staff.", "Determine the relationship between the tables: Lessons has a foreign key staff_id that links to Staff.", "We need to calculate the average lesson price, so we will use the AVG() function on the price column from the Lessons table.", "We need to filter the results to only include lessons taught by staff with the first name 'Janessa' and last name 'Sawayn'.", "Construct the SQL query using SELECT to get the average price, JOIN to connect Lessons and Staff, and WHERE to filter by staff names."], "pred_sql": "SELECT AVG(price) AS average_lesson_price \nFROM Lessons \nJOIN Staff ON Lessons.staff_id = Staff.staff_id \nWHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';", "gold_sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}
{"sample_id": 6707, "db_id": "driving_school", "question": "What is the average price for a lesson taught by Janessa Sawayn?", "rationale": ["Identify the relevant tables: Lessons and Staff.", "Determine the relationship between the tables: Lessons has a foreign key staff_id that links to Staff.", "We need to calculate the average price of lessons, so we will use the AVG() function on the price column from the Lessons table.", "We need to filter the results to only include lessons taught by Janessa Sawayn, so we will add a WHERE clause that checks for the first and last name in the Staff table.", "Join the Lessons table with the Staff table on the staff_id to access the staff member's name while calculating the average price."], "pred_sql": "SELECT AVG(price) AS average_price\nFROM Lessons\nJOIN Staff ON Lessons.staff_id = Staff.staff_id\nWHERE Staff.first_name = 'Janessa' AND Staff.last_name = 'Sawayn';", "gold_sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn';", "source_tables": ["lessons", "staff"]}
{"sample_id": 6708, "db_id": "driving_school", "question": "How many lesson does customer with first name Ray took?", "rationale": ["Identify the relevant tables: Lessons and Customers.", "Determine the relationship between the tables: Lessons has a foreign key customer_id that links to Customers.", "We need to count the number of lessons taken by a customer with the first name 'Ray'.", "Use a JOIN to combine Lessons and Customers on the customer_id field.", "Filter the results to only include customers with the first name 'Ray'.", "Use the COUNT() function to count the number of lessons for the specified customer."], "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Ray';", "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Ray'", "source_tables": ["lessons", "customers"]}
{"sample_id": 6709, "db_id": "driving_school", "question": "How many lessons did the customer with the first name Ray take?", "rationale": ["Identify the relevant tables: Lessons and Customers.", "Determine the relationship between the tables: Lessons has a foreign key customer_id that links to Customers.", "We need to count the number of lessons taken by a specific customer, so we will use the COUNT() function.", "Filter the results to only include lessons taken by the customer with the first name 'Ray'.", "Construct the SQL query using a JOIN to connect the Lessons and Customers tables, and apply the COUNT() function with the appropriate WHERE clause."], "pred_sql": "SELECT COUNT(*) AS lesson_count FROM Lessons JOIN Customers ON Lessons.customer_id = Customers.customer_id WHERE Customers.first_name = 'Ray';", "gold_sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = 'Ray'", "source_tables": ["lessons", "customers"]}
{"sample_id": 6710, "db_id": "driving_school", "question": "Which last names are both used by customers and by staff?", "rationale": ["Identify the relevant tables: Staff and Customers, as we need to compare last names from both.", "Select the last_name column from the Staff table.", "Use a JOIN operation to combine the Staff and Customers tables based on the last_name column, ensuring we only get last names that appear in both tables.", "Use DISTINCT to ensure that we only get unique last names that are shared between customers and staff."], "pred_sql": "SELECT DISTINCT Staff.last_name \nFROM Staff \nJOIN Customers ON Staff.last_name = Customers.last_name;", "gold_sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "source_tables": ["staff", "customers"]}
{"sample_id": 6711, "db_id": "driving_school", "question": "What are the last names that are used by customers and staff?", "rationale": ["Identify the tables that contain last names: Customers and Staff.", "Select the 'last_name' column from the Customers table.", "Select the 'last_name' column from the Staff table.", "Use the UNION operator to combine the results from both tables, ensuring that duplicate last names are removed."], "pred_sql": "SELECT last_name FROM Customers UNION SELECT last_name FROM Staff;", "gold_sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "source_tables": ["staff", "customers"]}
{"sample_id": 6712, "db_id": "driving_school", "question": "What is the first name of the staff who did not give any lesson?", "rationale": ["Identify the relevant table: Staff, which contains the first names of staff members.", "Determine the condition: We need to find staff members who did not give any lessons.", "Lessons table contains the staff_id of staff members who conducted lessons.", "Use a subquery to select distinct staff_ids from the Lessons table.", "Use the NOT IN clause to filter out staff_ids that are present in the Lessons table from the Staff table.", "Select the first_name of the remaining staff members who did not give any lessons."], "pred_sql": "SELECT first_name FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Lessons)", "gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "source_tables": ["lessons", "staff"]}
{"sample_id": 6713, "db_id": "driving_school", "question": "What is the first name of all employees who do not give any lessons?", "rationale": ["Identify the table that contains employee information, which is the Staff table.", "We need to retrieve the first names of employees, so we will select the 'first_name' column from the Staff table.", "To find employees who do not give any lessons, we need to identify staff members who are not present in the Lessons table.", "We can achieve this by using a subquery that selects distinct staff_ids from the Lessons table.", "The main query will then filter the Staff table to include only those staff_ids that are not in the list returned by the subquery."], "pred_sql": "SELECT first_name FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Lessons);", "gold_sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "source_tables": ["lessons", "staff"]}
{"sample_id": 6714, "db_id": "driving_school", "question": "What is the id and detail of the vehicle used in lessons for most of the times?", "rationale": ["Identify the relevant table: The query requires information about vehicles used in lessons, so we will focus on the Lessons and Vehicles tables.", "Determine the required fields: We need the vehicle_id and vehicle_details from the Vehicles table.", "Count the number of times each vehicle is used in lessons: We will group the results by vehicle_id and count the occurrences using COUNT(*) to find out which vehicle is used the most.", "Sort the results: We will order the results in descending order based on the count of lessons to get the vehicle used the most at the top.", "Limit the results: Since we only need the vehicle used the most, we will limit the results to 1."], "pred_sql": "SELECT vehicle_id, vehicle_details FROM Lessons GROUP BY vehicle_id ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["lessons", "vehicles"]}
{"sample_id": 6715, "db_id": "activity_1", "question": "How many faculty do we have?", "rationale": ["Identify the table that contains faculty information, which is the 'Faculty' table.", "To find out how many faculty members there are, we need to count the number of entries in the 'Faculty' table.", "Use the COUNT() function to count the total number of rows in the 'Faculty' table.", "Construct the SQL query to select the count from the 'Faculty' table."], "pred_sql": "SELECT COUNT(*) AS faculty_count FROM Faculty;", "gold_sql": "SELECT count(*) FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6716, "db_id": "activity_1", "question": "What is the total number of faculty members?", "rationale": ["Identify the requirement: We need to find the total number of faculty members.", "Determine the relevant table: The 'Faculty' table contains the information about faculty members.", "Use the COUNT() function to count the number of entries in the 'Faculty' table.", "Construct the SQL query to select the count from the 'Faculty' table."], "pred_sql": "SELECT COUNT(*) AS total_faculty_members FROM Faculty;", "gold_sql": "SELECT count(*) FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6717, "db_id": "activity_1", "question": "What ranks do we have for faculty?", "rationale": ["Identify the table that contains the information about faculty ranks, which is the Faculty table.", "To find the unique ranks of faculty members, we need to select the Rank column from the Faculty table.", "Using DISTINCT will ensure that we only get unique ranks without duplicates."], "pred_sql": "SELECT DISTINCT Rank FROM Faculty;", "gold_sql": "SELECT DISTINCT rank FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6718, "db_id": "activity_1", "question": "Find the list of distinct ranks for faculty.", "rationale": ["Identify the table that contains the information about faculty members, which is the Faculty table.", "Determine the column that holds the rank information, which is the Rank column in the Faculty table.", "Use the SELECT statement to retrieve the distinct ranks from the Rank column.", "Use the DISTINCT keyword to ensure that only unique ranks are returned."], "pred_sql": "SELECT DISTINCT Rank FROM Faculty;", "gold_sql": "SELECT DISTINCT rank FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6719, "db_id": "activity_1", "question": "Show all the distinct buildings that have faculty rooms.", "rationale": ["Identify the table that contains information about faculty members and their office locations, which is the Faculty table.", "Determine the relevant column that specifies the building where faculty offices are located, which is the Building column.", "To find distinct buildings, use the DISTINCT keyword to ensure that each building is listed only once.", "Filter the results to include only those faculty members who have a room assigned, which can be done by checking that the Room column is not null."], "pred_sql": "SELECT DISTINCT Building FROM Faculty WHERE Room IS NOT NULL;", "gold_sql": "SELECT DISTINCT building FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6720, "db_id": "activity_1", "question": "What buildings have faculty offices?", "rationale": ["Identify the relevant table: The query is asking about faculty offices, which relates to the Faculty table.", "Determine the required information: We need to find out the buildings where faculty offices are located.", "Use the SELECT statement: We will select the 'Building' column from the Faculty table.", "Use DISTINCT to avoid duplicate building names: Since multiple faculty members may be in the same building, we will use DISTINCT to get unique building names."], "pred_sql": "SELECT DISTINCT Building FROM Faculty;", "gold_sql": "SELECT DISTINCT building FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6721, "db_id": "activity_1", "question": "Show the rank, first name, and last name for all the faculty.", "rationale": ["Identify the required columns: Rank, Fname, and Lname from the Faculty table.", "Determine the table to query: Faculty.", "Construct the SQL SELECT statement to retrieve the specified columns from the Faculty table."], "pred_sql": "SELECT Rank, Fname, Lname FROM Faculty;", "gold_sql": "SELECT rank ,  Fname ,  Lname FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6722, "db_id": "activity_1", "question": "What are the rank, first name, and last name of the faculty members?", "rationale": ["Identify the required information: rank, first name, and last name of faculty members.", "Determine the table that contains this information, which is the Faculty table.", "Construct the SQL SELECT statement to retrieve the specified columns from the Faculty table."], "pred_sql": "SELECT Rank, Fname, Lname FROM Faculty;", "gold_sql": "SELECT rank ,  Fname ,  Lname FROM Faculty", "source_tables": ["faculty"]}
{"sample_id": 6723, "db_id": "activity_1", "question": "Show the first name, last name, and phone number for all female faculty members.", "rationale": ["Identify the table that contains the required information: Faculty.", "Determine the columns needed: first name (Fname), last name (Lname), and phone number (Phone).", "Filter the results to include only female faculty members by using the condition 'Sex = 'Female''.", "Construct the SQL SELECT statement to retrieve the specified columns from the Faculty table with the appropriate WHERE clause."], "pred_sql": "SELECT Fname, Lname, Phone FROM Faculty WHERE Sex = 'Female';", "gold_sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "source_tables": ["faculty"]}
{"sample_id": 6724, "db_id": "activity_1", "question": "What are the first name, last name, and phone number of all the female faculty members?", "rationale": ["Identify the required columns: first name (Fname), last name (Lname), and phone number (Phone) from the Faculty table.", "Determine the condition to filter the results: we need only female faculty members, which is indicated by the Sex column being 'Female'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Faculty table with the appropriate WHERE clause."], "pred_sql": "SELECT Fname, Lname, Phone FROM Faculty WHERE Sex = 'Female';", "gold_sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "source_tables": ["faculty"]}
{"sample_id": 6725, "db_id": "activity_1", "question": "Show ids for all the male faculty.", "rationale": ["Identify the table that contains the information about faculty members, which is the 'Faculty' table.", "Determine the column that contains the unique identifier for each faculty member, which is 'FacID'.", "Identify the column that indicates the gender of the faculty members, which is 'Sex'.", "Formulate a SQL query to select 'FacID' from the 'Faculty' table where 'Sex' is equal to 'Male'."], "pred_sql": "SELECT FacID FROM Faculty WHERE Sex = 'Male';", "gold_sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "source_tables": ["faculty"]}
{"sample_id": 6726, "db_id": "activity_1", "question": "What are the faculty ids of all the male faculty members?", "rationale": ["Identify the table that contains the information about faculty members, which is the 'Faculty' table.", "Determine the column that stores the gender of the faculty members, which is 'Sex'.", "Specify the condition to filter for male faculty members, which is 'Sex = 'Male''.", "Construct the SQL query to select the 'FacID' from the 'Faculty' table where the condition is met."], "pred_sql": "SELECT FacID FROM Faculty WHERE Sex = 'Male';", "gold_sql": "SELECT FacID FROM Faculty WHERE Sex  =  'M'", "source_tables": ["faculty"]}
{"sample_id": 6727, "db_id": "activity_1", "question": "How many female Professors do we have?", "rationale": ["Identify the table that contains information about faculty members, which is the 'Faculty' table.", "Determine the relevant columns needed to answer the question: we need to count the number of female professors.", "The 'Sex' column indicates the gender of the faculty, and the 'Rank' column indicates their academic rank.", "Construct a SQL query that counts the number of entries in the 'Faculty' table where 'Sex' is 'Female' and 'Rank' is 'Professor'."], "pred_sql": "SELECT COUNT(*) AS Female_Professors FROM Faculty WHERE Sex = 'Female' AND Rank = 'Professor';", "gold_sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  'Professor'", "source_tables": ["faculty"]}
{"sample_id": 6728, "db_id": "activity_1", "question": "Count the number of female Professors we have.", "rationale": ["Identify the table that contains information about faculty members, which is the 'Faculty' table.", "Determine the relevant columns needed to count female professors: 'Sex' to filter by gender and 'Rank' to filter by academic rank.", "Construct the SQL query to count the number of records in the 'Faculty' table where 'Sex' is 'F' (for female) and 'Rank' is 'Professor'.", "Use the COUNT() function to get the total number of female professors."], "pred_sql": "SELECT COUNT(*) AS female_professor_count FROM Faculty WHERE Sex = 'F' AND Rank = 'Professor';", "gold_sql": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  'Professor'", "source_tables": ["faculty"]}
{"sample_id": 6729, "db_id": "activity_1", "question": "Show the phone, room, and building for the faculty named Jerry Prince.", "rationale": ["Identify the relevant table: Faculty, as we need information about faculty members.", "Determine the columns needed: Phone, Room, and Building.", "Specify the condition to filter the faculty member: We need to find the faculty member with the first name 'Jerry' and last name 'Prince'.", "Construct the SQL SELECT statement to retrieve the specified columns from the Faculty table with the appropriate WHERE clause."], "pred_sql": "SELECT Phone, Room, Building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince';", "gold_sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  'Jerry' AND Lname  =  'Prince'", "source_tables": ["faculty"]}
{"sample_id": 6730, "db_id": "activity_1", "question": "What are the phone, room, and building of the faculty member called Jerry Prince?", "rationale": ["Identify the relevant table: The query is asking for information about a faculty member, so we will use the Faculty table.", "Determine the columns needed: The query requests the phone, room, and building of the faculty member, so we will select the Phone, Room, and Building columns from the Faculty table.", "Specify the conditions: We need to filter the results to find the faculty member with the first name 'Jerry' and last name 'Prince'.", "Construct the SQL query: Combine the selected columns, the table name, and the conditions into a complete SQL query."], "pred_sql": "SELECT Phone, Room, Building FROM Faculty WHERE Fname = 'Jerry' AND Lname = 'Prince';", "gold_sql": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  'Jerry' AND Lname  =  'Prince'", "source_tables": ["faculty"]}
{"sample_id": 6731, "db_id": "activity_1", "question": "How many Professors are in building NEB?", "rationale": ["Identify the table that contains information about faculty members, which is the 'Faculty' table.", "Determine the relevant columns needed to filter the results: 'Rank' to identify professors and 'Building' to specify the location.", "Construct a SQL query to count the number of faculty members with the rank of 'Professor' in the specified building 'NEB'.", "Use the COUNT() function to get the total number of professors that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS ProfessorCount FROM Faculty WHERE Rank = 'Professor' AND Building = 'NEB';", "gold_sql": "SELECT count(*) FROM Faculty WHERE Rank  =  'Professor' AND building  =  'NEB'", "source_tables": ["faculty"]}
{"sample_id": 6732, "db_id": "activity_1", "question": "Count the number of Professors who have office in building NEB.", "rationale": ["Identify the table that contains information about faculty members, which is the 'Faculty' table.", "Determine the relevant columns needed to count the professors: we need to filter by the 'Building' column and ensure the 'Rank' is 'Professor'.", "Construct the SQL query to count the number of faculty members where the 'Building' is 'NEB' and the 'Rank' is 'Professor'."], "pred_sql": "SELECT COUNT(*) AS ProfessorCount FROM Faculty WHERE Building = 'NEB' AND Rank = 'Professor';", "gold_sql": "SELECT count(*) FROM Faculty WHERE Rank  =  'Professor' AND building  =  'NEB'", "source_tables": ["faculty"]}
{"sample_id": 6733, "db_id": "activity_1", "question": "Show the first name and last name for all the instructors.", "rationale": ["Identify the table that contains the information about instructors, which is the Faculty table.", "Determine the columns needed for the output, which are the first name (Fname) and last name (Lname) of the instructors.", "Construct the SQL SELECT statement to retrieve the Fname and Lname from the Faculty table."], "pred_sql": "SELECT Fname, Lname FROM Faculty;", "gold_sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  'Instructor'", "source_tables": ["faculty"]}
{"sample_id": 6734, "db_id": "activity_1", "question": "What are the first name and last name of all the instructors?", "rationale": ["Identify the required information: first name and last name of instructors.", "Determine the relevant table: Faculty table contains the information about instructors.", "Construct the SQL SELECT statement to retrieve the Fname and Lname columns from the Faculty table."], "pred_sql": "SELECT Fname, Lname FROM Faculty;", "gold_sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  'Instructor'", "source_tables": ["faculty"]}
{"sample_id": 6735, "db_id": "activity_1", "question": "Show all the buildings along with the number of faculty members the buildings have.", "rationale": ["Identify the relevant table: The Faculty table contains information about faculty members, including their building.", "Determine the required output: We need to show the building names and the count of faculty members in each building.", "Use the COUNT function to count the number of faculty members (FacID) for each building.", "Group the results by the Building column to get the count for each building."], "pred_sql": "SELECT Building, COUNT(FacID) AS NumberOfFacultyMembers\nFROM Faculty\nGROUP BY Building;", "gold_sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "source_tables": ["faculty"]}
{"sample_id": 6736, "db_id": "activity_1", "question": "How many faculty members does each building have? List the result with the name of the building.", "rationale": ["Identify the relevant table: The Faculty table contains information about faculty members, including their building.", "Determine the required output: We need to count the number of faculty members in each building and display the building name.", "Use the COUNT function to count the number of faculty members (FacID) for each building.", "Group the results by the Building column to get the count for each distinct building."], "pred_sql": "SELECT Building, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Building;", "gold_sql": "SELECT building ,  count(*) FROM Faculty GROUP BY building", "source_tables": ["faculty"]}
{"sample_id": 6737, "db_id": "activity_1", "question": "Which building has most faculty members?", "rationale": ["Identify the relevant table: The Faculty table contains information about faculty members, including their building.", "Count the number of faculty members in each building: Use COUNT(FacID) to count the number of faculty members grouped by the Building column.", "Group the results by building: Use GROUP BY Building to aggregate the counts for each building.", "Order the results to find the building with the most faculty members: Use ORDER BY FacultyCount DESC to sort the counts in descending order.", "Limit the results to the top entry: Use LIMIT 1 to get only the building with the highest count."], "pred_sql": "SELECT Building, COUNT(FacID) AS FacultyCount\nFROM Faculty\nGROUP BY Building\nORDER BY FacultyCount DESC\nLIMIT 1;", "gold_sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty"]}
{"sample_id": 6738, "db_id": "activity_1", "question": "Find the building that has the largest number of faculty members.", "rationale": ["Identify the relevant table: The Faculty table contains information about faculty members, including their building.", "Count the number of faculty members in each building: Use COUNT(FacID) to count the number of faculty members grouped by their building.", "Group the results by building: Use GROUP BY Building to aggregate the counts for each building.", "Order the results to find the building with the most faculty members: Use ORDER BY FacultyCount DESC to sort the counts in descending order.", "Limit the results to the top entry: Use LIMIT 1 to get only the building with the largest number of faculty members."], "pred_sql": "SELECT Building, COUNT(FacID) AS FacultyCount\nFROM Faculty\nGROUP BY Building\nORDER BY FacultyCount DESC\nLIMIT 1;", "gold_sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty"]}
{"sample_id": 6739, "db_id": "activity_1", "question": "Show all the buildings that have at least 10 professors.", "rationale": ["Identify the relevant table: Faculty, which contains information about faculty members including their building.", "We need to count the number of faculty members (professors) in each building.", "Use the GROUP BY clause to group the results by the Building column.", "Use the COUNT function to count the number of faculty members in each building.", "Use the HAVING clause to filter the groups to only include those with 10 or more faculty members."], "pred_sql": "SELECT Building FROM Faculty GROUP BY Building HAVING COUNT(FacID) >= 10;", "gold_sql": "SELECT building FROM Faculty WHERE rank  =  'Professor' GROUP BY building HAVING count(*)  >=  10", "source_tables": ["faculty"]}
{"sample_id": 6740, "db_id": "activity_1", "question": "In which buildings are there at least ten professors?", "rationale": ["Identify the relevant table: Faculty, which contains information about faculty members including their building.", "We need to find buildings with at least ten professors, so we will group the results by the 'Building' column.", "Use the COUNT function to count the number of faculty members (FacID) in each building.", "Apply the HAVING clause to filter the groups to only include those with a count of 10 or more."], "pred_sql": "SELECT Building FROM Faculty GROUP BY Building HAVING COUNT(FacID) >= 10;", "gold_sql": "SELECT building FROM Faculty WHERE rank  =  'Professor' GROUP BY building HAVING count(*)  >=  10", "source_tables": ["faculty"]}
{"sample_id": 6741, "db_id": "activity_1", "question": "For each faculty rank, show the number of faculty members who have it.", "rationale": ["Identify the table that contains faculty information, which is the Faculty table.", "Determine the relevant columns needed for the query: Rank (to group by) and a count of faculty members (to count how many have each rank).", "Use the COUNT() function to count the number of faculty members for each rank.", "Group the results by the Rank column to get the count for each distinct rank."], "pred_sql": "SELECT Rank, COUNT(*) AS Faculty_Count FROM Faculty GROUP BY Rank;", "gold_sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "source_tables": ["faculty"]}
{"sample_id": 6742, "db_id": "activity_1", "question": "How many faculty members do we have for each faculty rank?", "rationale": ["Identify the relevant table: Faculty, which contains information about faculty members including their ranks.", "Determine the columns needed: We need the 'Rank' column to group the results and 'FacID' to count the number of faculty members.", "Use the COUNT() function to count the number of faculty members for each rank.", "Group the results by 'Rank' to get the count for each distinct rank."], "pred_sql": "SELECT Rank, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Rank;", "gold_sql": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank", "source_tables": ["faculty"]}
{"sample_id": 6743, "db_id": "activity_1", "question": "Show all the ranks and the number of male and female faculty for each rank.", "rationale": ["We need to retrieve the ranks of faculty members along with the count of male and female faculty for each rank.", "The relevant table for this information is the Faculty table, which contains the columns Rank and Sex.", "To get the count of male and female faculty for each rank, we will use the COUNT() function.", "We will group the results by Rank and Sex to get the desired counts for each combination of rank and gender."], "pred_sql": "SELECT Rank, Sex, COUNT(*) as Count\nFROM Faculty\nGROUP BY Rank, Sex;", "gold_sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "source_tables": ["faculty"]}
{"sample_id": 6744, "db_id": "activity_1", "question": "How many faculty members do we have for each rank and gender?", "rationale": ["Identify the relevant table: The Faculty table contains information about faculty members, including their rank and gender.", "Determine the required output: We need to count the number of faculty members for each combination of rank and gender.", "Use the COUNT function to count the number of unique FacID entries for each group of Rank and Sex.", "Group the results by Rank and Sex to get the count for each combination.", "Construct the SQL query using SELECT, COUNT, and GROUP BY clauses."], "pred_sql": "SELECT Rank, Sex, COUNT(FacID) AS Faculty_Count FROM Faculty GROUP BY Rank, Sex;", "gold_sql": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex", "source_tables": ["faculty"]}
{"sample_id": 6745, "db_id": "activity_1", "question": "Which rank has the smallest number of faculty members?", "rationale": ["Identify the table that contains the information about faculty members, which is the Faculty table.", "We need to find the rank of faculty members, so we will select the 'Rank' column from the Faculty table.", "To determine the number of faculty members in each rank, we will use the COUNT function on the 'FacID' column, grouping the results by 'Rank'.", "To find the rank with the smallest number of faculty members, we will order the results by the count in ascending order.", "Finally, we will limit the results to only one entry to get the rank with the smallest number of faculty members."], "pred_sql": "SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(FacID) ASC LIMIT 1;", "gold_sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "source_tables": ["faculty"]}
{"sample_id": 6746, "db_id": "activity_1", "question": "Find the faculty rank that has the least members.", "rationale": ["Identify the table that contains faculty information, which is the Faculty table.", "We need to find the rank of faculty members, so we will select the 'Rank' column from the Faculty table.", "To find the rank with the least members, we will group the results by 'Rank' and count the number of faculty members in each rank using COUNT(FacID).", "We will order the results in ascending order based on the count of faculty members to get the rank with the least members at the top.", "Finally, we will limit the results to 1 to get only the rank with the least members."], "pred_sql": "SELECT Rank FROM Faculty GROUP BY Rank ORDER BY COUNT(FacID) ASC LIMIT 1;", "gold_sql": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1", "source_tables": ["faculty"]}
{"sample_id": 6747, "db_id": "activity_1", "question": "Show the number of male and female assistant professors.", "rationale": ["Identify the relevant table: Faculty, as it contains information about faculty members including their rank and gender.", "Determine the specific rank we are interested in: Assistant Professor.", "We need to count the number of faculty members grouped by their gender (Sex).", "Construct the SQL query to select the gender and count of faculty members where the rank is 'Assistant Professor', grouping the results by gender."], "pred_sql": "SELECT Sex, COUNT(*) AS NumberOfProfessors \nFROM Faculty \nWHERE Rank = 'Assistant Professor' \nGROUP BY Sex;", "gold_sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  'AsstProf' GROUP BY sex", "source_tables": ["faculty"]}
{"sample_id": 6748, "db_id": "activity_1", "question": "How many male and female assistant professors do we have?", "rationale": ["Identify the relevant table: Faculty, which contains information about faculty members including their rank and gender.", "Filter the records to include only those faculty members who are assistant professors by using the condition 'Rank = 'Assistant Professor'.", "Group the results by gender (Sex) to count the number of male and female assistant professors.", "Use the COUNT() function to count the number of faculty members in each gender group."], "pred_sql": "SELECT Sex, COUNT(*) AS Count FROM Faculty WHERE Rank = 'Assistant Professor' GROUP BY Sex;", "gold_sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  'AsstProf' GROUP BY sex", "source_tables": ["faculty"]}
{"sample_id": 6749, "db_id": "activity_1", "question": "What are the first name and last name of Linda Smith's advisor?", "rationale": ["Identify the tables involved: We need to get the first name and last name of Linda Smith's advisor, which involves the Student and Faculty tables.", "Determine the relationship: The Student table has a column 'Advisor' that references the Faculty table's 'FacID'.", "Construct the inner query: We need to find Linda Smith's Advisor ID from the Student table using a SELECT statement that filters by her first and last name.", "Construct the outer query: Use the Advisor ID obtained from the inner query to find the corresponding first and last name from the Faculty table.", "Combine the queries: The final SQL query combines the inner and outer queries to retrieve the desired information."], "pred_sql": "SELECT Fname, LName FROM Faculty WHERE FacID = (SELECT Advisor FROM Student WHERE LName = 'Smith' AND Fname = 'Linda')", "gold_sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  'Linda' AND T2.lname  =  'Smith'", "source_tables": ["faculty", "student"]}
{"sample_id": 6750, "db_id": "activity_1", "question": "Who is the advisor of Linda Smith? Give me the first name and last name.", "rationale": ["Identify the table that contains the information about students and their advisors, which is the 'Student' table.", "Determine the columns needed: we need the 'Advisor' column to find out who Linda Smith's advisor is.", "Filter the records to find the specific student by their first name 'Linda' and last name 'Smith'.", "Construct the SQL query to select the 'Advisor' from the 'Student' table where the conditions for first and last name are met."], "pred_sql": "SELECT Advisor FROM Student WHERE Fname = 'Linda' AND LName = 'Smith';", "gold_sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  'Linda' AND T2.lname  =  'Smith'", "source_tables": ["faculty", "student"]}
{"sample_id": 6751, "db_id": "activity_1", "question": "Show the ids of students whose advisors are professors.", "rationale": ["Identify the relevant tables: Student and Faculty.", "Determine the relationship: Student table has an 'Advisor' column that references 'FacID' in the Faculty table.", "We need to find students whose advisors are faculty members, which means we need to join the Student table with the Faculty table on the Advisor and FacID columns.", "Select the unique student IDs (StuID) from the result of the join to avoid duplicates."], "pred_sql": "SELECT DISTINCT Student.StuID FROM Student JOIN Faculty ON Student.Advisor = Faculty.FacID;", "gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  'Professor'", "source_tables": ["faculty", "student"]}
{"sample_id": 6752, "db_id": "activity_1", "question": "Which students have professors as their advisors? Find their student ids.", "rationale": ["Identify the tables involved: We need to find students and their advisors, so we will use the Student and Faculty tables.", "Determine the relationship: The Student table has a column 'Advisor' that references 'FacID' in the Faculty table, indicating which faculty member is the advisor for each student.", "Construct the SQL query: We will perform a JOIN operation between the Student and Faculty tables on the condition that Student.Advisor matches Faculty.FacID.", "Select the required data: We need to retrieve the student IDs (StuID) of students who have faculty members as their advisors."], "pred_sql": "SELECT Student.StuID FROM Student JOIN Faculty ON Student.Advisor = Faculty.FacID;", "gold_sql": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  'Professor'", "source_tables": ["faculty", "student"]}
{"sample_id": 6753, "db_id": "activity_1", "question": "Show first name and last name for all the students advised by Michael Goodrich.", "rationale": ["Identify the requirement to show first name and last name of students advised by a specific faculty member, Michael Goodrich.", "Determine the relationship between students and their advisors, which is represented in the Student table with the 'Advisor' column.", "Find the unique identifier (StuID) of the faculty member Michael Goodrich from the Faculty table using a subquery.", "Use the identified StuID to filter the Student table for those students whose Advisor matches this ID."], "pred_sql": "SELECT Fname, LName FROM Student WHERE Advisor = (SELECT StuID FROM Faculty WHERE Fname = 'Michael' AND Lname = 'Goodrich')", "gold_sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  'Michael' AND T1.lname  =  'Goodrich'", "source_tables": ["faculty", "student"]}
{"sample_id": 6754, "db_id": "activity_1", "question": "Which students are advised by Michael Goodrich? Give me their first and last names.", "rationale": ["Identify the faculty member by name (Michael Goodrich) to find their unique identifier (FacID).", "Use a subquery to select the FacID from the Faculty table where the first name is 'Michael' and the last name is 'Goodrich'.", "Select the first name (Fname) and last name (LName) of students from the Student table where their Advisor matches the FacID obtained from the subquery."], "pred_sql": "SELECT Fname, LName FROM Student WHERE Advisor = (SELECT FacID FROM Faculty WHERE Fname = 'Michael' AND Lname = 'Goodrich');", "gold_sql": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  'Michael' AND T1.lname  =  'Goodrich'", "source_tables": ["faculty", "student"]}
{"sample_id": 6755, "db_id": "activity_1", "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.", "rationale": ["We need to select the faculty ID and the count of students they advise.", "The Faculty table contains the faculty IDs, and the Student table contains the advisor information.", "We will perform a LEFT JOIN between the Faculty table and the Student table on the condition that the Faculty ID matches the Advisor ID in the Student table.", "We will use the COUNT function to count the number of students for each faculty member.", "Finally, we will group the results by Faculty ID to get the count of students advised by each faculty member."], "pred_sql": "SELECT Faculty.FacID, COUNT(Student.Advisor) AS NumberOfStudentsAdvised\nFROM Faculty\nLEFT JOIN Student ON Faculty.FacID = Student.Advisor\nGROUP BY Faculty.FacID;", "gold_sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "source_tables": ["faculty", "student"]}
{"sample_id": 6756, "db_id": "activity_1", "question": "What are the faculty id and the number of students each faculty has?", "rationale": ["Identify the relevant tables: Faculty_Participates_in for faculty IDs and Participates_in for student participation.", "We need to count the number of students associated with each faculty member, which requires a join between Faculty_Participates_in and Participates_in on the activity ID (actid).", "Use a LEFT JOIN to ensure we include faculty members even if they have no students participating in their activities.", "Select the faculty ID (FacID) and count the number of students (stuid) for each faculty member.", "Group the results by faculty ID to get the count of students per faculty."], "pred_sql": "SELECT fp.FacID, COUNT(pi.stuid) AS student_count\nFROM Faculty_Participates_in fp\nLEFT JOIN Participates_in pi ON fp.actid = pi.actid\nGROUP BY fp.FacID;", "gold_sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "source_tables": ["faculty", "student"]}
{"sample_id": 6757, "db_id": "activity_1", "question": "Show all the faculty ranks and the number of students advised by each rank.", "rationale": ["Identify the tables needed: Faculty and Student.", "We need to get the faculty ranks, so we will select the 'Rank' column from the Faculty table.", "To count the number of students advised by each faculty member, we will join the Faculty table with the Student table on the Advisor field.", "Use a LEFT JOIN to ensure we include all faculty ranks even if they have no students advised.", "Count the number of students for each faculty rank using COUNT(Student.Advisor).", "Group the results by Faculty.Rank to get the count for each rank."], "pred_sql": "SELECT Faculty.Rank, COUNT(Student.Advisor) AS NumberOfStudentsAdvised\nFROM Faculty\nLEFT JOIN Student ON Faculty.FacID = Student.Advisor\nGROUP BY Faculty.Rank;", "gold_sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "source_tables": ["faculty", "student"]}
{"sample_id": 6758, "db_id": "activity_1", "question": "How many students are advised by each rank of faculty? List the rank and the number of students.", "rationale": ["Identify the tables involved: Faculty and Student.", "Determine the relationship: Faculty has a rank and students have an advisor which is a faculty member.", "Use a LEFT JOIN to connect Faculty and Student on the Advisor field.", "Count the number of students for each faculty rank using COUNT() function.", "Group the results by faculty rank to get the count for each rank."], "pred_sql": "SELECT f.Rank, COUNT(s.StuID) AS number_of_students\nFROM Faculty f\nLEFT JOIN Student s ON f.FacID = s.Advisor\nGROUP BY f.Rank;", "gold_sql": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank", "source_tables": ["faculty", "student"]}
{"sample_id": 6759, "db_id": "activity_1", "question": "What are the first and last name of the faculty who has the most students?", "rationale": ["Identify the tables involved: Faculty, Faculty_Participates_in, Participates_in, and Student.", "We need to join these tables to connect faculty members with the students they supervise or participate with in activities.", "Use JOIN to connect Faculty to Faculty_Participates_in on FacID, then connect Faculty_Participates_in to Participates_in on actid, and finally connect Participates_in to Student on stuid.", "Group the results by faculty ID to count the number of students associated with each faculty member.", "Order the results by the count of students in descending order to find the faculty member with the most students.", "Limit the results to 1 to get only the faculty member with the highest count."], "pred_sql": "SELECT F.Fname, F.Lname \nFROM Faculty F \nJOIN Faculty_Participates_in FPI ON F.FacID = FPI.FacID \nJOIN Participates_in PI ON FPI.actid = PI.actid \nJOIN Student S ON PI.stuid = S.StuID \nGROUP BY F.FacID \nORDER BY COUNT(S.StuID) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty", "student"]}
{"sample_id": 6760, "db_id": "activity_1", "question": "Give me the the first and last name of the faculty who advises the most students.", "rationale": ["Identify the relevant tables: Faculty and Student.", "Determine the relationship: Faculty advises students, so we need to join Faculty with Student on the Advisor field.", "Select the first and last names of faculty members.", "Group the results by faculty ID to count the number of students each faculty advises.", "Order the results by the count of students in descending order to find the faculty with the most advisees.", "Limit the results to 1 to get only the faculty member who advises the most students."], "pred_sql": "SELECT F.Fname, F.Lname\nFROM Faculty F\nJOIN Student S ON F.FacID = S.Advisor\nGROUP BY F.FacID\nORDER BY COUNT(S.StuID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty", "student"]}
{"sample_id": 6761, "db_id": "activity_1", "question": "Show the ids for all the faculty members who have at least 2 students.", "rationale": ["We need to find faculty members who have at least 2 students participating in activities.", "To do this, we will join the Faculty table with the Faculty_Participates_in table on the FacID column to get the activities each faculty member participates in.", "Next, we will join the Participates_in table on the actid column to link the activities to the students participating in them.", "We will group the results by the FacID to aggregate the data for each faculty member.", "Finally, we will use the HAVING clause to filter the groups to only include those with a count of distinct students (stuid) that is 2 or more."], "pred_sql": "SELECT f.FacID\nFROM Faculty f\nJOIN Faculty_Participates_in fpi ON f.FacID = fpi.FacID\nJOIN Participates_in pi ON fpi.actid = pi.actid\nGROUP BY f.FacID\nHAVING COUNT(DISTINCT pi.stuid) >= 2;", "gold_sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "source_tables": ["faculty", "student"]}
{"sample_id": 6762, "db_id": "activity_1", "question": "Which faculty members advise two ore more students? Give me their faculty ids.", "rationale": ["Identify the relevant tables: Faculty and Student.", "Determine the relationship between faculty members and students through the Advisor field in the Student table.", "Join the Faculty table with the Student table on the condition that Faculty.FacID matches Student.Advisor.", "Group the results by Faculty.FacID to aggregate the number of students advised by each faculty member.", "Use the HAVING clause to filter the groups to only include those with two or more students."], "pred_sql": "SELECT Faculty.FacID\nFROM Faculty\nJOIN Student ON Faculty.FacID = Student.Advisor\nGROUP BY Faculty.FacID\nHAVING COUNT(Student.StuID) >= 2;", "gold_sql": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2", "source_tables": ["faculty", "student"]}
{"sample_id": 6763, "db_id": "activity_1", "question": "Show ids for the faculty members who don't advise any student.", "rationale": ["Identify the table that contains faculty members: Faculty.", "Identify the column that uniquely identifies faculty members: FacID.", "Identify the table that contains information about student advisors: Student.", "Identify the column in the Student table that indicates the advisor for each student: Advisor.", "We need to find faculty members whose FacID is not present in the Advisor column of the Student table.", "Construct a subquery to select all unique Advisor IDs from the Student table.", "Use the NOT IN clause to filter out faculty members whose FacID is in the list of Advisors from the subquery."], "pred_sql": "SELECT FacID FROM Faculty WHERE FacID NOT IN (SELECT Advisor FROM Student WHERE Advisor IS NOT NULL)", "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "source_tables": ["faculty", "student"]}
{"sample_id": 6764, "db_id": "activity_1", "question": "What are the ids of the faculty members who do not advise any student.", "rationale": ["Identify the table that contains faculty information, which is the Faculty table.", "Determine the relevant column for faculty identifiers, which is 'FacID'.", "Identify the table that contains student information, which is the Student table.", "Determine the relevant column for advisors in the Student table, which is 'Advisor'.", "Construct a subquery to find all unique 'Advisor' IDs from the Student table where 'Advisor' is not null, as these represent faculty members who advise students.", "Use the NOT IN clause to filter out faculty members whose 'FacID' is present in the list of advisors from the subquery."], "pred_sql": "SELECT FacID FROM Faculty WHERE FacID NOT IN (SELECT Advisor FROM Student WHERE Advisor IS NOT NULL);", "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "source_tables": ["faculty", "student"]}
{"sample_id": 6765, "db_id": "activity_1", "question": "What activities do we have?", "rationale": ["Identify the table that contains information about activities, which is the 'Activity' table.", "To retrieve all activities, we need to select all columns from the 'Activity' table.", "Construct the SQL query using the SELECT statement to get all records from the 'Activity' table."], "pred_sql": "SELECT * FROM Activity;", "gold_sql": "SELECT activity_name FROM Activity", "source_tables": ["activity"]}
{"sample_id": 6766, "db_id": "activity_1", "question": "List all the activities we have.", "rationale": ["Identify the table that contains the activities, which is the 'Activity' table.", "To list all activities, we need to select all columns from the 'Activity' table.", "Construct the SQL query using the SELECT statement to retrieve all records from the 'Activity' table."], "pred_sql": "SELECT * FROM Activity;", "gold_sql": "SELECT activity_name FROM Activity", "source_tables": ["activity"]}
{"sample_id": 6767, "db_id": "activity_1", "question": "How many activities do we have?", "rationale": ["Identify the requirement: We need to find out the total number of activities.", "Determine the relevant table: The 'Activity' table contains the information about activities.", "Use the COUNT() function to count the number of entries in the 'Activity' table.", "Construct the SQL query to select the count of activities from the 'Activity' table."], "pred_sql": "SELECT COUNT(*) AS total_activities FROM Activity;", "gold_sql": "SELECT count(*) FROM Activity", "source_tables": ["activity"]}
{"sample_id": 6768, "db_id": "activity_1", "question": "Find the number of activities available.", "rationale": ["Identify the requirement: We need to find the number of activities available.", "Determine the relevant table: The 'Activity' table contains the information about activities.", "Use the COUNT() function to count the total number of entries in the 'Activity' table.", "Construct the SQL query to select the count from the 'Activity' table."], "pred_sql": "SELECT COUNT(*) AS number_of_activities FROM Activity;", "gold_sql": "SELECT count(*) FROM Activity", "source_tables": ["activity"]}
{"sample_id": 6769, "db_id": "activity_1", "question": "How many faculty members participate in an activity?", "rationale": ["Identify the table that contains information about faculty participation in activities, which is the Faculty_Participates_in table.", "To find out how many faculty members participate in any activity, we need to count the unique FacID entries in the Faculty_Participates_in table.", "Using COUNT(DISTINCT FacID) will give us the number of unique faculty members participating in activities."], "pred_sql": "SELECT COUNT(DISTINCT FacID) AS FacultyCount FROM Faculty_Participates_in;", "gold_sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "source_tables": ["faculty_participates_in"]}
{"sample_id": 6770, "db_id": "activity_1", "question": "Give me the number of faculty members who participate in an activity", "rationale": ["Identify the table that contains information about faculty participation in activities, which is the 'Faculty_Participates_in' table.", "To find the number of faculty members participating in activities, we need to count the unique faculty IDs (FacID) in the 'Faculty_Participates_in' table.", "Use the COUNT function to count the distinct FacID values to ensure that each faculty member is only counted once, regardless of how many activities they participate in."], "pred_sql": "SELECT COUNT(DISTINCT FacID) AS number_of_faculty_members FROM Faculty_Participates_in;", "gold_sql": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in", "source_tables": ["faculty_participates_in"]}
{"sample_id": 6771, "db_id": "activity_1", "question": "Show the ids of the faculty who don't participate in any activity.", "rationale": ["Identify the table that contains faculty information, which is the Faculty table.", "Determine the relevant column for faculty identifiers, which is FacID.", "Identify the table that tracks faculty participation in activities, which is Faculty_Participates_in.", "To find faculty who do not participate in any activities, we need to select FacID from the Faculty table where the FacID is not present in the Faculty_Participates_in table.", "Construct the SQL query using a subquery to filter out faculty IDs that are present in the Faculty_Participates_in table."], "pred_sql": "SELECT FacID FROM Faculty WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in)", "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6772, "db_id": "activity_1", "question": "Which faculty do not participate in any activity? Find their faculty ids.", "rationale": ["Identify the table that contains faculty information, which is the Faculty table.", "Determine the relevant column for faculty identifiers, which is FacID.", "Identify the table that tracks faculty participation in activities, which is Faculty_Participates_in.", "To find faculty who do not participate in any activities, we need to select FacID from the Faculty table where the FacID is not present in the Faculty_Participates_in table.", "Construct the SQL query using a subquery to filter out faculty IDs that are present in the Faculty_Participates_in table."], "pred_sql": "SELECT FacID FROM Faculty WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in)", "gold_sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6773, "db_id": "activity_1", "question": "Show the ids of all the faculty members who participate in an activity and advise a student.", "rationale": ["Identify the relevant tables: Faculty, Faculty_Participates_in, and Student.", "We need to find faculty members who participate in activities, so we will join Faculty with Faculty_Participates_in on the FacID.", "Next, we need to ensure that these faculty members also advise students, which means we will join the Student table on the Advisor column.", "We want to select distinct faculty IDs to avoid duplicates in the result.", "Construct the SQL query to select the FacID from the joined tables."], "pred_sql": "SELECT DISTINCT Faculty.FacID \nFROM Faculty \nJOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID \nJOIN Student ON Faculty.FacID = Student.Advisor;", "gold_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "source_tables": ["student", "faculty_participates_in"]}
{"sample_id": 6774, "db_id": "activity_1", "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.", "rationale": ["Identify the relevant tables: Faculty, Faculty_Participates_in, and Student.", "We need to find faculty members who participate in activities, so we will join the Faculty table with the Faculty_Participates_in table on the FacID.", "Next, we need to ensure that these faculty members also advise students, which means we will join the Student table on the Advisor column, matching it with the FacID from the Faculty table.", "Select the distinct FacID from the resulting joined tables to get the unique identifiers of faculty members who meet both criteria."], "pred_sql": "SELECT DISTINCT Faculty.FacID \nFROM Faculty \nJOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID \nJOIN Student ON Faculty.FacID = Student.Advisor;", "gold_sql": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student", "source_tables": ["student", "faculty_participates_in"]}
{"sample_id": 6775, "db_id": "activity_1", "question": "How many activities does Mark Giuliano participate in?", "rationale": ["Identify the relevant tables: We need to find out how many activities a faculty member named Mark Giuliano participates in, so we will use the Activity, Faculty_Participates_in, and Faculty tables.", "Join the tables: We will join the Faculty_Participates_in table with the Activity table on the actid column to get the activities associated with each faculty member. We will also join the Faculty table to filter by the name 'Mark Giuliano'.", "Filter by name: We will add a WHERE clause to filter the results to only include the faculty member with the first name 'Mark' and last name 'Giuliano'.", "Count the activities: We will use the COUNT function to count the distinct activities that Mark Giuliano participates in."], "pred_sql": "SELECT COUNT(DISTINCT Activity.actid) AS activity_count\nFROM Activity\nJOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid\nJOIN Faculty ON Faculty_Participates_in.FacID = Faculty.FacID\nWHERE Faculty.Fname = 'Mark' AND Faculty.Lname = 'Giuliano';", "gold_sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  'Mark' AND T1.lname  =  'Giuliano'", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6776, "db_id": "activity_1", "question": "Find the number of activities Mark Giuliano is involved in.", "rationale": ["Identify the tables involved: Activity, Participates_in, and Student.", "We need to count the number of distinct activities, so we will use COUNT(DISTINCT a.actid).", "Join the Activity table with the Participates_in table on actid to link activities with student participation.", "Join the Participates_in table with the Student table on stuid to link students with their activities.", "Filter the results to only include the student named Mark Giuliano by using the WHERE clause with conditions for first name and last name."], "pred_sql": "SELECT COUNT(DISTINCT a.actid) AS number_of_activities\nFROM Activity a\nJOIN Participates_in p ON a.actid = p.actid\nJOIN Student s ON p.stuid = s.StuID\nWHERE s.Fname = 'Mark' AND s.LName = 'Giuliano';", "gold_sql": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  'Mark' AND T1.lname  =  'Giuliano'", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6777, "db_id": "activity_1", "question": "Show the names of all the activities Mark Giuliano participates in.", "rationale": ["Identify the tables involved: Activity, Participates_in, and Student.", "We need to find the activities that a specific student (Mark Giuliano) participates in.", "Join the Activity table with the Participates_in table on the actid to link activities with student participation.", "Join the Participates_in table with the Student table on the stuid to link student information.", "Filter the results to only include the student with the first name 'Mark' and last name 'Giuliano'.", "Select the activity_name from the resulting joined tables."], "pred_sql": "SELECT Activity.activity_name \nFROM Activity \nJOIN Participates_in ON Activity.actid = Participates_in.actid \nJOIN Student ON Participates_in.stuid = Student.StuID \nWHERE Student.Fname = 'Mark' AND Student.LName = 'Giuliano';", "gold_sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  'Mark' AND T1.lname  =  'Giuliano'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6778, "db_id": "activity_1", "question": "What are the names of the activities Mark Giuliano is involved in", "rationale": ["Identify the tables involved: We need to find activities related to a faculty member named Mark Giuliano, so we will use the Activity, Faculty_Participates_in, and Faculty tables.", "Determine the relationships: Faculty_Participates_in links Faculty and Activity through the actid and FacID columns.", "Filter for the specific faculty member: We need to filter the Faculty table for the first name 'Mark' and last name 'Giuliano'.", "Select the activity names: We want to retrieve the names of the activities, which are stored in the Activity table under the column activity_name.", "Construct the SQL query: Using JOINs to connect the tables and applying the necessary filters to get the desired results."], "pred_sql": "SELECT Activity.activity_name \nFROM Activity \nJOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid \nJOIN Faculty ON Faculty_Participates_in.FacID = Faculty.FacID \nWHERE Faculty.Fname = 'Mark' AND Faculty.Lname = 'Giuliano';", "gold_sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  'Mark' AND T1.lname  =  'Giuliano'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6779, "db_id": "activity_1", "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.", "rationale": ["Identify the tables needed: Faculty and Faculty_Participates_in.", "We need to select the first name (Fname) and last name (Lname) of faculty members, so we will include these columns in the SELECT statement.", "We also need to count the number of activities each faculty member participated in, which requires using the COUNT function on the actid from the Faculty_Participates_in table.", "To link the faculty members with their activities, we will perform a JOIN operation between the Faculty table and the Faculty_Participates_in table on the FacID column.", "Since we want to group the results by each faculty member to count their activities, we will use the GROUP BY clause on Faculty.FacID."], "pred_sql": "SELECT Faculty.Fname, Faculty.Lname, COUNT(Faculty_Participates_in.actid) AS activity_count\nFROM Faculty\nJOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID\nGROUP BY Faculty.FacID;", "gold_sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6780, "db_id": "activity_1", "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.", "rationale": ["Identify the relevant tables: Faculty and Faculty_Participates_in, since we need faculty members and their participation in activities.", "Select the first name (Fname) and last name (Lname) of faculty members from the Faculty table.", "Count the number of activities each faculty member participated in using COUNT() on the actid from Faculty_Participates_in.", "Join the Faculty table with the Faculty_Participates_in table on the FacID to link faculty members with their activities.", "Group the results by Faculty.FacID to aggregate the count of activities for each faculty member.", "Use HAVING clause to filter out faculty members who have participated in at least one activity (i.e., count > 0)."], "pred_sql": "SELECT Faculty.Fname, Faculty.Lname, COUNT(Faculty_Participates_in.actid) AS activity_count\nFROM Faculty\nJOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID\nGROUP BY Faculty.FacID\nHAVING COUNT(Faculty_Participates_in.actid) > 0;", "gold_sql": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6781, "db_id": "activity_1", "question": "Show all the activity names and the number of faculty involved in each activity.", "rationale": ["Identify the tables needed: We need the 'Activity' table for activity names and the 'Faculty_Participates_in' table to count faculty participation.", "Select the activity names from the 'Activity' table.", "Count the number of faculty members involved in each activity using COUNT() function on 'FacID' from 'Faculty_Participates_in'.", "Join the 'Activity' table with 'Faculty_Participates_in' on the 'actid' to link activities with their faculty participants.", "Group the results by activity name to get the count of faculty for each activity."], "pred_sql": "SELECT Activity.activity_name, COUNT(Faculty_Participates_in.FacID) AS faculty_count\nFROM Activity\nLEFT JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid\nGROUP BY Activity.activity_name;", "gold_sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "source_tables": ["activity", "faculty_participates_in"]}
{"sample_id": 6782, "db_id": "activity_1", "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.", "rationale": ["Identify the tables needed: We need the 'Activity' table for activity names and the 'Faculty_Participates_in' table to count faculty participation.", "Join the 'Activity' table with the 'Faculty_Participates_in' table on the 'actid' column to link activities with their participating faculty members.", "Use the COUNT function to count the number of faculty members for each activity.", "Group the results by 'Activity.activity_name' to get the count of faculty members for each specific activity."], "pred_sql": "SELECT Activity.activity_name, COUNT(Faculty_Participates_in.FacID) AS faculty_count\nFROM Activity\nLEFT JOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid\nGROUP BY Activity.activity_name;", "gold_sql": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID", "source_tables": ["activity", "faculty_participates_in"]}
{"sample_id": 6783, "db_id": "activity_1", "question": "What is the first and last name of the faculty participating in the most activities?", "rationale": ["Identify the relevant tables: Faculty and Faculty_Participates_in.", "We need to join these tables on the faculty ID (FacID) to link faculty members with their participation in activities.", "We will group the results by faculty ID to count the number of activities each faculty member participates in.", "We will order the results in descending order based on the count of activities to find the faculty member with the most participation.", "Finally, we will limit the results to 1 to get only the faculty member with the highest count."], "pred_sql": "SELECT F.Fname, F.Lname\nFROM Faculty F\nJOIN Faculty_Participates_in FP ON F.FacID = FP.FacID\nGROUP BY F.FacID\nORDER BY COUNT(FP.actid) DESC\nLIMIT 1;", "gold_sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6784, "db_id": "activity_1", "question": "Find the first and last name of the faculty who is involved in the largest number of activities.", "rationale": ["Identify the relevant tables: Faculty and Faculty_Participates_in.", "We need to join these tables on the faculty ID (FacID) to link faculty members with their activities.", "We will group the results by faculty ID to count the number of activities each faculty member participates in.", "To find the faculty member involved in the largest number of activities, we will order the results by the count of activities in descending order.", "Finally, we will limit the results to only the top entry to get the faculty member with the most activities."], "pred_sql": "SELECT F.Fname, F.Lname\nFROM Faculty F\nJOIN Faculty_Participates_in FP ON F.FacID = FP.FacID\nGROUP BY F.FacID\nORDER BY COUNT(FP.actid) DESC\nLIMIT 1;", "gold_sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["faculty", "faculty_participates_in"]}
{"sample_id": 6785, "db_id": "activity_1", "question": "What is the name of the activity that has the most faculty members involved in?", "rationale": ["Identify the table that contains the activity names, which is the 'Activity' table.", "Determine the relationship between faculty members and activities, which is represented in the 'Faculty_Participates_in' table.", "To find the activity with the most faculty members, we need to count the number of faculty members (FacID) for each activity (actid) in the 'Faculty_Participates_in' table.", "Group the results by actid to get the count of faculty members for each activity.", "Order the results in descending order based on the count of faculty members to get the activity with the most faculty members at the top.", "Limit the results to 1 to get only the top activity.", "Finally, use the actid from the previous query to select the corresponding activity_name from the 'Activity' table."], "pred_sql": "SELECT activity_name FROM Activity WHERE actid = (SELECT actid FROM Faculty_Participates_in GROUP BY actid ORDER BY COUNT(FacID) DESC LIMIT 1)", "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "faculty_participates_in"]}
{"sample_id": 6786, "db_id": "activity_1", "question": "Which activity has the most faculty members participating in? Find the activity name.", "rationale": ["Identify the relevant tables: Activity and Faculty_Participates_in.", "We need to find the activity with the most faculty members, so we will join the Activity table with the Faculty_Participates_in table on the actid column.", "Group the results by activity name to count the number of faculty members participating in each activity.", "Use the COUNT function to count the number of faculty members for each activity.", "Order the results in descending order based on the count of faculty members to get the activity with the most participants at the top.", "Limit the results to 1 to get only the activity with the highest count."], "pred_sql": "SELECT Activity.activity_name\nFROM Activity\nJOIN Faculty_Participates_in ON Activity.actid = Faculty_Participates_in.actid\nGROUP BY Activity.activity_name\nORDER BY COUNT(Faculty_Participates_in.FacID) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "faculty_participates_in"]}
{"sample_id": 6787, "db_id": "activity_1", "question": "Show the ids of the students who don't participate in any activity.", "rationale": ["Identify the table that contains student information, which is the 'Student' table.", "We need to find students who do not participate in any activities, so we will use a subquery to find all student IDs that are present in the 'Participates_in' table.", "The subquery will select all 'stuid' from the 'Participates_in' table, which represents students who are participating in activities.", "The main query will select 'StuID' from the 'Student' table where the 'StuID' is not in the list of student IDs returned by the subquery."], "pred_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT stuid FROM Participates_in);", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["student", "participates_in"]}
{"sample_id": 6788, "db_id": "activity_1", "question": "What are the ids of the students who are not involved in any activity", "rationale": ["Identify the table that contains student information, which is the 'Student' table.", "We need to find students who are not involved in any activity, so we will look for students whose IDs are not present in the 'Participates_in' table.", "The 'Participates_in' table contains the 'stuid' column, which represents the IDs of students participating in activities.", "We will use a subquery to select all 'stuid' from 'Participates_in' and then use the NOT IN clause to filter out those students from the 'Student' table."], "pred_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT stuid FROM Participates_in)", "gold_sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "source_tables": ["student", "participates_in"]}
{"sample_id": 6789, "db_id": "activity_1", "question": "Show the ids for all the students who participate in an activity and are under 20.", "rationale": ["Identify the relevant tables: Participates_in (for student participation) and Student (for student details).", "Determine the condition: We need students who are under 20 years old.", "Use a subquery to find all student IDs (StuID) from the Student table where Age < 20.", "Join this subquery with the Participates_in table to get the student IDs (stuid) of those who participate in activities."], "pred_sql": "SELECT stuid FROM Participates_in WHERE stuid IN (SELECT StuID FROM Student WHERE Age < 20)", "gold_sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["student", "participates_in"]}
{"sample_id": 6790, "db_id": "activity_1", "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.", "rationale": ["Identify the relevant tables: We need to look at the 'Participates_in' table to find students involved in activities and the 'Student' table to filter students by age.", "Determine the condition for age: We need to filter students who are under 20 years old, which means we will use the condition 's.Age < 20'.", "Join the tables: We will join the 'Participates_in' table with the 'Student' table on the student ID to get the necessary information about the students involved in activities.", "Select distinct student IDs: Since we want the unique IDs of students involved in at least one activity, we will use 'SELECT DISTINCT p.stuid' to avoid duplicates."], "pred_sql": "SELECT DISTINCT p.stuid FROM Participates_in p JOIN Student s ON p.stuid = s.StuID WHERE s.Age < 20;", "gold_sql": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20", "source_tables": ["student", "participates_in"]}
{"sample_id": 6791, "db_id": "activity_1", "question": "What is the first and last name of the student participating in the most activities?", "rationale": ["Identify the relevant tables: We need information from the Student and Participates_in tables.", "We need to join the Student table with the Participates_in table on the student ID (StuID).", "We want to count the number of activities each student participates in, so we will group the results by student ID.", "To find the student participating in the most activities, we will order the results by the count of activities in descending order.", "Finally, we will limit the results to only the top entry to get the student with the most participation."], "pred_sql": "SELECT S.Fname, S.LName\nFROM Student S\nJOIN Participates_in P ON S.StuID = P.stuid\nGROUP BY S.StuID\nORDER BY COUNT(P.actid) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "participates_in"]}
{"sample_id": 6792, "db_id": "activity_1", "question": "Tell me the first and last name of the student who has the most activities.", "rationale": ["Identify the relevant tables: We need to get student names and their participation in activities, so we will use the Student and Participates_in tables.", "Determine the columns needed: We need the first name (Fname) and last name (LName) of the student.", "Join the tables: We will join the Student table with the Participates_in table on the student ID (StuID) to link students with their activities.", "Group the results: We will group the results by student ID to count the number of activities each student participates in.", "Order the results: We will order the results by the count of activities in descending order to find the student with the most activities.", "Limit the results: We will limit the results to 1 to get only the student with the most activities."], "pred_sql": "SELECT S.Fname, S.LName\nFROM Student S\nJOIN Participates_in P ON S.StuID = P.stuid\nGROUP BY S.StuID\nORDER BY COUNT(P.actid) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["student", "participates_in"]}
{"sample_id": 6793, "db_id": "activity_1", "question": "What is the name of the activity with the most students?", "rationale": ["Identify the table that contains the activity names, which is the 'Activity' table.", "We need to find the activity with the most students participating, so we will look at the 'Participates_in' table to count the number of students for each activity.", "We will group the results by 'actid' in the 'Participates_in' table to count how many students are associated with each activity.", "We will order the grouped results by the count of students in descending order to get the activity with the most students at the top.", "We will limit the results to 1 to get only the top activity.", "Finally, we will select the 'activity_name' from the 'Activity' table where the 'actid' matches the one with the most students."], "pred_sql": "SELECT activity_name FROM Activity WHERE actid = (SELECT actid FROM Participates_in GROUP BY actid ORDER BY COUNT(stuid) DESC LIMIT 1)", "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "participates_in"]}
{"sample_id": 6794, "db_id": "activity_1", "question": "Find the name of the activity that has the largest number of student participants.", "rationale": ["Identify the table that contains the activity names, which is the 'Activity' table.", "Determine the relationship between students and activities, which is represented in the 'Participates_in' table.", "To find the activity with the largest number of student participants, we need to count the number of students (stuid) for each activity (actid) in the 'Participates_in' table.", "Group the results by actid to get the count of participants for each activity.", "Order the grouped results in descending order based on the count of participants to get the activity with the most participants at the top.", "Limit the results to 1 to get only the activity with the largest number of participants.", "Finally, select the activity_name from the 'Activity' table where the actid matches the one with the largest count from the previous step."], "pred_sql": "SELECT activity_name FROM Activity WHERE actid = (SELECT actid FROM Participates_in GROUP BY actid ORDER BY COUNT(stuid) DESC LIMIT 1)", "gold_sql": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1", "source_tables": ["activity", "participates_in"]}
{"sample_id": 6795, "db_id": "activity_1", "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.", "rationale": ["Identify the tables involved: Faculty, Faculty_Participates_in, and Activity.", "We need to retrieve the first names of faculty members, so we will select the 'Fname' column from the Faculty table.", "To find out which faculty members are participating in Canoeing or Kayaking, we need to join the Faculty table with the Faculty_Participates_in table on the 'FacID' column.", "Next, we join the Faculty_Participates_in table with the Activity table on the 'actid' column to access the activity names.", "We will filter the results to include only those activities that are either 'Canoeing' or 'Kayaking' using a WHERE clause with the IN operator."], "pred_sql": "SELECT Faculty.Fname FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Activity ON Faculty_Participates_in.actid = Activity.actid WHERE Activity.activity_name IN ('Canoeing', 'Kayaking');", "gold_sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6796, "db_id": "activity_1", "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.", "rationale": ["Identify the relevant tables: Faculty, Faculty_Participates_in, and Activity.", "We need to find faculty members who participate in specific activities, so we will join Faculty with Faculty_Participates_in on the FacID.", "Next, we will join the result with the Activity table on actid to access the activity names.", "We will filter the results to include only those activities that are either 'Canoeing' or 'Kayaking'.", "Finally, we will select the first names of the faculty members from the Faculty table."], "pred_sql": "SELECT Faculty.Fname FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Activity ON Faculty_Participates_in.actid = Activity.actid WHERE Activity.activity_name IN ('Canoeing', 'Kayaking');", "gold_sql": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6797, "db_id": "activity_1", "question": "Find the first names of professors who are not playing Canoeing or Kayaking.", "rationale": ["Identify the relevant tables: Faculty and Faculty_Participates_in.", "We need to find faculty members who are not participating in specific activities (Canoeing and Kayaking).", "First, we need to find the activity IDs for Canoeing and Kayaking from the Activity table.", "Next, we will find the faculty IDs from the Faculty_Participates_in table that correspond to these activity IDs.", "Finally, we will select the first names of faculty members from the Faculty table whose IDs are not in the list of faculty IDs obtained in the previous step."], "pred_sql": "SELECT Fname FROM Faculty WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in WHERE actid IN (SELECT actid FROM Activity WHERE activity_name IN ('Canoeing', 'Kayaking')));", "gold_sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6798, "db_id": "activity_1", "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?", "rationale": ["Identify the relevant table for faculty members, which is the Faculty table.", "We need to select the first names of faculty members, so we will select the 'Fname' column from the Faculty table.", "We need to filter out faculty members who participate in either 'Canoeing' or 'Kayaking'.", "To do this, we will use a subquery to find the 'FacID' of faculty members who participate in these activities.", "The subquery will first find the 'actid' of the activities 'Canoeing' and 'Kayaking' from the Activity table.", "Then, we will use these 'actid' values to find the corresponding 'FacID' in the Faculty_Participates_in table.", "Finally, we will use the NOT IN clause to exclude these 'FacID' values from our main query, ensuring we only get faculty who do not participate in these activities."], "pred_sql": "SELECT Fname FROM Faculty WHERE FacID NOT IN (SELECT FacID FROM Faculty_Participates_in WHERE actid IN (SELECT actid FROM Activity WHERE activity_name IN ('Canoeing', 'Kayaking')));", "gold_sql": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6799, "db_id": "activity_1", "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.", "rationale": ["Identify the tables involved: Faculty, Faculty_Participates_in, and Activity.", "We need to find faculty members, so we will select the 'Fname' column from the Faculty table.", "To find out which faculty members participate in specific activities, we need to join the Faculty table with the Faculty_Participates_in table on the 'FacID' column.", "Next, we join the Faculty_Participates_in table with the Activity table on the 'actid' column to access the activity names.", "We filter the results to include only those activities that are either 'Canoeing' or 'Kayaking' using the WHERE clause with the IN operator."], "pred_sql": "SELECT Faculty.Fname FROM Faculty JOIN Faculty_Participates_in ON Faculty.FacID = Faculty_Participates_in.FacID JOIN Activity ON Faculty_Participates_in.actid = Activity.actid WHERE Activity.activity_name IN ('Canoeing', 'Kayaking');", "gold_sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6800, "db_id": "activity_1", "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?", "rationale": ["Identify the tables needed: Faculty, Faculty_Participates_in, and Activity.", "We need to find faculty members who participate in both Canoeing and Kayaking, so we will join Faculty with Faculty_Participates_in on FacID and then join with Activity on actid.", "We will filter the activities to only include 'Canoeing' and 'Kayaking' using a WHERE clause.", "To ensure we only get faculty members who participate in both activities, we will group the results by faculty first names and use HAVING to count the distinct activity names, ensuring it equals 2."], "pred_sql": "SELECT DISTINCT f.Fname \nFROM Faculty f \nJOIN Faculty_Participates_in fpi ON f.FacID = fpi.FacID \nJOIN Activity a ON fpi.actid = a.actid \nWHERE a.activity_name IN ('Canoeing', 'Kayaking') \nGROUP BY f.Fname \nHAVING COUNT(DISTINCT a.activity_name) = 2;", "gold_sql": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'", "source_tables": ["activity", "faculty", "faculty_participates_in"]}
{"sample_id": 6801, "db_id": "activity_1", "question": "Find the ids of the students who participate in Canoeing and Kayaking.", "rationale": ["Identify the tables involved: We need to find student IDs from the Participates_in table and the activity names from the Activity table.", "Determine the relationship: The Participates_in table has a foreign key actid that links to the Activity table's actid, allowing us to join these tables.", "Specify the criteria: We are looking for students who participate in specific activities, namely 'Canoeing' and 'Kayaking'.", "Construct the SQL query: Use a SELECT statement to retrieve the student IDs from the Participates_in table, joining it with the Activity table to filter by the specified activity names."], "pred_sql": "SELECT p.stuid FROM Participates_in p JOIN Activity a ON p.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking');", "gold_sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "source_tables": ["activity", "participates_in"]}
{"sample_id": 6802, "db_id": "activity_1", "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.", "rationale": ["Identify the activities of interest: Canoeing and Kayaking.", "To find students participating in both activities, we need to query the Participates_in table and join it with the Activity table to filter by activity names.", "First, create a subquery to select student IDs (stuid) for students participating in Canoeing.", "Next, create another subquery to select student IDs for students participating in Kayaking.", "Use the INTERSECT operator to find student IDs that appear in both subqueries, indicating they participate in both activities."], "pred_sql": "SELECT p1.stuid FROM Participates_in p1 JOIN Activity a1 ON p1.actid = a1.actid WHERE a1.activity_name = 'Canoeing' INTERSECT SELECT p2.stuid FROM Participates_in p2 JOIN Activity a2 ON p2.actid = a2.actid WHERE a2.activity_name = 'Kayaking';", "gold_sql": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'", "source_tables": ["activity", "participates_in"]}
{"sample_id": 6803, "db_id": "flight_4", "question": "Find the name of the airport in the city of Goroka.", "rationale": ["Identify the table that contains airport information, which is the 'airports' table.", "Determine the column that holds the name of the airport, which is 'name'.", "Identify the column that specifies the city, which is 'city'.", "Construct the SQL query to select the 'name' from the 'airports' table where the 'city' is 'Goroka'."], "pred_sql": "SELECT name FROM airports WHERE city = 'Goroka';", "gold_sql": "SELECT name FROM airports WHERE city  =  'Goroka'", "source_tables": ["airports"]}
{"sample_id": 6804, "db_id": "flight_4", "question": "What are the names of the airports in the city of Goroka?", "rationale": ["Identify the relevant table: The query is asking for airport names, which are stored in the 'airports' table.", "Determine the specific column needed: We need the 'name' column from the 'airports' table.", "Apply the filter condition: The query specifies that we are interested in airports located in the city of 'Goroka'.", "Construct the SQL SELECT statement: We will select the 'name' column from the 'airports' table where the 'city' is 'Goroka'."], "pred_sql": "SELECT name FROM airports WHERE city = 'Goroka';", "gold_sql": "SELECT name FROM airports WHERE city  =  'Goroka'", "source_tables": ["airports"]}
{"sample_id": 6805, "db_id": "flight_4", "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "rationale": ["Identify the relevant table: The airports table contains the information about airports including their name, city, country, and elevation.", "Determine the columns needed: We need the name, city, country, and elevation of the airports.", "Specify the condition: We want to filter the results to only include airports located in the city of New York.", "Construct the SQL query: Use a SELECT statement to retrieve the specified columns from the airports table with a WHERE clause to filter by city."], "pred_sql": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York';", "gold_sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "source_tables": ["airports"]}
{"sample_id": 6806, "db_id": "flight_4", "question": "What is the name, city, country, and elevation for every airport in the city of New York?", "rationale": ["Identify the table that contains the required information: The 'airports' table has the columns we need: name, city, country, and elevation.", "Determine the filtering condition: We need to filter the results to only include airports located in the city of New York.", "Construct the SQL SELECT statement: We will select the columns name, city, country, and elevation from the airports table.", "Add the WHERE clause to filter by city: We will specify that the city must be 'New York'."], "pred_sql": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York';", "gold_sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "source_tables": ["airports"]}
{"sample_id": 6807, "db_id": "flight_4", "question": "How many airlines are there?", "rationale": ["Identify the table that contains information about airlines, which is the 'airlines' table.", "To find out how many airlines there are, we need to count the number of entries in the 'airlines' table.", "Use the COUNT() function to count the total number of rows in the 'airlines' table.", "Construct the SQL query to select the count from the 'airlines' table."], "pred_sql": "SELECT COUNT(*) AS airline_count FROM airlines;", "gold_sql": "SELECT count(*) FROM airlines", "source_tables": ["airlines"]}
{"sample_id": 6808, "db_id": "flight_4", "question": "What is the total number of airlines?", "rationale": ["Identify the table that contains information about airlines, which is the 'airlines' table.", "To find the total number of airlines, we need to count the number of entries in the 'airlines' table.", "Use the COUNT() function to get the total number of rows in the 'airlines' table.", "Construct the SQL query to select the count from the 'airlines' table."], "pred_sql": "SELECT COUNT(*) AS total_airlines FROM airlines;", "gold_sql": "SELECT count(*) FROM airlines", "source_tables": ["airlines"]}
{"sample_id": 6809, "db_id": "flight_4", "question": "How many airlines does Russia has?", "rationale": ["Identify the relevant table: The question pertains to the number of airlines, so we will focus on the 'airlines' table.", "Determine the condition: We need to filter the airlines based on the country, which is 'Russia'.", "Count the distinct airlines: We will use the COUNT function to count the unique airline IDs (alid) to avoid duplicates.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter by country."], "pred_sql": "SELECT COUNT(DISTINCT a.alid) AS airline_count FROM airlines a WHERE a.country = 'Russia';", "gold_sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "source_tables": ["airlines"]}
{"sample_id": 6810, "db_id": "flight_4", "question": "What is the number of airlines based in Russia?", "rationale": ["Identify the relevant table: The query is asking about airlines, so we will use the 'airlines' table.", "Determine the condition: We need to filter the airlines based on their country, which is 'Russia'.", "Construct the SQL query: We will use the COUNT function to count the number of airlines that meet the condition."], "pred_sql": "SELECT COUNT(*) AS number_of_airlines FROM airlines WHERE country = 'Russia';", "gold_sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "source_tables": ["airlines"]}
{"sample_id": 6811, "db_id": "flight_4", "question": "What is the maximum elevation of all airports in the country of Iceland?", "rationale": ["Identify the table that contains the elevation data, which is the 'airports' table.", "Determine the column that holds the elevation information, which is 'elevation'.", "We need to find the maximum elevation, so we will use the MAX() function.", "We need to filter the results to only include airports located in Iceland, so we will add a WHERE clause that specifies the country as 'Iceland'.", "Combine all these elements to form the final SQL query."], "pred_sql": "SELECT MAX(elevation) AS max_elevation FROM airports WHERE country = 'Iceland';", "gold_sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "source_tables": ["airports"]}
{"sample_id": 6812, "db_id": "flight_4", "question": "What is the highest elevation of an airport in the country of Iceland?", "rationale": ["Identify the relevant table: The 'airports' table contains the elevation data.", "Determine the required information: We need the highest elevation, which can be found using the MAX() function.", "Filter the results: We only want airports located in Iceland, so we will add a WHERE clause to filter by country.", "Construct the SQL query: Combine the SELECT statement with the MAX() function and the WHERE clause to get the desired result."], "pred_sql": "SELECT MAX(elevation) AS highest_elevation FROM airports WHERE country = 'Iceland';", "gold_sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "source_tables": ["airports"]}
{"sample_id": 6813, "db_id": "flight_4", "question": "Find the name of the airports located in Cuba or Argentina.", "rationale": ["Identify the relevant table: airports, which contains information about airport names and their corresponding countries.", "Determine the columns needed: we need the 'name' column for the airport names.", "Filter the results based on the country: we want airports located in either Cuba or Argentina.", "Construct the SQL query using a SELECT statement to retrieve the 'name' from the 'airports' table where the 'country' is either 'Cuba' or 'Argentina'."], "pred_sql": "SELECT name FROM airports WHERE country IN ('Cuba', 'Argentina');", "gold_sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "source_tables": ["airports"]}
{"sample_id": 6814, "db_id": "flight_4", "question": "What are the names of all airports in Cuba or Argentina?", "rationale": ["Identify the relevant table: airports, which contains the airport names and their corresponding countries.", "Determine the columns needed: we need the 'name' column for airport names.", "Filter the results based on the country: we want airports located in either Cuba or Argentina.", "Construct the SQL query using a SELECT statement to retrieve the names of the airports where the country is either 'Cuba' or 'Argentina'."], "pred_sql": "SELECT name FROM airports WHERE country IN ('Cuba', 'Argentina');", "gold_sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "source_tables": ["airports"]}
{"sample_id": 6815, "db_id": "flight_4", "question": "Find the country of the airlines whose name starts with 'Orbit'.", "rationale": ["Identify the table that contains the airline names and their corresponding countries, which is the 'airlines' table.", "To find airlines whose names start with 'Orbit', we will use the SQL 'LIKE' operator with a wildcard '%' to match any characters following 'Orbit'.", "The query will select the 'country' column from the 'airlines' table where the 'name' column matches the specified pattern."], "pred_sql": "SELECT airlines.country FROM airlines WHERE airlines.name LIKE 'Orbit%';", "gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "source_tables": ["airlines"]}
{"sample_id": 6816, "db_id": "flight_4", "question": "What are the countries of all airlines whose names start with Orbit?", "rationale": ["Identify the table that contains the airline names and their corresponding countries, which is the 'airlines' table.", "We need to select the 'country' column from the 'airlines' table.", "To filter the airlines whose names start with 'Orbit', we will use the SQL LIKE operator with the pattern 'Orbit%'.", "Using DISTINCT ensures that we only get unique country names in the result."], "pred_sql": "SELECT DISTINCT airlines.country FROM airlines WHERE airlines.name LIKE 'Orbit%';", "gold_sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "source_tables": ["airlines"]}
{"sample_id": 6817, "db_id": "flight_4", "question": "Find the name of airports whose altitude is between -50 and 50.", "rationale": ["Identify the table that contains the relevant data: the 'airports' table has the 'elevation' column.", "Determine the condition for filtering: we need airports with an elevation between -50 and 50.", "Construct the SQL SELECT statement to retrieve the 'name' of the airports that meet the elevation criteria.", "Use the WHERE clause to specify the elevation condition using the BETWEEN operator."], "pred_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;", "gold_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "source_tables": ["airports"]}
{"sample_id": 6818, "db_id": "flight_4", "question": "What are the names of all airports whose elevation is between -50 and 50?", "rationale": ["Identify the table that contains the information about airports, which is the 'airports' table.", "Determine the relevant column that contains the elevation data, which is 'elevation'.", "Specify the condition for the elevation to be between -50 and 50 using the SQL BETWEEN operator.", "Select the 'name' column from the 'airports' table to get the names of the airports that meet the elevation criteria."], "pred_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50;", "gold_sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "source_tables": ["airports"]}
{"sample_id": 6819, "db_id": "flight_4", "question": "Which country is the airport that has the highest altitude located in?", "rationale": ["Identify the relevant table: The query involves airports, so we will use the 'airports' table.", "Determine the required information: We need to find the country of the airport with the highest elevation.", "Find the maximum elevation: We will use a subquery to find the maximum elevation from the 'airports' table.", "Select the country: We will select the 'country' column from the 'airports' table where the elevation matches the maximum elevation found in the subquery."], "pred_sql": "SELECT country FROM airports WHERE elevation = (SELECT MAX(elevation) FROM airports);", "gold_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}
{"sample_id": 6820, "db_id": "flight_4", "question": "What is the country of the airport with the highest elevation?", "rationale": ["Identify the relevant table: The query is about airports, so we will use the 'airports' table.", "Determine the required information: We need the 'country' of the airport with the highest 'elevation'.", "Find the maximum elevation: We will use a subquery to find the maximum elevation from the 'airports' table.", "Construct the main query: We will select the 'country' from the 'airports' table where the 'elevation' matches the maximum elevation found in the subquery."], "pred_sql": "SELECT country FROM airports WHERE elevation = (SELECT MAX(elevation) FROM airports);", "gold_sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}
{"sample_id": 6821, "db_id": "flight_4", "question": "Find the number of airports whose name contain the word 'International'.", "rationale": ["Identify the table that contains airport names, which is the 'airports' table.", "Determine the requirement to count the number of airports, which suggests using the COUNT() function.", "Use a WHERE clause to filter the airports based on the condition that their name contains the word 'International'.", "The SQL LIKE operator is used with wildcards (%) to match any sequence of characters before and after 'International'.", "Construct the final SQL query to select the count of airports that meet the specified condition."], "pred_sql": "SELECT COUNT(*) AS airport_count FROM airports WHERE name LIKE '%International%';", "gold_sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "source_tables": ["airports"]}
{"sample_id": 6822, "db_id": "flight_4", "question": "How many airports' names have the word Interanation in them?", "rationale": ["Identify the table that contains airport names, which is the 'airports' table.", "To find names containing a specific word, we will use the SQL 'LIKE' operator with wildcards.", "The word we are looking for is 'Interanation', so we will use '%Interanation%' to match any names that contain this word.", "We need to count the number of matching records, so we will use the 'COUNT' function in SQL.", "The final SQL query will select the count of airport names from the 'airports' table where the name matches the specified pattern."], "pred_sql": "SELECT COUNT(name) AS airport_count FROM airports WHERE name LIKE '%Interanation%';", "gold_sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "source_tables": ["airports"]}
{"sample_id": 6823, "db_id": "flight_4", "question": "How many different cities do have some airport in the country of Greenland?", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their cities and countries.", "Determine the condition: We need to filter the airports to only those located in Greenland.", "Count distinct cities: We want to count the number of different cities that have at least one airport in Greenland.", "Construct the SQL query: Use SELECT with COUNT(DISTINCT city) to get the number of unique cities, and apply a WHERE clause to filter by country."], "pred_sql": "SELECT COUNT(DISTINCT city) AS different_cities FROM airports WHERE country = 'Greenland';", "gold_sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "source_tables": ["airports"]}
{"sample_id": 6824, "db_id": "flight_4", "question": "In how many cities are there airports in the country of Greenland?", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city and country.", "Determine the condition: We need to filter the airports based on the country, which is 'Greenland'.", "Count distinct cities: We want to count the number of unique cities that have airports in Greenland, so we will use COUNT(DISTINCT city).", "Construct the SQL query: Combine the SELECT statement with the WHERE clause to filter by country."], "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE country = 'Greenland';", "gold_sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "source_tables": ["airports"]}
{"sample_id": 6825, "db_id": "flight_4", "question": "Find the number of routes operated by American Airlines.", "rationale": ["Identify the table that contains the relevant data: the 'routes' table.", "Determine the specific information needed: the number of routes operated by American Airlines.", "Use the COUNT() function to count the number of routes.", "Add a WHERE clause to filter the results to only include routes operated by 'American Airlines'."], "pred_sql": "SELECT COUNT(*) AS number_of_routes FROM routes WHERE airline = 'American Airlines';", "gold_sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}
{"sample_id": 6826, "db_id": "flight_4", "question": "How many routes does American Airlines operate?", "rationale": ["Identify the relevant table: The 'routes' table contains information about the routes operated by airlines.", "Determine the specific airline: The query asks for routes operated by 'American Airlines'.", "Count the number of routes: Use the COUNT() function to count the number of entries in the 'routes' table where the airline is 'American Airlines'.", "Construct the SQL query: Combine the elements into a complete SQL statement that selects the count of routes for 'American Airlines'."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes WHERE airline = 'American Airlines';", "gold_sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}
{"sample_id": 6827, "db_id": "flight_4", "question": "Find the number of routes whose destination airports are in Canada.", "rationale": ["Identify the requirement: We need to count the number of routes with destination airports in Canada.", "Understand the schema: The 'routes' table contains information about routes, and the 'airports' table contains information about airports, including their country.", "To find the routes with destination airports in Canada, we need to join the 'routes' table with the 'airports' table on the destination airport ID ('dst_apid' in 'routes' and 'apid' in 'airports').", "We will filter the results to include only those rows where the country in the 'airports' table is 'Canada'.", "Finally, we will use the COUNT() function to count the number of routes that meet this condition."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes r JOIN airports a ON r.dst_apid = a.apid WHERE a.country = 'Canada';", "gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "source_tables": ["airports", "routes"]}
{"sample_id": 6828, "db_id": "flight_4", "question": "How many routes end in a Canadian airport?", "rationale": ["Identify the relevant tables: 'routes' for route information and 'airports' for airport details.", "We need to count the number of routes that end in a Canadian airport, so we will focus on the destination airport information in the 'routes' table.", "Join the 'routes' table with the 'airports' table on the destination airport ID ('dst_apid' in 'routes' and 'apid' in 'airports').", "Filter the results to include only those airports located in Canada by checking the 'country' column in the 'airports' table.", "Use the COUNT() function to count the number of routes that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes r JOIN airports a ON r.dst_apid = a.apid WHERE a.country = 'Canada';", "gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "source_tables": ["airports", "routes"]}
{"sample_id": 6829, "db_id": "flight_4", "question": "Find the name, city, and country of the airport that has the lowest altitude.", "rationale": ["Identify the relevant table: 'airports' contains the information about airports including their elevation.", "Select the columns needed: 'name', 'city', and 'country' are the required fields to be retrieved.", "Order the results by 'elevation' in ascending order to find the airport with the lowest altitude.", "Limit the results to 1 to get only the airport with the lowest altitude."], "pred_sql": "SELECT name, city, country FROM airports ORDER BY elevation ASC LIMIT 1;", "gold_sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "source_tables": ["airports"]}
{"sample_id": 6830, "db_id": "flight_4", "question": "What is the name, city, and country of the airport with the lowest altitude?", "rationale": ["Identify the relevant table: The query requires information about airports, so we will use the 'airports' table.", "Determine the required columns: We need to select the 'name', 'city', and 'country' of the airport.", "Find the airport with the lowest altitude: This can be done by ordering the results by the 'elevation' column in ascending order.", "Limit the results to one: Since we only want the airport with the lowest altitude, we will use 'LIMIT 1' to get a single result."], "pred_sql": "SELECT name, city, country FROM airports ORDER BY elevation ASC LIMIT 1;", "gold_sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "source_tables": ["airports"]}
{"sample_id": 6831, "db_id": "flight_4", "question": "Find the name, city, and country of the airport that has the highest latitude.", "rationale": ["Identify the relevant table: airports, which contains information about airports including their location.", "Determine the column that represents latitude: in the schema, the 'y' column represents the latitude of the airport.", "To find the airport with the highest latitude, we need to sort the results by the 'y' column in descending order.", "Limit the results to 1 to get only the airport with the highest latitude.", "Construct the SQL query to select the 'name', 'city', and 'country' columns from the airports table, ordering by 'y' in descending order and limiting the result to 1."], "pred_sql": "SELECT name, city, country FROM airports ORDER BY y DESC LIMIT 1;", "gold_sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}
{"sample_id": 6832, "db_id": "flight_4", "question": "What is the name, city, and country of the airport with the highest elevation?", "rationale": ["Identify the relevant table: airports, which contains information about airports including their elevation.", "Determine the columns needed: name, city, and country of the airport.", "To find the airport with the highest elevation, we need to use a subquery to get the maximum elevation from the airports table.", "The main query will select the name, city, and country from the airports table where the elevation matches the maximum elevation found in the subquery."], "pred_sql": "SELECT name, city, country FROM airports WHERE elevation = (SELECT MAX(elevation) FROM airports);", "gold_sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "source_tables": ["airports"]}
{"sample_id": 6833, "db_id": "flight_4", "question": "Find the name and city of the airport which is the destination of the most number of routes.", "rationale": ["Identify the relevant tables: 'airports' for airport details and 'routes' for route information.", "We need to find the destination airport, so we will join the 'airports' table with the 'routes' table on the destination airport ID ('dst_apid').", "We want to count the number of routes for each destination airport, so we will use the COUNT function and group the results by the airport ID from the 'airports' table.", "To find the airport with the most routes, we will order the results in descending order based on the count of routes.", "Finally, we will limit the results to only the top entry to get the destination airport with the most routes."], "pred_sql": "SELECT airports.name, airports.city \nFROM airports \nJOIN routes ON airports.apid = routes.dst_apid \nGROUP BY airports.apid \nORDER BY COUNT(routes.rid) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6834, "db_id": "flight_4", "question": "What is the name and city of the airport that the most routes end at?", "rationale": ["Identify the relevant tables: We need to get information from the 'airports' table for airport names and cities, and from the 'routes' table to count the number of routes ending at each airport.", "Join the 'airports' table with the 'routes' table on the destination airport ID (dst_apid) to link routes to their respective airports.", "Group the results by airport ID, name, and city to aggregate the count of routes for each airport.", "Count the number of routes for each airport using COUNT(routes.rid).", "Order the results in descending order based on the count of routes to find the airport with the most routes ending at it.", "Limit the results to 1 to get only the airport with the highest count."], "pred_sql": "SELECT airports.name, airports.city\nFROM airports\nJOIN routes ON airports.apid = routes.dst_apid\nGROUP BY airports.apid, airports.name, airports.city\nORDER BY COUNT(routes.rid) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6835, "db_id": "flight_4", "question": "Find the names of the top 10 airlines that operate the most number of routes.", "rationale": ["Identify the relevant table: The 'routes' table contains information about the routes and the associated airlines.", "Determine the required information: We need the names of the airlines and the count of routes they operate.", "Use the COUNT() function to count the number of routes for each airline.", "Group the results by airline name to aggregate the route counts.", "Order the results in descending order based on the route count to get the top airlines.", "Limit the results to the top 10 airlines."], "pred_sql": "SELECT airline, COUNT(*) AS route_count FROM routes GROUP BY airline ORDER BY route_count DESC LIMIT 10;", "gold_sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "source_tables": ["routes", "airlines"]}
{"sample_id": 6836, "db_id": "flight_4", "question": "For the airline ids with the top 10 most routes operated, what are their names?", "rationale": ["Identify the relevant tables: 'routes' for route information and 'airlines' for airline names.", "We need to count the number of routes operated by each airline, so we will use the COUNT() function on the 'rid' column from the 'routes' table.", "To get the airline names, we will join the 'routes' table with the 'airlines' table on the 'alid' column.", "We will group the results by 'routes.alid' to aggregate the route counts for each airline.", "To find the top 10 airlines with the most routes, we will order the results in descending order based on the route count and limit the results to 10."], "pred_sql": "SELECT airline, COUNT(rid) AS route_count\nFROM routes\nJOIN airlines ON routes.alid = airlines.alid\nGROUP BY routes.alid\nORDER BY route_count DESC\nLIMIT 10;", "gold_sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "source_tables": ["routes", "airlines"]}
{"sample_id": 6837, "db_id": "flight_4", "question": "Find the name and city of the airport which is the source for the most number of flight routes.", "rationale": ["Identify the relevant tables: 'airports' for airport details and 'routes' for flight routes.", "We need to find the source airport with the most flight routes, so we will join the 'airports' table with the 'routes' table on the source airport ID ('src_apid').", "We will group the results by the airport ID ('apid') to count the number of routes for each source airport.", "To find the airport with the most routes, we will order the results by the count of routes in descending order.", "Finally, we will limit the results to only the top entry to get the source airport with the most routes."], "pred_sql": "SELECT airports.name, airports.city \nFROM airports \nJOIN routes ON airports.apid = routes.src_apid \nGROUP BY airports.apid \nORDER BY COUNT(routes.rid) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6838, "db_id": "flight_4", "question": "What is the name and city of the airport from most of the routes start?", "rationale": ["Identify the relevant tables: We need information from the 'airports' table for airport names and cities, and from the 'routes' table to determine where the routes start.", "Determine the relationship: The 'src_apid' in the 'routes' table corresponds to the 'apid' in the 'airports' table, allowing us to join these tables.", "Select the required fields: We need to select the airport name and city from the 'airports' table.", "Group the results: To find the airport from which most routes start, we need to group the results by the airport ID ('apid').", "Count the routes: We will count the number of routes for each airport to determine which one has the most.", "Order the results: We will order the results in descending order based on the count of routes.", "Limit the results: Since we only want the airport with the most routes, we will limit the results to 1."], "pred_sql": "SELECT airports.name, airports.city\nFROM airports\nJOIN routes ON airports.apid = routes.src_apid\nGROUP BY airports.apid\nORDER BY COUNT(routes.rid) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6839, "db_id": "flight_4", "question": "Find the number of different airports which are the destinations of the American Airlines.", "rationale": ["Identify the relevant table: We need to find information about routes and airlines, so we will use the 'routes' and 'airlines' tables.", "Determine the condition: We are interested in routes operated by 'American Airlines'.", "Find the airline ID: We will first query the 'airlines' table to get the 'alid' for 'American Airlines'.", "Count distinct destination airports: We will count the distinct 'dst_apid' in the 'routes' table where the 'alid' matches the one we found for 'American Airlines'.", "Construct the SQL query: Combine these steps into a single SQL query that counts the distinct destination airports for the specified airline."], "pred_sql": "SELECT COUNT(DISTINCT dst_apid) AS num_dest_airports \nFROM routes \nWHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines')", "gold_sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}
{"sample_id": 6840, "db_id": "flight_4", "question": "What is the number of different different airports that are destinations for American Airlines?", "rationale": ["Identify the airline of interest, which is American Airlines.", "Find the unique identifier (alid) for American Airlines from the airlines table.", "Count the distinct destination airport IDs (dst_apid) in the routes table where the airline ID matches the alid of American Airlines."], "pred_sql": "SELECT COUNT(DISTINCT dst_apid) AS num_dest_airports FROM routes WHERE alid = (SELECT alid FROM airlines WHERE name = 'American Airlines')", "gold_sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "source_tables": ["routes", "airlines"]}
{"sample_id": 6841, "db_id": "flight_4", "question": "Which countries has the most number of airlines?", "rationale": ["Identify the relevant table: The 'airlines' table contains information about airlines, including their country of origin.", "Determine the required information: We need to count the number of airlines per country.", "Use the COUNT() function to count the number of airlines for each country.", "Group the results by country using GROUP BY clause to aggregate the counts per country.", "Order the results in descending order based on the count of airlines using ORDER BY clause."], "pred_sql": "SELECT country, COUNT(*) AS airline_count FROM airlines GROUP BY country ORDER BY airline_count DESC;", "gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}
{"sample_id": 6842, "db_id": "flight_4", "question": "What is the name of the country with the most number of home airlines?", "rationale": ["Identify the relevant table: The 'airlines' table contains information about airlines, including their country and active status.", "Filter for active airlines: We only want to count airlines that are currently active, so we will add a WHERE clause to filter for active airlines (active = 1).", "Group by country: To find the number of airlines per country, we will use the GROUP BY clause on the 'country' column.", "Count the number of airlines: We will use the COUNT function to count the number of airlines in each country.", "Order by the count: To find the country with the most airlines, we will order the results in descending order based on the count of airlines.", "Limit the results: Since we only want the country with the most airlines, we will limit the results to 1."], "pred_sql": "SELECT country, COUNT(*) as airline_count FROM airlines WHERE active = 1 GROUP BY country ORDER BY airline_count DESC LIMIT 1;", "gold_sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}
{"sample_id": 6843, "db_id": "flight_4", "question": "Which countries has the most number of airlines whose active status is 'Y'?", "rationale": ["Identify the relevant table: The 'airlines' table contains information about airlines, including their active status and country.", "Filter the airlines: We need to select only those airlines that have an active status of 'Y'.", "Group the results: To find out how many airlines are in each country, we will group the results by the 'country' column.", "Count the airlines: For each country, we will count the number of active airlines using COUNT(*).", "Order the results: Finally, we will order the results in descending order based on the count of airlines to find out which countries have the most active airlines."], "pred_sql": "SELECT country, COUNT(*) AS airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count DESC;", "gold_sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}
{"sample_id": 6844, "db_id": "flight_4", "question": "What are the countries with the most airlines whose active status is Y?", "rationale": ["Identify the relevant table: The 'airlines' table contains information about airlines, including their active status and country.", "Filter the airlines based on active status: We need to select only those airlines where the 'active' column is 'Y'.", "Group the results by country: To find the number of active airlines per country, we will use the GROUP BY clause on the 'country' column.", "Count the number of airlines per country: We will use the COUNT function to count the number of active airlines for each country.", "Order the results: To get the countries with the most active airlines, we will order the results in descending order based on the count of airlines."], "pred_sql": "SELECT country, COUNT(*) AS airline_count FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY airline_count DESC;", "gold_sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airlines"]}
{"sample_id": 6845, "db_id": "flight_4", "question": "List all countries and their number of airlines in the descending order of number of airlines.", "rationale": ["Identify the relevant table: The 'airlines' table contains information about airlines, including their country.", "Select the country and count of airlines: We need to select the 'country' column and count the number of airlines for each country.", "Group the results by country: To get the number of airlines per country, we will use the GROUP BY clause on the 'country' column.", "Order the results: We want the results in descending order based on the number of airlines, so we will use the ORDER BY clause with the COUNT result."], "pred_sql": "SELECT country, COUNT(*) AS number_of_airlines FROM airlines GROUP BY country ORDER BY number_of_airlines DESC;", "gold_sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airlines"]}
{"sample_id": 6846, "db_id": "flight_4", "question": "How many airlines operate out of each country in descending order?", "rationale": ["Identify the relevant table: The 'airlines' table contains information about airlines, including their country and active status.", "Count the number of distinct airlines: We need to count the unique airline IDs (alid) to determine how many airlines operate in each country.", "Filter for active airlines: We only want to count airlines that are currently active, so we will add a condition to filter for active airlines.", "Group the results by country: To get the count of airlines per country, we will group the results by the 'country' column.", "Order the results in descending order: Finally, we will order the results by the count of airlines in descending order to meet the requirement of the query."], "pred_sql": "SELECT airlines.country, COUNT(DISTINCT airlines.alid) AS airline_count \nFROM airlines \nWHERE airlines.active = 1 \nGROUP BY airlines.country \nORDER BY airline_count DESC;", "gold_sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airlines"]}
{"sample_id": 6847, "db_id": "flight_4", "question": "How many airports are there per country? Order the countries by decreasing number of airports.", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their country.", "Determine the required information: We need to count the number of airports per country.", "Use the COUNT() function to count the airports, and GROUP BY to group the results by country.", "Order the results in descending order based on the count of airports using ORDER BY."], "pred_sql": "SELECT country, COUNT(*) AS airport_count FROM airports GROUP BY country ORDER BY airport_count DESC;", "gold_sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airports"]}
{"sample_id": 6848, "db_id": "flight_4", "question": "What is the number of airports per country, ordered from most to least?", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their country.", "Determine the required information: We need to count the number of airports in each country.", "Use the COUNT() function to count the airports: This will give us the total number of airports per country.", "Group the results by country: This is done using the GROUP BY clause to aggregate the counts for each country.", "Order the results: We want the countries ordered from most airports to least, which is achieved using the ORDER BY clause with DESC (descending) order."], "pred_sql": "SELECT country, COUNT(apid) AS airport_count FROM airports GROUP BY country ORDER BY airport_count DESC;", "gold_sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "source_tables": ["airports"]}
{"sample_id": 6849, "db_id": "flight_4", "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city and country.", "Filter the data: We need to focus on airports located in the United States, so we will add a WHERE clause to filter by country.", "Count the airports: We will use the COUNT() function to count the number of airports for each city.", "Group the results: To get the count per city, we will use the GROUP BY clause on the city column.", "Order the results: Finally, we will order the results by the count of airports in descending order using the ORDER BY clause."], "pred_sql": "SELECT city, COUNT(*) AS airport_count FROM airports WHERE country = 'United States' GROUP BY city ORDER BY airport_count DESC;", "gold_sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "source_tables": ["airports"]}
{"sample_id": 6850, "db_id": "flight_4", "question": "How many airports are there per city in the US ordered from most to least?", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city and country.", "Filter the data: We need to focus on airports located in the United States, so we will add a WHERE clause to filter by country.", "Group the results: To count the number of airports per city, we will use the GROUP BY clause on the 'city' column.", "Count the airports: We will use the COUNT() function to count the number of airports in each city.", "Order the results: Finally, we will order the results by the count of airports in descending order to get the cities with the most airports first."], "pred_sql": "SELECT city, COUNT(*) AS airport_count FROM airports WHERE country = 'United States' GROUP BY city ORDER BY airport_count DESC;", "gold_sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "source_tables": ["airports"]}
{"sample_id": 6851, "db_id": "flight_4", "question": "Return the cities with more than 3 airports in the United States.", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city and country.", "Filter for the United States: We need to select airports where the country is 'United States'.", "Group by city: To find cities with multiple airports, we will group the results by the 'city' column.", "Count the airports: We will use the COUNT function to count the number of airports (apid) in each city.", "Filter cities with more than 3 airports: We will use the HAVING clause to filter the grouped results to only include cities that have more than 3 airports."], "pred_sql": "SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(apid) > 3;", "gold_sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "source_tables": ["airports"]}
{"sample_id": 6852, "db_id": "flight_4", "question": "What is the number of cities in the United States with more than 3 airports?", "rationale": ["Identify the relevant table: airports, which contains information about airports including their city and country.", "Filter the records to include only those airports located in the United States by using the condition `country = 'United States'`.", "Group the results by city to count the number of airports in each city using `GROUP BY city`.", "Use the `HAVING` clause to filter out cities that have 3 or fewer airports, ensuring we only count cities with more than 3 airports.", "Finally, use `COUNT(DISTINCT city)` to get the number of unique cities that meet the criteria."], "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(apid) > 3;", "gold_sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "source_tables": ["airports"]}
{"sample_id": 6853, "db_id": "flight_4", "question": "How many cities are there that have more than 3 airports?", "rationale": ["We need to count the number of distinct cities that have more than 3 airports.", "To do this, we will first group the airports by city and count the number of airports in each city.", "We will use the HAVING clause to filter out cities that have 3 or fewer airports.", "Next, we will select the distinct cities that meet this criterion.", "Finally, we will count these distinct cities to get the total number."], "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE apid IN (SELECT apid FROM airports GROUP BY city HAVING COUNT(apid) > 3);", "gold_sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "source_tables": ["airports"]}
{"sample_id": 6854, "db_id": "flight_4", "question": "What is the count of cities with more than 3 airports?", "rationale": ["Identify the requirement: We need to count the number of cities that have more than 3 airports.", "To achieve this, we will first group the airports by city and count the number of airports in each city.", "We will use the HAVING clause to filter out cities that have 3 or fewer airports.", "Next, we will select the distinct cities that meet this criterion.", "Finally, we will count these distinct cities to get the final result."], "pred_sql": "SELECT COUNT(DISTINCT city) AS city_count FROM airports WHERE apid IN (SELECT apid FROM airports GROUP BY city HAVING COUNT(apid) > 3);", "gold_sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "source_tables": ["airports"]}
{"sample_id": 6855, "db_id": "flight_4", "question": "List the cities which have more than one airport and number of airports.", "rationale": ["We need to list cities that have more than one airport.", "To achieve this, we will select the 'city' column from the 'airports' table.", "We will use the COUNT() function to count the number of airports in each city.", "We will group the results by 'city' to aggregate the counts for each city.", "Finally, we will use the HAVING clause to filter the results to only include cities with a count greater than 1."], "pred_sql": "SELECT city, COUNT(*) AS number_of_airports \nFROM airports \nGROUP BY city \nHAVING COUNT(*) > 1;", "gold_sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "source_tables": ["airports"]}
{"sample_id": 6856, "db_id": "flight_4", "question": "What are the names of all cities with more than one airport and how many airports do they have?", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city.", "We need to count the number of airports in each city, so we will use the COUNT() function.", "To group the results by city, we will use the GROUP BY clause on the 'city' column.", "To filter the results to only include cities with more than one airport, we will use the HAVING clause with COUNT(*) > 1."], "pred_sql": "SELECT city, COUNT(*) AS airport_count \nFROM airports \nGROUP BY city \nHAVING COUNT(*) > 1;", "gold_sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "source_tables": ["airports"]}
{"sample_id": 6857, "db_id": "flight_4", "question": "List the cities which have more than 2 airports sorted by the number of airports.", "rationale": ["We need to list cities with more than 2 airports.", "To achieve this, we will use the `airports` table which contains the city information.", "We will use the `COUNT(*)` function to count the number of airports in each city.", "We will group the results by city using `GROUP BY city` to aggregate the counts.", "To filter the cities that have more than 2 airports, we will use the `HAVING` clause with `COUNT(*) > 2`.", "Finally, we will sort the results by the number of airports in descending order using `ORDER BY airport_count DESC`."], "pred_sql": "SELECT city, COUNT(*) as airport_count \nFROM airports \nGROUP BY city \nHAVING COUNT(*) > 2 \nORDER BY airport_count DESC;", "gold_sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "source_tables": ["airports"]}
{"sample_id": 6858, "db_id": "flight_4", "question": "What are the cities that have more than 2 airports sorted by number of airports?", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city.", "Count the number of airports in each city: Use the COUNT() function to count the number of airports grouped by city.", "Filter cities with more than 2 airports: Use the HAVING clause to filter the results to only include cities with a count greater than 2.", "Sort the results: Use the ORDER BY clause to sort the results by the number of airports in descending order."], "pred_sql": "SELECT city, COUNT(*) as airport_count \nFROM airports \nGROUP BY city \nHAVING COUNT(*) > 2 \nORDER BY airport_count DESC;", "gold_sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "source_tables": ["airports"]}
{"sample_id": 6859, "db_id": "flight_4", "question": "Find the number of routes for each source airport and the airport name.", "rationale": ["Identify the relevant table: The 'routes' table contains the information about routes, including source airport ID and name.", "Determine the required fields: We need the source airport ID ('src_apid'), source airport name ('src_ap'), and the count of routes for each source airport.", "Use the COUNT() function to count the number of routes for each source airport.", "Group the results by source airport ID and name to get the count for each unique source airport.", "Construct the SQL query using SELECT, COUNT(), and GROUP BY clauses."], "pred_sql": "SELECT src_apid, src_ap, COUNT(rid) AS route_count FROM routes GROUP BY src_apid, src_ap;", "gold_sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "source_tables": ["airports", "routes"]}
{"sample_id": 6860, "db_id": "flight_4", "question": "For each airport name, how many routes start at that airport?", "rationale": ["Identify the relevant table: The 'routes' table contains information about routes, including the source airport.", "Determine the required columns: We need the source airport name ('src_ap') and a count of routes starting from that airport.", "Use the COUNT() function to count the number of routes for each source airport.", "Group the results by the source airport name using GROUP BY to aggregate the counts for each airport."], "pred_sql": "SELECT src_ap, COUNT(rid) AS route_count FROM routes GROUP BY src_ap;", "gold_sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "source_tables": ["airports", "routes"]}
{"sample_id": 6861, "db_id": "flight_4", "question": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.", "rationale": ["We need to find the number of routes for each source airport, which means we will be counting the routes associated with each source airport.", "The relevant tables are 'routes' and 'airports'. We will join these tables on the source airport ID (src_apid) from the 'routes' table and the airport ID (apid) from the 'airports' table.", "We will select the airport name from the 'airports' table and count the unique route identifiers (rid) from the 'routes' table to get the number of routes for each airport.", "To group the results by each airport, we will use the GROUP BY clause on the airport name.", "Finally, we will order the results by the count of routes in descending order to show the airports with the most routes first."], "pred_sql": "SELECT airports.name AS airport_name, COUNT(routes.rid) AS number_of_routes \nFROM routes \nJOIN airports ON routes.src_apid = airports.apid \nGROUP BY airports.name \nORDER BY number_of_routes DESC;", "gold_sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "source_tables": ["airports", "routes"]}
{"sample_id": 6862, "db_id": "flight_4", "question": "For each  airport name, how many routes start at that airport, ordered from most to least?", "rationale": ["We need to count the number of routes that start at each airport.", "The relevant column for the starting airport in the 'routes' table is 'src_ap'.", "We will use the COUNT() function to count the number of routes (using 'rid') for each starting airport.", "We will group the results by the 'src_ap' column to get the count for each airport.", "Finally, we will order the results by the count of routes in descending order to show the airports with the most routes first."], "pred_sql": "SELECT src_ap, COUNT(rid) AS route_count FROM routes GROUP BY src_ap ORDER BY route_count DESC;", "gold_sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "source_tables": ["airports", "routes"]}
{"sample_id": 6863, "db_id": "flight_4", "question": "Find the average elevation of all airports for each country.", "rationale": ["Identify the table that contains the relevant data: the 'airports' table has the 'elevation' and 'country' columns.", "To find the average elevation, we will use the AVG() function on the 'elevation' column.", "We need to group the results by 'country' to get the average elevation for each country.", "The final SQL query will select the 'country' and the average elevation calculated from the 'elevation' column, grouping the results by 'country'."], "pred_sql": "SELECT country, AVG(elevation) AS average_elevation FROM airports GROUP BY country;", "gold_sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "source_tables": ["airports"]}
{"sample_id": 6864, "db_id": "flight_4", "question": "For each country, what is the average elevation of that country's airports?", "rationale": ["Identify the relevant table: The 'airports' table contains the elevation and country information.", "Determine the required calculation: We need to calculate the average elevation for each country.", "Use the AVG() function to compute the average elevation.", "Group the results by country to get the average elevation for each country.", "Construct the SQL query to select the country and the average elevation, using GROUP BY to aggregate the results."], "pred_sql": "SELECT country, AVG(elevation) AS average_elevation FROM airports GROUP BY country;", "gold_sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "source_tables": ["airports"]}
{"sample_id": 6865, "db_id": "flight_4", "question": "Find the cities which have exactly two airports.", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city.", "Determine the goal: We want to find cities that have exactly two airports.", "Use the GROUP BY clause: This will allow us to group the results by city.", "Count the number of airports in each city: We can use the COUNT function to count the number of airports (apid) for each city.", "Filter the results: Use the HAVING clause to filter the groups to only include those with a count of 2."], "pred_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(apid) = 2;", "gold_sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "source_tables": ["airports"]}
{"sample_id": 6866, "db_id": "flight_4", "question": "What are the cities with exactly two airports?", "rationale": ["Identify the relevant table: The 'airports' table contains information about airports, including their city.", "We need to find cities that have exactly two airports, which requires grouping the data by city.", "Use the COUNT function to count the number of airports (apid) in each city.", "Use the HAVING clause to filter the results to only include cities with a count of exactly two airports."], "pred_sql": "SELECT city FROM airports GROUP BY city HAVING COUNT(apid) = 2;", "gold_sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "source_tables": ["airports"]}
{"sample_id": 6867, "db_id": "flight_4", "question": "For each country and airline name, how many routes are there?", "rationale": ["We need to count the number of routes for each combination of country and airline name.", "To do this, we will join the 'routes' table with the 'airlines' table on the airline ID (alid).", "We will select the country from the airlines table and the airline name from the routes table.", "We will use the COUNT function to count the number of routes (using the unique route identifier rid) for each group.", "Finally, we will group the results by country and airline name to get the desired counts."], "pred_sql": "SELECT a.country, r.airline, COUNT(r.rid) AS route_count\nFROM routes r\nJOIN airlines a ON r.alid = a.alid\nGROUP BY a.country, r.airline;", "gold_sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "source_tables": ["routes", "airlines"]}
{"sample_id": 6868, "db_id": "flight_4", "question": "What is the total number of routes for each country and airline in that country?", "rationale": ["We need to find the total number of routes for each country and the airline operating in that country.", "To do this, we will join the 'routes' table with the 'airlines' table on the airline ID (alid).", "We will select the country from the 'airlines' table and the airline name from the 'routes' table.", "We will count the unique route identifiers (rid) to get the total number of routes for each airline in each country.", "Finally, we will group the results by country and airline to get the desired totals."], "pred_sql": "SELECT a.country, r.airline, COUNT(r.rid) AS total_routes\nFROM routes r\nJOIN airlines a ON r.alid = a.alid\nGROUP BY a.country, r.airline;", "gold_sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "source_tables": ["routes", "airlines"]}
{"sample_id": 6869, "db_id": "flight_4", "question": "Find the number of routes with destination airports in Italy.", "rationale": ["Identify the relevant tables: 'routes' for route information and 'airports' for airport details.", "We need to count the number of routes, so we will use the COUNT() function.", "To find routes with destination airports in Italy, we need to join the 'routes' table with the 'airports' table on the destination airport ID ('dst_apid' in 'routes' and 'apid' in 'airports').", "We will filter the results to include only those rows where the country in the 'airports' table is 'Italy'.", "The final SQL query will select the count of these filtered routes."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes r JOIN airports a ON r.dst_apid = a.apid WHERE a.country = 'Italy';", "gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["routes", "airports"]}
{"sample_id": 6870, "db_id": "flight_4", "question": "What is the number of routes whose destinations are Italian airports?", "rationale": ["Identify the relevant tables: 'routes' for route information and 'airports' for airport details.", "Determine the relationship between the tables: 'routes.dst_apid' corresponds to 'airports.apid'.", "Filter the results to include only those routes where the destination airport is located in Italy.", "Use the COUNT() function to count the number of routes that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS number_of_routes FROM routes r JOIN airports a ON r.dst_apid = a.apid WHERE a.country = 'Italy';", "gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "source_tables": ["routes", "airports"]}
{"sample_id": 6871, "db_id": "flight_4", "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "rationale": ["Identify the tables needed: routes, airlines, and airports.", "We need to count the number of routes, so we will use the COUNT() function.", "The destination airport is in Italy, so we will filter the airports table for entries where the country is 'Italy'.", "We need to filter the routes based on the airline name 'American Airlines', so we will join the routes table with the airlines table on the airline ID (alid).", "We will also join the routes table with the airports table on the destination airport ID (dst_apid) to access the country information.", "The final SQL query will select the count of routes that meet both conditions: destination in Italy and operated by 'American Airlines'."], "pred_sql": "SELECT COUNT(*) FROM routes r JOIN airlines a ON r.alid = a.alid JOIN airports ap ON r.dst_apid = ap.apid WHERE ap.country = 'Italy' AND a.name = 'American Airlines';", "gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["routes", "airlines", "airports"]}
{"sample_id": 6872, "db_id": "flight_4", "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "rationale": ["Identify the relevant tables: 'routes', 'airlines', and 'airports'.", "We need to count the number of routes, so we will use the COUNT() function.", "The airline of interest is 'American Airlines', so we will filter the results based on the airline's name.", "We need to find routes whose destinations are in Italy, so we will join the 'routes' table with the 'airports' table to filter by country.", "The join condition will be based on the destination airport ID in the 'routes' table and the airport ID in the 'airports' table.", "Finally, we will group the results to get the count of routes that meet both conditions."], "pred_sql": "SELECT COUNT(*) AS number_of_routes FROM routes r JOIN airlines a ON r.alid = a.alid WHERE a.name = 'American Airlines' AND r.dst_ap IN (SELECT apid FROM airports WHERE country = 'Italy');", "gold_sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "source_tables": ["routes", "airlines", "airports"]}
{"sample_id": 6873, "db_id": "flight_4", "question": "Find the number of routes that have destination John F Kennedy International Airport.", "rationale": ["Identify the relevant table: The 'routes' table contains information about routes including destination airports.", "Determine the condition: We need to filter the routes where the destination airport name is 'John F Kennedy International Airport'.", "Use the COUNT function: To find the number of routes, we will use the COUNT(*) function to count the total number of rows that meet the condition.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and the WHERE clause to filter by destination airport."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes WHERE dst_ap = 'John F Kennedy International Airport';", "gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["airports", "routes"]}
{"sample_id": 6874, "db_id": "flight_4", "question": "What is the number of routes that end at John F Kennedy International Airport?", "rationale": ["Identify the table that contains the route information, which is the 'routes' table.", "Determine the column that indicates the destination airport, which is 'dst_ap'.", "Filter the results to only include routes where the destination airport is 'John F Kennedy International Airport'.", "Use the COUNT() function to count the number of routes that meet the criteria."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes WHERE dst_ap = 'John F Kennedy International Airport';", "gold_sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "source_tables": ["airports", "routes"]}
{"sample_id": 6875, "db_id": "flight_4", "question": "Find the number of routes from the United States to Canada.", "rationale": ["Identify the tables involved: 'routes' for route information and 'airports' for airport details.", "We need to count the number of routes, so we will use the COUNT() function.", "To find routes from the United States to Canada, we need to join the 'routes' table with the 'airports' table twice: once for the source airport and once for the destination airport.", "The join condition will be based on the airport IDs: 'src_apid' in 'routes' should match 'apid' in 'airports' for the source, and 'dst_apid' in 'routes' should match 'apid' in 'airports' for the destination.", "We will filter the results where the source airport's country is 'United States' and the destination airport's country is 'Canada'.", "Finally, we will select the count of these filtered routes."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes r JOIN airports src ON r.src_apid = src.apid JOIN airports dst ON r.dst_apid = dst.apid WHERE src.country = 'United States' AND dst.country = 'Canada';", "gold_sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}
{"sample_id": 6876, "db_id": "flight_4", "question": "How many routes go from the United States to Canada?", "rationale": ["Identify the tables involved: 'routes' for route information and 'airports' for airport details.", "We need to count the number of routes, so we will use the COUNT() function.", "To find routes from the United States to Canada, we need to join the 'routes' table with the 'airports' table twice: once for the source airport and once for the destination airport.", "The join condition will be based on the airport IDs: 'src_apid' in 'routes' should match 'apid' in 'airports' for the source, and 'dst_apid' in 'routes' should match 'apid' in 'airports' for the destination.", "We will filter the results where the source airport's country is 'United States' and the destination airport's country is 'Canada'.", "Finally, we will select the count of these filtered routes."], "pred_sql": "SELECT COUNT(*) AS route_count FROM routes r JOIN airports src ON r.src_apid = src.apid JOIN airports dst ON r.dst_apid = dst.apid WHERE src.country = 'United States' AND dst.country = 'Canada';", "gold_sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}
{"sample_id": 6877, "db_id": "flight_4", "question": "Find the id of routes whose source and destination airports are in the United States.", "rationale": ["Identify the requirement to find route IDs (rid) from the routes table.", "Determine that we need to filter routes based on source and destination airports being in the United States.", "To do this, we need to check the source airport ID (src_apid) and destination airport ID (dst_apid) against the airports table.", "Construct a subquery to select airport IDs (apid) from the airports table where the country is 'United States'.", "Use this subquery to filter the routes table for both src_apid and dst_apid to ensure both are in the United States.", "Combine these conditions in the main SQL query to retrieve the desired route IDs."], "pred_sql": "SELECT rid FROM routes WHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND dst_apid IN (SELECT apid FROM airports WHERE country = 'United States');", "gold_sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}
{"sample_id": 6878, "db_id": "flight_4", "question": "What is the id of the routes whose source and destination airports are in the United States?", "rationale": ["Identify the requirement to find route IDs (rid) where both source and destination airports are located in the United States.", "To achieve this, we need to filter the routes table based on the source airport ID (src_apid) and destination airport ID (dst_apid).", "We will use subqueries to find the airport IDs (apid) from the airports table where the country is 'United States'.", "The first subquery will select apid from airports where country = 'United States' for the source airport.", "The second subquery will do the same for the destination airport.", "Finally, we will combine these conditions in the WHERE clause of the main query to filter the routes accordingly."], "pred_sql": "SELECT rid FROM routes WHERE src_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND dst_apid IN (SELECT apid FROM airports WHERE country = 'United States');", "gold_sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "source_tables": ["routes", "airports"]}
{"sample_id": 6879, "db_id": "flight_4", "question": "Find the name of airline which runs the most number of routes.", "rationale": ["Identify the relevant table: The 'routes' table contains information about the routes and the associated airlines.", "Determine the required information: We need the name of the airline and the count of routes they operate.", "Use the COUNT() function to count the number of routes for each airline.", "Group the results by airline name using GROUP BY clause to aggregate the route counts for each airline.", "Order the results in descending order based on the route count to find the airline with the most routes.", "Limit the results to 1 to get only the airline with the highest count."], "pred_sql": "SELECT airline, COUNT(*) as route_count FROM routes GROUP BY airline ORDER BY route_count DESC LIMIT 1;", "gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airlines"]}
{"sample_id": 6880, "db_id": "flight_4", "question": "What is the name of the airline with the most routes?", "rationale": ["Identify the relevant table: The 'routes' table contains information about airlines and their routes.", "Determine the required information: We need the name of the airline with the most routes.", "Group the results by airline: Use GROUP BY to aggregate the routes by airline name.", "Count the number of routes for each airline: Use COUNT(*) to count the routes for each airline.", "Order the results: Use ORDER BY COUNT(*) DESC to sort the airlines by the number of routes in descending order.", "Limit the results to one: Use LIMIT 1 to get only the airline with the most routes."], "pred_sql": "SELECT airline FROM routes GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["routes", "airlines"]}
{"sample_id": 6881, "db_id": "flight_4", "question": "Find the busiest source airport that runs most number of routes in China.", "rationale": ["Identify the relevant tables: 'routes' for route information and 'airports' for airport details.", "We need to count the number of routes for each source airport, so we will use COUNT(rid) to get the number of routes.", "To find the source airports in China, we will join the 'routes' table with the 'airports' table on the source airport ID (src_apid).", "We will filter the results to include only those airports located in China by using a WHERE clause on the 'country' column of the 'airports' table.", "To get the busiest airport, we will group the results by the source airport ID (src_apid) and order the results by the count of routes in descending order.", "Finally, we will limit the results to 1 to get the busiest source airport."], "pred_sql": "SELECT src_apid, COUNT(rid) AS route_count \nFROM routes \nJOIN airports ON routes.src_apid = airports.apid \nWHERE airports.country = 'China' \nGROUP BY src_apid \nORDER BY route_count DESC \nLIMIT 1;", "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6882, "db_id": "flight_4", "question": "What is the name of the airport with the most number of routes that start in China?", "rationale": ["Identify the relevant tables: 'airports' for airport information and 'routes' for route information.", "We need to find airports in China, so we will filter the 'airports' table by the 'country' column.", "We will join the 'airports' table with the 'routes' table on the source airport ID ('src_apid').", "We will group the results by the airport ID to count the number of routes for each airport.", "We will order the results by the count of routes in descending order to find the airport with the most routes.", "Finally, we will limit the results to 1 to get the airport with the highest count."], "pred_sql": "SELECT airports.name\nFROM airports\nJOIN routes ON airports.apid = routes.src_apid\nWHERE airports.country = 'China'\nGROUP BY airports.apid\nORDER BY COUNT(routes.rid) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6883, "db_id": "flight_4", "question": "Find the busiest destination airport that runs most number of routes in China.", "rationale": ["Identify the relevant tables: 'routes' for route information and 'airports' for airport details.", "We need to find the busiest destination airport, which means we need to count the number of routes for each destination airport.", "Join the 'routes' table with the 'airports' table on the destination airport ID (dst_apid) to get the airport names and their corresponding countries.", "Filter the results to include only those airports located in China by using a WHERE clause on the country column of the airports table.", "Group the results by the destination airport name (dst_ap) to aggregate the route counts for each airport.", "Order the results in descending order based on the count of routes to find the busiest airport.", "Limit the results to 1 to get only the busiest destination airport."], "pred_sql": "SELECT dst_ap, COUNT(*) AS route_count \nFROM routes r \nJOIN airports a ON r.dst_apid = a.apid \nWHERE a.country = 'China' \nGROUP BY dst_ap \nORDER BY route_count DESC \nLIMIT 1;", "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6884, "db_id": "flight_4", "question": "What is the name of the airport that is the destination of the most number of routes that start in China?", "rationale": ["Identify the relevant tables: 'routes' for route information and 'airports' for airport details.", "We need to find the destination airport ('dst_ap') that has the most routes originating from airports in China.", "To do this, we will first filter the 'routes' table to only include routes where the source airport ID ('src_apid') corresponds to airports in China.", "We can achieve this by using a subquery to select the airport IDs from the 'airports' table where the country is 'China'.", "Next, we will group the results by the destination airport name ('dst_ap') and count the number of routes for each destination.", "Finally, we will order the results in descending order based on the count and limit the output to the top result, which will give us the destination airport with the most routes from China."], "pred_sql": "SELECT dst_ap FROM routes r JOIN airports a ON r.dst_apid = a.apid WHERE r.src_apid IN (SELECT apid FROM airports WHERE country = 'China') GROUP BY dst_ap ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "source_tables": ["airports", "routes"]}
{"sample_id": 6885, "db_id": "tracking_orders", "question": "What is the id of the most recent order?", "rationale": ["Identify the table that contains the order information, which is the 'Orders' table.", "To find the most recent order, we need to sort the orders by the 'date_order_placed' column in descending order.", "Using 'ORDER BY date_order_placed DESC' will ensure that the most recent order appears first in the results.", "To limit the results to only the most recent order, we will use 'LIMIT 1' in the query."], "pred_sql": "SELECT order_id FROM Orders ORDER BY date_order_placed DESC LIMIT 1;", "gold_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "source_tables": ["orders"]}
{"sample_id": 6886, "db_id": "tracking_orders", "question": "Find the id of the order made most recently.", "rationale": ["Identify the table that contains the order information, which is the 'Orders' table.", "To find the most recent order, we need to sort the orders by the 'date_order_placed' column in descending order.", "Using 'ORDER BY date_order_placed DESC' will arrange the orders from the most recent to the oldest.", "To get only the most recent order, we will limit the results to 1 using 'LIMIT 1'.", "The final SQL query selects the 'order_id' from the 'Orders' table, ordered by the date placed, limited to the most recent entry."], "pred_sql": "SELECT order_id FROM Orders ORDER BY date_order_placed DESC LIMIT 1;", "gold_sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "source_tables": ["orders"]}
{"sample_id": 6887, "db_id": "tracking_orders", "question": "what are the order id and customer id of the oldest order?", "rationale": ["Identify the relevant table: The Orders table contains the order_id and customer_id.", "Determine the criteria for the oldest order: The oldest order can be found by ordering the records by the date_order_placed column in ascending order.", "Select the required columns: We need to select order_id and customer_id from the Orders table.", "Limit the results to the oldest order: Use LIMIT 1 to get only the oldest order."], "pred_sql": "SELECT order_id, customer_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1;", "gold_sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "source_tables": ["orders"]}
{"sample_id": 6888, "db_id": "tracking_orders", "question": "Find the order id and customer id associated with the oldest order.", "rationale": ["Identify the relevant table: The Orders table contains the order_id and customer_id, as well as the date when the order was placed.", "Determine the criteria for the oldest order: The oldest order can be found by ordering the records by the date_order_placed in ascending order.", "Select the required fields: We need to select order_id and customer_id from the Orders table.", "Limit the results to the oldest order: Use LIMIT 1 to get only the first record after ordering."], "pred_sql": "SELECT order_id, customer_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1;", "gold_sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "source_tables": ["orders"]}
{"sample_id": 6889, "db_id": "tracking_orders", "question": "Find the id of the order whose shipment tracking number is \"3452\".", "rationale": ["Identify the relevant tables: Orders and Shipments.", "Determine the relationship between the tables: Orders can be linked to Shipments through the order_id.", "Select the order_id from the Orders table.", "Add a condition to filter the results based on the shipment tracking number, which is found in the Shipments table."], "pred_sql": "SELECT Orders.order_id FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_tracking_number = '3452';", "gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = '3452'", "source_tables": ["shipments"]}
{"sample_id": 6890, "db_id": "tracking_orders", "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.", "rationale": ["Identify the relevant tables: Shipments and Orders.", "Determine the relationship between the tables: Shipments has a foreign key order_id that links to Orders.", "We need to find the order_id based on a specific shipment tracking number.", "Construct the SQL query to select the order_id from Orders where the shipment_tracking_number in Shipments matches '3452'."], "pred_sql": "SELECT Orders.order_id FROM Shipments JOIN Orders ON Shipments.order_id = Orders.order_id WHERE Shipments.shipment_tracking_number = '3452';", "gold_sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = '3452'", "source_tables": ["shipments"]}
{"sample_id": 6891, "db_id": "tracking_orders", "question": "Find the ids of all the order items whose product id is 11.", "rationale": ["Identify the table that contains the order items, which is 'Order_Items'.", "Determine the column that holds the product identifier, which is 'product_id'.", "Specify the condition to filter the results, which is to find order items where 'product_id' equals '11'.", "Construct the SQL query to select 'order_item_id' from 'Order_Items' where the specified condition is met."], "pred_sql": "SELECT order_item_id FROM Order_Items WHERE product_id = '11';", "gold_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "source_tables": ["order_items"]}
{"sample_id": 6892, "db_id": "tracking_orders", "question": "Find all the order items whose product id is 11. What are the order item ids?", "rationale": ["Identify the table that contains the order items, which is the 'Order_Items' table.", "Determine the column that holds the product identifier, which is 'product_id'.", "Specify the condition to filter the results to only include order items with a product_id of '11'.", "Select the 'order_item_id' column to retrieve the IDs of the order items that meet the condition."], "pred_sql": "SELECT order_item_id FROM Order_Items WHERE product_id = '11';", "gold_sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "source_tables": ["order_items"]}
{"sample_id": 6893, "db_id": "tracking_orders", "question": "List the name of all the distinct customers who have orders with status \"Packing\".", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to retrieve customer names, so we will select from the Customers table.", "To find customers with specific order statuses, we need to join the Customers table with the Orders table on the customer_id.", "We are interested in orders with the status 'Packing', so we will add a WHERE clause to filter the orders accordingly.", "Since we want distinct customer names, we will use the DISTINCT keyword in our SELECT statement."], "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = 'Packing';", "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Packing'", "source_tables": ["orders", "customers"]}
{"sample_id": 6894, "db_id": "tracking_orders", "question": "Which customers have orders with status \"Packing\"? Give me the customer names.", "rationale": ["Identify the relevant tables: Customers and Orders.", "Determine the relationship between the tables: Customers are linked to Orders through customer_id.", "Select the customer_name from the Customers table.", "Filter the results to include only those orders with the status 'Packing'.", "Construct the SQL query using a JOIN to combine the Customers and Orders tables based on the customer_id, and apply the WHERE clause to filter by order_status."], "pred_sql": "SELECT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = 'Packing';", "gold_sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Packing'", "source_tables": ["orders", "customers"]}
{"sample_id": 6895, "db_id": "tracking_orders", "question": "Find the details of all the distinct customers who have orders with status \"On Road\".", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to find customers who have orders with a specific status, so we will join the Customers table with the Orders table on the customer_id.", "The condition for the orders is that the order_status must be 'On Road'.", "We want distinct customers, so we will use the DISTINCT keyword in our SELECT statement to avoid duplicate customer entries."], "pred_sql": "SELECT DISTINCT Customers.* FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_status = 'On Road';", "gold_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'", "source_tables": ["orders", "customers"]}
{"sample_id": 6896, "db_id": "tracking_orders", "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?", "rationale": ["Identify the relevant tables: Customers and Orders are needed to get customer details and order status.", "Join the Customers table with the Orders table on customer_id to link customers with their orders.", "Filter the results to include only those orders that have the status 'On Road'.", "Select distinct customers to avoid duplicates in the results, and include customer details in the output."], "pred_sql": "SELECT DISTINCT Customers.customer_id, Customers.customer_name, Customers.customer_details \nFROM Customers \nJOIN Orders ON Customers.customer_id = Orders.customer_id \nJOIN Order_Items ON Orders.order_id = Order_Items.order_id \nWHERE Orders.order_status = 'On Road';", "gold_sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road'", "source_tables": ["orders", "customers"]}
{"sample_id": 6897, "db_id": "tracking_orders", "question": "What is the name of the customer who has the most orders?", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to find the customer with the most orders, so we will join the Customers table with the Orders table on the customer_id.", "Group the results by customer_id to count the number of orders for each customer.", "Order the results by the count of orders in descending order to get the customer with the most orders at the top.", "Limit the results to 1 to get only the top customer."], "pred_sql": "SELECT c.customer_name\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(o.order_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "customers"]}
{"sample_id": 6898, "db_id": "tracking_orders", "question": "Which customer made the most orders? Find the customer name.", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to find the customer who made the most orders, so we will join the Customers table with the Orders table on the customer_id.", "We will group the results by customer_id to count the number of orders each customer has made.", "To find the customer with the most orders, we will order the results by the count of orders in descending order.", "Finally, we will limit the results to 1 to get the customer with the highest number of orders."], "pred_sql": "SELECT c.customer_name\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(o.order_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "customers"]}
{"sample_id": 6899, "db_id": "tracking_orders", "question": "What is the customer id of the customer who has the most orders?", "rationale": ["Identify the relevant table: The 'Orders' table contains the 'customer_id' and 'order_id' which are necessary for this query.", "Group the results by 'customer_id' to count the number of orders for each customer.", "Use the COUNT function to count the number of orders for each customer.", "Order the results in descending order based on the count of orders to find the customer with the most orders.", "Limit the results to 1 to get only the customer with the highest number of orders."], "pred_sql": "SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1;", "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "customers"]}
{"sample_id": 6900, "db_id": "tracking_orders", "question": "Find the id of the customer who made the most orders.", "rationale": ["Identify the relevant table: The 'Orders' table contains the 'customer_id' and 'order_id' which are necessary for this query.", "Group the results by 'customer_id' to count the number of orders each customer has made.", "Use the COUNT function to count the number of orders for each customer.", "Order the results in descending order based on the count of orders to find the customer with the most orders.", "Limit the results to 1 to get only the customer with the highest number of orders."], "pred_sql": "SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY COUNT(order_id) DESC LIMIT 1;", "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "customers"]}
{"sample_id": 6901, "db_id": "tracking_orders", "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".", "rationale": ["Identify the relevant tables: Orders and Customers.", "Determine the columns needed: order_id and order_status from Orders, and customer_name from Customers.", "Establish the relationship between Orders and Customers using the foreign key: Orders.customer_id = Customers.customer_id.", "Filter the results to only include orders for the customer named 'Jeramie'.", "Construct the SQL query using a JOIN to combine Orders and Customers, selecting the required columns and applying the WHERE clause for the customer name."], "pred_sql": "SELECT Orders.order_id, Orders.order_status FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeramie';", "gold_sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "source_tables": ["orders", "customers"]}
{"sample_id": 6902, "db_id": "tracking_orders", "question": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.", "rationale": ["Identify the relevant table for orders, which is the 'Orders' table.", "We need to filter orders based on the customer name 'Jeramie'.", "To find the customer_id associated with 'Jeramie', we will query the 'Customers' table.", "We will use a subquery to get the customer_id from the 'Customers' table where customer_name is 'Jeramie'.", "Finally, we will select the order_id and order_status from the 'Orders' table where the customer_id matches the one retrieved from the subquery."], "pred_sql": "SELECT order_id, order_status FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeramie');", "gold_sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "source_tables": ["orders", "customers"]}
{"sample_id": 6903, "db_id": "tracking_orders", "question": "Find the dates of orders which belong to the customer named \"Jeramie\".", "rationale": ["Identify the relevant tables: Orders and Customers.", "Determine the relationship between the tables: Orders has a foreign key customer_id that references Customers.", "We need to filter the Orders based on the customer name, which is in the Customers table.", "Construct the SQL query to select the date_order_placed from Orders where the customer_name in Customers matches 'Jeramie'.", "Join the Orders and Customers tables on the customer_id to access the customer_name."], "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeramie';", "gold_sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "source_tables": ["orders", "customers"]}
{"sample_id": 6904, "db_id": "tracking_orders", "question": "What are the dates of the orders made by the customer named \"Jeramie\"?", "rationale": ["Identify the relevant tables: Orders and Customers.", "Determine the relationship between the tables: Orders has a foreign key customer_id that references Customers.", "We need to filter the Orders based on the customer name, which is in the Customers table.", "Construct the SQL query to select the date_order_placed from Orders where the customer_name in Customers is 'Jeramie'.", "Join the Orders and Customers tables on the customer_id to access the customer_name."], "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeramie';", "gold_sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeramie'", "source_tables": ["orders", "customers"]}
{"sample_id": 6905, "db_id": "tracking_orders", "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.", "rationale": ["Identify the relevant tables: Customers and Orders are needed to get customer names and their order details.", "Determine the relationship between the tables: Customers are linked to Orders through customer_id.", "Select the required fields: We need the customer_name from the Customers table.", "Filter the orders based on the date range: Use the WHERE clause to filter orders placed between '2009-01-01' and '2010-01-01'.", "Use DISTINCT to ensure that each customer name is listed only once, even if they placed multiple orders in that time frame."], "pred_sql": "SELECT DISTINCT Customers.customer_name \nFROM Customers \nJOIN Orders ON Customers.customer_id = Orders.customer_id \nWHERE Orders.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01';", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= '2009-01-01' AND T2.date_order_placed <= '2010-01-01'", "source_tables": ["orders", "customers"]}
{"sample_id": 6906, "db_id": "tracking_orders", "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.", "rationale": ["Identify the relevant tables: Customers and Orders.", "Determine the relationship between the tables: Customers are linked to Orders through customer_id.", "Select the customer_name from the Customers table.", "Filter the Orders based on the date_order_placed between '2009-01-01' and '2010-01-01'.", "Use DISTINCT to ensure that each customer name is listed only once."], "pred_sql": "SELECT DISTINCT Customers.customer_name FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01';", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= '2009-01-01' AND T2.date_order_placed <= '2010-01-01'", "source_tables": ["orders", "customers"]}
{"sample_id": 6907, "db_id": "tracking_orders", "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?", "rationale": ["Identify the relevant tables: Orders and Order_Items are needed to get product IDs related to orders.", "We need to filter orders based on the date they were placed, which is in the Orders table under the column date_order_placed.", "To get the product IDs, we will join the Orders table with the Order_Items table on the order_id column.", "We will use the DISTINCT keyword to ensure that we only get unique product IDs.", "The final SQL query will select the distinct product_id from the joined tables where the order date is between '1975-01-01' and '1976-01-01'."], "pred_sql": "SELECT DISTINCT oi.product_id \nFROM Orders o \nJOIN Order_Items oi ON o.order_id = oi.order_id \nWHERE o.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01';", "gold_sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= '1975-01-01' AND T1.date_order_placed <= '1976-01-01'", "source_tables": ["orders", "order_items"]}
{"sample_id": 6908, "db_id": "tracking_orders", "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??", "rationale": ["We need to find distinct product IDs that were ordered within a specific date range.", "The relevant tables for this query are Products, Order_Items, and Orders.", "We will join the Products table with the Order_Items table on the product_id to get the order items related to each product.", "Next, we will join the Order_Items table with the Orders table on the order_id to access the order details, specifically the date the order was placed.", "We will filter the results using a WHERE clause to only include orders placed between '1975-01-01' and '1976-01-01'.", "Finally, we will select the distinct product IDs from the resulting dataset."], "pred_sql": "SELECT DISTINCT Products.product_id FROM Products\nJOIN Order_Items ON Products.product_id = Order_Items.product_id\nJOIN Orders ON Order_Items.order_id = Orders.order_id\nWHERE Orders.date_order_placed BETWEEN '1975-01-01' AND '1976-01-01';", "gold_sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= '1975-01-01' AND T1.date_order_placed <= '1976-01-01'", "source_tables": ["orders", "order_items"]}
{"sample_id": 6909, "db_id": "tracking_orders", "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".", "rationale": ["Identify the relevant tables: Customers and Orders are needed to find customer names and their order statuses.", "Join the Customers table with the Orders table on the customer_id to link customers with their orders.", "Filter the results to include only those orders that have the status 'On Road' or 'Shipped'.", "Group the results by customer_id to aggregate the order statuses for each customer.", "Use the HAVING clause to ensure that only customers with both order statuses are included, which means counting distinct order statuses should equal 2."], "pred_sql": "SELECT DISTINCT c.customer_name \nFROM Customers c \nJOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_status IN ('On Road', 'Shipped') \nGROUP BY c.customer_id \nHAVING COUNT(DISTINCT o.order_status) = 2;", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "source_tables": ["orders", "customers"]}
{"sample_id": 6910, "db_id": "tracking_orders", "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.", "rationale": ["Identify the relevant tables: Customers and Orders are needed to find customer names and their order statuses.", "Join the Customers table with the Orders table on the customer_id to link customers with their orders.", "Filter the results to include only those orders that have the statuses 'On Road' and 'Shipped'.", "Group the results by customer_id to aggregate the order statuses for each customer.", "Use the HAVING clause to ensure that only customers with both statuses are included, which requires counting distinct order statuses and checking that the count equals 2."], "pred_sql": "SELECT DISTINCT c.customer_name \nFROM Customers c \nJOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_status IN ('On Road', 'Shipped') \nGROUP BY c.customer_id \nHAVING COUNT(DISTINCT o.order_status) = 2;", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "source_tables": ["orders", "customers"]}
{"sample_id": 6911, "db_id": "tracking_orders", "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".", "rationale": ["Identify the relevant table: The 'Orders' table contains the 'order_status' and 'customer_id' columns.", "We need to find customers with both 'On Road' and 'Shipped' statuses, so we will filter the 'Orders' table for these statuses.", "Use the 'IN' clause to filter orders with statuses 'On Road' and 'Shipped'.", "Group the results by 'customer_id' to aggregate the order statuses for each customer.", "Use the 'HAVING' clause to ensure that only customers with both statuses are included, which means counting distinct statuses should equal 2."], "pred_sql": "SELECT DISTINCT o.customer_id FROM Orders o WHERE o.order_status IN ('On Road', 'Shipped') GROUP BY o.customer_id HAVING COUNT(DISTINCT o.order_status) = 2;", "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "source_tables": ["orders", "customers"]}
{"sample_id": 6912, "db_id": "tracking_orders", "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to find customers who have orders with specific statuses: 'On Road' and 'Shipped'.", "Join the Customers table with the Orders table on the customer_id to link customers with their orders.", "Filter the results to include only those orders that have the statuses 'On Road' or 'Shipped'.", "Group the results by customer_id to aggregate the order statuses for each customer.", "Use the HAVING clause to ensure that only customers with both statuses are included, which means counting distinct order statuses should equal 2."], "pred_sql": "SELECT DISTINCT c.customer_id \nFROM Customers c \nJOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_status IN ('On Road', 'Shipped') \nGROUP BY c.customer_id \nHAVING COUNT(DISTINCT o.order_status) = 2;", "gold_sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'", "source_tables": ["orders", "customers"]}
{"sample_id": 6913, "db_id": "tracking_orders", "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.", "rationale": ["Identify the relevant tables: Orders and Shipments are needed to find the order date based on the shipment tracking number.", "Determine the relationship between the tables: Orders and Shipments are linked through the order_id.", "Formulate the SQL query: We need to select the date_order_placed from the Orders table where the shipment_tracking_number in the Shipments table matches '3452'.", "Construct the JOIN clause to connect Orders and Shipments on order_id, and apply the WHERE clause to filter by the specific tracking number."], "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_tracking_number = '3452';", "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "source_tables": ["shipments", "orders"]}
{"sample_id": 6914, "db_id": "tracking_orders", "question": "On which day was the order placed whose shipment tracking number is 3452?", "rationale": ["Identify the relevant tables: Orders and Shipments.", "Determine the relationship between the tables: Orders can be linked to Shipments through the order_id.", "We need to find the date_order_placed from the Orders table for a specific shipment tracking number.", "Construct the SQL query to select date_order_placed from Orders, joining with Shipments on order_id, and filtering by the given shipment tracking number."], "pred_sql": "SELECT Orders.date_order_placed FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_tracking_number = '3452';", "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "source_tables": ["shipments", "orders"]}
{"sample_id": 6915, "db_id": "tracking_orders", "question": "What is the placement date of the order whose invoice number is 10?", "rationale": ["Identify the relevant tables: Orders and Shipments are needed to find the order placement date based on the invoice number.", "The invoice number is provided (10), so we need to find the corresponding order_id from the Shipments table.", "Once we have the order_id, we can then query the Orders table to get the date_order_placed for that order_id.", "The final SQL query selects the date_order_placed from the Orders table where the order_id matches the one found in the Shipments table for the given invoice number."], "pred_sql": "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Shipments WHERE invoice_number = 10);", "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "source_tables": ["shipments", "orders"]}
{"sample_id": 6916, "db_id": "tracking_orders", "question": "On what day was the order with invoice number 10 placed?", "rationale": ["Identify the relevant tables: Orders and Shipments are needed to find the order date based on the invoice number.", "The invoice number is provided (10), so we need to filter the Shipments table to find the corresponding order_id.", "Once we have the order_id from the Shipments table, we can then query the Orders table to get the date_order_placed for that order_id."], "pred_sql": "SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Shipments WHERE invoice_number = 10);", "gold_sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "source_tables": ["shipments", "orders"]}
{"sample_id": 6917, "db_id": "tracking_orders", "question": "List the count and id of each product in all the orders.", "rationale": ["We need to list the count and id of each product in all the orders.", "To achieve this, we will select the product_id from the Products table.", "We also need to count the number of order items for each product, so we will use COUNT(Order_Items.order_item_id) to get the count of order items associated with each product.", "To link the Products table with the Orders, we need to join the Order_Items table, which contains the product_id and order_id.", "We will then join the Orders table to ensure we are only counting products that are part of orders.", "Finally, we will group the results by product_id to get the count for each product."], "pred_sql": "SELECT Products.product_id, COUNT(Order_Items.order_item_id) AS product_count \nFROM Products \nJOIN Order_Items ON Products.product_id = Order_Items.product_id \nJOIN Orders ON Order_Items.order_id = Orders.order_id \nGROUP BY Products.product_id;", "gold_sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["orders", "products", "order_items"]}
{"sample_id": 6918, "db_id": "tracking_orders", "question": "For each product, return its id and the number of times it was ordered.", "rationale": ["Identify the relevant tables: Products and Order_Items are needed to get product information and order counts.", "We need to count the number of times each product was ordered, which means we will use the COUNT() function on the order_item_id from the Order_Items table.", "To associate products with their order counts, we will perform a LEFT JOIN between Products and Order_Items on the product_id column.", "Finally, we will group the results by product_id to get the count of orders for each product."], "pred_sql": "SELECT Products.product_id, COUNT(Order_Items.order_item_id) AS order_count\nFROM Products\nLEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id\nGROUP BY Products.product_id;", "gold_sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["orders", "products", "order_items"]}
{"sample_id": 6919, "db_id": "tracking_orders", "question": "List the name and count of each product in all orders.", "rationale": ["We need to list the name and count of each product in all orders.", "The product name is stored in the Products table under the column 'product_name'.", "To count the number of each product in orders, we need to join the Products table with the Order_Items table, as Order_Items contains the product_id that links to Products.", "Next, we also need to join the Orders table to ensure we are counting products that are part of orders.", "We will use a GROUP BY clause on the product name to aggregate the counts for each product.", "Finally, we will select the product name and the count of order items for each product."], "pred_sql": "SELECT Products.product_name, COUNT(Order_Items.order_item_id) AS product_count \nFROM Products \nJOIN Order_Items ON Products.product_id = Order_Items.product_id \nJOIN Orders ON Order_Items.order_id = Orders.order_id \nGROUP BY Products.product_name;", "gold_sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["orders", "products", "order_items"]}
{"sample_id": 6920, "db_id": "tracking_orders", "question": "For each product, show its name and the number of times it was ordered.", "rationale": ["Identify the required information: product name and the count of orders for each product.", "Determine the relevant tables: Products and Order_Items.", "Establish the relationship between the tables: Products are linked to Order_Items through product_id.", "Use a JOIN clause to combine Products and Order_Items based on product_id.", "Count the number of order items for each product using COUNT() function.", "Group the results by product_id to get the count for each product."], "pred_sql": "SELECT Products.product_name, COUNT(Order_Items.order_item_id) AS order_count\nFROM Products\nJOIN Order_Items ON Products.product_id = Order_Items.product_id\nGROUP BY Products.product_id;", "gold_sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "source_tables": ["orders", "products", "order_items"]}
{"sample_id": 6921, "db_id": "tracking_orders", "question": "Find the ids of orders which are shipped after 2000-01-01.", "rationale": ["Identify the relevant tables: Orders and Shipments, since we need to find orders that have been shipped.", "Determine the relationship between the tables: Orders and Shipments are linked by the order_id.", "Select the order_id from the Orders table, ensuring to get distinct values to avoid duplicates.", "Add a condition to filter shipments based on the shipment_date being after '2000-01-01'.", "Construct the SQL query using a JOIN to combine Orders and Shipments, applying the date filter in the WHERE clause."], "pred_sql": "SELECT DISTINCT Orders.order_id FROM Orders JOIN Shipments ON Orders.order_id = Shipments.order_id WHERE Shipments.shipment_date > '2000-01-01';", "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date > '2000-01-01'", "source_tables": ["shipments"]}
{"sample_id": 6922, "db_id": "tracking_orders", "question": "Which orders have shipment after 2000-01-01? Give me the order ids.", "rationale": ["Identify the relevant table: Shipments, as it contains the shipment_date.", "Determine the columns needed: We need the order_id from the Shipments table.", "Set the condition for filtering: We want shipments that occurred after '2000-01-01'.", "Construct the SQL query using SELECT to retrieve order_id from Shipments with the specified condition."], "pred_sql": "SELECT order_id FROM Shipments WHERE shipment_date > '2000-01-01';", "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date > '2000-01-01'", "source_tables": ["shipments"]}
{"sample_id": 6923, "db_id": "tracking_orders", "question": "Find the id of the order which is shipped most recently.", "rationale": ["Identify the relevant table: Shipments, as it contains the order_id and shipment_date.", "To find the most recently shipped order, we need to sort the records in the Shipments table by shipment_date in descending order.", "Using ORDER BY shipment_date DESC will arrange the shipments from the most recent to the oldest.", "To get only the most recent shipment, we will limit the results to 1 using LIMIT 1."], "pred_sql": "SELECT order_id FROM Shipments ORDER BY shipment_date DESC LIMIT 1;", "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)", "source_tables": ["shipments"]}
{"sample_id": 6924, "db_id": "tracking_orders", "question": "Which order has the most recent shipment? Give me the order id.", "rationale": ["Identify the relevant table: Shipments, as it contains shipment information including order_id and shipment_date.", "To find the most recent shipment, we need to sort the records in the Shipments table by shipment_date in descending order.", "We only need the order_id associated with the most recent shipment, so we will select the order_id column.", "To limit the results to only the most recent shipment, we will use the LIMIT clause with a value of 1."], "pred_sql": "SELECT order_id FROM Shipments ORDER BY shipment_date DESC LIMIT 1;", "gold_sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)", "source_tables": ["shipments"]}
{"sample_id": 6925, "db_id": "tracking_orders", "question": "List the names of all distinct products in alphabetical order.", "rationale": ["Identify the table that contains product information, which is the Products table.", "Determine the column that holds the product names, which is product_name.", "To get distinct product names, use the DISTINCT keyword in the SELECT statement.", "To sort the results in alphabetical order, use the ORDER BY clause with ASC (ascending) after the product_name column."], "pred_sql": "SELECT DISTINCT product_name FROM Products ORDER BY product_name ASC;", "gold_sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "source_tables": ["products"]}
{"sample_id": 6926, "db_id": "tracking_orders", "question": "Sort all the distinct products in alphabetical order.", "rationale": ["Identify the table that contains product information, which is the 'Products' table.", "Determine the column that holds the product names, which is 'product_name'.", "Use the DISTINCT keyword to ensure that only unique product names are selected.", "Sort the results in alphabetical order using the ORDER BY clause with ASC for ascending order."], "pred_sql": "SELECT DISTINCT product_name FROM Products ORDER BY product_name ASC;", "gold_sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "source_tables": ["products"]}
{"sample_id": 6927, "db_id": "tracking_orders", "question": "List the ids of all distinct orders ordered by placed date.", "rationale": ["Identify the table that contains the order information, which is the 'Orders' table.", "We need to select distinct order IDs, so we will use the SELECT DISTINCT statement on the 'order_id' column.", "To ensure the results are ordered by the date the orders were placed, we will include an ORDER BY clause on the 'date_order_placed' column."], "pred_sql": "SELECT DISTINCT order_id FROM Orders ORDER BY date_order_placed;", "gold_sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "source_tables": ["orders"]}
{"sample_id": 6928, "db_id": "tracking_orders", "question": "What are ids of the all distinct orders, sorted by placement date?", "rationale": ["Identify the table that contains the order information, which is the 'Orders' table.", "We need to select distinct order IDs, so we will use the SELECT DISTINCT statement on the 'order_id' column.", "To sort the results by the date the order was placed, we will use the ORDER BY clause on the 'date_order_placed' column."], "pred_sql": "SELECT DISTINCT order_id FROM Orders ORDER BY date_order_placed;", "gold_sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "source_tables": ["orders"]}
{"sample_id": 6929, "db_id": "tracking_orders", "question": "What is the id of the order which has the most items?", "rationale": ["Identify the table that contains order items, which is the 'Order_Items' table.", "We need to group the results by 'order_id' to count the number of items in each order.", "Use the COUNT function to count the number of 'order_item_id' for each 'order_id'.", "Order the results in descending order based on the count of items to find the order with the most items.", "Limit the results to 1 to get only the order with the highest count."], "pred_sql": "SELECT order_id FROM Order_Items GROUP BY order_id ORDER BY COUNT(order_item_id) DESC LIMIT 1;", "gold_sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "order_items"]}
{"sample_id": 6930, "db_id": "tracking_orders", "question": "Which order deals with the most items? Return the order id.", "rationale": ["Identify the table that contains the order items, which is the Order_Items table.", "We need to group the results by order_id to count the number of items associated with each order.", "Use the COUNT function to count the number of order_item_id for each order_id.", "Order the results in descending order to get the order with the most items at the top.", "Limit the results to 1 to get only the order id that deals with the most items."], "pred_sql": "SELECT order_id FROM Order_Items GROUP BY order_id ORDER BY COUNT(order_item_id) DESC LIMIT 1;", "gold_sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "order_items"]}
{"sample_id": 6931, "db_id": "tracking_orders", "question": "What is the name of the customer who has the largest number of orders?", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to find the customer with the largest number of orders, so we will join the Customers table with the Orders table on the customer_id.", "Group the results by customer_id to count the number of orders for each customer.", "Order the results in descending order based on the count of orders to get the customer with the most orders at the top.", "Limit the results to 1 to get only the customer with the largest number of orders."], "pred_sql": "SELECT c.customer_name\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(o.order_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "customers"]}
{"sample_id": 6932, "db_id": "tracking_orders", "question": "Find the name of the customer who made the most orders.", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to find the customer who made the most orders, so we will join the Customers table with the Orders table on the customer_id.", "We will group the results by customer_id to count the number of orders each customer has made.", "To find the customer with the most orders, we will order the results by the count of orders in descending order.", "Finally, we will limit the results to 1 to get only the top customer."], "pred_sql": "SELECT c.customer_name\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nORDER BY COUNT(o.order_id) DESC\nLIMIT 1;", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["orders", "customers"]}
{"sample_id": 6933, "db_id": "tracking_orders", "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "rationale": ["Identify the table that contains the invoice information, which is the Invoices table.", "Determine the relevant column for the invoice date, which is 'invoice_date'.", "Formulate the condition to filter invoices created before '1989-09-03' or after '2007-12-25'.", "Use the SQL SELECT statement to retrieve the 'invoice_number' from the Invoices table based on the specified conditions."], "pred_sql": "SELECT invoice_number FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';", "gold_sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}
{"sample_id": 6934, "db_id": "tracking_orders", "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?", "rationale": ["Identify the table that contains the invoice numbers, which is the Invoices table.", "Determine the relevant column for the invoice numbers, which is 'invoice_number'.", "Identify the column that contains the date of the invoices, which is 'invoice_date'.", "Formulate the condition to filter invoices created before '1989-09-03' or after '2007-12-25'.", "Combine the selected columns and conditions into a SQL SELECT statement."], "pred_sql": "SELECT invoice_number FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';", "gold_sql": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}
{"sample_id": 6935, "db_id": "tracking_orders", "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "rationale": ["Identify the table that contains the relevant data: Invoices.", "Determine the columns needed: We need distinct invoice details, so we will select 'invoice_details'.", "Apply the DISTINCT keyword to ensure unique results.", "Set the conditions for the invoice date: We want invoices created before '1989-09-03' or after '2007-12-25'.", "Construct the SQL query using the SELECT statement with the appropriate conditions."], "pred_sql": "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';", "gold_sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}
{"sample_id": 6936, "db_id": "tracking_orders", "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?", "rationale": ["Identify the table that contains the required information: Invoices.", "Determine the relevant column for the details we need: invoice_details.", "Identify the date conditions specified in the query: before '1989-09-03' and after '2007-12-25'.", "Use the DISTINCT keyword to ensure that the results are unique.", "Construct the SQL query to select distinct invoice_details from the Invoices table where the invoice_date meets the specified conditions."], "pred_sql": "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25';", "gold_sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'", "source_tables": ["invoices"]}
{"sample_id": 6937, "db_id": "tracking_orders", "question": "For each customer who has at least two orders, find the customer name and number of orders made.", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to join these tables on the customer_id to link customers with their orders.", "We want to count the number of orders for each customer, so we will use the COUNT() function.", "Group the results by customer_id to aggregate the order counts for each customer.", "Use the HAVING clause to filter the results to only include customers with at least two orders."], "pred_sql": "SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nHAVING COUNT(o.order_id) >= 2;", "gold_sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "source_tables": ["orders", "customers"]}
{"sample_id": 6938, "db_id": "tracking_orders", "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.", "rationale": ["Identify the relevant tables: Customers and Orders.", "We need to join these tables on the customer_id to link customers with their orders.", "We want to count the number of orders for each customer, so we will use COUNT(o.order_id).", "We need to group the results by customer_id to get the count per customer.", "To filter for customers with at least two orders, we will use the HAVING clause with COUNT(o.order_id) >= 2."], "pred_sql": "SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders\nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id\nHAVING COUNT(o.order_id) >= 2;", "gold_sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "source_tables": ["orders", "customers"]}
{"sample_id": 6939, "db_id": "tracking_orders", "question": "Find the name of the customers who have at most two orders.", "rationale": ["Identify the relevant table: Customers and Orders.", "We need to find customers based on the number of orders they have placed.", "Use a subquery to count the number of orders for each customer: SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) <= 2.", "This subquery will return customer_ids of those who have at most two orders.", "Finally, select the customer_name from the Customers table where the customer_id is in the result of the subquery."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) <= 2);", "gold_sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "source_tables": ["orders", "customers"]}
{"sample_id": 6940, "db_id": "tracking_orders", "question": "What are the names of the customers who have made two or less orders?", "rationale": ["Identify the relevant table: Customers and Orders.", "We need to find customers who have made two or fewer orders, so we will focus on the Orders table to count the number of orders per customer.", "Use a subquery to group the Orders by customer_id and count the number of orders for each customer.", "Filter the results of the subquery to include only those customers with a count of orders less than or equal to 2 using HAVING clause.", "Join the results of the subquery with the Customers table to get the customer names corresponding to the filtered customer_ids."], "pred_sql": "SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) <= 2);", "gold_sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "source_tables": ["orders", "customers"]}
{"sample_id": 6941, "db_id": "tracking_orders", "question": "List the names of the customers who have once bought product \"food\".", "rationale": ["We need to find customers who have purchased a specific product, in this case, 'food'.", "To do this, we will join the Customers table with the Orders table using the customer_id to link customers to their orders.", "Next, we will join the Orders table with the Order_Items table using the order_id to link orders to their items.", "Then, we will join the Order_Items table with the Products table using the product_id to link order items to the products they represent.", "Finally, we will filter the results to only include products where the product_name is 'food'.", "We will use DISTINCT to ensure that we only get unique customer names in the result."], "pred_sql": "SELECT DISTINCT Customers.customer_name \nFROM Customers \nJOIN Orders ON Customers.customer_id = Orders.customer_id \nJOIN Order_Items ON Orders.order_id = Order_Items.order_id \nJOIN Products ON Order_Items.product_id = Products.product_id \nWHERE Products.product_name = 'food';", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["orders", "products", "customers", "order_items"]}
{"sample_id": 6942, "db_id": "tracking_orders", "question": "What are the names of the customers who bought product \"food\" at least once?", "rationale": ["Identify the relevant tables: Customers, Orders, Order_Items, and Products are needed to find customers who bought a specific product.", "Join the Customers table with the Orders table on customer_id to link customers to their orders.", "Join the Orders table with the Order_Items table on order_id to link orders to the items they contain.", "Join the Order_Items table with the Products table on product_id to link order items to the products they represent.", "Filter the results to only include products where the product_name is 'food'.", "Select distinct customer names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT Customers.customer_name \nFROM Customers \nJOIN Orders ON Customers.customer_id = Orders.customer_id \nJOIN Order_Items ON Orders.order_id = Order_Items.order_id \nJOIN Products ON Order_Items.product_id = Products.product_id \nWHERE Products.product_name = 'food';", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["orders", "products", "customers", "order_items"]}
{"sample_id": 6943, "db_id": "tracking_orders", "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").", "rationale": ["We need to find customers who have canceled an order for a specific product, which is 'food'.", "To do this, we will join the Customers table with the Orders table using the customer_id to link customers to their orders.", "Next, we will join the Orders table with the Order_Items table using the order_id to link orders to their items.", "Then, we will join the Order_Items table with the Products table using the product_id to link order items to their respective products.", "We will filter the results where the order_item_status is 'Cancel' to find canceled orders.", "Additionally, we will filter for the product name 'food' to ensure we are only looking at cancellations for that specific product.", "Finally, we will select the distinct customer names to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT Customers.customer_name \nFROM Customers \nJOIN Orders ON Customers.customer_id = Orders.customer_id \nJOIN Order_Items ON Orders.order_id = Order_Items.order_id \nJOIN Products ON Order_Items.product_id = Products.product_id \nWHERE Order_Items.order_item_status = 'Cancel' \nAND Products.product_name = 'food';", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["orders", "products", "customers", "order_items"]}
{"sample_id": 6944, "db_id": "tracking_orders", "question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?", "rationale": ["Identify the relevant tables: Customers, Orders, Order_Items, and Products.", "We need to find customers who have canceled an order for a specific product, which is 'food'.", "Join the Customers table with the Orders table on customer_id to link customers to their orders.", "Join the Orders table with the Order_Items table on order_id to link orders to their items.", "Join the Order_Items table with the Products table on product_id to filter by the product name 'food'.", "Add a WHERE clause to filter for order_item_status = 'Cancel' to find canceled orders.", "Select distinct customer names to avoid duplicates in the result."], "pred_sql": "SELECT DISTINCT c.customer_name \nFROM Customers c \nJOIN Orders o ON c.customer_id = o.customer_id \nJOIN Order_Items oi ON o.order_id = oi.order_id \nJOIN Products p ON oi.product_id = p.product_id \nWHERE oi.order_item_status = 'Cancel' AND p.product_name = 'food';", "gold_sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = 'Cancel' AND T4.product_name = 'food' GROUP BY T1.customer_id HAVING count(*)  >=  1", "source_tables": ["orders", "products", "customers", "order_items"]}
{"sample_id": 6945, "db_id": "architecture", "question": "How many architects are female?", "rationale": ["Identify the table that contains the information about architects, which is the 'architect' table.", "Determine the relevant column that indicates the gender of the architects, which is the 'gender' column.", "To find out how many architects are female, we need to count the number of entries where the 'gender' column is equal to 'female'.", "Construct the SQL query using the COUNT function to count the number of female architects and select from the 'architect' table with the appropriate WHERE clause."], "pred_sql": "SELECT COUNT(*) AS female_architects FROM architect WHERE gender = 'female';", "gold_sql": "SELECT count(*) FROM architect WHERE gender  =  'female'", "source_tables": ["architect"]}
{"sample_id": 6946, "db_id": "architecture", "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.", "rationale": ["Identify the table that contains the required information: the 'architect' table.", "Select the columns needed: 'name', 'nationality', and 'id'.", "Filter the results to include only male architects by using a WHERE clause with the condition 'gender = 'male' '.", "Order the results by the 'name' column in lexicographical order using the ORDER BY clause."], "pred_sql": "SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name;", "gold_sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name", "source_tables": ["architect"]}
{"sample_id": 6947, "db_id": "architecture", "question": "What is the maximum length in meters for the bridges and what are the architects' names?", "rationale": ["Identify the relevant tables: 'bridge' for bridge lengths and 'architect' for architect names.", "We need to find the maximum length of bridges, which requires the MAX() function on the 'length_meters' column from the 'bridge' table.", "To get the architects' names associated with the bridges, we need to join the 'bridge' table with the 'architect' table using the 'architect_id' foreign key.", "The query should select the maximum length of the bridges and the names of the architects.", "We will group the results by architect names to ensure we get the maximum length for each architect."], "pred_sql": "SELECT MAX(b.length_meters) AS max_length_meters, a.name AS architect_name\nFROM bridge b\nJOIN architect a ON b.architect_id = a.id\nGROUP BY a.name;", "gold_sql": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id", "source_tables": ["architect", "bridge"]}
{"sample_id": 6948, "db_id": "architecture", "question": "What is the average length in feet of the bridges?", "rationale": ["Identify the table that contains the relevant data: the 'bridge' table holds information about bridges, including their lengths in feet.", "Determine the specific column needed for the average calculation: the 'length_feet' column is used to find the average length of the bridges.", "Use the AVG() function to calculate the average of the 'length_feet' column.", "Construct the SQL query to select the average length in feet from the 'bridge' table."], "pred_sql": "SELECT AVG(length_feet) AS average_length_feet FROM bridge;", "gold_sql": "SELECT avg(length_feet) FROM bridge", "source_tables": ["bridge"]}
{"sample_id": 6949, "db_id": "architecture", "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?", "rationale": ["Identify the table that contains the information about mills, which is the 'mill' table.", "Determine the columns needed from the 'mill' table, which are 'name' and 'built_year'.", "Specify the condition to filter the mills by their type, which is 'Grondzeiler'.", "Construct the SQL SELECT statement to retrieve the specified columns from the 'mill' table where the type matches 'Grondzeiler'."], "pred_sql": "SELECT name, built_year FROM mill WHERE type = 'Grondzeiler';", "gold_sql": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'", "source_tables": ["mill"]}
{"sample_id": 6950, "db_id": "architecture", "question": "What are the distinct names and nationalities of the architects who have ever built a mill?", "rationale": ["Identify the tables involved: 'architect' and 'mill'.", "Determine the relationship between the tables: 'mill' has a foreign key 'architect_id' that references 'architect.id'.", "Select the distinct names and nationalities from the 'architect' table.", "Use a JOIN clause to combine 'architect' and 'mill' based on the foreign key relationship.", "Construct the SQL query to select the required fields with DISTINCT to avoid duplicates."], "pred_sql": "SELECT DISTINCT a.name, a.nationality FROM architect a JOIN mill m ON a.id = m.architect_id;", "gold_sql": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id", "source_tables": ["architect", "mill"]}
{"sample_id": 6951, "db_id": "architecture", "question": "What are the names of the mills which are not located in 'Donceel'?", "rationale": ["Identify the table that contains the information about mills, which is the 'mill' table.", "Determine the column that holds the location information, which is the 'location' column in the 'mill' table.", "Formulate a query to select the 'name' column from the 'mill' table where the 'location' is not equal to 'Donceel'."], "pred_sql": "SELECT name FROM mill WHERE location != 'Donceel';", "gold_sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'", "source_tables": ["mill"]}
{"sample_id": 6952, "db_id": "architecture", "question": "What are the distinct types of mills that are built by American or Canadian architects?", "rationale": ["Identify the relevant tables: We need to look at the 'mill' table for mill types and the 'architect' table for nationality.", "We need to join the 'mill' table with the 'architect' table using the foreign key 'architect_id' to link mills to their respective architects.", "We want to filter the results to include only those architects who are either 'American' or 'Canadian'.", "Finally, we need to select distinct types of mills to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT type FROM mill JOIN architect ON mill.architect_id = architect.id WHERE architect.nationality IN ('American', 'Canadian');", "gold_sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'", "source_tables": ["architect", "mill"]}
{"sample_id": 6953, "db_id": "architecture", "question": "What are the ids and names of the architects who built at least 3 bridges ?", "rationale": ["Identify the tables involved: 'architect' and 'bridge'.", "We need to retrieve the 'id' and 'name' from the 'architect' table.", "To find architects who built at least 3 bridges, we need to join the 'architect' table with the 'bridge' table on the 'architect_id'.", "We will group the results by architect's id and name to aggregate the number of bridges each architect has built.", "Using the HAVING clause, we will filter the groups to include only those architects who have built 3 or more bridges."], "pred_sql": "SELECT architect.id, architect.name \nFROM architect \nJOIN bridge ON architect.id = bridge.architect_id \nGROUP BY architect.id, architect.name \nHAVING COUNT(bridge.id) >= 3;", "gold_sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3", "source_tables": ["architect", "bridge"]}
{"sample_id": 6954, "db_id": "architecture", "question": "What is the id, name and nationality of the architect who built most mills?", "rationale": ["Identify the relevant tables: 'architect' and 'mill'.", "We need to find the architect who built the most mills, so we will join the 'architect' table with the 'mill' table on the 'architect_id'.", "Select the required fields: 'id', 'name', and 'nationality' from the 'architect' table.", "Group the results by architect's id, name, and nationality to count the number of mills each architect built.", "Order the results by the count of mills in descending order to get the architect with the most mills at the top.", "Limit the results to 1 to get only the architect who built the most mills."], "pred_sql": "SELECT a.id, a.name, a.nationality \nFROM architect a \nJOIN mill m ON a.id = m.architect_id \nGROUP BY a.id, a.name, a.nationality \nORDER BY COUNT(m.id) DESC \nLIMIT 1;", "gold_sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "source_tables": ["architect", "mill"]}
{"sample_id": 6955, "db_id": "architecture", "question": "What are the ids, names and genders of the architects who built two bridges or one mill?", "rationale": ["Identify the required columns: ids, names, and genders of architects.", "Determine the tables involved: architect, bridge, and mill.", "Use LEFT JOIN to connect the architect table with the bridge and mill tables based on the architect_id.", "Group the results by architect id to aggregate the counts of bridges and mills associated with each architect.", "Use the HAVING clause to filter architects who have built at least two bridges or one mill."], "pred_sql": "SELECT a.id, a.name, a.gender \nFROM architect a \nLEFT JOIN bridge b ON a.id = b.architect_id \nLEFT JOIN mill m ON a.id = m.architect_id \nGROUP BY a.id \nHAVING COUNT(DISTINCT b.id) >= 2 OR COUNT(DISTINCT m.id) >= 1;", "gold_sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1", "source_tables": ["architect", "bridge", "mill"]}
{"sample_id": 6956, "db_id": "architecture", "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "rationale": ["Identify the table that contains the information about bridges, which is the 'bridge' table.", "Determine the relevant column that contains the location of the bridges, which is the 'location' column.", "The user is interested in bridges with specific names, so we will use a WHERE clause to filter the results based on the 'name' column.", "The user provided two names: 'Kolob Arch' and 'Rainbow Bridge', so we will use the IN operator to specify these names in the query."], "pred_sql": "SELECT location FROM bridge WHERE name IN ('Kolob Arch', 'Rainbow Bridge');", "gold_sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'", "source_tables": ["bridge"]}
{"sample_id": 6957, "db_id": "architecture", "question": "Which of the mill names contains the french word 'Moulin'?", "rationale": ["Identify the table that contains the mill names, which is the 'mill' table.", "Determine the column that holds the names of the mills, which is the 'name' column in the 'mill' table.", "Formulate a query to select the 'name' column from the 'mill' table where the name contains the word 'Moulin'.", "Use the SQL LIKE operator with wildcards to find names that include 'Moulin' anywhere in the string."], "pred_sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%';", "gold_sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "source_tables": ["mill"]}
{"sample_id": 6958, "db_id": "architecture", "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "rationale": ["Identify the tables involved: 'mill', 'architect', and 'bridge'.", "We need to find mills built by architects who have also built a bridge longer than 80 meters.", "This requires a JOIN between the 'mill' and 'architect' tables on 'architect_id', and another JOIN between 'architect' and 'bridge' on 'id'.", "We will filter the results using a WHERE clause to only include bridges with a length greater than 80 meters.", "Finally, we will select the distinct names of the mills from the resulting dataset."], "pred_sql": "SELECT DISTINCT m.name \nFROM mill m \nJOIN architect a ON m.architect_id = a.id \nJOIN bridge b ON a.id = b.architect_id \nWHERE b.length_meters > '80';", "gold_sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80", "source_tables": ["architect", "bridge", "mill"]}
{"sample_id": 6959, "db_id": "architecture", "question": "What is the most common mill type, and how many are there?", "rationale": ["Identify the table that contains the information about mill types, which is the 'mill' table.", "To find the most common mill type, we need to count the occurrences of each type in the 'mill' table.", "Use the COUNT() function to count the number of mills for each type.", "Group the results by the 'type' column to aggregate the counts for each mill type.", "Order the results in descending order based on the count to get the most common type at the top.", "Limit the results to 1 to get only the most common mill type."], "pred_sql": "SELECT type, COUNT(*) as count FROM mill GROUP BY type ORDER BY count DESC LIMIT 1;", "gold_sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "source_tables": ["mill"]}
{"sample_id": 6960, "db_id": "architecture", "question": "How many architects haven't built a mill before year 1850?", "rationale": ["Identify the architects from the 'architect' table.", "Join the 'mill' table to the 'architect' table using the 'architect_id' foreign key.", "Filter the results to include only those mills that were built before the year 1850.", "Use a LEFT JOIN to ensure that we include architects who have no mills built before 1850.", "Count the distinct architects where the mill ID is NULL, indicating they have not built any mills before 1850."], "pred_sql": "SELECT COUNT(DISTINCT a.id) AS architects_without_mills_before_1850\nFROM architect a\nLEFT JOIN mill m ON a.id = m.architect_id AND m.built_year < '1850'\nWHERE m.id IS NULL;", "gold_sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );", "source_tables": ["architect", "mill"]}
{"sample_id": 6961, "db_id": "architecture", "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "rationale": ["Identify the tables involved: 'bridge' and 'architect'.", "We need to select the 'name' of the bridges, so we will focus on the 'bridge' table.", "To filter the bridges designed by American architects, we need to join the 'bridge' table with the 'architect' table on the 'architect_id'.", "We will apply a WHERE clause to filter architects by nationality, specifically 'American'.", "Finally, we will sort the results by the 'length_feet' column in the 'bridge' table."], "pred_sql": "SELECT bridge.name FROM bridge JOIN architect ON bridge.architect_id = architect.id WHERE architect.nationality = 'American' ORDER BY bridge.length_feet;", "gold_sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet", "source_tables": ["architect", "bridge"]}
{"sample_id": 6962, "db_id": "culture_company", "question": "How many book clubs are there?", "rationale": ["The user wants to know the total number of book clubs.", "To get this information, we need to count the entries in the 'book_club' table.", "We will use the COUNT() function to count all rows in the 'book_club' table.", "The SQL query will select the count and label it as 'total_book_clubs'."], "pred_sql": "SELECT COUNT(*) AS total_book_clubs FROM book_club;", "gold_sql": "SELECT count(*) FROM book_club", "source_tables": ["book_club"]}
{"sample_id": 6963, "db_id": "culture_company", "question": "Count the number of book clubs.", "rationale": ["Identify the table that contains the information about book clubs, which is the 'book_club' table.", "To count the number of entries (book clubs) in this table, we will use the COUNT() function.", "The SQL query will select the count of all rows from the 'book_club' table and label it as 'number_of_book_clubs'."], "pred_sql": "SELECT COUNT(*) AS number_of_book_clubs FROM book_club;", "gold_sql": "SELECT count(*) FROM book_club", "source_tables": ["book_club"]}
{"sample_id": 6964, "db_id": "culture_company", "question": "show the titles, and authors or editors for all books made after the year 1989.", "rationale": ["Identify the relevant table: The query is about books, so we will use the 'book_club' table.", "Determine the columns to select: We need to show the titles and authors or editors, which correspond to 'Book_Title' and 'Author_or_Editor' columns.", "Specify the condition: We want books made after the year 1989, which means we need to filter the results where the 'Year' column is greater than '1989'.", "Construct the SQL query: Combine the selected columns, the table name, and the condition into a complete SQL statement."], "pred_sql": "SELECT Book_Title, Author_or_Editor FROM book_club WHERE Year > '1989';", "gold_sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "source_tables": ["book_club"]}
{"sample_id": 6965, "db_id": "culture_company", "question": "What are the titles and authors or editors that correspond to books made after 1989?", "rationale": ["Identify the relevant table: The query is about books, so we will use the 'book_club' table.", "Determine the columns needed: We need the 'Book_Title' and 'Author_or_Editor' columns.", "Set the condition for the query: We want books published after 1989, which means we need to filter the 'Year' column to be greater than '1989'.", "Construct the SQL SELECT statement: We will select 'Book_Title' and 'Author_or_Editor' from the 'book_club' table with the specified condition."], "pred_sql": "SELECT Book_Title, Author_or_Editor FROM book_club WHERE Year > '1989';", "gold_sql": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989", "source_tables": ["book_club"]}
{"sample_id": 6966, "db_id": "culture_company", "question": "Show all distinct publishers for books.", "rationale": ["Identify the table that contains the information about publishers, which is the 'book_club' table.", "Determine the specific column that holds the publisher information, which is 'Publisher'.", "Since the request is to show all distinct publishers, use the DISTINCT keyword to ensure that duplicate publishers are not included in the results.", "Construct the SQL query to select distinct publishers from the 'book_club' table."], "pred_sql": "SELECT DISTINCT Publisher FROM book_club;", "gold_sql": "SELECT DISTINCT publisher FROM book_club", "source_tables": ["book_club"]}
{"sample_id": 6967, "db_id": "culture_company", "question": "What are all the different book publishers?", "rationale": ["The user wants to know all the different book publishers.", "To get distinct publishers, we need to select the 'Publisher' column from the 'book_club' table.", "Using 'DISTINCT' will ensure that we only get unique publisher names without duplicates."], "pred_sql": "SELECT DISTINCT Publisher FROM book_club;", "gold_sql": "SELECT DISTINCT publisher FROM book_club", "source_tables": ["book_club"]}
{"sample_id": 6968, "db_id": "culture_company", "question": "Show the years, book titles, and publishers for all books, in descending order by year.", "rationale": ["Identify the columns needed: Year, Book_Title, and Publisher from the book_club table.", "Determine the order of the results: the user requested the results to be in descending order by Year.", "Construct the SQL SELECT statement to retrieve the specified columns from the book_club table.", "Add the ORDER BY clause to sort the results by Year in descending order."], "pred_sql": "SELECT Year, Book_Title, Publisher FROM book_club ORDER BY Year DESC;", "gold_sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "source_tables": ["book_club"]}
{"sample_id": 6969, "db_id": "culture_company", "question": "What are the years, titles, and publishers for all books, ordered by year descending?", "rationale": ["Identify the columns needed: Year, Book_Title, and Publisher from the book_club table.", "Determine the table to query: book_club.", "Specify the order of results: order by Year in descending order.", "Construct the SQL SELECT statement to retrieve the specified columns and apply the ordering."], "pred_sql": "SELECT Year, Book_Title, Publisher FROM book_club ORDER BY Year DESC;", "gold_sql": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC", "source_tables": ["book_club"]}
{"sample_id": 6970, "db_id": "culture_company", "question": "Show all publishers and the number of books for each publisher.", "rationale": ["Identify the table that contains the relevant data: the 'book_club' table has the 'Publisher' and 'Book_Title' columns.", "To count the number of books for each publisher, we need to use the COUNT() function.", "We will group the results by the 'Publisher' column to get the count for each publisher.", "The final SQL query will select the 'Publisher' and the count of books, using GROUP BY to aggregate the results."], "pred_sql": "SELECT Publisher, COUNT(*) AS Number_of_Books FROM book_club GROUP BY Publisher;", "gold_sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "source_tables": ["book_club"]}
{"sample_id": 6971, "db_id": "culture_company", "question": "How many books are there for each publisher?", "rationale": ["Identify the relevant table: The query is about books, so we will use the 'book_club' table.", "Determine the required information: We need to count the number of books for each publisher.", "Use the COUNT() function: This function will help us count the number of entries for each publisher.", "Group the results: To get the count for each publisher, we will use the GROUP BY clause on the 'Publisher' column.", "Construct the SQL query: Combine the SELECT statement with the COUNT function and GROUP BY clause."], "pred_sql": "SELECT Publisher, COUNT(*) AS Book_Count FROM book_club GROUP BY Publisher;", "gold_sql": "SELECT publisher ,  count(*) FROM book_club GROUP BY publisher", "source_tables": ["book_club"]}
{"sample_id": 6972, "db_id": "culture_company", "question": "What is the publisher with most number of books?", "rationale": ["Identify the relevant table: The query is asking about publishers, which relates to the 'book_club' table.", "Determine the required information: We need to find the publisher with the most number of books, which means we need to count the number of entries for each publisher.", "Use the COUNT function: We will use COUNT(*) to count the number of books for each publisher.", "Group the results: We will use GROUP BY Publisher to aggregate the counts by publisher.", "Order the results: To find the publisher with the most books, we will order the results in descending order by the count of books.", "Limit the results: We will use LIMIT 1 to get only the publisher with the highest count."], "pred_sql": "SELECT Publisher, COUNT(*) as Book_Count FROM book_club GROUP BY Publisher ORDER BY Book_Count DESC LIMIT 1;", "gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["book_club"]}
{"sample_id": 6973, "db_id": "culture_company", "question": "Return the publisher that has published the most books.", "rationale": ["Identify the relevant table: The query requires information about publishers, which is found in the 'book_club' table.", "Determine the required information: We need to find the publisher that has published the most books, which implies counting the number of entries for each publisher.", "Use the COUNT function: To count the number of books published by each publisher, we will use the COUNT function in SQL.", "Group the results: We will group the results by the 'Publisher' column to aggregate the counts for each publisher.", "Order the results: To find the publisher with the most books, we will order the results in descending order based on the count of books.", "Limit the results: Since we only want the publisher with the most books, we will limit the results to 1."], "pred_sql": "SELECT Publisher FROM book_club GROUP BY Publisher ORDER BY COUNT(*) DESC LIMIT 1;", "gold_sql": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1", "source_tables": ["book_club"]}
{"sample_id": 6974, "db_id": "culture_company", "question": "Show all book categories and the number of books in each category.", "rationale": ["Identify the table that contains the relevant data: The 'book_club' table contains the 'Category' and we need to count the number of books in each category.", "Use the SELECT statement to specify the columns we want: We want to select 'Category' and the count of books.", "Use the COUNT() function to count the number of entries for each category.", "Group the results by 'Category' using the GROUP BY clause to aggregate the counts for each unique category."], "pred_sql": "SELECT Category, COUNT(*) AS Number_of_Books FROM book_club GROUP BY Category;", "gold_sql": "SELECT category ,  count(*) FROM book_club GROUP BY category", "source_tables": ["book_club"]}
{"sample_id": 6975, "db_id": "culture_company", "question": "How many books fall into each category?", "rationale": ["Identify the table that contains the relevant data, which is the 'book_club' table.", "Determine the column that represents the category of the books, which is 'Category'.", "To count the number of books in each category, use the COUNT() function.", "Group the results by the 'Category' column to get the count for each distinct category.", "Construct the SQL query to select the 'Category' and the count of books, grouping by 'Category'."], "pred_sql": "SELECT Category, COUNT(*) AS Book_Count FROM book_club GROUP BY Category;", "gold_sql": "SELECT category ,  count(*) FROM book_club GROUP BY category", "source_tables": ["book_club"]}
{"sample_id": 6976, "db_id": "culture_company", "question": "List categories that have at least two books after year 1989.", "rationale": ["Identify the relevant table: The query requires information about books, so we will use the 'book_club' table.", "Filter the records: We need to consider only those books published after the year 1989. This will be done using a WHERE clause: 'Year > '1989'.", "Group the results: Since we want to count the number of books in each category, we will use the GROUP BY clause on the 'Category' column.", "Count the books: We need to ensure that each category has at least two books. This will be done using the HAVING clause with COUNT(Book_Title) >= 2."], "pred_sql": "SELECT Category FROM book_club WHERE Year > '1989' GROUP BY Category HAVING COUNT(Book_Title) >= 2;", "gold_sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "source_tables": ["book_club"]}
{"sample_id": 6977, "db_id": "culture_company", "question": "What categories have two or more corresponding books that were made after 1989?", "rationale": ["Identify the relevant table: The query pertains to the 'book_club' table since we are interested in book categories.", "Filter the records: We need to consider only those books published after 1989, so we will use a WHERE clause to filter the 'Year' column.", "Group the results: To find categories with two or more books, we will group the results by the 'Category' column.", "Count the books in each category: We will use the COUNT function to count the number of books in each category.", "Set the condition for the count: We will use the HAVING clause to filter groups that have a count of 2 or more."], "pred_sql": "SELECT Category FROM book_club WHERE Year > '1989' GROUP BY Category HAVING COUNT(*) >= 2;", "gold_sql": "SELECT category FROM book_club WHERE YEAR  >  1989 GROUP BY category HAVING count(*)  >=  2", "source_tables": ["book_club"]}
{"sample_id": 6978, "db_id": "culture_company", "question": "Show publishers with a book published in 1989 and a book in 1990.", "rationale": ["Identify the table to query: The relevant table is 'book_club' as it contains information about books and their publishers.", "Determine the years of interest: The user is interested in books published in 1989 and 1990.", "Construct the SQL query to select distinct publishers: We need to select the 'Publisher' column from the 'book_club' table.", "Filter the results to include only those published in 1989 and 1990: This can be done using a WHERE clause with the condition 'Year IN (1989, 1990)'.", "Group the results by publisher: We will use GROUP BY to group the results by the 'Publisher' column.", "Ensure that the publisher has books in both years: We will use HAVING COUNT(DISTINCT Year) = 2 to ensure that the publisher has books published in both years."], "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE Year IN ('1989', '1990') GROUP BY Publisher HAVING COUNT(DISTINCT Year) = 2;", "gold_sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "source_tables": ["book_club"]}
{"sample_id": 6979, "db_id": "culture_company", "question": "What are the publishers who have published a book in both 1989 and 1990?", "rationale": ["Identify the relevant table: The query pertains to publishers of books, so we will use the 'book_club' table.", "Determine the years of interest: The years specified in the query are 1989 and 1990.", "Select the Publisher column: We need to retrieve the names of publishers, so we will select the 'Publisher' column.", "Filter the records for the specified years: We will use a WHERE clause to filter records where the 'Year' is either '1989' or '1990'.", "Group the results by Publisher: To find publishers who published in both years, we will group the results by the 'Publisher' column.", "Count the distinct years: We will use the HAVING clause to ensure that we only include publishers who have published in both years, which means the count of distinct years should be 2."], "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE Year IN ('1989', '1990') GROUP BY Publisher HAVING COUNT(DISTINCT Year) = 2;", "gold_sql": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990", "source_tables": ["book_club"]}
{"sample_id": 6980, "db_id": "culture_company", "question": "Show all publishers which do not have a book in 1989.", "rationale": ["Identify the table that contains the publisher information, which is the 'book_club' table.", "We need to find publishers that do not have any books published in the year 1989.", "To do this, we can use a subquery to find all 'book_club_id's that have a Year of '1989'.", "Then, we can select distinct publishers from the 'book_club' table where the 'book_club_id' is not in the list of 'book_club_id's from the subquery."], "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE book_club_id NOT IN (SELECT book_club_id FROM book_club WHERE Year = '1989');", "gold_sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "source_tables": ["book_club"]}
{"sample_id": 6981, "db_id": "culture_company", "question": "Which publishers did not publish a book in 1989?", "rationale": ["Identify the relevant table: The query pertains to publishers, which are found in the 'book_club' table.", "Determine the condition: We need to find publishers that did not publish a book in the year 1989.", "Construct the SQL query: We will select distinct publishers from the 'book_club' table where the Year is not equal to '1989'.", "Include a condition to handle cases where the Year might be NULL, ensuring we capture all publishers that have no entries for 1989."], "pred_sql": "SELECT DISTINCT Publisher FROM book_club WHERE Year != '1989' OR Year IS NULL;", "gold_sql": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989", "source_tables": ["book_club"]}
{"sample_id": 6982, "db_id": "culture_company", "question": "Show all movie titles, years, and directors, ordered by budget.", "rationale": ["Identify the table that contains the required information: The 'movie' table has the columns Title, Year, and Director.", "Select the columns needed for the output: We need to select Title, Year, and Director from the movie table.", "Specify the order of the results: The results should be ordered by the Budget_million column in ascending order.", "Construct the SQL query using the SELECT statement, specifying the columns and the ORDER BY clause."], "pred_sql": "SELECT Title, Year, Director FROM movie ORDER BY Budget_million;", "gold_sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "source_tables": ["movie"]}
{"sample_id": 6983, "db_id": "culture_company", "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?", "rationale": ["Identify the table that contains the required information: The 'movie' table has the columns Title, Year, and Director.", "Determine the columns to select: We need to select Title, Year, and Director from the movie table.", "Specify the order of the results: The results should be ordered by the Budget_million column in ascending order.", "Construct the SQL query using the SELECT statement, specifying the columns and the ORDER BY clause."], "pred_sql": "SELECT Title, Year, Director FROM movie ORDER BY Budget_million;", "gold_sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "source_tables": ["movie"]}
{"sample_id": 6984, "db_id": "culture_company", "question": "How many movie directors are there?", "rationale": ["Identify the table that contains information about movie directors, which is the 'movie' table.", "To find the number of unique directors, we need to count distinct entries in the 'Director' column.", "The SQL query will use the COUNT function along with DISTINCT to ensure we only count unique directors."], "pred_sql": "SELECT COUNT(DISTINCT Director) AS NumberOfDirectors FROM movie;", "gold_sql": "SELECT COUNT (DISTINCT director) FROM movie", "source_tables": ["movie"]}
{"sample_id": 6985, "db_id": "culture_company", "question": "Count the number of different directors.", "rationale": ["Identify the table that contains the information about directors, which is the 'movie' table.", "To count the number of different directors, we need to use the COUNT function along with DISTINCT to ensure we only count unique directors.", "The SQL query will select the count of distinct directors from the 'movie' table."], "pred_sql": "SELECT COUNT(DISTINCT Director) AS different_directors FROM movie;", "gold_sql": "SELECT COUNT (DISTINCT director) FROM movie", "source_tables": ["movie"]}
{"sample_id": 6986, "db_id": "culture_company", "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?", "rationale": ["Identify the relevant table: The query pertains to movies, so we will use the 'movie' table.", "Determine the columns to select: We need the 'Title' and 'Director' of the movie.", "Set the condition for the year: We want movies released in the year 2000 or before, so we will filter with 'Year <= 2000'.", "Order the results: To find the movie with the highest worldwide gross, we will order the results by 'Gross_worldwide' in descending order.", "Limit the results: Since we only need the top result, we will use 'LIMIT 1' to get the movie with the highest gross."], "pred_sql": "SELECT Title, Director FROM movie WHERE Year <= 2000 ORDER BY Gross_worldwide DESC LIMIT 1;", "gold_sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "source_tables": ["movie"]}
{"sample_id": 6987, "db_id": "culture_company", "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.", "rationale": ["Identify the relevant table: The query requires information about movies, so we will use the 'movie' table.", "Determine the columns to select: We need to return the 'Title' and 'Director' of the movie.", "Set the condition for the year: We want movies released in the year 2000 or earlier, so we will use the condition 'Year <= 2000'.", "Find the movie with the highest worldwide gross: To do this, we will order the results by 'Gross_worldwide' in descending order.", "Limit the results to the top entry: Since we only want the movie with the highest gross, we will use 'LIMIT 1' to get only one result."], "pred_sql": "SELECT Title, Director FROM movie WHERE Year <= 2000 ORDER BY Gross_worldwide DESC LIMIT 1;", "gold_sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "source_tables": ["movie"]}
{"sample_id": 6988, "db_id": "culture_company", "question": "Show all director names who have a movie in both year 1999 and 2000.", "rationale": ["Identify the requirement: We need to find directors who have movies released in both 1999 and 2000.", "To achieve this, we can use a self-join on the movie table, where we will join the table with itself based on the director's name.", "We will filter the results to include only those records where one instance of the movie table has the year 1999 and the other has the year 2000.", "Using DISTINCT will ensure that we only get unique director names in the final result."], "pred_sql": "SELECT DISTINCT m1.Director \nFROM movie m1 \nJOIN movie m2 ON m1.Director = m2.Director \nWHERE m1.Year = 1999 AND m2.Year = 2000;", "gold_sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "source_tables": ["movie"]}
{"sample_id": 6989, "db_id": "culture_company", "question": "Which directors had a movie both in the year 1999 and 2000?", "rationale": ["Identify the requirement: We need to find directors who had movies released in both 1999 and 2000.", "We will use a self-join on the movie table to compare two different years for the same director.", "In the self-join, we will alias the movie table as m1 for the year 1999 and m2 for the year 2000.", "We will filter the results using a WHERE clause to ensure m1.Year is 1999 and m2.Year is 2000.", "Finally, we will select distinct directors to avoid duplicates in the results."], "pred_sql": "SELECT DISTINCT m1.Director \nFROM movie m1 \nJOIN movie m2 ON m1.Director = m2.Director \nWHERE m1.Year = 1999 AND m2.Year = 2000;", "gold_sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "source_tables": ["movie"]}
{"sample_id": 6990, "db_id": "culture_company", "question": "Show all director names who have a movie in the year 1999 or 2000.", "rationale": ["Identify the table that contains the information about movies, which is the 'movie' table.", "Determine the relevant column that contains the director names, which is 'Director'.", "Identify the column that contains the year of the movie, which is 'Year'.", "Specify the years of interest, which are 1999 and 2000.", "Use the SQL SELECT statement to retrieve distinct director names from the 'movie' table where the 'Year' is either 1999 or 2000."], "pred_sql": "SELECT DISTINCT Director FROM movie WHERE Year IN (1999, 2000);", "gold_sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "source_tables": ["movie"]}
{"sample_id": 6991, "db_id": "culture_company", "question": "Which directors had a movie in either 1999 or 2000?", "rationale": ["Identify the relevant table: The query pertains to movies, so we will use the 'movie' table.", "Determine the columns needed: We need the 'Director' column to find out which directors had movies in the specified years.", "Specify the condition: We are interested in movies released in either 1999 or 2000.", "Use the DISTINCT keyword: To ensure that each director is listed only once, we will use DISTINCT in our SELECT statement.", "Construct the SQL query: Combine all the elements into a complete SQL query."], "pred_sql": "SELECT DISTINCT Director FROM movie WHERE Year IN (1999, 2000);", "gold_sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "source_tables": ["movie"]}
{"sample_id": 6992, "db_id": "culture_company", "question": "What is the average, maximum, and minimum budget for all movies before 2000.", "rationale": ["Identify the relevant table: The query pertains to movie budgets, so we will use the 'movie' table.", "Determine the columns needed: We need to calculate the average, maximum, and minimum of the 'Budget_million' column.", "Apply the condition: We need to filter the results to include only movies released before the year 2000, which will be done using a WHERE clause.", "Construct the SQL query: We will use aggregate functions AVG(), MAX(), and MIN() on the 'Budget_million' column, and include the appropriate WHERE clause."], "pred_sql": "SELECT AVG(Budget_million) AS average_budget, MAX(Budget_million) AS maximum_budget, MIN(Budget_million) AS minimum_budget FROM movie WHERE Year < 2000;", "gold_sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}
{"sample_id": 6993, "db_id": "culture_company", "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.", "rationale": ["Identify the table that contains budget information, which is the 'movie' table.", "Determine the columns needed: 'Budget_million' for budget values and 'Year' to filter movies made before 2000.", "Use aggregate functions: AVG() for average, MAX() for maximum, and MIN() for minimum budgets.", "Add a WHERE clause to filter the results to include only movies released before the year 2000."], "pred_sql": "SELECT AVG(Budget_million) AS average_budget, MAX(Budget_million) AS maximum_budget, MIN(Budget_million) AS minimum_budget FROM movie WHERE Year < 2000;", "gold_sql": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000", "source_tables": ["movie"]}
{"sample_id": 6994, "db_id": "culture_company", "question": "List all company names with a book published by Alyson.", "rationale": ["Identify the relevant tables: We need to retrieve company names, which are in the 'culture_company' table, and we need to filter based on books published by Alyson, which are in the 'book_club' table.", "Determine the relationship between the tables: The 'culture_company' table has a foreign key 'book_club_id' that references the 'book_club' table. This means we can join these two tables on 'book_club_id'.", "Select the required columns: We need to select the 'Company_name' from the 'culture_company' table.", "Apply the filter condition: We need to filter the results where the 'Author_or_Editor' in the 'book_club' table is 'Alyson'.", "Use DISTINCT to avoid duplicate company names in the result."], "pred_sql": "SELECT DISTINCT culture_company.Company_name \nFROM culture_company \nJOIN book_club ON culture_company.book_club_id = book_club.book_club_id \nWHERE book_club.Author_or_Editor = 'Alyson';", "gold_sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "source_tables": ["culture_company", "book_club"]}
{"sample_id": 6995, "db_id": "culture_company", "question": "What are all the company names that have a book published by Alyson?", "rationale": ["Identify the relevant tables: We need to look at the 'culture_company' table for company names and the 'book_club' table to find books by Alyson.", "Determine the relationship: The 'culture_company' table has a foreign key 'book_club_id' that references the 'book_club' table, allowing us to join these tables.", "Formulate the SQL query: We will select distinct company names from 'culture_company' where the associated book in 'book_club' has 'Alyson' as the author or editor.", "Use a JOIN clause to connect 'culture_company' and 'book_club' on 'book_club_id'.", "Add a WHERE clause to filter results for books authored or edited by 'Alyson'."], "pred_sql": "SELECT DISTINCT culture_company.Company_name \nFROM culture_company \nJOIN book_club ON culture_company.book_club_id = book_club.book_club_id \nWHERE book_club.Author_or_Editor = 'Alyson';", "gold_sql": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'", "source_tables": ["culture_company", "book_club"]}
{"sample_id": 6996, "db_id": "culture_company", "question": "Show the movie titles and book titles for all companies in China.", "rationale": ["Identify the tables needed: culture_company, movie, and book_club.", "Determine the columns to select: movie titles from the movie table and book titles from the book_club table.", "Establish the relationships between the tables using JOINs: culture_company to movie and culture_company to book_club.", "Add a WHERE clause to filter results for companies specifically in China."], "pred_sql": "SELECT movie.Title AS Movie_Title, book_club.Book_Title AS Book_Title\nFROM culture_company\nJOIN movie ON culture_company.movie_id = movie.movie_id\nJOIN book_club ON culture_company.book_club_id = book_club.book_club_id\nWHERE culture_company.Company_name = 'China';", "gold_sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "source_tables": ["culture_company", "movie", "book_club"]}
{"sample_id": 6997, "db_id": "culture_company", "question": "What are the titles of movies and books corresponding to companies incorporated in China?", "rationale": ["Identify the relevant tables: culture_company, movie, and book_club.", "Determine the columns needed: movie titles from the movie table and book titles from the book_club table.", "Establish the relationships between the tables using JOINs: culture_company to movie and culture_company to book_club.", "Filter the results to include only those companies incorporated in China."], "pred_sql": "SELECT movie.Title AS Movie_Title, book_club.Book_Title AS Book_Title\nFROM culture_company\nJOIN movie ON culture_company.movie_id = movie.movie_id\nJOIN book_club ON culture_company.book_club_id = book_club.book_club_id\nWHERE culture_company.Company_name IN (SELECT Company_name FROM culture_company WHERE Incorporated_in = 'China');", "gold_sql": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'", "source_tables": ["culture_company", "movie", "book_club"]}
{"sample_id": 6998, "db_id": "culture_company", "question": "Show all company names with a movie directed in year 1999.", "rationale": ["Identify the relevant tables: We need to retrieve company names, which are in the 'culture_company' table, and we also need information about movies, which are in the 'movie' table.", "Determine the relationship between the tables: The 'culture_company' table has a foreign key 'movie_id' that references the 'movie' table, allowing us to join these two tables.", "Specify the columns to select: We only need the 'Company_name' from the 'culture_company' table.", "Set the condition for the query: We want to filter the results to only include movies released in the year 1999, which is specified in the 'Year' column of the 'movie' table.", "Construct the SQL query: Using a JOIN to combine the two tables and applying the WHERE clause to filter by the year."], "pred_sql": "SELECT culture_company.Company_name \nFROM culture_company \nJOIN movie ON culture_company.movie_id = movie.movie_id \nWHERE movie.Year = 1999;", "gold_sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "source_tables": ["culture_company", "movie"]}
{"sample_id": 6999, "db_id": "culture_company", "question": "What are all company names that have a corresponding movie directed in the year 1999?", "rationale": ["Identify the relevant tables: We need to look at the 'culture_company' and 'movie' tables since we are interested in company names and movie details.", "Determine the relationship: The 'culture_company' table has a foreign key 'movie_id' that references the 'movie' table, allowing us to join these tables.", "Specify the selection criteria: We need to filter the movies to only those released in the year 1999.", "Select distinct company names: Since we want all unique company names associated with those movies, we will use the DISTINCT keyword in our SELECT statement."], "pred_sql": "SELECT DISTINCT culture_company.Company_name \nFROM culture_company \nJOIN movie ON culture_company.movie_id = movie.movie_id \nWHERE movie.Year = 1999;", "gold_sql": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999", "source_tables": ["culture_company", "movie"]}
